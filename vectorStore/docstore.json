[["0",{"pageContent":"{\n  \"title\": \"2016\",\n  \"date\": \"01/08/2017\"\n}\n---\n\nI'm typically forward looking and barely take time to reflect (not to say\nthose two things are mutually exclusive). However, last year was a especially unique and\ncrazy, so in honor of that (and the new blog design) I decided to sit down,\nreflect, and write something.\n\nThis will be roughly chronological going through the big events that took place last\nyear, and will conclude with some books, lectures, and ideas that had a big\nimpact on my thinking and worldview.\n\n## Leaving Facebook\n\nAt the beginning of the year it seemed like I finally arrived at job\nhappiness. In 2015 I helped start the JS Infra team at Facebook. The motivation\nfor building this team came from my experience building the React Native Packager where I noticed that the\ninfrastructure that we're basing our development toolkit on was poorly\nmaintained, bug-ridden and in some cases poorly designed with no hope without a\nfull rewrite (or replacement).\n\nSo we assembled an amazing team of engineers to build out the basic building blocks that\nwould power Facebook's JavaScript development (and hopefully the JS community at large).\n\n<img src=\"/public/images/js_infra.jpg\" />\n_JS Infra sailing off-site. Not in the photo: Christoph Pojer (which was taking the photos). And our\nmanager Tom Occhino_\n\n\nAlthough the JS infra team was deeply technical and in some cases working on\nproblems a few layers removed from the developer experience, we always thought\nit's best to start from the user experience and work our way backwards. For\ninstance, I remember talking to\nsomeone from the Parse team who told me about a metric they used to make sure their\ntools are easy to get started with: TTH, time till hello world. So when the time came to think about how people would get started with React\nNative, it was obvious that the CLI needs to be robust enough to guide the user\nall the way through to see something on the screen within 5 minutes of installation!\n\n```bash\nreact-native init AwesomeProject\ncd AwesomeProject","metadata":{"id":0}}],["1",{"pageContent":"all the way through to see something on the screen within 5 minutes of installation!\n\n```bash\nreact-native init AwesomeProject\ncd AwesomeProject\nreact-native run\n```\n\nAlthough our team wasn't perfect, we had immediate impact starting with the\nfirst half in our existence. We worked on and released Babel 6, which took Babel\nfrom being merely a transpiler to being a platform and a compiler toolkit. We switched over\nFacebook's entire JS infrastructure to use it. And not only used it for transpiling\nit was now being used by teams throughout the company for things like i18n,\naccessibility, optimization and so much more! We fixed Jest and it became a few order\nof magnitudes faster. We continued improving on the React Native packager which\nbecame a central piece of infrastructure at the company (both as a\ndevelopment tool and as a build system).\n\nUnfortunately, not everyone at the company believed that our team's existence is\njustified. There was a big push to work on performance (which I\nthought was justified since the website was very slow). So there was a lot of pressure on\nus to dump everything that we're working on and focus a 100% on performance.\n\nI didn't agree that\nwhat we're doing and the performance goal weren't aligned. But in the\nend I lost the office politics game and our team was all but\ndismantled. Luckily, I had a great manager, and great support from many other\npeople at the company. So I was given a chance to find something I could\nbe as passionate about. But to be honest, my passion had already drifted\ntowards an old but growing side project of mine.\n\n(A new and improved version of the team has now reassembled and are building\namazing things for the JS community -- like the Yarn package manager!)\n\n## Starting Repl.it (the company)\n\nIn 2015 Haya Odeh and I planned to give an old side project of\nours a face-lift -- mostly just for fun. We knew that some people were using\n[Repl.it](https://repl.it) but when we looked, we where surprised to see that there are 10s of","metadata":{"id":1}}],["2",{"pageContent":"ours a face-lift -- mostly just for fun. We knew that some people were using\n[Repl.it](https://repl.it) but when we looked, we where surprised to see that there are 10s of\nthousands of people using it a month. We started researching, visiting our\nusers, and doing surveys. We found that our biggest impact was on physical\nclassrooms across the country and the world. (Which was not that big of a\nsurprise).\n\n<img src=\"/public/images/replit_school.jpg\" />\n_Haya talking to students using Repl.it at the Mountain View High school_\n\n[Repl.it](https://repl.it) was\nalways at least partly about education. Back in school, I was displeased with the fact that every\nclass I went to\nhad to spend hours installing software. And I watched the instructor struggle to\nget everyone's compilers and editors setup (with matching versions). I started\ndreaming up a site where you open a new tab and start coding. And in 2011 that's\nwhat we built and not only did it help with that, we open-sourced the underlying\nexecution engine (built with emscripten) which went to on power many\nlearn-to-code websites (most famously, Codecademy, which I joined as the #1\nemployee).\n\nOne thing lead to another, and my brother Faris joined us in working on the\nproject and we ended up not only redesigning the website, but we added user\naccounts, built a [cloud-based code execution engine](https://repl.it/api) and\nmany smaller features. We also started planning a totally new product on top of\nour core offering -- a classroom product that automates many of the tedious tasks\nwe noticed a teacher has to do to manage their classroom. Things like submitting\nhomework, giving feedback on homework, and tracking student progress.\n\nWe incorporated in May, 2016 with the mission to make programming more\naccessible. We're building powerful yet simple coding interfaces for programmers\nand students. And we're building a platform for teachers that want to bring\nprogramming to their classroom or reach a wider audience online.\n\n### Repl.it classroom","metadata":{"id":2}}],["3",{"pageContent":"and students. And we're building a platform for teachers that want to bring\nprogramming to their classroom or reach a wider audience online.\n\n### Repl.it classroom\n\nWe rushed to build our first major product as a company. After tons of\nresearch and a tight feedback loop with a handful of teachers it was ready for\nthe release just before the fall school season started. We launched in August and much\nto our surprise that put us on an exponential growth curve. Professors at universities\nlike CMU signed up and used us to teach \"Math Background for Machine\nLearning\", followed by MIT, Cornell and many others. Bootcamps like Hack Reactor and App Academy used us for introductory\ncourses. And high-schools across the US, UK, Japan, and elsewhere in the world\nstarted signing up.\n\n<img src=\"https://repl.it/public/images/studentenvironment.png\" />\n_The student environment_\n\n### Partners\n\nWe're so lucky to be in this part of the world -- Silicon Valley is a place where immigrants can\ncome in and build companies. We're double lucky to have found the support and\nmentorship of amazing people. Repl.it is now backed by Bloomberg Beta and Reach\ncapital and I could've never imagined that the founder/investor relationship\ncould be this good. We're still starting out and the journey is only 0.0001%\ncomplete (Facebook likes to say it's 1% complete), but whatever modest success\nwe achieved we couldn't have done it without the support and mentorship of Roy\nBahat, Wayee Chu, Christina Cacioppo, Chris Mather, and Ly Nguyen.\n\n### Repl.it in 2017\n\nWe spent the last quarter of 2016 focused on the core REPL product -- adding\nmore power yet maintaining the simplicity. We added support for [third-party\nlibraries](https://repl.it/site/blog/package-search), implemented a\n[debugger](https://repl.it/site/blog/python-debugger), and live file updates.\nYou can see more on our [blog](https://repl.it/blog).\n\n<img src=\"http://i.imgur.com/aQ6S00P.gif\" />\n_Live file updates_\n\n<img src=\"https://i.imgur.com/oerWaQR.gif\" />\n_Debugging_","metadata":{"id":3}}],["4",{"pageContent":"You can see more on our [blog](https://repl.it/blog).\n\n<img src=\"http://i.imgur.com/aQ6S00P.gif\" />\n_Live file updates_\n\n<img src=\"https://i.imgur.com/oerWaQR.gif\" />\n_Debugging_\n\nWe also grew the team and hired our first employee. This month, we'll be moving\nto our first private office and we're hoping to add more engineers to the team\nsoon. We have a lot of interesting technical challenges, and we'd like to think\nwe're working on an important mission, if that's interesting to you then\nconsider joining us :)\n\nThis year we're going to continue being heads-down focused on product and\ntechnology. We have a lot of interesting features in the pipeline. But most\nimportantly we want to find ways to have our teachers, students, and\nengineers collaborate with each other and build an awesome community.\n\n## Thoughts, books, etc\n\n#### Coming to terms with Physicalism\n\nYou don't notice how much outdated belief you have in your head until you\nsit down and examine them. In a recent talk, [Alan Kay\ndescribes](https://www.youtube.com/watch?v=fhOHn9TClXY&feature=youtu.be&t=1h1m6s)\nhow every 3-5 years he sits down and writes down all his beliefs in an effort to\nupdate them.\n\nThis year I did this for my worldview and my philosophy on the\nnature of the universe. Physicalism is the thesis that everything is\nphysical. That means -- among many other things -- that your mind/soul is a product of the physical processes\nin your body, and it obeys the laws of physics just like an apple falling from a\ntree. The implications here are big and many. It also could be scary, but luckily I was aided\nby a few books that I recommend to anyone who wants to come to terms with this.\n\n#### [Rationality: From AI to Zombies](https://intelligence.org/rationality-ai-zombies/)\n\nTo build an AI you need to understand and describe how the human mind works (and\nhow it often doesn't). This book helped me in a few ways:\n\n* I now understand pervasiveness of cognitive biases and fallacies. In the words","metadata":{"id":4}}],["5",{"pageContent":"how it often doesn't). This book helped me in a few ways:\n\n* I now understand pervasiveness of cognitive biases and fallacies. In the words\nof Richard Feynman: \"You are the easiest person to fool\".\n* Using a mix fables and science the author gently guides you from the default dualist\nbelief (mind is separate from the body/world) to a purely physical world.\n* Presents different ways to think about some of the seeming absurdities of Physicalism (for\nexample, are we all just cogs in the unwinding clock that is the universe?).\n\nThe book has all sorts of tips and tricks to help you face up to the truth. One\nof my favorites is the [\"Litany of\nGendlin\"](https://wiki.lesswrong.com/wiki/Litany_of_Gendlin):\n\n>What is true is already so.<br/>\n>Owning up to it doesn't make it worse.<br/>\n>Not being open about it doesn't make it go away.<br/>\n>And because it's true, it is what is there to be interacted with.<br/>\n>Anything untrue isn't there to be lived.<br/>\n>People can stand what is true,<br/>\n>for they are already enduring it.\n\n#### [The Beginning of Infinity: Explanations That Transform the World](https://www.amazon.com/Beginning-Infinity-Explanations-Transform-World/dp/0143121359)\n\nThis book layed out the basis for a hopeful and optimistic Physicalist\nworldview. It gives people (or universal explainers in general, as\nthe book calls them) a more privilege place in the universe. Yes, we are\n\"chemical scum\" that evolved via Darwinian selection but our reach can be\ninfinite. And our journey has just begun towards the infinite creation of knowledge.\n\n#### Personal Identity\n\nThe concept of \"self\" seems to be a hack. Evolution gave us this abstraction\nbecause it seems to simplify a lot of things -- most importantly,\nself-preservation (so we can take care of ourselves until we procreate). This\nidea started forming in my head in 2015 after reading [Marvin\nMinsky's Society of\nMind](https://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135), which","metadata":{"id":5}}],["6",{"pageContent":"idea started forming in my head in 2015 after reading [Marvin\nMinsky's Society of\nMind](https://www.amazon.com/Society-Mind-Marvin-Minsky/dp/0671657135), which\nplausibly breaks down the mind into modules and presents it as if it's a big\npiece of software.\n\nConsider how split brain patients seem to have two sides of their brains\nbehave somewhat autonomously (as if it's a different person). In this\n[video](https://youtu.be/aCv4K5aStdU?t=1m35s) the patient's right hemisphere is\nshown a word (via his left eye) but he couldn't say what it was. However, when\nhe closed his eyes and started drawing he was able to draw a pan (which is the\nword that he saw).\n\nThis is just scratching the surface, earlier this year I started reading [Reasons\nand Persons](https://www.amazon.com/Reasons-Persons-Derek-Parfit/dp/019824908X)\nby the late Derek Parfit (died a few days ago). It includes all sorts of\nthought experiments that all but destroys the concept of self. I couldn't\nfinish the book because it was too hard and jargony. However, luckily, I found\na course on YouTube titled [Death](https://www.youtube.com/watch?v=p2J7wSuFRl8&list=PLEA18FAF1AD9047B0) that draws heavily from Parfit's work on\npersonal identity. And this completely shattered how I thought about my self and\nmy place in the world.\n\n<img src=\"http://ctl.yale.edu/sites/default/files/kagan.jpg\" />\n\nI'm now more accepting of the fact that I and everyone I know and love\nwill die in the not very distant future. I feel more connected to other\npeople. And finally understand what it means to have an impact in the\nworld (improve lives and reduce suffering).\n\n\n(For a quick primer on the subject I recommend Wait But Why's [\"What Makes You\nYou?\"](http://waitbutwhy.com/2014/12/what-makes-you-you.html) essay).\n\nThanks for reading.","metadata":{"id":6}}],["7",{"pageContent":"{\n  \"title\": \"Easier Concurrent Programming in JavaScript with Async Functions\",\n  \"date\": \"10/31/2015\"\n}\n---\n\nWe're about to introduce async functions internally at Facebook so\nI'm taking the time to  reflect on how this could be a great win for building\nreliable software.\n\nWhen I joined the company, I worked on a team tasked with improving\nphoto upload reliability on the site. We were failing 1 out of 10\npeople that tried to upload a photo album. Which translates to\nmillions of people having terrible experiences on daily basis. One of the first\nthings that we struggled with was understanding the ordering of\noperations. The system was made up of multiple components (Flash for\nimage re-sizing, UIs, Controllers, Servers) that had to asynchronously\ncommunicate via JS and was all done in callbacks. This made debugging\nreally hard. Sometimes callbacks will get lost and never get called,\nat times they will be called multiple times, sometimes errors will\noccur after the callback is called and never gets reported. Not to\nmention all the horrible race conditions that we saw. And this is not something\nthat is limited to Facebook, or that can only happen at our scale. I\nwas in similar situations at small startups too. This can happen in\nany sizable (potentially distributed) system written in JavaScript\nusing callbacks.\n\nWhen I first started learning JavaScript, one of things people praised\nit for was: \"easy concurrent programming\". The argument goes \"it's a\nsingle-threaded process with a strict run-to-completion programming\nmodel and that means you can't have race conditions\". Turns out that\ncan't be further from the truth. The definition of race conditions is\nnot tied to multithreading. It is simply when you have a system that\nis dependent on the sequence of events from multiple components and\nthen the components behave in an unintended way. Which brings me to the\npoint of this post. I want to show that using async functions (or\ngenerally co-routines) you can write programs that makes the expected","metadata":{"id":7}}],["8",{"pageContent":"point of this post. I want to show that using async functions (or\ngenerally co-routines) you can write programs that makes the expected\nordering of events explicit and makes it easier to recover from\nfailures in subcomponents.\n\nI will illustrate this by going through an example of building a\nvending machine. Everything in the vending machine costs 1 cent, but\nthe machine can take in any coin that is worth any arbitrary number of\ncents. A sample run of this machine:\n\n * Insert a quarter\n * Select an item\n * Dispense the item\n * Return 24 cents change\n\nHere is my initial implementation:\n\n* A `VendingMachine` class with two public methods\n* `coin(value)` inputs a coin with a given value in cents to the machine\n* `select(item)` inputs an item selection to the machine\n* Two subcomponents `itemDispenser` and `change` resoponsible for\ndispensing the items and returning the change respectively\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    this.cents = value;\n  }\n\n  select(item) {\n    this.itemDispenser.dispense(item, () => {\n      this.change.return(this.cents - 1);\n    });\n  }\n}\n```\n\nSimple enough. But of course it's missing a few things. First of\nall there is no error handling:\n\n* What if the `itemDispenser` failed? We should of course return all the money.\n* What if the `change` component failed? We should get into broken\nstate so we don't accept any more coins until someone fixes the\nmachine.\n\nLet's add error handling and a broken state.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    let change = this.cents - 1;\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change = this.cents;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n      })\n    });\n  }\n}\n```\n\nNow that we can handle errors from the machine components. What if the","metadata":{"id":8}}],["9",{"pageContent":"}\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n      })\n    });\n  }\n}\n```\n\nNow that we can handle errors from the machine components. What if the\noutside world behaved in an unintended way? In other words, what\nif someone selected an item without paying? What if someone inserted\ntwo coins without selecting an item? Ideally we'd have input queuing,\nbut let's keep it simple for now.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    if (this.cents) {\n      console.error('Processing existing order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    if (!this.cents) {\n      console.error('Please insert a coin');\n      return;\n    }\n\n    let change = this.cents - 1;\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change = this.cents;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n        this.cents = 0;\n      })\n    });\n  }\n}\n```\n\nCan you spot the potential race condition?\nWhat if you inserted a coin, selected an item, then before the machine\ngets a chance to dispense the item and return the change you selected\nanother item? We should make sure `this.cents` is updated right after\nthe selection.\n\n```javascript\nclass VendingMachine {\n  coin(value) {\n    if (this.broken){\n      console.error('Out of order');\n      return;\n    }\n\n    if (this.cents) {\n      console.error('Processing existing order');\n      return;\n    }\n\n    this.cents = value;\n  }\n\n  select(item) {\n    if (!this.cents) {\n      console.error('Please insert a coin');\n      return;\n    }\n\n    let change = this.cents - 1;\n    // Immediately update to avoid race conditions\n    this.cents = 0;\n\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change += 1;\n      }","metadata":{"id":9}}],["10",{"pageContent":"this.cents = 0;\n\n    this.itemDispenser.dispense(item, e => {\n      if (e) {\n        console.error(e.message);\n        // Failed to dispense item, return all the money.\n        change += 1;\n      }\n\n      this.change.return(change, e => {\n        if (e) {\n          this.broken = true;\n        }\n        this.cents = 0;\n      })\n    });\n  }\n}\n```\n\nBut wait, are we really done? What if you inserted a coin, selected an\nitem, and then immediatly inserted another coin? That coin is then\nlost in limbo. We should gaurd the entire the process with another\nstate variable. But the problem is that every time we add a state\nvariable it makes the program harder to understand and\ntest, and presents more race hazards. Who would've thought a program\nwith two input events can be so complex to build reliabily. I'll spare\nyou anymore inspection and iteration and directly jump to what\nany sensible programmer would do when presented with this\nchallenge: build a state machine.\n\n```javascript\nclass VendingMachine {\n  constructor() {\n    this.state = IDLE;\n    this.queue = [];\n  }\n\n  coin(coin) {\n    if (this.state === BROKEN) {\n      return console.error('Machine broken');\n    }\n\n    this.queue.push(coin);\n    this.dispatch();\n  }\n\n  dispatch() {\n    if (this.state !== IDLE) {\n      return;\n    }\n\n    this.cents = this.queue.shift();\n    this.state = WAIT_FOR_SELECT;\n  }\n\n  break(err) {\n   console.error(err.message);\n   this.state = BROKEN;\n  }\n\n  select(item) {\n    if (this.state === IDLE) {\n      return console.error('Please insert coin');\n    }\n\n    if (this.sate !== WAIT_FOR_SELECT) {\n      return console.error('Processing existing order');\n    }\n\n    let change = this.cents - 1;\n    this.itemDespenser.despense(item, err => {\n      if (err) {\n        console.error('Error dispensing item');\n        change += 1;\n        return;\n      }\n\n      this.change.return(change, err => {\n        if (err) {\n          this.break(err);\n          return;\n        }\n        this.state = IDLE;\n        this.dispatch();\n      });\n    });\n  }\n}\n```","metadata":{"id":10}}],["11",{"pageContent":"}\n\n      this.change.return(change, err => {\n        if (err) {\n          this.break(err);\n          return;\n        }\n        this.state = IDLE;\n        this.dispatch();\n      });\n    });\n  }\n}\n```\n\nI think I got it right. But who knows, you wouldn't know by reading\nthe program, you'd need to write a lot of unit tests to convince\nyourself that it works. And then write some pseudocode in comments to\nexplain what you intended to do here for future programmers. But even\nthen there is room for failure. One of the subcomponents can call our\ncallback multiple times causing all kind of failures to happen.\n\nNow that we've explored how hard building something -- that is\nconceptually easy -- using callbacks can be. Let's try with a\nbetter concurrency primitive, namely async functions.\n\n_If you're not familiar with async functions, [read this intro\nfirst](https://jakearchibald.com/2014/es7-async-functions/)._\n\nHere's how we'll structure our code for the `async` version:\n\n* We'll be using a data-structure called `PromiseQueue` (it's really\nsimple and can be implemented in ~20 lines of code)\n* A `PromiseQueue` has two methods `put` and `get`. `get` would return\na promise that can only be resolved once we put something into the queue\n* We'll be using two promise queues, one for the coins and one for the\nitems\n* We'll have a main run loop that will run indefinitely or until the\nmachine breaks\n\n```javascript\nclass VendingMachine {\n  constructor() {\n    this.coins = new PromiseQueue();\n    this.items = new PromiseQueue();\n    this.brokenErr = e;\n    this.run().catch(e => this.brokenErr = e);\n  }\n\n  coin(coin) {\n    if (this.brokenErr) {\n      return console.error('Machine broken', this.brokenErr);\n    }\n    this.coins.put(coin);\n  }\n\n  select(item) {\n    if (this.brokenErr) {\n      return console.error('Machine broken', this.brokenErr);\n    }\n    this.items.put(item);\n  }\n\n  async run(item) {\n    while (1) {\n      let cents = await this.coins.get();\n      let item = await this.items.get();\n      let change = cents - 1;\n\n      try {","metadata":{"id":11}}],["12",{"pageContent":"}\n    this.items.put(item);\n  }\n\n  async run(item) {\n    while (1) {\n      let cents = await this.coins.get();\n      let item = await this.items.get();\n      let change = cents - 1;\n\n      try {\n        await this.itemDispenser.dispense(item);\n      } catch (e) {\n        console.error('Error dispensing item');\n        change = cents;\n      }\n\n      try {\n        await this.change.return(change);\n      } catch (e) {\n        console.error('Error returning change');\n        throw e;\n      }\n    }\n  }\n}\n```\n\nLook how beautiful this is. Everything you need to know about the program you'll know by\nreading the `run` function. A single function that reads exactly like\nhow we described the machine should work. We are even using elementary\ncontrol flow, like try/catch, and while loops! What's more, the entire state\nof the machine are basically local variables. That leaves less room\nfor races to happen. Which brings me to the conclusion:\n\n> [Co-routines are to state machines what recursion is to stacks](http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/)\n\nCo-routines are the generalized form of async functions. Where async\nfunctions can only pause execution while waiting on a promise,\nco-routines allow\nmultiple entry points for functions to suspend and resume\nexecution. [ES6\ngenerator\nfunctions](http://tobyho.com/2013/06/16/what-are-generators/) are an\nexample of a generalized co-routines. So, similar to how recursion\ncan help process nested data-structures without using explicit stacks,\nco-routines helps solve problems involving state without using explicit state machines.","metadata":{"id":12}}],["13",{"pageContent":"{\n  \"title\": \"The dark side of Function.prototype.bind\",\n  \"date\": \"07/02/2012\",\n  \"hidden\": true\n}\n---\n\ntitle:\nauthor: Amjad Masad\ndate:\n\n\n`.bind` is a method found on function objects that statically associates the function with a receiver object `this`. It is implemented in ECMAScript 5 (The current version of JavaScript) and by many JavaScript libraries.\n\nWhen writing Object Oriented JavaScript, you often find it useful to pass object methods as arguments to other functions (callbacks). At a later time when the method is invoked the `this` may change from under your feet to undefined in [Strict Mode](https://developer.mozilla.org/en/JavaScript/Strict_mode) or the window object.\n\nThe following will demonstrate the problem:\n\n\n    var o = { a: 1\n            , getA: function () {return this.a}\n            };\n\n    o.getA(); // 1\n\n    var fn = o.getA;\n    fn(); // undefined\n\n\n\nUsing `.bind`\n\n\n    var o = { a: 1\n            , getA: function () {return this.a}\n            };\n\n    o.getA(); // 1\n\n    var fn = o.getA.bind(o);\n    fn(); // 1\n\n\nDon't be fooled `bind` has its share of weird behavior.\nThis is expected:\n\n\n    var fn = o.getA;\n    fn === o.getA; //true\n\n\nHowever this:\n\n\n    var fn = o.getA;\n    fn === o.getA.bind(o); //false\n\n\n\nThis happens because `.bind` constructs and returns a new function that is statically bound to an object (`o` in our case).\n\nBefore writing this post a quick google search of a typical language feature rant (\"considered harmful\") brought up an excellent [article](http://pmuellr.blogspot.com/2010/06/bind-considered-harmful.html) by @pmuller where he explains the performance and debugging issues associated with `.bind` and his own and other's dislike to the aesthetics of using it. However I found it lacking the real practical issue that would be most annoying and counterintuitive when using `.bind` in client-side JS.","metadata":{"id":13}}],["14",{"pageContent":"When building large JS apps, it's smart to try and approach it in a structured manner and use an MVC-like library like [Backbone](http://backbonejs.org/), others, or create your own thing. Whatever you do, you'll most probably end up with libraries that has views or widgets using a JS \"class\". Consider the following simple editable text widget:\n\n\n    // http://jsfiddle.net/TE2Cq/\n\n    var Editable = function (initialValue) {\n        this.initialValue = initialValue || ''\n        this.$container = $('<div/>').appendTo('body');\n        this.$input = $('<input type=\"text\">').appendTo(this.$container).hide();\n        this.$span = $('<span/>').appendTo(this.$container).text(this.initialValue);\n        this.$reset = $('<button>').appendTo(this.$container).text('reset');\n        this.bindEvents();\n    };\n\n    Editable.prototype.bindEvents = function () {\n        this.$span.click(this.startEdit.bind(this));\n        var that = this;\n        this.$input.blur(this.stopEdit.bind(this)).keydown(function (e) {\n            if (e.which === 13) that.stopEdit();\n        });\n        this.$reset.click(this.reset.bind(this));\n    };\n\n    Editable.prototype.startEdit = function () {\n        this.$span.hide();\n        this.$input.show().val(this.$span.text()).select();\n    };\n\n    Editable.prototype.stopEdit = function () {\n        this.$span.text(this.$input.val()).show();\n        this.$input.hide();\n    };\n\n    Editable.prototype.reset = function () {\n        this.$span.text(this.initialValue);\n    };\n\n\nThis looks great and from a quick look it seems like a library that will allow for extending, sub-classing, overriding, mixins etc. But in reality it isn't as dynamic as a JavaScript class should be. JS classes are really nothing more than a function (constructor) with a prototype and some functions we tend to call \"methods\" in that case attached to it that are by nature not bound and hence free agents that allow for and should be thought of as reusable functions.","metadata":{"id":14}}],["15",{"pageContent":"Let's say I want to use the editable widget so I include the library on my page and instantiate it:\n\n\n    var editable = new Editable('Hello World');\n\n\nIt renders and it does most of what I want from an editable field. However I need this one more confirm dialog step before resetting any editable field. So from my understanding of JavaScript and how prototypes and method (or property) dispatch work, I would intuitively think the following should work:\n\n\n    editable.reset = function () {\n        if (window.confirm('Are you sure you want to reset the text field?')) {\n            Editable.prototype.reset.call(this);\n        }\n    }\n\nThis would successfully override the `reset` method on the instance and be able to call the super method. However clicking the reset button the widget had created before would ignore what we just did here and just execute the original method. This is because we passed it a bound version of the method that on it's own became a living thing that we don't have a reference to and can never easily be unbound as the click event handler.\n\n    $('.greet').click(user.greet.bind(user));\n    // The following will not work since user.greet != user.greet.bind(user)\n    $('.greet').off('click', user.greet);\n\nThe override problem can be easily solved by a bind function that doesn't break [Dynamic Dispatch](http://en.wikipedia.org/wiki/Dynamic_dispatch#JavaScript_Implementation).\n\n    // A simple bind function that takes an Object `obj`\n    // and a method `m` and returns a function that will\n    // lookup the method `m` in `o` and call it with the\n    // object `o` as the context.\n    var bind = function (obj, m) {\n        return function () {\n            obj[m].apply(obj, Array.prototype.slice.call(arguments));\n        };\n    };\n\nYou can see it in action [here](http://jsfiddle.net/TE2Cq/1/).\n\n## Bind all the functions","metadata":{"id":15}}],["16",{"pageContent":"return function () {\n            obj[m].apply(obj, Array.prototype.slice.call(arguments));\n        };\n    };\n\nYou can see it in action [here](http://jsfiddle.net/TE2Cq/1/).\n\n## Bind all the functions\n\nA language like JavaScript is naturally geared towards reuse and if I as a library user that for the most part know what I'm doing, choose to use your (the library creator) function on my own object then I should be able to.\n\nCoffeeScript (and [EcmaScript Next](http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax)) introduces new function syntax that makes it stupidly simple to statically bind functions on objects which is probably going to be convenient for the library creator (I'm guilty of doing it before CoffeeScript many times for the convenience). However it will be a nightmare for users trying to get any of the promised dynamism out of the language, I believe.\n\n\n    class Foo\n      constructor: -> @bar = 1\n      getBar: =>\n        @bar\n\n    foo = new Foo()\n    alert foo.getBar.apply bar: 2 # 1\n\n    Foo::getBar = -> 99\n    # Can't even monkey patch :(\n    alert foo.getBar() # 1\n\n\n\n## Conclusion\n\nI think I like the dynamic nature of JS and would like to use it the way it was built to be used and quit trying to make it act like something it's not. As a community we should promote and enable reuse in classes, modules, widgets, etc. I particularly like libraries which were built with reuse in mind and has clean and readable source code. I've mentioned Backbone before as it's recently becoming one of my favorite libraries, however it's guilty of statically binding methods as handlers to delegated events.","metadata":{"id":16}}],["17",{"pageContent":"{\n  \"title\": \"Caching and Promises\",\n  \"date\": \"03/05/2016\"\n}\n---\n\nIt's fascinating to me how something that can be described so simply can also be\ntricky to implement. Caching is the idea of keeping around results of\ncomputations or outside-world-reads so it's easily accessible the next time\naround.\n\nComplications arise when we have different modules at different times being\ninterested in the same data. And fetching something from memory (cached) is\nfundamentally different from, for example, reading it from disk or a remote\nhost. In JavaScript, the latter is implemented as an asynchronous call. And\nsince we usually don't know the order of calls ahead of time we're left with\nhaving to provide a consistent interface to all callers regardless of where the\ndata is being fetched from. You'd also need to handle cases where callers ask\nfor data concurrently. Meaning that we may get another call while we are still\nfetching the data and now we're left to manage calling the clients back in the\nright order that they called us in.\n\nThe good news is that we can use Promises to:\n\n1. Not have to distinguish between first and subsequent calls\n2. Provide a consistent async interface\n3. Manage callbacks and error propagation\n\n<script src=\"//repl.it/embed/BtUs/11.js\"></script>\n\nA more interesting example would be something that needs to change it's internal\nstate. However, we need to do it in a way that doesn't require synchronous and\nmutative access to the data. One of our criteria is to blur the distinction between readily\navailable data and things we haven't fetched yet. We also don't want different\nmutation calls to effect each other. Ideally, every call would get it's own copy\nof the data that reflect the state of the world at the time of the call.\n\nWe can handle this by chaining promise calls that will result in new instances\nof the data that will also be cached for future use. Regardless of whether calls\nhappen concurrently we maintain a strict order of execution and every call will","metadata":{"id":17}}],["18",{"pageContent":"of the data that will also be cached for future use. Regardless of whether calls\nhappen concurrently we maintain a strict order of execution and every call will\nget a copy of the data without the changes that were made by other callers.\n\n<script src=\"//repl.it/embed/BtUs/12.js\"></script>\n\n------------------------------------------------\n\n### Stores and Loaders\n\nCaching can be hard if we have to continually answer the question: Do we have\nthe data in memory or do we need to fetch it? We just showed how we can use\npromises to simplify this. However, it doesn't take into account function\nparameters. A robust caching system has to be able to associate results with\ninputs, be it URLs, file names, or arbitrary function parameters. To this end we\ncan create a store abstraction that will store things in the form of key/values.\nBut this presents a new challenge of having to synchronize fetching data and\nstoring it.\n\nYou can imagine two `get` calls to the stores for something we don't have a\nresult for yet. Then these two callers would go about concurrently trying to\ncompute or fetch the data and then come back and try to set it in the store. And\nnow we have a duplication of work and something akin to a race condition when it\ncomes to writing the result back to the store. We can add an `isFetching` flag\nto the store but that brings us back to square one of having to manage\ncallbacks. Here again we can use promises to solve this problem. In addition\nto managing callbacks for us they'll provide something which we can call the\n\"loader\" interface.\n\n<script src=\"//repl.it/embed/BtUs/9.js\"></script>\n\nSo instead of having the callers arbitrarily check and set data on the store, we\ncan instead only expose a `get` method that will take a key and a loader\nfunction that if called should return a promise for the value. That way the\nfirst time the `Cache` class encounters a key it will call the loader function\nand cache the promise for any subsequent caller.\n\n### Memoization","metadata":{"id":18}}],["19",{"pageContent":"first time the `Cache` class encounters a key it will call the loader function\nand cache the promise for any subsequent caller.\n\n### Memoization\n\nSo far we've seen how we can remove the burden of having to check whether something\nis in memory or not at every turn. If we\ngeneralize this a bit we can say that callers should *always* call functions\nregardless of the current state. This is commonly referred to as\nmemoization and it allows us to build faster programs without compromising on\nsimplicity. That's partly why frameworks like React are popular -- it unburdens\nthe programmer from dealing with stateful objects like the DOM. You *always* render.\nJust like you *always* call.\n\nAll the caching techniques powered by promises that we talked about here can\ncome in handy when building large programs that conceptually looks like\ngood old simple and stateless programs without compromising on performance.\n\nMy personal experience with this was with building the [React Native\nPackager](https://github.com/facebook/react-native/tree/87245b2d40a865290fbeb4d8f5474fb8b5c1b891/packager)\nand the [module resolver](https://github.com/facebook/node-haste).\nOne of our goals with React Native is to bring the fast feedback loop we're used\nto in web development to native. However, when we looked at\nbundlers in the wild we found that for any sizable project they took\n10s of seconds to recompute the bundle after a single file change.\nSo we had to build our own with performance as the defining feature.\n\nThe entire system was built to be lazy and heavily cached using the techniques\noutlined in this article. When we get a request for a bundle\nwe go through and  apply the module resolution algorithm\nrecursively while reading all the necessary files. And then we compile the files\nin parallel and finally combine everything in a single bundle and generate the\nsourcemaps. Everyone of those steps requires heavy computation and/or I/O. But\nalong the way we cache everything at a granular level. Then the next time we","metadata":{"id":19}}],["20",{"pageContent":"sourcemaps. Everyone of those steps requires heavy computation and/or I/O. But\nalong the way we cache everything at a granular level. Then the next time we\nfan-out in the tree of calls to generate the bundle most things will be cached\nand the result is instantly returned from memory. The whole thing takes up to a\nhundred milliseconds to execute.\n\nWhen a file changes we invalidate the caches concerning that file and we simulate\na request that would go through entire process again but this time recomputing\nparts of the process concerning the changed file (and any other artifacts\naffected by it). This will take less than a second to\nfinish. And by the time the actual request comes in from the client we have\neverything cached!","metadata":{"id":20}}],["21",{"pageContent":"{\n  \"title\": \"John Carmack on Idea Generation\",\n  \"date\": \"03/09/2016\"\n}\n---\n\nLast year at an internal talk at Facebook I was fortunate to see [John\nCarmack](https://en.wikipedia.org/wiki/John_Carmack) speak about his idea generation system. At first I was disappointed\nbecause I was expecting one of Carmack's famous technical talks where he spends hours talking\nnon-stop about programming languages, game development, large scale software\nengineering and many other interesting technical topics.\n\nInstead, he opened with talking about -- what is now a Silicon Valley cliche --\nhow ideas are overrated and execution is everything. Of course, cliches are\nsometimes cliches because they're true. However, things took an interesting turn\nwhen he mentioned the \"Antifragile\" concept.\n\n## Antifragile\n\nA phenomena discovered by Nicholas Nassim Talib that describes things that are\nthe opposite of fragile. We don't currently have a word to describe this in\nEnglish. You might think that words like \"robust\" or \"resilient\" come close\nbut actually those words describe systems that don't break under stress, but\nwhat about things that benefits from stress?\n\nTo me, this was one of those questions that you realize is simple but\nyou're surprised that it hasn't entered your consciousness until this day.\n\nHere is the description from the [Antifragile book](http://www.amazon.com/gp/product/B0083DJWGO/ref=dp-kindle-redirect?ie=UTF8&btkr=1):\n\n>Just as human bones get stronger when subjected to stress and tension, and rumors or riots intensify when someone tries to repress them, many things in life benefit from stress, disorder, volatility, and turmoil. What Taleb has identified and calls “antifragile” is that category of things that not only gain from chaos but need it in order to survive and flourish.\n\nAfter picking up this book and reading it, I was not only able to relate this\nback to Carmack's idea system (more on this later) but saw the world in a slightly different","metadata":{"id":21}}],["22",{"pageContent":"After picking up this book and reading it, I was not only able to relate this\nback to Carmack's idea system (more on this later) but saw the world in a slightly different\nway. To give only one example, I see large open source software as antifragile. The\nmore stress people put the software under the better it becomes. The more\npeople use it in unanticipated ways and the more code path combinations are\nexercised then the more bugs are found and fixed. In contrast, proprietary\nsoftware is usually used in controlled environments all the while building up\nfragility for a major catastrophic event waiting to happen (see [Black Swan\nTheory](https://en.wikipedia.org/wiki/Black_swan_theory)).\n\n## Antifragile Idea Generation\n\nIn programming and many other creative jobs you get many ideas in any single\nday, but you can only implement a fraction of them. The fraction you haven't\nimplemented you might start obsessing about. Everyone has their pet ideas that\nthey go around discussing. The more time this idea spends in your head the less\ncritically you think of it. Now, when the time comes to\nactually try implementing it, if it fails you're left discouraged, embarrassed and might even\nquit the project you're working on.\n\nThis is obviously a fragile system. You start neutral, get a small high when you\nfirst get the idea, and then it starts building up fragility while in your head. If and when it fails it's\ncatastrophic on your productivity.\n\nSo what does an antifragile system for generating ideas look like? First let's\nlay out some criteria:\n\n1. Antifragile systems are -- by definition -- able get the upside but are not\naffected by the downside. That means, we need to be able to get the initial idea\nhigh and the motivation that comes with it.\n2. Failure events must end up making our system stronger. Meaning when an idea\nfails it needs to make the overall system better.\n\nHere is what Carmack thinks an antifragile system might look like:","metadata":{"id":22}}],["23",{"pageContent":"2. Failure events must end up making our system stronger. Meaning when an idea\nfails it needs to make the overall system better.\n\nHere is what Carmack thinks an antifragile system might look like:\n\n1. You are working on a problem and you get an idea and with it the initial idea\nhigh\n2. You should instantly try to defeat your idea -- think of all the ways it\ncould not work, test it out, put it under stress\n3. If the idea survive the brutal scrutiny then it has legs for further\ninvestigations or implementation\n4. If the idea is implemented and it works then that's great\n5. If the idea fails the scrutiny or implementation you can quickly move on to\nthe next idea without feeling the lows because you haven't\nobsessed or talked about it i.e. it's not your pet idea.\n\nCarmack describes how this becomes like a game -- as soon as you get an idea you\ntry to defeat it. You'll be able to generate more ideas because you freed up\nmental space. Furthermore, your existing ideas will\neven be stronger because they survived heavy scrutiny.\n\n## In Practice\n\nI've been using this at work and in my personal life for a few months now and I\nrecommend it to everyone. I end up prototyping a lot more and going through many\niterations of ideas. And that reminded me of my early days of programming. Because I\ndidn't know what was possible or not, I had to vet all my ideas by\ncoding them up. I went through multiple VB projects in any single day.\n\nAt work, we're now focused on JavaScript and web performance, and found this an\nindispensable tool for this type of work. Optimization work (after crushing the\nlow-hanging fruit) is often counter-intuitive and many ideas that sound great in\ntheory end up tanking in practice. So to make progress we need to have a lot of\nideas and try many of them. And this gave me great framework to approach this with.","metadata":{"id":23}}],["24",{"pageContent":"{\n  \"title\": \"Why Learn Compilers\",\n  \"date\": \"12/29/2021\"\n}\n---\n\nA sufficient understanding of computers is impossible without learning how compilers and their parts work. It is like stepping into the computer's mind and seeing how it feels from the inside. Compilers are also some of the most satisfying programs to write. Finally, learning compiler technology can open new artistic avenues for you, and provide a skill bordering on a superpower.\n\n## A most fun sandbox\n\nBecause the most basic compiler architecture is standard, you have limited boundaries and degrees of freedom when designing one. This might sound restricting, but actually, it's freeing because you get to play in a predictable sandbox. \n\nAnd because compilers are largely deterministic closed-system problems -- for each input, there is one and only output -- it makes it really fun to iterate on a program without having to worry about external dependencies or a complicated setup. This lends itself nicely to test-driven development -- you can unit-test the component parts and write end-to-end tests for the compiler as a whole.\n\nWriting the test & debugging framework around compilers can also be really fun. To test a parser, for example, you need to run assertions on massive syntax trees, and you need to output helpful failure messages. You can go as far as writing a Domain-Specific testing language to make testing more pleasant.\n\n## A most magical flow experience\n\nThe most fun I had coding was when I led the JavaScript infrastructure team at Facebook. We were tasked with replacing [JSTransform](https://github.com/facebookarchive/jstransform), a string-manipulation-based JavaScript transpiler. Honestly, it's amazing it worked at all, but it didn't work very well. I resided in NYC but went up to our office in Cambridge to work with one other engineer there. However, I ended up mainly working alone, coming in every day for two weeks and writing code for 10 hours a day. I was in a state of flow.","metadata":{"id":24}}],["25",{"pageContent":"The leading expert on \"flow,\" Csikszentmihályi, identified that for a human to enter a this state, they need to be able to get direct and immediate feedback, for the problem to be well-defined, to have a balance between one's ability level and the challenge, and have a sense of control over the situation. I can't think of a better programming task that hits all those points than writing a compiler.\n\n## Useful skills\n\nI joined Yahoo! for my first job out of college, who'd just acquired a company in my hometown. As part of the acquisition, we were tasked with moving to the Yahoo! stack, and they were adamant about us using YUI instead of jQuery. The task fell on my lap, which felt like a crushing mountain of repetitive work. \n\nLike any good (read: lazy) programmer, I decided to automate the task. The task was more intricate than simply a massive search and replace because you had to deal with many variations of names, formatting, and patterns. I'd been learning about compilers and ASTs, and I figured this was an excellent time to deploy my newfound skills. \n\nFirst, I backfilled into YUI some jQuery-like to make the transition easier. Then I wrote a transformer that took in jQuery code and automatically translated the calls into YUI code. \n\nA many-month project turned into a week project. My colleagues were dumbfounded when they saw the volume of patches flying out of my desk. This is the kind of leverage that compiler technology can give you. \n\n## Do it for the art \n\nWhat do compilers have to do with art? Surprisingly I've found them a great source of inspiration for art projects. \n\nWhen you look at a program in your editor, you're often able to deduce what the program does from its shape or [pattern](https://www.dreamsongs.com/Files/PatternsOfSoftware.pdf). Programs have a visual identity; many are beautiful. So if they have a form, wouldn't it make sense to also have a sound?","metadata":{"id":25}}],["26",{"pageContent":"So how do you make code audible? One way, I thought, is to make running a program sound like something. It wasn't clear how I would do that. A more straightforward idea was to give the syntax tree sound. What does a code block sound like? A statement? A conditional? \n\nI decided to map the sounds from an 808 drum machine to AST node types. Take a listen [here](http://soundofjs.com/), and if you listen to enough programs, I believe you'll be able to identify them in the same way we recognize the shape of a program. You can also toy with the mappings themselves and make them sound differently. \n\n![soundofjs.com screenshot](/public/images/soundofjs.png)\n\nAnother art project that I had the pleasure to play a [small part](https://github.com/nasser/---/commits?author=amasad) in was [Qalb](https://www.albawaba.com/editorchoice/alb-arabic-computer-programming-language-understands-calligraphy-861614), the Arabic programming language. The most fun aspect of the project was not the language or the tooling to which I contributed, but it was the fact that Ramzi, the artist behind the project, showed that you could print programs as Arabic calligraphy tiles.\n\n![qalb program](/public/images/qalb.png)\n\nFinally, I can't talk about compiler art without mentioning [DOMQL](https://amasad.github.io/DOMQL/), a satrical project that add a SQL-like language to the browser and claims it's a better frontend programming experience than JavaScript.\n\n## A better coding UX","metadata":{"id":26}}],["27",{"pageContent":"## A better coding UX\n\nIn my [Computers Doing The Right Thing essay](https://amasad.me/right), I talked about how we can build more delightful software by detecting user intent. I gave the example of deducing the software packages the programmer wanted to install by from the code, and installing them for the user. This is of course, done by parsing import statements in the respective language. The code for this is open-source -- here is, for example, the [Go-based JavaScript parser for that](https://github.com/replit/upm/blob/715e4d1bd301b66b209a6c5cf1345f59aaa0799a/internal/backends/nodejs/grab.go#L91-L216).\n\n![upm in action](https://amasad.me/public/images/import.gif)\n\nTo build delightful coding experiences, it helps to master parsers.I'm incredibly excited about the work we're doing with our live game programming environment: Kaboomjs.\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Preview of upcoming creative coding magic (and like everything we do, multiplayer). <a href=\"https://t.co/7i4KakNpeW\">pic.twitter.com/7i4KakNpeW</a></p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1474455969685901312?ref_src=twsrc%5Etfw\">December 24, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n## What Is It Like to Be a Compiler?\n\nAs a programmer, you spend much of your day conversing with your compiler. If you're not happy at work, there's a good chance it's because you have a bad relationship with your compiler. Maybe it's too slow, taking you out of the flow state. Perhaps it's giving you inscrutable errors. Or maybe the language has undefined edge-cases, and you don't know what kind of code the compiler is emitting. \n\nAll those are reasons to get in and understand how compilers work. Once you do, you'll have a whole new appreciation of programming and how languages are constructed. You'll be able to reason about your programs in new ways, and you can predict how it could go wrong.","metadata":{"id":27}}],["28",{"pageContent":"I hope this inspires you to design a toy programming language or compiler. Last year, at Replit, we ran a [massive programming language jam](https://blog.replit.com/pljamresults), and it turned out to be one of the funniest hackathons we ran. It introduced many people to the joy of language design and compiler construction, and I hope to repeat this again in the future.","metadata":{"id":28}}],["29",{"pageContent":"{\n  \"title\": \"Lesser-Known JavaScript Debugging Techniques\",\n  \"date\": \"03/09/2014\"\n}\n---\n\nAfter I prototype an app I'm building, my time is split between the editor and the browser with the console open. I try to debug as I go to avoid creating a complete mess. Moreover, when I get a bug report for a production app the first thing that I do is try to debug using Chrome devtools, and I usually find the bug without touching my editor. To be effective at that, I had to learn a great deal about the tools available and in this post I’m going to shed light on the lesser-known features and techniques of JavaScript debugging.\n\n## Command Line API\n\nStarted by Firebug and currently implemented in all browsers with a debugger. It has [many useful](https://getfirebug.com/wiki/index.php/Command_Line_API) utility functions such as `$`, `$0`, `keys`, `values` etc. and I highly encourage you to [learn everything about them](https://developers.google.com/chrome-developer-tools/docs/commandline-api).\n\nUntil recently, Chrome DevTools [didn't implement](https://code.google.com/p/chromium/issues/detail?id=168776) the full API, and even after they did, a lot went [undocumented](https://developers.google.com/chrome-developer-tools/docs/commandline-api). The most useful of those functions are:\n\n### debug and monitor\n\nIf you basically live in the console like I do you'd want to be able to add breakpoints to function references without having to go to the source and find the function, especially when debugging production apps with minified source or built source with no source maps.\n\n```js\ndebug(ExampleApp.exampleFunction)\n```\n\nNow every time the `ExampleApp.exampleFunction` is called the debugger will be invoked. To turn it off simply call `undebug` on the same function.\n\nHowever, you often just need to know if the function was called and the arguments passed to it, for that you can use `monitor` and `unmonitor`.\n## Setting up traps","metadata":{"id":29}}],["30",{"pageContent":"However, you often just need to know if the function was called and the arguments passed to it, for that you can use `monitor` and `unmonitor`.\n## Setting up traps\n\nWhen working on a complex system with many modules, it's impossible to know what every part is doing. Beyond the typical `console.log`ing and breakpoint insertion, a good debugging technique is setting up traps with debugger statements to stop and get an idea of what's going on.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Just debugged a link-not-working issue by doing `Event.prototype.preventDefault = function () { debugger; };`. Feeling pretty smooth.</p>&mdash; Domenic Denicola (@domenic) <a href=\"https://twitter.com/domenic/statuses/441758861649661952\">March 7, 2014</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nFor a long time I've had a library of functions that I copy-pasted around to help set up traps. But after a round of polishing I'm releasing it as a stand-alone JavaScript library and a chrome extension called [Debug Utils](https://github.com/amasad/debug_utils). You can find it on [GitHub](https://github.com/amasad/debug_utils) and can install it directly from the [Chrome Webstore](https://chrome.google.com/webstore/detail/debug-utils/djailkkojeahmihdpcelmmobkpepmkcl).\n\n## Enter DebugUtils\n\n### Break on native method call\n\nUnfortunately `debug` and `monitor` don't work on native methods so you need to wrap native methods with functions containing a `debugger` statement, similar to the tweet above, except you probably would want to call the original function after the `debugger` statement. In DebugUtils this is called `$dum` (short for debug utils method).\n\n```js\n$dum(Event.prototype, 'preventDefault');\n```\n\n### Break on custom events","metadata":{"id":30}}],["31",{"pageContent":"```js\n$dum(Event.prototype, 'preventDefault');\n```\n\n### Break on custom events\n\nThe Command Line API provides a [`monitorEvents`](https://developers.google.com/chrome-developer-tools/docs/commandline-api#monitoreventsobject_events) function which is great for debugging DOM events, but it won't work for custom events. For that you want to setup your own debugger or logger function as a handler to an event on an object. In DebugUtils this is called `$duv` (short for debug utils events).\n\n```js\n$duv(exampleModule, 'data');\n```\n\n### Break on property access\n\nOften times, objects can start changing from under your feet. You can [setup object getters and setters](http://johnkpaul.com/blog/2013/07/20/break-on-property-change/) containing a  `debugger` statement to find out what part of the code is responsible. When something changes a given property on your object you will stop and be able to trace back what's changing it. In DebugUtils this is called `$dus`:\n\n```js\n$dus(exampleObject, 'someProperty');\n```\nYou can also break on property read using `$dug`.\n\nFor more documentation and information on DebugUtils, be sure to check out the [Github project](https://github.com/amasad/debug_utils). Happy debugging!\n\n**Edit**: My EmpireJS talk on this subject\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/rcjUR4icvoQ\" frameborder=\"0\" allowfullscreen></iframe>","metadata":{"id":31}}],["32",{"pageContent":"{\n  \"title\": \"Ambition++; Reflecting on a decade of work\",\n  \"date\": \"02/23/2021\"\n}\n---\n\nIt's wild: Almost everything I worked on has become a great success on a global scale. I was struck by this fact earlier today when the news came out that Codecademy, where I was a founding engineer, is now a [fast-growing business](https://twitter.com/amasad/status/1364296435059974149). The news came on the heels of our [Series A announcement](https://venturebeat.com/2021/02/18/replit-raises-20-million-for-collaborative-browser-based-coding/) at [Replit](https://repl.it), where we shared some great numbers too. At Facebook, I was a founding engineer on React Native, which also had a [fantastic last year](https://shopify.engineering/react-native-future-mobile-shopify). And all the [open-source projects](https://amasad.me/2016) I've been part of --  Babel and Jest most famously -- became standard tools that measurably increased productivity and changed industries.\n\nAcross all my work -- the millions of developers we helped mint, the CS teachers we empowered, and the entrepreneurs we enabled -- I've probably had a significant impact on the world economy, perhaps even meaningfully increased productivity. \n\nReflecting on this, first, I'm grateful to be able to be useful on such a large scale. After all, just ten years ago, I was a kid in Amman who'd just graduated from university and was interviewing at random companies (including a cigarette factory for VB6 work that comes with a free carton of cigarettes a week).\n\nSecond, and more importantly, I think it's time to be more ambitious. With every project, I stopped short of what was possible. I let haters & doubters change my plans and assumed a sense of fake humility because that's what people expected.","metadata":{"id":32}}],["33",{"pageContent":"The culmination of my work is Replit, where we're working to give people computer superpowers. We want to nudge the world away from rampant digital consumption to one where there are more creators and entrepreneurs. Anyone anywhere can participate in the digital economy and build and leverage software to better themselves and their communities.\n\nNow that I've seen what's possible in a decade while starting from nothing, in this decade, I'd like to create trillions of dollars in value for the world in the form of better access to technology and tools.\n\nMy only regret is my mum is not here to see all this.","metadata":{"id":33}}],["34",{"pageContent":"{\n  \"title\": \"Dialectical Progress in Programming\",\n  \"date\": \"05/27/2017\"\n}\n---\n\nThe notion of progress in programming is -- as in anything else -- debatable and\nhard to define. For various reasons that are besides the point of this essay I\nbelieve that we're indeed making progress in the art of programming (otherwise\nwhat's the point in getting up in the <s>morning</s> afternoon and going to the\noffice?).\n\nBut how does progress happen in programming? Sometimes it looks like it's an\narbitrary walk in the space of possible languages, frameworks and\narchitectures. I'd like to propose an answer: _programming progresses\nin [dialectical](https://en.wikipedia.org/wiki/Dialectic) fashion_. Meaning what usually follows the current best\npractices and technologies is an opposite in many ways. However, this is usually\nfollowed by a _synthesis_ of these two opposites. In other words, a compromise\nor a _best of both worlds_.\n\nWe can think of this as a [_thesis, antithesis, synthesis_](https://en.wikipedia.org/wiki/Thesis,_antithesis,_synthesis):\n\n>(1) a beginning proposition called a thesis, (2) a negation of that thesis\n called the antithesis, and (3) a synthesis whereby the two conflicting ideas\n are reconciled to form a new proposition.\n\nLet's look at some examples.\n\n### Languages: industrial strength vs developer friendliness\n\n1. Thesis: __industrial strength programming languages__. Languages like Java\nand C++ are type-safe, efficient and work well with large systems. But they're\nalso hard, boring, noisy, and take a long time to compile.\n\n2. Antithesis: __developer friendly languages__. Languages like JavaScript,\nPython, and Ruby are dynamically typed so the syntax is clean and less\nnoisy. They're interpreted so there is no compiler to wait for. And they're fun\nand arguably more productive to work with.\n\n3. Synthesis: __developer friendly and suitable for large scale\nprogramming__. Languages like Go, Rust, and TypeScript are both type-safe,\nefficient and work well at large scales.","metadata":{"id":34}}],["35",{"pageContent":"3. Synthesis: __developer friendly and suitable for large scale\nprogramming__. Languages like Go, Rust, and TypeScript are both type-safe,\nefficient and work well at large scales.\n\n### Web rendering: server-rendered vs client-rendered pages\n\n1. Thesis: __server-rendered pages__. Languages and frameworks powering Web 2.0\nlike PHP and Ruby on Rails can get you to market quickly, with predictable\nperformance, and works well with the rest of the web infrastructure (links,\nsearch engines etc).\n\n2. Antithesis: __client-side rendered pages__. Frameworks like Backbone, React,\nand Angular can create delightful user experiences. But they break the web's\nprotocol (hypertext over TCP) and can be slow to boot up.\n\n3. Synthesis: __universal rendering__. Frameworks like [Next.js](https://github.com/zeit/next.js/) bring us the best\nof both worlds: a great user experience, great initial render time, and great\nsupport for search engines and other web infrastructure.\n\n### Mobile apps: native vs web\n\n1. Thesis: __web applications__. Web 2.0 unleashed the power of the internet and\nbrought us amazing applications like social networking and YouTube. But\nwhen mobile came around, using web tech to build mobile apps created monstrosities\nlike the first Facebook HTML5 app.\n\n2. Antithesis: __native applications__. Native applications brought much better\nuser-experience with gesture support, smooth scrolling, and access to APIs\nlike location and notifications. However, a lot of progress that we made in\nengineering (e.g. continuous deployment, cross-platform development) or in application distribution (just\nvisit a URL) had to be thrown away.\n\n3. Synthesis: __progressive web apps and web tech adapted to native__. PWAs\nand frameworks like React Native bring us the best of both worlds. Access to\nnative (or native-like) APIs and a great user experience but also cross-platform\ndevelopment, continues deployment and better application distribution\nstrategies.\n\n### Conclusion","metadata":{"id":35}}],["36",{"pageContent":"native (or native-like) APIs and a great user experience but also cross-platform\ndevelopment, continues deployment and better application distribution\nstrategies.\n\n### Conclusion\n\nThis framework of thinking about progress in programming seems to apply to a lot\nof what I see happening in programming. There are ongoing developments that I\nlook forward to seeing the synthesis of:\n\n- __Web development build tools__: we started out writing and loading scripts\n  in the browser verbatim but applications getting more complicated lead\n  us to build better languages and frameworks which lead us to\n  introduce ever more complicated build-steps to our web developement and\n  deployment pipelines. However, with browser vendors moving faster on supporting\n  language features and with framework authors acknowledging the problem I think\n  we're going to see a synthesis soon.\n- __IDEs__: when I first started programming it seemed unquestionable that you\n  needed to use an IDE. However, they were slow and bloated. And with the shift\n  towards more dynamic languages there was also a shift towards pure text\n  editors like Textmate and Sublime and a return to Vim and Emacs. However,\n  with editors like Atom that has a richer-than-ever plugin ecosystems it seems\n  like we're headed in a synthesis direction where we use lightweight editors\n  while plugging in static analysis, autocompletion, and other automation tools.\n\nThere are a lot more industry trends that can be described and understood using\nthe dialectical framework of progress. I'd be curious to hear your thoughts\non this and if you think if this framework applies to trends in your programming\ncommunity. I'm best reachable on [twitter](https://twitter.com/amasad). Thanks for reading.","metadata":{"id":36}}],["37",{"pageContent":"{\n  \"title\": \"Disintegrated Development Environments — How Did We Get Here?\",\n  \"image\": \"https://amasad.me/public/images/interlisp.jpeg\",\n  \"date\": \"05/01/2017\",\n  \"description\": \"Development environment fragmentation and the story of Worse is Better vs the Right Thing approach to software engineering\"\n}\n---\n\n[_This essay is an adaptation of my talk at\n[Active Ingredients Conference](http://activeingredients.info/)_]\n\nIt's never been better for programmers, a team of 5 today can build projects and\ncompanies that required hundreds if not thousands of engineers just a few\ndecades ago. So although Fred Brooks was right in that there was \"no silver\nbullet\" which \"by itself promises even an order of magnitude improvement in\nproductivity\" I'd argue that there was a million silver arrows that collectively\ngot us those improvements.\n\n![No Silver Bullet](/public/images/no_silver.jpeg)\n\nMuch of this came through open source software, development tools and open\nsource development tools.\n\n![Silver Arrows](/public/images/silver_arrows.jpeg)\n\nHowever, this happened as a wave of distributed innovation. There was no central\nplanning and no vision — it all happened organically. Which explains\nwhy a lot of our day-to-day development tools overlap, compete, and require a ton\nof compatibility code just to make them work with each other.\n\nLet's take an example. Say you're a JavaScript developer and you use the latest and\ngreatest tools. You write your code in ES2017. But before you ship it to\nyour users you use a compiler like Babel which has to parse your code to compile\nit to ES5. And you also want to bundle your code so you use a bundler like\nWebpack which parses your ES5 code, collect the require/import statements, and\nbundles your code. Finally, you also use a minifer like Uglify which has to also\nparse and then minify your code.\n\n![compiling JavaScript](/public/images/js_compile.jpeg)\n\nYou may have noticed that there is only 3 parse steps in this pipeline, that's","metadata":{"id":37}}],["38",{"pageContent":"parse and then minify your code.\n\n![compiling JavaScript](/public/images/js_compile.jpeg)\n\nYou may have noticed that there is only 3 parse steps in this pipeline, that's\nbecause I ran out of slide space. The browser still needs to parse the code\nbefore it executes it.\n\n![compiling JavaScript 2](/public/images/js_compile2.jpeg)\n\nOk, so what? Well, there is a good chance you're reading this article to kill time\nwhile Webpack is recompiling. *Everything is slow*. There is also a\nquestion of how many parsers, as a community, do we have to write and\nmaintain. Furthermore, there is lot of information loss as we go\ndown the pipeline — you might've had Flow type annotations but those will not\nbe accessible for the minifier to emit optimized code because they're compiled\naway at an earlier step.\n\n(This is only one branch of the development pipeline, there is also the\nIDE/static analysis and code generation that contains similar duplication of\nwork and incompatibilities).\n\nRoughly speaking, we separate our tools by development life-cycle stage:\nauthoring, executing, testing, building, and deployment. Which limits how much\nsharing of information and work can happen between tools.\n\n![so what](/public/images/so_what.jpeg)\n\nOk, then what if we imagined we live in a different world where we've taken a more\n[holistic](https://repl.it/site/blog/holistic) approach to development\nenvironments where we layer tools on top of each other. My IDE knows where and\nhow my code executes and can show me inline information about function calls,\nerror rates, and type information — heck, why won't production crashes translate\ninto local development breakpoints? What if my repo on Github could pull from the\nsame code intelligence service and have a click-to-symbol feature. Etc.\n\n![what if](/public/images/what_if.jpeg)\n\nAlan Kay tells us that computing is \"pop culture\" because we have \"disdain for\nhistory\". Well, I'd like to do better. So in looking at this problem I decided","metadata":{"id":38}}],["39",{"pageContent":"![what if](/public/images/what_if.jpeg)\n\nAlan Kay tells us that computing is \"pop culture\" because we have \"disdain for\nhistory\". Well, I'd like to do better. So in looking at this problem I decided\nto construct a historical narrative to help us understand how we got here.\n\n![poop culture](/public/images/poop_culture.jpeg)\n\n## Worse Is Better\n\n![worse is better](/public/images/worse_is_better.jpeg)\n\nIn March 1990 Gaberial stood in front of crowd of Lisp developers and told them\nthat [\"Worse is Better\"](https://www.dreamsongs.com/RiseOfWorseIsBetter.html). The Lisp community's who's who were in the audience and\nthey weren't very happy with the talk. After the talk, Gerry Sussman was the\nfirst to stand up and claim nonsense. Followed by Carl Hewitt, and there was\nGaberial defending a position that, had the Lisp community understood, maybe the\nworld of software engineering today would've been very different.\n\nSee the Lisp community practiced the Right Thing software philosophy which was\nalso know as \"The MIT Approach\" and they were also known as \"LISP Hackers\".\n\n![lisp](/public/images/lisp.jpeg)\n\nThe larger research community that the Lisp community was part of was operating\nunder a vision of computing that Alan Kay recently mentioned in a [Quora answer](https://www.quora.com/What-made-Xerox-PARC-special-Who-else-today-is-like-them):\n_“The destiny of computers is to become interactive intellectual amplifiers for\neveryone in the world pervasively networked worldwide”_.\n\n![vision](/public/images/vision.jpeg)\n\nThey were building amazing technology. Take for example Interlisp, a\nbootstrapped end-to-end Lisp programming environment that featured a structure\neditor (picture editing AST nodes instead of text), a REPL (with undo, which\nright now is coming back as \"time-traveling debugger\") and among many other things\nautomatic error correction.\n\n![interlisp](/public/images/interlisp.jpeg)\n\nMeanwhile in New Jersey the \"Worse is Better\" folks, also known as \"New Jersey","metadata":{"id":39}}],["40",{"pageContent":"automatic error correction.\n\n![interlisp](/public/images/interlisp.jpeg)\n\nMeanwhile in New Jersey the \"Worse is Better\" folks, also known as \"New Jersey\nStyle\", also known as \"C hackers\" were hacking on the C programming language and\nthe Unix operating system. They had a much more pragmatic approach than the MIT\napproach — they valued, above anything else, a simplicity of\nimplementation. Almost exactly the opposite of what the MIT folks valued, which\nis simplicity of interface, completeness, and correctness.\n\n(I like to imagine a late-night stoner-like conversation between Dennis Ritchie\nand Ken Thompson:\n\n_\"Dude, what if, like, everything was made of files?\"_\n\n_\"Everything?\"_\n\n_\"Yeah, like eeverrryyything\"_\n\n_\"Whoaa\"_)\n\n![meanwhile in new jersey](/public/images/meanwhile_in_nj.jpeg)\n\nBack to Richard Gabriel. After he was lambasted by everyone at the conference he\nwent home, hid his essay, and vowed never to talk about it\nagain. See he knew that in the wrong hands Worse is Better — which although the\nNew Jersey folks were practicing they weren't preaching — could do a lot\nof damage.\n\n![never worse is better](/public/images/never_worse_is_better.jpeg)\n\nA couple of years later Richard hired a young hacker by the name of [Jamie Zawinski](https://www.jwz.org/)\n(later of Netscape fame — and can be found running a nightclub somewhere in\nthe SoMa district of SF). Like most hackers Jamie believed that information\nshould be free so when he found the Worse is Better paper he decided, without\nasking Richard, to [send it](https://www.dreamsongs.com/WorseIsBetter.html) to\nall his friend. It then spread like wildfire across the industry.\n\n![jwz](/public/images/jwz.jpeg)\n\nWhat was supposed to be a wake up call became a self-fulfilling\nprophecy. Richard talks about how \"Large companies (with 3-letter names)\"\n(hint: IBM) used the Worse is Better paper a reference for training employees on\nhow to design software.\n\n![self-full-filing prophecy](/public/images/prophecy.jpeg)","metadata":{"id":40}}],["41",{"pageContent":"(hint: IBM) used the Worse is Better paper a reference for training employees on\nhow to design software.\n\n![self-full-filing prophecy](/public/images/prophecy.jpeg)\n\nLater in his career Richard — realizing that he was responsible for the final nail\nin the coffin that killed the Right Thing approach to software development — began\nwriting against Worse is Better [under a pseudonym](https://www.dreamsongs.com/Files/worse-is-worse.pdf). Legend has it that he\nbecame so confused about this subject that he was once invited to talk about\nit and both argued for and against Worse is Better.\n\n![Richard arguing against worse is better](/public/images/richard_pseudonym.jpeg)\n\nNow that I understand our place in history I can't help but wonder what would've\nhappened if the Right Thing philosophy had won out. If\nour development environment resembled something like Interlisp instead of\nUnix. I think maybe since the main feature of Worse is Better is that — in\nthe words of Richard — \"it spreads like virus\" it had been better for computing to\nadopt this approach to achieve scale. But now what? I think we should be more\nambitious and bring back the Right Thing.\n\n(_In the talk which this is based on I talk a bit about what I'm doing about the\nproblem. I've written briefly about this elsewhere: [\"Building Towards a Holistic Development Service\"](https://repl.it/site/blog/holistic)_)","metadata":{"id":41}}],["42",{"pageContent":"{\n  \"title\": \"Eval as a Service\",\n  \"date\": \"01/17/2016\"\n}\n---\n\nAfter operating under the radar for a while, we're now publicly launching the\n[repl.it code evaluation API](https://repl.it/api) that allows anyone to execute\ncode in whatever language from anywhere on the internet. Here is the story so far:\n\n[repl.it](https://repl.it) and the underlying tech is a project that grew out\nof my frustration from the process of setting up machines to learn\nprogramming. I believed that one of the main turn offs for people wanting to\nlearn how to code was setting up the development environment. That's when I\nthought that putting a REPL on the web was the best way to get started with programming.\n\nIn 2011, and after working on the problem for almost a year we were able to cross-compile\nnumerous language interpreters to JavaScript and we also hand coded some. We\nopen sourced everything along the way and little did we know that our work would\nhelp accelerate a revolution in online programming education.\n\nOur [open source code evaluation infrastructure](https://github.com/replit) was used by companies like\nCodeacademy, Udacity, Bloc, and many others to deliver an in-browser coding\nexperience. Unfortunately, the way we were\ndoing things was pushing the envelope for what browsers could do at the time and they would break our code\nvery often. Coupled with the fact that users had to download megabytes worth\nof JavaScript before being able to do anything made it unreliable for websites\nserving millions of users all over the world. Since then, I stopped using it in\nproduction in favor for a server-based system and to keep myself honest I\nalso deprecated the open source project.\n\nAfter the move, I still got emails from people asking for support on those\nprojects, and I felt guilty for not being able to help. At the same time\nrepl.it was  growing and with it my wallet was\nshrinking. One of the benefits of doing client-side code evaluation was that the cost\nwas practically zero. I considered putting ads on the site but I","metadata":{"id":42}}],["43",{"pageContent":"repl.it was  growing and with it my wallet was\nshrinking. One of the benefits of doing client-side code evaluation was that the cost\nwas practically zero. I considered putting ads on the site but I\ncouldn't do this to our users. Especially because many of them happen to be\nstudents learning as part of classrooms:\n\n<div id=\"fb-root\"></div>\n<script>(function(d, s, id) {\n  var js, fjs = d.getElementsByTagName(s)[0];\n  if (d.getElementById(id)) return;\n  js = d.createElement(s); js.id = id;\n  js.src = \"//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5\";\n  fjs.parentNode.insertBefore(js, fjs);\n}(document, 'script', 'facebook-jssdk'));</script>\n\n<div class=\"fb-post\"\ndata-href=\"https://www.facebook.com/amasad9/posts/772878056174859?pnref=story\"\ndata-width=\"750\">\n<div class=\"fb-xfbml-parse-ignore\">\n<blockquote cite=\"https://www.facebook.com/amasad9/posts/772878056174859\">\n<p>Yesterday we\nvisited a high school in Mountain View where the entire school were learning how\nto code. Hundreds of...</p>Posted by <a href=\"#\" role=\"button\">Amjad Masad</a>\non&nbsp;\n<a href=\"https://www.facebook.com/amasad9/posts/772878056174859\">Saturday, October\n24, 2015</a></blockquote></div></div>\n\nAfter getting so many emails from people asking for support I decided to offer\nour code [evaluation infrastructure as a service](https://repl.it/api). Since then we had a few customers use us -- enough to cover repl.it's cost. More than anything, I'm happy that our customers\nare deriving a lot of value from the service and in many cases they're building\nthings in line with our mission of democratizing programming. For\nexample, Carnegie Mellon University is using us as part of their online open\nlearning initiative. Flatiron school and Trinket are using us to build their online education\nplatforms. Oneinterview and Airety are using us to deliver online interviewing\nservices. And of course repl.it uses the same API for the main site, and the\n[embeds](http://amasad.me/2015/04/09/hello-world/).","metadata":{"id":43}}],["44",{"pageContent":"services. And of course repl.it uses the same API for the main site, and the\n[embeds](http://amasad.me/2015/04/09/hello-world/).\n\nI'm planning to do a technical write up about the tech and architecture behind\nthe service but the basic idea is that you connect to our servers and then send\nus programs to execute. It's fast, reliable, and scalable. Try out at\n[repl.it](https://repl.t). And check out the [API page](https://repl.it/api) for\nmore information. Here is what an API call looks like for a \"Hello World\" in\nRuby:\n\n```js\nvar repl = new ReplitClient('api.repl.it', 80, 'ruby', token);\nrepl.connect().then(() => repl.evaluate(\n  'puts \"hello world\"',\n  { stdout: out => console.log(out) }\n));\n```\n\nWhat started as something that I thought of as a necessary annoyance to keep the\nsite running turned out to be something that I'm actually proud of. This\nwouldn't have been possible without the work from [Haya](http://twitter.com/hayaodeh) and Faris where they\ncontinue to build awesome new features and products on top of repl.it.","metadata":{"id":44}}],["45",{"pageContent":"{\n  \"title\": \"Learning to Fight\",\n  \"date\": \"03/15/2021\"\n}\n---\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-DDZ1A4Q0KY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nRunning a growing business is thrilling. Serving customers is incredible, and growing revenue feels great. But there is only so much excitement in running your average — say b2b — startup. \n\nBut suppose your company is doing something so radical it changes culture. In that case, you have to be ready to be surprised, delighted, horrified, and viscously attacked. \n\nIn prior eras, a b2b startup founder might've been a skilled trader. Whereas a successful culture-changing founder would've started a revolution or a religion.\n\nWhen you're challenging norms, you have to be ready to fight the gatekeepers, the useful idiots, and the final boss — the priesthood — those who maintain the status quo.\n\nIt's essential to cultivate your community. Provide protected spaces to assemble because existing spaces are hostile to change. Build tools for collective action and encourage solidarity. Build allies wherever you can find them — the outsiders, the weirdos, and the radical thinkers are your best friends.\n\nAs a leader, build up stress tolerance. Find habits that clear the mind. Learn how to function with little sleep but take sleep seriously. \n\nIn quiet times don't let your guard down. Use those times to train for the next battle. But also celebrate good times and reflect on your victories and losses.\n\nUnderstand the political milieu. Try not to swim upstream unless it's essential for your mission. Better to ride or entirely circumvent it. \n\nTell your story. Don't rely on the media machine to tell it for you because, ultimately, they're part of the gatekeeping class. Many are owned by the priesthood.","metadata":{"id":45}}],["46",{"pageContent":"Tell your story. Don't rely on the media machine to tell it for you because, ultimately, they're part of the gatekeeping class. Many are owned by the priesthood.\n\nWhen building your crew, prefer zealots. It's too risky to have skeptics in your midst. But prize truth, and allow criticism. Build an organization that is both rooted in and unsatisfied with reality. \n\nEnjoy yourself. And remember that quitting is never an option. When it's darkest and most intense, you're closest to victory.","metadata":{"id":46}}],["47",{"pageContent":"{\n  \"title\": \"Mental Frames to Get Over Entrepreneurial Anxiety and Depression\",\n  \"date\": \"8/31/2017\"\n}\n---\n\nWould you accept a gamble that offers a 10% chance to win $95 and a 90% chance\nto lose $5?\n\n\n\nWould you pay $5 to participate in a lottery that offers a 10% chance to win $100 and a 90% chance to win nothing?\n\nChances are the second proposition sounded more appealing to you. But look\nagain, both these propositions are identical. The second version\nattracts more positive answers[1] because it's *framed* as cost whereas the\nfirst version is *framed* as a loss and who wants to lose?\n\nThis is called \"framing effects,\" how something is presented colors how we think\nabout it. Similarly how we interpret the world around us and our situation in it\nwould affect how we feel and act. In fact, there are whole branches of\npsychotherapy that focus on the art of viewing things differently: \"positive\nreframing\", \"cognitive reframing\", and \"cognitive restructuring\". However, what\nI'd like to focus on is dealing with specific set issues, issues that have\nto do with creating something new in the world, building a business, and all\nthe turmoil that brings.\n\nWhen you're a startup founder, it's almost like your mood is tied to your\nmetrics. When your company is doing well, you feel great. When your company\nisn't doing so hot, you're feeling bad. This, in turn, will affect your\nproductivity and may set you on a vicious cycle of doom where your company isn't\ndoing well, and you don't have the energy to fix it.\n\nSo how do you escape this, deal with the stress, take action on it, and have\nsome fun doing it? Well, we can exploit the mental bug that is \"framing effects\" to bring about a better state of\nmind. I'll introduce what I call \"mental frames\"[2] -- I'm not sure if that's a real\ntechnical term, but it sounded good to my ears -- that has helped and continues\nto help me get through tough times.\n\nBefore I start, I want to acknowledge that it feels kind of silly that we have to trick","metadata":{"id":47}}],["48",{"pageContent":"to help me get through tough times.\n\nBefore I start, I want to acknowledge that it feels kind of silly that we have to trick\nourselves and tell ourselves stories to act the way that we want to\nact. The reason we have to do this is that more and more we're discovering that we're not just one\nself, we're multiple ones. Scientists and philosophers, in different contexts, have proposed various theories on the division of the self. There is the momentary vs. the narrating self; there is System 1 vs.\nSystem 2; there is the left vs. the right hemisphere; there is the lizard\nbrain vs. the neocortex. All that goes to show that although there is a part of your self that wants to get better at managing your mental states -- the one that's reading this, hi! -- it doesn't automatically mean that all your selves are onboard. So join me on a journey to trick these bastards to do what you want.\n\n_Also, I'm not a mental health specialist, see one if you need to._\n\n## \"Life is a game\" mental frame\n\n>Once a motherfucker get an understandin' on the game, and what the levels and\n>the rules of the game is, then the world ain't no trick no more, the world is a\n>game to be played.\n>\n> -- 2Pac in \"Starin' Through My Rear View\"\n\nPart of the startup game is taking risks, in fact, it's almost the only game in\ntown. If you're not taking risks, then your startup already exists, and you're\njust copying something else. But if you are creating something new in the world\nthere wouldn't be a week that goes by without feeling anxiety about all the risk\nthat you're taking. Be it your career, other people's times and money, or\nwith your product, users, etc.\n\nThe risk anxiety can paralyze you and unless you act you're just making your\nsituation worse. One handy mental frame to adopt in this case is \"life is\na game, and I'm playing it.\" If life is a game, then you're there to play it. When\nyou're, for example, playing a video game, although you stop to weigh the pros and cons of every decision you","metadata":{"id":48}}],["49",{"pageContent":"a game, and I'm playing it.\" If life is a game, then you're there to play it. When\nyou're, for example, playing a video game, although you stop to weigh the pros and cons of every decision you\nmake, in the end, you have to act. Otherwise, nothing will happen, and it's no fun. You'll happily\njump from place to place, explore different areas, try different combinations of\nkeys or moves. You're never standing still,\nalways making decisions and executing, learning, failing, restarting and going again.\n\nThe \"life is a game\" mental frame puts you in a fun frame of mind. You just\ncan't wait to see what happens next. Maybe you'll lose, perhaps you'll win --\nwho cares! As long as it's interesting, keeps you amused, engaged, and learning.\n\n## \"Time keeps moving forward\" mental frame\n\n\n>I was a little bit of a procrastinator and I would be faced with this seemingly\n>insurmountable task. I have final exams, I have massive amounts of work, papers\n>-- there is no way to make it through. At that time -- and this is served me\n>well -- I would say 'well, one way or another time keeps moving forward so\n>even though I'm just three weeks away, whatever happens in three weeks from now\n>I'll be on the other side'. So it seems like a wall that I can't get through but\n>actually time is marching ahead and I will get to that point past that thing\n>automatically and that was helpful to me.\n>\n> -- Siri, Change.org, and Viv founder Adam Cheyer on the \"Finding Mastery\"\n>podcast.\n\nWhen you have an upcoming deadline or a significant date of somesort -- be it a product\nlaunch, scoring a deal, hiring someone, or the end of your runway -- there is no\nreal rational reason to feel anxious. All you have to do is perform your best,\nand the rest is outside your control.\n\nIn situations where it's painful, you have to remember that\ntime will go by, nothing lasts forever, and that you'll eventually be on the other side. What's\nimportant now is to execute!\n\n## \"Worst-case scenario\" mental frame","metadata":{"id":49}}],["50",{"pageContent":"time will go by, nothing lasts forever, and that you'll eventually be on the other side. What's\nimportant now is to execute!\n\n## \"Worst-case scenario\" mental frame\n\nYou might've used this one before; it's kind of a cliche that's often used out\nof place: \"order the pizza, worst-case\nscenario we'll eat it in the car\" or some such thing.\n\nWhen correctly used, it can be compelling. Right now, think about a difficult\nsituation in your life, or a tough decision you're pondering, or a\nrisky move you're considering. Now think about the *absolute* worst thing that can\nhappen as a result of your actions -- like literally the worst thing:\n\n1. Will someone die?\n2. Will someone get seriously injured?\n3. Will you become homeless and starve on the streets?\n3. Will you lose your house/job/car?\n4. Will you tarnish your reputation?\n5. Will you fail at the startup thing and go back a to a cushy job where\nthey feed and do your laundry?\n\nEtc. Barring #1, #2, and #3 I think everything else can be tolerated. Honestly\nfor most decisions at Silicon Valley startups that may lead to ruin, it's probably going to be #5 that ends\nup being the worst-case scenario, and you know it's not all that bad.\n\nA excellent technique to couple with the worst-case scenario mental frame is what's\ncalled \"negative visualization\". An age-old technique invented by the Stoics in ancient Greece,\nyou visualize or meditate on the worst. Like, actually imagine it happening. If it does happen, you're already at peace with it, and if\ngood or neutral thing happens then it's ecstatic!\n\n## \"You're not your job\" mental frame\n\n\"Founder of [insert sexy startup name]\" is what you have on your twitter bio. It seems like this\nthing is intricately intertwined with your identity. But in reality, you're a\nlot more than that. You might be a good husband/father/son. You\nmight be a good thinker, writer, or educator. Or you might have hobbies that you're\ngood at.\n\nWhen failure strikes, you might feel that you, personally you, are a failure -- which","metadata":{"id":50}}],["51",{"pageContent":"might be a good thinker, writer, or educator. Or you might have hobbies that you're\ngood at.\n\nWhen failure strikes, you might feel that you, personally you, are a failure -- which\nis basically depression. When that happens, remind yourself that you're much more than your\njob -- that you contain multitudes.\n\nIt's good to cultivate other interests, hobbies, or anything that you\ncan get good at. Have people that rely on you outside of your work. Mentor\nsomeone. Learn a new skill. Find a hobby. Whatever you do try to link it to your\nidentity.\n\nFor me, I try to always have someone that I'm mentoring. I read, discuss, and dabble in\ndoing philosophy. I'm currently obsessed with weight-lifting. I also like to get\nbetter at writing, public speaking, and storytelling. I love to optimize my\nhealth. This year I spent a lot of time enhancing my sleep. Going from an\naverage 5 hours a night to 7.5 hours a night. I also increased my REM sleep,\ngoing from less than an hour to 1.5-2.5 hours.\n\n## \"What did I learn\" mental frame\n\nIf you're the kind of type A personality that would choose the entrepreneurial\npath then chances are, you like self-improvement, and chances are, you love\nlearning. So when failure does catch up with you then do yourself a\nfavor and think about everything that you've learned from your experience.\nMaybe even write about it but, at all costs, avoid titling your post [\"our wonderful journey.\"](https://ourincrediblejourney.tumblr.com/)\n\n---\n\nThere is a lot more to this, and I'll try to keep this as a live document. But\nfor now, I need to get back to playing the life game because time won't wait for\nme, and really, what's the worst that can happen? I want you to remember\nthough, that I'm not only my job, it's true that I learn a lot from it, but I\ncontain multitudes!\n\n---\n<small>\n[1] Kahneman, Daniel. Thinking, Fast and Slow (p. 364). Farrar, Straus and\nGiroux. Kindle Edition.\n\n[2] I know of \"mental models\" but for some reason it didn't quite fit. There is","metadata":{"id":51}}],["52",{"pageContent":"---\n<small>\n[1] Kahneman, Daniel. Thinking, Fast and Slow (p. 364). Farrar, Straus and\nGiroux. Kindle Edition.\n\n[2] I know of \"mental models\" but for some reason it didn't quite fit. There is\nsome overlap, however, where mental models is primarily about making intelligent\ndecisions, mental frames is about managing your own psyche.\n\n</small>","metadata":{"id":52}}],["53",{"pageContent":"{\n  \"title\": \"Github and Open-source Is a Boon for the Underprivileged\",\n  \"image\": \"https://cdn-images-1.medium.com/max/1600/1*lBVMxcsvMHSkghlAo1-5GQ.png\",\n  \"date\": \"06/09/2018\"\n}\n---\n\nI was born to immigrant parents. My mother's family left Algeria looking for\na better life in Syria and then Jordan (where I was born). On my father's side,\nhis family fled the war in Palestine to Syria and then settled in Jordan. My father's family was so poor that he had to sleep with ten\nother children in the same room (his brothers and his brothers'\nchildren). Luckily, Palestinians, for whatever reason, valued education above\neverything else, so they made sure to save up to send my father to Turkey\n(because there were no universities in Jordan at the time) to study to\nbecome an engineer.\n\nWhen my father came back to Jordan, he worked for the government as an engineer. There, he\nfaced discrimination because government jobs were typically reserved for\nnatives. Despite all this, he rose in the ranks for years until he became the\ncity manager of Amman, the capital of Jordan. My father's journey taught me\nthat as someone who's underprivileged or discriminated against you need to work\nten times harder than the next person to get ahead. You need to leverage\nwhatever tool you have to signal that you're great at your job. For him, it was his reputation. In a country ravaged by corruption my\nfather had a reputation for being so straight it baffled people (but it also\nmeant that we wouldn't get to see any of that corruption money, and we had to\ngrow up on a measly government salary).\n\nWhich brings me to the recent debate in the developer community on using GitHub\nas a résumé. While I try to stay away from debating hot topics because it takes time to form an informed opinion, this was a subject that's near\nand dear to my heart, so I had to write about it.\n\nIt all started with this tweet claiming that GitHub is the only way that\nemployers can validate talent.","metadata":{"id":53}}],["54",{"pageContent":"and dear to my heart, so I had to write about it.\n\nIt all started with this tweet claiming that GitHub is the only way that\nemployers can validate talent.\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">10/ GitHub is the de facto source for validating top talent the world over.<br><br>Résumé or CV? <br><br>Please.<br><br>Show me your GitHub profile, commits you&#39;ve landed, projects you&#39;ve forked, code you&#39;ve released.</p>&mdash; Joe McCann (@joemccann) <a href=\"https://twitter.com/joemccann/status/1004798006485573632?ref_src=twsrc%5Etfw\">June 7, 2018</a></blockquote>\n\nWhile I disagree with this statement, I found myself also disagreeing with\npeople on the other side of the debate which, in my opinion, are also staking\nout an extreme position. They're [saying](https://twitter.com/EricaJoy/status/1004849360625168384) that GitHub is not only a \"useless\nsignal\" but is also discriminatory by nature. (I found\nmyself agreeing more with moderate positions like Kim's\n[here](https://twitter.com/KimCrayton1/status/1005098820731097088) saying that basically, employers are shooting\nthemselves in the foot by excluding people with no GitHub profiles).\n\nStarting with the assumption that employers would want to hire the best candidates for\nthe job[1], we can observe that they're\nmerely trying to navigate the problem of \"adverse selection,\" which occurs in any\nmarket where there exists an asymmetry of information. Because candidates can deceptively\nspruce up\ntheir resumes and maybe even rise in the corporate ladder by being gifted at\noffice politics, and because most good programmers are not in the job market\n(they either have a job or get headhunted before they enter the market), this\nleaves employers in a tricky position with an insufficient set of tools to evaluate\ncandidates (see [The Market for\nLemons](https://en.wikipedia.org/wiki/The_Market_for_Lemons) for an interesting\ndiscussion on adverse selection). GitHub, on the other hand, cuts through the","metadata":{"id":54}}],["55",{"pageContent":"candidates (see [The Market for\nLemons](https://en.wikipedia.org/wiki/The_Market_for_Lemons) for an interesting\ndiscussion on adverse selection). GitHub, on the other hand, cuts through the\nbullshit (for the most part).\n\nYou can fake a resume, or end up with a good one simply as a function of\nyour privilege. For example, if you're born into wealth,\nyour parents can probably call in favors to get you jobs at prestigious\ncompanies. But can you really fake GitHub profile? It's tough to do so,\nand that's because the \"screening\", as it were, is done by OSS maintainers. You\ncan't bullshit your way into getting pull requests landed. And no matter your parent's\nstanding in society, if your code stinks, you can't contribute. This makes GitHub a\nprecious tool for recruiters.\n\nBecause open-source is good at cutting through the bullshit, it also makes it an equalizer. If you come from an\nunderprivileged background, you should absolutely use GitHub to get ahead. That's\nexactly what I did. I owe my entire career to open-source.\n\nBack in college, I didn't have a personal computer, and I was always on the\nmove -- from campus to the office, to home. Which made it tough to code\non projects, or solve homework because every time I got my hands on a computer, I\nneeded to setup the development environment. So I started dreaming about a world\nwhere I can open a browser tab and start coding, in any language,\nanywhere. Which started a multi-year project to build an in-browser repl. The\nfirst thing I did was put a textarea with a button that `eval`d JavaScript. I was\nable to program on my Nokia phone and work on problems on the go. But I wanted\nthis experience to be better and to work for more languages.\n\n[Long story](https://news.ycombinator.com/item?id=16578943) short, years after I\nhad the idea for an online repl was I able, with help from\nfriends, to build the first polyglot [in-browser repl](https://github.com/replit/jsrepl) along with a [web terminal](https://github.com/replit/jq-console)","metadata":{"id":55}}],["56",{"pageContent":"friends, to build the first polyglot [in-browser repl](https://github.com/replit/jsrepl) along with a [web terminal](https://github.com/replit/jq-console)\nimplementation. I tried to start a company around this idea, but nobody would\nfund me. Luckily, everything was open-source on GitHub and soon after we\nreleased the project I saw that not only one, or two, but more than a dozen\ncompanies in Silicon Valley started using our software.\n\nAlthough I had applied so many times to work at Google, Facebook, and many\nothers, I never got a response back, let alone an interview. Open-source became\nmy ticket there. I joined Codecademy as the #1 employee and helped 10s of millions\nof people to learn how to code.\n\nAfterward, I joined Facebook to try and work at the team behind React.js. But I\nwas stuck working on the photos product (which I couldn't care less for) because\nthe React team was one of the hottest teams at the company. So\nI started contributing to their open-source projects. I know it sounds crazy and\nroundabout, but I was able to prove myself more via my GitHub contributions than my\nday job. I think that played a big part in letting me in the team where I worked on\nReact Native.\n\nToday, I'm trying to pay it forward. At my new company, [Repl.it](https://repl.it), we believe that\nprogramming is a great equalizer. We've seen our product used by [refugees](https://repl.it/site/blog/refugees) to\nlearn how to code. By people to [upgrade](https://repl.it/site/blog/two_stories)\ntheir careers and land tech jobs and to\n[teach](https://repl.it/site/blog/two_stories) low-income high-achieving children how to code. Or by [homeless](https://www.reddit.com/r/learnpython/comments/54d53z/help_a_homeless_man_code_again/) people who\nonly have access to computers at the public library. At this point, we've heard enough \"rags to\nriches\" stories in programming that it becomes difficult to dismiss this as\nsimply \"survivorship bias\".\n\nTo conclude: if you come from an","metadata":{"id":56}}],["57",{"pageContent":"riches\" stories in programming that it becomes difficult to dismiss this as\nsimply \"survivorship bias\".\n\nTo conclude: if you come from an\nunderprivileged background then the unfortunate reality of the situation is that\nyou're going to have to work harder than everyone else. And you're going to want\nto use any tool at your disposal, like Github, to signal that you're you going\nto be great at your job so you can land great jobs.\n\nIf you need advice, I'd be happy to help, my DM are open on [twitter](https://twitter.com/amasad).\n\n----------------------------------------------\n<small>\n[1]: It's still a safe assumption to start with, even if it's not entirely\naccurate. Even if you believe that bigotry (or unconscious bias) plays a big part in\nexcluding people, I think that from a first-person point of view, you can't control\nthat. For example, it's hard for me as an individual Muslim to change the fact\nthat some people hate Muslims, so it's better for me to focus my energy on\nthings that I can control. This, however, doesn't mean that as a society we shouldn't discuss issues of\ndiscrimination.\n</small>","metadata":{"id":57}}],["58",{"pageContent":"{\n  \"title\": \"Why We Switched From MongoDB to PostgresSQL (GPT 3 post)\",\n  \"date\": \"07/29/2020\"\n}\n---\n\n_This post was generated by gpt-3. My prompt was only the title and the first sentence_\n\n__At Tiny we're scaling really quickly__. Our platform allows tens of thousands of developers to instantly provision a running test environment in a few clicks. This creates a huge amount of data which is stored on a MongoDB cluster hosted on Google Compute Engine.\n\nA few months ago we started noticing some serious performance problems. The database was not able to handle the query load. We had all of our database configuration on auto-pilot so it took us a while to realize we had a problem. After a few weeks of investigation it became obvious that MongoDB was not the right choice for us and we decided to make the switch to Postgres.\n\n## Why We Chose Postgres\n\nPostgres has been around since the dawn of the web, and is more battle tested than any other database. It has very fast performance, is open source, and runs on a wide range of platforms.\n\nMongoDB has very flexible schema and is a great choice for dynamic applications. When we initially started developing our service, the schema was very flexible. Since we allow users to provision an environment in a few clicks, the data model changed from one environment to the next. This was not a problem for MongoDB. With time we became more strict in our schema and users started having a more consistent data structure, but this was now against MongoDB's strengths and caused us a lot of performance problems.\n\nPostgres on the other hand has a more rigid schema. There is no auto-sharding. The database servers have to be the right size. And the sharding is much more involved to setup. There are however many open source tools that can help you monitor, optimize and scale your Postgres cluster. There are also more resources online to help you migrate from one database to another.","metadata":{"id":58}}],["59",{"pageContent":"Moving to Postgres was actually very easy. All we had to do was install a few packages.\n\n```\napt-get install postgresql postgresql-contrib postgresql-client\n```\n\nWe had to make a few changes to our code so that it would work with Postgres' strict schema.\n\nWe added a schema field to every model. This is important since Postgres cannot automatically detect the structure of the data.\n\n```\nclass DataContainer < ActiveRecord::Base attribute :schema , :string attribute :data , :text , default: \"\" end\n```\n\nWe have to explicitly define the length and format of each text field.\n\n```\nclass DataContainer < ActiveRecord::Base attribute :data , :text , default: \"\" attribute :content , :text , default: \"text\" , size: 25 .chars end\n```\n\nSome Mongoid extensions won't work with Postgres. To convert these fields we used the ruby2ruby gem.\n\n```\n\"Postgres extension for mongoid/mongo_mapper\" .split( \"::\" ).each do |component| mongo_model = component.split( \"::\" ).first module Mongo end Mongoid::Document.extensions.each do |extension| if extension.start_with?( \"Mongoid::Extension::\" ) mongo_model_ext = extension.split( \"::\" ).first mongo_ext = module Mongoid::Document module Extension mongo_model_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| mongo_ext.split( \"::\" ).each do |component| if component.include?( '-is-extended-type' ) && component.split( \"-\" ).last == \"ruby2ruby\" include component.split( \"-\" ).last else puts \"Ignoring #{component} in mongo_extension\" end end end end end end end end end end end end end end end\n```\n\nAdding indexes to a Postgres database is also very easy. We use data containers which contain several documents. We needed to index them by schema and id. Here's how you can create a partial index.\n\n```\nrails g index add_to_container_data_schema_id","metadata":{"id":59}}],["60",{"pageContent":"```\nrails g index add_to_container_data_schema_id\n\nclass AddToContainerIndex < ActiveRecord::Migration def up add_index :containers, :schema, :unique: true add_index :containers, :id, :unique: true end def down remove_index :containers, :id remove_index :containers, :schema end end\n```\n\nWe also need to initialize the connection with the database, otherwise Rails will try to connect to the production database.\n\n```\n# config/database.yml production: adapter: postgresql encoding: unicode database: <%= ENV['TINY_APP_DB_NAME'] %> # db/structure.sql # <% db_name = ENV['TINY_APP_DB_NAME'] %> # db/seeds.rb class AddToContainerData < ActiveRecord::Migration def up execute <<-SQL CREATE TEMP TABLE containers ( id SERIAL PRIMARY KEY , schema VARCHAR( 100 ) NOT NULL , content TEXT NOT NULL , FOREIGN KEY (schema) REFERENCES schema_fields(schema) ); SQL execute <<-SQL CREATE UNIQUE INDEX containers_schema_id ON containers(schema); CREATE INDEX containers_id ON containers(id); SQL end def down execute <<-SQL DROP TEMP TABLE containers; SQL execute <<-SQL DROP INDEX containers_schema_id; DROP INDEX containers_id; SQL end end\n```\n\nDon't forget to add the migrations to the git repository.\n\n```\n$ git add db/migrate \n$ git commit -m \"Adding Postgres support to the containers\"\n$ git push\n```\n\nRunning our tests on Postgres took a little bit more time than running on MongoDB. It's not a lot more though. I believe this is because our test environment has to process more requests. The performance on the production server was also better than Mongo.\n\nThe last step we took was to set up monitoring for our Postgres cluster. We set up simple scripts that runs inside a cron job to collect data and store it in a database.\n\nWe're looking for smart developers. Hackers apply here!","metadata":{"id":60}}],["61",{"pageContent":"{\n  \"title\": \"Be Grateful\",\n  \"date\": \"06/02/2018\"\n}\n---\n\nWhere I'm from \"Thank God\" is something you say every day. While nowadays most\npeople say it in an automatic, mindless way, I think it came to be tradition\nbecause of a profound sense of appreciation for life by our ancestors. People\nfound themselves in a world where things are not too bad and often pretty\ngood. They looked around them, and while they didn't know why or how they got\nhere, they felt thankful for the life they're given. So they felt and expressed\ngratitude, multiple times day, each day.\n\n_\"We are going to die, and that makes us the lucky ones\"_ said Richard Dawkins,\ntalking about how lucky we are to be the ones that got to live for _\"the\npotential people who could have been here in my place but who will in fact never\nsee the light of day outnumber the sand grains of Arabia\"_. Meditate on that,\nand when you feel those words, no matter what your misfortune is, you'll know\nthat you're damn lucky to be alive.\n\nIn the story, _Candide: Optimism_, a philosopher named Pangloss believed that we\nlive in the best of all possible worlds. And despite the deep misfortune visited\nupon him–enslavement, torture, earthquakes, and more–Pangloss maintained his\nbelief that he lives in the best of all possible worlds. While the story is\nridiculing this type of thinking, I think there's something to be learned from\nPangloss. We may not be living in the best of all possible worlds, but I can\ncertainly imagine far worse worlds than I can imagine better ones. Maybe that's\nbecause we humans are wired to fear the worst so we can survive the world. But\nthe flipside is that you can be deeply grateful for living in a world where your\ndeepest fears are not reality.\n\nSo I'm thankful. Starting with my peaceful upbringing, I'm beholden to my\nparents and my grandparents who left war-ravaged countries to move to an island\nof peace among total and utter nihilistic destruction. I grew up in an\nintellectually and physically stimulating environment. And for that, I'm","metadata":{"id":61}}],["62",{"pageContent":"of peace among total and utter nihilistic destruction. I grew up in an\nintellectually and physically stimulating environment. And for that, I'm\ngrateful to my friends, teachers, and peers. I'm thankful for my hometown, the\nplace where I found love–a woman that believed in me and pushed me to my limits\nand beyond.\n\nHowever, I chose to leave to follow in the footsteps of my heroes. To the place\nwhere pioneers, inventors, and visionaries imagined and built a world where\nhumans can transcend their limitations. Extended by technology, we're evolving\ninto something new and beautiful. I'm grateful to the country that took me in,\nthe industry that let me follow my dreams, and the people that took a bet on me.\n\nYes, I know I'm lucky, and that's precisely why I'm thankful. But I also believe\nin progress. I think that we–all of us, all of humanity–are going somewhere,\nsomewhere beautiful. So be thankful; be thankful for every moment you're\nalive. And if you're also one of the lucky ones, you have a responsibility to\nmake the world a little better for everyone else.\n\nThank you for reading this.","metadata":{"id":62}}],["63",{"pageContent":"{\n  \"title\": \"Hello World\",\n  \"date\": \"04/09/2015\"\n}\n---\n\nYou can now embed runnable code snippets from [repl.it](https://repl.it) on your blog or website.\nJust go to [repl.it](https://repl.it) and pick one of the languages listed below, save your code and click share to get the html code to paste on your site.\n\n#### C++\n<script src=\"//repl.it/embed/iAR.js\"></script>\n<div>&nbsp;</div>\n\n#### C\n<script src=\"//repl.it/embed/iAS.js\"></script>\n<div>&nbsp;</div>\n\n#### Ruby\n<script src=\"//repl.it/embed/iAm.js\"></script>\n<div>&nbsp;</div>\n\n#### Python 3\n<script src=\"//repl.it/embed/iAo.js\"></script>\n<div>&nbsp;</div>\n\n#### Node\n<script src=\"//repl.it/embed/iAp.js\"></script>\n<div>&nbsp;</div>\n\n#### Go\n<script src=\"//repl.it/embed/iAr.js\"></script>\n<div>&nbsp;</div>\n\n#### Java\n<script src=\"//repl.it/embed/iAs.js\"></script>\n<div>&nbsp;</div>","metadata":{"id":63}}],["64",{"pageContent":"{\n  \"title\": \"On Hosting Sites from Your Editor\",\n  \"date\": \"03/08/2021\",\n  \"image\": \"https://amasad.me/public/images/hosting.png\"\n}\n---\n\nThis website is hosted on an [editor](/__repl). I can update it live and I can even see you visiting it in my editor [console](https://blog.replit.com/internet-of-fun).\n\nThis idea is not too far from how we used to make websites in the 90s and early 2000s. You wrote your code and FTP'd it into remote server and restart the webserver process to pick up the changes. Today, most people do it by git-pushing to a PaaS provider. I've been hosting apps, sites, bots, and microservices from my editor for the last two years, and in this post, I'll share my experience. While I've been doing in Replit, where it collapses your entire workflow into your code -- a code-first environment -- the following applies to anyone who's hosting code directly from where they wrote it.\n\nWhen writing code, the development environment feels closest to you. It's where you are making the changes and seeing your creation come to life. After coding, in a typical workflow, you push up your code for storage and sharing (to something like GitHub). If your changes are ready to release, you'll also push them to a hosting provider (say Heroku). Here is a diagram of it:\n\n![a diagram showing three different environments: localhost, production, git](/public/images/hosting.png)\n\nThe moment you send your code to a remote environment, you've created distance between you and your creation. It's living in a different environment where it's not easy to inspect and update. You've fragmented your workflow and now have two other locations where your code lives, and while git is great and maintaining copies of code, you've introduced multiple potential sources of truth.","metadata":{"id":64}}],["65",{"pageContent":"This destroys momentum especially for early-stage startups, side-projects, and those who are learning to code. Sadly, the \"industry standard\" often gets applied indiscriminately, robbing people of a superior mode of creation and all the fun and reward that comes with it. \n\nThe alternative: \n\n![a diagram showing one environment](/public/images/hosting2.png)\n\nWhen hosting from your editor, you're moving fast, updating the site and seeing crashes and debugging issues in realtime. For example, in Replit, I can enter the production repl and see active connections, inspect, and even hot-update live objects. \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I was wondering if the app is already getting usage and one of the wonderful things about hosting on <a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@Replit</a> is getting a live repl on the hosted app. <br><br>Here I just got a reference to the db and listed the entries. <a href=\"https://t.co/UIoERFc50D\">pic.twitter.com/UIoERFc50D</a></p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1332029622075047936?ref_src=twsrc%5Etfw\">November 26, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nHaving a production repl is super valuable. Paul Graham recounts how he used the Hacker News prod repl to react to an issue from his phone: \n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I once had to write code on a phone, after HN mistook investor usage on Demo Day for a DDoS attempt and started ignoring the venue&#39;s IP address. I had to log into HN on a phone and paste a fix into the repl. This looks a lot more civilized.</p>&mdash; Paul Graham (@paulg) <a href=\"https://twitter.com/paulg/status/1255235112226238466?ref_src=twsrc%5Etfw\">April 28, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":65}}],["66",{"pageContent":"Another issue I've run into with today's standard workflow is projects going stale. After leaving a project for a few months the barrier to going back to hacking feels high: I'd have to pull, set up the dev environment again, and figure out how the hosting provider is configured. However, when hosting from my editor, I open up the project, and I'm right there hacking and \"deploying.\"\n\nBecause the distance from creation is reduced, I also start (and complete) many more projects. I'm quick to spin up something or to automate a piece of work. At work, because Replit feels close and fast, we spin up many bots to automate tedious tasks or introduce fun and serendipity. \n\n![lunch bot](https://pbs.twimg.com/media/EuCd-dvVkAwNO8K?format=jpg&name=medium)\n\nFinally, in cases of emergency, it also helps to be able to code live. We've been able to respond to emergencies  at breakneck speed. For example, a few months ago PyPi quitely deprecated their package search API which we use in our packager UI. Luckily, we found a package that searches PyPi via scraping the site. We spun up an alternative on Replit in 30 minutes:\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Multiplayer <a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@replit</a> story: <br><br>3rd party service deprecated w/ no warning 😱<br><br>I spun up a repl with and prototyped replacement ⚡️<br><br>Single-threaded couldn&#39;t handle 1 rps 😢<br><br>Someone jumps in w/ `uwsgi` now we&#39;re at 3 rps 💆🏽‍♀️<br><br>Dropped in LRU and now we&#39;re up to 50 rps 📈<br><br>Good—Shipit!</p>&mdash; Amjad Masad ⠕ (@amasad) <a href=\"https://twitter.com/amasad/status/1340108478967267329?ref_src=twsrc%5Etfw\">December 19, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":66}}],["67",{"pageContent":"I'd like to see the dev community introduce more fun and interactivity back into building, especially when teaching new devs how to code. Most bootcamps today spend their first weeks teaching people git. But their students have no mental model for version control to be able to grok git, so it just starts on the wrong foot with people feeling inadequate or dumb for not \"getting it.\" \n\nSeymour Papert called this the [\"project/problem inversion\"](http://www.papert.org/articles/AnExplorationintheSpaceofMathematicsEducations.html). The natural way to acquire knowledge of new tools is to have the use-case for them; today new developers are taught to cargo-cult advanced development techniques before they've even finished learning how to code.","metadata":{"id":67}}],["68",{"pageContent":"{\n  \"title\": \"The Hyperreal\",\n  \"date\": \"3/13/2021\"\n}\n---\n\nIt's normal to get excited by social media likes. Some say social media is \"fake.\" But to the receiver of the like, they feel appreciated and heard, and to them, that's real. It's perhaps more real than going out into the world and saying interesting things and receiving real-world \"likes\" and praise. The activity is reduced to its essence and delivers intense satisfaction. Likes are hyperreal. \n\nFor something to be fake, it can't produce the intended result. It should be counterfeit. But hyperreal is the opposite. To make a hyperreal object from a real one, take only the details that excite the mind — like getting praise — intensify them, and drop everything else. When you reduce food to its most intense elements — sweet & salt — you get hyperreal (junk) food.  That is the formula for hyperreality. \n\nHyperreality is exciting, but too much of it is destructive to humans. It takes us out of our natural flow and makes us into addicts. Now you might object with something like \"everything in moderation,\" which is trite and true. But be prepared to fight the modern technological system optimized to produce hyperreality. \n\nYou might blame \"capitalism\" for working against our better angels. It is, after all, very efficient at producing hyperreality. But you'd be wrong because humans have been making hyperreality since cave drawings.\n\nCommunism produces hyperreality too. It is hyperreality. It takes a naturally occurring thing — family and community — and intensifies its most attractive elements. It's an intoxicating hyperreal vision. \n\nAre we doomed to eternal hyperreality addiction? It is a potential answer to Fermi's Paradox. Intelligent life evolves until all it does is produce and consume hyperreality at the expense of exploring the stars.","metadata":{"id":68}}],["69",{"pageContent":"I don't think we're doomed though. And I don't think regulation is the answer either. Religions have dealt with the destructive nature of hyperreality. Why do you think you can't draw pictures of people or animals in Islam? A restriction that generated an art culture rooted in abstract (unreal) shapes.\n\nThe secular West is especially vulnerable to hyperrealism because societal norms that could protect us are considered oppressive. I love the West's renegade aspect. It resulted in innovative art, science, and technology. But it left us unprotected against hyperreality.\n\nWhatever comes next — may be a techno-futurist religion — needs to address this issue.","metadata":{"id":69}}],["70",{"pageContent":"{\n  \"title\": \"Overcoming Intuition in Programming\",\n  \"date\": \"01/03/2016\",\n  \"hidden\": false\n}\n---\n\nIn a [series of experiments](http://faculty.chicagobooth.edu/nicholas.epley/alteretal.pdf),\nresearchers set out to discover the relationship between difficulty or\n\"disfluency\" and cognition. They presented the same test to two groups, one in\nan easy to read (intuitive) format and the other in a difficult (disfluent)\nformat. And in all the experiments they carried out, the disfluency group scored\nsubstantially higher. The theory behind this is that people will default to\nrelying on the automatic, effortless, and primitive system for reasoning. But if\nthings are counter-intuitive or harder to understand we switch to the deeper,\ndeliberate and analytical mode of thinking.\n\n\nI've been thinking about how this translates to programming. Programming is an\nintellectually challenging task, but luckily we invent tools to make it\nmanageable. I find that up to a certain point, the intuitive and easy properties\nof a given language, framework, or library might start to have negative\neffects. From personal experience and from mentoring beginners I noticed that\nwhen using tools that allow us to reason within our intuition, anytime we're\nfaced with some difficulty we feel that we've done something wrong. And although\nwe might have the necessary skills to overcome the difficulty, we often start\nquestioning and revising our work. Asking questions about best practices\nrelative to the framework instead of programming our way out. The quintessential\nexample of this is the Stack overflow questions for _\"how do I use jQuery to do\nX?\"_ or the answers _\"use jQuery [plugin] to do X\"_ where X could be anything from\nbasic arithmetic to websockets.\n\n### The framework negative space\n\nWhen using a framework, a certain class of problems are made easy to\nsolve. Programming feels intuitive if we stay within that space created by the framework. We","metadata":{"id":70}}],["71",{"pageContent":"### The framework negative space\n\nWhen using a framework, a certain class of problems are made easy to\nsolve. Programming feels intuitive if we stay within that space created by the framework. We\nmay refer to this as the __framework intuitive space__. On the other hand we may refer to the\nrest of the space that framework doesn't solve or have an opinion on\nas the __framework negative space__. The negative space\nis not necessarily a defect of the framework, it's just not in the space the\nframework was built to solve. However, having put the programmer in the intuitive space for a\nlong stretch of time, it makes it feel out of place when finding oneself in the\nnegative space.\n\nWhen the beginner programmer find themselves in the negative space, they often\nlook to the library authors to put them back in the intuitive space. That's why\nfor any popular framework you find that there is an entire ecosystem of plugins\nand addons that extends the framework's intuitive space to cover an increasingly\ngrowing surface area. It doesn't seem to be inherently wrong if it makes\nprogrammers more productive. However, it may have unintended negative consequences:\n\n1. Increased reliance from the programmer on the ecosystem's library authors\n2. Offloading of architectural decisions to the libraries all the while\nincurring technical debt\n3. Enabling the false belief that programming should always feel intuitive\n\n### The developer and library author codependency\n\nI should start by saying that this is technically a false dichotomy. All programmers\ntake on both those roles in any programming session. You maybe coding the product\nbusiness logic and switch to building a general purpose abstraction to help you\nin multiple places in your codebase. However, I've noticed that in open-source, people tend\nto act in a manner that makes this dichotomy seem true.\n\nThe easiest way I've found to succeed in open source is to pave the negative\nframework space to become an intuitive space. In other words, writing the","metadata":{"id":71}}],["72",{"pageContent":"The easiest way I've found to succeed in open source is to pave the negative\nframework space to become an intuitive space. In other words, writing the\nplugins and extensions. As a framework becomes more popular, a growing number of\ndevelopers (usually beginners) will start complaining about how it's hard to do\nX in this framework (and as we've seen X might be totally unrelated). Now, as in\nthe business world, open-source is extremely competitive and as soon as there\nis an opening to solve a perceived problem for a lot of people, many would rise\nup to the occasion. This becomes an enabler to the false belief that a\nprogrammer can spend all of their time programming in the intuitive space.\n\n### Conclusion\n\nI think fixing this problem ultimately comes down to education. Very early on\nwhen someone is learning programming our culture tend to emphasize an obsession with\ntooling. I get a lot of questions from aspiring programmers on what's the best\ntool or languages to learn. It's almost always a premature question to ask. I\nused to come up with answers like \"depending on what you're building\" or \"pick a\nbeginner friendly community\" or \"invest in a growing language\". I\nthink all of these are good answers, but it doesn't really matter that early on\nin a programmer's learning journey. It's all the same when you're\nessentially learning how to compute. Furthermore, these sort of answers enable\nthe culture of tooling obsession.\n\nCode reuse, libraries, sharing, and open-source are very important to software\nengineering, but we should be careful to not enable the belief that programming\nshould be as easy as gluing things together. In fact, these days I'm often\nskeptical when things feel a little bit too easy. If programming was as easy as\nthis then it would've already been automated away.","metadata":{"id":72}}],["73",{"pageContent":"{\n  \"title\": \"Building an In-Browser JavaScript VM and Debugger Using Generators\",\n  \"date\": \"01/06/2014\"\n}\n---\n\n### tl;dr\n\nI built a JavaScript VM and debugger in JavaScript. Checkout the example in the [demo app](http://debugjs.com/#example) and the [source code](https://github.com/amasad/debugjs). Read on for a dive into the technical details.\n\nUpdate: [I implemented one of the examples from Bret Victor's Learnable Programming](/2014/01/10/implementing-bret-victors-learnable-programming-has-never-been-easier/) using debug.js.\n\n### Introduction\n\n#### Motivation\n\nFor the past few years I've been working on creating tools to help people learn programming on the web. I've worked on [repl.it](http://repl.it) and open sourced the underlying technology which powered a [few](https://www.udacity.com/) [learn](http://www.codecademy.com/) to [code](http://www.learnstreet.com/) websites and until recently lead product engineering at Codecademy. Through all that, one thing I really wanted to see are the tools to make it possible to visualize code execution and step through code in the browser. To catch glimpse of what an ideal interactive learning environment would be you should check out [Learnable Programming](http://worrydream.com/LearnableProgramming/) by Bret Victor.\n\nIn addition to the educational benefits of such a tool, if matured it could be also useful for code instrumentation, web IDEs, and creating a foundation for writing other VMs on top of JavaScript (having the pausable machine state let’s you not worry about the non-blocking environment).\n\nEver since I've read about the [ES6 Generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators) proposal, I've been toying with this idea in my head but it wasn't a real possibility until [Ben Newman’s](https://twitter.com/benjamn) [Regenerator](http://facebook.github.io/regenerator/) brought generators to the browser.\n\n#### Goals\n\n* JS VM capable of running ES5 code\n* VM should be pausable on any instruction","metadata":{"id":73}}],["74",{"pageContent":"#### Goals\n\n* JS VM capable of running ES5 code\n* VM should be pausable on any instruction\n* Ability to create a feature complete JS debugger on top of the VM\n* Mainly targeting browsers but should work in Node.js for development\n\n### Generators\n\n_if you're familiar with generators, feel free to skip this section or read [this](http://tobyho.com/2013/06/16/what-are-generators/) instead for a more comprehensive introduction_\n\nGenerators are part of the ES6 proposals and is making it's way slowly into production environments. Generators gives us a new type of functions where we can step in and out of a function while sending  and receiving values to and from it.\n\nThe following example should illustrate the fundamentals of generators:\n\n```javascript\nfunction* genFn() {\n  var x = yield 2;\n  yield x;\n  return 'done';\n}\n\nvar gen = genFn()\nconsole.log(gen.next());  // {value: 2, done: false}\nconsole.log(gen.next(1)); // {value: 1, done: false}\nconsole.log(gen.next());  // {value: \"done\", done: true}\n```\n\n_Notice the * at the end of the `function` keyword, that's all you need to create a generator._\n\n### Overview\n\nHaving the unique ability of suspending execution of a function and resuming at a later point in time, generators gives us the basic building block for creating a VM that can step through instructions and pause at any point. To achieve that, every function in the system must be transformed into a generator that yields to the machine before every instruction execution. This may sound similar to [Continuation Passing Style](http://en.wikipedia.org/wiki/Continuation-passing_style) with a trampoline, however, the main difference is that the call stack information in CPS is held in the lexical scope whereas in this method we need to take full control of the call stack. I'm not a compiler nor a PLT expert so I'm not really sure if this method has a name or if it has been tried before, if you do please let me know.","metadata":{"id":74}}],["75",{"pageContent":"We want the host JavaScript environment to take on as much of the responsibility of running code as possible. Beyond generator function transformation we have to do a few other things which I'll outline here and get into each later.\n\n* Control the call stack\n* Handle errors and error propagation\n* Control timers in the system (setTimeout, setInterval etc)\n* Workaround native APIs that expect function arguments (callbacks and not generators)\n* Write a debugger module\n\n### Code Transformation\n\nIn order to control the execution flow we need to yield back to the machine after each instruction execution. To do so, we take each instruction in our program and insert a `yield` expression before it. I chose to define an instruction (or a step) as a single JavaScript statement.\n\nFor example:\n\n```javascript\nvar foo = 1;\nif (bar === foo) {\n  foo = 2;\n}\n```\n\n After the transformation:\n\n```javascript\nfunction* __top() {\n  yield {step};\n  var foo = 1;\n  yield {step};\n  if (bar === foo) {\n    yield {step};\n    foo = 2;\n  }\n}\n```\n\nIn addition to the basic instruction transformation we need to add information about each function in our program that would be useful when building the debugger. We call this, a stack frame and it includes the following data about our function:\n\n* name\n* filename\n* scope: an array of variable names and their occurrences in the function.\n* eval function: this gives access to the function's closure to do things like watch expressions and eval code in that scope.","metadata":{"id":75}}],["76",{"pageContent":"* scope: an array of variable names and their occurrences in the function.\n* eval function: this gives access to the function's closure to do things like watch expressions and eval code in that scope.\n\nFinally, function calls are a bit trickier than regular instructions since we need to capture the call stack and play nicely with native and library function calls. On compile time, at the function call site, we don't know whether a function call is referencing a generator function (a function within our ecosystem) or a function object. If it was the former, we need to add it to our call stack and step into executing the function instructions, as for the latter we simply need to get a value out of it. We solve the issue by wrapping all function calls in a thunk and yield it back to the machine to make that decisions on runtime (where we have more information).\n\n“Thunk” is a fancy word for something JavaScript programmers do all the time -- create a closure that delays the computation of a piece of code. To illustrate:\n\n```javascript\nfoo();\n```\n\nBecomes:\n\n```javascript\nyield __thunk(function *thunk() {\n  return foo();\n}, this, arguments);\n```\n\nA more complex call expression would also work:\n\n```javascript\nfor (var i = foo(), b = bar(); i < 50; i++);\n```\n\nBecomes:\n\n```javascript\nfor (var i = yield __thunk(function* thunk() {\n  return foo();\n}, this, arguments), b = yield __thunk(function* thunk() {\n  return bar();\n}, this, arguments); i < 50; i++);\n```\n\n`this` and `arguments` are passed down so we can create the correct scope when invoking the thunk.\n\n### VM\n\n#### Stepping and The Call Stack","metadata":{"id":76}}],["77",{"pageContent":"return bar();\n}, this, arguments); i < 50; i++);\n```\n\n`this` and `arguments` are passed down so we can create the correct scope when invoking the thunk.\n\n### VM\n\n#### Stepping and The Call Stack\n\nOur machine's main responsibility is to invoke, push, and pop functions off the call stack. It starts out with a halted (or idle state) until we eval a string of code which is transformed and converted into a top-level generator. Then, we can call `step` on the machine and expect it to run the next instruction in our code via the generator `next()` method. If that instruction returns a thunk, we evaluate it and if it returns a generator we push it onto our call stack and any further steps will be invoked on it. When our current peek generator is done stepping we take the last value and pass it back into the next generator on our call stack. The passing is also done via the generator `.next` function which accepts an argument to be sent into the generator function.\n\n### Errors\n\nWhen invoking an instruction, there is a possibility it could throw an error. The way we deal with that is we try/catch every instruction invocation and if we get an error we pass it up the call stack incase one of the caller functions have try/catch statement waiting for us.\n\n```javascript\nRunner.prototype.$propError = function (e) {\n  while (this.stack.length) {\n    this.gen = this.stack.pop();\n    try {\n      this.gen.throw(e);\n      return;\n    } catch (e2) {\n      e = e2;\n    }\n  }\n  throw e;\n};\n```\n\n#### Timers\n\nOne of our goals is to be able to pause our machine at an point in time and for as much time as needed. Because of that we run into the problem of not being able to rely on the host JavaScript environment for controlling timers. e.g. we have a `setInterval` running with a second in between and we decided to pause the machine for 10 seconds, when we resume we shouldn't expect 10 back-to-back timers to trigger. The machine time should only be running when:\n\n1. We are executing instruction code.","metadata":{"id":77}}],["78",{"pageContent":"1. We are executing instruction code.\n2. We are in idle state (the call stack has unwinded and the machine is in a halted state).\n\nWe use a priority queue to store our timers and have a tick method that checks if there are any timers that should fire at that point in time. We rely on the host `setImmediate` or `setTimeout(tick, 0)` to provide us with our tick function.\n\nWhen a timer fires the machine simply triggers `timer` event and clients could react by running or stepping through the timer (thus creating a new call stack). This is very similar to JavaScript event loops but very specific to timers.\n\n#### Native APIs\n\nWe can't expect every API our code touches to understand how we do things using generators so the machine provides a way to wrap callbacks and yield them back to the machine to further step through them. However, a problem arises when we consider synchronous APIs that expect callbacks, for example `Array.forEach` will call the callback continuously until the iteration finishes and that's a problem because we expect to be able to pause any execution indefinitely. For that reason, we can't rely on the host environment native APIs to do the same thing. Luckily, this turns out not to be very hard to solve. All it took is taking the popular [es5-shim](https://github.com/es-shims/es5-shim) library and running our transformation on it so it become generator friendly.\n\n#### Events\n\nMuch like the the Native API problem, events expects event listeners made of functions, but this is a much simpler problem because this is an asynchronous API and all we have to do is wrap our listeners with a function wrapper that would trigger our machine whenever it's called.\n\n#### Debugger\n\nAfter creating the VM, writing the debugger was fun and relatively straightforward. The only issue I ran into is handling all the thunk garbage we have in our call stack because we treated them just like any function call to make the machine simpler.\n\nFeatures:\n\n* Breakpoints\n* Debugger statements","metadata":{"id":78}}],["79",{"pageContent":"Features:\n\n* Breakpoints\n* Debugger statements\n* Step in, out, and over any statement\n* Get scope variables and values\n* Get call stack\n* Eval in scope: whenever you on a breakpoint you can evaluate in that scope\n\nCheck it out [here](http://debugjs.com).\n#### Current status\n\nThe project is still in early development stages. I’ve only been working on it for about two weeks. In terms of correctness, I’m sure the VM can run most of the ES5 spec. One thing that came to mind while writing this post is that getters and setters are definitely broken at the moment.\n\nThe VM is currently very slow, especially the code transformation bit but there are a few quick wins to be had there to get it to an OK speed.\n\nI also realize that the generator transformation is just an intermediate step to the transformation that Regenerator does to be able to step in and out of functions freely. Therefore we could get rid of that step and transform directly to the state machine.","metadata":{"id":79}}],["80",{"pageContent":"{\n  \"title\": \"On VMs in JavaScript\",\n  \"date\": \"07/17/2012\",\n  \"author\": \"Amjad Masad\"\n}\n---\n\nThere are many challenges in implementing a language VM in JavaScript. Amongst those is the fact that your VM will be forced to live in a non-blocking environment, whereas most language interpreters are designed to be able to block in some cases. This forces JavaScript programs to be structured differently. Programs run shortly registering callbacks for events and yielding to the event loop that will dispatch the callback when the event is fired. While many enjoy this style of programming, there are others that think there is a better way:\n\n* [TameJS](http://tamejs.org/)\n* [Narrative JavaScript](http://www.neilmix.com/narrativejs/doc/index.html)\n* [jwacs](http://chumsley.org/jwacs/)\nand the list goes on...\n\n### In the VM\n\nYou maybe asking yourself what kind of asynchronous operations would an interpreter need to do in the first place. Good question! It's always good practice to put computationally heavy programs in Web Workers and that include VMs which makes interactions with the UI thread asynchronous, which for the most part, is ok, except to when it comes to user input. Most would expect it to be blocking. Also having the ability to pause and resume execution at any point in time would open the opportunity to create debugging tools like a stepping debugger.\n\nOne thing you can and many already do is **design your VM with a yield state**. But that doesn't really apply when implementing an X-to-JavaScript compiler or when compiling interpreters from other languages to JavaScript or when writing simple interpreters without really implementing a full blown VM.\n\n### Case study: BF Interpreter\n\nFor the following section I will use a [brainfuck](http://en.wikipedia.org/wiki/Brainfuck) interpreter to illustrate the problem and part of the solution.\n\n#### BF Interpreter","metadata":{"id":80}}],["81",{"pageContent":"For the following section I will use a [brainfuck](http://en.wikipedia.org/wiki/Brainfuck) interpreter to illustrate the problem and part of the solution.\n\n#### BF Interpreter\nThe function `bf` takes a string made of characters representing a BF program and runs it. You do not need to know what all the operations in the BF interpreter are but note that the input command `,` asks for user input.\n\n    // Adapted from http://code.google.com/p/jslibs/wiki/JavascriptTips\n    function bf (code) {\n      var codeLength = code.length\n\n        // Code pointer\n        , cp = 0\n\n        // Data pointer\n        , dp = 0\n\n        // Tape.\n        , m = []\n\n    // Loop start and end positions.\n        , loopIn = {}\n        , loopOut = {}\n\n    // Match [].\n        , stack = [];\n\n      // Register loop jumps\n      for (var cp = 0; cp < codeLength; cp++) {\n        if (code[cp] == '[')\n          stack(cp);\n        else if (code[cp] == ']')\n          loopOut[loopIn[cp] = stack()] = cp;\n      }\n\n    // Execute.\n      for (var cp = 0; cp < codeLength; cp++) {\n        switch(code[cp]) {\n          case '>':\n            dp++;\n            break;\n          case '<':\n            dp--;\n            break;\n          case '+':\n            m[dp] = ((m[dp]||0)+1)&255;\n            break;\n          case '-':\n            m[dp] = ((m[dp]||0)-1)&255;\n            break;\n          case '.':\n            console.log(String.fromCharCode(m[dp]));\n            break;\n          case ',':\n            m[dp] = prompt('input').charCodeAt(0)||0;\n            break;\n          case '[':\n            m[dp]||(cp=loopOut[cp]);\n            break;\n          case ']':\n            cp = loopIn[cp]-1;\n            break;\n        }\n      }\n    }","metadata":{"id":81}}],["82",{"pageContent":"break;\n          case '[':\n            m[dp]||(cp=loopOut[cp]);\n            break;\n          case ']':\n            cp = loopIn[cp]-1;\n            break;\n        }\n      }\n    }\n\nNow the above is a **synchronous** BF interpreter written in JavaScript and it uses `prompt` for input (`,`) which is the browser's native blocking stdin. Loading it in the main browser UI thread would work, however, running large BF programs would cause it to block and hang your tab or browser. Loading it in a Web Worker would not work either because Workers do **not** have access to the `window` obect.\n\n#### CPS'ed BF interpreter\n\nWe can try fixing the interpreter by making the input operation a non-blocking call that takes a callback to continue the program after input was recieved from the user from the UI thread, via the Web Worker message API. let us assume this has been already implemented for us and we can use: `console.input`.\n\nYou would quickly notice that having an asynchrounous operation is infectious and it would force us to restructure our program into a [CPS](http://en.wikipedia.org/wiki/Continuation-passing_style) style.\n\n_Note that This could be further simplified but it's left to demonstrate the point._\n\n    function bf (code) {\n      var codeLength = code.length\n        , i = 0, cp = 0, dp = 0\n        , loopIn = {}, loopOut = {}, m = {}\n        , stack = [];\n\n      for (var cp = 0; cp < codeLength ; cp++) {\n        if (code[cp] == '[')\n          stack.push(cp);\n        else if (code[cp] == ']')\n          loopOut[loopIn[cp] = stack.pop()] = cp;\n      }\n\n      var ops = {\n        '>': function (cont) {\n          dp++;\n          cont();\n        }\n      , '<': function (cont) {\n          dp--;\n          cont();\n        }\n      , '+': function (cont) {\n          m[dp] = ((m[dp]||0)+1)&255;\n          cont();\n        }\n      , '-': function (cont) {\n          m[dp] = ((m[dp]||0)-1)&255;\n          cont();\n        }\n      , '.': function (cont) {\n          console.log(String.fromCharCode(m[dp]));\n          cont();","metadata":{"id":82}}],["83",{"pageContent":"}\n      , '-': function (cont) {\n          m[dp] = ((m[dp]||0)-1)&255;\n          cont();\n        }\n      , '.': function (cont) {\n          console.log(String.fromCharCode(m[dp]));\n          cont();\n        }\n      , ',': function (cont) {\n          console.input(function (data) {\n            m[dp] = data.charCodeAt(0) || 0;\n            cont();\n          });\n        }\n      , '[': function (cont) {\n          m[dp]||(cp=loopOut[cp]);\n          cont();\n        }\n      , ']': function (cont) {\n          cp = loopIn[cp]-1;\n          cont();\n        }\n      };\n\n      function noop () {}\n\n      function runNext () {\n        cp++;\n        if (cp < codeLength) {\n          (ops[code[cp]] || noop)(runNext);\n        }\n      }\n      cp = -1;\n      runNext();\n    }\n\nNotice how every function in the system receives a callback function which is responsible for continuing the program. The callback maybe called with values that would've rather been return values. In our case, there exist no need for return values because state is encapsulated within the `bf` function closure.\n\nBy doing so **We eliminated the need for a JavaScript runtime call stack**, as each function would be responsible for continuing the execution of the program. Which means each function has the power and ability to stop the execution (maybe wait for an event to happen) and continue at a later time. Which I think is freeing.\n\n#### Blow it up\n\nEven-though we don't need an actual call stack anymore because every function call in our program is the last statement in it's caller function that would be responsible for continuing it's program after it finishes executing. However we are still bound to the runtime's call stack, that would be exhausted as soon as we try to run a non-trivial BF program.","metadata":{"id":83}}],["84",{"pageContent":"Luckily in functional programming there is a technique called trampolining that would help minimize the call stack size needed to run programs written in CPS. It works by having a loop that is responsible for calling the program's functions that would in turn return a continuation function to be executed by the same loop.\n\n    function bf (code) {\n      var codeLength = code.length\n        , i = 0, cp = 0, dp = 0\n        , loopIn = {}, loopOut = {}, m = {}\n        , stack = [];\n\n      for (cp = 0; cp < codeLength ; cp++)\n        if (code[cp] == '[') stack.push(cp);\n        else if (code[cp] == ']') loopOut[loopIn[cp] = stack.pop()] = cp;\n\n      var ops = {\n        '>': function () {\n          dp++;\n          return runNext;\n        }\n      , '<': function () {\n          dp--;\n          return runNext;\n        }\n      , '+': function () {\n          m[dp] = ((m[dp]||0)+1)&255;\n          return runNext;\n        }\n      , '-': function () {\n          m[dp] = ((m[dp]||0)-1)&255;\n          return runNext;\n        }\n      , '.': function () {\n          console.log(String.fromCharCode(m[dp]));\n          return runNext;\n        }\n      , ',': function () {\n          return function () {\n            console.input(function (data) {\n              m[dp] = data.charCodeAt(0) || 0;\n              run(runNext);\n            });\n          };\n        }\n      , '[': function () {\n          m[dp]||(cp=loopOut[cp]);\n          return runNext;\n        }\n      , ']': function () {\n          cp = loopIn[cp]-1;\n          return runNext;\n        }\n      };\n\n      function noop () {}\n\n      function runNext () {\n        cp++;\n        if (cp < codeLength)\n          return (ops[code[cp]] || noop)();\n      }\n\n      function run (cont) {\n        // Trampoline.\n        while (typeof cont === 'function') {\n          cont = cont();\n        }\n      }\n\n      cp = -1;\n      run(runNext);\n    }\n\n\n#### A glimpse into the future","metadata":{"id":84}}],["85",{"pageContent":"// Trampoline.\n        while (typeof cont === 'function') {\n          cont = cont();\n        }\n      }\n\n      cp = -1;\n      run(runNext);\n    }\n\n\n#### A glimpse into the future\n\nThings should not be this hard. JavaScript must grow as a language to allow constructs that makes it easier to write asynchronous programs. In addition to the web finally realizing the dream of being the application platform, JavaScript also plays a strong role in evented-io server programming which had proven to be quite efficient.\n\nLet us take a look at using [generators](http://wiki.ecmascript.org/doku.php?id=harmony:generators) to emulate coroutines that will land in the next version of JavaScript, ES Harmony. The following example is written using the excellent [task.js](http://taskjs.org/) library:\n\n    function bf (code) {\n\n      // Create a task that could yield.\n      task.spawn(function () {\n        var codeLength = code.length\n          , i = 0, cp = 0, dp = 0\n          , loopIn = {}, loopOut = {}, m = {}\n          , stack = [];\n\n        for ( var cp = 0; cp < codeLength ; cp++ )\n          if ( code[cp] == '[' )\n            stack.push(cp);\n          else if ( code[cp] == ']' )\n            loopOut[loopIn[cp] = stack.pop()] = cp;\n\n        for (var cp = 0; cp < codeLength && i < 100000; cp++, i++) {\n          switch(code[cp]) {\n            case '>':\n              dp++;\n              break;\n            case '<':\n              dp--;\n              break;\n            case '+':\n              m[dp] = ((m[dp]||0)+1)&255;\n              break;\n            case '-':\n              m[dp] = ((m[dp]||0)-1)&255;\n              break;\n            case '.':\n              console.log(String.fromCharCode(m[dp]));\n              break;\n\n            // Yield to the event loop until we get the user input.\n            case ',':\n              m[dp] = yield console.input();\n              break;\n            case '[':\n              m[dp]||(cp=loopOut[cp]);\n              break;\n            case ']':\n              cp = loopIn[cp]-1;\n              break;","metadata":{"id":85}}],["86",{"pageContent":"break;\n            case '[':\n              m[dp]||(cp=loopOut[cp]);\n              break;\n            case ']':\n              cp = loopIn[cp]-1;\n              break;\n          }\n        }\n     });\n    }\n\nWhat's more, ES Harmony will also include tail call optimization.\n\n### A Shameless Hack\n\nTo get input on the emscripten compiled languages on our [repl.it](http://repl.it) project we considered using a CPS code transformer like the above-mentioned list but the approach failed for the following reasons:\n\n1. Compiling language interpreters to JS using [emscripten](https://github.com/kripken/emscripten/wiki) generates [lots of JavaScript](https://raw.github.com/replit/empythoned/master/dist/python.opt.js) which when ran against these compilers takes forever.\n2. JavaScript is not [tail call optimized](http://en.wikipedia.org/wiki/Tail_call); and this is bad because compiling to CPS means functions would be used for control flow, a whole lot of them. However I think some transformers do use clever tricks to minimize call stack.\n3. Performance hit which is for the most part from the cost of creating and invoking a lot of functions.\n4. Adding an additional compile step makes it even harder to debug.\n\nSo we took the easy way out and hacked the hell out of it. After thinking for a while about the problem of what in essence is resource sharing across threads which is prohibited in browsers for the added complexity and the security concerns of the web. I had a crazy idea of using the Web SQL Database to share data between the Worker and the UI thread since it has a synchronous worker API. While I'm sure this hack doesn't make threads share memory but is fast enough for stdin. The busy loop count (100000000 in the code below) is tuned and maybe tuned further to get faster results.\n\nWhen the language interpreter in a Web Worker hits an input operation it will stop execution, ask the main thread for input via a message, and busy loop while polling for changes in a Web Database table:","metadata":{"id":86}}],["87",{"pageContent":"var DB = self.openDatabaseSync('replit_input', '1.0', 'Emscripted input', 1024);\n    var input = function () {\n      self.postMessage('stdin');\n      var t = null;\n      DB.transaction(function (tx) {t=tx});\n      var i, res;\n      while (!(res = t.executeSql('SELECT * FROM input').rows).length) {\n        for (i = 0; i < 100000000; i++);\n      }\n      t.executeSql('DELETE FROM input');\n      return res.item(0).text;\n    };\n\n\nAnd in the UI thread:\n\n    worker.addEventListener('message', function (e) {\n      if (e.data === 'stdin') {\n        console.input(function (data) {\n          DB.transaction(function () {\n            tx.executeSql('INSERT INTO input (text) VALUES (' + data + ')', []);\n          });\n        });\n      } else {\n        // Do other stuff\n      }\n    }, false);\n\nThe Web SQL Database spec is deprecated for the IndexedDB which has not fully landed in browsers yet but this approach, in theory, should work with it.\n\n### Why all this?\n\nI ran into these issues during my work on [repl.it](http://repl.it) last year. And my recent on and off work on allowing debugging JavaScript in the browser at [codecademy](http://codecademy.com).","metadata":{"id":87}}],["88",{"pageContent":"{\n  \"title\": \"Kierkegaard and Entrepreneurship\",\n  \"date\": \"04/14/2016\"\n}\n---\nEarlier this year I spent a lot of time thinking about what \"impact\" means to\nme. In the tech world, we use it to say that our work matters and that we're\n\"making a dent in the universe\". But it feels empty most of the time. I came to\nthe conclusion that \"impact\" has no meaning to me when I'm easily\nreplaceable. No matter how many people's lives I'm touching with software that\nI've written, if I'm not bringing something unique -- a part of myself -- into\nmy work then I'm not doing something worth doing.\n\nLast month, on the [Philosophize This\npodcast](https://www.youtube.com/watch?v=1yPbakzvrx0), I heard about\nKierkegaard's work on despair and found it to be a weirdly good articulation of\nmy thoughts on work fulfillment and progress. He was a 19th century Danish philosopher\nand wrote primarily on psychology and the human condition. Although he viewed\nmost things through the lens of theology, it's common -- and works pretty well\n-- to have a secular reading of his work.\n\nHe viewed the self as having two opposing aspects. One that he called the\ninfinite and the other is the finite. He described the relationship between them\nas dialectical -- which means that one cannot exist without the other and that\nthere is constant tension between them. Furthermore, there exists a \"synthesis\",\na point which we can balance these contradicting forces.\n\n## The infinite and finite\n\nThe finite aspect of the self deals with worldly facts about the person. It is\nthe condition in which one exists. Your name, sex, race, and even things that\nare more general like the social, political, and cultural environment that you\nfind yourself in. The finite is concerned with necessity as opposed to\npossibilities -- things that are largely predetermined.\n\nThe infinite is the aspect of the self that deals with abstractions, different\nmeanings, and possibilities. And imagination is its primary device. The","metadata":{"id":88}}],["89",{"pageContent":"The infinite is the aspect of the self that deals with abstractions, different\nmeanings, and possibilities. And imagination is its primary device. The\ninfinite is concerned with what the self can become as opposed to its current\nstate. It opens up opportunities to free oneself from the rigidity of finite\nexistence.\n\nIf someone lacked either aspects of themselves, Kierkegaard thought they'd be in\na state of despair -- they can lose themselves in the infinite or in the finite.\n\n## The finite is the default\n\nThere is generally a set path in life for people to follow. Most choices are\nmade for us, and someone can exist purely within the tracks that were\nmanufactured for them by their parents, culture, and society. After we graduate\nand become adults we go to work and get plugged into the place that is deemed\nmost fit for us and contribute our small part as cogs in the machine.\n\n>Just by losing himself this way, such a man has gained an increasing capacity\n>for going along superbly in business and social life, indeed, for making a\n>great success in the world. Here there is no delay, no difficulty with his self\n>and its infinitizing; he is as smooth as a rolling stone, as courant [passable]\n>as a circulating coin. He is so far from being regarded as a person in despair\n>that he is just what a human being is supposed to be.\n\nBob is an engineer because his father was an engineer. He uses vim because\neveryone at work uses vim. He takes the designs passed to him by his product\nmanager and implements them 100% according to spec. He never questions\nanything. He is moved by his managers from team to team without any\nobjections. When asked why he's doing what he's doing, he parrots what his\nmanager told him about the importance of the mission and how he fits in. He is\nas passable as a coin.\n\n>by getting engaged in all sorts of worldly affairs, by becoming wise about how\n>things go in this world, such a man forgets himself, forgets what his name is","metadata":{"id":89}}],["90",{"pageContent":"as passable as a coin.\n\n>by getting engaged in all sorts of worldly affairs, by becoming wise about how\n>things go in this world, such a man forgets himself, forgets what his name is\n>(in the divine understanding of it), does not dare to believe in himself, finds\n>it too venturesome a thing to be himself, far easier and safer to be like the\n>others, to become an imitation, a number, a cipher in the crowd.\n\nBob is so easy to replace. He provides nothing to his team, work, society, or\nfamily that is unique to himself. He'd rather lose himself in the crowd, become\nindistinguishable, than be himself.\n\n>it is dangerous to venture. And why? Because one may lose. But not to venture\n>is shrewd. And yet, by not venturing, it is so dreadfully easy to lose that\n>which it would be difficult to lose in even the most venturesome venture, and\n>in any case never so easily, so completely as if it were nothing ...one’s self.\n\nBob should know that he stands to lose more by accepting the default. He risks\nlosing himself by taking the seemingly safe and secure choice. Let alone dream,\nimagine, or take the time to figure out what he really cares about in this\nworld.\n\n## Lost in the infinite\n\nEngaging in the infinite aspect of the self is important to balance out the\nfinite. To come up with new ideas, new understanding of the world, and new\nmeaning. In other words, to become something more. But unless this process is\ngrounded in reality (the finite), the self may risk becoming too abstract,\nfantastic, unreal.\n\nFor example, if Bob loves humanity so much it makes him weep, it's just his boss\nhe cannot stand. He has been carried away into the abstract, the infinite, and\nhave lost his relation to the finite, the concrete. He holds an abstract and\n[free-floating belief](https://wiki.lesswrong.com/wiki/Free-floating_belief)\nthat's not influencing his behavior.\n\nSimilarly a person may get caught up in abstract knowledge that never makes its\nway back to the finite world. For example, Bob likes to learn about Machine","metadata":{"id":90}}],["91",{"pageContent":"that's not influencing his behavior.\n\nSimilarly a person may get caught up in abstract knowledge that never makes its\nway back to the finite world. For example, Bob likes to learn about Machine\nLearning, he accumulates a whole lot of knowledge on the subject but never gets\na chance to apply it at his job. Bob has lost himself in pursuing this knowledge\nbecause he is not able to benefit himself or the world from it.\n\nFinally, and more relevant to our discussion, is being lost in \"willing\" (or\nwishing). For example, Bob wishes the world to move to renewable energy. But he\nnever takes an action towards that end. This goal is so out of his control that\nthere seems to be nothing he can do about it. He never grounds his imagination\nin the finite. He doesn't take the time to come up with the smallest possible\ntask that can be a step towards achieving his desired state.\n\n>the will does not constantly become concrete in the same degree that it is\n>abstract, in such a way that the more it is infinitized in purpose and\n>resolution, the more present and contemporaneous with itself does it become in\n>the small part of the task which can be realized at once, so that in being\n>infinitized it returns in the strictest sense to its self, so that what is\n>farthest from itself (when it is most infinitized in purpose and resolution) is\n>in the same instant nearest to itself in accomplishing the infinitely small\n>part of the task which can be done even today, even at this hour, even at this\n>instant.\n\n\n## Entrepreneurship\n\nI view entrepreneurship as means of reconciling the infinite and finite. You\nventure into your imagination, gather knowledge, and dream about a better\nworld. But you have to bring some of that back to earth. You take a step -- no\nmatter how small -- towards your imagined world in the real world.\n\nThis is not a one time thing, it's a recursive process. If your imagined\npossibilities became real then that's your new \"finite\". The process restarts\nand that's how we make progress.","metadata":{"id":91}}],["92",{"pageContent":"This is not a one time thing, it's a recursive process. If your imagined\npossibilities became real then that's your new \"finite\". The process restarts\nand that's how we make progress.\n\nThis notion of progress comes from [Hegelian\ndialectic](https://en.wikipedia.org/wiki/Dialectic#Hegelian_dialectic). When\ntraversing dialectical opposites like the infinite and finite, and are finally\nable to reconcile the conflict and arrive at common truths. This becomes our new\nreality and the process restarts.\n\nI see this as the perfect framework for the work we do in technology. There is\nalways a tension between what is and what could be. There are people and\norganizations who are stuck in the status quo (the finite). On the other hand,\nthere are folks who are stuck in the what could be without any actionability\n(the infinite).\n\nTaking a step into the infinite could be hard, but the hardest thing of all is\nbringing something back to the finite. The real art is coming up with the\nsmallest possible task that can be done here and now.\n\nTake Elon Musk for example, like Bob, he wants the world to move to renewable\nenergy but that's such a big and daunting task that seems unapproachable. Elon\ncould've been lost in the infinite. Instead he took a step towards doing\nsomething within his reach. He started an electric super-car company. It's\ncounter-intuitive how this is relevant as outlined in his [master\nplan](https://www.teslamotors.com/blog/secret-tesla-motors-master-plan-just-between-you-and-me)\nin 2006:\n\n>The strategy of Tesla is to enter at the high end of the market, where\n>customers are prepared to pay a premium, and then drive down market as fast as\n>possible to higher unit volume and lower prices with each successive model.\n\nTen years later, Tesla is shipping the first mass-market electric car and\ninnovating in battery technology. Making real progress towards a renewable\nenergy world.\n\nNot everyone can be Elon Musk, but we all can be entrepreneurial in our own","metadata":{"id":92}}],["93",{"pageContent":"innovating in battery technology. Making real progress towards a renewable\nenergy world.\n\nNot everyone can be Elon Musk, but we all can be entrepreneurial in our own\nsense. I think the most important thing is to always make progress. Don't get\nstuck in the weeds for too long. Imagine a better world, and take a small step\ntowards it.","metadata":{"id":93}}],["94",{"pageContent":"{\n  \"title\": \"Leapfrogging the IDE\",\n  \"date\": \"11/11/2018\"\n}\n---\n\nProgress in technology happens incrementally; it's hard to imagine inventing the cellphone without inventing landline telephones first. However, adoption need not respect the incremental nature of innovation. Advanced technology is often easier to adopt because it requires less infrastructure.\n\nThe classic example of this is the astonishing adoption of mobile in Africa especially relative to landline:\n\n![mobile vs fixed in africa](/public/images/africa.jpg)\n\nSometime last year we discovered that some users use [Repl.it](https://repl.it) -- an online REPL and development platform -- as their primary programming tool. This seems surprising at first: other than for learning, why would anyone use a more limited tool over a more mature and flexible one?\n\nIt turns out this was the wrong question to ask. A better one would be: \"if someone had already learned to code on an online REPL and it serves their needs then why would they want to invest in a local setup?\". Because they'd started with Repl.it, they need a compelling reason to install an IDE locally and possibly have to invest in buying a more expensive device (say from a Chromebook to a Mac).\n\nIn fact, this is the exact question our users are [asking](https://repl.it/talk/ask/Can-Replit-substitute-a-code-editor-like-PyCharm/6245): why do I have to switch?\n\n<hr/>\n![replit as primary coding](/public/images/primary.png)\n<hr/>\n\nThis way of formulating questions better explains the leapfrogging phenomenon in general: \"why do I have to invest in a PC if my tablet/mobile handles all my computing needs?,\" \"why do I need a credit-card if I can just use my mobile payment wallet?\" etc.\n\nIn our experience, even the people that make the switch are often dissatisfied with the result -- wishing VSCode  worked just like Repl.it:\n\n<hr/>\n![vscode user not happy](/public/images/vscodereplit.png?x=1)\n<hr/>","metadata":{"id":94}}],["95",{"pageContent":"<hr/>\n![vscode user not happy](/public/images/vscodereplit.png?x=1)\n<hr/>\n\nWith programmers growing up today being used to instant, interactive, globally accessible programming tools like Repl.it, Jupyter Notebooks, serverless (pay-as-you-go) compute, and others, it doesn't seem so outlandish to imagine a post-IDE world.\n\n_This blog is built and hosted with Repl.it: [amasad.me/__repl](/__repl)_","metadata":{"id":95}}],["96",{"pageContent":"{\n  \"title\": \"Implementing Bret Victor's Learnable Programming\",\n  \"date\": \"01/10/2014\",\n  \"hidden\": \"true\"\n}\n---\n\nA few days ago I [released debug.js](http://amasad.me/2014/01/06/building-an-in-browser-javascript-vm-and-debugger-using-generators/) and I breifly touched on the educational applications of the library. This morning, I had a couple of hours before going to work so I decided to implement the “Make flow visible” example from Bret Victor’s [‘Learnable Programming’ paper](http://worrydream.com/LearnableProgramming/) (Feel free to change the code):\n\n<iframe width=\"130%\" height=\"300px\" src=\"https://amasad.github.io/learnable-programming-demo/\" style=\"margin-left: -15%; border: 1px solid #EBF2F6;\"></iframe>\n\n[_premalink_](https://amasad.github.io/learnable-programming-demo/)\n\nHere is how it’s done:\n\n1. Given a program, step through it once using [debug.js](https://github.com/amasad/debugjs) to get the execution flow info\n2. Plot the execution flow using [d3](http://d3js.org/)\n3. Whenever the user scrubs through the plot, rerun the steps up to the step index that the user has the pointer over.\n4. Repeat from 1 when the editor code change\n\nThe entire thing is ~250 LOCs and is [up on Github](https://github.com/amasad/learnable-programming-demo).","metadata":{"id":96}}],["97",{"pageContent":"{\n  \"title\": \"Beware the Metagame\",\n  \"date\": \"11/11/2018\"\n}\n---\n\nHave you ever wondered why the less \"pure\" a scientific field is, the less progress we've made?\n\n![](https://imgs.xkcd.com/comics/purity.png)\n\nThe more abstract a subject is, the easier it is to reason about and therefore make progress on. That's why we've made a lot more progress in math and physics than any other subject. The problem became more salient recently as some of the perceived scientific progress made in the less pure sciences -- psychology, medicine, economics -- is being nullified in a widespread [\"replication crisis\"](https://en.wikipedia.org/wiki/Replication_crisis) where many scientific studies are failing to reproduce.\n\nOne way to get more abstract is to take the meta view of a subject. Programming Language Theory (PLT), for example, is the study of programming languages and their features and characteristics. While a lot of progress has been made in PLT, rarely does this translates into features in languages used in the real world. There's often decades-long gap for some form of a PLT idea to make to the industry because programming is messy and complicated and full of human problems that PLT researchers don't bother studying.\n\nI have a lot more respect for people who stick to the base game, avoiding getting sucked into the much more comfortable metagame. While we need researchers and scientists to go meta, they should remain tethered to the base-game and work closely with practitioners.","metadata":{"id":97}}],["98",{"pageContent":"I've first noticed this problem in the startup world where you see famous people that sell books, talk at conferences, and tweet advice to founders, but when you take a closer look, they've never done much founding themselves. They're like the \"entrepreneurship\" professor that never built a business. They're experts in the metagame -- they're polished speakers, engaging writers, and thought-leadering tweeters. The problem, though, is that they're not judged by customers, the market, or nature, instead they're judged by their peers. I call them metapreneurs.\n\nThis is an instance of what Nassim Taleb calls \"The Expert Problem\" -- when other experts and meta-experts judge experts. Eventually the lack of contact with reality will corrupt the field. In the sciences, that lead to the replication crisis and the [absurdities](https://areomagazine.com/2018/10/02/academic-grievance-studies-and-the-corruption-of-scholarship/) of the humanities.\n\nIf you find yourself going to a lot of conferences, opining too much on the latest fad in your field, and talking more about doing the thing than doing the job itself, then you, my friend, are getting sucked into the metagame.","metadata":{"id":98}}],["99",{"pageContent":"{\n  \"title\": \"Fake Minimalism\",\n  \"date\": \"01/12/2017\"\n}\n---\n\nIt's now fashionable to call yourself a \"minimalist\", but is that merely about not having things? I remember going to school everyday carrying nothing at all, no bag, no books, no pen, nothing -- I was a slacker. If I needed a\npen, say for a pop quiz, I had to borrow one quickly. In other words, I depended\non my classmates to provide the pen. Is this really minimalism? Yes, I didn't need the material possession of a pen, but I had to depend on others to provide the pen.\n\nIn Silicon Valley, where your company feeds you, washes your clothes, and supply your\nsocial life, are you a minimalist for not having a kitchen, a washer, or friends\noutside of work? Defined this way, a baby is the ultimate minimalist, after all\nit has zero possessions and relies on the mother for everything.\n\nI think self-sufficiency needs to be taken into account when evaluating\nminimalism -- even if it's at the cost of having more material possessions. For\ninstance, buying a hair clipper and spending a bit of time learning how to\ncut my own hair is definitely more minimal than relying on a barber that I have\nto schedule with, pay to, and go to (that can get sick, go on vacation, or\nmove away).\n\nA similar thing happens in software all the time -- is it more minimal:\n\n- to use a service than it is implement your own?\n- to take on a software package dependency than it is to write your own library?\n- to have users always augment your app with some other app for a missing\n  feature than it is to add it?\n\nA Fake Minimalist will go with the former for every case.\n\nIn his [\"Spec-ulation\" talk](https://youtu.be/oyLBGkS5ICk?t=23m), Rich\nHickey brought this point home by defining software growth as (my emphasis):\n\n- Accretion: to provide more functionality.\n- __Relaxation: to require less (dependencies, inputs, etc).__\n- Fixation: to fix bugs.","metadata":{"id":99}}],["100",{"pageContent":"{\n  \"title\": \"50th Anniversary of The Mother of All Demos\",\n  \"date\": \"12/9/2018\"\n}\n---\n\nI was asked to give a toast in celebration of the 50th Anniversary of [The Mother of All Demos](https://en.wikipedia.org/wiki/The_Mother_of_All_Demos) so I spent some time reflecting on Engelbart's work. \n\nMost of the commentary on his work is focused on the technical achievements and the impressive feats of engineering that's genuinely 50 years ahead of its time. Just this week we, at Repl.it, we introduced Multiplayer -- the ability to code together with anyone in the world -- and although we have the benefits of modern tooling and infrastructure it was still hard work\n\nA more interesting question to ask would be: \"What's Douglas Englebart's generation function?\" In other words, what ideas, themes, and philosophies that have inspired his groundbreaking work?\n\nI didn't have much time to work with, so I had to go mostly of off memory -- this question requires a more in-depth examination. However, I've identified three themes that are worth studying. \n\n## Computers as mind extenders\n\nEngelbart and his contemporaries saw computers as first and foremost tools for mind extension. Something we can use to augment our intellect to take on more and do more. \n\n>\"By augmenting human intellect we mean increasing the capability of man to approach complex problem situation to gain comprehension to suit his particular needs and to derive solutions to problems. Increased capability in this respect is taken to mean mixture of the following: more rapid comprehension, better comprehension, the possibility of gaining useful degree of comprehension in situation that previously was too complex, speedier solutions, better solutions and the possibility of finding solutions to problems that before seemed insoluble.\" -- [Augmenting Human Intellect](https://www.dougengelbart.org/pubs/papers/scanned/Doug_Engelbart-AugmentingHumanIntellect.pdf)","metadata":{"id":100}}],["101",{"pageContent":"This sits in stark contrast to today's computers as the driver for the attention economy. Where computers as seen as entertainment devices at best. A more cynical reading of the way governments and ad-based businesses use computers would lead you to believe they're devices of control.\n\n## Evolutionary design\n\nTo understand Engelbart it's important to not view him as a lone inventor genius a la Tesla that predicted what computers could do 50 years ahead of his time. In his own words you can see that they took a much more exciting approach to discovery:\n\n>\"We're pursuing this monstrous goal by building and trying *empirically* -- we approach evolutionary-wise because we feel it's a whole system problem [...] it's much more than these computer tools\"\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/agdPQuFr0yg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Bootstrapping\n\n\"Bootstrapping\" is another recurring theme in Engelbart's work. I think of it as \"increasing returns\":\n\n- You build tools, and then the tools you built helps you create better tools. \n- Tools make you smarter, and you make better tools that make you smarter... ad nauseam. \n- Tools increase productivity which makes us wealthier which in turn allows us to invest in more and better tools.\n\n## Conclusion\n\nIt's worth noting that what seemed to drive Engelbart was his concern for the unique challenges an exponentially changing world brings. He believed that [\"boosting Collective IQ\"](https://www.dougengelbart.org/pubs/papers/scanned-original/2004-augment-133319-augmenting-society's-collective-iqs.pdf) is imperative for the flourishing of humanity.\n\nIn Silicon Valley, at least in my circles, there's a general feeling that we need to return to the thinking of computers as \"bicycles for the mind.\" And I hope we do.","metadata":{"id":101}}],["102",{"pageContent":"In Silicon Valley, at least in my circles, there's a general feeling that we need to return to the thinking of computers as \"bicycles for the mind.\" And I hope we do.\n\n_Thanks to Figma and Dylan Field for inviting me to [reflect](https://www.meetup.com/Figma-SF/events/cwsnhqyxqbmb/) on this awesome day._","metadata":{"id":102}}],["103",{"pageContent":"{\n  \"title\": \"Civilizational Primitives\",\n  \"date\": \"11/16/2022\"\n}\n---\n\nAt the dawn of civilization, with the introduction of the agricultural revolution, humans needed to coordinate in larger numbers so _the hierarchy_ emerged as the primary organizing tool. People organized into pyramid-like structures with ranks and different entitlements and responsibilities. This structure proved useful and spread to apply to every aspect of civilization: we had kings and peasants, owners and serfs, clergy and laymen. \n\nWith the industrial revolution, we needed ways to coordinate in larger numbers and a more decentralized manner. The _assembly line_ emerged as the basic civilizational primitive of this era. Every node — be it a person, a company, or a nation — was hyper-specialized and produced one thing with a standard interface to handle transactions between nodes. While the hierarchy never disappeared, many aspects of society were remade in the shape of the assembly line. Children go through school one grade at a time, the economy is made of supply chains and consumer-producer pairs, money is printed by the Fed and filtered to the economy through a chain of financial institutions. Even software is built by layering on components on a stack going through different stages and pipelines.","metadata":{"id":103}}],["104",{"pageContent":"Today, I believe we are going through another major transition: The Information Revolution. While it’s become out of fashion to point this out, it’s undeniable that civilization is being rebuilt. So what is this era’s civilizational primitive? It seems clear to me it’s _the network_. Unlike the pyramid and the supply chain, the network topology requires less coordination; it’s emergent, self-improving, and self-organizing. The radio, telephone, and the internet are straightforward examples of networks. But if you look deeply, you’ll see that networks are infecting almost everything else: money flows through payment networks (and Bitcoin is bootstrapping money on the network), startups and open-source proved that flatter network-like structures could be a superior way to work, and even software is changing to be built through networks of packages, APIs, and cloud computing. And while schools remain stubbornly unchanged, innovation at the edges resembles a network: kids learn to code and make on networks like Scratch and [Replit](https://replit.com), and they learn how to solve problems on networks like [Synthesis](https://synthesis.is). How will networks change government and politics? Arguably politics is already changed. Today policy is made not top-down but through a decentralized network of universities, think tanks, donors, and politicians. [The Network State](https://thenetworkstate.com) is an attempt to describe the future of governance. \n\nWhile the network, like its predecessors, is a neutral tool, I believe it creates a slightly more free world. Strict hierarchies meant that people were stuck in castes and bad luck. The assembly line reduced people to cogs in a giant machine. While the network affords people more freedom to self organize and choose which networks to affiliate with.","metadata":{"id":104}}],["105",{"pageContent":"{\n  \"title\": \"Why I'm Excited About Object.observe\",\n  \"date\": \"03/16/2014\",\n  \"hidden\": true\n}\n---\n\nObject.observe is one of the newer additions to JavaScript that will be landing in [Chrome soon](https://groups.google.com/forum/#!topic/v8-users/aeSFJK1L5n4). It lets you listen to changes on objects and their properties. I think it has many interesting applications and here are the few that I'm excited about the most.\n\n## Basic usage\n\nBefore we dive into the applications of `Object.observe`, let's take a second to look at a basic usage example.\n\n```javascript\nvar o = {};\n\nObject.observe(o, function(changes) {\n  // This callback runs asynchronously and aggregates the changes that happened\n  // in the previous execution turn into `changes` param.\n  changes.forEach(function(change) {\n    console.log(change.type, change.name, change.oldValue);\n  });\n});\n\no.foo = 1; // add, 'foo', undefined\no.foo = 2; // update, 'foo', 1\ndelete o.foo; // delete, 'foo', 2\n```\n\nYou can start playing with it in Chrome today by going to 'about:flags' and enabling the *Enable Experimental JavaScript* flag. For more usage examples and API documentation refer to the to the [Harmony wiki](http://wiki.ecmascript.org/doku.php?id=harmony:observe).\n\n## Two-Way Data Binding\n\nAlso known as the holy grail of JavaScript MVC frameworks. The ability to bi-directionally synchronize your model and view without piling on mountains of code makes for easier to maintain code, lower payload size, and possibly faster applications. Without `Object.observe` we currently rely on:\n\n* wrapper objects (Backbone.Model, Ember.Object)\n* dirty checking (Angular)\n* getters and setters","metadata":{"id":105}}],["106",{"pageContent":"* wrapper objects (Backbone.Model, Ember.Object)\n* dirty checking (Angular)\n* getters and setters\n\nWith wrapper objects we lose interop with the plethora of JS libraries that are built to operate on plain objects and incur the cost of converting from and to plain objects when communicating over the network (or with other windows, web workers etc). On the other hand dirty checking can be expensive to perform and needs to be either performed via polling or restricting where and when we can operate on our data objects. Finally, getters and setters will only notify us of changes on the property level and not of the deletion and addition of properties on the parent object and requires a considerable amount of wiring to boot.\n\nFrameworks can start using `Object.observe` as a faster and simpler implementation while keeping the same API. However, once this lands on all browsers, I think most people will be more than happy to go back to using plain old JS objects without losing any of the power these frameworks provide.\n\n## Evented Programming\n\nEvery sufficiently advanced JavaScript library, framework, or application contains at least one implementation of an event emitter system. For example, if you use Backbone or Ember, you have the framework's implementation and also, jQuery's implementation on which both depend. This bloat hurts both the developer, having to deal with multiple similar implementations, and the user, having to download more data and using more bandwidth and battery life. `Object.observe` supports custom notifications via the `Object.getNotifier` API, which can be thought of as “triggering events” in the traditional event emitter implementation.\n\nHere is an example of triggering a ready event on an application controller.\n\n```javascript\nObject.observe(App.controller, onReadyCallbak, ['ready']);\n\n// Sometime later…\nObject.getNotifier(App.controller).notify({\n  type: 'ready'\n});\n```\n\n## Debugging","metadata":{"id":106}}],["107",{"pageContent":"```javascript\nObject.observe(App.controller, onReadyCallbak, ['ready']);\n\n// Sometime later…\nObject.getNotifier(App.controller).notify({\n  type: 'ready'\n});\n```\n\n## Debugging\n\nLast week I wrote about  [JavaScript debugging techniques](http://amasad.me/2014/03/09/lesser-known-javascript-debugging-techniques/) and how to -- among other things -- break on object property access to stop and take a look at what's changing certain properties on your objects. With `Object.observe`, we can get an idea of when and what changed on an object:\n\n```javascript\nObject.observe(someObject, function(changes) {\n  console.log('someObject changed', changes);\n});\n```\n\nUnfortunately, we won't be able to get a stack trace that points back to the code that made the change because the callback runs asynchronously, nonetheless, it should be very useful.\n\n## Other Resources\n\nIf you want to learn more, you might be interested in the following resources:\n\n* [The spec on the Harmony wiki](http://wiki.ecmascript.org/doku.php?id=harmony:observe).\n* [Rick Waldron's post on Object.observe](http://weblog.bocoup.com/javascript-object-observe/)\n* [Addy Osmani's talk on Object.observe](http://addyosmani.com/blog/the-future-of-data-binding-is-object-observe/).","metadata":{"id":107}}],["108",{"pageContent":"{\n  \"title\": \"What is Perfectionism and How to Cure It\",\n  \"date\": \"03/13/2016\"\n}\n---\n\n> My problem is that I'm a perfectionist\n> -- Everbody\n\nAs I finished writing the title for this post I thought about quitting. I didn't\nthink it was good and told myself that this is off to a bad start and it'll only\nget worse as I write more words. There is always an easy fallback to\nget out of doing hard work without feeling bad about it: \"I'm a perfectionist,\nand I can't possibly achieve perfection in this project so I'm going to quit altogether\".\n\nWhat was really going on here is that I realized that it's going to be harder\nthan what I imagined it would be, and I just didn't want to do the work. Just\nbeing lazy. Laziness is a simplification here and in this post I'll go over all the\nlayers that I've been able to debug in myself.\n\n### False dichotomies\n\nI often notice that before I throw my hands in the air and claim perfectionism I\npresent myself with a dichotomy: \"It's either that I finish this work and hit all\nmy goals or it's not valuable to anyone\". Here are some examples:\n\n* \"I don't think it's worth going to the gym today because I know I don't have\n  the time to go everyday and get six packs\"\n* \"I need to revamp my blog before I write my blog post and I don't have the\n  time to do all that now\"\n\nThe truth is that most things are still valuable even in there imperfect or\nunfinished form. For example, it's hard to argue with the effectiveness of the\npopular Minimum Viable Product approach to product development. You're able to\ndeliver value to people and at the same time test and iterate on your ideas.\n\nBack to our examples, going to the gym at any time no matter what the situation is will be\na categorically positive thing to do. And writing a blog post doesn't strictly\ndepend on your blog's design (I almost fell for this one the other day).\n\n### Decision fatigue\n\nAnother thing that I've detected in myself that would make me fallback on the\n\"I'm a perfectionist\" excuse is [decision","metadata":{"id":108}}],["109",{"pageContent":"### Decision fatigue\n\nAnother thing that I've detected in myself that would make me fallback on the\n\"I'm a perfectionist\" excuse is [decision\nfatigue](https://en.wikipedia.org/wiki/Decision_fatigue). You can get tired from\njust making decisions if you had to do so many of them while working on\nsomething.\n\nSay for example you want to tidy up your apartment. Since this is such a general goal, you'll be faced\nwith so many questions along the way: \"Should I fold my clothes like I always do\nor is it time reorganize my closet? Should I throw out the books I'm not using?\nShould I maybe give them away?\" and so on. Very soon you'll be tired just from\nanswering these questions without even doing much work. Then you'll see the\nnice and cozy excuse waiting for you: \"I'm such a perfectionist I can't even tidy up\nmy room!\".\n\n\n### Embarrassment\n\nPutting yourself and your work in the public requires a great deal of\ncourage. For probably some evolutionary survival reasons we tend to think about\nall the things that could go wrong. One of the strongest negative emotions that\nI get when I'm not certain about the quality of my work is the feeling of being\nembarrassed by it. That people much smarter than me will look at it and\nlaugh about how bad it is. That's almost never the case. I've written some\nreally silly posts and code and it rarely gets ridiculed. Even when it does happen,\nit's usually by people that I don't necessarily respect or look up to (see my\npost about on the [Stoic of Open\nSource](http://amasad.me/2016/01/13/the-stoic-of-open-source/) for an example of\nthis). That is not to\nsay that everything I do is perfect, in fact, I get really awesome constructive\nfeedback every time I release something.\n\nAnother tactic for avoiding embarrassment is not to\nover-promise. I'd go as far as to say you should not talk about your\nideas before verifying that they work (see my post about [idea\ngeneration](http://amasad.me/2016/03/09/john-carmack-on-idea-generation/)). Which","metadata":{"id":109}}],["110",{"pageContent":"ideas before verifying that they work (see my post about [idea\ngeneration](http://amasad.me/2016/03/09/john-carmack-on-idea-generation/)). Which\nreminds me of what [Tom](https://twitter.com/tomocchino) my manager (who manages\nprojects like React and Flow at Facebook) likes to say: \"under-promise, over-deliver\".\n\n### Confidence\n\nIf you aspire to do quality work you need to be able to trust in your abilities.\nOr at least that you would try really hard. Going back to the meta-example of writing this post. If I\nwere confident of my abilities to overcome any hardship that started with the\ntitle, I would keep going while knowing that I will rewrite this as many time as\nit takes to get it to good enough state.\n\nSo I would need to be confident of my ability to get close to the goal, and in\nmy ability to persevere and work hard enough to get there.\n\n### Curing perfectionism\n\nRecognizing these patterns in our behavior is a good first step in getting over\nthem. I had a lot of success with -- what I later discovered to be -- cognitive\nbehavioral therapy. [This is a good introduction](http://cbtsanfrancisco.com/cbt-is-for-hackers/) to the subject but we're\nmainly interested in the following methods:\n\n* Forced Activity\n* Exposure\n\nForced Activity is when you recognize a vicious cycle in your behavior and force\nyourself out of it. It's forced because you need to swim against the\ncurrent in order to break out. For example, if you noticed that you always start\nprojects but quit and claim perfectionism, then try to start the smallest project\npossible that is actually perfectible and finish it. If you have too many unread\nbooks and you stopped reading because you can't possibly finish all the books\nthen go throw them out (or delete everything on your kindle). Even if the action is a\nbit radical, do it to get you out of the cycle.\n\nExposure is when you tackle psychological pain by leaning into it. Start small\nwith something you fear and do more and more. If, for example, you're afraid of","metadata":{"id":110}}],["111",{"pageContent":"Exposure is when you tackle psychological pain by leaning into it. Start small\nwith something you fear and do more and more. If, for example, you're afraid of\npublishing code then start by publishing a gist of a program that does something useful\nand share it. Then slowly work your way up to sharing a library and finally to\ncontributing to large open source projects.\n\nUp until last year, I had a crippling  fear of public speaking and this method worked really well for\nme. Although I've spoken a few times before, every time I spoke the fear was\nworse than the one before. However, after committing\nto the Exposure method I started small by\n[speaking](https://twitter.com/brooklyn_js/status/436669188103344128) at a\nfriendly and welcoming meetup in NYC called BrooklynJS. And then worked my way\ntowards a larger conference and spoke at\n[EmpireJS](https://www.youtube.com/watch?v=rcjUR4icvoQ). I then started really\nleaning into it and even performed at a [story telling\nshow](https://www.facebook.com/events/311252482399585). And finally completely\nimprovised a couple of meetup talks. I'm now almost fearless when it comes to public\nspeaking.\n\nIn conclusion I think that perfectionism is mostly a thin veil hiding a\nmultitude of insecurities, fears, and logical fallacies. And it's something we\nneed to face in order to reach self-actualization.\n\n----------------------------------------------\n\n*Thanks to [Haya Odeh](https://twitter.com/hayaodeh) for reviewing this post and\n providing feedback, examples, and refining many of the ideas mentioned here.*","metadata":{"id":111}}],["112",{"pageContent":"{\n  \"title\": \"Python book\",\n  \"date\": \"03/16/2014\",\n  \"hidden\": true\n}\n---\n\nIn this chapter we'll look at the basics of the Python programming language, and we'll build up to your first program! \n\n## What is Python?\n\nPython is a general-purpose programming language that can be used for many different types of programming projects. It was designed by Guido van Rossum and first released in 1991. It has a simple syntax, making it easy to learn, and is powerful enough to write large applications. It has been used for many things including web development, graphical user interfaces, game development, and scientific applications.\n\nOne of the key features of Python is that it is interpreted. This means that rather than having to compile the program into a machine-readable format, you can simply run the program directly from the source code. This is one of the reasons why Python is so popular for beginners - it's easy to run and experiment with code!\n\nAnother key feature of Python is that it is a high-level language. This means that the programs you write are much more abstract than programs in languages like C. This makes them easier to read and understand, and it makes the programs easier to modify. It also means that you don't have to worry about some of the lower-level details of how the computer actually works.\n\nOne of the best things about Python is that it has a huge library of pre-written code that you can use in your own programs. This makes Python an ideal choice for beginners, since you don't have to worry about the details of how to do things - you just use the functions that someone else has already written.\n\nPython is free, and it is available for all major operating systems, including Windows, Mac OS X, and Linux.\n\n## Expressions","metadata":{"id":112}}],["113",{"pageContent":"Python is free, and it is available for all major operating systems, including Windows, Mac OS X, and Linux.\n\n## Expressions\n\nAn expression is a piece of code that returns a value. For example, 2 + 2 returns the value 4, and \"Hello\" + \"World\" returns the value \"HelloWorld\". In Python, expressions are made up of values and operators. Values can be numbers, strings, variables, or even objects, while operators are symbols that perform some kind of action on the values. For example, the plus sign (+) is an operator that adds two values together. The following are some examples of expressions:\n\n```\n\"Hello\" + \"World\"\n\n\"I am \" + \"learning Python\"\n\n2 + 2\n\n\"Hello\" * 3\n\n\"Hello\" / 2\n\n5 * 2\n\n\"Hello\" + \"World\" * 3\n```\n\nIn Python, expressions are evaluated from left to right, so in the above examples, the first value is added to the second, the first number is multiplied by the second number, and so on.\n\n## The print function\n\nThe print function is used to output values to the screen. In Python, print takes one argument, which can be any value, including strings, numbers, and even other objects. For example, the following are all valid print statements:\n\n```\nprint(\"Hello\")\n\nprint(1)\n\nprint(2 + 2)\n\nprint(1 / 2)\n\nprint(1 + 1)\n\nprint(\"Hello\", \"World\")\n\nprint(1 + 2, \"Hello\", \"World\")\n\nprint(2 + 2, \"Hello\", \"World\")\n```\n\nIn Python, the output from print is always shown after a newline character. This is why the print statement in the above examples always ends with a newline. If you want to display multiple lines of text, you can use the triple-quoted string format:\n\n```\nprint(\"\"\"This is\na multi-line string. \"\"\")\n```\n\n## Basic data types\n\nIn Python, integers are used to represent whole numbers. In other languages, the integers might be called \"int\" or \"long\" instead. For example, the following are all valid integer values:\n\n```\n123\n\n1234\n\n1234567890\n\n-100\n```\n\nIn Python, strings are used to represent sequences of characters. In other languages, the strings might be called \"str\" or \"text\" instead. For example, the following are all valid strings:\n\n```","metadata":{"id":113}}],["114",{"pageContent":"-100\n```\n\nIn Python, strings are used to represent sequences of characters. In other languages, the strings might be called \"str\" or \"text\" instead. For example, the following are all valid strings:\n\n```\n\"Hello\"\n\n\"Hello, World\"\n\n\"This is a string\"\n\n\"This is a string\" + \" with multiple words\"\n```\n\nStrings can be enclosed in single quotes (') or double quotes (\"). In Python, strings are always treated as Unicode, which means that you can use any characters that are part of the Unicode character set.\n\nThe following are all valid strings:\n\n```\n'Hello'\n\n'Hello, World'\n\n'This is a string'\n\n'This is a string' + ' with multiple words'\n\n'This is a string' + ' with multiple words' + ' and multiple lines'\n\n'This is a string' + ' with multiple words' + ' and multiple lines' + ' and a newline'\n```\n\n## Variables\n\nA variable is a name that refers to a value. Variables can be used to store values that you need to use later. For example, you might have a variable named \"number\" that stores the value 2. Later, you can use the variable number to represent the value 2.\n\nThe following are all valid variable names:\n\n```\nnumber\n\na\n\na1\n\na2\n\nabc\n```\n\nSome variables are predefined in Python, such as True and False.\n\nVariables can be assigned values using the assignment operator, which is an equals sign (=). For example, the following assigns the value 2 to the variable number:\n\n\n```\nnumber = 2\n```\n\nNow `number` holds the integer `2`. We can now use the variable in the next expression:\n\n```\nprint(number * 5)\n```\n\nWhich will print `10`.\n\n\n## Your first program\n\nBefore we write our first program let's learn one more function: input().\n\nThe input() function is used to ask the user to input a value. For example, the following code will ask the user to enter a number:\n\n```\nnumber = input(\"Enter a number: \")\n```\n\nWhen the user enters a number and hits enter, the number is stored in the variable number.\n\nNow let's write our first program:\n\n```\nprint(\"Hello\")\n\nprint(\"World\")\n\nnumber = input(\"Enter a number: \")\n\nprint(\"You entered: \", number)\n\nLet's look at this program in detail:","metadata":{"id":114}}],["115",{"pageContent":"Now let's write our first program:\n\n```\nprint(\"Hello\")\n\nprint(\"World\")\n\nnumber = input(\"Enter a number: \")\n\nprint(\"You entered: \", number)\n\nLet's look at this program in detail:\n\nprint(\"Hello\")\n\nprint(\"World\")\n```\n\nThis code prints the words \"Hello\" and \"World\" to the screen.\n\n```\nnumber = input(\"Enter a number: \")\n```\n\nThis code asks the user to enter a number and stores it in the variable number.\n\n```\nprint(\"You entered: \", number)\n```\n\nThis code prints the word \"You entered:\" and then the number that was entered.\n\n# Chapter 2: Control Flow\n\nIn the last chapter we learned how to write and execute Python programs as a series of instructions. However, what makes programming powerful is its ability to control the flow of execution. That is, we can specify conditions under which a certain instruction is executed.\n\n## Boolean Values\n\nPython has a data type boolean, which can have the values True or False .\n\n```\n>>> True\nTrue\n>>> False\nFalse\n>>> True == False\nFalse\n```\n\nThe == operator tests for equality. The != operator tests for inequality.\n\nNote that True and False are not strings.\n\n## Comparison Operators\n\nThe comparison operators test whether two values are equal or not. The comparison operators are == , != , < , > , <= , >= .\n\n```\n>>> 2 < 3\nTrue\n>>> 2 == 3\nFalse\n>>> 2 != 3\nFalse\n>>> 2 > 3\nFalse\n>>> 2 >= 3\nFalse \n>>> 2 <= 3\nFalse\n```\n\n## Boolean Operators\n\nThe and operator evaluates to True if both operands are True . The or operator evaluates to True if either operand is True . The not operator negates a Boolean value.\n\n```\n>>> True and True\nTrue\n>>> True and False\nFalse\n>>> False or True\nTrue\n>>> not True\nFalse\n```\n\n## If Statements\n\nLines of code can be grouped into a block. A block begins with a line that starts with a colon ( : ) and end when the indentation decreases. The lines within the block must be indented.\n\n```\nif x > y:\n  print(x)\n  print(y)\n```\n\nThis if statement contains two lines of code. The first line of code prints the value of x if x is greater than y . The second line of code prints the value of y .","metadata":{"id":115}}],["116",{"pageContent":"```\nif x > y:\n  print(x)\n  print(y)\n```\n\nThis if statement contains two lines of code. The first line of code prints the value of x if x is greater than y . The second line of code prints the value of y .\n\nThe if statement is an expression. If x > y is True , then the expression x is True .\n\nThe and and or operators can be used in an if statement.\n\n```\nif x > y and x > z:\n  print(x)\n  print(z)\n```\n\nThe if statement is a compound statement. The compound statement consists of the if statement and the two lines of code. The and operator is used to join two statements.\n\n```\nif x > y and x > z:\n  print(x)\n  print(z)\n```\n\nIf x is greater than y and greater than z , then the statements print(x) and print(z) are executed.\n\n## Else\n\nThe else keyword can be used in an if statement to specify what should happen if the condition is not true.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelse:\n  print(x + y)\n```\n\nIn this example, the value of x is printed if x is greater than y . Otherwise, the value of x + y is printed.\n\nPython provides a short-circuit evaluation. If x > y is true, then x + y will never be evaluated because it is not necessary.\n\n## Nested if Statements\n\nA nested if statement contains one if statement inside another if statement.\n\n```\nif x > y:\n  print(x)\n  print(y)\n  if x > z:\n    print(x)\n    print(z)\n```\n\nThis nested if statement will print the value of x if x is greater than y . If x is greater than z , then the value of x is printed.\n\n## else and elif\n\nelse and elif are used to extend the if statement.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelif x > z:\n  print(x)\n  print(z)\nelse:\n  print(x + y + z)\n```\n\nThe elif keyword can be used in place of the else keyword.\n\n```\nif x > y:\n  print(x)\n  print(y)\nelif x > z:\n  print(x)\n  print(z)\nelse:\n  print(x + y + z)\n```\n\nIf x is greater than y , then the statements print(x) and print(y) are executed. If x is greater than z , then the statements print(x) and print(z) are executed.\n\n## Loops\n\nLoops are used to execute a block of code repeatedly. There are two types of loops: the while loop and the for loop.","metadata":{"id":116}}],["117",{"pageContent":"## Loops\n\nLoops are used to execute a block of code repeatedly. There are two types of loops: the while loop and the for loop.\n\n## While Loops\n\nA while loop executes a block of code while a condition is True .\n\n```\ni = 0\nwhile i < 10:\n  print(i)\n  i = i + 1\n```\n\nIn this example, the value of i is printed. The while loop continues until the value of i is greater than 10.\n\nThe while loop is an expression. If i < 10 is True , then the expression i is True .\n\n## For Loops\n\nA for loop executes a block of code a specified number of times.\n\n```\nfor i in range(10):\n  print(i)\n```\n\nIn this example, the value of i is printed 10 times.\n\nThe for loop is a compound statement. The compound statement consists of the for loop and the two lines of code.\n\n## Break and Continue\n\nThe break and continue keywords can be used in a loop.\n\n```\nwhile True:\n  i = input('Enter a number: ')\n  if i > 0:\n    print('The number is positive.')\n    continue \n  if i < 0:\n    print('The number is negative.')\n    break\n\nThe break keyword is used to terminate a loop.\n\nThe continue keyword is used to skip the rest of the code block and continue to the next iteration of the loop.\n\n## The range() function\n\nThe range() function can be used to generate a list of numbers.\n\n```\nfor i in range(5):\n  print(i)\n```\n\nThe range() function takes one parameter, which is the number of numbers in the list. The range() function returns a list.","metadata":{"id":117}}],["118",{"pageContent":"{\n  \"title\": \"Repl.it is not an IDE\",\n  \"date\": \"09/15/2020\"\n}\n---\n\nWhen a new thing is invented, we're often stuck with the old words to define it. The first car was a \"horseless carriage,\" and the first computer was a \"giant brain.\" In the same inaccurate way, Repl.it is an \"online IDE.\"<small>[1]</small>\n\nRepl.it gets its name from \"REPL\", the Read Eval Print Loop, a basic language tool found in most modern programming languages and environments. It's a tool that allows you to interact with a program by reading, evaluating, and printing data.\n\nIf you think about development environments as a continuum from REPL to IDE, you can see how Repl.it is located closer to the REPL end. It's a tool for exploratory programming. It's for playing with ideas.   \n\nRepl.it is a reaction to the modern software development grind, where many developers spend their time waiting for builds, running tests, fighting with linters, and configuring frameworks. It's an attempt to get back to the basics of programming -- to make coding fun again.  \n\nTo use Repl.it you don't have to ditch your IDE. You can use it to investigate a library's design, try out a new language feature, experiment with a new framework, or even use it to build and host a side-project.\n\nRepl.it collapses the entire development lifecycle into a simple interface. No need for pull requests, continuous integration, or deployment. You simply code and its live! With [Multiplayer](https://repl.it/site/multiplayer), you can even do all this with other people in real-time. \n\nIf your IDE is a car, Repl.it is a motorcycle. If your IDE is a desktop computer, Repl.it is an iPad. If your IDE is a skyscraper, Repl.it is a cozy vacation house. \n\nRepl.it is a tool for exploratory programming. It's for playing with ideas. \n\nRepl.it is a tool for sharing code. It's for building community.\n\nRepl.it is a tool for education. It's for learning to code.\n\nRepl.it, however, is **not** a tool for building large-scale software. It's not for your legacy codebase.","metadata":{"id":118}}],["119",{"pageContent":"Repl.it is a tool for education. It's for learning to code.\n\nRepl.it, however, is **not** a tool for building large-scale software. It's not for your legacy codebase. \n\nRepl.it is a tool for building side-projects. It's for hosting fun apps.\n\nRepl.it is a tool for experimenting with new ideas. It's for being creative. \n\nNext time you have an idea, kickback on the couch and hit up [repl.new](https://repl.new). You can always go back to your IDE when you need it. \n\n---\n<small>\n[1]: It's unfortunately how we currently describe Repl.it on the marketing pages, which was necessary when Repl.it was unknown. However, this will change soon. \n</small>","metadata":{"id":119}}],["120",{"pageContent":"{\n  \"title\": \"Computers Doing The Right Thing\",\n  \"date\": \"12/24/2021\"\n}\n---\nI'm fascinated by the idea of computers doing The Right thing without explicit user input. Today this is most apparent in autocorrect, but the idea -- in a more advanced form -- goes back to the early days of computing. \n\nI think if software designers embraced some of the ideas I'm going to talk about here, computers will be much more delightful to use. We won't need endless pages of menus and buttons. And humans can be free to think about their task as opposed to the software that's doing the task. \n\n## DWIM\n\nInterlisp is one of the most fascinating could-have-been computer systems in history. It shipped with one of the first from-the-ground-up interactive programming environments, structured editor, and many other innovations. Most impressive was the concept of Do What I Mean (DWIM).\n\n![interlisp manual](/public/images/dwim.png)\n\nThe most basic DWIM feature is one of spell-correction, but it goes way further than that. It can fix some basic logic errors and even lets the programmer define their own DWIM logic. \n\n## From correction to intention\n\nDWIM and other contemporary examples (like Google's \"did you mean?\") are about correcting user errors. A more advanced and fascinating idea is for the computer to detect intention and act on it. Humans do it all the time; we see the intention in other people and act on it. Like for example making way for someone who's walking towards you. \n\nSoftware too can and should do basic intention-detection and I'm surprised I don't see it much in the wild. Let's look at examples of how we used it at work. \n\n## Intent-based development environment\n\nAt Replit, we're really passionate about making a simple yet powerful programming environment. The environment needs to be very intuitive for newbies and should be enjoyable for experts. \n\n![hello world](/public/images/helloworld.png)","metadata":{"id":120}}],["121",{"pageContent":"![hello world](/public/images/helloworld.png)\n\nThe environment always starts with 3-columns, something we've tested and made sure that newbies intuitively get: files, editor, console. That's great, but now **what if you want to do web development?**\n\nYou simply write the code, and the environment will open a new pane to show you the output. \n\n![web dev](/public/images/web.png)\n\nSo how does it work? We hook into the Linux Audit system and watch for any new open sockets. In other words, if you start a server we'll assume you want to see the output from it. And in the vast majority of cases, we're right.\n\nWeb development is not the only thing people want to do on Replit, many would also like to build games, plot, or boot up old operating systems for fun. In this case, if you wrote the code, or invoked the program that wants to do graphics, we will detect that and stream VNC down to your browser. So how do we do it? Initially, we relied on [LD_PRELOAD](https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/) which allows you to override arbitrary function calls and inject your own logic. Pretty neat and works for other intent-based functionality. However, we decided to [move away](https://blog.replit.com/native-graphics-love) from that, here is the new approach:\n\n> In order to avoid using the LD_PRELOAD trick, we took a page out of systemd's socket activation feature, so that we detect the intent of a repl wanting to communicate with X by opening the socket to the X server, and launch the server + Window Manager at that point in time.\n\nFinally, much of software development today involves open-source packages. However, package manager can be a bit of pain to use, and honestly they can take out of the flow of coding. So while we do have native UI for package management, we also built a system to detect your intent to install an OSS package and simply do it for you. \n\n![import](/public/images/import.gif)\n\n## Intent detection is hard but worth it","metadata":{"id":121}}],["122",{"pageContent":"![import](/public/images/import.gif)\n\n## Intent detection is hard but worth it\n\nAs you can see intent-detection required system-level knowledge and hacking. At Replit, we're completely obsessed with creating delightful experiences so we go the extra mile to make it happen. But it's worth recognizing that it's not perfect. Sometimes we get it wrong, and the user can get into a pretty messed-up state. \n\nWhile complete detection of intent is an [AI-complete problem](https://en.wikipedia.org/wiki/AI-complete), there are a lot of heuristics that we can apply. Including using modern AI techniques. And software can and should get smarter as more people use it. \n\nI hope this inspires someone to make their software Do The Right Things.","metadata":{"id":122}}],["123",{"pageContent":"{\n  \"title\": \"The Stoic of Open Source\",\n  \"date\": \"01/13/2016\"\n}\n---\n\nTwo unrelated things happened recently:\n\n1. A few high profile open source maintainer burnouts<sup>1</sup>\n2. I've been reading a lot of philosophy<sup>2</sup>\n\nI was first introduced to Stoicism by a friend who recommended the book [A Guide\nto the Good\nLife](http://www.amazon.com/Guide-Good-Life-Ancient-Stoic/dp/0195374614). And\nthey kept coming up whenever I'm reading about philosophy, and for good reason,\nthey're a cool bunch.\n\nStoics understood that you can never depend on external factors for happiness\nand that the only way to achieve a sense of well-being is to be internally\nsatisfied. However, unlike the cynics or the skeptics, they *can* derive\nhappiness from the external world. In other words, **they get all the upside\nwhile avoiding downside**. This sounds amazing, and at first glance it sounds a\nbit like Buddhism, but I think the defining feature of Stoicism is their use of\npsychological tricks and reasoning to achieve their goal of tranquility. That's\nwhy I think it may resonate with the programmer community. Maybe we can learn\nsomething from them about open source maintenance?\n\n## insults and attacks\n\nOne thing that angers me -- and I see angers many open source\nmaintainers -- is the harsh criticism mixed with personal attacks that some\nusers launch against maintainers. There could be thousands of satisfied\nusers but a handful of loud and vile individuals could make your life\nmiserable. This can be related to how the Stoics dealt with insults. And they\nhad a lot to say about the subject.\n\nEpictetus recommended that we pause to consider our insulter. If he is a fool then\nrather than become angry or hurt, we should feel relief over his disapproval and\ninsults. Indeed, **we should be more concerned if we find the fool agreeing with\nus**<sup>3</sup>. It goes without saying that someone launching personal attacks\nagainst you for providing your work free of charge, is a fool.","metadata":{"id":123}}],["124",{"pageContent":"us**<sup>3</sup>. It goes without saying that someone launching personal attacks\nagainst you for providing your work free of charge, is a fool.\n\n>Begin each day by telling yourself: Today I shall be meeting with interference,\n>ingratitude, insolence, disloyalty, ill-will, and selfishness -- all of them\n>due to the offenders’ ignorance of what is good or evil?\n\n> -- Marcus Aurelius\n\nIf you are putting yourself and your work in the public eye then it's very\nlikely that you're going to have a run-in with the above-mentioned unpleasant\npeople. So accept it as a reality and learn to deal with it.\n\nSeneca suggests a potentially more useful way of dealing with insults:\n\n> Why is it an insult, to be told what is self-evident?\n\nIf you found that there is some truth in the attack. Then simply extract that\nknowledge as constructive feedback and use it to improve yourself and your project.\n\nThose are some tools we can use to reason out the sting of the insult, but\nwhat do we do about it? do we have to reply? The Stoics advocated two main ways of\nresponding to insults:\n\n1. Humor\n2. Refusing to respond\n\nBy simply laughing off an insult, we are implying that the insult and insulter\nare not to be taken seriously therefore stripping them of any legitimacy that would\notherwise be implied if we replied seriously to their insult. Here are a couple\nof amusing anecdotes from Seneca:\n\n>Seneca points approvingly to Cato’s use of humor to deflect a particularly\n>grievous insult. Cato was pleading a case when an adversary named Lentulus spit\n>in his face. Rather than getting angry or returning the insult, Cato calmly\n>wiped off the spit and said, “I will swear to anyone, Lentulus, that people are\n>wrong to say that you cannot use your mouth!” Seneca also approves of Socrates’\n>response to an even more abusive insult.  Someone once came up to Socrates and,\n>without warning, boxed his ears. Rather than getting angry, Socrates made a joke\n>about what a nuisance it is, when we go out, that we can never be sure whether","metadata":{"id":124}}],["125",{"pageContent":">without warning, boxed his ears. Rather than getting angry, Socrates made a joke\n>about what a nuisance it is, when we go out, that we can never be sure whether\n>or not to wear a helmet. <sup>4</sup>\n\nIf you are quick-witted then this type of humor may come naturally to you, but I'm\nnot. And, paradoxically, spending a lot of much time coming up with the perfect comeback\nwill have the negative effect of dwelling over the insult. Therefore the best\nthing to do is act as if it never happened. This, first of all, robs them\nof the pleasure of having upset us. And also shows everyone in the community\nthat we can't be bothered with childish behavior and we have more important\nthings to attend to (such as maintaining the project).\n\n## on making mistakes\n\nEveryone makes mistakes, and open source maintainers are no exception. You'll\neventually push a breaking change that will unleash a mob of semver purists\ngunning for your head (refer to the previous section on how to deal with\nobnoxious people). Here, I'll talk about how you should reason about the fact\nthat you made a mistake.\n\n>Truths about the past are necessary: it is not merely that they aren't other\n>than they are—they can't be other than they are, for nothing has the power to\n>change the past -- Epictetus\n\nStoics were pioneers of logic, and it followed from their use of logic that\nwe should have a fatalistic attitude towards the past. We just learn from our\nmistakes and move on -- there could have never been a world where you have not made\nthat mistake. Because without that event happening the world where you are now\nlooking back at that mistake doesn't exist. The last part was me going out on a\nlimb, but all this to say is that you can't change the past and there is no\npoint in feeling regret.\n\nMistakes may help you revise and strengthen your processes and tests. It may\neven get your users to be more involved in the project's maintenance because they\nsee you as someone needing their help. I doubt that any one mistake has ever","metadata":{"id":125}}],["126",{"pageContent":"even get your users to be more involved in the project's maintenance because they\nsee you as someone needing their help. I doubt that any one mistake has ever\ncaused the failure of an open source project, the important thing is to learn\nand move on.\n\n## work on your own terms\n\nTaking a utilitarian approach to open source seems to be the best and most\nsustainable. In the JS Infra team at\nFacebook we have the following dictum:\n\n> We only open source what we use in production\n\nWhen we stop using something internally we either find a new home for it or\nsimply deprecate it. This puts us in a better position to serve our community. Similarly, you\ncan approach your personal open source projects with the same attitude. Keep\nyour project focused and fully aligned with your needs.\n\nFor example, if someone sends you pull request for a feature that you are not\ngoing to use yourself and don't have the time test and maintain, then simply refuse it. It's\nbetter to be focused in scope than to make the project suitable for every\npossible use case while increasing your chances of burnout.\n\n> Nothing is worth doing pointlessly -- Marcus Aurelius\n\nPeople looking from the outside at open source are often amazed by how a\nworld based on altruism could exist. Sorry, it doesn't. A lot can be gained from\nparticipating in open source. Slaving away with no explicit goal is a recipe\nfor disaster. I'm not saying that helping others is not a valid a\ngoal -- it could be, however, it should be intentional.\n\n>It is impossible that happiness, and yearning for what is not present, should\n>ever be united -- Epictetus\n\nTry not tie your identity and sense of well-being to your open source\nproject. Align your needs with the community, get the upside of any contributions and\npopularity. But try not to get affected by any downside.\n\n---\n<small>\n[1] I've never been a sole creator/maintainer of a massively popular open\nsource project, however, I work as part of teams on massively popular open","metadata":{"id":126}}],["127",{"pageContent":"---\n<small>\n[1] I've never been a sole creator/maintainer of a massively popular open\nsource project, however, I work as part of teams on massively popular open\nsource projects. So I probably don't understand the magnitude of stress sole\nmaintainers may feel.\n\n[2] My favorite books so far: A History of Western Philosophy by Bertrand Russel,\nThe Guide to the Good Life by William Braxton, and the Philosophize This! podcast.\n\n[3] Great [blogpost](http://throughablogdarkly.blogspot.com/2012/12/stoicism-dealing-with-insults.html?m=1) summarizing how the Stoics dealt with insults\n\n[4] A passage from The Guide to The Good Life\n</small>","metadata":{"id":127}}],["128",{"pageContent":"{\n  \"title\": \"Do What Makes The Best Story\",\n  \"date\": \"1/8/2020\"\n}\n---\n\nKids are always telling themselves stories. Try to remember yourself as a child lying in bed, anticipating an exciting day tomorrow, and you'll probably remember telling yourself a story about how cool it's going to be, who's going to be there, and how much fun you'll have. Self storytelling might be more pronounced in kids -- they like to say it out loud -- but it never goes away and only subsides to the background in adults. Self storytelling is so essential for people that one of the most effective [techniques](https://en.wikipedia.org/wiki/Cognitive_behavioral_therapy) for treating depression and anxiety boils down to \"tell yourself better stories.\" \n\nLife is also a form of self storytelling. We're continually retelling ourselves our life story, but very few people think of themselves as authors of their story, not mere subjects. People with extraordinary high-agency realize this early in life and start maximizing the interestingness of their life story.\n\nHaving a fascinating life story is not just an exercise in vanity -- it has a real impact on your success in life. You'll have an easier time attracting friends as well as life and business partners. It'll also make it much easier to sell yourself or your products. It has a kind of compounding [halo effect](https://en.wikipedia.org/wiki/Halo_effect).\n\nStartups also have to be good stories. A good business idea or market is not enough to endure the pain and have the motivation to get a startup off the ground. Without an interesting story about the founding of the company and the vision, you'll have a hard time attracting talent and money. Notice how the most successful startups in the world all have remarkable genesis stories. \n\nSo next time you're faced with a tough decision, consider the path that makes a more interesting story. If it turned out to be the wrong decision to have made, you'd at least be fun at dinner parties.","metadata":{"id":128}}],["129",{"pageContent":"{\n  \"title\": \"stuff.js\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"12/11/2012\",\n  \"hidden\": \"true\"\n}\n---\n\nWith the explosion in online tools that allow to write, share, and run HTML, CSS, and JavaScript\nlike [JSFiddle](http://jsfiddle.net/), [CSSDeck](http://cssdeck.com/), [codepen](http://codepen.io/)\nand many others! I was surprised to see that there wasn't a good opensource library to facilitate\nsecurely running arbitrary code in the browser. So I pulled this out of our codecademy.com source code\ninto a well-tested library with a nice interface. I call it [stuff.js](https://github.com/Codecademy/stuff.js)\n(stuff as in stuffed turkey) and it's on [GitHub](https://github.com/Codecademy/stuff.js).\n\nHere is how you can create a live coding interface (similar to codepen) in less than thirty lines of code using stuff.js\nand codemirror:\n\n```javascript\nstuff(secureIframeUrl, function (context) {\n  var html = CodeMirror.fromTextArea($('#html'), {\n    onChange: reload\n  , mode: 'text/html'\n  });\n  var js = CodeMirror.fromTextArea($('#js'), {\n    onChange: reload\n  , mode: 'javascript'\n  });\n  var css = CodeMirror.fromTextArea($('#css'), {\n    onChange: reload\n  , mode: 'css'\n  });\n\n  var t = null;\n  function reload () {\n    clearTimeout(t);\n    t = setTimeout(function () {\n      var code = '<!DOCTYPE html><html><head>';\n      code += '<style>'  + css.getValue() + '</style>';\n      code += '<body>' + html.getValue();\n      code += '<script>' + js.getValue() + '</script>';\n      code += '</body></html>';\n      context.load(code);\n    }, 50);\n  }\n  reload();\n});\n```\n\nStuff.js puts security first. It is intended to be served from multiple origins for the code to be properly sandboxed\nand not have access to the top window.","metadata":{"id":129}}],["130",{"pageContent":"{\n  \"title\": \"Investing in Synthesis\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"4/21/2022\",\n  \"description\": \"I'm co-leading a round in Synthesis, a startup scaling the custom school built for Elon Musk's kids\",\n  \"image\": \"https://amasad.me/public/images/synthesis.png\"\n}\n---\n\nComputers give humanity the power to solve some of the most critical problems our species has ever faced. However, until today, we have failed to leverage this unprecedented tool; we teach kids to be mere consumers of this powerful machine. To change this, society needs three things:\n\n- Access to the tool\n- Education in the complex skills necessary to use it\n- Education in the problem-solving skills necessary to maximize the potential for human progress\n\nAt Replit, we’re making computer programming accessible and learnable for anyone, no matter their background, location, or socio-economic status. That covers points 1 and 2, but what about point 3? We need a way to offer any kid from anywhere the opportunity to learn collaboration, critical thinking, and problem-solving so they can capitalize on the promise of computers.\n\nFor this reason, I’m pleased to announce that I’m leading along with Balaji Srinivasan a new [$12M investment](https://www.synthesis.is/fundraise-amjad-balaji) in [Synthesis](https://synthesis.is), the innovative education program where kids learn to solve complex problems by playing team games.","metadata":{"id":130}}],["131",{"pageContent":"I first met Joshua Dahn, the co-founder of Synthesis, when I visited the Ad Astra school on the campus of SpaceX. I had heard they were using Replit to learn to code and build projects, so I visited expecting a regular school. But what I saw was radical. Elon Musk hired Josh to build a lab school for his kids and SpaceX engineers–and what Josh created blew me away. Now, Synthesis is taking the most popular class from that school and scaling it up for kids from across the globe. They designed Synthesis to train supercollaborators, who can work together to solve complex problems to advance human civilization.\n\nLast month, I was hanging out with Chrisman Frank, the CEO of Synthesis. He shared their progress with me, and I couldn’t believe what they had accomplished. They’re teaching thousands of kids the skills needed to move civilization forward. I spoke with Balaji, and we both agreed that we needed to do whatever we could to help Synthesis succeed.\n\nBalaji notes six features that make Synthesis a particular company in his [announcement](https://balajis.com/synthesis). They bear repeating here:\n\n> 1. First digital, then physical. A full replacement for the education system will eventually require physical locations. Too many parents depend on state-run schools for childcare. However, it’s important to go digital first, then physical. Synthesis is building a networked community online and then, later, creating physical infrastructure as needed be.\n> 2. Scale what can be scaled. Today’s K-12 instruction can be decoupled into (a) curricula, (b) small group tutoring and (c) de facto childcare. While the tutoring and childcare components will continue requiring hands-on attention for each student, the curricula can be created by world class instructors and cost-effectively scaled to millions of children. That means one could have the polish of a Hollywood movie or an AAA-quality game for educational content, which is what Synthesis is working on.","metadata":{"id":131}}],["132",{"pageContent":"> 3. Go direct. Legacy media is incentivized to protect legacy systems. Therefore, companies offering an exit must go direct to customers and build their own distribution. Otherwise, they’ll either get politically attacked or forced to fold back into the values of the incumbent system. And so Synthesis is reaching parents entirely through social media and eschewing legacy media corporations.\n> 4. Make exit easy. Our education systems won’t reform from within. The necessary improvements require too much change. The only real solution is to create something better from the ground up that’s so attractive users can’t help but exit the old system. Something like that doesn't arise overnight - it's proved out in stages, by people gradually opting out of the current system, providing feedback and driving features, till the parallel system is better in all respects and ready for broad adoption. This, too, is part of the Synthesis strategy.\n> 5. Win and help win. Finally, the aim of education should be to train kids to grow the global pie for humanity so all can benefit. In other words, kids need to learn how to work together and succeed in a competitive environment so that they can contribute to the common good. And Synthesis believes that teaching values like this is as important as teaching calculus.\n\nI believe that Replit + Synthesis could become the educational stack for millions of kids worldwide. In the past, kids had to go through K-12 then university education before contributing to the real world, but things are changing fast for a few reasons:\n\nFirst, the traditional track isn’t available to many people simply because of where they were born. Second, the few who graduate often end up with loads of debt and little to no hirable skills. Third, and most importantly, it seals them off in school for 14+ years and then expects them to offer something productive to society.","metadata":{"id":132}}],["133",{"pageContent":"Together, Synthesis and Replit are fixing this problem. Synthesis lets any kid anywhere collaborate with peers to practice solving humanity’s toughest challenges, like managing wildfires and colonizing space. Replit empowers these kids to learn code, turn their ideas into real solutions, and build businesses around them online.\n\nNo barriers to entry. No unnecessary debt. No more waiting.\n\nIn essence, Synthesis is the complement of Replit. To build the future, the next generation needs two critically essential skills. They need to know how to think with computers and collaborate with humans. Replit lets anyone learn the first. Synthesis allows anyone to learn the second. I can’t think of two higher leverage ways to move society forward.\n\n\nIf you have kids ages 8-14, you can sign them up for Synthesis [here](https://www.synthesis.is/).\n\nIf you’d like to join their team, view their [open positions here](https://www.synthesis.is/careers).","metadata":{"id":133}}],["134",{"pageContent":"{\n  \"title\": \"Vision\",\n  \"author\": \"Amjad Masad\",\n  \"date\": \"11/27/2021\",\n  \"hidden\": \"true\"\n}\n---\n\n## Vision\n\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few -- the professional software developer -- can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people to grow up with new skills, outlooks, and ways of learning and communicating. \n\nWhen there is widespread code literacy, we believe that it will transform humanity again and perhaps in more radical ways. It's hard to imagine what the world will look like when there is a generation of people who grew up with computer superpowers. But we can be sure about a few things:\n\n- Technological power will be decentralized: When everyone can code, there will be less reliance on power centers to manage all information technology. Power centers like Silicon Valley will decentralize into internet communities. \n\n- Wealth will be more distributed: When people have the tools to create and participate in the global digital economy, they will have the ability to lift themselves out of poverty. The wealthy and the poor will not differ by pidegree, instead anyone who can generate good ideas can be wealthy.\n\n- Software will be more local: No one knows better what a community needs other than the community itself. Instead of a handful of giant companies creating the software for everyone in the world, we'll see more personal and community-grown software.","metadata":{"id":134}}],["135",{"pageContent":"- Education will be transformed: When people can be economically productive much earlier in life, education systems will change to become more tailored to individuals and more pragmatic. Since the best way to learn is to create, people will become more efficient learners by building computer simulations.\n\n- Institutions will be more democratic: Totalitarian regimes have relied on technological supremacy since the beginning of time to subject people. But when people have agency over technology, the power balance will improve.\n\nWe happen to be at absolutely the right time to be attempting to create systems to increase computing literacy and give people superpowers:\n\n- Cloud computing allows us to deliver collaborative and powerful tools wirelessly and at very little cost to the user.\n\n- With advent of satellite internet we're quickly approaching universal connectivity.\n\n- Low-end devices are getting more affordable by the year, nearly free, and very close to universal computer access.\n\n- Bitcoin and web3 allows users to easily generate and capture wealth on the internet.\n\n- Schools and governments are starting to understand the need for coding literacy.\n\n- The funding landscape allows ambitious projects like Replit to exist\n\n## Mission\n\nReplit will bring the next billion software creators online, and will accelerate the shift towards a world where software and the internet are truly The Great Equalizer. Soon anyone, regardless of place or economic status, will be able to create software and generate wealth on the internet. If we’re successful, anyone who's willing to learn and generate good ideas will be wealthy.\n\n## Plan\n\nIn the first phase of the company we poured everything into building the default entry-to-programming environment. One which put us on an exponential growth path towards millions of programmers. Now we have the opportunity to build the next major software platform.","metadata":{"id":135}}],["136",{"pageContent":"We're entering the next major phase of our company, where we're inventing the building blocks for the software creator economy. The primitives that will power the next paradigm shift of software collaboration. We think we're transitioning from a stacked model of software creation to a networked one. One which value is builtin, and the ability to monetize will be inseparable from creation.\n\nIf we're succesful in empowering the next generation of softawre creators we'll have the ability to weave interconnected communities and software into the world's  first massively distributed and collaborative operating system. One that’s focused on creation and self-expression, that’s networked by default, and that let’s people create and earn on the internet.\n\n## Design principles\n\n\n- Learnable yet scalable interfaces: Interfaces today present the same UI to vastly different users, from children to adults, from novices to experts. Our mission demands that we make computing environments more accessible to novices while making it possible to transition to more powerful interfaces. Replit starts with a simple editor and console, which gets learners very far. The UI, however, is adaptable and presents different faces to different users and use-cases.\n\n- Infrastructure as legos: A core part of commanding computer power is to be able to build for the modern internet-connected world. Despite progress in cloud computing, infrastructure remains inaccessible to novices, hobbyists, and educators. We change this by designing simple and scalable components, like cloud-hosted servers accessible right from the repl, storage, databases, etc., that require little configuration and maintenance by the programmer. Coders can then mix and match components to create endless possibilities.","metadata":{"id":136}}],["137",{"pageContent":"- People-centric technology: It's more exciting and fun to create and learn with other people. The future demands that computers and the internet have human interconnectedness as a core primitive. From our multiplayer computing protocol to our community spaces for sharing software, we build support for human beings, and we put collaboration right at the heart of our technology.\n\n## Technology\n\nReplit is an emerging computing universe. To understand it, you have to understand its basic components:\n\n1. Replit is a website where anyone can get a computer with a development environment in the cloud instantly from any device, and get effectively infinite machines to learn, build, and play with them. It's a site where creators from all over the globe can meet and collaborate. It's a place to discover and remix software (\"view source\" for all software). It's a place to go from your first line of code to your first app to your first startup. It's the ultimate website that blurs the distinction between building to learn and learning to build and eventually building to earn. It's the place where ideas become wealth.\n\n2. It's a protocol for remote computing between a human to machine and machine to machine. This protocol powers the website, but also power bots, third-party apps, and many other use-cases yet to be discovered. It's making Replit into an open platform where developers can build plugins, extensions, and entirely new experiences and businesses on the platform. It's collaborative from the ground up, it's extensible, and it's interactive and alive. It will be the basis for a massively multiplayer cloud operating system of the future.","metadata":{"id":137}}],["138",{"pageContent":"3. It's a massively distributed computing network. If GitHub is a network of dead code, Replit is a network of live code. Any program on any machine on the network can call functions on any other program. It's Alan Kay's original vision for object-oriented programming -- a biological-like system of live machines communicating via message-passing.  It's empowering for developers to build and scale apps. It unlocks a radically new way of collaborating on software. And it's a platform for infrastructure providers to publish and monetize services for developers on the network.\n\n## Metrial from the blog\n\n- [Post from 2017 laying out the technical foundations](https://blog.replit.com/holistic)\n- [More on technical motivations and inspiration](https://amasad.me/disintegrated)\n- [What Replit is not](https://amasad.me/replit_ide)\n- [How Replit wins](https://amasad.me/leapfrog)\n- [Series A announcement](https://blog.replit.com/seriesa)\n- [On how and why Replit is fun](https://blog.replit.com/internet-of-fun)\n\n## Material from the web\n\n- [Podcast interview with Amjad on the past and future of Replit](https://www.youtube.com/watch?v=DZcglTSv-2Y)\n- [Another one](https://www.youtube.com/watch?v=isIpbcH_N80)\n\n## A handful of user stories:\n- [User story showing our reach & impact](https://twitter.com/HayaOdeh/status/1462900554930147328)\n- [How we give creators superpowers](https://twitter.com/amasad/status/1348804890877857792)\n- [Retaining users through the childhood years](https://twitter.com/amasad/status/1390810578214539266)\n- [Users hacking Replit itself](https://twitter.com/amasad/status/1083517163153944576)\n- [Users learning and earning](https://twitter.com/amasad/status/1451255029059358747)\n- [How the replit community coordinates](https://twitter.com/amasad/status/1354534990109761542)\n- [How Replit community builds meaningful relationships](https://twitter.com/amasad/status/1377287503351181313)","metadata":{"id":138}}],["139",{"pageContent":"{\n  \"title\": \"Introducing Waraby, Mobile Optimized Arabic Search Web App\",\n  \"date\": \"01/18/2014\",\n  \"image\": \"http://i.cloudup.com/wrHDYFfRJw.png\",\n  \"hidden\": true\n}\n---\n\n[Waraby](http://waraby.net/) is an Arabic search mobile app that I'm releasing today.\nI've built it more than six months ago for my personal use and I've been very pleased with it.\nI called it “Waraby” which comes from blending “Web” and “Araby”.\n\n### Why\n\nTyping in Arabic -- or really, any non-latin language -- is challenging because it wasn’t part of the early PC design. In addition to that, many PCs come with no Arabic pre-installed and no character annotations on the keyboard. This lead to a generation of computer and internet users using English characters to express Arabic words and meanings. This is often referred to as transliteration or more commonly “Arabezy” or “Arabish” (comes from the blending of Arabic and English words).\n\nOne of the fundamental activities we do online is Search, and for Arabic speakers used to transliteration [Yamli](http://yamli.com) is a lifesaver. It works by converting your transliterated English words into Arabic so you can use the language you’re used to in day-to-day chat and messaging to search for Arabic content on the Web. However, Yamli isn’t mobile optimized and frankly, it’s a pain to use on the phone.\n\nHere is how Waraby makes Arabic mobile search delightful:\n\n#### Simple\n\nIt’s a full screen App with a wide textarea that auto scrolls down when focused to give enough room for suggestions.\n\n<img src=\"https://i.cloudup.com/ea1o38uH4z.gif\" alt=\"waraby layout\" height=\"400\" />\n\n#### Responsive\n\nSuggestions are neatly aligned under the word being typed with the highest confidence result at the top. Furthermore, hitting search will open the Arabic-based Google search for the best results.\n\n<img src=\"https://i.cloudup.com/lSq5tLVJBf.gif\" alt=\"waraby is responsive\" height=\"400\" />\n\n#### Attention to Detail","metadata":{"id":139}}],["140",{"pageContent":"<img src=\"https://i.cloudup.com/lSq5tLVJBf.gif\" alt=\"waraby is responsive\" height=\"400\" />\n\n#### Attention to Detail\n\nIf you hit back while on the search result you can go back to Waraby with your latest search query waiting for you.\n\n<img src=\"https://i.cloudup.com/YFgiljjUiT.gif\" alt=\"waraby back button\" height=\"400\" />\n\nIt handles long queries gracefully.\n\n<img src=\"https://i.cloudup.com/vyALZc44bE.gif\" alt=\"waraby long queries\" height=\"400\" />\n\nFinally, If you decide to visit the app and start using it, don’t forget to add it to your [home screen](http://support.apple.com/kb/TI42).","metadata":{"id":140}}],["141",{"pageContent":"My name is Amjad Masad.\n\nI'm the CEO and founder of [Replit](https://replit.com), an online coding environment that makes coding more fun, approachable, and social. Starting a new project goes from countless hours of setting up a development environment to the two seconds it takes to start up a new repl in your browser.\n\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few -- the professional software developer -- can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people to grow up with new skills, outlooks, and ways of learning and communicating.\n\nReplit will bring the next billion software creators online, and will accelerate the shift towards a world where software and the internet are truly The Great Equalizer. Soon anyone, regardless of place or economic status, will be able to create software and generate wealth on the internet. If we’re successful, anyone who's willing to learn and generate good ideas will be wealthy.\n\nIf this mission speaks to you, you should consider [working with us](https://replit.com/careers).\n\nBefore founding Replit, I was a tech lead on the JavaScript infrastructure team (which I\nhelped start) at Facebook. We built and maintained open source tools that made\nJavaScript development easier, accessible, and generally better. We built and/or\nmaintained things like the [Babeljs compiler](http://babeljs.io),\n[Jest](https://facebook.github.io/jest/), and the [React","metadata":{"id":141}}],["142",{"pageContent":"maintained things like the [Babeljs compiler](http://babeljs.io),\n[Jest](https://facebook.github.io/jest/), and the [React\nNative](http://facebook.github.io/react-native/) packager. Some form of this\nteam is still going strong and now are doing even more amazing things like the\nYarn package manager.\n\nBefore that I was #1 employee at [Codecademy](https://codecademy.com). I did\nsome tech-leading, built product and infrastructure. Being that early at a\nhigh-growth consumer startup is a great, albeit compressed, learning\nexperience.\n\nBefore that I was briefly at Yahoo. And before that I was going to college and on the side I worked in cybersecurity.\n\nAs for non-work stuff, I'm into powerlifting and grilling steaks. I also like to read and mostly interested in philosophy of mind and AGI. Understanding and potentially simulating the mind is what kept me interesting in computers as a kid. I'm also interested in tradition and paleoanthropology. There is so much that's great about the modern world but there is also so much to be desired when it comes to living a fulfilling and healthy life. And I think the past holds more wisdom than people like to admit. \n\nI enjoy scifi movies, especially old ones. Some of my favorites include The\nForbidden Planet, Brazil, and Colossus: The Forbin Project. I'm of the opinion\nthat good Hollywood movies are [on the\ndecline](https://whyevolutionistrue.wordpress.com/2016/04/05/the-decline-of-good-hollywood-movies/).\n\n![pictuer](https://amasad.me/public/images/pic.jpeg)\n\nHere are some interviews/articles written about me:\n\n* [Invest Like the Best podcast](https://podcasts.apple.com/de/podcast/amjad-masad-the-future-of-software-creation/id1154105909?i=1000592027219)\n* [ARK Invest podcast](https://www.youtube.com/watch?v=bO0GunZCio8)\n* [WSJ: 10 Things to Love About America](https://www.wsj.com/articles/10-things-to-love-america-patriotism-liberty-immigrant-amjad-masad-tech-silicon-valley-woke-crt-11640902246)","metadata":{"id":142}}],["143",{"pageContent":"* [WSJ: 10 Things to Love About America](https://www.wsj.com/articles/10-things-to-love-america-patriotism-liberty-immigrant-amjad-masad-tech-silicon-valley-woke-crt-11640902246)\n* [Moment of Zen Podcast](https://www.youtube.com/watch?v=hrk4IVHyvZo)\n* [This Week in Startups podcast](https://www.youtube.com/watch?v=isIpbcH_N80)\n* [The Best Business Show podcast](https://www.youtube.com/watch?v=DzeGAGhsjb8)\n* [Replit: Remix the Internet](https://www.notboring.co/p/replit-remix-the-internet)\n\nOlder stuff:\n* [An interview with a Japenese\n  magazine](http://gihyo.jp/dev/serial/01/software_designers/0042)\n* [An essay by Fadi\n  Ghandour](https://www.linkedin.com/pulse/20130919080958-1326123--young-hungry-and-waiting-to-be-unleashed)","metadata":{"id":143}}],["144",{"pageContent":"Amjad Masad is a Jordanian American entrepreneur and engineer. He is the founder and CEO of Replit, the world's leading online programming environment and community. Before Replit, Amjad **used to** worked at Facebook, overseeing the JavaScript infrastructure team and building some of the world's most popular open-source developer tools. Before that, he was a founding engineer at Codecademy, the world's leading online coding school.","metadata":{"id":144}}],["145",{"pageContent":"# Replit's community guidelines and rules\n\nReplit's Community is a place where you can share all of the amazing projects you create on Replit! There's a lot to discover and do here, so we'll help you get started.\n\nSome quick links and overview of what follows: -\n\n- [Community Values](#communityvalues)\n- [Getting started](#gettingstarted)\n- [Community Standards](#communitystandards)\n- [Additional Information](#additionalinformation)\n\n\n# Community Values\n\n**Empower others.**\nReplit is for everyone, and everyone starts somewhere. Be patient and inclusive - things that are simple for you may be hard for others. We have absolute beginners and coding experts on our platform, and we want everyone to feel at home here.\n\n**Support one other.**\nAs part of the Replit Community, we hope you'll share your wins so other members can celebrate you and that you'll return the favor by supporting other users' work through likes, follows, and comments.\n\n**Be kind.**\nThere is no place for hate in our community. Respect each other, use appropriate language, and be kind. Be positive, and always be sure to reinforce that coding on Replit is a fun and friendly experience.\n\n# Getting Started\n\n**Everyone starts somewhere.** Share your first program - or \"repl\" - with the community by posting it with the tag `#MyFirstRepl` and introduce yourself by adding a post to your repl with a little bit of information about you. This way, people in the community can come to cheer you on in your coding journey. *Don't share any personal identifying information like your full name or contact info!* \n\n**Wondering how to share a repl to Community?** Simply open your repl, click on its name in the top right corner and click on the `Publish` button, or, you can go to the [community page](https://replit.com/community/all) and then click on the `Publish a Repl` button there. as shown in the images below.\n\n![Screenshot from 2022-03-26 19-28-59](publish_workspace.png)\n\nOR\n\n![Screenshot from 2022-04-14 00-01-11](publish_community.png)","metadata":{"id":145}}],["146",{"pageContent":"![Screenshot from 2022-03-26 19-28-59](publish_workspace.png)\n\nOR\n\n![Screenshot from 2022-04-14 00-01-11](publish_community.png)\n\nIn either case, you'll then see something like this (might differ slightly):\n\n![Screenshot from 2022-03-26 19-30-21](publish_modal.png)\n\nHere, you can add tags that tell people what you've created, such as `#python`, `#game`, or the name of a hackathon you're participating in, like [#Kajam2021](https://replit.com/community/kajam2021)!. You can also give it an icon to make it even more unique!\n\nTo add more information about your repl, you can Add a Post. This is kind of like a caption for your repl.\n\nNote that all your code is automatically updated in the community! So you don't have to post everytime you make a change.\n\n---\n\n## A quick overview of the community\n\nWhen you head over to the [Community page](https://replit.com/community), you'll see our Community homepage. *There's always new content on here to explore, but the layout will look the same.*\n\n![Screenshot from 2022-03-26 21-00-19](community_page.png)\n\n**First and most important is the `RESOURCES` section.** These are official posts created by the Replit team that contain helpful information about things like [upcoming events](https://events.thedrone7.repl.co), threads about new features, and the very repl you are reading right now!\n\n**Next up are `TOP TAGS`**. These are the most popular tags on Community. \n* At the top of the list are `official tags` which have a checkmark next to them. These are official tags by Replit that indicate what sort of content you should expect, such as `app` or `game`.\n* Below these are popular tags that community members are using on their own repls.\n\n**Now, let's take a look at some posts!** \nYou can sort posts as you please: the default `Hot` shows what's trending, `New` sorts the posts in order of the time they were published, and `Top` shows all-time most popular repls and posts.\n\nYou can also use the **search bar** to find specific repls and content. \n\n---\n\n## Community Standards","metadata":{"id":146}}],["147",{"pageContent":"You can also use the **search bar** to find specific repls and content. \n\n---\n\n## Community Standards\n\n**Replit is for everyone.** To ensure that everyone feels welcome and safe here, we require all users to agree to our Community Standards.\n\nIf you find any repls, posts or comments that violate the standards, you can report it by clicking on the three dots next to the repl's title or comment and selecting \"Report\".\n\n![report_repl](report_repl.png)\n\nTo report a user who has been harassing a lot of people, you can [use this website](https://contact.moderation.repl.co) and we will investigate all of their activity.\n\n### The Terms of Service\n\nAll users must follow Replit's [Terms of Service](https://replit.com/site/terms) anytime they use the site. \n\nSome highlights:\n\n* **No illegal or regulated content.** Please don't use Replit for promoting or engaging in any illegal activity, even unintentionally. This includes dealing in drugs, sex, gambling, weapons, or pirated software.\n\n* **Don't misuse the service.** Do not share content that can harm other users, such as spam, malware, or phishing. We also don't allow repls that consume too many resources, such as spam bots and cryptocurrency miners.\n\nUsers who violate these Terms of Service anywhere on the site are subject to be banned from any and all of Replit's services. Banned users may no longer access the online IDE and any code they may have written, the Community, and they will be barred participation in any future events organized by Replit.\n\n### Be Kind\n\nCoders of all levels are creating on Replit! \n\nComments are a great place to offer support, ask questions, share ideas, help a new user, geek out about a shared interest, or provide constructive feedback!\n\nComments are *not* the place to be mean or sarcastic about someone's programming skills or project. If you see anyone bullying or spamming others in the comments, you should report them.","metadata":{"id":147}}],["148",{"pageContent":"Comments are *not* the place to be mean or sarcastic about someone's programming skills or project. If you see anyone bullying or spamming others in the comments, you should report them.\n\nComments, posts, or repls that go against this standard will be removed from Community and the users will be issued a warning.\n\n### Keep it SFW\n\nContent that makes other community members feel uncomfortable or unwelcome such as swearing, nudity, violent, or graphic content is strictly disallowed.\n\nAny form of content that is found violating this rule will be removed from the community and the creator of such content will either be warned or banned from the community.\n\n### No Hate Speech\n\nThere is no place for hate in our community. Respect each other, use appropriate language, and be kind. We do not tolerate targeting any person or group of people for any reason whatsoever. Any abusive or threatening writing that expresses prejudice against a particular group, especially based on race, religion, or sexual orientation goes against our community standards.\n\nWe remove any comment, post, or repl containing hate speech from our Community and ban the offending users (after which they can appeal, more details about this at the end).\n\n### No advertising or spamming\n\nWe hope all of our users will become dazzlingly wealthy someday, but please don't advertise your wares by sharing links or spamming in comments or posts unless you have specific permission from the author of the post's author.\n\nWe remove comments and posts like this and issue a warning to the offending users. After a second warning, the users will be permanently banned from Community.\n\n### Age\n\nEveryone can and should code, but Replit is only available to users above the age of 13. This is due to [COPPA](https://www.ftc.gov/legal-library/browse/rules/childrens-online-privacy-protection-rule-coppa) regulations. \n\nAny users presumed to be under the age of 13 will be temporarily banned from Replit and can appeal by offering proof of their age.","metadata":{"id":148}}],["149",{"pageContent":"Any users presumed to be under the age of 13 will be temporarily banned from Replit and can appeal by offering proof of their age.\n\n### Some other things to remember\n\n- Give credit and don't plagiarize code. Be sure to give a friendly shout out to the creators whose ideas and code helped you build your project. They'll appreciate it and you'll appreciate it too when your turn for a shout-out rolls around!\n\n- Avoid spamming users by mentioning them in your posts or comments, especially if they have nothing to do with them. \n\n*Thank you for helping us make our Community a safe and creative place!*  \n\n---\n\n## Warnings and Bans\n\nThere are usually 3 kinds of actions that can be taken upon the users breaking the rules.\n\n### Warnings\n\nThe user will be warned for breaking minor rules. 5 warnings will lead to a temporary (community) ban.\n\n### Bans\n\nThere are 2 kinds of bans - community and site-wide.\n\nThe user will be banned from the community only for breaking the rules stated above. However, if they are found breaking the Replit [Terms of Service](https://replit.com/site/terms), then their ban will be site-wide.\n\nWhen the user is banned from the community, they will not be able to create any posts or comments and they will also be unable to share their repls with the community. However, they will still be allowed to use the online IDE and create new stuff.\n\nWhen someone is banned site-wide, their account will be terminated, and all of their repls will be taken down and deleted.\n\nCommunity ban is usually temporary, at the end of which, the user can appeal the ban (more details below). When the temporary ban ends, they will be issued a warning (acting as the first warning towards the second ban).\n\nA second community ban is always going to be permanent.\n\n---\n\n## Additional information","metadata":{"id":149}}],["150",{"pageContent":"A second community ban is always going to be permanent.\n\n---\n\n## Additional information\n\nIf anyone believes a moderator has taken any unfair action towards them, they can appeal the action at [the moderator contact website](https://contact.moderation.repl.co/). If they are still dissatisfied, they can E-Mail [community@replit.com](mailto:community@replit.com).\n\nIf you have found an exploit, please share the details with [security@replit.com](mailto:security@replit.com). Exploiting and causing problems for others can also lead to you getting site-wide banned.\n\nIf you have found a bug or have any feedback for us, we are always curious about how to improve replit, so reach out to us by clicking on the `?` icon in the bottom right of the sidebar and choosing `Contact support`.\n\n![Screenshot from 2022-03-26 20-57-09](help_menu.png)\n\nWe also have a [Discord Community](https://replit.com/discord) where you can chat with other AMAZING coders and ask for help with any coding-related questions you may be facing.","metadata":{"id":150}}],["151",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Bounty Hunting\n\nIf you're looking for a way to build projects and earn Cycles while you do it, you're going to love Bounties.\n\n## Become a Bounty Hunter\n\nIf you'd like to become a verified Bounty Hunter, [apply here](https://replit.typeform.com/to/ss7IxmIf).\nFill out the form and you'll be notified when you've received the Verified Bounty Hunter badge on your applications.\n\nOtherwise, get started by browsing the [Bounties page](https://replit.com/bounties) and apply to earn Cycles.\n\n## Browse Bounties\n\nEach posted Bounty will include the reward (in Cycles) for successful completion and a description of the work they'd like done.\n\n![pick a bounty](https://docimg.replit.com/images/bounties/pick_bounty.png)\n\n## Apply to work on a Bounty\n\nOnce you find a Bounty you'd like to work on, click the \"Apply to Work\" button in the upper-right-hand corner.\n\n### Tips for Applying\n\nThe best Bounty applications tell the Poster why you are well-suited to complete the Bounty and include examples of relevant past work.\n\nHere are some other tips on how to create a quality application:\n\n- Add links to your GitHub, LinkedIn, Twitter, or other social profiles to your Replit account. These links will appear in your Bounty applications as well.\n- Make your Replit profile picture a real, professional headshot of yourself.\n- If you want to start your Bounty with a greeting, open with \"Hello { their username }...\" or \"Hello, my name is { your first name }...\"\n- Add links to relevant projects in your application (e.g. Repl, GitHub repo, or hosted project).\n- Describe the first 1-2 milestones you will accomplish once accepted. This communicates to the Bounty Poster that you understand their problem and the technical requirements.\n- If possible, include time estimates of when certain parts of the Bounty can be completed by after you are accepted.\n\nHere's an example application for a Bounty to create a space invaders game:","metadata":{"id":151}}],["152",{"pageContent":"- If possible, include time estimates of when certain parts of the Bounty can be completed by after you are accepted.\n\nHere's an example application for a Bounty to create a space invaders game:\n\n> Hi, I'm Matt! I'm an experienced full-stack developer with experience building physics and canvas based games. I can make the cool space invaders game you described in one week.\n>\n> A few examples of my work include this very solar system animation https://replit.com/@matt/solar?v=1 which I made for fun, a Chrome Dinosaur Game clone https://replit.com/@matt/dino?v=1, and a Flappy Bird clone https://replit.com/matt/flappy?v=1. I would combine my knowledge of space animations and real time games to build your game. As a demonstration of my abilities, I made a basic prototype implementing a spaceship with space-like movement and a very simple particle trail which you can see here https://replit.com/@matt/prototype?v=1\n>\n> I look forward to hopefully working with you!\n\n![pick a bounty](https://docimg.replit.com/images/bounties/apply_bounty.png)\n\n## Do the work\n\nIf the Bounty Poster selects your application, you'll see the \"Accepted\" badge on your application:\n\n![time to do the work!](https://docimg.replit.com/images/bounties/accepted.png)\n\nNow it's time to do the work!\n\nCommunicate with the Bounty Poster early and often - make sure you're both clear on requirements and expectations.\n\n## Deliver the work\n\nWhen you've completed your work, return to the Bounty page and click \"Submit Work.\"\n\nAdd a description of the work (pro-tip: relate it to the acceptance criteria outlined in the Bounty) and link to the Repl where you've written the code.\n\n![submit a solution](https://docimg.replit.com/images/bounties/submit_solution.png)\n\nThe Poster will review your work and may ask for changes.\nIf the changes are in the scope of the original Bounty, simply go back to the Repl, make the changes, and submit again.\n\nOnce the Poster accepts your work, you're awarded your Cycles.","metadata":{"id":152}}],["153",{"pageContent":"---\nsidebar_position: 5\ntitle: Bounty Templates\n---\n\n## Communication Expectations\n\nTo ensure a successful bounty posting and hunting experience, effective communication is crucial throughout the entire process. To assist with this, we have provided several templates that can be used to ensure a professional experience and alignment of expectations. It is important to note that these templates are meant to serve as a starting point, and should be tailored to suit your specific needs and preferences.\n\n## Bounty Hunter\n\n### Upon Acceptance\n\nOnce you have accepted a Bounty, you should reach out to the Poster within 24 hours via email or Discord.\n\n```\nHello there,\n\nI'm very excited to begin working on this Bounty. I am located in <geoarea>. I usually work between the hours of <xyzxyz> and the best way to reach me is by email. I just wanted to take a moment to check in and outline my approach.\n\n- <milestone 1> - <your expected date of delivery>\n- <milestone 2> - <your expected date of delivery>\n\nPlease let me know if you have any questions. I look forward to working with you.\n\nBest,\nYour Name\n```\n\n### Check-ins\n\nTo ensure a smooth and successful Bounty experience, it is important to maintain regular communication with the Bounty Poster. This includes providing updates on progress every few days, as well as addressing any roadblocks, pain points, or questions that may arise. Lack of visibility into the progress of the project is a common cause of dissatisfaction among Bounty Posters. Keeping them informed will help to mitigate this issue and maintain a positive working relationship.```\n\n#### What to say when giving a status update:\n\n```\nI wanted to check-in and give you an update on my progress. Everything is going well and I am still on target to meet <milestone 1> by <expected date of delivery>. Please reach out if you have any questions or further information to share about this Bounty.\n```\n\n#### What to say when you need to change the timeline:\n\n```","metadata":{"id":153}}],["154",{"pageContent":"```\n\n#### What to say when you need to change the timeline:\n\n```\nI wanted to give you an update on my timeline. <xyx> has taken longer than I expected due to <xyxyx> reasons. I have been able to determine next steps, but wanted to let you know my <milestone 1> date has changed to <new expected delivery day>. I have solved any current roadblocks and am on track to complete the Bounty.\n```\n\n### Upon Submission\n\nCongratulations on successfully completing the Bounty! It is now important to promptly follow up with the bounty poster to allow them to review the completed work. This will provide an opportunity for them to provide feedback or request any necessary changes. Following up quickly will help ensure a smooth process and timely completion of the project.```\n\n```\nHi there,\n\nI have submitted the completed Bounty at <link to the Bounty>. Please let me know if you requests for changes or have any questions on the submission. It has been a pleasure working with you.\n```\n\n### Changes are Requested\n\nIf the Bounty Poster requests any changes, it is important to respond within 24 hours to acknowledge receipt of their feedback. During this response, it is crucial to discuss a plan for the next steps and a timeline for implementing the suggested updates. It is important to approach any requested changes in a constructive manner. To assist with this process, we have provided two templates you can personalize:```\n\nExample:\n\n```\nThank you for <list the input or changes requested>. I value your feedback as it helps me become a better Bounty Hunter. I will have a revised version of this project ready for you to review by <date>.\n\nOne solution to the input you mentioned is <list the solution in a detailed, non-technical way>. Does this sound like an ideal solution for your Bounty? If so, I can have an updated version to you by <date>.\n```\n\nExample:\n\n```\nI know you are concerned about <list the concern in a polite way>. Including <list the suggestion in a detailed, non-technical way> may be an ideal solution.","metadata":{"id":154}}],["155",{"pageContent":"```\n\nExample:\n\n```\nI know you are concerned about <list the concern in a polite way>. Including <list the suggestion in a detailed, non-technical way> may be an ideal solution.\n\nI am open to revisions and willing to make changes to improve the quality of your work. If this solution works for you, I can get you an updated version by <date>.\n\n```\n\n## Poster\n\n### Upon Acceptance\n\nOnce you accept a Bounty Hunter for your Bounty, you should reach out to them within 24 hours via email or Discord. Feel free to use this template if you are not sure how to start.\n\n```\nHi <name>,\n\nI am excited to work with you on this Bounty. You seem like a great fit for this project. Here is a little bit about me <share information that is helpful for the Bounty Hunter to know about you>.\n\nI would like to chat with you soon to review requirements and set milestones.\n\nPlease let me know if you have any questions about the Bounty as you get started.\n```\n\n### Check-ins\n\nOpen and consistent communication with the Bounty Hunter is crucial, especially if the project is complex or has multiple milestones. This will help ensure that the project stays on track and is completed within the agreed-upon timeframe. Here are a few examples of what you can say to stay in touch with your Bounty Hunter:\n\n```\nHi,\n\nI wanted to check in and see how the Bounty was going. Do you have any questions about  the requirements? I am happy to chat <via email or Discord> if you need further guidance.\n```\n\n```\nHello,\nHow is the Bounty going? Do you think you are still on track to complete it by <date>? Do you have any part of it completed that you can send to me as a sample? Please let me know if you have any questions.\n```\n\n### Upon Submission","metadata":{"id":155}}],["156",{"pageContent":"```\n\n### Upon Submission\n\nOnce your Bounty Hunter submits the Bounty, we recommend you review the submission within 3 days. If you’re happy with the submission, feel free to press the `Accept` button to complete the Bounty and release the Cycles to the Bounty Hunter. Send them a thank you or acknowledgement that the work has been received and the Cycles released.\n\n```\nHi,\n\nJust received your submission. It looks great. Thank you for all your hard work on this. <Mention what you liked about working with this Bounty Hunter. Would you like to work together again?>\n```\n\n### Changes Requested\n\nYou can request changes on your Bounty's Discussion tab. It is important that the changes you request are within the scope of the original project. Give clear expectations of what needs to be changed and ensure the Bounty Hunter has the correct resources or access to test projects, if needed.\n\n```\nHello,\nThanks for your submission! Would you be up for changing the following:\n\n<Include specific details of what changes to make or information regarding testing/deployment of the project>.\n```","metadata":{"id":156}}],["157",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Frequently Asked Questions (FAQ)\n\n### What are Bounties?\n\nBounties are a simple way to trade Cycles for different types of tasks on Replit.\n\nIf you have a new product idea, need coding assistance for a personal project, or want to integrate an API, create a Bounty! You'll be able to examine submissions and pick a developer, known as a Bounty Hunter, to complete the project, which is referred to as the \"work.\" When you post a Bounty, Replit will deduct the required Cycles from your account and hold them until the project is finished.\n\n## Bounty Posting\n\n### How do I post a Bounty for others to complete?\n\nYou can publicly post a Bounty on the [Bounties page](https://replit.com/bounties). You will be asked to provide a title, description, and reward amount before posting. Your user account will also need enough Cycles to cover the reward amount before posting; you can reload Cycles [here](https://replit.com/cycles).\n\n### What types of projects are available for Bounties?\n\nAnything you can think of or need for your own project. Some of the more popular Bounties we’ve seen are: internal tools for your startup, features for existing Repls (like chat moderation or API integration), websites, and bots (Discord, Slack, Telegram).\n\n### What should I name my Bounty?\n\nKeep it simple and descriptive! The name should highlight what is distinctive about that particular Bounty. Try to think about what will catch a Bounty Hunter’s eye.\n\n### How many Cycles should I offer for a Bounty?\n\nWe offer suggestions within the Bounty creation form for certain categories but ultimately, you decide based on your budget and the caliber of developer you want to work with.\n\nIf you are looking to build a full web app or product MVP, we recommend the following pricing:\n\n- $2,500 (250,000 Cycles) - $3,500 (350,000 Cycles) if your app needs:\n  - 1 external connection / API\n    - e.g. fetching Twitter data is one API connection\n  - 1-2 pages\n  - completion in 4-6 weeks","metadata":{"id":157}}],["158",{"pageContent":"- $2,500 (250,000 Cycles) - $3,500 (350,000 Cycles) if your app needs:\n  - 1 external connection / API\n    - e.g. fetching Twitter data is one API connection\n  - 1-2 pages\n  - completion in 4-6 weeks\n- $4,500 (450,000 Cycles) - $6,500 (650,000 Cycles) if your app needs:\n  - 2-3 API connections\n  - 2-3 pages\n  - a developer with 2+ years of experience\n  - user account creation\n  - ideal for 2-3 month projects\n- $8,000+ (800,000+ Cycles) if your app needs:\n  - unlimited API connections\n  - 3+ pages\n  - the ability to handle your first 1000+ users\n  - ideal for 3+ month projects\n\nIf you can't put the full amount upfront for a large Bounty, indicate in your initial post the payment milestones that will be posted through other Bounties.\n\nFor assistance around creating your Bounty post or matching with the right developer, feel free to email bounties@replit.com for help.\n\n### Are there any fees for posting a Bounty?\n\nYes, Replit charges the Bounty Poster a 10% fee for posting a Bounty. Also note, Replit will hold the entire amount of Cycles you’ve promised for the Bounty from your account when posting a Bounty.\n\n### Can I cancel a Bounty after it’s been accepted?\n\nNo, you can only cancel a Bounty _before_ accepting an application.\n\nTo cancel an accepted application for a Bounty, contact the Replit team through the \"Contact Support\" button in the \"Having trouble?\" section. If you want to make changes to the accepted Bounty, it's best to discuss the proposed revisions directly with the Bounty Hunter.\n\n## Bounty Hunting\n\n### What if I want to complete Bounties and earn Cycles?\n\nIf you want to become a verified Bounty Hunter, you can apply [here](https://replit.com/bounties/join). However, being a verified Bounty Hunter is not required to apply for Bounties. Replit’s Bounty program is looking for experienced coders who can tackle Bounties and provide great customer service for Bounty Posters.\n\n### What workspace should Bounty Hunters use to create the work?","metadata":{"id":158}}],["159",{"pageContent":"### What workspace should Bounty Hunters use to create the work?\n\nReplit provides access to private Repls for coding the work, which is Replit’s recommended workspace for completing a Bounty. The completed work must be submitted on Replit with a valid Repl link.\n\n### Are there any fees for completing a Bounty?\n\nNo. Upon successful completion of the Bounty, the Bounty Hunter’s account will be credited with the full Bounty amount listed.\n\n### Am I able to cash out my Cycles into real money?\n\nYes. Cycles earned from Bounties are eligible for cash out. There is a minimum threshold of 35,000 Cycles (about $350 USD) per cash out.  \n\nThere is a 25% cash out fee and additional fees based on your country of residence and chosen payment method. If you cash out more than 70,000 Cycles (about $700 USD) in a given request, then the cash out fee is reduced to 15%. \n\n### How do I request a Cycles cash out?\n\nPlease note, a Replit staff member will **never** reach out to you in order to initiate a cash out. Only you can begin the process yourself following the instructions below.\n\nOnce you have earned at least 35,000 Cycles ($350 USD) from Bounties, you can contact cashout@replit.com with the subject line \"Cycles Cash Out - username\", replacing \"username\" with your Replit username. In the body of your email, write the number of Cycles that you wish to cash out. \n\nIf this is your first cash out, we will send you an online form to verify your identity on [Persona](https://withpersona.com/). You will need a valid government ID and a device with a camera to complete this verification.\n\nAfter that, you will need to verify your payment information by completing the cash out form on Replit's site [here](https://replit.com/cash-out).","metadata":{"id":159}}],["160",{"pageContent":"After that, you will need to verify your payment information by completing the cash out form on Replit's site [here](https://replit.com/cash-out).\n\nOnce you have verified your identity and payment information on your Replit account, we will withdraw the requested amount of Cycles from your wallet and execute the payment. If you no longer have a payable balance of Cycles equivalent to the amount you requested, we will cancel the payment and ask you for a new desired amount to withdraw.\n\n### Are [secrets](/programming-ide/workspace-features/secrets) included in my work to the Bounty Poster?\n\nNo, when the work is provided, contents in the `secrets` sidebar is not included. If the intent is to provide that information to the Poster, the parties should discuss how they would like to transfer that information.\n\n### What rights are transferred in the work upon completion?\n\nAll rights to the work are transferred from the Bounty Hunter to the Bounty Poster upon successful completion of the Bounty and Cycles are exchanged. By submitting a work for acceptance, the Bounty Hunter represents that they have all necessary rights in the content of the work to transfer to the Poster, as specified in our [terms](https://replit.com/site/cycles-terms).\n\n### What if I can't respond or deliver on time?\n\nWhen accepting a Bounty, it's very important to set expectations around timelines and communication cadence with the Bounty Poster in one of your first exchanges.\n\nSome Posters would like an email or message check-in every week, and some prefer daily check-ins. Some Posters use the Bounties platform for critical time-sensitive work and in this case, it's very important to set expectations on whether or not their intended deadline is possible.\n\nWhen a Hunter does not respond in a timely manner, it often causes harm to the Poster's project. Repeated failure to set and meet communication expectations with Bounty Posters may lead to suspension of your Bounty Hunter account.","metadata":{"id":160}}],["161",{"pageContent":"We understand that sometimes there are uncontrollable circumstances due to which a Hunter may not respond in a timely manner. If that is the case, we request you to let us know by emailing bounties@replit.com. \n\n### What if I am unable to complete a Bounty?\n\nIf you are unable to complete a Bounty, please email bounties@replit.com along with any mitigating circumstances so that we can assist you. Please note that if this happens more than once, you may be  suspended from the Bounties platform.\n\n### Is there a limit on how many Bounties I can work on at a given time?\n\nWe recommend that you don’t work on more than two Bounties at a given time. This is to prevent yourself from burning out by taking on too many Bounties simultaneously. This also enables you to give focused attention to a few clients at a given time.\n\n\n## Support\n\n### How do I contact the Bounty Poster or the Bounty Hunter about the Bounty?\n\nIf you have questions for the Bounty Poster, you can include them in the application form, or reach out through any social media platforms linked in the user’s profile.\n\nThe Poster will indicate a preferred communication channel (such as email or Discord) in the Bounty post for discussions throughout the project.\n\nIf you are unable to contact the Poster or Bounty Hunter and need assistance with a Bounty, you can reach out to the Moderator via the “Contact Support” button under the “Having trouble?” section of the Bounties page.\n\n### What if I have a dispute with Poster or a problem with the work?\n\nWe encourage our Bounty Posters and Bounty Hunters to try and settle conflicts among themselves. If for any reason this fails, or if you encounter non-permitted usage, users can contact the Moderator via the “Contact Support” button under the “Having trouble?” section of the Bounties page.\n\n All decisions by Replit in case of a dispute are final and binding on both the Hunter and Poster.","metadata":{"id":161}}],["162",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Resources for Bounty Hunters\n\n## Templates\n\nNeed some boilerplate code? Use these templates to get started on your next Bounty:\n\n- [Bots](https://replit.com/templates/bots)\n- [Graphics](https://replit.com/templates/graphics)\n- [Websites](https://replit.com/templates/websites)\n- [AI](https://replit.com/templates?q=AI)\n\n## Replit Profile Tips\n\n![bounties profile](https://docimg.replit.com/images/bounties/bounties_profile.png)\n\n✅ Use [this template](https://replit.com/@templates/Portfolio-Site-Template?v=1) to create a portfolio of work to pin to your profile.\n\n✅ Add links to previous work, Github profile, Discord, etc. in your profile that are relevant and up to date.\n\n✅ Make sure the repls on your profile are a good representation of your skills.\n\n❌ Don't include partial pieces of work on your profile page (hide those in a folder, or use Private Repls).\n\n❌ The Replit-generated names like PuzzlingPriceyKey are cool and all, but make sure the Repls on your profile have sensible names and are published with nice cover photos.\n\n## Build your Portfoliio\n\nUse these tutorials and projects as inspiration to add to your porfolio:\n\n- [Intro to JS](https://replit.com/learn#:~:text=This%20tutorial-,covers,-the%20basics%20of): Understand the basics of JS\n- [Socket.IO](https://replit.com/learn#:~:text=Socket.IO-,Tutorial,-Learn%20how%20to): build a multi-player app\n- [Intro to Bash](https://replit.com/learn#:~:text=Intro%20to-,Bash,-Bash%20is%20one): learn how to read and print files, create games, and run program files as scripts\n- [Chatbot](https://replit.com/@QwertyQwerty54/Chatbot?v=1): browse the code used to make a chatbot with Python\n- [AI Basics with Hangman](https://replit.com/@WyattGeorge/AI-Hangman?v=1): create your own version and add it to your portfolio to showcase your AI skills\n\nCheck out the [Bounty Hunter Feature Tutorial](https://replit.com/@replit/Bounty-Hunters-Tutorial) to learn more.","metadata":{"id":162}}],["163",{"pageContent":"Check out the [Bounty Hunter Feature Tutorial](https://replit.com/@replit/Bounty-Hunters-Tutorial) to learn more.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/89Qby0LX2rY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","metadata":{"id":163}}],["164",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Posting and awarding a Bounty\n\nIf you're familar with other freelancing platforms, Bounties will feel familiar.\n\n### Check Cycles\n\nBefore you post a Bounty, ensure you have enough [Cycles](/cycles/about-cycles) to pay the Bounty. Once the Bounty is listed, Replit will hold the Cycles as a deposit until the Bounty is completed or closed.\n\n### Post a Bounty\n\n![how to post a bounty](https://docimg.replit.com/images/bounties/posting-bounty.gif)\n\n1. On the [Bounties page](https://replit.com/bounties), click the \"Create a Bounty\" button in the upper-right-hand corner of the screen.\n2. Fill out the \"Create a Bounty\" form, adding as much detail as you can so Bounty Hunters know what they're applying to do.  \n   Write a clear title and _pay special attention defining acceptance criteria_, as this is going to guide your Bounty Hunter's decisions and will be refered to when settling disputes.  \n   Set the due date, your prefered method of communication, and the number of Cycles you're offering for the work.\n3. Post your Bounty!\n\nYou are not allowed to circumvent Bounties by taking projects off-platform. This includes promising payments outside the Bounties system or any future promise of work outside Bounties. You could be banned permanently for attempting to do so. \n\n### Wait for applications\n\nSit back and wait for Bounty Hunters to apply!\n\n### Pick an applicant and communicate well!\n\nOnce you have a Bounty Hunter you'd like to work with, click the \"Accept Application\" button. This closes the Bounty to further applications.\n\n![received an application](https://docimg.replit.com/images/bounties/accepting-proposal.gif)\n\nNow it's your turn to reach out to the Bounty Hunter you've selected! (Be sure you're both clear on deliverables and timeline expectations)\n\n### Review the work\n\nWhen your Bounty Hunter has completed the work, you'll see the following screen that allows you to view the work. After checking out the work, you can request changes or accept the work.","metadata":{"id":164}}],["165",{"pageContent":"When your Bounty Hunter has completed the work, you'll see the following screen that allows you to view the work. After checking out the work, you can request changes or accept the work.\n\n![view submission](https://docimg.replit.com/images/bounties/view_submission.png)\n\nIf you request changes, be sure to give your Bounty Hunter clear and actionable feedback within the bounds of the original Bounty.\n\n_Please do not use this mechanism to add features or increase the project's scope - if you need another feature, make another bounty!_\n\n![pick a bounty](https://docimg.replit.com/images/bounties/req_changes.png)\n\nOnce you're happy with the work, simply Accept it and the Bounty process is complete.\nThe code now belongs to you, and Replit will send the the Cycles deposit to the Bounty Hunter.\n\n![bounty completed](https://docimg.replit.com/images/bounties/completed.png)\n\n## Bounty Poster Feature Tutorial\n\nCheck out the [Bounty Poster Feature Tutorial](https://replit.com/@replit/Bounty-Poster-Tutorial).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VZ7J6K198Ig\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>","metadata":{"id":165}}],["166",{"pageContent":"---\nsidebar_position: 1\n---\n\n# About Cycles\n\n## What are Cycles?\n\nCycles are Replit's virtual tokens that can be used to purchase extra compute power and functionality for your Repls.\n\nCycles [can be purchased](https://replit.com/pricing) for $0.01 USD each, starting at a minimum of 150 Cycles. They can be combined with any user plan. You can either make a one-time Cycles purchase or use Auto-Refill to automatically buy more Cycles when needed. That means basic plan users can unlock Power Ups as needed without committing to a plan. With Cycles, users with a Replit Core membership (previously Hacker or Pro) can surpass the one Boost and one Always On that come with their plan.\n\nDefault view:\n\n![Buy Cycles Modal](https://docimg.replit.com/images/cycles/about-cycles/buy_cycles_alt.png)\n\nChoose any number of Cycles by clicking on other:\n\n![Buy Cycles Modal: Any number of cycles](https://docimg.replit.com/images/cycles/about-cycles/buy_cycles_alt_2.png)\n\nAutomatically top up your Cycles Balance by toggling Auto-Refill On and entering a payment method to use on Replit:\n![Buy Cycles Modal: Any number of cycles](https://docimg.replit.com/images/cycles/about-cycles/auto_refill_card_alt_1.png)\n\n\n## Managing Your Cycles\n\nOnce you purchase Cycles, you can view your balance and usage within your \"My Cycles\" page located in your menu.\n\n![My Cycles Page](https://docimg.replit.com/images/cycles/about-cycles/my_cycles_mgmt.png)\n\nOnce your Cycles balance is insufficient, your Power Ups will automatically turn off and you will need to repurchase Cycles to continue accessing the same functionality. The other option is to set up Auto-Refill, which we will cover below.\n\n## Managing Auto-Refill\nWhen Auto-Refill is enabled, we will buy Cycles for you when you need more (e.g. when you try to purchase something with Cycles, but don't have enough).\n\nFor now, Auto-Refill works for all Power Ups that renew on a given interval (e.g. Boosts, Always On, Replit AI, Private Repls)","metadata":{"id":166}}],["167",{"pageContent":"For now, Auto-Refill works for all Power Ups that renew on a given interval (e.g. Boosts, Always On, Replit AI, Private Repls)\n\nAuto-Refill will buy up to $10 or multiple of $10 of Cycles, if your Power Ups require that. \n\nYou can manage Auto-Refill on the [Account Page](https://replit.com/account#billing), when you purchase a Power Up in the Workspace, or in the [My Cycles Page](https://replit.com/cycles/set-up-auto-refill) by adding a payment method.\n\n![Auto-Refil](https://docimg.replit.com/images/cycles/about-cycles/auto_refill_1.png)\n\nYou can set a monthly budget for Auto-Refill. After your budget is reached in a calendar month, we will no longer Auto-Refill until the next calendar month.\n\n![Budget](https://docimg.replit.com/images/cycles/about-cycles/my_cycles_budget.png)\n\nIf your payment method fails when running Auto-Refill, we will notify you and eventually stop attempting to Auto-Refill until you update the payment method. You will lose access to your Power Ups if you fail to add a new payment method before Cycles are needed.\n\nNote: For users with the legacy Auto-Refill (also called a Cycles Subscription), if you enable Auto-Refill we will cancel your Cycles Subscription.\n\n## Important Notes\n\nWe also want to be clear, Cycles are NOT a cryptocurrency. They are a virtual token native to Replit's platform and do not have any value in real currency.\n\nPurchasing compute resources is just the first step for Cycles. We have a lot more in store for these tokens and what they will become. For now, we're excited to introduce this new Power Up method to our community!\n\nIf you have any more questions about Cycles or how to use them, check out our Cycles FAQ [here](/getting-started/faq#cycles).","metadata":{"id":167}}],["168",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Tipping\n\n## Overview\n\nTipping is now available as a way to support and reward creators who provide value to our community with Cycles they can spend on Replit.\n\nIf you want to tip a Repl, simply head to the project's cover page, tap one of the tip buttons, and wait for the success message to appear.\n\n![tipping success](https://docimg.replit.com/images/tipping/tipping-accept.gif)\n\nTo buy Cycles for tips, head to your [Cycles page](https://replit.com/cycles) and buy a one-time or recurring package.\n\nHead to our [community page](https://replit.com/community/all) and find some cool projects to tip today!\n\n## What am I allowed to tip?\n\nYou can only tip your favorite creators by tipping one of their _creations_. This includes Repls and Templates.\n\nYou cannot go to someone's profile and tip them Cycles directly.\n\n## Do I have to use Cycles?\n\nYes, tipping on Replit is only available with Cycles.\n\n## How can I earn more tips?\n\nBy creating something awesome! The most tipped creators will be those that create fun and original projects for the Replit community. If people like what you've built, they will tip you!\n\nFor a guide on how to give your Repls the best chance of getting noticed in the community, check out [this guide](/hosting/sharing-your-repl#publish-your-repl).\n\n## Can I cancel a tip?\n\nIf you clicked a tip button you did not mean to press, you will have a few seconds to click **Cancel Tip** in the bottom righthand blue box that appears.\n\n![tipping canceled](https://docimg.replit.com/images/tipping/tipping-canceled.gif)\n\n## Can I get a refund on tips?\n\nNo. All tips are final. If you want, try contacting the creator you may have accidentally tipped and sort out a resolution with them directly.\n\n## Is there a fee on tipping?\n\nYes. A 10% fee on tips charged to the receiver of the tip.\n\n## Can I cash out my tips into real money?","metadata":{"id":168}}],["169",{"pageContent":"## Is there a fee on tipping?\n\nYes. A 10% fee on tips charged to the receiver of the tip.\n\n## Can I cash out my tips into real money?\n\nNo. Only Cycles earned from Bounties are eligible for cash out. To learn more about cash out on Bounties head [here](/bounties/faq#am-i-able-to-cash-out-my-cycles-into-real-money).","metadata":{"id":169}}],["170",{"pageContent":"---\nsidebar_position: 1\n---\n\n# What is an Extension?\n\nExtensions are applications that users can build to add functionality and tools to the Replit workspace.\n\n - [Developer Documentation](/extensions)\n - [The Extension Store](/extension/store)\n\n## What are Extensions good for?\n\n### Automate actions and workflows\nExtensions have deep integration with Replit, so users can automate actions like reading and editing files, formatting or linting code, and more.\n\n### Add custom apps with Tools\nTool Extensions let users interact with completely custom experiences and products in the Workspace. You can think of them like the apps you install on your own phone or computer.\n\n### Extend native functionality\nExtensions can extend and improve default functionality like formatting code, and surfaces like the editor.\n\n## Why would I build an extension?\n\n### Integrate the tools you already use\nExtensions can bring all your favorite tools together with custom clients. Especially useful for PMs, designers, and developers with opinionated workflows.\n\n### Add power and personality to your Workspace\nExtensions make Replit a more open, flexible platform. By building an Extension you can change or add just about any tool that makes you feel powerful and productive.\n\n### Grow an existing software business\nExisting companies have the advantage of distributing their products directly to Replit’s vibrant community, reaching their audience in-context.","metadata":{"id":170}}],["171",{"pageContent":"# The Extension Store\n\nThe Extension Store allows you to view and install from a selection of manually-curated Workspace Extensions.\n\n![Extensions Store](https://docimg.replit.com/extensions/end-user/store.png)\n\n## Access the Store\nNavigate to the Extension Store by navigating to the **Tools** section on the sidebar and clicking **Extensions**.\n\n![Open the Extensions Store](https://docimg.replit.com/extensions/end-user/toolspane.png)\n\n## Install an Extension\nClick on an Extension and press **Install Extension to your account**.\n\n![Install](https://docimg.replit.com/extensions/end-user/install.png)\n\nClick **Open Extension** to start using it.\n\n## Accessing installed Extensions\nInstalled extensions will appear in the Tools section of the sidebar.\n\n![Installed Tools](https://docimg.replit.com/extensions/end-user/tools-in-tools-section-that-are-tools.png)\n\n## Debugging\nIf an extension times out or is behaving unexpectedly, hit the Reload icon in the extension Tab.\n\n![Reload button](https://docimg.replit.com/extensions/reload-head.png)\n\nIf the issue persists after having reloaded it, contact the extension creator by the contact email they provided in the Extension's listing.","metadata":{"id":171}}],["172",{"pageContent":"---\nsidebar_label: \"Publishing\"\n---\n\nimport {ResourceCard} from '../src/components/homepage/ResourceCard'\n\n# Publish your Extension\n\nAfter you've finished building your Extension, it's time to publish it to the store for all to use. There are a few steps you will need to complete before you release it. Extensions are expected to be a bundle that can be statically served.\n\n## Design an Icon\n\nExtensions need to have a clean, visible, and memorable icon before being added to the store. We have a [Figma template](https://www.figma.com/community/file/1220063901895293170) you can use to design your own, or you can use the Icon Generator to create one for you.\n\n<ResourceCard\n  image=\"https://extension-9d8280fb-1a5f-495b-9624-aba982c42205.theflowingsky.repl.co/cover.png\"\n  href=\"https://replit.com/extension/@theflowingsky/9d8280fb-1a5f-495b-9624-aba982c42205\"\n  title=\"Icon Generator Extension\"\n  description=\"Use this extension in your Extension Repl to generate an icon for your own extension\"\n/>\n\n<!-- [![Extension Icon Cover](https://s3-alpha.figma.com/hub/file/3206318308/7beb7f18-f8da-4456-91ee-e5e676cbd610-cover.png)](https://www.figma.com/community/file/1220063901895293170) -->\n\n## Building\n\nIf you use a framework like React, you will need to build a static output folder which renders the extension's contents statically. The default template already has the build steps configured, just confirm that it works by running the build command in the shell. \n\nIf you are using HTML/CSS/JS, set the build command to a single space `\" \"` and set the output directory to your Repl's base URL `.`.\n\n### Vite\n\nRunning `npx vite build` will create a static folder `dist`. Set `build` to `vite build` in your `package.json` file and set the extension's build command to `npm run build`. Next, set the output folder to `dist`.\n\n### Next.js","metadata":{"id":172}}],["173",{"pageContent":"### Next.js\n\nNext.js supports building a [static HTML export](https://nextjs.org/docs/advanced-features/static-html-export), but some features such as server-side rendering and API routes are not supported.\n\nIn `next.config.js`, set the `output` property to `\"export\"`.\n\nThe required steps to build the static output folder consist of:\n\n1. Deleting the `.next` folder\n2. Building in development mode\n3. Running `next export`\n\nAll three steps can be collapsed into a single bash command, which can be set as the `\"export\"` command in `package.json`.\n\n```json\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"export\": \"rm -rf .next && export NODE_ENV=development && yarn build && next export\"\n},\n```\n\nRunning `next export` will create a static folder `out`. In the Extension Devtools, set the build command to `npm run export` and the output folder to `out`.\n\n## Review\n\nAfter your extension has been published, you must wait for a Replit staff member to review it before it can be put on the store.","metadata":{"id":173}}],["174",{"pageContent":"---\nsidebar_position: 7\nsidebar_label: FAQs\n---\n\n# Frequently Asked Questions\n\n### How does my extension get verified?\n\nA Replit staff member must review your Extension and manually verify it.\n\n### My backend server isn't working with my extension\n\nExtensions are expected to be a bundle that can be [statically served](https://blog.hubspot.com/website/static-vs-dynamic-website). This means that you can't run a server in the same Repl as the extension you're hosting. We would recommend separating your server and client for extension development.\n\n### My extension is throwing a timeout error\n\nMake sure you are viewing your extension through the correct pane and not the [webview](https://docs.replit.com/hosting/add-a-made-with-replit-badge-to-your-webview#what-is-the-webview). To correctly open your extension, use the [Extension Devtools](/extensions/development/devtools).\n\nIf your extension is opened in the correct pane, hit the Reload icon in the extension tab.\n\n![Reload button](https://docimg.replit.com/extensions/reload-head.png)\n\n### What's the difference between the Webview and an Extension?\n\nThe webview is a normal iframe that displays the web output of your Repl. In the case of an extension, a special handshake is established between it and the Replit workspace.","metadata":{"id":174}}],["175",{"pageContent":"---\nsidebar_position: 1\nsidebar_label: \"Manifest\"\n---\n\n# Manifest File\n\nThe `extension.json` file contains the manifest for an Extension and needs to be placed in a public directory such that it is served at the root (`/extension.json`). You are required to provide a manifest file to publish an Extension to the Extensions Store.\n\n## Properties\n\n| Property         | Type                            | Description                                                                                               |\n| ---------------- | ------------------------------- | --------------------------------------------------------------------------------------------------------- |\n| name             | `string`                        | Required. The Extension's name. Length can be 1-60 characters.                                            |\n| description      | `string`                        | Required. The Extension's description. Length can be 1-255 characters.                                    |\n| longDescription? | `string`                        | Optional. The Extension's longer description. Markdown is supported and recommended.                      |\n| icon?            | `string`                        | Optional. The Extension's icon. This is a reference to a file on the repl. Any web based image format is accepted, but SVGs are preferred.            |\n| tags?            | `string[]`                      | Optional. A list of tags that describe the extension.                                                     |\n| coverImages?     | [`CoverImage[]`](#coverimage)   | Optional. A Cover Image belonging to an Extension. Max 4 coverImages per extension.                       |\n| website?         | `string`                        | Optional. The Extension's website                                                                         |","metadata":{"id":175}}],["176",{"pageContent":"| website?         | `string`                        | Optional. The Extension's website                                                                         |\n| authorEmail?     | `string`                        | Optional. The email address of the extension author. This is made public                                  |\n| fileHandlers?    | [`FileHandler[]`](#filehandler) | Optional. An array of [file handlers](/extensions/basics/key-concepts#file-handler-file-editors-and-icons) registered by the extension. |\n| tools?           | [`Tool[]`](#tool)               | Optional. An array of [tools](/extensions/basics/key-concepts#tool-extension-ui) registered by the extension.                 |\n| scopes?          | [`Scope[]`](#scope)             | Optional. An array of scopes required by the extension.                                                   |\n| background? | [`BackgroundPage`](#backgroundpage) | Optional. A path to a background script |\n\n\n## Types\n\n### CoverImage\n\nA Cover Image belonging to your extension. Currently, only the first image will be used in the extension store. The `path` should reference an image file on the Repl's file system.\n\n| Property | Type     | Description                                                        |\n| -------- | -------- | ------------------------------------------------------------------ |\n| path     | `string` | The path to the image. This is relative to the statically served root           |\n| label    | `string` | The label of the image. This is used as the alt text for the image |\n\n### FileHandler\n\nA [file handler](/extensions/basics/key-concepts#file-handler-file-editors-and-icons) is a custom user experience around a particular file in the Workspace, in the form of a Pane.\n\n| Property | Type     | Description                                                                                             |\n| -------- | -------- | ------------------------------------------------------------------------------------------------------- |","metadata":{"id":176}}],["177",{"pageContent":"| -------- | -------- | ------------------------------------------------------------------------------------------------------- |\n| glob     | `string` | A glob pattern that matches the files that this handler should be used for                              |\n| handler  | `string` | The path to the handler. This is relative to the statically served root.                                |\n| name?    | `string` | Optional. Required if more than one file handler is registered. Fallback value is the extension's name. |\n| icon?    | `string` | Optional. Required if more than one file handler is registered. Fallback value is the extension's icon. |\n\n### Tool\n\nA [tool](/extensions/basics/key-concepts#tool-extension-ui) is a custom user experience in the Workspace, in the form of a Pane.\n\n| Property | Type     | Description                                                                                     |\n| -------- | -------- | ----------------------------------------------------------------------------------------------- |\n| handler  | `string` | The path to the handler. This is relative to the statically served root.                        |\n| name?    | `string` | Optional. Required if more than one tool is registered. Fallback value is the extension's name. |\n| icon?    | `string` | Optional. Required if more than one tool is registered. Fallback value is the extension's icon. |\n\n### Scope\n\nScopes/Permissions required by the extension.\n\n| Property | Type                      |\n| -------- | ------------------------- | --------------------------------------------- |\n| name     | [`ScopeType`](#scopetype) | The name of the scope                         |\n| reason   | `string`                  | The reason why the extension needs this scope |\n\n### ScopeType\n\n- `read` - Read any file in a Repl\n- `write-exec` - Write to any file, and execute any code or shell command in a Repl\n- `repldb:read` - Read all data in the key-value [ReplDB](/hosting/databases/replit-database) in a Repl","metadata":{"id":177}}],["178",{"pageContent":"- `write-exec` - Write to any file, and execute any code or shell command in a Repl\n- `repldb:read` - Read all data in the key-value [ReplDB](/hosting/databases/replit-database) in a Repl\n- `repldb:write` - Write or delete any key in the key-value [ReplDB](/hosting/databases/replit-database) in a Repl\n- `experimental-api` - Use experimental APIs that may be unstable, may change in behavior or be removed entirely\n\n```ts\n\"read\" | \"write-exec\" | \"repldb:read\" | \"repldb:write\" | \"experimental-api\"\n```\n\n### BackgroundPage\n\nThe path to a specified route that will run a background script.\n\n```\n{\n  page: string;\n}\n```","metadata":{"id":178}}],["179",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Key Concepts\nOn this page, you'll learn the key concepts of Replit Extensions. If you're new to Extensions, we recommend you start with the [Get Started guide](/extensions/).\n\n## Platform\n\n### Extension\nExtensions allow you to add custom functionality, tools, and third-party integrations to the Workspace. Extensions can be installed by any user via the Store.\n\n### Store\nThe Extensions Store is a marketplace for Extensions. Anyone can create and release an extension on the store. You can also share private links to unlisted Extensions, which is great for testing, internal tools, and more.\n\n---\n\n## Development\n\n### Extension Repl\nExtension Repls contain the frontend code for your Extension. You can use HTML / CSS / Javascript, and any web framework of your choice. We provide templates that use React and Vanilla Javascript.\n\n### Devtools\nExtension Devtools are a set of tools that help you build and test your Extension. In the Extension Repl workspace, you can access the Devtools by clicking the \"Devtools\" button in the header.\n\n## Extension Features\n\n### Tool (*Extension UI*)\nA custom user interface presented as a Tab in the workspace. Examples include a ReplDB editor or a Chat Extension. Learn how to [build your first tool](/extensions/examples/snippet-manager).\n\n### File Handler (*File Editors and Icons*)\nFile handlers allow you to build Tools and add icons for specific file types. Examples include a JSON file editor or a CSV file editor. Learn how to [build your first file handler](/extensions/examples/json-editor). Under the hood, file handlers are just tools with a filetype association.\n\n### Command\nCommands allow you to add custom commands to the CLUI command bar. Commands are a great way to build a CLI-like experience for your extension, and enable quick actions for your users.\n\n### Background Script\nBackground scripts are loaded when the Repl opens. They remain permanently loaded until the extension is uninstalled or you close the workspace.","metadata":{"id":179}}],["180",{"pageContent":"---\ntitle: \"Extension Devtools\"\n---\n\n# Developing your Extension\n\nIn every extension Repl, you will see a button labeled **Extension Devtools** in the top-right corner of the workspace.\n\n![Devtools button](https://docimg.replit.com/extensions/devtools-button.png)\n\nIf you do not see this button, make sure your Repl is [configured to be an Extension](/programming-ide/configuring-repl#extension).\n\n## Developer Tools\n\nThe Extension Devtools pane makes it easy to edit your Extension's metadata and manage [Tools](/extensions/basics/key-concepts#tool-extension-ui) and [File Handlers](/extensions/basics/key-concepts#file-handler-file-editors-and-icons).\n\n![Devtools](https://docimg.replit.com/extensions/devtools.png)\n\n### Extension Metadata\n\nClick the **Edit** button in the top-right corner of your Extension preview to edit it. See [docs on the manifest file](/extensions/api/manifest).\n\n![Extension preview](https://docimg.replit.com/extensions/preview-card.png)\n\n### File Handlers\n\nClick the \"+\" Icon next to **File Handlers** or click **New File Handler**. You will then be prompted to fill out the necessary information for the file handler. See [Type Definition](/extensions/api/manifest#filehandler).\n\nTo preview a file handler in action, click the **Open** button on the right side of an existing file handler.\n\n### Tools\n\nClick the \"+\" Icon next to **Tools** or click **New Tool**. You will then be prompted to fill out the necessary information for the new tool. See [Type Definition](/extensions/api/manifest#tool).\n\nTo preview a tool in action, click the **Open** button on the right side of an existing tool.","metadata":{"id":180}}],["181",{"pageContent":"---\ntitle: Full-Stack\n---\n# Create a full-stack Extension\nWhile full-stack extensions are not supported within a single Repl (aka a monorepo) at this time, you can always call out from your Extension client Repl to any outside API endpoints.\n\nUntil we have full Deployments support, you can use this simple workaround to create your own server API for your extension:\n\n1. [Create your Extension Client Repl →](https://replit.com/new/extension)\n2. [Create a separate Repl](https://replit.com/new) for your backend. This should expose an API. For example it could be a [Node](https://replit.com/new/nodejs) or [Ruby](https://replit.com/new/ruby) API server, or even a [Next.js](https://replit.com/new?template=482b2b7d-6b3e-4b9d-863c-d51c1d5cf6f0) site with a serverless function.\n3. Make fetch requests from your extension client to your backend  \n  *💡 Make sure to enable CORS requests on your extension backend API, since the extension client and API will run on different subdomains*\n\n\n\n\n\nIf you’re using Next.js to build your extension, we recommend [exporting it statically](https://nextjs.org/docs/pages/building-your-application/deploying/static-exports) and pointing your releases to the build directory.","metadata":{"id":181}}],["182",{"pageContent":"---\ntitle: \"Manual Installation\"\n---\n\nWhile we recommend using our [Templates](/extensions/basics/templates) to get started, you can also install the API client manually.\n\n### As a `<script>` import\n\nStart using the Extensions API client by inserting this code into the `<head>` tag of your HTML:\n\n```html\n<script src=\"https://unpkg.com/@replit/extensions@1.8.0/dist/index.global.js\"></script>\n```\n\nStart using the API client by creating a new `<script>` tag and using the pre-defined `replit` variable.\n\n```html\n<script>\n  async function main() {\n    await replit.init();\n\n    ...\n  }\n\n  window.addEventListener('load', main);\n</script>\n```\n\n### As an npm package\n\nInstall the client with your preferred package manager, and use the `import` statement to start using it.\n\n```\nnpm install @replit/extensions\nyarn add @replit/extensions\npnpm add @replit/extensions\n```\n\nAfter installing the API client, use the `import` statement to start using it.\n\n```tsx\nimport {\n  fs,\n  data,\n  ...\n} from '@replit/extensions';\n```","metadata":{"id":182}}],["183",{"pageContent":"---\nsidebar_label: useReplit\n---\n\n# `useReplit()` Hook\n\nThe `useReplit()` hook establishes the handshake between the Replit and the extension and passes the API wrapper for usage inside a React component.\n\n## Usage\n\n```ts\nimport { useReplit } from '@replit/extensions-react';\n\nconst Component = () => {\n  const { replit, status, filePath, error } = useReplit();\n\n  ...\n}\n```\n\n## Signature\n\n```ts\nfunction useReplit(init?: {\n  permissions: Array<string>;\n}): UseReplitInitialized | UseReplitPreInitialization | UseReplitFailure;\n```\n\n## Result\n\n| Property | Type                                  | Description                                                                                            |\n| -------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| status   | [`HandshakeStatus`](#handshakestatus) | A string indicating the status of the handshake between Replit and the Extension                       |\n| error    | `string` &#124; `null`                | If the handshake has failed, `error` is a string indicating the error message                          |\n| filePath | `string` &#124; `null`                | If the handshake has succeeded, `filePath` points to the current file the user is focusing             |\n| replit   | `typeof replit`                       | If the handshake has succeeded, `replit` is the API wrapper for the entire `@replit/extensions` module |\n\n## Types\n\n### HandshakeStatus\n\nAn enumerated set of values for the handshake status.\n\n| Key     | Value       |\n| ------- | ----------- |\n| Ready   | `\"ready\"`   |\n| Error   | `\"error\"`   |\n| Loading | `\"loading\"` |\n\n### UseReplitReady\n\nIf the handshake between Replit and the Extension has been established successfully\n\n| Property | Type                                          |\n| -------- | --------------------------------------------- |\n| status   | [`HandshakeStatus`](#handshakestatus).`Ready` |","metadata":{"id":183}}],["184",{"pageContent":"| Property | Type                                          |\n| -------- | --------------------------------------------- |\n| status   | [`HandshakeStatus`](#handshakestatus).`Ready` |\n| error    | `null`                                        |\n| filePath | `string`                                      |\n| replit   | `typeof replit`                               |\n\n### UseReplitLoading\n\nThe default handshake status, before initialization has been established.\n\n| Property | Type                                            |\n| -------- | ----------------------------------------------- |\n| status   | [`HandshakeStatus`](#handshakestatus).`Loading` |\n| error    | `null`                                          |\n| filePath | `null`                                          |\n| replit   | `null`                                          |\n\n### UseReplitFailure\n\nIf the handshake has failed.\n\n| Property | Type                                          |\n| -------- | --------------------------------------------- |\n| status   | [`HandshakeStatus`](#handshakestatus).`Error` |\n| error    | `string`                                      |\n| filePath | `null`                                        |\n| replit   | `null`                                        |","metadata":{"id":184}}],["185",{"pageContent":"---\nsidebar_label: useReplitEffect\n---\n\n# `useReplitEffect()` Hook\n\nThe `useReplitEffect()` hook fires a callback with the `replit` API wrapper upon the first component render and when its dependency array changes. It is similar in functionality to the `useEffect` React hook.\n\n## Usage\n\n```ts\nimport { useReplitEffect } from '@replit/extensions-react';\n\nconst Component = () => {\n  useReplitEffect(async (replit) => {\n    ...\n  }, [...dependencies]);\n\n  ...\n}\n```\n\n## Signature\n\n```ts\nfunction useReplitEffect(\n  callback: (typeof replit) => Promise<void>;\n  dependencies: Array<any>\n): null;\n```","metadata":{"id":185}}],["186",{"pageContent":"---\nsidebar_label: useWatchTextFile\n---\n\n# `useWatchTextFile()` Hook\n\nThe `useWatchTextFile()` hook allows you to read and write to the contents of a file at the provided `filePath`.\n\n## Usage\n\n```ts\nimport { useWatchTextFile } from '@replit/extensions-react';\n\nconst Component = () => {\n  const { content, watching, watchError, writeChange } = useWatchTextFile({ filePath: \"...\" });\n\n  ...\n}\n```\n\n## Signature\n\n```ts\nfunction useWatchTextFile({\n  filePath: string | null | undefined\n}): UseWatchTextFileLoading | UseWatchTextFileErrorLike | UseWatchTextFileWatching;\n```\n\n## Result\n\n| Property    | Type                        | Description                                                                       |\n| ----------- | --------------------------- | --------------------------------------------------------------------------------- |\n| status      | `UseWatchTextFileStatus`    | The file watcher's status. Useful for ensuring the desired file is being watched. |\n| content     | `string` &#124; `null`      | If watching, the contents of the file located at the provided `filePath`          |\n| watchError  | `string` &#124; `null`      | If an error occurs, the corresponding error message                               |\n| writeChange | `WriteChange` &#124; `null` | If watching, a function to update the watched file                                |\n\n## Types\n\n### TextChange\n\n| Property | Type     |\n| -------- | -------- |\n| from     | `number` |\n| to?      | `number` |\n| insert?  | `string` |\n\n### UseWatchTextFileErrorLike\n\n| Property    | Type                                                                                                         |\n| ----------- | ------------------------------------------------------------------------------------------------------------ |\n| status      | `UseWatchTextFileStatus.Error` &#124; `UseWatchTextFileStatus.Moved` &#124; `UseWatchTextFileStatus.Deleted` |\n| content     | `null`                                                                                                       |","metadata":{"id":186}}],["187",{"pageContent":"| content     | `null`                                                                                                       |\n| watchError  | `string` &#124; `null`                                                                                       |\n| writeChange | `null`                                                                                                       |\n\n### UseWatchTextFileLoading\n\n| Property    | Type                             |\n| ----------- | -------------------------------- |\n| status      | `UseWatchTextFileStatus.Loading` |\n| content     | `null`                           |\n| watchError  | `null`                           |\n| writeChange | `null`                           |\n\n### UseWatchTextFileWatching\n\n| Property    | Type                              |\n| ----------- | --------------------------------- |\n| status      | `UseWatchTextFileStatus.Watching` |\n| content     | `string`                          |\n| watchError  | `null`                            |\n| writeChange | `WriteChange`                     |\n\n---\n\n## UseWatchTextFileStatus\n\n```ts\nError = \"error\",\nLoading = \"loading\",\nWatching = \"watching\",\nMoved = \"moved\",\nDeleted = \"deleted\",\n```\n\n---\n\n### WriteChange\n\n```ts\n(changes: TextChange | Array<TextChange>) => void\n```","metadata":{"id":187}}],["188",{"pageContent":"---\nsidebar_label: useActiveFile\n---\n\n# `useActiveFile()` Hook\n\nThe `useActiveFile()` hook returns the file actively focused on by the current user.\n\n## Usage\n\n```tsx\nimport { useActiveFile } from \"@replit/extensions-react\";\n\nconst Component = () => {\n  const activeFile = useActiveFile();\n\n  return (\n    <>\n      <span>Active File: {activeFile}</span>\n    </>\n  );\n};\n```\n\n## Signature\n\n```ts\nfunction useActiveFile(): string | null;\n```","metadata":{"id":188}}],["189",{"pageContent":"---\nsidebar_label: useThemeValues\n---\n\n# `useThemeValues()` Hook\n\nThe `useThemeValues()` hook provides you with the global token color values of the current user's theme.\n\n## Usage\n\n```ts\nimport { useThemeValues } from '@replit/extensions-react';\n\nconst Component = () => {\n  const themeValues = useThemeValues();\n\n  ...\n}\n```\n\n## Signature\n\n```ts\nfunction useThemeValues(): ThemeValuesGlobal | null;\n```\n\n## Types\n\n### [ThemeValuesGlobal](/extensions/api/themes#themevaluesglobal)\n\nReplit's global theme token values for UI, excluding syntax highlighting.","metadata":{"id":189}}],["190",{"pageContent":"---\nsidebar_label: useTheme\n---\n\n# `useTheme()` Hook\n\nThe `useTheme()` hook returns all metadata on the current theme including syntax highlighting, description, HSL, token values, and more.\n\n## Usage\n\n```ts\nimport { useTheme } from '@replit/extensions-react';\n\nconst Component = () => {\n  const theme = useTheme();\n\n  ...\n}\n```\n\n## Signature\n\n```ts\nfunction useThemeValues(): ThemeVersion | null;\n```\n\n## Types\n\n### [ThemeVersion](/extensions/api/themes#themeversion)\n\nA specific theme version reflecting all colors and metadata on the current theme.","metadata":{"id":190}}],["191",{"pageContent":"---\nsidebar_label: useIsExtension\n---\n\n# `useIsExtension()` Hook\n\nThe `useIsExtension()` hook returns whether the handshake has been successfully established with the Replit workspace. If the handshake is loading, `undefined` will be returned. After loading has finished, the hook will return a boolean.\n\n## Usage\n\n```ts\nimport { useIsExtension } from '@replit/extensions-react';\n\nconst Component = () => {\n  const isExtension = useIsExtension();\n\n  ...\n}\n```\n\n## Signature\n\n```ts\nfunction useIsExtension(): boolean | undefined;\n```","metadata":{"id":191}}],["192",{"pageContent":"---\nsidebar_position: 0\nsidebar_label: Introduction\n---\n\n# Introduction\n\nAside from the original API Client, we have a React-specific package which eliminates the need for extension developers to do a lot of boilerplate setup when using React for Extension development. \n\nThe package comes with a set of hooks and components that combine to make a blazingly fast and seamless developer experience.\n\n - [NPM Package](https://www.npmjs.com/package/@replit/extensions-react)\n - [GitHub Repository](https://github.com/replit/extensions-react)\n\n## Installation\n\n```\nnpm install @replit/extensions-react\nyarn add @replit/extensions-react\npnpm add @replit/extensions-react\n```\n\n## Usage\n\nFork the [React Extension Template](https://replit.com/@replit/React-Extension?v=1) to get started.  Alternatively, you can start from scratch by wrapping your application with the `HandshakeProvider` component imported from `@replit/extensions-react`.\n\n```tsx\nimport { HandshakeProvider } from '@replit/extensions-react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\ncreateRoot(document.getElementById('root')).render(\n  <HandshakeProvider>\n    <App />\n  </HandshakeProvider>\n)\n```\n\nIn the `App` function, check the handshake status with the `useReplit` hook.\n\n```tsx\nimport { useReplit } from '@replit/extensions-react';\n\nfunction App() {\n  const { status, error, replit } = useReplit();\n\n  if(status === \"loading\") {\n    return <div>Loading...</div>\n  }\n\n  if(status === \"error\") {\n    return <div>An error occurred: {error?.message}</div>\n  }\n\n  return <div>\n    Extension is Ready!\n  </div>\n}\n```","metadata":{"id":192}}],["193",{"pageContent":"---\ntitle: JSON Editor\n---\n# Create a JSON editor\n\nIn this tutorial, we will create a JSON editor Extension with React and the [react-json-view](https://www.npmjs.com/package/react-json-view) package. Our application will display a JSON file's content and allow users to edit, add or delete properties directly from the editor. When a user finishes editing the JSON, the file will automatically update with the changes.\n\n## Prequisites\n\nThis tutorial assumes that you have a basic knowledge and understanding of web development and React.\n\n## Set up your Repl\n\n1. Fork the [Replit React Extension Template](https://replit.com/@replit/React-Extension?v=1).\n2. Install the `react-json-view` package with `npm install --force react-json-view`. The package uses React 17 as a peer dependency but works fine with React 18 as well.\n\n## Configure the manifest file\n\nConfigure the title and description in `public/extension.json` (the Extension [manifest file](/extensions/api/manifest)).\n\n```json\n{\n  \"name\": \"JSON Editor\",\n  \"description\": \"A viewer/editor for JSON files, providing code folding and structured editing\",\n  \"tags\": [\"editor\"]\n}\n```\n\nAdd the `fileHandlers` property to `extension.json` and provide a handler for JSON files. This tells Replit that your extension handles a particular file pattern using a page provided by your extension at the `handler` path. In this case, the handler is `/`, meaning that Replit shows the page at the root as the handler for all `.json` files\n\n```json\n  \"fileHandlers\": [\n    {\n      \"glob\": \"*.json\",\n      \"handler\": \"/\"\n    }\n  ],\n```\n\n## Build the JSON editor\n\nImport the following dependencies in `src/App.jsx`.\n\n```js\nimport * as React from \"react\";\nimport ReactJson from \"react-json-view\";\nimport \"./App.css\";\nimport {\n  useReplit,\n  useReplitEffect,\n  useWatchTextFile,\n} from \"@replit/extensions-react\";\n```\n\nRemove all the existing code from the `App` function and a state variable `path`, which will point to the JSON file your Extension will render.\n\n```js\nfunction App() {","metadata":{"id":193}}],["194",{"pageContent":"```\n\nRemove all the existing code from the `App` function and a state variable `path`, which will point to the JSON file your Extension will render.\n\n```js\nfunction App() {\n  const [path, setPath] = React.useState(null);\n\n  return <div>My app</div>;\n}\n```\n\n### Initialize the Handshake\n\nInitialize the handshake and derive the `status` and `error` properties from the [`useReplit hook`](/extensions/development/react/hooks/useReplit) within the `App` function.\n\nThe `status` property is an enumerated value indicating whether the handshake connection with Replit is `loading`, `ready`, or has resulted in an `error`.\n\n```js\nfunction App() {\n  ...\n\n  const { status, error } = useReplit();\n\n  ...\n}\n```\n\n### Get the File Path\n\nUse the [`useReplitEffect`](/extensions/development/react/hooks/useReplitEffect) hook and set the `path` state to the `extensionPort`'s file path. This will set the `path` state once the handshake between Replit and your Extension has been established.\n\n```js\nuseReplitEffect(async ({ extensionPort }) => {\n  const filePath = await extensionPort.filePath;\n\n  setPath(filePath);\n}, []);\n```\n\n### Create the File Watcher\n\nYou can easily create a file watcher with the [`useWatchTextFile`](/extensions/development/react/hooks/useWatchTextFile) hook. Call the hook, pass in the file path, and derive `content` and `writeChange` from it.\n\n```js\nconst { content, writeChange } = useWatchTextFile({\n  filePath: path,\n});\n```\n\n### Reflecting file contents\n\nCreate a `parsedContent` [React Memo](https://react.dev/reference/react/useMemo) that returns the `content` file value as parsed JSON. If there is an error parsing it, return `null` instead.\n\nThe [React useMemo hook](https://react.dev/reference/react/useMemo) caches a result based on an array of dependencies between re-renders to improve performance. Caching reduces the amount of computing required in a process, ultimately improving performance.\n\n```js\nconst parsedContent = React.useMemo(() => {\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    return null;\n  }","metadata":{"id":194}}],["195",{"pageContent":"```js\nconst parsedContent = React.useMemo(() => {\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    return null;\n  }\n}, [content]);\n```\n\n### Handle file changes\n\nCreate a function which handles changes from the [react-json-view](https://www.npmjs.com/package/react-json-view) editor component. The `updated_src` property passed into this function is a JSON object.\n\nStringify the JSON object and then write it to the JSON file using the `writeChange` function.\n\nFinally, update the `setContent` state to reflect the contents of the file.\n\n```js\nconst handleChange = async ({ updated_src: newContent }) => {\n  const stringified = JSON.stringify(newContent, null, 2);\n\n  writeChange({\n    from: 0,\n    to: content.length,\n    insert: stringified,\n  });\n};\n```\n\n### Build the UI\n\nIt's time to start building the UI.\n\nFirst, handle loading and error states.\n\n```js\nfunction App() {\n  ...\n\n  if (status === \"error\") {\n    return <main>\n      <div className=\"notice error\">{error.toString()}</div>\n    </main>\n  }\n  else if (status === \"loading\") {\n    return <main>\n      <div className=\"notice\">Loading...</div>\n    </main>\n  }\n  else if (status === \"ready\") {\n    return <main>Ready</main>\n  }\n}\n```\n\n[Install the Extension](/extensions#development-installation) by opening up the Command Bar (**cmd**/**ctrl** + k), navigating to **Extensions**, and selecting **From this Repl**. The extension should load and display \"Ready\" almost instantly.\n\nIf you open the webview, your extension should load for a few seconds and fail. Extensions should be developed and used within the correct pane rather than the webview.\n\n![Loading state](https://docimg.replit.com/extensions/examples/json-editor/load-nocss.png)\n\n![Error state](https://docimg.replit.com/extensions/examples/json-editor/error-nocss.png)\n\nIf both `path` and `content` are valid strings, render the editor. If not, tell the user to select a file.\n\n```js\nelse if (status === \"ready\") {\n  return <main>\n    {path && content ?\n      <ReactJson","metadata":{"id":195}}],["196",{"pageContent":"If both `path` and `content` are valid strings, render the editor. If not, tell the user to select a file.\n\n```js\nelse if (status === \"ready\") {\n  return <main>\n    {path && content ?\n      <ReactJson\n        style={{ width: '100vw', height: \"100vh\", padding: \"1em\" }}\n        theme=\"ocean\"\n        displayDataTypes={false}\n        src={parsedContent}\n        onEdit={handleChange}\n        onAdd={handleChange}\n        onDelete={handleChange}\n      /> :\n      <div className=\"notice\">\n        Please select a file\n      </div>\n    }\n  </main>\n}\n```\n\nThat's it. Now install and load your Extension, and it should work.\n\n![Select a file](https://docimg.replit.com/extensions/examples/json-editor/file-select-nocss.png)\n\n![Editor without CSS](https://docimg.replit.com/extensions/examples/json-editor/editor-nocss.png)\n\n### Style your Extension\n\nRight now, the Extension has barely any styles applied to it. To make it look more polished, paste the following into `App.css`:\n\n```css\nhtml,\nbody {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  font-family: sans-serif;\n  background: black;\n  color: white;\n}\n\n#root,\nmain {\n  flex-grow: 1;\n  display: flex;\n  width: 100%;\n}\n\n.notice {\n  flex-grow: 1;\n  align-self: center;\n  justify-self: center;\n  text-align: center;\n  color: white;\n  font-size: 24px;\n}\n```\n\n---\n\nYour Extension is now complete! [Install it](/extensions#installanextension), press the kebab menu on a JSON file in the file tree and then select \"Open with JSON Editor\" to start editing your JSON files with ease.\n\n[See full solution](https://replit.com/@IroncladDev/JSON-editor-example?v=1).\n\n<video controls src=\"https://docimg.replit.com/extensions/videos/json-editor.mp4\"/>\n\n<iframe src=\"https://replit.com/@IroncladDev/JSON-editor-example?embed=true\" height=\"600\"/>","metadata":{"id":196}}],["197",{"pageContent":"---\ntitle: Snippet Manager\n---\n# Create a Snippet Manager\n\nIn this tutorial, we will build a snippet manager extension with React. A snippet manager is a tool used for storing and organizing commonly used pieces of code or text that can be quickly accessed.\n\n## Prequisites\n\nThis tutorial assumes that you have a basic knowledge and understanding of web development and React.\n\n## Set up your Repl\n\n1. Fork the [Replit React Extension Template](https://replit.com/@replit/React-Extension?v=1).\n2. Install the `react-feather` package with `npm install react-feather`.\n\n## Configure the manifest file\n\nConfigure the title and description in `public/extension.json` (the Extension [manifest file](/extensions/api/manifest)).\n\n```json\n{\n  \"name\": \"Snippet Manager\",\n  \"description\": \"Easily access snippets of code directly within the Replit workspace\",\n  \"version\": \"0\",\n  \"tags\": [\"snippet\", \"manager\", \"tool\"]\n}\n```\n\nAdd the `tools` property to `extension.json` and provide a tool that handles the `/` route of your application. This will allow your extension to appear as a tool in the sidebar.\n\n```json\n\"tools\": [\n  {\n    \"handler\": \"/\",\n    \"name\": \"Snippet Manager\"\n  }\n]\n```\n\n## Build the Snippet Manager\n\nImport the following dependencies in `src/App.jsx`\n\n```js\nimport { useReplit, useReplitEffect } from \"@replit/extensions-react\";\nimport { replDb } from \"@replit/extensions\";\nimport { useState } from \"react\";\nimport \"./App.css\";\n```\n\nRemove all the existing code from the `App` function and add state variables `snippets` and `newSnippetValue`. `snippets` will store all of the snippets you've created and `newSnippetValue` will be a string for when you create a new snippet.\n\n```jsx\nfunction App() {\n  const [snippets, setSnippets] = useState([]);\n  const [newSnippetValue, setNewSnippetValue] = useState(\"\");\n\n  return (\n    <main>\n      <h1>Snippet Manager</h1>\n    </main>\n  );\n}\n```\n\n### Initialize the Handshake","metadata":{"id":197}}],["198",{"pageContent":"const [newSnippetValue, setNewSnippetValue] = useState(\"\");\n\n  return (\n    <main>\n      <h1>Snippet Manager</h1>\n    </main>\n  );\n}\n```\n\n### Initialize the Handshake\n\nInitialize the handshake and derive the `status` and `error` properties from the [`useReplit hook`](/extensions/development/react/hooks/useReplit) within the `App` function.\n\nThe `status` property is an enumerated value indicating whether the handshake connection with Replit is `loading`, `ready`, or has resulted in an `error`.\n\n```js\nfunction App() {\n  ...\n  const { status, error } = useReplit();\n  ...\n}\n```\n\n### Handle Handshake Statuses\n\nHandle the `loading` and `error` statuses from the `useReplit` hook. If the Extension is neither loading nor has resulted in an error, the main content will be rendered.\n\n```jsx\nfunction App() {\n  ...\n\n  if(status === 'error') {\n    return <div className=\"screen\">\n      <h2>Error: {error.message}</h2>\n    </div>\n  }\n\n  if(status === 'loading') {\n    return <div className=\"screen\">\n      <h2>Loading...</h2>\n    </div>\n  }\n\n  return <main>\n    <h1>Snippet Manager</h1>\n  </main>\n}\n```\n\nPaste the following CSS code into `src/App.css` to apply basic styling to your exstension. If you refresh the extension, the snippets you've added will be saved.\n\n```css\nbody {\n  background-color: rgb(40, 40, 40);\n  color: white;\n  margin: 0;\n  font-family: sans-serif;\n}\n\nmain {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n}\n\nmain h1 {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.screen {\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n```\n\n### Snippet Creation\n\nCreate an empty function `insertSnippet` within the `App` function.\n\n```js\nconst insertSnippet = () => {};\n```\n\nAdd the following JSX code into the `App` function after the `h1` tag. This will be a basic form to create a new snippet.\n\n```jsx\n<div className=\"create-snippet-form\">\n  <textarea\n    placeholder=\"Enter a new snippet here...\"\n    value={newSnippetValue}\n    onChange={(e) => setNewSnippetValue(e.target.value)}\n  ></textarea>\n  <div>","metadata":{"id":198}}],["199",{"pageContent":"<div className=\"create-snippet-form\">\n  <textarea\n    placeholder=\"Enter a new snippet here...\"\n    value={newSnippetValue}\n    onChange={(e) => setNewSnippetValue(e.target.value)}\n  ></textarea>\n  <div>\n    <button onClick={insertSnippet}>Add Snippet</button>\n  </div>\n</div>\n```\n\nDefine an asynchronous function `updateSnippets` in `App`. This will allow us to update the `snippets` state variable and save it using the [replDb module](/extensions/api/replDb) at the same time.\n\n**Note**: Values saved to a Repl's database get automatically URI-decoded so encoding has to happen twice. Repl Databases can only store key-values as strings. [Read More](/hosting/databases/replit-database).\n\n```js\nconst updateSnippets = async (snippetsArr) => {\n  setSnippets(snippetsArr);\n  await replDb.set({\n    key: \"snippets\",\n    value: encodeURIComponent(snippetsArr.map(encodeURIComponent).join(\",\")),\n  });\n};\n```\n\nBack in the `insertSnippet` function, use the `updateSnippets` function to insert and save `newSnippetValue` to the list of snippets.\n\n```js\nconst insertSnippet = () => {\n  updateSnippets([...snippets, newSnippetValue]);\n  setNewSnippetValue(\"\");\n};\n```\n\nAdd the following CSS code into `src/App.css` to style the snippet creation form:\n\n```css\n.create-snippet-form {\n  display: flex;\n}\n\n.create-snippet-form textarea {\n  flex-grow: 1;\n  margin-right: 8px;\n}\n\ntextarea,\nbutton {\n  padding: 8px;\n  background-color: rgb(90, 90, 90);\n  border-radius: 8px;\n  border: none;\n  color: white;\n  outline: none;\n}\n\ntextarea:focus,\ntextarea:hover {\n  border: none;\n  outline: none;\n  box-shadow: 0 0 0 2px #3273dc;\n}\n\ntextarea::placeholder {\n  color: rgb(200, 200, 200);\n}\n\nbutton {\n  cursor: pointer;\n}\n\nbutton:focus,\nbutton:hover {\n  outline: none;\n  background-color: #3273dc;\n}\n```\n\n### Load and list the snippets\n\nDefine an asynchronous function `loadSnippets` in `App`. This function will fetch all the snippets from the Replit database and update the `snippets` state variable.\n\n```jsx\nconst loadSnippets = async () => {\n  const snippetsFromDB = await replDb.get({","metadata":{"id":199}}],["200",{"pageContent":"```jsx\nconst loadSnippets = async () => {\n  const snippetsFromDB = await replDb.get({\n    key: \"snippets\",\n  });\n\n  if (snippetsFromDB) {\n    setSnippets(snippetsFromDB.split(\",\").map(decodeURIComponent));\n  }\n};\n```\n\nCall the [`useReplitEffect` hook](/extensions/development/react/hooks/useReplitEffect) to run the `loadSnippets` function once, when Replit successfully connects to your Extension.\n\n```js\nuseReplitEffect(() => loadSnippets(), []);\n```\n\nAdd the following code to the main UI after the `.create-snippet-form` element. Display each snippet as a paragraph from the `snippet` state variable.\n\n```jsx\n<div className=\"snippet-list\">\n  {snippets.map((snippet, index) => (\n    <p key={index}>{snippet}</p>\n  ))}\n</div>\n```\n\n[Install your extension](/extensions#installanextension), start creating some snippets, watch as they appear in realtime.\n\n### The Snippet Component\n\nYou will be able to copy, edit, and delete snippets from the `Snippet` component with the click of a button.\n\nCreate a file `src/components/Snippet.jsx` and import the following dependencies:\n\n```js\nimport { messages } from \"@replit/extensions\";\nimport { Copy, Edit2, Trash } from \"react-feather\";\nimport { useState, useEffect } from \"react\";\n```\n\nCreate and export the `Snippet` component. The props declared in this component are as follows:\n\n- `content` is the value of the snippet\n- `index` is a number signifying the index of the snippet\n- `snippets` is a full list of all the snippets in the database\n- `updateSnippets` is the asynchronous function passed down from the `App` component\n\nAdd two state variables `isEditing` and `value`. `isEditing` indicates whether the snippet is being edited and `value` is the new value which will be used when editing the snippet, before it is saved.\n\n```jsx\nexport const Snippet = ({ content, index, snippets, updateSnippets }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [value, setValue] = useState(content);\n\n  return <div>Snippet Component</div>;\n};\n```","metadata":{"id":200}}],["201",{"pageContent":"const [isEditing, setIsEditing] = useState(false);\n  const [value, setValue] = useState(content);\n\n  return <div>Snippet Component</div>;\n};\n```\n\nAdd a useEffect hook to set `value` to `content` whenever `content` updates. The prop will change when snippets get edited and deleted.\n\n```js\nuseEffect(() => setValue(content), [content]);\n```\n\nCreate a function `copyToClipboard`. Handle the asynchronous clipboard event with the `.then()` and `.catch()` methods. Use the [`messages` module](/extensions/api/messages) to display whether the action was successful or not.\n\n```js\nconst copyToClipboard = () => {\n  window.navigator.clipboard\n    .writeText(content)\n    .then(async () => await messages.showConfirm(\"Copied to clipboard\"))\n    .catch(async (e) => await messages.showError(e.message));\n};\n```\n\nDefine a function `saveEdit`. This will update the current snippet to reflect the `value` state variable and save it to the database.\n\n```js\nconst saveEdit = async () => {\n  const snippetsArr = [...snippets];\n  snippetsArr[index] = value;\n\n  await updateSnippets(snippetsArr);\n  setIsEditing(false);\n};\n```\n\nAdd a function `deleteSnippet`. After it is confirmed that the user wants to delete the snippet, remove the snippet from both the application state and the database.\n\n```js\nconst deleteSnippet = async () => {\n  const shouldDelete = confirm(\"Are you sure you want to delete this snippet?\");\n\n  if (shouldDelete) {\n    const snippetsArr = [...snippets];\n    snippetsArr.splice(index, 1);\n\n    await updateSnippets(snippetsArr);\n    await messages.showConfirm(\"Snippet Deleted\");\n  }\n};\n```\n\nComplete the UI of the `Snippet` component with the following JSX code. If the snippet is being edited, a different component will be shown.\n\n```jsx\nreturn isEditing ? (\n  <div className=\"snippet edit\">\n    <textarea value={value} onChange={(e) => setValue(e.target.value)} />\n    <div className=\"snippet-button-row\">\n      <button onClick={() => setIsEditing(false)}>Cancel</button>\n      <button onClick={saveEdit}>Save</button>\n    </div>\n  </div>\n) : (","metadata":{"id":201}}],["202",{"pageContent":"<div className=\"snippet-button-row\">\n      <button onClick={() => setIsEditing(false)}>Cancel</button>\n      <button onClick={saveEdit}>Save</button>\n    </div>\n  </div>\n) : (\n  <div className=\"snippet\">\n    <p>{content}</p>\n\n    <div className=\"snippet-buttons\">\n      <button onClick={copyToClipboard}>\n        <Copy />\n      </button>\n\n      <button onClick={() => setIsEditing(true)}>\n        <Edit2 />\n      </button>\n\n      <button onClick={deleteSnippet}>\n        <Trash />\n      </button>\n    </div>\n  </div>\n);\n```\n\nApply the following CSS to `src/App.css`:\n\n```css\n.snippet {\n  padding: 8px;\n  background: rgb(70, 70, 70);\n  margin-bottom: 8px;\n  display: flex;\n  padding: 8px;\n  border-radius: 8px;\n}\n\n.snippet p {\n  flex-grow: 1;\n  margin: 0;\n  padding: 0;\n}\n\n.snippet-buttons {\n  display: flex;\n}\n\n.snippet-buttons button {\n  margin-left: 8px;\n}\n\n.edit {\n  flex-direction: column;\n}\n\n.edit textarea {\n  margin-bottom: 8px;\n}\n\n.edit .snippet-button-row button {\n  margin-right: 8px;\n}\n```\n\n### Display the snippets\n\nIn `App.jsx`, import the `Snippet` component.\n\n```js\nimport { Snippet } from \"./components/Snippet\";\n```\n\nUpdate the `.snippet-list` div to render the new component.\n\n```js\nsnippets.map((snippet, index) => (\n  <Snippet\n    key={index}\n    content={snippet}\n    snippets={snippets}\n    updateSnippets={updateSnippets}\n    index={index}\n  />\n));\n```\n\nFinally, style the snippet list with the following CSS:\n\n```css\n.snippet-list {\n  flex-direction: column;\n  display: flex;\n  margin-top: 8px;\n}\n```\n\n---\n\nThe Snippet Manager extension is now complete! [Install it](/extensions#installanextension), open the Tools section on the sidebar, and select the Snippet Manager extension. You can now easily save and access your favorite snippets directly within your Repl.\n\n[See full solution](https://replit.com/@IroncladDev/Snippet-Manager)\n\n<video controls src=\"https://docimg.replit.com/extensions/videos/snippet-manager.mp4\"/>\n\n<iframe src=\"https://replit.com/@IroncladDev/Snippet-Manager?embed=true\" height=\"600\"/>","metadata":{"id":202}}],["203",{"pageContent":"---\ntitle: Javascript Commands\n---\n\n# Create a Javascript Commands extension\n\nIn this tutorial, we will create an extension that adds JavaScript related commands to the Replit workspace. This includes commands for searching, installing, and uninstalling npm packages, and running scripts\n\n<video controls width=\"80%\" loop src=\"https://docimg.replit.com/extensions/videos/js-commands.mp4\" type=\"video/mp4\" />\n\n## Introduction\n\nThis tutorial assumes that you have basic web development knowledge, some familiarity with Replit, and familiarity with the Command system.\n\nIn a gist, we will fork an extension template, add a background script, and in that background script, write code that adds Commands to to the Replit workspace. Our command can be thought of as a simple tree. There's a root command called \"JavaScript tools\". It returns three subcommands:\n\n- \"Install\": This command lets you search the npm registry for packages to install, based on what you've typed. Selecting a package opens a new shell and invokes `npm install <package name>`\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/js-install.png\" />\n\n- \"Scripts\": This command displays scripts in your package.json file. Selecting the script opens a new shell and invokes that command.\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/js-scripts.png\" />\n\n- \"Uninstall\": This returns all your installed packages. Selecting a package uninstalls it\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/js-uninstall.png\" />\n\n## Setting up your extension repl\n\nThe first thing you want to do is fork an extension template. We recommend using the [React Extension Template](https://replit.com/@replit/React-Extension?v=1). although we are not going to write any react code in this tutorial.","metadata":{"id":203}}],["204",{"pageContent":"Add a background script to your extension. You can scaffold a background script by typing in `replkit add background` in the shell. This creates a new folder `src/background`. The `src/background/main.tsx` file here is where we'll be writing our code.\n\n## Adding a root command\n\nLet's add a simple root command to the command bar to contain our subcommands.\n\n```typescript\nasync function main() {\n  await replit.commands.add({\n    id: \"js-commands\",\n    contributions: [replit.ContributionType.CommandBar],\n    command: {\n      label: \"JS\",\n      description: \"JavaScript Commands\",\n      icon: \"js.png\",\n      commands: async () => {\n        // This is where subcomands go:\n        return [];\n      },\n    },\n  });\n}\n\nmain();\n```\n\nThis adds an empty 'context' command, AKA a command that contains other sub-commands. This is what it looks like:\n\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/empty-cmd.png\" />\n\nNote: to make the icon work, you can download the icon [here](https://docimg.replit.com/extensions/icons/js.png) and paste it in your `/public` folder as `js.png`. \n\n\n## Building \"Uninstall\"\n\nLet's start with Uninstall. This command first figures out what packages you have installed, and then runs `npm uninstall ${package}`\n\nThe simplest way to figure out what you have installed is by parsing `package.json`, and looking at the dependencies object. Since this tutorial is focused on commands, here's the code that reads `package.json` and returns an array of installed packages:\n\n```typescript\nasync function getPackageJson() {\n  // This uses replit's filesystem API to read the package.json file. The command returns an object containing `content` as a string, or an `error` field if something went wrong\n  const res = await replit.fs.readFile(\"package.json\");\n\n  if (res.error) return { error: res.error, result: null };\n\n  try {\n    let packageJsonObject = JSON.parse(res.content);\n    return { error: null, result: packageJsonObject };\n  } catch (e) {\n    return {","metadata":{"id":204}}],["205",{"pageContent":"if (res.error) return { error: res.error, result: null };\n\n  try {\n    let packageJsonObject = JSON.parse(res.content);\n    return { error: null, result: packageJsonObject };\n  } catch (e) {\n    return {\n      error: new Error(\"Failed to parse package.json: \" + e.message),\n      result: null,\n    };\n  }\n}\n\nasync function getInstalledPackages() {\n  const packageJsonRes = await getPackageJson();\n\n  if (packageJsonRes.error) return packageJsonRes;\n\n  // This returns an array of { name, version } objects\n  const packages = Object.entries(packageJsonRes.result.dependencies).map(([name, version]) => ({\n    name,\n    version,\n  }));\n\n  return {\n    error: null,\n    result: packages,\n  }\n}\n```\n\nArmed with these functions, we can build the uninstall subcommand. The subcommand returns a list of action commands, one per package. \n\n```typescript\nconst uninstallCommand = {\n  label: \"Uninstall\",\n  description: \"Uninstall npm packages\",\n  commands: async () => {\n    const packagesRes = await getInstalledPackages();\n\n    if (packagesRes.error) {\n      return null;\n    }\n\n    return packagesRes.result.map(({ name, version }) => {\n      return {\n        label: name,\n        description: version,\n        run: async () => {\n          await replit.exec.exec(`npm uninstall ${name}`);\n        },\n      };\n    });\n  },\n};\n```\n\nTo add this command to our root command, simply include `uninstallCommand` as one of the commands returned by the root command:\n\n```typescript\n    {\n      commands: async () => {\n        // This is where subcomands go:\n        return [\n            uninstallCommand,\n        ];\n      },\n    }\n```\n\nThis is what it looks like in our JavaScript command now:\n\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/uninstall-root.png\" />\n\nAs you can see, the uninstall command lists installed npm packages that you can uninstall\n\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/uninstall-pkgs.png\" />\n\n\n\n## Building \"Scripts\"","metadata":{"id":205}}],["206",{"pageContent":"<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/uninstall-pkgs.png\" />\n\n\n\n## Building \"Scripts\"\n\n\"Scripts\" is very similar to uninstall, except that we need to surface the output from the script. For this, we use an experimental API called execInShell.\n\nOther than that, we can reuse most of the code from \"Uninstall\"\n\n\n```typescript\nasync function getScripts() {\n  const packageJsonRes = await getPackageJson();\n\n  if (packageJsonRes.error) return packageJsonRes;\n\n  // This returns an array of { name, version } objects\n  const scripts = Object.entries(packageJsonRes.result.scripts).map(\n    ([name, cmd]) => ({\n      name,\n      cmd,\n    }),\n  );\n\n  return {\n    error: null,\n    result: scripts,\n  };\n}\n\nconst scriptsCommand = {\n  label: \"Scripts\",\n  description: \"Run scripts in your package.json\",\n  commands: async () => {\n    const scriptsRes = await getScripts();\n\n    if (scriptsRes.error) {\n      return null;\n    }\n\n    return scriptsRes.result.map(({ name, cmd }) => {\n      return {\n        label: name,\n        description: cmd,\n        run: async () => {\n          await replit.experimental.execInShell(`npm run ${name}`);\n        },\n      };\n    });\n  },\n};\n```\n\nLet's add the scripts command to our root command!\n\n```typescript\n    {\n      commands: async () => {\n        // This is where subcomands go:\n        return [\n            scriptsCommand,\n            uninstallCommand,\n        ];\n      },\n    }\n```\n\nHere's our command!\n\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/scripts-root.png\" />\n\n\n\n## Building \"Install\"\n\n\"Install\" is somewhat different: we are pulling external data from the npm registry in response to the user typing in a search query. And we only want to explicitly trigger this search when the user has indicated that they want to search for npm packages to install\n\n\n```typescript\nasync function getNpmPackages(search) {\n  try {\n    const res = await fetch(\n      `https://registry.npmjs.org/-/v1/search?text=${search}`,\n    );\n    const json = await res.json();","metadata":{"id":206}}],["207",{"pageContent":"```typescript\nasync function getNpmPackages(search) {\n  try {\n    const res = await fetch(\n      `https://registry.npmjs.org/-/v1/search?text=${search}`,\n    );\n    const json = await res.json();\n\n    return { error: null, result: json.objects };\n  } catch (e) {\n    return { error: e, result: null };\n  }\n}\n\nconst installCommand = {\n  label: \"Install\",\n  description: \"Install a package from npm\",\n  commands: async ({ search, active }) => {\n    // This makes sure we do not perform a search unless someone selects \"Install\"\n    if (!active) {\n      return;\n    }\n\n    const packagesRes = await getNpmPackages();\n\n    if (packagesRes.error) {\n      return null;\n    }\n\n    return packagesRes.result.map((pkg) => {\n      return {\n        label: pkg.package.name,\n        description: pkg.package.description,\n        run: async () => {\n          await replit.experimental.execInShell(`npm i ${pkg.package.name}`);\n        },\n      };\n    });\n  },\n};\n```\n\nNotice the `search` and `active` parameters?\n\n- `active` is `true` when users have selected the \"Install\" command (as opposed to the command system merely querying for subcommands in advance). We can check for it to make sure that we only query npm when we know that a user is interested in installing an extension.\n- `search` returns what the user has typed into the command bar, which we use for searching the npm registry\n\nThis means that extensions can decide which scripts are directly accessible from the root CommandBar. For example, the scripts extension can let users search and trigger scripts immediately after opening the CommandBar:\n\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/scripts-directly-accessible.png\" />\n\nWe are ready to add \"Install\" to the root command! This is what our root command object looks like now:\n\n```typescript\n  await replit.commands.add({\n    id: \"js-commands\",\n    contributions: [replit.ContributionType.CommandBar],\n    command: {\n      label: \"JS\",\n      description: \"JavaScript Commands\",\n      commands: async () => {","metadata":{"id":207}}],["208",{"pageContent":"id: \"js-commands\",\n    contributions: [replit.ContributionType.CommandBar],\n    command: {\n      label: \"JS\",\n      description: \"JavaScript Commands\",\n      commands: async () => {\n        // This is where subcomands go:\n        return [\n            installCommand,\n            scriptsCommand,\n            uninstallCommand,\n        ];\n      },\n    },\n  });\n```\n\nOpen the command bar, type in \"Install\", select your new command, and give it a try!\n\n<img width=\"50%\" src=\"https://docimg.replit.com/extensions/examples/js-commands/install-react.png\" />\n\n## Exercises left to the reader\n\nWe built a basic version of the Javascript commands extension. This could be improved quite a bit:\n\n- Did you notice that we only use `npm` in all the examples? JavaScript ecosystem has a plethora of package managers, including yarn, pnpm, and bun. How can we support all of them? And can we do it \"magically\" where someone using this extension doesn't have to manually select their package manager in our command? (Hint: it involves the lockfiles)\n\n- We can probably cache the npm registry fetch call, so when you backspace through any letters, the results for that search query appear instantly. \n\n- We can debounce npm search requests to prevent hitting npmjs.com excessively while you're typing out the package you're looking for. \n\n- What happens if someone uses this command in a repl that isn't a Javascript project? We can probably check for the presence of `package.json` before showing the command. And maybe, if someone doesn't have a `package.json` yet, we can instead show a command to `npm init` their project!\n\n\nIf you just want to look at the solution, see the JavaScript commands extension on the store:\n- Here's the link to the [extension](https://replit.com/extension/@ArnavBansal/adccbcd2-c9d6-4778-b0cb-20e1bf289634)\n- Here's a link to the extension's [source repl](https://replit.com/@ArnavBansal/js-commands-extension?v=1)","metadata":{"id":208}}],["209",{"pageContent":"# Introduction to Replit\n\nReplit provides a large range of tools and features necessary for software development. It serves as an IDE, a code collaboration platform, a cloud provider, a developer community, and so much more.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D4f7_lPwXtE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n## Start Here\n\nGet started by [Creating a Replit Account](https://replit.com/signup).\n\n### [Key Terms](/getting-started/key-terms)\n\nLearn the basic key terms used in the documentation and across the site to get a better understanding of Replit.\n\n### [Introduction to the Workspace](/programming-ide/introduction-to-the-workspace)\n\nLearn about the features and abilities the Replit Workspace is capable of, and how you can get started coding in seconds.\n\n### [Power Ups](/category/power-ups)\n\nIncrease the power of your Repls and learn how to improve your coding experience with [Replit AI](https://replit.com/ai), Replit's AI Pair Programmer.\n\n### [Hosting](/category/hosting)\n\nDeploy anything from a cloud database to a production-level application in a matter of minutes.\n\n### [Bounties](/category/bounties)\n\nFind a top creator to get a job done for you, or get started freelancing.\n\n### [Tutorials](/tutorials/overview)\n\nLearn how to build over fifty different projects all within Replit.\n\n## Replit for Teachers\n\n### [Teams for Education](/teams-edu/intro-teams-education)\n\nCreate and set up your team in minutes and get your hands on extra curriculum and teacher resources.\n\n### [Threads and Feedback](/teams-edu/reviewing-submissions#leaving-feedback-on-projects-using-annotations)\n\nLeave comments on your students' code, or let them peer review each other, using in-line discussion threads.\n\n### [Automatic Testing and Grading](/teams-edu/testing-assessments-autograding)\n\nUse Unit Testing to test and grade students' submissions.","metadata":{"id":209}}],["210",{"pageContent":"### [Automatic Testing and Grading](/teams-edu/testing-assessments-autograding)\n\nUse Unit Testing to test and grade students' submissions.\n\n### [Comply with Local Privacy Regulations](/teams-edu/privacy-faq)\n\nWe will help you keep your students and their work safe online, while complying with various privacy laws and regulations such as FERPA, COPPA, GDPR, CCPA, and many others.\n\n### [Firewall Mode](/getting-started/firewalled-replit)\n\nPrevent students from using Web Proxies to bypass internet filters.\n\n## Help\n\n### [Ask Forum](https://ask.replit.com)\n\nThe Ask Forum is the perfect place to get help on your code, report bugs, and request features.\n\n### [Contact Support](https://replit.com/support)\n\nGet in touch with Replit's Support Team for any account/billing-related issues.\n\n### [Legal & Security Info](/category/legal-and-security-info)\n\nLegal and Security information and guides for reporting users and what is/isn't allowed on the platform.","metadata":{"id":210}}],["211",{"pageContent":"# Key Terms\n\n## Basics\n\n### Replit\n\nThe entire Replit platform & product.\n\n### Repl\n\nRefers to a single environment, or project that a user or [Team](#team--organization) owns. A Repl is a [Virtual Machine](#virtual-machine--vm) (VM) that runs in the cloud.\n\n### Template\n\nA pre-configured [Repl](#repl) with existing code and configuration that can be forked as a boilerplate for another project. See the [templates page](https://replit.com/templates) for some examples.\n\n### Theme\n\nRefers to a site-wide color scheme that can be created or installed from the [Custom Theme Explorer](https://replit.com/themes).\n\n### [Mobile App](https://replit.com/mobile)\n\nThe official [Replit Mobile App](https://replit.com/mobile). Provides a seamless coding experience for users on touchscreen devices.\n\n## Workspace\n\nThe workspace is the environment where a user interacts with and edits a Repl.\n\n### Sidebar\n\nCan refer to the global navigation bar, or the sidebar in the Workspace. The sidebar in the Replit Workspace contains the [File Tree](#file-tree), the [Tools Section](#tools), and the Repl's [Resources](#resources).\n\n### File Tree\n\nA list of files and folders, located within the [Sidebar](#sidebar).\n\n### Tools\n\nA grid of [Tools](#tool) and [Extensions](#extension), located within the [Sidebar](#sidebar).\n\n### Resources\n\nA realtime set of metrics used to measure and display the resources of your Repl's [Virtual Machine](#virtual-machine--vm) such as CPU, RAM, and Storage.\n\n### Tool\n\nAn independent user interface as a [Tab](#tab) in the Workspace, such as the Packager, Console, or Shell.\n\n### Extension\n\nA custom user interface rendered in a Workspace [Tab](#tab).\n\n### Tab\n\nA single [Tool](#tool), file, or [Extension](#extension) within a [Pane](#pane).\n\n![Tab](https://docimg.replit.com/extensions/tab.png)\n\n### Pane / Split\n\nA group of [Tabs](#tab) within the Workspace.\n\n![Pane](https://docimg.replit.com/extensions/pane.png)\n\n## Powerups & Cycles\n\nA Powerup is a feature that is available via a paid plan, or purchasable by [Cycles](#cycles).","metadata":{"id":211}}],["212",{"pageContent":"![Pane](https://docimg.replit.com/extensions/pane.png)\n\n## Powerups & Cycles\n\nA Powerup is a feature that is available via a paid plan, or purchasable by [Cycles](#cycles).\n\n### [Cycles](https://replit.com/cycles)\n\nRefers to [Replit's virtual currency](/cycles/about-cycles). Can be used to post a [Bounty](#bounty), purchase [Powerups](/category/power-ups), and purchase [Deployments](/category/deployments).\n\n### [Replit AI](https://replit.com/ai)\n\nReplit's [AI Pair Programmer](/power-ups/replitai/getting-started).\n\n### Always-On\n\nA [Powerup](#powerups--cycles) that keeps a [Repl](#repl) awake even after interactivity ceases.\n\n### Boost\n\nA [Powerup](#powerups--cycles) that provides a [Repl](#repl) with increased processing power and performance (CPU and RAM).\n\n### Private Repl\n\nA Repl visible only to a single User/Team and its [Multiplayers](#multiplayer).\n\n### [Bounty](https://replit.com/site/bounties)\n\nA freelance listing for an amount of [Cycles](#cycles). Can be worked on by a [Bounty Hunter](/bounties/bounty-hunting).\n\n### Tip\n\nAn amount of [Cycles](#cycles) given by a user to a content creator on Replit. [Learn More](/cycles/tipping).\n\n### SSH\n\nA [Powerup](#powerups--cycles) that enables users to connect to a [Repl](#repl) remotely through [Secure Shell](https://en.wikipedia.org/wiki/Secure_Shell).\n\n## Hosting\n\n### Deployment\n\nAn immutable [snapshot of a Repl](/hosting/deployments/about-deployments), hosted in the cloud.\n\n### [ReplDB](/hosting/databases/replit-database)\n\nA simple key-value store inside of a [Repl](#repl).\n\n### [Status Manager](/hosting/status-manager)\n\nShows which Repls are running, which are inactive, and which are [Always-On](#always-on).\n\n## Teams & Multiplayer\n\n### Multiplayer\n\nA single user who has been [invited](#invite) to edit a user or team [Repl](#repl).\n\n### Multiplayer Repl\n\nA [Repl](#repl) owned by a user that has one or more [Multiplayers](#multiplayer) in it.\n\n### Invite","metadata":{"id":212}}],["213",{"pageContent":"### Multiplayer Repl\n\nA [Repl](#repl) owned by a user that has one or more [Multiplayers](#multiplayer) in it.\n\n### Invite\n\nCan be an [Invite Link](#invite-link) or a direct invitation request. Upon accepting an invite or navigating to an [Invite Link](#invite-link), a user will be given edit access to the corresponding [Repl](#repl).\n\n### Invite Link\n\nA unique URL that gives a user edit access to a specific [Repl](#repl) upon navigating to the link.\n\n### Admin\n\nA user with Administrative permissions in a [Team](#team--organization).\n\n### Billing Admin\n\nA user who manages Billing in a [Pro Organization](#teams-pro).\n\n### Member\n\nA member in a [Team](#team--organization)\n\n### Guest\n\nA member with custom restricted access in a [Pro Organization](#teams-pro).\n\n### Team / Organization\n\nRefers to a group of users under a particular Team. [Read More](/organizations/roles-and-permissions).\n\n### [Teams Pro](/teams-pro/intro-teams-pro)\n\nA team with a wide range of features including [Power Ups](#powerups--cycles), [Guests](#guest), and more.\n\n### [Teams for Education](/teams-edu/intro-teams-education)\n\nA team that adds key workflows for students and teachers on top of all the core Replit features.\n\n## Community\n\n### [Community Hub](https://replit.com/community-hub)\n\nA centralized place showing where the Replit Community can be located across multiple social platforms.\n\n### [Community Feed](https://replit.com/community/all)\n\nA list of trending [Published Repls](#published-repl), created by users in the Replit Community.\n\n### [Ask Forum](https://ask.replit.com)\n\nA place where users can discuss topics, get help on code, and contact support.\n\n### Following Feed\n\nA list of events emitted from users someone follows, or from top creators.\n\n### Post / Update\n\nAn update on a [Published Repl](#published-repl). A Published Repl can have multiple updates associated with it.\n\n### Comment\n\nA comment posted on a [Repl](#repl) by a user. If comments are disabled or a Repl is private, users cannot post comments.\n\n### Cover Page / Spotlight Page","metadata":{"id":213}}],["214",{"pageContent":"### Comment\n\nA comment posted on a [Repl](#repl) by a user. If comments are disabled or a Repl is private, users cannot post comments.\n\n### Cover Page / Spotlight Page\n\nA page that allows users to run a [Repl](#repl), view and post [Comments](#comment) if enabled, and [Tip](#tip) the creator.\n\n### Publish\n\nRefers to publicly releasing a [Repl](#repl) to the [Community Feed](#community-feed).\n\n### Published Repl\n\nA public Repl that has been [Published](#publish).\n\n## Misc\n\n### [Nix](https://nixos.org/)\n\nNix is a powerful package manager and a functional programming language designed for system configuration management and software deployment.\n\n### Virtual Machine / VM\n\nA machine (computer) hosted in the cloud.","metadata":{"id":214}}],["215",{"pageContent":"import Loom from '../../src/components/Loom'\n\n# Managing your Repls\n\nTo manage and keep track of all your Repls, head to your Repls Dashboard. You can find it on your account by clicking on the \"My Repls\" tab on the left-hand side.\n\nRepls are listed in order of when they were created, with the most recent first. Each Repl has its own three-dot menu at the far right. Bringing up this menu will allow you to:\n\n- Edit the Repl (change its name and description)\n- View its history\n- Fork the Repl\n- Move the Repl\n- Pin it to your profile\n- Delete the Repl\n- Toggle privacy settings (subscribers only)\n\n<Loom id=\"65778d283cbc46d4b63013805cd04f96\"/>\n\n## Public vs Private Repls\n\nAll Repls created are 'public' by default, meaning anyone on Replit may discover and view the source code. We think that [open-source software](https://en.wikipedia.org/wiki/Open-source_software) is a great thing. It allows users to fork, remix, and republish these Repls to the [community](https://replit.com/community/all), where others can engage and comment.\n\nUsers with a [Replit Core membership](https://replit.com/pricing) (previously Hacker or Pro) can make their Repls 'private'. This means that only the creator and anyone they explicitly invite can view the source code.\n\nNote that Private Repls will be inaccessible to other users on Replit if the Repl is hosted, such as HTML, Node.js, or Django Repls. However, the output of those Repls may still be accessible on the internet. If you are hosting sensitive information, we reccomend using a non-hosted Repl to ensure privacy.\n\n## Starring Repls\n\nYou can \"star\" a Repl to mark it as a favorite. This means you can then easily filter your dashboard to show only your starred Repls by clicking on the star slider at the top of your dashboard. There is no limit to how many Repls you can star. Only you can see which Repls you have starred; this info will not appear in your profile.\n\n## Searching\n\n### Basic Search","metadata":{"id":215}}],["216",{"pageContent":"## Searching\n\n### Basic Search\n\nTo search your Repls, click on the search bar. You will be presented with the options \"+ New\" and \"Search\". Click \"Search\" and start typing keywords. This will filter Repls whose title or language match any of the keywords (separated by spaces).\n\nRepls only need to match one of the keywords in order to be included in the results.\n\nExample:\n\n**Search Query:** `draft Repl python3`\n\n**Returns:**\nAll Repls that satisfy one or more of the following conditions:\n\n- has `draft` in the title\n- has `Repl` in the title\n- is a `python3` Repl\n\n### Search by Language\n\nYou can search for Repls in a specific language by using the `language:` filter.\nTyping in `language:` followed by the language you want to filter by will prompt\nyou with language suggestions.\n\nYour search term will need to be the language name we use internally, which is why\nwe suggest selecting from the provided list. For example, to search for all C++11\nlanguages, you would search `language:cpp11`. To search for HTML, CSS, JS Repls,\nyou would search `language:html`. This filter is case sensitive.\n\n### Search by Title\n\nSince plain searches include results with matching languages, you can search within Repl titles only using the `title:` filter. Your search term may not include spaces.\nThis filter is case insensitive.\n\nExample:\n\n**Search Query:** `title:best project`\n\n**Returns:**\nRepls that satisfy one or more of the following conditions:\n\n- has `best` in the title\n- has `project` in the title","metadata":{"id":216}}],["217",{"pageContent":"# FAQ\n\n## General\n\n## Getting help or contacting Support\n\n### Where can I get code-level help?\n\nThe best place to get help with code or using Replit is on our community [Ask Forum](https://ask.replit.com).\n\n### I am having trouble using Replit. How can I get help?\n\nSign in to Replit and use the Help button on the bottom left. Creating a support ticket, as well as links to other options, are be available there.\n\n### Where can I get help with billing?\n\nBefore reaching out to the Support Team, check to see if you can find a solution below under **[Account](#account)**. If that does not help, please sign in and use the Help button on the bottom left.\n\n### I cannot access my Replit account – what should I do?\n\nPlease email support@replit.com being sure to include details like your account name, signin ID, and any other helpful details.\n\n### When will I get a response from Replit?\n\nReplit Support is generally available Monday through Friday from 9am to 8pm Eastern Standard Time (UTC-5).\n\n## Repls\n\n### How do I restore a deleted Repl?\n\nUse the CLUI (command line user interface, [blog](https://blog.replit.com/commandbar)) to access the trash:\n\n1. Go to https://replit.com/~/cli.\n2. Once you get to the terminal, type \"Trash\".\n3. Choose the \"View\" option to see your most recently deleted repls.\n4. Go back to \"Trash\" again and choose \"Restore\" this time, along with the title of the project you want to restore.\n\n### What happens to my Private Repls if I stop using Cycles or run out of Cycles?\n\nYour Repls will remain private but you will not be able to edit the code unless you make the Repl public or subscribe to private Repls again with Cycles.\n\n### Why does my Always On Repl restart sometimes?","metadata":{"id":217}}],["218",{"pageContent":"### Why does my Always On Repl restart sometimes?\n\nAlways On Repls are hosted on shared infrastructure. We move Repls around to different servers to make sure that everyone has a good experience. This means that your Repl will restart every once in a while. If you need a dedicated server, you can look into our dedicated server options for [deployments](/hosting/deployments/about-deployments).\n\n## How do I restore a file in my Repl?\n\nCheck out our docs on the [History tool](/programming-ide/workspace-features/file-history) to learn how you can restore a file.\n\n### Why is my Repl failing to load?\n\nIf your Repl is failing to load, try these debugging steps:\n\n1. Test your [internet connection](https://www.speedtest.net/).\n2. Try a different browser.\n3. Check if your browser has enabled JavaScript.\n4. Use the command `kill 1` in the shell—this will kill and restart the virtual Linux machine backing your Repl.\n\nIf none of the above steps helped, check Replit's [Service Status](https://status.replit.com), if \"all systems are a go,\" and you still have issues loading your Repl, please contact [Replit Support](https://replit.com/support).\n\n## Account\n\n### I'm having trouble logging in, what should I do?\n\n1. Make sure you are using the correct email and password.\n2. Navigate to the [forgot password page](https://replit.com/forgot) to reset your password.  Be sure to check your spam folder for the reset email.\n3. Try logging in through a different browser.\n\nIf all the steps you've tried don't succeed, feel free to [Contact Support](https://replit.com/support)\n\n### How do I change my email if I signed up with Google/Github/Facebook?\n\nWe require a password to change your email on your account. If you signed up with third-party Authentication Provider such as Google or GitHub, you will first need to create a password.\n\nFor step-by-step instructions:\n\n1. Open the sidebar and log out.\n   ![Log out](https://docimg.replit.com/images/getting-started/Log%20Out.jpg)","metadata":{"id":218}}],["219",{"pageContent":"For step-by-step instructions:\n\n1. Open the sidebar and log out.\n   ![Log out](https://docimg.replit.com/images/getting-started/Log%20Out.jpg)\n2. Go back to the login page, click [forgot password](https://replit.com/forgot), and enter your email address.\n   ![Forgot PW](https://docimg.replit.com/images/getting-started/Forgot%20PW.jpg)\n3. You will receive an email with a link to create a new password. If you don't see the email, check your spam folder and allow up to thirty minutes for the email to be sent.\n4. After logging in, navigate to the [account page](https://replit.com/account) to change your email address.\n\n### How do I change my username?\n\nReplit users can change their username only **once**.  Navigate to the [CLUI](https://replit.com/~/cli/account/change-username?run=1) and change your username. If the option is not available to you, this means you've already changed it.\n\n![Change username](https://docimg.replit.com/images/misc/account-change-username.png)\n\n### What is explorer mode / how can I activate it?\n\nExplorers are a segment of Replit Users who have opted into seeing and testing out new features that are still in development.  To enable explorer mode, navigate to the [Account Page](https://replit.com/account#roles) and toggle the switch on.\n\n![Showing toggle on for Explorer in Roles settings](https://docimg.replit.com/images/getting-started/toggle-explorer.png)\n\nIf an early feature for explorers is not working properly, please [Let us know](https://ask.replit.com).  You can turn Explorer mode off at any time.","metadata":{"id":219}}],["220",{"pageContent":"import Loom from '../../src/components/Loom'\n\n# CLUI, the Graphical CLI\n\nCommand Line User Interface, often referred to as the CLUI is an interactive command bar from which you can perform a variety of actions. There are three variations of the CLUI located across Replit: Account, Shortcuts, and Workspace.\n\n## Account\n\nThe Account CLUI allows you to view and manage your account & teams, view warnings you've been issued, restore deleted Repls, and more. Get started by navigating to the [CLUI page](https://replit.com/~/cli). Type in the input to search for a command, and hit Enter to execute it.\n\n![Account CLUI](https://docimg.replit.com/images/getting-started/clui-account.png)\n\n### Command Reference\n\n<details>\n  <summary><strong>account</strong>: Manage your account</summary>\n\n#### `view-warns`\n\nView warnings you have been issued.\n\n#### `change-username`\n\nChange your username (this can only be done once).\n\n</details>\n\n<details>\n  <summary><strong>trash</strong>: List and restore deleted repls</summary>\n\n#### `restore <title>`\n\nRestore a deleted repl by its title. If multiple repls exist with the same name, the most recently deleted repl will be restored.\n\n#### `view`\n\nView your most recently deleted repls.\n\n</details>\n\n<details>\n  <summary><strong>team</strong>: View and manage your teams</summary>\n\n#### `view`\n\nView the members of a team you are in by its username.\n\n#### `fork-repl-to-project`\n\nForks an existing Repl to create a Team Project.\n\n</details>\n\n<details>\n  <summary><strong>clear</strong>: Clears the screen</summary>\n\n#### `clear`\n\nClears the screen of all past commands you've executed.\n\n</details>\n\n## Shortcuts\n\nThe Shortcuts version of the CLUI can be accessed from the top navigation bar on most Replit pages. Use the keyboard command **CMD/CTRL + K** to open it up at any time or click on it.\n\n![Shortcuts CLUI](https://docimg.replit.com/images/getting-started/shortcuts-clui.png)\n\n### Command Reference\n\n#### Search\n\nAllows you to search Replit for Repls, Templates, Code, People, and more.\n\n#### New\n\nCreate a new Repl.","metadata":{"id":220}}],["221",{"pageContent":"### Command Reference\n\n#### Search\n\nAllows you to search Replit for Repls, Templates, Code, People, and more.\n\n#### New\n\nCreate a new Repl.\n\n#### My Repls\n\nBrowse through and easily navigate to your Repls.\n\n#### My Code\n\nSearch through the code in all of your Repls.\n\n## Workspace\n\nThe Workspace CLUI allows you to quickly perform operations, access Tools, find files, or search for terms in your code.\n\nYou can access the Workspace CLUI with the keyboard shortcut **CMD/CTRL + K** at any time in the Workspace. Alternatively, you can click on the Search icon in the upper-left corner of the page.\n\n![Workspace CLUI](https://docimg.replit.com/images/getting-started/ws-clui.png)","metadata":{"id":221}}],["222",{"pageContent":"# Desktop App\n\nThe Replit Desktop App is a standalone native version of the Replit IDE. It provides a focused environment for coding, with all the features of the browser IDE, plus the added convenience of being accessible directly from your home screen or dock.\n\n## **Key features**\n\n**Focused coding**: Enjoy a native, 'zen-mode' like Replit experience on macOS, Windows, and Linux.\n\n- The app is easily accessible from your desktop, allowing you to quickly launch and start coding without opening a browser.\n    \n- The desktop app provides a dedicated space for coding, free from the distractions of a Repl in the browser.\n\n- To quickly open the desktop app from your browser Repl, open the [command palette](https://docs.replit.com/programming-ide/keyboard-shortcuts#command-palette) (`Ctrl/Cmd + K`) and then select **Open in desktop app**.\n\n**Easily accessible**: Create multiple windows for different Repls and directly access Replit from your dock or home screen.\n\n**Enhanced keyboard shortcuts**: The app allows you to define keyboard shortcuts not typically available available in the browser, enabling you to tailor your coding environment to your personal preferences and workflows.\n\n**Full feature set of the browser IDE**: The desktop app includes all the features of the Replit browser IDE, including collaborative coding, integrated debugging tools, and Git integration.\n\nFor more on the Replit Desktop App, including how we built it, check out the announcement [blog post](https://blog.replit.com/desktop-app).\n\n## **Installation**\n\nInstall the Replit Desktop App on your operating system (Windows, macOS, Linux) here: [replit.com/desktop](https://replit.com/desktop).\n\n- On macOS and Windows, the app will auto-update when you launch the app.\n\n- Linux users must manually update. Check for new versions at [replit.com/desktop](https://replit.com/desktop).\n\n## **Features**\n\n#### **Custom keyboard shortcuts**\n\nThe desktop app allows for more keyboard shortcuts than in the browser.","metadata":{"id":222}}],["223",{"pageContent":"## **Features**\n\n#### **Custom keyboard shortcuts**\n\nThe desktop app allows for more keyboard shortcuts than in the browser.\n\n- To see the default shortcuts, navigate to **Settings** using the command palette: `Ctrl/Cmd + K` -> **Settings** -> **Keyboard shortcuts** or from the Tools section in the left sidebar.\n\n- Note: the default shortcuts are slightly different from the browser.\n\n- View more on shortcuts [here](https://docs.replit.com/programming-ide/keyboard-shortcuts).\n\nDefault desktop shortcut for opening a new window: `Ctrl/Cmd + Shift + N`\n\n#### **Deep linking:** \n\nThe app supports a number of deep links, or links to specific pages or flows, that will launch the app if it's not already running.\n\n  - To create a new Repl: `replit://new`\n\n  - To create a new Repl in a specific language: `replit://new?language=nodejs`\n\n  - To open the desktop app homepage: `replit://home`\n\n  - To open a specific Repl: `replit://@<user-name>/<repl-name>`, eg: `replit://repl/@replit/Expressjs-Template`\n    \n## **Desktop App vs. the browser**\n        \n### **Similarities from web**\n            \n  - The desktop app performs in the same way as a Repl in the browser. All the compute resources run in the cloud and not locally. The Repl resources are based on [your plan](https://replit.com/pricing) and not your computer’s hardware.\n            \n  - Ability to use multiple windows. Use the file menu or `Ctrl/Cmd + Shift + N` to open a new window.\n            \n  - All Tools, Extensions, Deployments, Replit AI, etc. are available.\n        \n### **Differences from the browser**\n            \n  - **Full Chromium devtools:** Navigating to the web preview and selecting the wrench icon allows the use of the full Chromium browser devtools.\n![dev-tools](https://docimg.replit.com/images/desktop/desktop-app-integrated-devtools.webp)","metadata":{"id":223}}],["224",{"pageContent":"![dev-tools](https://docimg.replit.com/images/desktop/desktop-app-integrated-devtools.webp)\n            \n  - **Keyboard shortcuts:** Due to not being constrained by browser shortcut conflicts, there are more shortcuts available than the browser, but there are some minor differences from the default keyboard shortcuts in the browser.\n            \n  - **The navigation menu:** To the right of the sidebar toggle in the Workspace header is the navigation menu. This is where you can create a new Repl, open new windows, and search for and filter through your existing Repls.\n![nav-menu](https://docimg.replit.com/images/desktop/desktop-app-nav-menu.gif)\n            \n  - **The avatar menu:** Use this menu, located at the top right, to go to the full Replit web app.\n  - This is where you can go to the Community page, Bounties, Teams, etc., Account (change themes, billing, view resource usage), view the app version, and to logout.\n![avatar-menu](https://docimg.replit.com/images/desktop/avatar.png)\n                \n  - Note: logging out of the desktop app will not log you out in your browser.\n    \n### **Support**\n        \nUse the tag `desktop-app` when submitting a bug report on [the forum](https://ask.replit.com/c/support/bug-reports/).\n        \nInclude the desktop app version in any support request, such as bug reports, by navigating to the top right avatar menu to view the version number, e.g. “1.0.0”.","metadata":{"id":224}}],["225",{"pageContent":"# Mobile App\n\nBring your coding projects to life on-the-go with the Replit Mobile App.\n\n## About the Replit Mobile App\n\nThe Replit Mobile App is available for [Android](https://play.google.com/store/apps/details?id=com.replit.app) and [iOS](https://replit.com/mobile) users. With this app, you can take your coding projects anywhere you go and unleash your creative potential. Whether you want to write a Python bot, build a website, or run any program, the Replit Mobile App has you covered.\n\n## Key Features\n\n- Effortless hosting with zero setup deployment\n- Real-time multiplayer collaboration for live coding\n- Support for coding in any language and framework\n- Access to over 15 million projects to clone and remix\n- Ability to set up custom domains for your projects\n- Easy import of existing projects from Github\n- Repl Auth integration for user authentication\n- Quick database setup with ReplDB\n- All-in-one code editor, compiler, and IDE\n- Powered by [Nix](https://docs.replit.com/programming-ide/nix-on-replit)\n\n## Launch Video\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cmq3TrS3ccU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n\n## Signing up, logging in, and and signing out of accounts\n\nDownload the Replit Mobile App on your [Android](https://play.google.com/store/apps/details?id=com.replit.app) or [iOS](https://replit.com/mobile) device.\n\nTo sign up, tap **Start coding**. You will be redirected to create an account with Replit. You can either sign up with email/password or use a third-party authentication providers such as Google, Github, and Facebook.\n\nTo log in, tap **Already have an account?**. You'll be redirect it to log in to your existing account.","metadata":{"id":225}}],["226",{"pageContent":"To log in, tap **Already have an account?**. You'll be redirect it to log in to your existing account.\n\nTo log out, go to your Replit account. Tap `Log Out` listed under the `Other` sections of your account. You'll receive a notification prompting you to confirm that you want to log out. Tap `Log Out` and you'll now be logged out of your Replit account on the mobile app.\n\n## Sharing app feedback\n\nSharing feedback about the Replit Mobile App is simple. You can either shake your phone to bring up a feedback form or navigate to your Replit account and tap **Send App Feedback** under the **Other** section. After that, choose the corresponding category and you'll be able to send us your feedback on the Mobile App.\n\n## Features coming soon\n\nThe first version of the Replit Mobile App is focused on creation first. Write, run, and host projects just like you can on the Replit site.\n\nComing soon:\n\n- Repl publishing\n- Community feed\n- Cycles and subscriptions purchasing\n- The Learn Hub\n- 100 days of Code\n- Custom Themes","metadata":{"id":226}}],["227",{"pageContent":"# Firewalled Replit\n\nReplit offers an alternative domain, [firewalledreplit.com](https://firewalledreplit.com), that provides a more restricted user experience. By logging into Replit from this domain rather than our main domain, the following restrictions are applied:\n\n- A firewall is used to prevent repls from accessing the Internet (apart from a small number of software package repositories).\n- Replit’s community and search features are hidden.\n\nNo registration is needed to use firewalledreplit.com, and there is no need to migrate your user account or repls to the new domain. Users are free to switch between using [firewalledreplit.com](https://firewalledreplit.com) and our original domain [replit.com](https://replit.com) at any time.\n\nMost repls will function normally on firewalledreplit.com, but those that depend on being able to access the external internet might not function as expected.\n\nFor IT administrators who may wish to enforce the use of firewalledreplit.com rather than replit.com, [this document](/teams-edu/it-administrators-toolkit) provides guidance on how that can be done.\n\n_Read more about this change at [our blog post](https://blog.replit.com/computing-superpower-at-school). Also, see our [commitment to user safety.](https://docimg.replit.com/images/teamsForEducation/Our%20Commitment%20to%20User%20Safety.pdf)_\n\n## FAQ\n\n**What is different about firewalledreplit.com?**\n\nThe new domain firewalledreplit.com is more strictly filtered to eliminate any avenue for students to create web proxies and, therefore, bypass school filters and reach inappropriate content. Additionally, there will be no community, search, or spotlight features. Students will not be able to view any public repls that are shared within the broader Replit community. They can only see projects and repls that are created inside the Teams for Education organization.\n\n**Why is this change happening?**","metadata":{"id":227}}],["228",{"pageContent":"**Why is this change happening?**\n\nWe take trust and safety seriously. While we want students to have the opportunity to experience the full power of Replit and coding, some schools have asked for stronger guarantees that their students will not be able to access adult or inappropriate content. We’ve listened, and that’s why we’re providing firewalledreplit.com as a new option for those schools.\n\n**Will I still be able to access the same Teams for Education features?**\n\nYes. There will be no change to the education-focused features.\n\n**Can my students still collaborate with other students that are a part of our organization?**\n\nYes, [students can still work with other students](/teams-edu/group-projects) who are a part of the same project (as organized by the teacher). Students will NOT be able to view community repls or comments and can only interact with other students that are a part of their team.\n\n**How is this solution different from blocking repl.co?**\n\nPreviously, we advised schools that wanted to prevent students from accessing proxies to block the repl.co domain. However, this had the side-effect of also preventing them from coding functional web applications on Replit. In contrast, the new domain firewalledreplit.com allows students to work on web applications that are fully functional except that they cannot access the broader Internet. Additionally, firewalledreplit.com hides community sharing and commenting features so that students can focus on coding.\n\n**How do I know students will not be able to access proxies or bypass school filters on firewalledreplit.com too?**","metadata":{"id":228}}],["229",{"pageContent":"**How do I know students will not be able to access proxies or bypass school filters on firewalledreplit.com too?**\n\nEvery method that students have used in the past to bypass school filters relies on repls being able to access the Internet. On firewalledreplit.com, repls are completely blocked from accessing the Internet, apart from repositories of well-known, trusted software libraries that are needed for coding. These include pypi.org for Python, npmjs.org for NodeJS and maven.org for Java. This blocking is enforced deep within our network, and there is no way for students to bypass it while using the firewalledreplit.com domain.\n\n**What can I do if students are still accessing replit.com and I want to prevent this?**\n\nAfter switching your students over to use firewalledreplit.com, you do have the option of blocking replit.com and repl.co to fully ensure students cannot bypass the new domain and the additional safeguards that it provides. However, blocking these domains will also eliminate the ability for students to see trending/popular repls posted in the community which can act as inspiration and creativity for students.\n\n**Can I ask for additional websites from the Internet to be permitted for access from firewalledreplit.com?**\n\nSorry, but to ensure the security of firewalledreplit.com, we do not have plans to allow additional websites to be accessed through firewalledreplit.com. Only access to a limited number of well-known software library repositories will be allowed.\n\n**Will this limit the languages I can use or access?**\n\nNo. You can still create projects in the same languages as replit.com.\n\n**Will my speed be affected?**\n\nNo. You will still have access to the same dedicated cluster for Teams for Education that has more speed and storage.\n\n**Do I need to transfer projects/repls from replit.com to firewalledreplit.com?**","metadata":{"id":229}}],["230",{"pageContent":"No. You will still have access to the same dedicated cluster for Teams for Education that has more speed and storage.\n\n**Do I need to transfer projects/repls from replit.com to firewalledreplit.com?**\n\nNo. Since the projects are attached to the organization/account and not the website domain, they will be made available on firewalledreplit.com automatically.\n\n**Can our district request our own sub-domain or for specific content to be further filtered?**\n\nWith this new domain, firewalledreplit.com, there will be no access to the Internet through repls and the exclusion of community. Both of these features essentially create an environment where the focus is solely on coding and collaborating with only those the teacher allows. Therefore, there would be no added benefit to further filtering and no need to create a district-specific subdomain.","metadata":{"id":230}}],["231",{"pageContent":"---\n\nsidebar_position: 2\n\n---\n\n# About Usage-Based Billing\n\nThere are three types of usage-based billing for deployments: \n\n1. Outbound Data Transfer\n2. Autoscale Compute Units\n3. Requests\n\nYou can view your usage in your account [here](https://replit.com/account#resource-usage). Billing occurs monthly or once your accumulated costs reach $10. Replit Core (previously Hacker or Pro) users receive monthly allowances for these resources.\n\n<br />\n\n# Deployments\n\n### 1. Deployments Outbound Data Transfer\n\nThis type of usage is billed per byte with Replit Core (previously Hacker or Pro) users receiving a monthly allowance. Only egress (outgoing) data is counted against this allowance, potentially leading to overages. In contrast, ingress (incoming) data is always free.\n\n| Subscription | Allowance |\n|--------------|-----------|\n| Replit Core  | 100 GiB  |\n\nExceeding your allowance costs $0.10 per GiB. The allowances apply to both Static and Autoscale deployments.\n\nLearn more about [Autoscale](/hosting/deployments/autoscale-deployments) and [Static Deployments](/hosting/deployments/static-deployments).\n\n---\n### 2. Compute Units\n\nThe runtime for Autoscale Deployments is billed using Compute Units, which consider both CPU and RAM time. Replit Core users (previously Hacker or Pro) receive a monthly allowance:\n\n| Subscription  | Allowance                     |\n|---------------|-------------------------------|\n| Core          | 6 million Compute Units/month |\n\nOverages are billed at $1 per million Compute Units. The granularity of the billing is down to each individual compute unit ($0.00000125 each).\n\nHere is a breakdown of how RAM and CPU seconds for an Autoscale Deployment translate into Compute Units:\n\n| Resource     | Compute Units | Cost/second         |\n|--------------|---------------|----------------------|\n| 1 RAM Second | 2 Units       | $0.0000025/second    |\n| 1 CPU Second | 18 Units      | $0.0000225/second    |","metadata":{"id":231}}],["232",{"pageContent":"|--------------|---------------|----------------------|\n| 1 RAM Second | 2 Units       | $0.0000025/second    |\n| 1 CPU Second | 18 Units      | $0.0000225/second    |\n\nStatic Deployments don't consume Compute Units. Their billing is solely for Outbound Data Transfers beyond a [specified amount](#).\n\n[Learn more about Autoscale Deployments](/hosting/deployments/autoscale-deployments).\n\n---\n\n### 3. Requests\n\nAutoscale Deployments also consider the number of requests made. Here are the monthly allowances for Replit Core (previously Hacker or Pro):\n\n| Subscription  | Allowance                 |\n|---------------|---------------------------|\n| Replit Core   | 2.5 million requests/month  |\n\nRequests beyond the allowances are billed at $0.40 per million.\n\n<br />\n<br />\n\n# Databases\n\n### 1. PostgreSQL Usage Metrics\nReplit PostgreSQL offers effortless high availability with no administrative or maintenance burden. Being serverless, Replit PostgreSQL only charges for actual usage, resulting in potential cost savings of up to 10 times.\n\nReplit PostgreSQL databases bill for usage based on the following usage metrics:\n- **[Compute Time](#compute-time)**: The amount of compute resources used per hour.\n- **[Data Storage](#data-storage)**: The volume of data and history stored.\n- **[Data transfer](#data-transfer)**: The volume of data transferred out of.\n- **[Written data](#written-data)**: The volume of data written from compute to storage.\n\n<br />\n\nThese usage metrics are billed per month or once your accumulated costs reach $10. Replit Core subscribers receive a monthly allowance and pay for any additional overages used. Replit non-plan users just pay for their usage at the listed overage cost.\n\n| Usage Metric                       | Replit Core Allowance | Overage cost                                        |\n|------------------------------------|-----------------------|-----------------------------------------------------|","metadata":{"id":232}}],["233",{"pageContent":"|------------------------------------|-----------------------|-----------------------------------------------------|\n| [Compute Time](#compute-time)      | 100 hours (per month) | $0.102 per additional compute hour per month        |\n| [Data Storage](#data-storage)      | 3 GiBs (total)        | $0.12 per additional GiB of storage per month       |\n| [Data transfer](#data-transfer)    | 512MiB (per month)    | $0.09 per additional GiB of data transfer per month |\n| [Written data](#written-data)      | 512MiB (per month)    | $0.096 per additional GiB of written data per month |\n\nYou can view your usage in your account [here](https://replit.com/account#resource-usage).\n\n#### **Compute Time**\nCompute time is determined by number of hours your database remains active during a given billing period. Databases are considered active when they receive requests and for an additional 5-minute period after the last request. If a database remains idle for 5 minutes, it will be suspended and enter an inactive state.\n\n#### **Data Storage**\nData storage is the total volume of data stored across all databases in your account, measured in gibibytes (GiB). Storage is calculated as the maximum amount of storage used per month. Each PostgreSQL database consumes 33MB of storage, even if it doesn't contain any data. This is the default storage footprint of the Postgres server. The total storage limit for each database is 10 gibibytes (GiB).\n\n#### **Data Transfer**\nData transfer is the total volume of data transferred out of your database (known as \"egress\") during a given billing period, measured in gigibytes (GiB). \n\n#### **Written Data**\nWritten data measures the total volume of data written from compute to storage within a given billing period, measured in gigibytes (GiB).\n\n[Learn more about Replit PostgreSQL](/hosting/databases/postgresql-on-replit).\n\n<br />\n\n# Additional Notes","metadata":{"id":233}}],["234",{"pageContent":"[Learn more about Replit PostgreSQL](/hosting/databases/postgresql-on-replit).\n\n<br />\n\n# Additional Notes\n\nIf there's an issue with your payment method, we'll notify you. Continuous payment failures might lead to the suspension of your deployments. If this happens, please [contact support](https://support.replit.com) and update your payment details to regain access to our services.","metadata":{"id":234}}],["235",{"pageContent":"# Add a \"Made with Replit\" badge to your Webview\n\nYou can add a \"Made with Replit\" badge in your public Repl's webview. It will link back to your Repl's cover page so that visitors can learn more about your creations.\n\n## What is the Webview?\n\nThe webview is the view of your repl that visitors to your Repl see when they click \"Open website.\"\n\nThe webview appears full-screen in its own browser window, and has the following URL format:\n\n`https://{your-repl-name}--{your-user-name}.repl.co/`\n\n(Or at your custom domain if you've set one up)\n\n*Note: Please refer to [these docs](/hosting/hosting-web-pages.md#end-of-dot-style-domains) to ensure that you are using the correct repl.co domain format.*\n\n## Adding the Badge\n\nThe badge can be added to any repl with an index page serving HTML. Any website created with the official HTML template will have this badge added by default.\n\n1. Go to your Repl's file browser and find `index.html`\n   ![img-indexfile](https://docimg.replit.com/images/misc/img-indexfile.png)\n\n2. Add the following code before the closing `</body>` tag:\n\n```html\n<script\n  src=\"https://replit.com/public/js/replit-badge-v2.js\"\n  theme=\"dark\"\n  position=\"bottom-right\"\n></script>\n```\n\n![img-htmlcode](https://docimg.replit.com/images/misc/img-htmlcode.png)\n\n## Testing your Badge\n\n1. Run your Repl, then click \"Open in a new tab\"\n   ![img-openintab](https://docimg.replit.com/images/misc/img-openintab.png)\n\n2. Your badge should appear in the lower right. This is what visitors to your page would see\n   ![Badge Preview](https://docimg.replit.com/images/misc/badge-preview.png)\n\n3. Click your badge to get back to the Repl's cover page\n\n## Changing the Color Theme\n\nYou can change the color of your badge by replacing `theme=\"blue\"` with any color including dark, light, red, orange, yellow, lime, green, teal, blue, blurple, purple, magenta and pink.\n\n```html\n<script\n  src=\"https://replit.com/public/js/replit-badge-v2.js\"\n  theme=\"pink\"\n  position=\"bottom-right\"\n></script>\n```\n\n## Changing the Position","metadata":{"id":235}}],["236",{"pageContent":"```html\n<script\n  src=\"https://replit.com/public/js/replit-badge-v2.js\"\n  theme=\"pink\"\n  position=\"bottom-right\"\n></script>\n```\n\n## Changing the Position\n\nYou can change the position of your badge by adding a position attribute with a value of `top-left`, `top-right`, `bottom-left`, or `bottom-right`. If the position isn't changing, check the console for more information - you may have specified an invalid position.\n\n```html\n<script\n  src=\"https://replit.com/public/js/replit-badge-v2.js\"\n  theme=\"dark\"\n  position=\"top-left\"\n></script>\n```\n\n## Removing the Badge\n\nIf the badge was already a part of your template and you would like to remove it, simply delete the script from `index.html`:\n\n```html\n<!-- Delete this -->\n<script src=\"https://replit.com/public/js/replit-badge-v2.js\"></script>\n```\n\n\n## Advanced: Custom Badges\n\nIf the default configurations aren't enough for you, you can create your own custom badges with standard HTML and CSS.\n\nBadges are hosted on `https://replit.com/badge`, meaning you can embed an image to further style your badges with CSS. This also means you can embed badges in your GitHub repositories and other Markdown files!\n\n```html\n<style>\n  #replitBadge {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n  }\n</style>\n\n<img src=\"https://replit.com/badge?theme=light\" id=\"replitBadge\" />\n```\n\nYou can also supply additional options not available in the script. For example, you can set the caption (maximum limit of 30 characters)\n\n```\nhttps://replit.com/badge?caption=Amazing%20Badges\n```\n\n![Amazing Replit badge](https://replit.com/badge?caption=Amazing%20Badges)\n\nor even switch the badge variant to something smaller.\n\n```\nhttps://replit.com/badge?caption=Amazing%20Badges&variant=small\n```\n![Amazing small Replit badge](https://replit.com/badge?caption=Amazing%20Badges&variant=small)\n\n## Advanced: Embedding into Markdown","metadata":{"id":236}}],["237",{"pageContent":"```\nhttps://replit.com/badge?caption=Amazing%20Badges&variant=small\n```\n![Amazing small Replit badge](https://replit.com/badge?caption=Amazing%20Badges&variant=small)\n\n## Advanced: Embedding into Markdown\nYou can share off your Replit flare by embedding a badge into your repository README. The following Markdown snippet combines a link and image, allowing you to redirect users directly to your repl. \n\n```\n[![Try with Replit Badge](https://replit.com/badge?caption=Try%20with%20Replit)](https://docs.replit.com/)\n```\n\nTry clicking this:\n\n[![Try with Replit Badge](https://replit.com/badge?caption=Try%20with%20Replit)](https://docs.replit.com/)\n\nPlease let us know in the community what you think of this feature. Repl on!","metadata":{"id":237}}],["238",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Authenticating users with Repl Auth\n\n_This tutorial is an expansion of [this one](https://replit.com/talk/learn/Authenticating-users-with-Replit-Auth/23460) written by [Mat](https://replit.com/@mat1)_\n\nTo help you authenticate users hassle-free, we have created Repl Auth. This allows you to authenticate users without having to write your own authentication logic or work with databases. You can simply authenticate a user with their Replit account without the need to store secure passwords. It's also faster to set up than something like Google authentication.\n\nIn this tutorial, we'll build a basic Flask web application where Replit users can be authenticated with Repl Auth. To show that a user is authenticated, we will display some of their Replit account information back to them.\n\nThe main components for this tutorial are:\n\n- [Python](https://www.python.org/doc/) for serverside code.\n- [Flask](https://flask.palletsprojects.com/en/1.1.x/) and [Jinja2](https://jinja.palletsprojects.com/) for rendering a basic web page where the user can authenticate.\n- [HTML](https://www.w3schools.com/html/html_intro.asp) for the web page layout.\n\n## Setup\n\nYou'll need a Replit account for this tutorial so if you haven't already, head over to the [signup page](https://replit.com/signup) to create an account.\n\nCreate a new Python repl and give it a name.\n\n![Creating a new repl](https://docimg.replit.com/images/repls/repl-auth/create-repl.png)\n\n## Creating the Basic Flask App\n\nLet's build a basic Flask app that will render a simple HTML page where we will add the authentication button and display the user's account details later.\n\nIn the `main.py` file, add the following code:\n\n```python\nfrom flask import Flask, render_template, request\n\napp = Flask('app')\n\n@app.route('/')\ndef home():\n  return render_template('index.html')\n\napp.run(host='0.0.0.0', port=8080)\n```\n\nAbove, we have a basic Flask app that will render the `index.html` page which we will add next.","metadata":{"id":238}}],["239",{"pageContent":"@app.route('/')\ndef home():\n  return render_template('index.html')\n\napp.run(host='0.0.0.0', port=8080)\n```\n\nAbove, we have a basic Flask app that will render the `index.html` page which we will add next.\n\nBy default, Flask will check for HTML pages to render within a directory called `templates`. Create a new folder in the root directory and name it `templates`. Now create a new file within the `templates` directory and name it `index.html`.\n\nLet's add some basic HTML to display `Hello, Replit!` on the landing page.\n\nCopy the following HTML to the `index.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Repl Auth</title>\n  </head>\n  <body>\n    Hello, Replit!\n  </body>\n</html>\n```\n\nThat's it for the Flask app. Run the code and you should see the browser window display 'Hello, Replit!'.\n\n![Hello Replit](https://docimg.replit.com/images/repls/repl-auth/hello-replit.png)\n\n## The Authentication Script\n\nTo add authentication to our Flask app, add the following within the **body** of the `index.html` page:\n\n```html\n<div>\n  <script\n    authed=\"location.reload()\"\n    src=\"https://auth.util.repl.co/script.js\"\n  ></script>\n</div>\n```\n\nThis script can be placed anywhere in the document **body** and will create an iframe within its parent element. Additionally, any JavaScript placed in the `authed` attribute will be executed when the user finishes authenticating. Currently, our app will just reload once the user authenticates.\n\nIf we run our application now, we'll see a `Login with Replit` button.\n\n![Login button](https://docimg.replit.com/images/repls/repl-auth/login-button.png)\n\nIf you click the button, an authorization window will pop up with **Let (your site url) know who you are?**, a profile summary and an `Authorize` button. Clicking the button doesn't do anything at this stage; we'll add some functionality next.\n\n![Replit authentication window](https://docimg.replit.com/images/repls/repl-auth/authentication-window.png)\n\n## Retrieving Information from the Authenticated Account","metadata":{"id":239}}],["240",{"pageContent":"![Replit authentication window](https://docimg.replit.com/images/repls/repl-auth/authentication-window.png)\n\n## Retrieving Information from the Authenticated Account\n\nWe can retrieve the user's data by requesting information from the Replit specific headers and extracting data from them. The headers we want for this tutorial are `X-Replit-User-Id`, `X-Replit-User-Name` and `X-Replit-User-Roles`.\n\nLet's get these from the header and pass them to our HTML template.\n\nIn the `main.py` file change the `home()` function to look as follows:\n\n```python\n@app.route('/')\ndef hello_world():\n\treturn render_template(\n\t\t'index.html',\n\t\tuser_id=request.headers['X-Replit-User-Id'],\n\t\tuser_name=request.headers['X-Replit-User-Name'],\n\t\tuser_roles=request.headers['X-Replit-User-Roles']\n\t)\n```\n\nAbove, we use `request` to get the Replit headers and place them into variables.\n\nNext we should update our `index.html` page to use the headers passed to it and display them back to the user if they are authenticated.\n\nOpen the `index.html` file and replace the body with the following:\n\n```html\n<body>\n  {% if user_id %}\n  <h1>Hello, {{ user_name }}!</h1>\n  <p>Your user id is {{ user_id }}.</p>\n  {% else %} Hello! Please log in.\n  <div>\n    <script\n      authed=\"location.reload()\"\n      src=\"https://auth.util.repl.co/script.js\"\n    ></script>\n  </div>\n  {% endif %}\n</body>\n```\n\nAbove, we check if the user is already authenticated and display their account details. If not, they are asked to \"Please log in\".\n\nRun the application and you should see `Hello, <username>! Your user id is <user_id>`\n\n![Hello user_name](https://docimg.replit.com/images/repls/repl-auth/hello-username.png)\n\n## Warning\n\nBe aware that if you're going to use an accounts system, **PLEASE** do all the specific logic for checking users on the **BACK END**, _do not_ do it with JavaScript in your HTML.\n\n## Closing Notes\n\nIf you followed along, you'll have your own repl to expand. If not, you can [fork our repl](https://replit.com/@ritza/replit-auth) or test it out below.","metadata":{"id":240}}],["241",{"pageContent":"## Closing Notes\n\nIf you followed along, you'll have your own repl to expand. If not, you can [fork our repl](https://replit.com/@ritza/replit-auth) or test it out below.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/replit-auth?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":241}}],["242",{"pageContent":"---\nsidebar_position: 3\ntitle: Custom Domains\n---\n\n*Please note that domain linking for development hosting (outlined in this article) will be deprecated on January 1st, 2024, if you would like to deploy your app to a domain you own consider using [production deployments](/hosting/deployments/about-deployments). Read more about the transition [in our blog post](https://blog.replit.com/hosting-changes)*.\n\n# How to connect your repl to a custom domain\n\n## Connecting your domain to your repl\n\nFirst, you need to go into the webview of your repl and click the pencil icon to the right of the address bar:\n\n![webview of a repl](https://docimg.replit.com/images/hosting/custom-domains/firefox_5rCxkoAqnc.png)\n\nFrom there, you can add your domain to the domain linking panel:\n\n![domain linking panel](https://docimg.replit.com/images/hosting/custom-domains/firefox_wppUODOd46.png)\n\nNext, you will be prompted to copy information for the CNAME and TXT records. The CNAME record points your domain to your repl, and the TXT record verifies that you own the domain.\n\n![copy domain information](https://docimg.replit.com/images/hosting/custom-domains/firefox_lus7QfIaSB.png)\n\nOnce you have copied the info, you can add the CNAME and TXT records to your domain. You can link your repl to a root domain or a subdomain. In my case, the root domain would be `thedevbird.com`, but for this tutorial, we will link the domain: `tutorial.thedevbird.com` to our repl.\n\n_Note: I am using Cloudflare for DNS management in this tutorial, but it should be comparable to any other DNS manager_\n\n![adding CNAME record](https://docimg.replit.com/images/hosting/custom-domains/firefox_qau5BXKe2y.png)\n![adding TXT record](https://docimg.replit.com/images/hosting/custom-domains/firefox_2RcqsnHBGO.png)\n\n### Name field\n\nThe **name** is your subdomain prefix, such as `tutorial` (e.g.: <code><b>tutorial</b>.thedevbird.com</code>) or your root domain: `example.com`.","metadata":{"id":242}}],["243",{"pageContent":"### Name field\n\nThe **name** is your subdomain prefix, such as `tutorial` (e.g.: <code><b>tutorial</b>.thedevbird.com</code>) or your root domain: `example.com`.\n\nSome DNS services **do not** allow you to use your root domain with a CNAME record. In that case, you will need to use an A record. Replit's domain linking panel should show an `A` record automatically whenever you enter only your root domain:\n\n![linking a root domain](https://docimg.replit.com/images/hosting/custom-domains/firefox_iqrjFe5IAn.png)\n\n### Target field\n\nThe **target** is what the record will point to, usually the information you copied from the domain linking panel.\n\n## The waiting game\n\nUnfortunately, the time to fully propagate DNS changes can range from a few minutes to about 24-48 hours. We recommend using a tool such as https://whatsmydns.net/ to keep track of the DNS propagation. All you need to do is input your custom domain (`tutorial.thedevbird.com` in this case) and select the DNS record type you want to check.\n\nIn the screenshots below, you can see how quickly the TXT record propagated. In contrast, when making this tutorial, the CNAME record had only propagated to one primary DNS server in the same time span.\n\n![TXT propogation](https://docimg.replit.com/images/hosting/custom-domains/firefox_sOOlsNcFwj.png)\n![CNAME propogation](https://docimg.replit.com/images/hosting/custom-domains/IwYGyOjqEW.png)\n\n**The key to linking your domain is patience.** Your repl won't be able to connect to your custom domain until the DNS records are propagated all the way through.\n\n## We have liftoff!\n\nOnce your DNS records have been fully propagated, you can check back on the domain linking panel of your repl, which should show that your domain has been verified:\n\n![custom domain is verified](https://docimg.replit.com/images/hosting/custom-domains/firefox_seLItLADFi.png)","metadata":{"id":243}}],["244",{"pageContent":"![custom domain is verified](https://docimg.replit.com/images/hosting/custom-domains/firefox_seLItLADFi.png)\n\nIf you don't see this, please send a support ticket via https://replit.com/support and **make sure to include a screenshot of your DNS records, the custom domain you want to link, and the link to your repl.**","metadata":{"id":244}}],["245",{"pageContent":"---\nsidebar_position: 1\n---\n\n# PostgreSQL on Replit\n\n## What is PostgreSQL?\n\nPostgreSQL is a powerful, open-source object-relational database system widely used in web applications and other software development projects. We use PostgreSQL version 15 in our integration, allowing you to easily create a production-ready PostgreSQL database directly within Replit. You can run queries and connect to the database using our provided environment variables. For more information on PostgreSQL, visit the [official documentation](https://www.postgresql.org/docs/).\n\n## Why use PostgreSQL?\n\n1. **Simplicity:** With our integration, you can easily set up a PostgreSQL database without having to install any additional software or configure any settings. All you need to do is click a button to have a fully-functional database ready to go.\n2. **Seamless integration:** Our integration is designed to work seamlessly with Replit, so you can easily access your database and run queries within the Replit environment or within your code with minimal configuration.\n3. **Production-ready:** The database created with our integration is production-ready, so you can use it for real-world applications and projects.\n4. **Convenience:** With our provided environment variables, you can easily connect to the database from your code, without having to worry about setting up the connection manually. This saves you time and makes it easier to get your project up and running.\n5. **Neon documentation:** Provides guides on how to connect various frameworks, such as Django, to your PostgreSQL database in the [neon documentation](https://neon.tech/docs/connect/connect-from-any-app).\n6. **Connection pooling:** If you need to enable connection pooling for any reason, you can contact us, and we'll do it manually. More information on connection pooling can be found in the [neon documentation](https://neon.tech/docs/connect/connection-pooling/).","metadata":{"id":245}}],["246",{"pageContent":"7. **Compute lifecycle:** The database will sleep after 5 minutes without queries, so you may experience disconnects. More information on the compute lifecycle can be found in the [Neon documentation](https://neon.tech/docs/introduction/compute-lifecycle/)\n\n## Setup\n\n1. Open a new tab in Replit and type \"PostgreSQL\"\n   ![Open a new tab in Replit and type PostgreSQL](https://docimg.replit.com/images/hosting/databases/pgopentab.png)\n2. In the \"PostgreSQL\" panel, click \"create a database\"\n   ![In the PostgreSQL panel, click create a database](https://docimg.replit.com/images/hosting/databases/pgbuy2.png)\n3. In the env section, you can view all of the relevant connection information about your database.\n   ![You can view all of the relevant connection information about your database.](https://docimg.replit.com/images/hosting/databases/pgvar2.png)\n\n## Billing\nBeing serverless, Replit PostgreSQL only charges for actual usage, resulting in potential cost savings of up to 10 times.\n\n[Learn more about Replit PostgreSQL usage based billing](/hosting/about-usage-based-billing#1-postgresql-usage-metrics).\n\n\n## SQL Explorer\n\nWe provide a SQL explorer that you can use to create tables and manage your database. And if you have purchased Replit AI, you can use that within the SQL explorer to help you write queries.\n\n## Usage (NodeJS)\n\n### Preparation\n\n<!-- 1. Use the Packager to install `knex` and `pg` -->\n\n1. <span>\n     Use the Packager to install <code>knex</code> and <code>pg</code>\n   </span>\n2. <span>Connect to the DB with Knex using the URL secret</span>\n\n   ```js\n   const knex = require(\"knex\")({\n     // We are using PostgreSQL\n     client: \"postgres\",\n     // Use the `DATABASE_URL` environment variable we provide to connect to the Database\n     // It is included in your Replit environment automatically (no need to set it up)\n     connection: process.env.DATABASE_URL,\n\n     // Optionally, you can use connection pools to increase query performance\n     pool: { min: 0, max: 80 },\n   });\n   ```\n\n3. <span>","metadata":{"id":246}}],["247",{"pageContent":"connection: process.env.DATABASE_URL,\n\n     // Optionally, you can use connection pools to increase query performance\n     pool: { min: 0, max: 80 },\n   });\n   ```\n\n3. <span>\n     Use an Async IIFE so we can use <code>await</code>\n   </span>\n\n   ```js\n   (async () => {\n     // Leave this empty for now\n   })();\n   ```\n\n### Code\n\n1. <span>Create a table</span>\n\n   ```js\n   await knex.schema.createTable(\"users\", (table) => {\n     table.increments(\"id\");\n     table.string(\"username\");\n     table.integer(\"points\");\n   });\n   ```\n\n2. <span>Insert a row</span>\n\n   ```js\n   await knex(\"users\").insert({\n     username: \"alice\",\n     points: 0,\n   });\n   ```\n\n3. <span>Update the row</span>\n\n   ```js\n   await knex(\"users\")\n     .where(\"username\", \"alice\")\n     .update({\n       points: knex.raw(\"points + 1\"),\n     });\n   ```\n\n4. <span>Get the row</span>\n\n   ````js\n   const user = await knex('users')\n       .where('username', 'alice')\n       .first();\n       ```\n   ````\n\n5. <span>Print the row to the console</span>\n\n   ```js\n   console.log(user);\n   ```\n\n6. <span>Delete the row</span>\n\n   ```js\n   await knex(\"users\").where(\"username\", \"alice\").delete();\n   ```\n\n### Final Code\n\n```js\n// Connect to the Database\nconst knex = require(\"knex\")({\n  // We are using PostgreSQL\n  client: \"postgres\",\n  // Use the `DATABASE_URL` environment variable we provide to connect to the Database\n  // It is included in your Replit environment automatically (no need to set it up)\n  connection: process.env.DATABASE_URL,\n\n  // Optionally, you can use connection pools to increase query performance\n  pool: { min: 0, max: 80 },\n});\n\n(async () => {\n  // Create a demo table called \"users\"\n  await knex.schema.createTable(\"users\", (table) => {\n    table.increments(\"id\");\n    table.string(\"username\");\n    table.integer(\"points\");\n  });\n\n  // Add a demo user to the table with 0 points\n  await knex(\"users\").insert({\n    username: \"alice\",\n    points: 0,\n  });\n\n  // Increment the points by 1\n  await knex(\"users\")\n    .where(\"username\", \"alice\")\n    .update({\n      points: knex.raw(\"points + 1\"),\n    });","metadata":{"id":247}}],["248",{"pageContent":"username: \"alice\",\n    points: 0,\n  });\n\n  // Increment the points by 1\n  await knex(\"users\")\n    .where(\"username\", \"alice\")\n    .update({\n      points: knex.raw(\"points + 1\"),\n    });\n\n  // Get the user\n  const user = await knex(\"users\").where(\"username\", \"alice\").first();\n\n  // Print the user\n  console.log(user);\n\n  // Delete the user\n  await knex(\"users\").where(\"username\", \"alice\").delete();\n})();\n```\n\n## Usage (Python)\n\n### Preparation\n\n1. <span>\n     Use the Packager to install <code>psycopg2</code>\n   </span>\n2. <span>\n     Connect to the DB with <code>psycopg2</code> using the URL secret\n   </span>\n\n   ```py\n   import psycopg2.pool\n\n   # Create a connection pool with a min_size of 0 and a max_size of 80\n   # Use the `DATABASE_URL` environment variable we provide to connect to the Database\n   # It is included in your Replit environment automatically (no need to set it up)\n   pool = psycopg2.pool.SimpleConnectionPool(0, 80, process.env.DATABASE_URL)\n\n   # Get a connection from the pool\n   conn = pool.getconn()\n\n   # Create a cursor using the connection\n   cur = conn.cursor()\n\n   # Do your database operations using the cursor\n   # <Your code goes here>\n\n   # Close the cursor and return the connection to the pool\n   cur.close()\n   pool.putconn(conn)\n\n   # When you are done using the pool, close it to release the resources\n   pool.closeall()\n   ```\n\n### Code\n\n1. <span>Create a table</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       CREATE TABLE users (\n           id SERIAL PRIMARY KEY,\n           username VARCHAR(255),\n           points INTEGER\n       )\n       \"\"\"\n   )\n   ```\n\n2. <span>Insert a row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       INSERT INTO users (username, points)\n       VALUES (%s, %s)\n       \"\"\",\n       ('alice', 0)\n   )\n   ```\n\n3. <span>Update the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       UPDATE users\n       SET points = points + 1\n       WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   ```\n\n4. <span>Get the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       SELECT *\n       FROM users\n       WHERE username = %s","metadata":{"id":248}}],["249",{"pageContent":"WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   ```\n\n4. <span>Get the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       SELECT *\n       FROM users\n       WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   user = cur.fetchone()\n   ```\n\n5. <span>Print the row to the console</span>\n\n   ```py\n   print(user)\n   ```\n\n6. <span>Delete the row</span>\n\n   ```py\n   cur.execute(\n       \"\"\"\n       DELETE FROM users\n       WHERE username = %s\n       \"\"\",\n       ('alice',)\n   )\n   ```\n\n### Final Code\n\n```py\nimport psycopg2.pool\n\n\n# Create a connection pool with a min_size of 0 and a max_size of 80\n# Use the `DATABASE_URL` environment variable we provide to connect to the Database\n# It is included in your Replit environment automatically (no need to set it up)\npool = psycopg2.pool.SimpleConnectionPool(0, 80, process.env.DATABASE_URL)\n\n# Get a connection from the pool\nconn = pool.getconn()\n\n# Create a cursor using the connection\ncur = conn.cursor()\n\n# Do your database operations using the cursor\n\n# Create a demo table called \"users\"\ncur.execute(\n    \"\"\"\n    CREATE TABLE users (\n        id SERIAL PRIMARY KEY,\n        username VARCHAR(255),\n        points INTEGER\n    )\n    \"\"\"\n)\n\n# Add a demo user to the table with 0 points\ncur.execute(\n    \"\"\"\n    INSERT INTO users (username, points)\n    VALUES (%s, %s)\n    \"\"\",\n    ('alice', 0)\n)\n\n# Increment the points by 1\ncur.execute(\n    \"\"\"\n    UPDATE users\n    SET points = points + 1\n    WHERE username = %s\n    \"\"\",\n    ('alice',)\n)\n\n# Get the user\ncur.execute(\n    \"\"\"\n    SELECT *\n    FROM users\n    WHERE username = %s\n    \"\"\",\n    ('alice',)\n)\n\nuser = cur.fetchone()\n\n# Print the user\nprint(user)\n\n# Delete the user\ncur.execute(\n    \"\"\"\n    DELETE FROM users\n    WHERE username = %s\n    \"\"\",\n    ('alice',)\n)\n\n# Close the cursor and return the connection to the pool\ncur.close()\npool.putconn(conn)\n\n# When you are done using the pool, close it to release the resources\npool.closeall()\n```","metadata":{"id":249}}],["250",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Replit Database\n\n## What is Replit Database?\n\nReplit Database is a simple, user-friendly key-value store inside of every Repl. No configuration is required; you can get started right away!\n\nRead on for answers to Database FAQs, or jump right in and follow [this basic phone book tutorial](/tutorials/python/using-the-replit-database) operations with Replit Database.\n\nHere's a short video on how to use the Replit database, or read the text explanation below.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Vx5Ci77K-ss\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Using Replit Database\n\nEvery Repl can access and interact with its own unique Replit Database. This database can be accessed from the library, and requires no configuration beyond import. Interacting with the Replit Database follows much of the same syntax and logic as creating and interacting with the key-value pairs of a Python dictionary.\n\n### Importing the database\n\nTo access the Replit database we use `import db`:\n\n```python\nfrom replit import db\n```\n\n### Creating data\n\nThe Replit Database works a lot like a Python dictionary, so we can add data to our database by assigning values to keys using square bracket indexing:\n\n```python\nfrom replit import db\n\n# Add a key and associated value to the database\ndb[\"key1\"] = \"value1\"\n```\n\nReplit Database is able to handle different types of values like lists, dictionaries, integers, floats, NoneType, and strings:\n\n```python\nfrom replit import db\n\ndb[\"key1\"] = \"value1\"\ndb[\"integer_1\"] = 100\ndb[\"float_1\"] = 9.99\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\ndb[\"none_key\"] = None\n```\n\nMake use of 2D lists as a value to create table-like structures within your database:\n\n```python\nfrom replit import db\n\ndb[\"2D_key\"] = [[\"id\",\"name\"],[1,\"James\"],[2,\"Angel\"]]\n\nfor column in db[\"2D_key\"]:\n    print(column)\n```\n\n**Output:**\n\n```","metadata":{"id":250}}],["251",{"pageContent":"```python\nfrom replit import db\n\ndb[\"2D_key\"] = [[\"id\",\"name\"],[1,\"James\"],[2,\"Angel\"]]\n\nfor column in db[\"2D_key\"]:\n    print(column)\n```\n\n**Output:**\n\n```\nObservedList(value=[\"id\",\"name\"])\nObservedList(value=[1,\"James\"])\nObservedList(value=[2,\"Angel\"])\n```\n\nThe `ObservedList` object you see in the output is a Replit Database object that acts like a Python list and can be indexed as such.\n\n### Reading data\n\nRead from your database by referencing the key of the value:\n\n```python\nfrom replit import db\n\n# Create data in the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Access and print data from the database\nprint(db[\"key1\"])\nprint(db[\"my_list\"][0])\nprint(db[\"my_dictionary\"][\"key_a\"])\n```\n\n**Output:**\n\n```\nvalue1\n1\nvalue_a\n```\n\nWe can use the built-in Python dictionary method `.get()` to retrieve the value at the key passed in as an argument:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"float_1\"] = 9.99\n\n# Access the value of the data created by its key\nprint(db.get(\"float_1\"))\n```\n\nWe can loop through the keys stored in the database to get access to the values of those keys:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Access the keys from the database and print the values associated for key in db\n  print(db.get(key))\n```\n\nThe `.keys()` method returns a list of the keys in our database:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Print all the keys from the database\nprint(db.keys())\n```\n\n**Output:**\n\n```\n{'key1', 'my_list', 'my_dictionary', '2D_keys'}\n```\n\nThe `.prefix()` method allows us to get the values of keys with only part of that key. This allows us to return multiple values for keys that share the same prefix:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"key1\"] = \"value1\"","metadata":{"id":251}}],["252",{"pageContent":"```python\nfrom replit import db\n\n# Create data for the database\ndb[\"key1\"] = \"value1\"\ndb[\"my_list\"] = [1,2,3]\ndb[\"my_dictionary\"] = {\"key_a\": \"value_a\", \"key_b\": \"value_b\"}\n\n# Print all the keys from the database that have a prefix of \"my\"\nprint(db.prefix(\"my\"))\n```\n\n**Output:**\n\n```\n('my_dictionary', 'my_list')\n```\n\n### Updating data\n\nWe can update values that are stored in our database by assigning new values to their associated key:\n\n```python\nfrom replit import db\n\n# Create data with \"float_1\" as key and print\ndb[\"float_1\"] = 9.99\nprint(db[“float_1”])\n\n# Update data at \"float_1\" key and print\ndb[“float_1”] = 3.33\nprint(db[“float_1”])\n```\n\n**Output:**\n\n```\n9.99\n3.33\n```\n\nWe can also mutate numbers that are stored in our database:\n\n```python\nfrom replit import db\n\n# Create data with \"float_1\" as key and print\ndb[\"float_1\"] = 9.99\n\n# Perform an operation on the data\ndb[\"float_1\"] += 0.01\n\n# Print result of operation\nprint(db[\"float_1\"])\n```\n\n**Output:**\n\n```\n10.0\n```\n\n### Deleting data\n\nWe make use of the `del` keyword and square bracket indexing to delete key-value pairings from our database:\n\n```python\nfrom replit import db\n\n# Create data for the database\ndb[\"float_1\"] = 9.99\n\n# Delete the data we added at the key \"float_1\"\ndel db[\"float_1\"]\nif \"float_1\" not in db:\n\tprint(\"Value deleted successfully.\")\n```\n\n**Output:**\n\n```\nValue deleted successfully.\n```\n\n### Summary\n\nOverall, the Replit Database is a simple and useful database that allows us to easily and dynamically update our data. The features resembling the Python dictionary mean we can use the built-in Python dictionary functions to interact with our database.\n\n## FAQs\n\n### Where can I find my database?\n\nWhen viewing your Repl, you'll find the Database icon toward the bottom of the sidebar – it's the second last icon. That’s Replit’s key-value database, built right into your Repl!\n\n### How can I access my database?\n\nTo access Database, you can use a library or simple curl commands.\n\nReplit provides official clients. Use one of these clients if your Repl is in one of these languages:","metadata":{"id":252}}],["253",{"pageContent":"### How can I access my database?\n\nTo access Database, you can use a library or simple curl commands.\n\nReplit provides official clients. Use one of these clients if your Repl is in one of these languages:\n\n- [Python](https://pypi.org/project/replit/)\n- [Node.js](https://www.npmjs.com/package/@replit/database)\n- [Go](https://github.com/replit/database-go)\n\n### How do I use my database?\n\nWhen you click on the Database icon in the sidebar, you'll see some instructions. If your Repl is in a language that has an official Database client, you can quickly import it and start using Database by clicking on the \"Insert\" buttons.\n\nIf your language does not have a client, we provide some usage examples below. They are found below, and are a useful reference if you wish to write your own Database client.\n\n**Set**\n\n```\ncurl $REPLIT_DB_URL -d '<key>=<value>'\n```\n\nIf your key and value don't use any unsafe characters, you can use\nan alternative version:\n\n```\ncurl -XPOST $REPLIT_DB_URL/<key>=<value>\n```\n\n**Get**\n\n```\ncurl $REPLIT_DB_URL/<key>\n```\n\n**Delete**\n\n```\ncurl -XDELETE $REPLIT_DB_URL/<key>\n```\n\n`Delete` returns status code 204 if the key was deleted or 404 if the key did not exist.\n\n**List**\n\n```\ncurl $REPLIT_DB_URL --get -d 'prefix=<key>'\n```\n\nor\n\n```\ncurl \"$REPLIT_DB_URL?prefix=<key>\"\n```\n\nThe returned keys will be separated by newlines.\n\nListing also takes a query parameter: `encode=true`. If set, the returned keys will be URL encoded. This lets you safely handle keys that contain newlines.\n\n### What is REPLIT_DB_URL?\n\nThis is the environment variable we have created with your Repl. It is the key that will allow you to access your database.\n\nThe clients listed above take care of using `REPLIT_DB_URL` for you, but you will need it if you want to write your own client or use a database from a language that doesn't yet have a client. Here are two examples:\n\nPython:\n\n```\nimport os\nprint(os.getenv(\"REPLIT_DB_URL\"))\n```\n\nNode.js:\n\n```\nconsole.log(process.env.REPLIT_DB_URL)\n```","metadata":{"id":253}}],["254",{"pageContent":"Python:\n\n```\nimport os\nprint(os.getenv(\"REPLIT_DB_URL\"))\n```\n\nNode.js:\n\n```\nconsole.log(process.env.REPLIT_DB_URL)\n```\n\n`REPLIT_DB_URL` provides full access to your database. Therefore, you should take care not to expose it to the world or share it with people you don't trust.\n\nThe value of `REPLIT_DB_URL` changes from time to time, so we recommend that you don't copy it elsewhere. Subsequent reads by the same process will see the same value. We will restart your Repl if we need to change it after it has been read.\n\nNote: `REPLIT_DB_URL` is not available in Deployments. Instead, the value of the URL is stored in `/tmp/replitdb`. If you are writing a client for Replit Database, read the value from `/tmp/replitdb` first, and fall back to the environment variable if that file does not exist.\n\n### What limits does Database have?\n\nThe limits are currently:\n\n- 50 MiB per database (sum of keys and values)\n- 5,000 keys per database\n- 1024 bytes per key\n- 5 MiB per value\n\nThere are rate limits that apply to all operations. You will receive an HTTP 429 if you exceed them. We recommend implementing an exponential backoff and retry to handle this case.\n\n### How can I tell how much storage I'm using?\n\nThe Database sidebar shows you the number of keys in your database along with\nthe total storage occupied by your keys and values.\n\n### Is my Database private?\n\nYes, each Database is private and isolated. Every Repl has its own database, and they are not shared among repls.\n\n### How do I share a database across repls?\n\nThe easiest way to do this is to use one Repl as the primary database and have other repls connect to it via web hosting. [Here’s an example Repl in Python](https://replit.com/@util/Replit-Database-proxy).\n\nAny requests sent to the above Repl will operate on its database, so sending\nrequests to it from other repls means that they all share the same information.","metadata":{"id":254}}],["255",{"pageContent":"---\nsidebar_position: 1\n---\n\n# About Deployments\n\nDeployments are a way to release a snapshot of your Repl, ensuring that changes made within the editor don't disrupt the production build. Customize run and build commands, and connect the deployment to a `<app-name>.replit.app` or a custom domain.\n\nReplit offers deployments for all use cases:\n- [Autoscale Deployments](/hosting/deployments/autoscale-deployments): scale to zero to save costs, and scale up to multiple instances to handle high traffic\n- [Static Deployments](/hosting/deployments/static-deployments): fast static sites, free for subscribed users\n- [Reserved VMs](/hosting/deployments/reserved-vm-deployments): a single VM for cost certainty and special use cases\n\n## What is a Deployment?\n\nA deployment saves your Repl's current state as a \"snapshot\", and runs it on a shared or dedicated machine. This allows you to share your Repl with others, or host a website or Discord bot with minimal downtime. Unlike publishing to the community, which doesn't host your Repl under a domain and has a wakeup phase when accessed via the cover page, the other deployment options offer different specs and capabilities for your Repl in production.\n\n## Why Deploy?\n\nDeployments are useful for a variety of reasons. For example, you can use them to:\n\n- Host a website or Discord bot with minimal downtime\n- Separate your development environment from your production environment\n- Share a snapshot of your Repl with others\n\n## How to Deploy\n\nDeployments are initiated from the Repl editor. Simply click the \"Release\" button or open the \"Deployments\" tool to get started.\n\n## Which Deployment should I choose?\n\nReplit offers three types of Deployments to serve different use cases. Choose the one that best fits your needs.\n\n### Autoscale Deployments\n\n[Autoscale Deployments](/hosting/deployments/autoscale-deployments) is our most commonly recommended option. It offers both flexible machine sizing and horizontal scaling.","metadata":{"id":255}}],["256",{"pageContent":"### Autoscale Deployments\n\n[Autoscale Deployments](/hosting/deployments/autoscale-deployments) is our most commonly recommended option. It offers both flexible machine sizing and horizontal scaling.\n\nAutoscale can scale to 0, 1, or many instances as required. You're only charged when the CPU is active during request processing.\n\nIt is our recommended choice for websites, web applications, APIs, or microservices.\n\nAutoscale is the right choice if:\n* Your application is a server using HTTP, HTTP/2, WebSockets, or gRPCs to handle requests.\n* You want to try multiple ideas without spending for applications that don't receive traffic.\n* You want to be able to scale up quickly to handle large amounts of requests.\n* You need our highest reliability (99.95% uptime).\n\nYour app may not be right for Autoscale if:\n* Your application runs background activities outside of request handling.\n* Your application can't run multiple instances in parallel.\n* Your application can't handle multiple requests in parallel.\n* Restarts are disruptive to your application.\n\n### Reserved VM Deployments\n\n[Reserved VM Deployments](/hosting/deployments/reserved-vm-deployments) run exactly one copy of your application on a single VM. It offers flexible machine sizing with cost certainty.\n\nIt is our best choice for long running or compute intensive applications and jobs. If your application was not a good fit for Autoscale, consider Reserved VMs instead.\n\nReserved VM is the right choice if:\n* You want cost certainty.\n* Your application is not a server.\n* Your application does not tolerate being restarted easily.\n* You have a long running WebSocket connection (eg. bots).\n* You run background activities outside of request handling.\n* Your require high reliability (99.9% uptime).\n\n### Static Deployments\n\n[Static Deployments](/hosting/deployments/static-deployments) serve static content such as HTML, JavaScript, and CSS files. There is no server involved.","metadata":{"id":256}}],["257",{"pageContent":"### Static Deployments\n\n[Static Deployments](/hosting/deployments/static-deployments) serve static content such as HTML, JavaScript, and CSS files. There is no server involved.\n\nThis is a cost effective way to share simple websites such as portfolios, personal sites, or company landing pages.\n\nStatic Deployments are included for free in Replit plans, you only pay for outbound transfer based on traffic to the site.","metadata":{"id":257}}],["258",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Autoscale Deployments\n\nAutoscale can scale to 0, 1, or many instances as required. You're only charged when you have traffic, and you can scale up horizontally to handle high load when needed.\n\nIt is our recommended choice for websites, web applications, APIs, or microservices.\n\n## Autoscaling\n\n### Why Autoscale?\n\nAutoscaling helps with two scenarios:\n* Scaling to zero to save you money when you don't have traffic\n* Scaling up to multiple instances when you have high traffic and need more servers\n\nIf you only want the scale to zero behavior, set your max number of machines to 1 during deployment configuration.\n\n### How does scaling work?\n\nAutoscale Deployments adds or removes instances under the following conditions:\n* It will scale from one to zero instances of your application if there is no traffic for at least 15 minutes.\n* It will scale from zero to once instances of your application if you get a single request.\n* It will add instances as you exceed 80 concurrent requests per instance, up to you set maximum instances.\n* It will remove instances as your traffic lowers, to fall beneath the 80 concurrent requests target.\n\n## Tips for effective Autoscale services\n\nBecause Autoscale is based on request handling to be cost effective and to support horizontal scaling, there are some requirements and tips to work well.\n\n### Autoscale Requirements\n\nYour application must meet the following requirements:\n* It must listen for requests using HTTP, HTTP/2, WebSockets, or gRPCs.\n* It can not perform background activities outside of request handling.\n* It must be stateless, it cannot rely on persistent local state. Note that you may use _external_ state, such as databases like [PostgeSQL](/hosting/databases/postgresql-on-replit).\n\n### Autoscale Tips\n\nIf you are new to horizontally scaled applications, there are some tips you can follow to improve performance. The key constraints to remember are:\n* Your application will start new copies frequently","metadata":{"id":258}}],["259",{"pageContent":"If you are new to horizontally scaled applications, there are some tips you can follow to improve performance. The key constraints to remember are:\n* Your application will start new copies frequently\n* Your application will have multiple copies running at once\n* State stored locally is an in-memory filesystem\n\nHere are some tips to help you manage those contraints:\n\n**Report errors instead of crashing**\n\nHandle exceptions and do not let your application crash. Crashes will cause a new server to start, which slows your request processing. Instead, report errors using logging.\n\n**Use dependencies wisely**\n\nDynamic languages with dependent libraries (eg NodeJS modules) add to startup latency, and will slow requests when a new instance is starting. Minimize your dependencies or utilize lazy loading if your language supports it.\n\n**Lazily load global variables**\n\nGlobal variables are initialized at startup, which will slow requests when a new instance is starting. Lazily initializing these variables will speed up initialization.\n\n**Use remote storage**\n\nSince there are multiple copies of your application running, use an external data store that can handle multiple concurrent writers such as [PostgeSQL](/hosting/databases/postgresql-on-replit) or MongoDB.\n\n**Delete temporary files**\n\nFiles your application writes locally will live in an in-memory filesystem. To free up memory for your application, use this sparingly and delete files after they are no longer needed.\n\n## Billing\n\n### What am I charged for?\n\nAutoscale Deployments are billed based on your actual usage. You are billed for:\n* CPU and RAM consumed during request processing (see below).\n* Requests processed.\n* Outbound transfer for bytes sent from your server.\n\nLearn more about our pricing for these resources under [usage-based billing](/hosting/about-usage-based-billing)\n\n### How does CPU billing work?","metadata":{"id":259}}],["260",{"pageContent":"* Outbound transfer for bytes sent from your server.\n\nLearn more about our pricing for these resources under [usage-based billing](/hosting/about-usage-based-billing)\n\n### How does CPU billing work?\n\nCPU and RAM are charged together in an \"execution unit\", based on the sizing you choose. You are only charged for execution for the time when a request is being processed. Execution time is rounded to the nearest 100 milliseconds.\n\nThis means you are _not_ charged for time your application is running, so long as no requests are actively being processed.\n\nAn open WebSocket is considered an active HTTP request. So execution time will be billed for any time where a WebSocket connection is open.\n\nNote: CPU is aggressively throttled outside of request processing. If your application is based on running background activities, instead consider a [Reserved VM Deployment](/hosting/deployments/reserved-vm-deployments).\n\n## How to use Autoscale Deployments\n\n### Setting up your Repl\n\nBefore using an Autoscale Deployment, you should verify that your Repl is working. You can do so using the \"Run\" button at the top of the workspace.\n\n![running your Repl](https://docimg.replit.com/images/deployments/static/01-testing-app-runs.png)\n\n### Creating a Deployment\n\nFirst, open up the Deployments tab. You can do this by clicking the \"Deploy\" button at the top right of the workspace or opening a new pane and typing \"Deployments\".\n\n![opening the Deployments tab](https://docimg.replit.com/images/deployments/static/04-opening-deployments-tab.png)\n\nIn the Deployments tool, select the \"Autoscale\" Deployment type, then proceed using the \"Set up your deployment\" button.\n\n![Deployments tab](https://docimg.replit.com/images/deployments/autoscale/03-autoscale-deployments-tab.png)\n\n### Configuring your Deployment\n\nIn the configuration menu, you can configure how your Autoscale Deployment behaves. You can configure the following:\n- **Machine Power:** How much vCPU and RAM the machines in your Deployment will use (each)","metadata":{"id":260}}],["261",{"pageContent":"- **Machine Power:** How much vCPU and RAM the machines in your Deployment will use (each)\n- **Max instances:** The maximum number of machines that your Deployment will scale up to in high traffic\n\n![autoscale configuration](https://docimg.replit.com/images/deployments/autoscale/04-autoscale-configuration.png)\n![configure machine power](https://docimg.replit.com/images/deployments/autoscale/05-machine-power-config.png)\n\n### Host Configuration\n\nHTTP requests will be sent to external port 80 of your deployment. Your server must listen for traffic on 0.0.0.0, listening on localhost or 127.0.0.1 won't work. There are two ways to expose the port:\n\n- Port Auto-Detection: If no ports have been configured in .replit, one will be detected automatically. The first opened port will be used; if your program uses multiple ports, consider using the approach below.\n- Configure a port [in the .replit config](https://docs.replit.com/programming-ide/configuring-repl#ports): If ports have been configured in .replit, one must be configured with `externalPort = 80`.\n\n### Starting your Deployment\n\nAfter configuring your Deployment, click \"Deploy\" to start the deployment process. Once the Deployment is complete, you can access details like the URL, build logs, and more. Learn more about managing your Deployment [here](/hosting/deployments/monitoring-a-deployment).","metadata":{"id":261}}],["262",{"pageContent":"---\nsidebar_position: 5\n---\n\n# Custom Domains with Deployments\n\n## Connecting Your Domain To Your Deployment\n\nFirst, you need to go into the \"Deployments\" pane of your Repl and click the \"Settings\" tab:\n\n![domains tab](https://docimg.replit.com/images/deployments/custom-domains/1.png)\n\nFrom there, you can add your domain to the domain linking panel:\n\n![domain linking panel](https://docimg.replit.com/images/deployments/custom-domains/2.png)\n\nNext, you will be prompted to copy information for the A and TXT records. The A record points your domain to your Repl, and the TXT record verifies that you own the domain.\n\n![copy domain information](https://docimg.replit.com/images/deployments/custom-domains/3.png)\n\nOnce you have copied the info, you can add the A and TXT records to your domain. You can link your Repl to a root domain or a subdomain. In my case, the root domain would be `thedevbird.com`, but for this tutorial, we will link the domain: `kaboom.thedevbird.com` to our Repl.\n\n_Note: I am using Hover for DNS management in this tutorial, but it should be comparable to any other DNS manager_\n\n![adding A record](https://docimg.replit.com/images/deployments/custom-domains/4.png)\n\nEnter @ for hostname and the IP address from your deployments settings panel.\n\n![adding TXT record](https://docimg.replit.com/images/deployments/custom-domains/5.png)\n\nCopy and paste the TXT record to your DNS settings and save the new record.\n\n### Name Field\n\nThe **name** is your subdomain prefix, such as `kaboom` (e.g.: <code><b>kaboom</b>.thedevbird.com</code>) or your root domain: `example.com`.\n\n### Target Field\n\nThe **target** is what the record will point to, usually the IP you copied from the domain linking panel.\n\n## Waiting for DNS Propagation","metadata":{"id":262}}],["263",{"pageContent":"### Target Field\n\nThe **target** is what the record will point to, usually the IP you copied from the domain linking panel.\n\n## Waiting for DNS Propagation\n\nThe time to fully propagate DNS changes can range from a few minutes to about 24-48 hours. We recommend using a tool such as https://whatsmydns.net/ to keep track of the DNS propagation. All you need to do is input your custom domain (`tutorial.thedevbird.com` in this case) and select the DNS record type you want to check.\n\nIn the screenshots below, you can see how quickly the TXT record propagated. In contrast, when making this tutorial, the A record had only propagated to one primary DNS server in the same time span.\n\n![TXT propogation](https://docimg.replit.com/images/deployments/custom-domains/txt-propagation.png)\n![A propogation](https://docimg.replit.com/images/deployments/custom-domains/a-propagation.png)\n\n**The key to linking your domain is patience.** Your Repl won't be able to connect to your custom domain until the DNS records are propagated all the way through.\n\n## We Have Liftoff!\n\nOnce your DNS records have been fully propagated, you can check back on the Domains tab for your Deployment, which should show that your domain has been verified:\n\n![custom domain is verified](https://docimg.replit.com/images/deployments/custom-domains/domain-verified.png)\n\nIf you don't see this, please send a support ticket via https://replit.com/support and **make sure to include a screenshot of your DNS records, the custom domain you want to link, and the link to your Repl.**","metadata":{"id":263}}],["264",{"pageContent":"---\nsidebar_position: 6\n---\n\n# Deploying a GitHub repository\n\nIf you have a project hosted on GitHub that you want to deploy using Replit, the process is incredibly simple. Just follow these easy steps to import your repository, ensure its smooth operation, and deploy it to a public URL for hosting.\n\n## Import a Repl from GitHub\n\n1. Navigate to https://replit.com/new or click the \"+\" button at the top right of the screen to create a new Repl.\n\n   <img class=\"image\" alt=\"new repl button\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/1-new-repl-button.png\" />\n\n2. Click the \"Import from GitHub\" button at the top right of the modal.\n\n   <img class=\"image\" alt=\"import from github button\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/2-import-from-github-button.png\" style={{ width: '80%' }} />\n\n3. Enter the URL or the name of the GitHub repository you want to import. You do not need to be the repository owner.\n\n   <img class=\"image\" alt=\"import from github modal\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/3-import-from-github-modal.png\" style={{ width: '80%' }} />\n\n## Configure the Repl\n\n1. After importing, configure the run command for the Repl. This is usually auto-filled, but you can modify it to suit your project's requirements.\n\n   <img class=\"image\" alt=\"github run command\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/4-github-run-command.png\" />\n\n2. Click the \"Run\" button at the top right of the screen to ensure the Repl can run.\n\n   <img class=\"image\" alt=\"run button\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/5-run-button.png\" style={{ width: '60%' }} />\n\n3. The Repl will install packages and execute the run command.\n\n   <img class=\"image\" alt=\"install packages\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/6-install-packages.png\" />\n\n### Modify the Run Command\n\nIf you need to change the run command:","metadata":{"id":264}}],["265",{"pageContent":"### Modify the Run Command\n\nIf you need to change the run command:\n\n1. Click the \"Show hidden files\" button at the top right of the file tree and open the `.replit` file.\n\n   <img class=\"image\" alt=\"show hidden files\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/8-show-hidden-files.png\" style={{ width: '50%' }} />\n   <img class=\"image\" alt=\"dot replit file\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/9-dot-replit-file.png\" style={{ width: '60%' }} />\n\n2. In the `.replit` file, change the `run` line to:\n\n   ```bash\n   run = \"npm run <your run command>\"\n   ```\n\n   <img class=\"image\" alt=\"new run command\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/10-new-run-command.png\" />\n\n3. Rerun the Repl to ensure it works as expected. Once confirmed, proceed to deploy the Repl.\n\n   <img class=\"image\" alt=\"successful run\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/11-successful-run.png\" />\n\n## Deploying the Repl\n\n1. Click the \"Release\" button at the top right of the screen.\n\n   <img class=\"image\" alt=\"release button\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/12-release-button.png\" style={{ width: '75%' }} />\n\n2. Select the \"Deploy\" option, allowing you to deploy the Repl to a public `<app-name>.replit.app` URL (or a custom domain) for public hosting.\n\n3. Choose the deployment tier you want to use. You can use the dropdown to select the perfect power for your deployment machine. Learn more about the different deployment tiers [here](https://replit.com/pricing).\n\n   <img class=\"image\" alt=\"deployment tiers\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/13-deployment-tiers.png\" style={{ width: '75%' }} />","metadata":{"id":265}}],["266",{"pageContent":"<img class=\"image\" alt=\"deployment tiers\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/13-deployment-tiers.png\" style={{ width: '75%' }} />\n\n   _Note: Dedicated machines provide full, unshared CPU power for consistent performance. In contrast, shared machines allocate CPU resources among multiple virtual machines, potentially leading to variable performance based on other users' activities._\n\n4. Next, you will see a summary of the purchase. This includes the cost of the tier and if auto-refill is enabled. Click the \"Deploy your project\" button to continue.\n\n   <img class=\"image\" alt=\"deployment purchase\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/13.5-deployment-purchase.png\" style={{ width: '75%' }} />\n\n5. Enter the build command, run command, and any environment variables needed for production.\n\n   <img class=\"image\" alt=\"deployment modal\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/14-deployment-modal.png\" style={{ width: '75%' }} />\n\n   _Note: f \"Health check before promoting\" is selected, the system verifies that your deployment opens a port before promoting it. You can deselect this option to bypass the health check for projects that don't require opening a port (e.g., Discord or Slack bots)._\n\n6. Once you have entered the required information, click the \"Deploy\" button to initiate the deployment process.\n\n   <img class=\"image\" alt=\"deployment building\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/15-deployment-building.png\" style={{ width: '75%' }} />\n   <img class=\"image\" alt=\"deployment done\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/17-deployment-done.png\" style={{ width: '75%' }} />\n\n## Monitoring a Deployment","metadata":{"id":266}}],["267",{"pageContent":"<img class=\"image\" alt=\"deployment done\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/17-deployment-done.png\" style={{ width: '75%' }} />\n\n## Monitoring a Deployment\n\nWe offer a few ways of interacting and monitoring your deployments. You can view and change details such as custom domains, build logs, and build history. Find information on editing deployment details [here](/hosting/deployments/monitoring-a-deployment).\n\n## Troubleshooting\n\nIf you're having trouble with your deployment or the deployment fails, refer to [this page](/hosting/deployments/troubleshooting) for steps to mitigate issues with deployments.","metadata":{"id":267}}],["268",{"pageContent":"---\nsidebar_position: 8\n---\n\n# Deployments FAQ\n\n## Why did my deployment fail?\n\nYou can debug your deployment by viewing the logs. Learn more about logs [here](/hosting/deployments/troubleshooting.md).\n\nIf you're still having issues, please send an email to [support@replit.com](mailto:support@replit.com).\n\n## How do I deploy a Repl with a custom domain?\n\nYou can connect a custom domain to your deployment by following the steps [here](/hosting/deployments/custom-domains.md).\n\n## What are the limits for deployments?\n\nThe limits for deployments are determined by the tier you choose for your Repl. Each tier offers a different combination of CPU, RAM, and outbound transfer. The first four tiers are for shared hosting, while the next four tiers are for dedicated hosting. The specific resource limits for each tier can be found during the deployment process when selecting a tier and on our [pricing page](https://replit.com/pricing).\n\n## How does deployments pricing work?\n\n### Reserved VM\n\nReserved VM pricing is based on [Cycles](/cycles/about-cycles). Each Cycle is equivalent to $0.01. The cost of a deployment depends on the tier you choose, with higher tiers having higher prices. You can view the pricing for each tier during the deployment process when selecting a tier and on our [pricing page](http://replit.com/pricing).\n\nTo use [Cycles](/cycles/about-cycles) for your deployments, you need to have a balance of Cycles in your account. If you don't have any Cycles, you can purchase deployments with a credit/debit card from the deployments pane. Once you have Cycles in your account, they will be used to cover the cost of your deployments based on the pricing of the selected tier.\n\n### Autoscale\n\nAutoscale pricing requires a credit or debit card to be on your account.\n\n#### Compute Units","metadata":{"id":268}}],["269",{"pageContent":"### Autoscale\n\nAutoscale pricing requires a credit or debit card to be on your account.\n\n#### Compute Units\n\nAutoscale is billed based on your resource usage. A compute unit measures both the amount of time and the machine power used (CPU + RAM) to complete a task. You pick your app’s machine power, so if you choose a more powerful machine, it will use more compute units per second while it is running. Each compute unit costs $0.00000125.\n\n_6 million compute units per month are included in Replit Core._\n\n#### Requests\n\nIn addition to compute units, Autoscale deployments are billed for requests. 2.5 Million requests per month are included in Replit Core. If you use all the compute units or requests from your plan, any additional usage will be billed at the end of the month or once you accumulate $10 of usage. Compute unit overages are charged at $0.00000125 per compute unit. Any request overages are charged at $0.4 per million requests. You can always check your current usage for the month in your Account page.\n\n### Static\n\nStatic deployments are free. You may deploy up to 100 static sites if you have Replit Core. You are only responsible for [outbound data transfer](hosting/outbound-transfer.md). Replit Core includes 100GB of outbound data transfer per month.","metadata":{"id":269}}],["270",{"pageContent":"---\nsidebar_position: 9\n---\n\n# Deployments Migration Guide\n\nIf you are currently hosting your app or website with Always On or Repl.co and want to migrate to Deployments, this guide is for you.\n\nChoose a deployment type\nThe first thing to do is to identify which type of Deployment you need. There are three types:\n- Reserved VM\n- Autoscale\n- Static\n\nEach one works in a slightly different way.\n\nThe way Deployments work is simple. When you hit “Deploy”, we bundle up your code into a container and host it on our infrastructure.\n\nIf you choose the Reserved VM option, we host your app in a dedicated virtual machine. This type of deployment will virtually never restart, and you will be billed daily for one day of usage for your VM tier.\n\nIf you choose the Autoscale option, we host your app on managed container infrastructure. Autoscale deployments can scale up and down with the traffic you receive. You are only billed for the time that your deployment spends processing requests, and your deployment will go to sleep between requests.\n\nIf you choose the Static option, your app will be frontend-only. There is no container at all in this deployment type; we simply host your static files on your chosen subdomain.\n\nFor most Repls, we recommend using Autoscale deployments. If your app is a bot (such as a Discord or Telegram bot) or cannot tolerate restarts, choose the Reserved VM option.\n\n### Make sure your Repl works in the workspace\nIf you haven’t run your Repl in a while, do that first and make sure that the Repl works as intended. Unless it is a bot, it should open a webview and be accessible through the workspace.\n\nIf your Repl doesn’t work in the Workspace, it won’t work in a Deployment.\n\n### Configure your deployment\nThere are three things you need to configure when deploying your application:\n- Build command\n- Run command\n- Environment variables","metadata":{"id":270}}],["271",{"pageContent":"### Configure your deployment\nThere are three things you need to configure when deploying your application:\n- Build command\n- Run command\n- Environment variables\n\nThe build command runs during the Build step of the deployment, which occurs before the code is bundled into a [container](https://www.docker.com/resources/what-container/). For example, if your app has a build step such as “npm run build”, you would run that here.\n\nThe run command runs when your deployment starts up. This happens during the Promote step of the deployment. For example, you might run “npm start” to start your application here.\n\nThe environment variables are passed to both your build and your run commands. When you first deploy, your existing secrets will be copied over. If you add a secret later on, you’ll need to remember to copy that over to your deployment as well.\n\nMake sure that your build and run commands are working correctly by running them in the Shell tab before deploying.\n\n### Enjoy better reliability\nThat’s all it takes! We built deployments to be a better, more reliable version of Always On and it should work better in every way.\n\nIf you have any issues getting your deployment to work, please consult the [Troubleshooting Guide](https://docs.replit.com/hosting/deployments/troubleshooting). You can also [book a debugging session with our team](https://calendly.com/debug-replit-deployments/20-minute-meeting).\n\nThe primary difference between Always On and Deployments is that Deployments do not support filesystem persistence. If you are relying on SQLite, JSON files, or anything else to persist data on your hosted app, that will not work in a deployed setting. Consider using [Replit Database](https://docs.replit.com/hosting/databases/replit-database) or [PostgreSQL](https://docs.replit.com/hosting/databases/postgresql-on-replit) instead.","metadata":{"id":271}}],["272",{"pageContent":"---\nsidebar_position: 7\n---\n\n# Monitoring a Deployment\n\n## Domains Tab\n\nIn the domains tab, you can link your deployment to one or more domains. To start, click the **Create Domain Link** button:\n\n![create domain link button](https://docimg.replit.com/images/deployments/monitoring-a-deployment/custom-domains.png)\n\nYou can learn more about our domain linking process [here](/hosting/deployments/custom-domains).\n\n### `replit.app` Domains\n\nYour deployment will be accessible via a `replit.app` domain by default. Your deployment's full URL will be `<project name>-<username>.replit.app` (`discord-bot-ShaneAtReplit.replit.app`, for example).\n\n## History Tab\n\nThe history tab provides a list of all the deployments you've made. This includes when a deployment was initiated and the ID of the deployment.\n\n![deployment history tab](https://docimg.replit.com/images/deployments/monitoring-a-deployment/deployment-history.png)\n\n## Logs Tab\n\nViewing the logs for your deployment will help you debug any issues you may have with your deployment. You can view the logs for your deployment by clicking the **Logs** tab:\n\n![deployment logs tab](https://docimg.replit.com/images/deployments/deploying-from-github/20-deployment-logs.png)\n\nIf you do run into issues with your deployment, refer to [this page](/hosting/deployments/troubleshooting) for how to debug failed deployments.\n\n## Settings Tab\n\nFrom the settings tab, you can update all the info you have configured for your Repl, such as the build command, run command, and environment variables.\n\n![deployment settings tab](https://docimg.replit.com/images/deployments/monitoring-a-deployment/deployment-settings.png)","metadata":{"id":272}}],["273",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Reserved VM Deployments\n\nRepls are not publicly accessible by default, accessible only via their cover page. Reserved VM Deployments enable you to release a snapshot of your Repl, ensuring that changes made within the editor don't disrupt the production build. Customize run and build commands, and connect the deployment to a `<app-name>.replit.app` or a custom domain.\n\n## Setting up a deployment\n\nStart by creating a deployment. Click the \"Release\" button located in the top right corner of the workspace.\n\n<img alt=\"release button\" src=\"https://docimg.replit.com/images/deployments/deploying-your-repl/release-button.png\"/>\n\nTwo deployment options are available:\n\n1. **Deploy:** Deploy your Repl to a public `<app-name>.replit.app` URL (or custom domain), ideal for hosting your app publicly/\n2. **Publish:** Publish your Repl to the community, which can be run from the cover page.\n\n<img alt=\"deployment options\" src=\"https://docimg.replit.com/images/deployments/deploying-your-repl/deployment-options.png\" style={{ width: '80%' }} />\n\n### Deploying a Repl\n\nAfter selecting **Deploy**, select Reserved VM and you will be prompted to choose a deployment tier.\n\nUnlike deploying to the community, which doesn't host your Repl under a domain and has a wakeup phase when accessed via the cover page, the other deployment options offer different specs and capabilities for your Repl in production.\n\n<img alt=\"deployment tier selection\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/13-deployment-tiers.png\" style={{ width: '75%' }} />\n\nNext, provide setup information such as the build command, run command, and any environment variables you want to set for production.\n\n<img alt=\"deployment info\" src=\"https://docimg.replit.com/images/deployments/deploying-from-github/14-deployment-modal.png\" style={{ width: '80%' }} />\n\nOnce you have entered the necessary information, click the \"Deploy\" button to start the deployment process.","metadata":{"id":273}}],["274",{"pageContent":"Once you have entered the necessary information, click the \"Deploy\" button to start the deployment process.\n\nAfter the deployment is complete, you can access details like the URL, build logs, and more. Learn more about editing deployment information [here](/hosting/deployments/monitoring-a-deployment)\n\n**Note: Viewing Deployment logs is very effective for debugging a failed deployment or an issue with your project. You can learn more about logs [here](/hosting/deployments/monitoring-a-deployment#logs-tab)**\n\n### Publishing a Repl\n\nYou will initiate the publishing process by clicking the **Publish** button, detailed [here](/hosting/sharing-your-repl).\n\n### Host Configuration\n\nIf your Reserved VM has a \"Web Server\" app type, your program must listen for requests on the correct address to deploy successfully (\"Background Worker\" apps will not receive HTTP requests and are exempt from this requirement).\n\nHTTP requests will be sent to external port 80 of your deployment. Your server must listen for traffic on 0.0.0.0, listening on localhost or 127.0.0.1 won't work. There are two ways to expose the port:\n\n- Port Auto-Detection: If no ports have been configured in .replit, one will be detected automatically. The first opened port will be used; if your program uses multiple ports, consider using the approach below.\n- Configure a port [in the .replit config](https://docs.replit.com/programming-ide/configuring-repl#ports): If ports have been configured in .replit, one must be configured with `externalPort = 80`.","metadata":{"id":274}}],["275",{"pageContent":"---\nsidebar_position: 10\n---\n\n# Speeding up Deploys with Caching\n\nIf your Python or Node Repl follows a set of constraints, it’s possible to speed up the deployment process by enabling package caching. This feature works by caching the language-specific dependencies of your Repl for reuse across deploys.\n\n## Prerequisites\n\n### Python\n\n- Your Repl uses Python 3.10 or above\n- All your application’s dependencies were installed with Poetry\n- Your project does not use internal packages installed with `poetry install`\n\n### Node\n\n- Your project uses npm version 7 or above\n\n## Enabling Package Caching\n\nIf your Repl follows the prerequisites above, you can try enabling package caching to speed up deploys. To do this, you need to define an environment variable in the `.replit` file. For Python Repls, the variable is `REPLIT_PYTHON_PACKAGE_LAYER`. For Node Repls, it's `REPLIT_NODEJS_PACKAGE_LAYER`.\n\nSet the correct environment variable in the `[env]` section of the `.replit` file.\n\n```\n[env]\n# For Python\nREPLIT_PYTHON_PACKAGE_LAYER = \"1\"\n# or For Node\nREPLIT_NODEJS_PACKAGE_LAYER = \"1\"\n```\n\nAfter the initial deployment with caching enabled, the build system will cache the dependencies for quicker future deployments.\n\n## Troubleshooting\n\nIf your deployment fails during the `Bundle` or `Promote` steps, you may need to disable package caching.\nTo do that, just remove the environment variable definitions from `.replit`.","metadata":{"id":275}}],["276",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Static Deployments\n\nStatic Deployments allow you to deploy static websites and frontend applications on Replit. If you don't need a backend server or can statically build your website using your frontend framework, Static Deployments allow you to deploy your website in a cost-effective manner versus deploying a [Reserved VM](/hosting/deployments/reserved-vm-deployments) or an [Autoscale Deployment](/hosting/deployments/autoscale-deployments).\n\n## Setting up your Repl\n\nBefore using a Static Deployment, you should verify that your Repl is working. You can do so using the \"Run\" button at the top of the workspace.\n\n<!-- ![running your Repl](https://docimg.replit.com/images/deployments/static/01-testing-app-runs.png) -->\n<img alt=\"running your Repl\" src=\"https://docimg.replit.com/images/deployments/static/01-testing-app-runs.png\" width=\"500\" />\n\nNext, ensure that your Repl can build your website into static files and take note of the directory. For example, if you are using **Vite**, you can run `npm run build` or `npx vite build` in the workspace's shell tool to initiate the build process. Once that is complete, you should see a `dist` directory in your Repl's file tree (or whichever output directory your framework uses).\n\n![npm run build](https://docimg.replit.com/images/deployments/static/02-npm-run-build.png)\n![dist directory](https://docimg.replit.com/images/deployments/static/03-dist-directory.png)\n\n## Creating a Deployment\n\nFirst, open up the Deployments tab. You can do this by clicking the \"Deploy\" button at the top right of the workspace or opening a new pane and typing \"Deployments\".\n\n![opening the Deployments tab](https://docimg.replit.com/images/deployments/static/04-opening-deployments-tab.png)\n\nIn the Deployments tool, select the \"Static\" Deployment type, then proceed using the \"Set up your deployment\" button.\n\n![Deployments tab](https://docimg.replit.com/images/deployments/static/05-deployments-tab.png)\n\n## Configuring your Deployment","metadata":{"id":276}}],["277",{"pageContent":"![Deployments tab](https://docimg.replit.com/images/deployments/static/05-deployments-tab.png)\n\n## Configuring your Deployment\n\nConfigure the build command and public directory that you noted earlier. The build command is run when your Deployment is created, and the public directory is the directory to which your static files are built.\n\n![configuring your Deployment](https://docimg.replit.com/images/deployments/static/06-preparing-the-deploynent.png)\n\n_Note: If you want to host all files within your Repl, use `./` as the public directory._\n\n### Index and 'Not Found' Pages\n\nYour static deployment's home page will be read from the `index.html` file in the public directory. You can also provide a custom 'Not Found' page by adding a `404.html` file in the public directory. This will set the page that's served when a route that doesn't exist is requested.\n\n## Starting your Deployment\n\nAfter configuring your Deployment, click \"Deploy\" to start the deployment process. Once the Deployment is complete, you can access details like the URL, build logs, and more. Learn more about managing your Deployment [here](/hosting/deployments/monitoring-a-deployment).\n\n![initiate the deployment process](https://docimg.replit.com/images/deployments/static/07-deployment-process.png)\n![deployment complete](https://docimg.replit.com/images/deployments/static/08-successful-deployment.png)\n\n## Billing\n\nStatic deployments are free to create for users with a Replit Core subscription (previously Hacker or Pro). Those users receive up to 100 static deployments. Please [contact us](https://support.replit.com) if you need more.\n\nUsers on the free plan will need to add a credit card before creating a Static Deployment. Free users also have 10 GiBs of outbound storage transfer. If you exceed 10GiBs, you will be billed for additional resourse usage at $0.10/GiB.\n\nYou will be billed for outbound storage transfer once you’ve exceeded your monthly allowance.","metadata":{"id":277}}],["278",{"pageContent":"---\nsidebar_position: 11\n---\n\n# Troubleshooting Common Deployment Issues\n\nHere are ten things you can try if you are having any trouble with your deployments.\n\nIf you still need assistance after trying all ten things, please post your question in the [Replit Help category on our forum](https://ask.replit.com/c/help/13) and we will help you as soon as possible.\n\n1. Does your Repl work within the Replit Workspace? Press the big button at the top of the screen that says “Run”. If it doesn’t show you a webview with a web address ending in the repl.co domain, your code doesn’t work. Once that’s fixed up, you can try deploying again.\n2. Is your program running continuously? Deployments expect that your program never runs to completion, and will try to restart it if it does. If your program just runs a function and exits, this will not work.\n3. If you’re running a website (as opposed to a bot), is the server listening on 0.0.0.0? Deployments can automatically detect which port your server is running on, but only if it’s listening on the 0.0.0.0 address. If it’s listening on localhost or 127.0.0.1, it won’t work.\n4. Are there any errors in your application? Look in the “Logs” tab at the top of the Deployments pane to see the output of your application. Are there any stack traces or exceptions that you can see? This indicates an error in your code due to various issues such as uninitialized variables or trying to use packages that aren’t installed.\n5. Are your run and build commands correct? Common mistakes here include typos, using incorrect flags, or specifying the wrong file or directory. Double-check your commands and make any necessary adjustments.\n6. Did you specify all your production secrets and environment variables in the Deployments pane? Putting them in the Secrets pane is not enough – they won’t copy over automatically. This may cause your application to fail in the initialization step with errors about undefined values.","metadata":{"id":278}}],["279",{"pageContent":"7. Is your Repl too big? Reserved and Autoscale Deployments only work on Repls that are 8 GB or less in size, and Static Deployments can only be up to 1 GB. Try deleting some files or using an external datastore, such as our integrated [PostgreSQL](https://docs.replit.com/hosting/databases/postgresql-on-replit).\n8. Does your homepage take a long time to load? Before marking your Deployment as successful, we run a health check where we try to reach it via an HTTP request. If your main page takes more than 5 seconds to load, the health check will time out and the Deployment will fail in the last step.\n9. Do you have any [ports specified in the .replit config](https://docs.replit.com/programming-ide/configuring-repl#ports)? If you have any ports specified, we turn off port auto-detection and rely on the config you have provided. You must specify a port in the config with an externalPort equal to 80 in order for the promotion step to pass. Make sure your server is listening on the specified localPort.\n10. Are you relying on SQLite or the file system for data storage? The file system available in deployments is not persistent, and gets reset every time you deploy your Repl. For data persistence, we recommend using a database such as our integrated [PostgreSQL](https://docs.replit.com/hosting/databases/postgresql-on-replit).\n11. Do the deployment logs contain messages on missing dependencies that exist in your Repl? Refer to the section on [package caching](#package-caching).\n\nHere's an example of what the logs tab might look like:\n\n![deployment logs tab](https://docimg.replit.com/images/deployments/deploying-from-github/21-deployment-logs-short.png)\n\n### Deploying Streamlit Applications\n\nStreamlit applications work seamlessly with Replit Deployments. To deploy a Streamlit application most easily, use [this template](https://replit.com/@replit/Streamlit?v=1).\n\nOr, set the run command for deployments to this:\n\n```","metadata":{"id":279}}],["280",{"pageContent":"Or, set the run command for deployments to this:\n\n```\nstreamlit run --server.address 0.0.0.0 --server.headless true --server.enableCORS=false --server.enableWebsocketCompression=false main.py\n```\n\nIf your application is in a different file other than `main.py`, replace `main.py` with the name of your file instead.\n\n### Package Caching\n\nTo improve development times on Node and Python deployments, the build process excludes development dependencies from the deployment bundle by default. Replit also caches your project's dependencies so that they can be reused across deployments. If you run into issues with missing dependencies, you may need to selectively disable these features.\n\nFirst, try including development dependencies in the deployment build. You can do that by defining the `REPLIT_KEEP_PACKAGE_DEV_DEPENDENCIES` environment variable in the `.replit` file.\n\n```\n[env]\nREPLIT_KEEP_PACKAGE_DEV_DEPENDENCIES = \"1\"\n```\n\nIf that doesn't work, you can disable package caching altogether. This can also be done by defining an environment variable in `.replit`. In this case the variable you need to define is `REPLIT_DISABLE_PACKAGE_LAYER`.\n\n```\n[env]\nREPLIT_DISABLE_PACKAGE_LAYER = \"1\"\n```\n\n#### Development Dependencies\n\nPackage managers typically mark some dependencies as development only. This can be useful for reducing bundle size when deploying your application to production.\n\nFor Python Repls, development dependencies are added to the `[tool.poetry.group.dev.dependencies]` group in the `pyproject.toml` file. You can check [this page](https://python-poetry.org/docs/managing-dependencies/) for more information on Python dependency management with Poetry.\n\nFor Node Repls, development dependencies are listed in the `devDependencies` section of the `package.json` file. For more information, check out [this npm Docs page](https://docs.npmjs.com/specifying-dependencies-and-devdependencies-in-a-package-json-file).","metadata":{"id":280}}],["281",{"pageContent":"---\nsidebar_position: 7\n---\n\n# Embedding Repls\nWith embeds, you can easily embed any public Repl you have.  Simply add the `?embed=true` attribute to the end of the Repl's URL. The following example demonstrates how to use an `iframe` to embed a Repl:\n\n```html\n<iframe src=\"<YOUR REPL LINK>\" width=\"600\" height=\"400\" />\n```\n\nNote: Replace `<YOUR REPL LINK>` with the link to your Repl (e.g. https://replit.com/@user/repl-name)\n\n<iframe src=\"https://replit.com/@torcado/SSSPICY?embed=1\" height=\"600\"/>","metadata":{"id":281}}],["282",{"pageContent":"---\nsidebar_position: 2\n---\n\n*Please note that this form of public hosting (development hosting) will be deprecated on January 1st, 2024, we recommend you use [static deployments](/hosting/deployments/static-deployments) as a more scalable solution. Read more about the transition [in our blog post](https://blog.replit.com/hosting-changes)*.\n\n# Hosting Static Web Pages\n\nYou can host web pages and static websites on Replit. Every Repl that hosts websites, including web servers, has a unique URL that you can share with others.\n\nAfter running a Repl, you can find its URL in the `Webview` tab.\n\n## Where to find my Repl's URL?\n\nRepls are hosted with the following URL Pattern: `http://REPL-NAME--USERNAME.repl.co`, where `REPL-NAME` is the name of the Repl and `USERNAME` is the owner's username.\n\nIf you create a Repl with your username as the title (e.g. https://replit.com/@username/username), it will be hosted at: `https://USERNAME.repl.co`.\n\n### End of Life for Dot-Style Domains\n\n**Note:** As of February 17th, 2023, we have switch to using `https://slug--username.repl.co` instead of `https://slug.username.repl.co`. Only users who created their account after the date will have the new URL format. To see which format your account uses, check the URL of your Repl's webview.\n\n## How to Update your Website\n\nChanges to your code will only take effect in the live version once you re-run the project. The changes will be reflected immediately if your Repl is an HTML Repl or an auto-refresh template.\n\n## Hosted Repl Example\n\nHere is an example of a hosted webpage using p5.js. You can view the live, full-screen version [here](https://p5js.replit.repl.co).\n\n<iframe height=\"800px\" width=\"100%\" src=\"https://replit.com/@replit/p5js?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## How to Use Custom Domains with Hosted Repls","metadata":{"id":282}}],["283",{"pageContent":"## How to Use Custom Domains with Hosted Repls\n\nYou can link any hosted, Repl to a custom domain that you own. This includes static sites (HTML Repls) and HTTP servers (any repl with a web server). Check out our documentation [here](/docs/hosting/custom-domains.md) to learn how to use Custom Domains.","metadata":{"id":283}}],["284",{"pageContent":"# Outbound Data Transfer Limits\n\nSince April 7th, 2023, we have updated the outbound transfer limits for all plans (Free, Replit Core) to enhance the user experience, maintain platform integrity, and provide predictable costs. These limits are in place to ensure fair access to Replit's resources.\n\n## Viewing Your Outbound Transfer Usage\n\nYou can view your outbound transfer usage in the `Resource Usage > Outbound Transfer` section of the [account page](https://replit.com/account#resource%20usage).\n\n![resource usage](https://docimg.replit.com/images/hosting/outbound-transfer/resource-usage.png)\n\nOn this page, you will see your total usage for the current month, which will be broken down by Repl. You will also see the total limit for your current plan. If you wish to increase your limit, press the `Increase limit` button.\n\n![usage by repl](https://docimg.replit.com/images/hosting/outbound-transfer/usage-by-repls.png)\n\n## What Counts Towards Outbound Transfer?\n\nAny data that is sent from your Repl to a client will count towards your outbound transfer limit. This includes:\n\n- HTTP requests\n- Websocket connections\n- Requests to Replit Database\n- Requests to an external API\n\nAny data sent to your Repl, regardless of which domain (repl.co, replit.app, custom domain), will count towards your outbound transfer limit.\n\n## What Happens if You Exceed Your Limit?\n\nIf you go over your limit, your Repls will effectively shut off. Your Repls will no longer be able to send any outbound data. However, this will not affect your Repl's ability to receive data.\n\nWe will send notification emails if you hit 50% and 100% of your outbound transfer usage.\n\nWe recommend that you monitor your outbound transfer usage to avoid hitting your limit. If you need more outbound transfer, you can upgrade to a higher-tier plan or purchase additional outbound transfer through our [Support team](https://replit.com/support).","metadata":{"id":284}}],["285",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Repl Auth 2.0 (beta)\n\nThis feature is not out to all users yet, and is hence in beta.\n\nTo help you authenticate users hassle-free, we have created Repl Auth. This allows you to authenticate users without having to write your own authentication logic or work with databases. You can simply authenticate a user with their Replit account without the need to store secure passwords. It's also faster to set up than something like Google authentication.\n\n## Setup\n\nYou'll need a Replit account for this tutorial so if you haven't already, head over to the [signup page](https://replit.com/signup) to create an account.\n\n## The \"Log in with Replit\" Sidebar\n\nThe Replit workspace includes a new sidebar pane that will be the go-to place for all your Repl Authentication needs. To enable its functionality, you must start a web app in your Repl. You could use HTML, React, NodeJS, Flask, or whatever your heart desires.\n\n![Intial Repl Auth Sidebar](https://docimg.replit.com/images/hosting/repl-auth/initial-auth-sidebar.png)\n\n## Using a prebuilt login page (the easy way)\n\nWith the \"Log in with Replit\" sidebar, you can enable login with just one click. Once you have a [web app running](https://replit-docs-2-repl-auth.krishatreplit.repl.co/hosting/deploying-http-servers), you can simply click \"Enable login page\" as shown above. This will require all users of your web app to log in before they can visit your site. They will see the following page:\n![Prebuilt Repl Auth Page](https://docimg.replit.com/images/hosting/repl-auth/auth-page.png)\n\n## Using a custom login button (the advanced way)\n\nTo use your own custom login button, click the text in the sidebar reading \"use your own custom button.\" Your sidebar will now show some code snippets that you can easily insert into your code.\n![Repl Auth Custom Button](https://docimg.replit.com/images/hosting/repl-auth/custom-button.png)\n\n### If you are using HTML:","metadata":{"id":285}}],["286",{"pageContent":"![Repl Auth Custom Button](https://docimg.replit.com/images/hosting/repl-auth/custom-button.png)\n\n### If you are using HTML:\n\nEnsure that you are in an HTML file. Then click \"Auto add\". A script should have been inserted in your code just before the `</head>` tag.\n\nNext, move your cursor to wherever your would like to add your button, and click \"Insert\". The button syntax should be added to your code in the desired location. You can change the text or add CSS to this button in the same way as other HTML elements.\n\nAfter refreshing your web page, you should see your custom button appear! For an example, please see our [HTML custom button example](#html-repl-with-custom-button) at the bottom of the page.\n\n### If you are not using HTML:\n\nIn the case that you are not using HTML, you will have to create your own button and login function. To help you out, we've included a javascript implementation of the login function below. For an example, please see our [React custom button example](#react-repl-with-custom-button) at the bottom of the page.\n\n```js\nfunction LoginWithReplit() {\n  window.addEventListener(\"message\", authComplete);\n  var h = 500;\n  var w = 350;\n  var left = screen.width / 2 - w / 2;\n  var top = screen.height / 2 - h / 2;\n\n  var authWindow = window.open(\n    \"https://replit.com/auth_with_repl_site?domain=\" + location.host,\n    \"_blank\",\n    \"modal =yes, toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=\" +\n      w +\n      \", height=\" +\n      h +\n      \", top=\" +\n      top +\n      \", left=\" +\n      left\n  );\n\n  function authComplete(e) {\n    if (e.data !== \"auth_complete\") {\n      return;\n    }\n\n    window.removeEventListener(\"message\", authComplete);\n\n    authWindow.close();\n    location.reload();\n  }\n}\n```\n\n## Getting user info\n\nMost information for getting user info will also live inside the \"Log in with Replit\" sidebar, under the \"Usage\" section.\n\n![Repl Auth User Info](https://docimg.replit.com/images/hosting/repl-auth/get-info.png)","metadata":{"id":286}}],["287",{"pageContent":"![Repl Auth User Info](https://docimg.replit.com/images/hosting/repl-auth/get-info.png)\n\nWe currently expose the following information for users that are logged in:\n\n- id\n- name\n- profileImage\n- bio\n- url\n- roles\n- teams\n\n### Getting user info from the client side\n\nTo access user info on the client side, we send a `GET` request to `/__replauthuser`. We are then returned a JSON object that contains the user information.\n\n#### If you are in HTML:\n\nYou can simply insert the code snippet listed under \"usage\" in the sidebar. See our [HTML example](#html-repl-with-custom-button) at the bottom of the page for more information.\n\n#### If you are not in HTML:\n\nYou will have to send your own fetch request to `/__replauthuser`. To help you out, we've included a javascript implementation of the login function below. See our [React example](#react-repl-with-custom-button) at the bottom of the page for more information.\n\n```\nasync function getUserInfo() {\n  return await fetch('/__replauthuser')\n}\n```\n\n### Getting user info from the server side\n\nTo access user info on the server side, we can access the following request headers:\n\n- `X-Replit-User-Id`\n- `X-Replit-User-Name`\n- `X-Replit-User-Profile-Image`\n- `X-Replit-User-Bio`\n- `X-Replit-User-Url`\n- `X-Replit-User-Roles`\n- `X-Replit-User-Teams`\n\n#### If you are in NodeJS:\n\nYou can simply insert the code snippets listed under \"usage\" in the sidebar. See our [NodeJS example](#nodejs-repl-with-custom-button) at the bottom of the page for more information.\n\n#### If you are not in NodeJS:\n\nYou will have to access the request headers on your own. To help you out, we've included a javascript implementation of the login function below. See our [Python Flask example](#python-flask-repl-with-custom-button) at the bottom of the page for more information.\n\n## Examples\n\nCheck out these examples to see Repl Auth in action!\n\n### HTML Repl with Custom Button","metadata":{"id":287}}],["288",{"pageContent":"## Examples\n\nCheck out these examples to see Repl Auth in action!\n\n### HTML Repl with Custom Button\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@util/Repl-Auth-HTML-Example?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n### React Repl with Custom Button\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@util/Repl-Auth-React-Example?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n### NodeJS Repl with Custom Button\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@util/Repl-Auth-Node-Example?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n### Python Flask Repl with Custom Button\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@util/Repl-Auth-Flask-Example?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":288}}],["289",{"pageContent":"# Status Manager\n\n## Overview\n\nThe status manager is where you can keep track of all of your Repls and their uptime. Using it, you can restart your Repls, view uptime logs, and other useful information. Status Manager is located under the \"Status\" tab on your profile / My Repls page (https://replit/com/@&lt;username&gt;)\n\n![status manager page](https://docimg.replit.com/images/status-manager/profile-page.png)\n\n## List View\n\nYou can view the uptime status of your Repls (\"Awake\" or \"Asleep\") from this list view. You can also start and stop your Repls **directly from this page**. We also show the duration since the last change in uptime status, i.e. how long a Repl has been awake or asleep for.\n\n![top level view](https://docimg.replit.com/images/status-manager/list-view.png)\n\n## Logs view\n\nYou can press the chevron icon of each Repl in the Status Page to view the uptime logs for that Repl. These logs will show the timestamp in your **local timezone**, and provide \"awake\" and \"asleep\" status for each log event.\n\n![logs view](https://docimg.replit.com/images/status-manager/log-view.png)","metadata":{"id":289}}],["290",{"pageContent":"---\nsidebar_position: 6\n---\n\n# Streaming native graphics using VNC\n\nReplit offers virtual network computing (VNC) functionality. VNC is a mature virtual desktop protocol that allows your Repl to stream a native desktop to your web browser. This protocol allows native applications (developed in Python, Java, C++, etc.) to open desktop windows as they would on any physical computer.\n\nThis streaming technology allows you to work with legacy applications in your browser from any device! For example, you could run a Python-powered game designed for desktop right on your mobile phone or tablet without making any changes to the underlying code.\n\n<a href=\"https://replit.com/@demcrepl/Tetris-in-Pygame\" target=\"_blank\">Tetris (powered by PyGame)</a>\n![tetris](https://docimg.replit.com/images/vnc/tetris.png)\n\n## How Can I Use VNC?\n\nAny Repl – in any language – can use a virtual desktop. No changes are needed to execute native graphics programs on Replit. The VNC pane will appear when any application attempts to open a native desktop window.\n\n## Securing Your Repl\n\nBy default, your VNC connection does not have a password and can only be accessed from https://replit.com since the connection relies on the same authentication used for the WebSocket. If you need to access your Repl via the external [noVNC](https://novnc.com) client, you can set a VNC password.\n\nSet a password in your Repl [secrets](/programming-ide/workspace-features/secrets) configuration. `Secrets` is a secure place to store passwords without the fear of other users accessing your passwords. Setting `VNC_PASSWORD` will add enhanced security when connecting remotely.\n\n## How Can I Use Fullscreen VNC?\n\nYou must have secured your Repl as instructed above to proceed with these steps.\n\n1. Execute the following command in your \"Shell\" tab: `echo $REPL_ID`\n\n   ![echo $REPL_ID](https://docimg.replit.com/images/vnc/replid.png)\n\n2. Construct your connection URL by replacing `REPL_ID` in with the output from above: `<REPL_ID>.id.repl.co`","metadata":{"id":290}}],["291",{"pageContent":"![echo $REPL_ID](https://docimg.replit.com/images/vnc/replid.png)\n\n2. Construct your connection URL by replacing `REPL_ID` in with the output from above: `<REPL_ID>.id.repl.co`\n\n3. Open the [noVNC client](https://novnc.com/noVNC/vnc.html) in a separate browser tab.\n\n4. Open connection settings.\n\n   ![open connection settings](https://docimg.replit.com/images/vnc/settings.png)\n\n5. Expand the WebSockets field. Enter your connection URL (`<REPL_ID>.id.repl.co`) in the `host` field, and leave the `path` field empty.\n\n   ![host](https://docimg.replit.com/images/vnc/host.png)\n\n6. Change the `Scaling Mode` to `Remote Resizing`:\n\n   ![scaling](https://docimg.replit.com/images/vnc/scaling.png)\n\n7. Use the `runner` username and the password configured above when asked for credentials.\n\n## Examples\n\n- <a href=\"https://replit.com/@demcrepl/Tetris-in-Pygame\" target=\"_blank\">PyGame</a>\n- <a href=\"https://replit.com/@amasad/docs-matplotlib\" target=\"_blank\">Python matplotlib</a>\n- <a href=\"https://replit.com/@sigcse2021/Game-of-Life-demcrepl\" target=\"_blank\">Java Processing</a>","metadata":{"id":291}}],["292",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Copyright claims and takedown requests\n\nIt is against our [Terms and Conditions](https://replit.com/site/terms) for users to publish any content that violates privacy rights, publicity rights, copyrights, or contract rights. We will immediately remove a repl at your request in the case of either of the following:\n\n- You hold a copyright to content contained within a public/private repl, or a public/private classroom assignment.\n- Personal/private information is contained within a public/private repl, or a public/private classroom assignment.\n\nEmail [contact@replit.com](mailto:contact@replit.com) with your takedown request.\n\nPer the Digital Millennium Copyright Act (DMCA, see 17 U.S.C 512(c)(3) for details), we require the following information in writing for DMCA takedown requests:\n\n- An electronic or physical signature of the person authorized to act on behalf of the owner of the copyright's interest.\n- A description of the copyrighted work that you claim has been infringed, including the URL of the location where the copyrighted work exists, or a copy of the copyrighted work.\n- Identification of the URL or other specific location on the service where the material that you claim is infringing is located.\n- Your address, telephone number, and email address.\n- A statement by you that you have a good faith belief that the disputed use is not authorized by the copyright owner, its agent, or the law.\n- A statement by you, made under penalty of perjury, that the above information in your notice is accurate and that you are the copyright owner or authorized to act on the copyright owner's behalf.","metadata":{"id":292}}],["293",{"pageContent":"# Deleting your data\n\nTo delete your personal information from Replit, please follow these instructions.  If you are using a desktop web browser:\n\n1. Log in to Replit and visit https://replit.com/account, or click your account name (next to your profile picture) then click Account.\n2. Scroll down to the \"Account\" section and find the button \"Request account deletion\".\n3. Click that button, then click \"Yes, Delete my Account\" to confirm.\n\nYou can also perform the same process using our mobile app:\n\n1. Click \"Account\" at the bottom of the screen.\n2. Scroll down to \"Manage Account\".\n3. Click \"Delete Account\" and then \"Delete Account\" again to confirm.\n\nDeleting your account removes all of your content from Replit (including Repls, templates, posts, and comments), and results in your personal information being purged from our systems. You will not be able to recover this data if you change your mind.\n\nFor further information about your rights over your personal data, please view our [Privacy Policy](https://replit.com/site/privacy).","metadata":{"id":293}}],["294",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Licensing information\n\nHere, you will find information about how your Repls are licensed.\n\n## Public Repls and Teams\n\nContent you create in a public Repl or in Teams for Friends is automatically subject to an MIT license. The full text of the MIT license reads as follows:\n\n> Copyright\n\n> Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n> The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## Specific Repl Licenses\n\nNote that adding a license file to a public Repl does not prevent the Repl from being made available under the MIT license. To make a license file effective, the Repl must be made private as described below.\n\nFor specific Repls, we may offer features to allow users to change the default license. For example, we might enable the ability to earn or to pay in Cycles for rights in a Repl, or for access to specific features or digital items.\n\n## Private Repls and Teams\n\nContent in a private Repl and private Team is licensed to Replit on a platform basis under the [Terms of Service](https://replit.com/site/terms).","metadata":{"id":294}}],["295",{"pageContent":"## Private Repls and Teams\n\nContent in a private Repl and private Team is licensed to Replit on a platform basis under the [Terms of Service](https://replit.com/site/terms).\n\nIf you would like to attach your own license to the code, we recommend you include the license as a (code) comment or a readme.txt file, as part of the Repl.","metadata":{"id":295}}],["296",{"pageContent":"# Security\n\nWe understand that your code, applications, and user-data hosted on Replit are very important, so we\ntake seriously our responsibility to safeguard it. After all, we use Replit to build our business too!\n\n## Reporting a Vulnerability\n\nBeing a small startup with limited resources, we unfortunately can't run a bug bounty program. However, if you report a vulnerability responsibly, we'll work with you to fix the issue. We'll also credit you on our blog.\n\n## Responsible Disclosure\n\nPursuant to our [terms of service](https://replit.com/site/terms), you should not take any actions\nthat interfere or disrupt the service. If you are in doubt, and think there might be a risk of service\ndisruption, then don't try to verify the bug yourself – email us and we'll work with you to verify it.\n\nEmail [security@replit.com](mailto:security@replit.com) with a description of the issue and we'll respond as soon as possible.","metadata":{"id":296}}],["297",{"pageContent":"---\nsidebar_position: 8\n---\n\n# Strike system FAQ\nLearn about warnings, banned community access, and site bans in Replit.\n\n### What is a Warning in Replit?\n\nA Moderator will send you a warning when you violate the [Community Standards](https://replit.com/@moderation/Welcome?c=244171), [Terms of Service](https://replit.com/site/terms), or [Privacy Policy](https://replit.com/site/privacy). Other disciplinary actions may include unpublishing of your Repl(s), cancellation of a Bounty, and/or hiding/deleting comments and Bounty Applications.\n\n### Can I republish my Repl after it's been unpublished?\n\nYes. Revise your Repl to abide by the [Community Standards](https://replit.com/@moderation/Welcome), then republish.\n\n### What happens when I'm banned from the Community?\n\nWhen banned from the community, you cannot create posts, comments, share Repls, or participate in [Bounties](https://replit.com/bounties). However, you can still use the online IDE for features unrelated to community activity.\n\n### What happens when I'm banned from Replit?\n\nA ban from Replit means you cannot log into your account and all Repls will have been deleted. This often occurs for violating the [Terms of Service](https://replit.com/site/terms).\n\n### How can I appeal a Moderation decision?\n\nContact the mods if you believe they took unfair action towards you. Send an email to [appeals@replit.com](mailto:appeals@replit.com) with your Replit username, a description of the action that you are appealing, and your reasons for the appeal.","metadata":{"id":297}}],["298",{"pageContent":"# Support Policy\n\nReplit offers different support options for all Replit users, members and free.\n\n## Community support\n\nAll Replit users can also access the [Replit community](http://ask.replit.com) to get help from other users. Get help with your code, report potential product issues, and connect with fellow users.\n\nFree users can also email [support@replit.com](mailto:support@replit.com) for get help with their account.\n\n## Replit Core member support\n\nReplit Core members can submit private support requests to Replit's support team. This support covers a wide range of topics including billing, account management, product questions, and technical assistance. Member support is open from 9am to 8pm Eastern Time (UTC-5), Monday through Friday and available only in English.\n\n### Channels\n\nMember support is available via the in-app `? Get Help` button as well as emailing [support@replit.com](mailto:support@replit.com). Using the in-app button is the best way to get in touch.\n\n### Scope\n\nMember support covers a number of areas:\n\n* Billing, Cycles, Bounties, and account help\n* Product issues, configuration help, and general usage questions\n* Analysis of Nix-os issues\n* Help with Extensions, Power Ups, Replit AI, and other features\n\nMember support does not cover:\n\n* General application debugging\n* General modifications or refactoring of applications to run or deploy on Replit\n* Writing code or teaching how to code: Replit provides a number of resources for learning how to code, but support cannot provide direct assistance\n\nHowever, the [Replit community](http://ask.replit.com) is a great resource for learning how to code or getting code-level help.","metadata":{"id":298}}],["299",{"pageContent":"# Trust and Safety at Replit\n\nAt Replit, we strive to create a fun and creative community that is also trusted and safe. To achieve this goal, we have implemented rules and policies that promote positive behavior and protect our users. In this document, you will find a summary of our key rules, tips on how to report any concerns, and information on where you can learn more.\n\n## Rules for Content and Behavior\n\nTo maintain a safe and trusted environment, we have established a set of rules that are detailed in our [Terms of Service](https://replit.com/site/terms). The same rules apply whether you are publishing Repls, or engaging with other users in our Community.\n\n- Keep it appropriate. All content must be suitable for a workplace environment and free of any offensive language or nudity. We prohibit violent and graphic content, as well as content that depicts or encourages self-harm.\n- No bullying. We have a zero-tolerance policy for bullying, trolling, doxxing, hate speech, racism, sexism, or any other form of prejudice. Violation of this rule may result in an immediate ban.\n- No illegal or regulated content. Replit should not be used for any illegal activities, such as dealing in drugs, sex, gambling, weapons, or pirated software.\n- Misuse of the service is not allowed. Do not share content that could harm other users, such as spam, malware, or phishing. We also do not allow Repls that consume an excessive amount of resources, such as spam bots and cryptocurrency miners.\n\n## How we enforce our rules\n\nWe have a dedicated team of moderators who work hard to keep our service safe by actioning reports concerning content that violates our [Terms](https://replit.com/site/terms), [Community Guidelines](https://replit.com/@moderation/Welcome), or [Privacy Policy](https://replit.com/site/privacy).","metadata":{"id":299}}],["300",{"pageContent":"If your content violates the rules, we will take appropriate action against it. In circumstances of serious violations, you may be banned from using Replit. For more information on the actions we take, checkout our [Strike System FAQ](/legal-and-security-info/strike-system-faq).\n\n## Protecting Underage users\n\nReplit upholds the [highest global privacy standards](/teams/privacy-faq) for our youngest members. To ensure that their personal information remains safe, we don't collect it in the first place. Our [Teams for Education](https://replit.com/teams-for-education) platform enables students to join Replit without providing even a name or email address—only a username and password are required.\n\nTo protect children from inappropriate images, we automatically scan all images uploaded to Replit. Our machine learning technology quickly detects and flags most images that violate our rules for review by a moderator.\n\nWe also take swift action to prevent predators from using Replit. Any account that shares child abuse material (CSAM) or seeks sexual contact with minors will be terminated and may be reported to the authorities.\n\n## How to Make Reports\n\n### Reporting a Repl\n\nReport a Repl to a moderator by visiting its cover page and clicking the kebab menu. Select the \"Report\" option and provide a reason for the report. A moderator will investigate and take appropriate action within 24 hours.\n![Reporting a Repl](https://docimg.replit.com/images/animations/report-repl.gif)\n\n### Reporting a User\n\nReport a user by accessing the \"Report\" option on their profile page. Provide a reason for the report, and a moderator will review and address it within 24 hours.\n![Reporting a User](https://docimg.replit.com/images/animations/report-user.gif)\n\n### Reporting a Comment\n\nIf an abusive comment is on another user's Repl, use the \"Report\" option to send it to a moderator for review. If a user posts an abusive comment on one of your Repls, you may hide or delete it to remove it from public view.","metadata":{"id":300}}],["301",{"pageContent":"![Reporting a Comment](https://docimg.replit.com/images/animations/report-comment.gif)\n\n### Reporting a Bounty\n\nReport a bounty by accessing the \"Report\" option on the bounty page. If you are the poster of a bounty, you can also report a bounty application that violates our rules in a similar way.\n![Reporting a Repl](https://docimg.replit.com/images/animations/report-bounty.gif)\n\n### Reporting a Theme\n\nReport a theme by accessing the \"Report\" option on the theme page. Themes should not be reported because of their appearance, but only because they contain content such as an offensive name that violates our rules.\n![Reporting a Repl](https://docimg.replit.com/images/animations/report-theme.gif)\n\n## Additional Information\n\nThis page contains an easy-to-read summary of information that is given in more detail in our other policy documents. If you would like more information, please consult these resources:\n\n- [Terms of service](https://replit.com/site/terms)\n- [Replit Ask terms of service](https://ask.replit.com/tos)\n- [Discord community code of conduct](https://code-of-conduct.discordmods.repl.co/)\n- [Privacy policy](https://replit.com/site/privacy)\n- [Copyright claims and takedown requests](/legal-and-security-info/copyright-claims-takedown-requests)","metadata":{"id":301}}],["302",{"pageContent":"# Usage Quota & Limits\n\nReplit has certain soft and hard limits in using its service. Hard limits are automatically enforced by the Service. Soft limits are consumable resources that you agree not to exceed. Details of these limits are shown at https://replit.com/site/pricing and may be updated there from time to time Long periods of inactivity may result in an account or your use of the Service being deemed inactive.\n\n- CPU per Repl: determined by plan (hard)\n\n- RAM per Repl: determined by plan (hard)\n\n- Concurrent Repls: 20 (hard)\n\n- Storage per Repl: determined by plan and storage used by other Repls (hard)\n\n- Storage per account: determined by plan (hard)\n\n- Network bandwidth: determined by plan (soft)\n\nIn addition, regardless of your plan, some limits and restrictions are imposed on your Repl’s content and its network activity in order to enforce our Terms of Service. If these limits are exceeded, your Repl may become temporarily unavailable, or particular operations may fail with an error. These include:\n\n- A limit on the number of concurrent outgoing network connections in a given period.\n\n- Limits on the frequency and size of requests to Replit’s internal GraphQL API.\n\n- Restrictions on the use of code that appears to violate our Terms of Service, such as cryptocurrency mining.","metadata":{"id":302}}],["303",{"pageContent":"# Replit web accessibility statement\n\n_See our accessibility features [here](/programming-ide/workspace-features/preferences#accessibility)._\n\nReplit believes that computing is for everyone. As such we are committed to making our service fully accessible to all, including people with disabilities. This statement explains our accessibility goals, our progress towards meeting those goals, and how you can contact us with feedback about accessibility on Replit.\n\n# Conformance goals\n\nOur aim is to achieve full compliance with the W3C WAI’s Web Content Accessibility Guidelines (WCAG) 2.1, which defines requirements for designers and developers to improve accessibility for people with disabilities. Replit is currently partially conformant with WCAG 2.1 level AA. Partially conformant means that some parts of our website content do not yet fully conform to the accessibility standard.\n\n# Current status\n\nReplit has an ongoing internal project to improve our site’s accessibility, responding to our own internal evaluation, user interviews and reports, and the results of an independent evaluation conducted by the Cornell University IT Department in 2021.\n\nThe majority of content on our website is available in HTML format conformant with current W3C standards for HTML and CSS. Non-text content presented to the user, such as images and form elements, have a text alternative that can be recognized and spoken aloud by screen readers.\n\nDespite our best efforts to ensure accessibility of Replit, you may encounter some limitations. In particular, the inability to fully manipulate the workspace using your keyboard is a known issue that we are working to address.\n\n# Giving feedback\n\nIf you have any trouble accessing the Replit website, we encourage you to provide us with feedback by emailing [contact@replit.com](mailto:contact@replit.com). Please provide the URL (web address) of the material you tried to access, the problem you experienced, and your contact information.","metadata":{"id":303}}],["304",{"pageContent":"# In-App Purchases\n\n## Subscriptions\n\nYou can purchase either the [Pro or the Hacker plan](https://replit.com/pricing) through the mobile app. All benefits will reflect on both web and the mobile app\n\n## Purchasing your Subscription\n\nYou can make a purchase by navigating to **Account** and then clicking on **Upgrade**, and then selecting the **Monthly** or **Yearly** subscription.\n\n<div\n  style={{\n    display: 'flex',\n    flexDirection: 'row',\n  }}\n>\n  <img\n    alt=\"account page\"\n    src=\"https://docimg.replit.com/images/mobile/in-app-purchases/account-page.png\"\n    width=\"200\"\n  />\n  <img\n    alt=\"upgrade page\"\n    src=\"https://docimg.replit.com/images/mobile/in-app-purchases/upgrade-page.png\"\n    width=\"200\"\n  />\n</div>\n\n## Managing your Subscription\n\nYou can manage your subscription by going to **Account**, and then clicking on **$ Billing**\n\n<div\n  style={{\n    display: 'flex',\n    flexDirection: 'row',\n  }}\n>\n  <img\n    alt=\"account page\"\n    src=\"https://docimg.replit.com/images/mobile/in-app-purchases/account-page-pro.png\"\n    width=\"200\"\n  />\n  <img\n    alt=\"manage subscription\"\n    src=\"https://docimg.replit.com/images/mobile/in-app-purchases/manage-subscription.png\"\n    width=\"200\"\n  />\n</div>","metadata":{"id":304}}],["305",{"pageContent":"# ModelFarm API\n\n## Overview\n\nModelFarm provides easy access to various machine-learning models across\nmultiple use cases, allowing you to quickly integrate AI into your application.\n\nThe ModelFarm libaries take care of all authentication, whether you're in a development Repl or using deployments. Simply import the Python or TypeScript library and you are ready to begin securely using 3rd-party Gen AI providers.\n\nModelFarm grants **free access to a selection of Gen AI models** offered by [Google Cloud Vertex AI](https://cloud.google.com/vertex-ai/docs/generative-ai/learn/overview) until December 31, 2023.\n\nIn the future, we will also provide an integrated billing system. More details to come.\n\nHeadover to our [Python Docs](./python/index.md) or our [JavaScript/TypeScript Docs](./typescript/index.md) to start building.\n\n## Replit AI\n\nIf you're looking for AI coding assistant features within Replit, head to the [Replit AI documentation](/power-ups/replitai/getting-started).","metadata":{"id":305}}],["306",{"pageContent":"# Chat Models\n\nChat models are specialized versions of large language models designed to handle conversational contexts. They excel at generating human-like responses in interactive dialogue and maintaining context throughout a conversation, making them ideal for tasks like customer support, virtual assistance, and interactive applications. In contrast, Completion models are more suited for single-turn tasks that don't require maintaining a conversational history, such as text summarization, translation, or code generation. While both types of models can generate text based on the input they receive, Chat models are optimized for multi-turn dialogue and often exhibit a better understanding of nuanced conversational cues compared to their Completion counterparts.\n\n## Google\n\n### chat-bison\n\n#### Parameters\n\n| Parameter Name  | Streaming Supported | Type             | Description                                                                                                                                                                                                                                        | Min  | Max  | Default |\n|-----------------|---------------------|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------|------|---------|\n| prompts     | True                | ChatSession            | Text input to generate model response.         |     |     |        |\n| temperature     | True                | float            | The temperature is used for sampling during the response generation. Controls the degree of randomness in token selection. Lower temperatures result in less randomness. Higher temperatures can lead to more diverse or creative results.          | 0    | 1    | 0       |","metadata":{"id":306}}],["307",{"pageContent":"| maxOutputTokens | True                | int              | Maximum number of tokens that can be generated in the response. Specify a lower value for shorter responses and a higher value for longer responses. The maximum value may be lower for certain models.                                             | 1    | 2048 | 1024    |\n| topK            | True                | int              | Top-K changes how the model selects tokens for output. Specify a lower value for less random responses and a higher value for more random responses.                                                                                                 | 0    | 40   | 0       |\n| candidateCount  | False               | int              | Tokens are selected from most probable to least until the sum of their probabilities equals the top_p value.                                                                                                                                        | 1    | 8    | 1       |\n| stopSequences   | True                | array of strings | Specifies a list of strings that tells the model to stop generating text if one of the strings is encountered in the response. Strings are case-sensitive.                                                                                           |      |      |         |\n| topP            | True                | float            | Top-p changes how the model selects tokens for output. Tokens are selected from the most (see top-K) to least probable until the sum of their probabilities equals the top-P value.                                                                 | 0    | 1    | 0.95    |","metadata":{"id":307}}],["308",{"pageContent":"# Completion Models\n\nCompletion models are designed for single-turn tasks that require generating text based on a given prompt but don't necessitate maintaining a conversational history. These models excel in applications like text summarization, code generation, and translation, where the focus is on generating accurate and relevant content in one go, rather than engaging in back-and-forth dialogue. In contrast, Chat models are optimized for interactive, multi-turn conversations, and they are better at understanding and generating nuanced responses within a conversational context. While both types of models are capable of generating text, Completion models are generally more suited for tasks that don't require the complexities of conversational state and context.\n\n## Google\n\n### text-bison\n\n#### Parameters\n\n| Parameter Name  | Streaming Supported | Type             | Description                                                                                                                                                                                                                                        | Min  | Max  | Default |\n|-----------------|---------------------|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------|------|---------|\n| content         | True                | string \\| string[]| Text input to generate model response. Prompts can include preamble, questions, suggestions, instructions, or examples. This should be encoded as an array of strings.                                                                                |      |      |         |","metadata":{"id":308}}],["309",{"pageContent":"| temperature     | True                | float            | The temperature is used for sampling during the response generation. Controls the degree of randomness in token selection. Lower temperatures result in less randomness. Higher temperatures can lead to more diverse or creative results.          | 0    | 1    | 0.2     |\n| maxOutputTokens | True                | int              | Maximum number of tokens that can be generated in the response. Specify a lower value for shorter responses and a higher value for longer responses. The maximum value may be lower for certain models.                                             | 1    | 2048 | 1024    |\n| topK            | True                | int              | Top-K changes how the model selects tokens for output. Specify a lower value for less random responses and a higher value for more random responses.                                                                                                 | 1    | 40   | 40      |\n| candidateCount  | False               | int              | The number of response variations to return.                                                                                                                                                                                                        | 1    | 8    | 1       |\n| stopSequences   | True                | array of strings | Specifies a list of strings that tells the model to stop generating text if one of the strings is encountered in the response. Strings are case-sensitive.                                                                                           |      |      |         |\n| topP            | True                | float            | Top-p changes how the model selects tokens for output. Tokens are selected from most K (see topK parameter) probable to least until the sum of their probabilities equals the top-p value.                                                           | 0    | 1    | 0.95    |","metadata":{"id":309}}],["310",{"pageContent":"# Embedding Models\n\nEmbedding models are specialized machine learning models designed to map text into fixed-size vectors in a high-dimensional space. These vectors capture semantic meaning and relationships between words, allowing for various natural language processing tasks like text classification, clustering, and similarity analysis. Unlike Chat or Completion models, which generate text as output, embedding models primarily serve as a feature extraction mechanism to represent text in a format that other machine learning models can understand and process. They are commonly used for retrieval-augmented generation (RAG), in order to choose which bits of a large dataset should be included in the context for a completion or chat model.\n\n## Google\n\n### textembedding-gecko\n\n#### Parameters\n\n| Parameter Name  | Streaming Supported | Type             | Description                                                                                                                                                                                                                                         |\n|-----------------|---------------------|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| content         | True                | \\[{content: str}\\] | An array of text content to be embedded |","metadata":{"id":310}}],["311",{"pageContent":"# Chat\n\nChat models are specialized versions of large language models designed to handle conversational contexts. They excel at generating human-like responses in interactive dialogue and maintaining context throughout a conversation, making them ideal for tasks like customer support, virtual assistance, and interactive applications. In contrast, Completion models are more suited for single-turn tasks that don't require maintaining a conversational history, such as text summarization, translation, or code generation. While both types of models can generate text based on the input they receive, Chat models are optimized for multi-turn dialogue and often exhibit a better understanding of nuanced conversational cues compared to their Completion counterparts.\n\nThis API is designed to be used across multiple providers, and certain parameters may work only with certain models or providers. Please consult the [chat models page](../models/chat_models.md) to find more details.\n\n### Structured Input For ChatModel\n\nThe input for a `ChatModel` is created using certain typed objects. We create a `ChatSession` object using a list of `ChatExample` objects and a list of `ChatMessage` objects. See the type definition code blocks below.\n\n**ChatSession**\n\nThe main input type for a chat session that is used with `ChatModel`. It is built using the input context, a list of `ChatExample` and a list of `ChatMessage` types.\n\n```python\nclass ChatSession(BaseModel):\n  context: str\n  examples: List[ChatExample]\n  messages: List[ChatMessage]\n```\n\n**ChatExample**\n\nChatExample represents a single to and from interaction in a chat session that the model can use as an example.\n\n```python\nclass ChatExample(BaseModel):\n  input: ChatMessage\n  output: ChatMessage\n```\n\n**ChatMessage**\n\nChatMessage represents a single message in a chat session.\n\n```python\nclass ChatMessage(BaseModel):\n  content: str\n  author: str = \"\"\n```\n\n### ChatModel\n\nThe main class to help use a chat model from ModelFarm in a provider agnostic way.\n\n---","metadata":{"id":311}}],["312",{"pageContent":"```python\nclass ChatMessage(BaseModel):\n  content: str\n  author: str = \"\"\n```\n\n### ChatModel\n\nThe main class to help use a chat model from ModelFarm in a provider agnostic way.\n\n---\n\n`__init__(self, model_name: str, \\*\\*kwargs: Dict[str, Any])`\n\nInitializes a ChatModel instance.\n\n- **Arguments**\n  - `model_name (str)`: The name of the model to be used.\n  - `**kwargs (Dict[str, Any])`: Additional keyword arguments.\n- **Returns**\n  - None\n\n---\n\n`chat(self, prompts: List[ChatSession], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs) -> ChatModelResponse`\n\nMakes a synchronous chat generation based on the prompts and parameters.\n\n- **Arguments**\n  - `prompts (List[ChatSession])`: A list of `ChatSession` objects representing the chat prompts.\n  - `max_output_tokens (int)`: The maximum number of output tokens. Default is 1024.\n  - `temperature (float)`: The temperature to control the randomness of the output. Default is 0.2.\n  - `**kwargs`: Additional keyword arguments.\n- **Returns**\n  - `ChatModelResponse`: An object containing the model's response.\n\n---\n\n`async_chat(self, prompts: List[ChatSession], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs) -> ChatModelResponse`\n\nMakes an asynchronous chat generation based on the prompts and parameters.\n\n- **Arguments**\n  - `prompts (List[ChatSession])`: A list of `ChatSession` objects representing the chat prompts.\n  - `max_output_tokens (int)`: The maximum number of output tokens. Default is 1024.\n  - `temperature (float)`: The temperature to control the randomness of the output. Default is 0.2.\n  - `**kwargs`: Additional keyword arguments.\n- **Returns**\n  - `ChatModelResponse`: An object containing the model's response.\n\n---\n\n`stream_chat(self, prompts: List[ChatSession], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs) -> Iterator[ChatModelResponse]`\n\nStreams chat generations based on the prompts and parameters. The method returns an iterator of model responses.\n\n- **Arguments**","metadata":{"id":312}}],["313",{"pageContent":"Streams chat generations based on the prompts and parameters. The method returns an iterator of model responses.\n\n- **Arguments**\n  - `prompts (List[ChatSession])`: A list of `ChatSession` objects representing the chat prompts.\n  - `max_output_tokens (int)`: The maximum number of output tokens. Default is 1024.\n  - `temperature (float)`: The temperature to control the randomness of the output. Default is 0.2.\n  - `**kwargs`: Additional keyword arguments.\n- **Returns**\n  - `Iterator[ChatModelResponse]`: An iterator that yields `ChatModelResponse` objects.\n\n---\n\n`async_stream_chat(self, prompts: List[ChatSession], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs) -> Iterator[ChatModelResponse]`\n\nStreams asynchronous chat generations based on the prompts and parameters. The method returns an asynchronous iterator of model responses.\n\n- **Arguments**\n  - `prompts (List[ChatSession])`: A list of `ChatSession` objects representing the chat prompts.\n  - `max_output_tokens (int)`: The maximum number of output tokens. Default is 1024.\n  - `temperature (float)`: The temperature to control the randomness of the output. Default is 0.2.\n  - `**kwargs`: Additional keyword arguments.\n- **Returns**\n  - `Iterator[ChatModelResponse]`: An asynchronous iterator that yields `ChatModelResponse` objects.\n\n### Response Format\nAll four apis return the same `ChatModelResponse` response type, with the stream APIs returning a generator of them.\n\nThe resultant `ChatModelResponse` has two main fields:\n\n- `metadata` containing metadata information for the call like the token count, char count etc. The value of this field is provider specific and will change with future providers.\n- `responses ` containing the response candidates, where each candidate has the response message with its content,  and additional metadata on the response provided the specific model used.\n\n```python\n>>> print(response.model_dump())\n{\n    \"metadata\": {\n        \"inputTokenCount\": {\n            \"billableTokens\": 0,","metadata":{"id":313}}],["314",{"pageContent":"```python\n>>> print(response.model_dump())\n{\n    \"metadata\": {\n        \"inputTokenCount\": {\n            \"billableTokens\": 0,\n            \"unbilledTokens\": 19,\n            \"billableCharacters\": 46,\n            \"unbilledCharacters\": 0,\n        },\n        \"outputTokenCount\": {\n            \"billableTokens\": 0,\n            \"unbilledTokens\": 50,\n            \"billableCharacters\": 220,\n            \"unbilledCharacters\": 0,\n        },\n    },\n    \"responses\": [\n        {\n            \"candidates\": [\n                {\n                    \"message\": {\n                        \"content\": \" The meaning of life is a deep question that has been pondered by philosophers, theologians, and artists for centuries. There is no one answer that is universally agreed upon, but some common themes that emerge include:\\n\\n* Finding happiness and fulfillment in one'\",\n                        \"author\": \"1\",\n                    },\n                    \"metadata\": {\n                        \"safetyAttributes\": {\n                            \"blocked\": False,\n                            \"categories\": [\"Health\", \"Religion & Belief\"],\n                            \"scores\": [0.1, 0.6],\n                        },\n                        \"citationMetadata\": {\"citations\": []},\n                    },\n                }\n            ]\n        }\n    ],\n}\n```\n\n## Examples\n\n#### Synchronous\n\n```python\nfrom replit.ai.modelfarm import ChatModel, ChatSession, ChatExample, ChatMessage, ChatModelResponse\n\nmodel: ChatModel = ChatModel('chat-bison')\n\n# build chat session with context, examples and messages\nchat_session: ChatSession = ChatSession(\n    context=\"You are philosophy bot.\",\n    examples=[\n        ChatExample(input=ChatMessage(content=\"1 + 1\"),\n                    output=ChatMessage(content=\"2\"))\n    ],\n    messages=[\n        ChatMessage(author=\"USER\", content=\"What is the meaning of life?\"),\n    ])\n\n# synchronous, non-streaming call\nresponse: ChatModelResponse = model.chat([chat_session], max_output_tokens=50)\n```\n\n\n#### Synchronous - Streaming\n\n```python","metadata":{"id":314}}],["315",{"pageContent":"])\n\n# synchronous, non-streaming call\nresponse: ChatModelResponse = model.chat([chat_session], max_output_tokens=50)\n```\n\n\n#### Synchronous - Streaming\n\n```python\nfrom replit.ai.modelfarm import ChatModel, ChatSession, ChatExample, ChatMessage, ChatModelResponse\n\nmodel: ChatModel = ChatModel('chat-bison')\n\n# build chat session with context, examples and messages\nchat_session: ChatSession = ChatSession(\n    context=\"You are philosophy bot.\",\n    examples=[\n        ChatExample(input=ChatMessage(content=\"1 + 1\"),\n                    output=ChatMessage(content=\"2\"))\n    ],\n    messages=[\n        ChatMessage(author=\"USER\", content=\"What is the meaning of life?\"),\n    ])\n\nresponses = model.stream_chat([chat_session])\nfor response in responses:\n  print(response)\n```\n\n#### Asynchronous\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm import ChatModel, ChatSession, ChatExample, ChatMessage, ChatModelResponse\n\nasync def main():\n  model: ChatModel = ChatModel('chat-bison')\n\n  # build chat session with context, examples and messages\n  chat_session: ChatSession = ChatSession(\n      context=\"You are philosphy bot.\",\n      examples=[\n          ChatExample(input=ChatMessage(content=\"1 + 1\"),\n                      output=ChatMessage(content=\"2\"))\n      ],\n      messages=[\n          ChatMessage(author=\"USER\", content=\"What is the meaning of life?\"),\n      ])\n\n  # asynchronous non-streaming call\n  responses = await model.async_chat([chat_session])\n  for response in responses:\n    print(response)\n\n\nasyncio.run(main())\n```\n\n#### Asynchronous - Streaming\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm import ChatModel, ChatSession, ChatExample, ChatMessage, ChatModelResponse\n\nasync def main():\n  model: ChatModel = ChatModel('chat-bison')\n\n  # build chat session with context, examples and messages\n  chat_session: ChatSession = ChatSession(\n      context=\"You are philosphy bot.\",\n      examples=[\n          ChatExample(input=ChatMessage(content=\"1 + 1\"),\n                      output=ChatMessage(content=\"2\"))\n      ],\n      messages=[","metadata":{"id":315}}],["316",{"pageContent":"context=\"You are philosphy bot.\",\n      examples=[\n          ChatExample(input=ChatMessage(content=\"1 + 1\"),\n                      output=ChatMessage(content=\"2\"))\n      ],\n      messages=[\n          ChatMessage(author=\"USER\", content=\"What is the meaning of life?\"),\n      ])\n\n  # asynchronous streaming call\n  responses = model.async_stream_chat([chat_session])\n\n  async for async_response in responses:\n    # each response is a ChatModelResponse\n    print(async_response)\n\nasyncio.run(main())\n```","metadata":{"id":316}}],["317",{"pageContent":"# Completion\n\nCompletion models are designed for single-turn tasks that require generating text based on a given prompt but don't necessitate maintaining a conversational history. These models excel in applications like text summarization, code generation, and translation, where the focus is on generating accurate and relevant content in one go, rather than engaging in back-and-forth dialogue. In contrast, Chat models are optimized for interactive, multi-turn conversations, and they are better at understanding and generating nuanced responses within a conversational context. While both types of models are capable of generating text, Completion models are generally more suited for tasks that don't require the complexities of conversational state and context.\n\nThis API is designed to be used across multiple providers, and certain parameters may work only with certain models or providers. Please consult the [completion models page](../models/completion_models.md) to find more details.\n\n### CompletionModel\n\n#### Description\n\nHandles predictions from a completion model.\n\n### `__init__(self, model_name: str, **kwargs: Dict[str, Any])`\n\n#### Description\n\nInitializes a CompletionModel instance.\n\n#### Parameters\n\n- `model_name` (str): The name of the model.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n---\n\n### Method: `complete(self, prompts: List[str], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs: Dict[str, Any]) -> CompletionModelResponse`\n\n#### Description\n\nMakes a generation based on the prompts and parameters.\n\n#### Parameters\n\n- `prompts` (List[str]): The list of prompts.\n- `max_output_tokens` (int): The maximum number of output tokens. Default is 1024.\n- `temperature` (float): Controls the randomness of the output. Default is 0.2.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n#### Returns\n\n- `CompletionModelResponse`: The response from the model.\n\n---","metadata":{"id":317}}],["318",{"pageContent":"- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n#### Returns\n\n- `CompletionModelResponse`: The response from the model.\n\n---\n\n### Method: `async_complete(self, prompts: List[str], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs) -> CompletionModelResponse`\n\n#### Description\n\nMakes an asynchronous generation based on the prompts and parameters.\n\n#### Parameters\n\n- `prompts` (List[str]): The list of prompts.\n- `max_output_tokens` (int): The maximum number of output tokens. Default is 1024.\n- `temperature` (float): Controls the randomness of the output. Default is 0.2.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n#### Returns\n\n- `CompletionModelResponse`: The response from the model.\n\n---\n\n### Method: `stream_complete(self, prompts: List[str], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs: Dict[str, Any]) -> Iterator[CompletionModelResponse]`\n\n#### Description\n\nStreams generations based on the prompts and parameters.\n\n#### Parameters\n\n- `prompts` (List[str]): The list of prompts.\n- `max_output_tokens` (int): The maximum number of output tokens. Default is 1024.\n- `temperature` (float): Controls the randomness of the output. Default is 0.2.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n#### Returns\n\n- `Iterator[CompletionModelResponse]`: An iterator of the responses from the model.\n\n---\n\n### Method: `async_stream_complete(self, prompts: List[str], max_output_tokens: int = 1024, temperature: float = 0.2, **kwargs: Dict[str, Any]) -> Iterator[CompletionModelResponse]`\n\n#### Description\n\nStreams asynchronous predictions based on the prompts and parameters.\n\n#### Parameters\n\n- `prompts` (List[str]): The list of prompts.\n- `max_output_tokens` (int): The maximum number of output tokens. Default is 1024.\n- `temperature` (float): Controls the randomness of the output. Default is 0.2.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n#### Returns\n\n- `Iterator[CompletionModelResponse]`: An iterator of the responses from the model.\n\n---","metadata":{"id":318}}],["319",{"pageContent":"- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n#### Returns\n\n- `Iterator[CompletionModelResponse]`: An iterator of the responses from the model.\n\n---\n\n### Response\n\nThe resultant `CompletionModelResponse` has two main fields:\n\n- `metadata` containing metadata information for the call like the token count, char count etc.\n- `responses` containing the response choices, where each candidate has the response message with its content,  and additional metadata on the response provided the specific model used\n\n```python\nprint(response.model_dump())\n>>> {\n    \"metadata\": {\n        \"inputTokenCount\": {\n            \"billableTokens\": 0,\n            \"unbilledTokens\": 7,\n            \"billableCharacters\": 23,\n            \"unbilledCharacters\": 0,\n        },\n        \"outputTokenCount\": {\n            \"billableTokens\": 0,\n            \"unbilledTokens\": 50,\n            \"billableCharacters\": 220,\n            \"unbilledCharacters\": 0,\n        },\n    },\n    \"responses\": [\n        {\n            \"choices\": [\n                {\n                    \"content\": \" The meaning of life is a deep question that has been pondered by philosophers, theologians, and artists for centuries. There is no one answer that is universally agreed upon, but some common themes that emerge include:\\n\\n* Finding happiness and fulfillment in one'\",\n                    \"metadata\": {\n                        \"safetyAttributes\": {\n                            \"blocked\": False,\n                            \"categories\": [\"Health\", \"Religion & Belief\"],\n                            \"scores\": [0.1, 0.7],\n                        },\n                        \"citationMetadata\": {\"citations\": []},\n                    },\n                }\n            ]\n        }\n    ],\n}\n```\n\n### Examples\n\n#### Synchronous\n\n```python\nfrom replit.ai.modelfarm import CompletionModel, CompletionModelResponse\n\nmodel: CompletionModel = CompletionModel(\"text-bison\")\n\nprompts = [\"What is the meaning of life?\"]\n\n# synchronous, non-streaming call\nresponse: CompletionModelResponse = model.complete(prompts,","metadata":{"id":319}}],["320",{"pageContent":"model: CompletionModel = CompletionModel(\"text-bison\")\n\nprompts = [\"What is the meaning of life?\"]\n\n# synchronous, non-streaming call\nresponse: CompletionModelResponse = model.complete(prompts,\n                                                   max_output_tokens=50,\n                                                   temperature=0.2)\nprint(response)\n```\n\n#### Syncronous - Streaming\n\n```python\nfrom replit.ai.modelfarm import CompletionModel, CompletionModelResponse\n\nmodel: CompletionModel = CompletionModel(\"text-bison\")\n\nprompts = [\"What is the meaning of life?\"]\n\n\nresponses: list[CompletionModelResponse] = model.stream_complete(\n    prompts, max_output_tokens=50, temperature=0.2)\nfor response in responses:\n  print(response)\n```\n\n#### Asynchronous\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm import CompletionModel, CompletionModelResponse\n\nasync def main():\n  model: CompletionModel = CompletionModel(\"text-bison\")\n\n  prompt = \"What is the meaning of life?\"\n\n  # asychronous non-streaming call\n  responses = await model.async_complete([prompt])\n  for response in responses:\n    print(response)\n\nasyncio.run(main())\n```\n\n#### Asynchronous - Streaming\n```python\nimport asyncio\nfrom replit.ai.modelfarm import CompletionModel, CompletionModelResponse\n\nasync def main():\n  model: CompletionModel = CompletionModel(\"text-bison\")\n\n  prompt = \"What is the meaning of life?\"\n\n  # asynchronous streaming call\n  responses = model.async_stream_complete([prompt])\n  async for async_response in responses:\n    # each response is a ChatModelResponse\n    print(async_response)\n\nasyncio.run(main())\n```","metadata":{"id":320}}],["321",{"pageContent":"# Embedding\n\nEmbedding models are specialized machine learning models designed to map text into fixed-size vectors in a high-dimensional space. These vectors capture semantic meaning and relationships between words, allowing for various natural language processing tasks like text classification, clustering, and similarity analysis. Unlike Chat or Completion models, which generate text as output, embedding models primarily serve as a feature extraction mechanism to represent text in a format that other machine learning models can understand and process. They are commonly used for retrieval-augmented generation (RAG), in order to choose which bits of a large dataset should be included in the context for a completion or chat model.\n\nThis API is designed to be used across multiple providers, and certain parameters may work only with certain models or providers. Please consult the [embedding models page](../models/embedding_models.md) to find more details.\n\n### Class: EmbeddingModel\n\n#### Description\n\nHandles predictions from an embedding model.\n\n#### `__init__(self, model_name: str, **kwargs: Dict[str, Any])`\n\n##### Description\n\nInitializes an `EmbeddingModel` instance.\n\n##### Parameters\n\n- `model_name` (str): The name of the model.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n---\n\n#### Method: `embed(self, content: List[Dict[str, Any]], **kwargs) -> EmbeddingModelResponse`\n\n##### Description\n\nMakes a prediction based on the content and parameters.\n\n##### Parameters\n\n- `content` (List[Dict[str, Any]]): The list of content to embed.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n##### Returns\n\n- `EmbeddingModelResponse`: The response from the model.\n\n---\n\n#### Method: `async_embed(self, content: List[Dict[str, Any]], **kwargs: Dict[str, Any]) -> EmbeddingModelResponse`\n\n##### Description\n\nMakes an asynchronous embedding generation based on the content and parameters.\n\n##### Parameters","metadata":{"id":321}}],["322",{"pageContent":"##### Description\n\nMakes an asynchronous embedding generation based on the content and parameters.\n\n##### Parameters\n\n- `content` (List[Dict[str, Any]]): The list of content to embed. For most models, the dictionary should contain the content to embed with the \"content\" key.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n##### Returns\n\n- `EmbeddingModelResponse`: The response from the model.\n\n---\n\n#### Method: `__build_request_payload(self, content: List[Dict[str, Any]], **kwargs: Dict[str, Any]) -> Dict[str, Any]`\n\n##### Description\n\nBuilds the request payload.\n\n##### Parameters\n\n- `content` (List[Dict[str, Any]]): The list of content to embed. For most models, the dictionary should contain the content to embed with the \"content\" key.\n- `**kwargs` (Dict[str, Any]): Additional keyword arguments.\n\n##### Returns\n\n- `Dict[str, Any]`: The request payload.\n\n---\n\n### Response\n\nThe `EmbeddingModelResponse` object is returned for both the syncronous and asyncronous methods. It has two main fields:\n\n- `metadata` containing metadata information for the call like the token count, char count etc. This may change with future providers.\n- `embeddings` is a list where the first item is a dictionary with the key values mapping to the embedding array\n\n```python\nprint(response.model_dump())\n>>> {\n    \"metadata\": {\n        \"tokenCountMetadata\": {\n            \"billableTokens\": 0,\n            \"unbilledTokens\": 0,\n            \"billableCharacters\": 12,\n            \"unbilledCharacters\": 0,\n        }\n    },\n    \"embeddings\": [\n        {\n            \"values\": [\n                0.010413173586130142,\n                0.012456662021577358,\n                0.0022182136308401823,\n                0.049747664481401443,\n                #... truncated\n                -0.007193463854491711,\n            ],\n            \"tokenCountMetadata\": {\n                \"billableTokens\": 0,\n                \"unbilledTokens\": 4,\n                \"billableCharacters\": 0,\n                \"unbilledCharacters\": 0,\n            },\n            \"truncated\": False,\n        }","metadata":{"id":322}}],["323",{"pageContent":"\"unbilledTokens\": 4,\n                \"billableCharacters\": 0,\n                \"unbilledCharacters\": 0,\n            },\n            \"truncated\": False,\n        }\n    ],\n}\n```\n\n### Examples\n\n#### Syncronous\n```python\nfrom replit.ai.modelfarm import EmbeddingModel,  EmbeddingModelResponse\n\nmodel = EmbeddingModel(\"textembedding-gecko\")\nembedding_input = [{\"content\": \"Hello, world!\"}]\n\n# synchronous call\nresponse: EmbeddingModelResponse = model.embed(embedding_input)\n```\n\n#### Asyncronous\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm import EmbeddingModel,  EmbeddingModelResponse\n\nasync def main():\n  model = EmbeddingModel(\"textembedding-gecko\")\n  embedding_input = [{\"content\": \"Hello, world!\"}]\n\n  # asynchronous call\n  response: EmbeddingModelResponse = await model.async_embed(embedding_input)\n  print(response)\n\nasyncio.run(main())\n```","metadata":{"id":323}}],["324",{"pageContent":"# Google Provider API\n\nThe `replit-ai` package provides a shim for the Google Vertex AI SDK libraries that allows for swapping to and from the original libraries by simply changing the imports at the top of the code. Both the input parameters and responses from these APIs are intended to be 100% compatible.\n\nTo move from the Vertex AI SDK, remove all initialization code, and replace all `vertexai` imports with `replit.ai.modelfarm.google`.\n\nBefore:\n```python\n# From \nimport vertexai\nfrom vertexai.language_models import TextGenerationModel\n\nvertexai.init(project=project_id, location=location)\n\nparameters = {\n  \"temperature\": 0.2,\n  \"max_output_tokens\": 256,\n  \"top_p\": 0.8,\n  \"top_k\": 40,\n}\n\nmodel = TextGenerationModel.from_pretrained(\"text-bison@001\")\nresponse = model.predict(\n  \"Give me ten interview questions for the role of program manager.\",\n  **parameters,\n)\nprint(f\"Response from Model: {response.text}\")\n```\n\nAfter:\n```python\nfrom replit.ai.modelfarm.google.language_models import TextGenerationModel\n\nparameters = {\n  \"temperature\": 0.2,\n  \"max_output_tokens\": 256,\n  \"top_p\": 0.8,\n  \"top_k\": 40,\n}\n\nmodel = TextGenerationModel.from_pretrained(\"text-bison@001\")\nresponse = model.predict(\n  \"Give me ten interview questions for the role of program manager.\",\n  **parameters,\n)\nprint(f\"Response from Model: {response.text}\")\n```\n\nNote that the Replit-provided Google-specific APIs support both synchronous and asynchronous operations, the latter facilitated through the asyncio library.\n\n## Chat\n\nPlease refer to the Google Vertex AI documentation for chat [here](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/text-chat). \n\n### Examples\n\n**Synchronous Usage**\n\n```python\nfrom replit.ai.modelfarm.google.preview.language_models import ChatModel, InputOutputTextPair, ChatSession, ChatMessage, TextGenerationResponse\n\nchat_model = ChatModel.from_pretrained(\"chat-bison@001\")\n\nchat: ChatSession = chat_model.start_chat(\n  context=\"My name is Miles. You are an astronomer, knowledgeable about the solar system.\",\n  examples=[","metadata":{"id":324}}],["325",{"pageContent":"chat: ChatSession = chat_model.start_chat(\n  context=\"My name is Miles. You are an astronomer, knowledgeable about the solar system.\",\n  examples=[\n    InputOutputTextPair(\n      input_text=\"How many moons does Mars have?\",\n      output_text=\"The planet Mars has two moons, Phobos and Deimos.\",\n    ),\n  ]\n)\n\n# synchronous, non-streamed response\nresponse: TextGenerationResponse = chat.send_message(\n  \"How many planets are there in the solar system?\",\n  temperature=0.2,\n  max_output_tokens=256,\n  top_p=0.95,\n  top_k=40\n)\n\n# synchronous, streamed response\nresponses = chat.send_message_stream(\n  \"Tell me something about each planet in the Solar System: \",\n  temperature=0.2,\n  max_output_tokens=1024,\n  top_p=0.95,\n  top_k=40\n)\n\nfor response in responses:\n  print(response)\n\n# chat has a message_history, which is a list of ChatMessage objects based on the session's state\nchat_history: list[ChatMessage] = chat.message_history\n```\n\n**Asynchronous Usage**\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm.google.preview.language_models import ChatModel, InputOutputTextPair, ChatSession, ChatMessage, TextGenerationResponse\n\n\nasync def main():\n  chat_model = ChatModel.from_pretrained(\"chat-bison@001\")\n\n  chat: ChatSession = chat_model.start_chat(\n    context=\"My name is Miles. You are an astronomer, knowledgeable about the solar system.\",\n    examples=[\n      InputOutputTextPair(\n        input_text=\"How many moons does Mars have?\",\n        output_text=\"The planet Mars has two moons, Phobos and Deimos.\",\n        ),\n    ]\n  )\n\n  # asynchronous, non-streaming call\n  response: TextGenerationResponse = await chat.async_send_message(\n    \"How many planets are there in the solar system?\",\n    temperature=0.2,\n    max_output_tokens=1024,\n    top_p=0.95,\n    top_k=40\n  )\n\n  # asynchronous streaming call\n  responses = chat.async_send_message_stream(\n    \"Tell me something about each planet.\",\n    temperature=0.2,\n    max_output_tokens=1024,\n    top_p=0.95,\n    top_k=40\n  )\n\n  async for async_response in responses:\n    print(async_response)\n\nasyncio.run(main())","metadata":{"id":325}}],["326",{"pageContent":"temperature=0.2,\n    max_output_tokens=1024,\n    top_p=0.95,\n    top_k=40\n  )\n\n  async for async_response in responses:\n    print(async_response)\n\nasyncio.run(main())\n```\n\n## Embedding\n\nPlease refer to the Google Vertex AI documentation for embeddings [here](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/text-embeddings). \n\n### Examples\n\n**Synchronous Usage**\n\n```python\nfrom replit.ai.modelfarm.google.language_models import TextEmbeddingModel, TextEmbedding\n\nmodel = TextEmbeddingModel(\"textembedding-gecko\")\n\n# synchronous call\nresponse: list[TextEmbedding] = model.get_embeddings([\"Hello, world!\"])\n\n# TextEmbedding has two keys: statistics and values\nprint(response[0].statistics)\nprint(response[0].values)\n```\n\nThe `TextEmbedding` object like the following:\n\n```python\n>>> print(response[0].__dict__)\n{\n    \"statistics\": TextEmbeddingStatistics(token_count=4, truncated=False),\n    \"values\": [\n        0.010413173586130142,\n        0.012456662021577358,\n        # .. truncated\n        -0.048689305782318115,\n        -0.007193463854491711,\n    ],\n}\n```\n\n**Asynchronous Usage**\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm.google.language_models import TextEmbeddingModel, TextEmbedding\n\nasync def main():\n  model = TextEmbeddingModel(\"textembedding-gecko\")\n\n  # asynchronous call\n  response: list[TextEmbedding] = await model.async_get_embeddings(\n      [\"Hello, world!\"])\n  print(response)\n\nasyncio.run(main())\n```\n\n## Completion\nPlease refer to the Google Vertex AI documentation for completion [here](https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/text). \n\n### Examples\n\n**Synchronous Usage**\n\n```python\nfrom replit.ai.modelfarm.google.language_models import TextGenerationModel, TextGenerationResponse\n\nmodel: TextGenerationModel = TextGenerationModel.from_pretrained(\n  \"text-bison@001\")\n\nresponse: TextGenerationResponse = model.predict(\n  \"Give me ten interview questions for the role of program manager.\",\n  temperature=0.8,\n  top_p=0.8,\n  top_k=40,\n  max_output_tokens=256)\nprint(response)\n\n# synchronous streaming","metadata":{"id":326}}],["327",{"pageContent":"\"Give me ten interview questions for the role of program manager.\",\n  temperature=0.8,\n  top_p=0.8,\n  top_k=40,\n  max_output_tokens=256)\nprint(response)\n\n# synchronous streaming\nresponses = model.predict_streaming(\n    prompt=\n    \"Give me ten interview questions for the role of a software engineer.\")\n\nfor response in responses:\n  print(response)\n```\n\nThe `TextGenerationResponse` looks like the following:\n\n```python\n>>> print(response.model_dump())\n{\n    \"is_blocked\": False,\n    \"raw_prediction_response\": {\n        \"content\": \"1. What is your experience with project management?\\n2. What is your process for managing a project?\\n3. How do you handle unexpected challenges or roadblocks?\\n4. How do you communicate with stakeholders and keep them updated on the progress of the project?\\n5. What are your strengths and weaknesses as a project manager?\\n6. What are your salary expectations?\\n7. What are your career goals?\\n8. Why are you interested in this position?\\n9. What do you know about our company?\\n10. What questions do you have for me?\",\n        \"metadata\": {\n            \"safetyAttributes\": {\n                \"blocked\": False,\n                \"categories\": [\"Finance\"],\n                \"scores\": [0.1],\n            },\n            \"citationMetadata\": {\"citations\": []},\n        },\n    },\n    \"safety_attributes\": {\"Finance\": 0.1},\n    \"text\": \"1. What is your experience with project management?\\n2. What is your process for managing a project?\\n3. How do you handle unexpected challenges or roadblocks?\\n4. How do you communicate with stakeholders and keep them updated on the progress of the project?\\n5. What are your strengths and weaknesses as a project manager?\\n6. What are your salary expectations?\\n7. What are your career goals?\\n8. Why are you interested in this position?\\n9. What do you know about our company?\\n10. What questions do you have for me?\",\n}\n\n```\n\n**Asynchronous Usage**\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm.google.language_models import TextGenerationModel, TextGenerationResponse","metadata":{"id":327}}],["328",{"pageContent":"}\n\n```\n\n**Asynchronous Usage**\n\n```python\nimport asyncio\nfrom replit.ai.modelfarm.google.language_models import TextGenerationModel, TextGenerationResponse\n\nasync def main():\n  model: TextGenerationModel = TextGenerationModel.from_pretrained(\n      \"text-bison@001\")\n\n  response: TextGenerationResponse = model.predict(\n      \"Give me ten interview questions for the role of program manager.\",\n      temperature=0.8,\n      top_p=0.8,\n      top_k=40,\n      max_output_tokens=256)\n  print(response.model_dump())\n\n  # asynchronous, non-streaming call\n  response: TextGenerationResponse = await model.async_predict(\n      \"How many planets are there in the solar system?\",\n      temperature=0.2,\n      max_output_tokens=1024,\n      top_p=0.95,\n      top_k=40)\n\n  # asynchronous streaming call\n  responses = model.async_predict_streaming(\n      \"How many planets are there in the solar system?\",\n      temperature=0.2,\n      max_output_tokens=1024,\n      top_p=0.95,\n      top_k=40)\n\n  async for async_response in responses:\n    # each response is a ChatModelResponse\n    print(async_response)\n\nasyncio.run(main())\n```","metadata":{"id":328}}],["329",{"pageContent":"# ModelFarm Python\n\n## Installation\n\nModelFarm is available via the `replit-ai` package in PyPI.\n\nIf you're using `poetry`, the default package manager for Python in Replit you can install it with:\n\n```\npoetry add replit-ai\npoetry install\n```\n\nIf you are using pip then install it with:\n\n```\npip install replit-ai\n```\n\n## Overview\n\nThere are two ways of interacting with the ModelFarm APIs. Both are included in the `replit-ai` package.\n\n1.  **Replit API**: The Replit API is our most powerful APIs, and allows for easily moving between all providers, and all models with a standard interface. It supports all features provided by the underlying models.\n2.  **Model Provider Specific APIs.**: These APIs allow for easily swapping between using a model via ModelFarm, and using a model provider's libraries by changing an import. These APIs may not support all available options.\n\n## Quick Start\n\n### Completion\n\n```python\nfrom replit.ai.modelfarm import CompletionModel\n\nmodel = CompletionModel(\"text-bison\")\nresponse = model.complete([\"Write a tweet about the meaning of life: \"], temperature=0.2)\n\nprint(response.responses[0].choices[0].content)\n>>> 'The meaning of life is to find your gift. The purpose of life is to give it away.'\n```\n\n### Chat\n\n```python\nfrom replit.ai.modelfarm import ChatModel, ChatSession, ChatExample, ChatMessage\n\nmodel = ChatModel(\"chat-bison\")\nresponse = model.chat([\n  ChatSession(\n    context=\"You are philosphy bot.\",\n    examples=[\n      ChatExample(\n        input=ChatMessage(content=\"1 + 1\"),\n        output=ChatMessage(content=\"2\")\n      )\n    ],\n    messages=[\n      ChatMessage(author=\"USER\", content=\"How much wood can a woodchuck chuck?\"),\n    ],\n  )\n], temperature=0.2)\n\nprint(response.responses[0].candidates[0].message.content)\n>>> 'A woodchuck can chuck as much wood as a woodchuck can chuck if a woodchuck could chuck wood.'\n```\n\n### Embedding\n\n```python\nfrom replit.ai.modelfarm import EmbedModel, EmbeddingModelResponse\n\nmodel = EmbeddingModel(\"textembedding-gecko\")\nresponse = model.embed([{\"content\": \"Hello, world!\"}])","metadata":{"id":329}}],["330",{"pageContent":"```\n\n### Embedding\n\n```python\nfrom replit.ai.modelfarm import EmbedModel, EmbeddingModelResponse\n\nmodel = EmbeddingModel(\"textembedding-gecko\")\nresponse = model.embed([{\"content\": \"Hello, world!\"}])\n\nprint(response)\n>>> [TextEmbedding(statistics=TextEmbeddingStatistics(token_count=4, truncated=False), values=[0.010562753304839134, ...])]\n```","metadata":{"id":330}}],["331",{"pageContent":"# Chat API\n\nAll the following functions, types, interfaces are exported by the library.\n\n## chat function\n\nGets a single chat message completion for a conversation.\n\n**Signature:**\n\n```typescript\nfunction chat(options: ChatOptions): Promise<\n  Result<\n    {\n      message: ChatMessage;\n    },\n    RequestError\n  >\n>;\n```\n\n### Parameters\n\n|  Parameter | Type |\n|  --- | --- |\n|  options | [ChatOptions](#chatoptions) |\n\n**Returns:**\n\nPromise&lt;[Result](./result.md)<!-- -->&lt;{ message: [ChatMessage](#chatmessage)<!-- -->; }, [RequestError](./requesterror.md)<!-- -->&gt;&gt;\n\n\n## chatStream function\n\nGets a single chat message completion for a conversation. The result contains an iterator of messages, please note that this would be a \\*single message\\* that has the contents chunked up.\n\n**Signature:**\n\n```typescript\nfunction chatStream(options: ChatOptions): Promise<\n  Result<\n    AsyncGenerator<{\n      message: ChatMessage;\n    }>,\n    RequestError\n  >\n>;\n```\n\n### Parameters\n\n|  Parameter | Type |\n|  --- | --- |\n|  options | [ChatOptions](#chatoptions) |\n\n**Returns:**\n\nPromise&lt;[Result](./result.md)<!-- -->&lt;AsyncGenerator&lt;{ message: [ChatMessage](#chatmessage)<!-- -->; }&gt;, [RequestError](./requesterror.md)<!-- -->&gt;&gt;\n\n## chatMultipleChoices function\n\nGets multiple chat completions for a conversation.\n\n**Signature:**\n\n```typescript\nfunction chatMultipleChoices(options: ChatMultipleChoicesOptions): Promise<\n  Result<\n    {\n      choices: Array<{\n        message: ChatMessage;\n      }>;\n    },\n    RequestError\n  >\n>;\n```\n\n### Parameters\n\n|  Parameter | Type |\n|  --- | --- |\n|  options | [ChatMultipleChoicesOptions](#chatmultiplechoicesoptions) |\n\n**Returns:**\n\nPromise&lt;[Result](./result.md)<!-- -->&lt;{ choices: Array&lt;{ message: [ChatMessage](#chatmessage<!-- -->; }&gt;; }, [RequestError](./requesterror.md)<!-- -->&gt;&gt;\n\n\n\n## ChatOptions\n\nOptions for chat request\n\n**Signature:**\n\n```typescript\ninterface ChatOptions \n```\n\n### Properties\n\n|  Property | Type | Description |\n|  --- | --- | --- |","metadata":{"id":331}}],["332",{"pageContent":"## ChatOptions\n\nOptions for chat request\n\n**Signature:**\n\n```typescript\ninterface ChatOptions \n```\n\n### Properties\n\n|  Property | Type | Description |\n|  --- | --- | --- |\n|  messages  | Array&lt;[ChatMessage](#chatmessage)<!-- -->&gt; | Previous messages in the conversation. |\n|  model  | [ChatModel](#chatmodel) | Specifies the model to use. |\n|  context  | string | This can be instructions for the model on how it should respond or information it uses to generate a response. This can also be used to restrict the model to a specific topic. |\n|  temperature  | number | _(Optional)_ Sampling temperature between 0 and 1. The higher the value, the more likely the model will produce a completion that is more creative and imaginative. |\n|  maxOutputTokens?  | number | _(Optional)_ The maximum number of tokens generated in the chat completion. The absolute maximum value is limited by model's context size. \n|  extraParams?   | Record&lt;string, unknown&gt; | _(Optional)_ Allows extra model specific parameters. Consult with the provider documentation for which parameters are available for each model. |\n\n## ChatMultipleChoicesOptions\n\n**Signature:**\n\n```typescript\ninterface ChatMultipleChoicesOptions extends ChatOptions \n```\n**Extends:** [ChatOptions](#chatoptions)\n\n### Properties\n\n|  Property | Type | Description |\n|  ---| --- | --- |\n|  choicesCount | number | Number of chat completions to generate. Minimum 1, the maximum depends on the model, the returned choices will be automatically adjusted to fit the model. You should not treat this as a guarantee, what you will get is a number of choices up to <code>choicesCount</code>. |\n\n\n## ChatMessage\n\nA message in a chat conversation\n\n**Signature:**\n\n```typescript\ninterface ChatMessage \n```\n\n### Properties\n\n|  Property | Type | Description |\n|  ---  | --- | --- |\n|  author  | string | The author of the message. Typically the completion infers the author from examples and previous messages provided in the options. |\n|  content | string | The content of the message |\n\n\n## ChatModel","metadata":{"id":332}}],["333",{"pageContent":"|  content | string | The content of the message |\n\n\n## ChatModel\n\nAvailable models for chat completion\n\n**Signature:**\n\n```typescript\ntype ChatModel = 'chat-bison';\n```","metadata":{"id":333}}],["334",{"pageContent":"# Completion API\n\nAll the following functions, types, interfaces are exported by the library.\n\n[badreftest](#lol)\n\n## complete function\n\nGets the completion for a piece of text.\n\n**Signature:**\n\n```typescript\nfunction complete(options: CompletionOptions): Promise<Result<{\n    completion: string;\n}, RequestError>>;\n```\n\n### Parameters\n\n|  Parameter | Type |\n|  --- | --- |\n|  options | [CompletionOptions](#completionoptions) |\n\n**Returns:**\n\nPromise&lt;[Result](./result.md)<!-- -->&lt;{ completion: string; }, [RequestError](./requesterror.md)<!-- -->&gt;&gt;\n\n\n## completeStream function\n\nGets a stream of completions for a piece of text.\n\n**Signature:**\n\n```typescript\nfunction completeStream(options: CompletionOptions): Promise<Result<AsyncGenerator<{\n    completion: string;\n}>, RequestError>>;\n```\n\n### Parameters\n\n|  Parameter | Type |\n|  --- | --- |\n|  options | [CompletionOptions](#completionoptions) |\n\n**Returns:**\n\nPromise&lt;[Result](./result.md)<!-- -->&lt;AsyncGenerator&lt;{ completion: string; }&gt;, [RequestError](./requesterror.md)<!-- -->&gt;&gt;\n\n## completeMultipleChoices function\n\nGets multiple completions for a piece of text.\n\n**Signature:**\n\n```typescript\ndeclare function completeMultipleChoices(options: CompletionMultipleChoicesOptions): Promise<Result<{\n    choices: Array<{\n        completion: string;\n    }>;\n}, RequestError>>;\n```\n\n### Parameters\n\n|  Parameter | Type | Description |\n|  --- | --- | --- |\n|  options | [CompletionMultipleChoicesOptions](#completionmultiplechoicesoptions) |  |\n\n**Returns:**\n\nPromise&lt;[Result](./result.md)<!-- -->&lt;{ choices: Array&lt;{ completion: string; }&gt;; }, [RequestError](./requesterror.md)<!-- -->&gt;&gt;\n\n\n\n## CompletionOptions\n\nOptions for completion request\n\n**Signature:**\n\n```typescript\ninterface CompletionOptions \n```\n\n### Properties\n\n|  Property| Type | Description |\n|  --- | --- | --- |\n|  extraParams? | Record&lt;string, unknown&gt; | _(Optional)_ Allows extra model specific parameters. Consult with the documentation for which parameters are available for each model. |","metadata":{"id":334}}],["335",{"pageContent":"|  extraParams? | Record&lt;string, unknown&gt; | _(Optional)_ Allows extra model specific parameters. Consult with the documentation for which parameters are available for each model. |\n|  maxOutputTokens?  | number | _(Optional)_ The maximum number of tokens generated in the completion. The absolute maximum value is limited by model's context size. |\n|  model  | [CompletionModel](#completionmodel) | Specifies the model to use |\n|  prompt | string | The string/text to complete |\n|  temperature?  | number | _(Optional)_ Sampling temperature between 0 and 1. The higher the value, the more likely the model will produce a completion that is more creative and imaginative. |\n\n\n## CompletionMultipleChoicesOptions\n\n**Signature:**\n\n```typescript\ninterface CompletionMultipleChoicesOptions extends CompletionOptions \n```\n**Extends:** [CompletionOptions](#completionoptions)\n\n### Properties\n\n|  Property | Type | Description |\n|  --- | --- | --- |\n|  choicesCount| number | Number of completions to generate. Minimum 1, the maximum depends on the model, the returned choices will be automatically adjusted to fit the model. You should not treat this as a guarantee, what you will get is a number of choices upto <code>choicesCount</code>. |\n\n\n\n\n## CompletionModel\n\nAvailable models for text completion\n\n**Signature:**\n\n```typescript\ntype CompletionModel = 'text-bison';\n```","metadata":{"id":335}}],["336",{"pageContent":"# Embedding API\n\nAll the following functions, types, interfaces are exported by the library.\n\n## embed function\n\nConverts text into numerical vectors\n\n**Signature:**\n\n```typescript\nfunction embed(options: EmbedOptions): Promise<Result<{\n    embeddings: Array<Embedding>;\n}, RequestError>>;\n```\n\n### Parameters\n\n|  Parameter | Type |\n|  --- | --- |\n|  options | [EmbeddingOptions](#embeddingoptions) |\n\n**Returns:**\n\nPromise&lt;[Result](./result.md)<!-- -->&lt;{ embeddings: Array&lt;[Embedding](#embedding)<!-- -->&gt;; }, [RequestError](./requesterror.md)<!-- -->&gt;&gt;\n\n## EmbeddingOptions\n\nOptions for embedding request\n\n**Signature:**\n\n```typescript\ninterface EmbeddingOptions \n```\n\n### Properties\n\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  content |  | Array&lt;string&gt; | The strings to embed, the returned embedding will correspond to the order of the passed string |\n|  extraParams? |  | Record&lt;string, unknown&gt; | _(Optional)_ Allows extra model specific parameters. Consult with the documentation |\n|  model |  | [EmbeddingModel](#embeddingmodel) | The model to embed with |\n\n\n\n## Embedding\n\nEmbedding vector returned by an embedding request\n\n**Signature:**\n\n```typescript\ninterface Embedding \n```\n\n### Properties\n\n|  Property | Type | Description |\n|  --- | --- | --- |\n|  truncated | boolean | Indicates if the input text was longer than max allowed tokens and truncated |\n|  values  | Array&lt;number&gt; | The embedding vectors corresponding to the words in the input text |\n\n\n## EmbeddingModel\n\nAvailable models for text embedding\n\n**Signature:**\n\n```typescript\ntype EmbeddingModel = 'textembedding-gecko';\n```","metadata":{"id":336}}],["337",{"pageContent":"# ModelFarm JavaScript/TypeScript\n\nModelFarm expects to run within a Replit managed server context. Use this library in servers or other applications that execute on a Replit server, rather than your user's browser.\n\nFor an example of how to use this library with streaming, explore [Replit's demo app](https://replit.com/@replit/Bun-ModelFarm-Chat).\n\n## Installation\n\nInstall the TypeScript Library with\n\n```\nnpm install @replit/ai-modelfarm\n```\n\nor if you're using `yarn`, run\n\n```\nyarn add @replit/ai-modelfarm\n```\n\nThe library supports [Bun](https://replit.com/@replit/Bun?v=1), [Deno](https://replit.com/@replit/Deno?v=1), and [NodeJS](https://replit.com/@replit/Nodejs?v=1) (Node version 18+ or any\nNode version [polyfilled with the fetch API](https://github.com/node-fetch/node-fetch#providing-global-access)).\n\n## Quickstart\n\n### Chat\n\nRefer to [Chat docs](./chat.md) for a complete API reference and more functions\nlike one that supports streaming\n\n```ts\nimport * as replitai from '@replit/ai-modelfarm';\n\nconst result = await replitai.chat({\n  model: 'chat-bison',\n  temperature: 0.5,\n  messages: [{ author: 'user', content: 'how are you?' }],\n});\n\nconsole.log(result);\n```\n\n### Completion\n\n\nRefer to [Completion docs](./completion.md) for a complete API reference and more\nfunctions like one that supports streaming\n\n```ts\nimport * as replitai from '@replit/ai-modelfarm';\n\nconst result = await replitai.complete({\n  model: 'text-bison',\n  prompt: 'What is the capital of France?',\n  temperature: 0.2,\n  maxOutputTokens: 64,\n});\n\nconsole.log(result);\n```\n\n### Embedding\n\nRefer to [Embedding docs](./embedding.md) for a complete API reference\n\n```ts\nimport * as replitai from '@replit/ai-modelfarm';\n\nconst result = await replitai.embed({\n  model: 'textembedding-gecko',\n  content: ['What is the capital of France?'],\n});\n\nconsole.log(result);\n```","metadata":{"id":337}}],["338",{"pageContent":"# Request Error\n\nRequestError interface represents an HTTP error with a message and an HTTP status code. It's surfaced in the API as the error in [result type](./result.md).\n\n## RequestError\n\nAn object that represents an error with a request\n\n**Signature:**\n\n```typescript\ninterface RequestError \n```\n\n### Properties\n\n|  Property |  Type |\n|  --- | --- | \n|  message   | string  |\n|  statusCode | number  |","metadata":{"id":338}}],["339",{"pageContent":"# Result\n\nA Result represents a successful value or an error. It forces the consumer to check whether the returned type is an error or not, `result.ok` acts as a [discriminant](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#discriminated-unions) between success and failure.\n\nFor example, when processing the return type for the [chat function](./chat.md#chat-function) you can do the following\n\n```typescript\nconst chatResult = chat(chatOptions);\n\nif (!chatResult.ok) {\n  handleError(chatResult.error);\n\n  return;\n}\n\nconsole.log(chatResult.value.message)\n``` \n\nThe library never throws when there's an error, instead it returns an [error result](#errresult), and the value of the result (i.e. `result.error`) will be a [request error](./requesterror.md).\n\n\n## Result type\n\n**Signature:**\n\n```typescript\ntype Result<T, E> = OkResult<T> | ErrResult<E>;\n```\n\n**References:** [OkResult](#okresult)<!-- -->, [ErrResult](#errresult)\n\n## OkResult\n\nRepresents a successful result where you can access `value`\n\n**Signature:**\n\n```typescript\ninterface OkResult<T> \n```\n\n### Properties\n\n|  Property | Type | Description |\n|  --- | --- | --- |\n|  ok | true |  |\n|  value  | T |  |\n\n\n## ErrResult\n\nRepresents a failure result\n\n**Signature:**\n\n```typescript\ninterface ErrResult<E> \n```\n\n### Properties\n\n|  Property | Type | Description |\n|  --- | --- | --- |\n|  error | E | Usually a [request error](./requesterror.md) |\n|  ok | false |  |","metadata":{"id":339}}],["340",{"pageContent":"# Roles & permissions\n\nHere are some tables with information on the permissions each role in a Replit Organization has. The Team Owner is, by default, the user who created the Team.\n\n## Organization Roles and Permissions\n\n|                          | Org Owner              | Org Admin | Team Owner |\n| ------------------------ | ---------------------- | --------- | ---------- |\n| Add & remove Seats       | ✅                     |           |            |\n| Change payment method    | ✅                     |           |            |\n| Cancel plan              | ✅                     |           |            |\n| Leave Org                | If joined Organization | ✅        |            |\n| Add others as Org Owners | ✅                     |           |            |\n| Add others as Org Admins | ✅                     | ✅        |            |\n| Remove Org Owners        | ✅                     |           |            |\n| Remove Org Admins        | ✅                     |           |            |\n| Create Teams in Org      | ✅                     | ✅        |            |\n| Join Teams in Org        | ✅                     | ✅        |            |\n| Archive Team             | ✅                     |           | ✅         |\n| Delete Team              | ✅                     |           | ✅         |\n| Rename Team              | ✅                     |           | ✅         |\n\n## Team Roles and Permissions (Pro, Edu, Friends)\n\n|                           | Team Owner | Team Admin | Team Member | Guest |\n| ------------------------- | ---------- | ---------- | ----------- | ----- |\n| Add & remove Team Members | ✅         | ✅         |             |       |\n| Add & remove Team Admins  | ✅         |            |             |       |\n| Change Team Member role   | ✅         |            |             |       |\n| Leave Team                |            | ✅         | ✅          |       |\n\n## Team Roles and Permissions (Pro, Friends)","metadata":{"id":340}}],["341",{"pageContent":"| Change Team Member role   | ✅         |            |             |       |\n| Leave Team                |            | ✅         | ✅          |       |\n\n## Team Roles and Permissions (Pro, Friends)\n\n|                                  | Team Owner | Team Admin | Team Member | Guest |\n| -------------------------------- | ---------- | ---------- | ----------- | ----- |\n| Create & delete Repls & Projects | ✅         | ✅         | ✅          |       |\n| Edit Repls                       | ✅         | ✅         | ✅          | ✅    |\n| Add & remove Guests on Repls     | ✅         | ✅         | ✅          |       |\n\n## Team Roles and Permissions (Edu)\n\n|                                   | Team Owner | Teacher (Team Admin) | Student (Team Member) |\n| --------------------------------- | ---------- | -------------------- | --------------------- |\n| Add others as Teachers            | ✅         |                      |                       |\n| Add others as Students            | ✅         | ✅                   |                       |\n| Remove Students                   | ✅         | ✅                   |                       |\n| Create/Publish/Unpublish Projects | ✅         | ✅                   |                       |\n| Open/Submit Projects              |            |                      | ✅                    |","metadata":{"id":341}}],["342",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Boosts\n\nIf you want to make your Repls more powerful, you can use the Boost Power Up to increase the number of vCPUs and how much RAM your Repl has.\n\nAll free Repls come with **0.5 vCPU + 0.5 GiB RAM**.\n\nThe [Replit Core membership](https://replit.com/site/pricing) comes with **4 vCPUs + 8GiB RAM** Repls. \n\nYou can also boost any of your Repls up to **32x (16 vCPUs + 16GiB RAM)** with [Cycles](/cycles/about-cycles).\n\n## Boosting your Repl\n\nYou can Boost your Repl from inside the Workspace. To activate a Boost:\n\n1. Navigate to your Repl\n2. Open the Repl resources panel by clicking to the right of your Repl's name\n3. Select the pencil icon under Compute\n   ![Screenshot of Boost toggle](https://docimg.replit.com/images/power-ups/boost-pencil.png)\n4. Choose one of the options in the Boost selection menu\n   ![Screenshot of Boost toggle](https://docimg.replit.com/images/power-ups/activate-boost.png)\n5. Press the Activate button\n\nYour Repl is now boosted!","metadata":{"id":342}}],["343",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Private Repls\n\nWith a free Replit account, personal Repls are public by default.\n\nAs an individual, you can make your Repls private by subscribing to our [Replit Core membership](https://replit.com/pricing) (previously Hacker or Pro) that comes with unlimited private Repls.\n\nTeams Pro accounts come with the ability to make any Team Repl private.\n\nPrivate Repls can only be accessed by directly invited guests or by team members.\n\n## Creating a private Repl\n\nYou can make a Repl private by toggling the Repl to Private when you're making a new Repl from a Template or forking an existing Repl.\n\n![Creating a Private Repl](https://docimg.replit.com/images/power-ups/private-create-repl.png)\n\n## Making an existing Repl private\n\n### From the Workspace\n\nYou can make any public Repl private by toggling it on from the Workspace.\n\n1. Navigate to your Repl\n2. Open the info panel by clicking on your Repl's name in the navbar\n3. Make your Repl private by pressing the Private toggle\n   ![Making a Repl private from the Workspace](https://docimg.replit.com/images/power-ups/private-workspace.png)\n\n### From the My Repls page\n\nYou can also make any of your public Repls private from the My Repls page.\n\n1. Navigate to the My Repls page from the left sidebar\n2. Hover over the \"Public\" copy on the card of the Repl you want to make private\n3. Press the \"Make private\" button\n   ![Making a Repl private from the My Repls page](https://docimg.replit.com/images/power-ups/private-my-repls.png)","metadata":{"id":343}}],["344",{"pageContent":"---\nsidebar_position: 0\n---\n\n# Replit Core\n\n[Replit Core](https://replit.com/replit-core) is the membership to unlock the full Replit experience. \n\n#### Unlimited access to Replit AI\n- Save time and code faster with Replit's industry-leading AI coding assistant, currently powered by GPT-4.\n- Debug code, get intelligent autocomplete suggestions, and convert natural language to code with one click. \n\n#### Lightning-fast and secure workspace\n- A high-powered 8 GiB RAM and 4 vCPU cloud development environment with the option to upgrade. \n- Generous network bandwidth (100 GiB) and storage (50 GiB), so you'll never run out of resources.\n- Additional security capabilities like SSH access and private Repls to control sharing.\n\n#### One-click Deployments with on-demand scaling\n- Static and Autoscale Deployments with an allocation of 6 million compute units per month, to cover up to ~10 projects\n- Analytics to monitor your apps and adjust capacity without overpaying\n\n#### Priority support and community events\n- Help when you need it with dedicated 1:1 support \n- Access to members-only events\n- Early access to new features \n\n#### Partner perks\n- Access the web’s collective knowledge, powered by advanced AI models, with Perplexity. Members enjoy a complimentary 4-month Perplexity Pro subscription.  \n- Monthly allotment of 3 GiB storage and 100 compute hours with built-in integration for PostgreSQL, powered by @Neon.\n- Access Google Cloud infrastructure, services, and foundational models via Replit ModelFarm, supporting secure access to 3rd-party Gen AI providers. Storage credits coming soon.\n\n\nSee a full list of Replit Core perks and compare offerings on the [pricing page](https://replit.com/pricing)","metadata":{"id":344}}],["345",{"pageContent":"# Getting Started\n\nAt Replit, we are on a mission to empower the next billion software creators. Over time, we grew full conviction that such a mission can’t be accomplished without putting our AI features in the hands of every Replit developer. Code completion and code assistance are now enabled by default. \n\nDevelopers on the free plan will have access to our basic AI features, while Replit Core members will retain exclusive access to the most powerful AI models and advanced features.\n\nReplit AI currently includes five features:\n\n**[Complete Code](/power-ups/replitai/complete-code)** - Replit AI's flagship feature. Replit AI leverages context to provide code suggestions as you're typing. Press `tab` to accept suggestions.\n\n**[Explain Code](/power-ups/replitai/explain-code)** - Highlight code, and Replit AI will walk through it step-by-step in plain English.\n\n**[Edit Code](/power-ups/replitai/edit-code)**, and Replit AI will provide a suggested rewrite of the code block.\n\n**[Generate Code](/power-ups/replitai/generate-code)** - Provide a natural language prompt, and let Replit AI generate code to help solve your problem.\n\n**[Chat](/power-ups/replitai/replitai-chat)** - AI assistant that enables users to quickly get answers to their coding-related questions directly in the Workspace, without ever leaving the page.\n\nYou can get access to these features from within all Replit plans.\n\nCheck out our [Intro to Replit AI course](https://www.youtube.com/watch?v=QEdHbWJxc6k&t=3s) to get started.","metadata":{"id":345}}],["346",{"pageContent":"# Complete Code\n\nReplit AI is a code completion tool that provides suggestions based on the code in your current file. To use it, simply start coding and the suggestions will appear inline.\n\n## Features\n\n- Code completion suggestions based on your current file\n- Enhanced suggestions by using code comments\n- Prompt engineering for improved results\n- Toggle code completion on or off in editor settings\n\n## How to Use\n\n1. Start coding in your file and Replit AI will provide code completion suggestions.\n2. Use code comments to provide additional context for more accurate suggestions.\n3. Write clean, relevant code and comments for the best results from Replit AI.\n4. If desired, toggle Replit AI on or off in the editor settings.\n\n## Examples\n\nHere is an example of Replit AI providing basic code completion suggestions:\n\n![replitai basic code generation](https://docimg.replit.com/images/replitai/complete-code-examples-code-generation.png)\n\nAnd here is an example of Replit AI using code comments to generate more accurate suggestions:\n\n![replitai basic code generation](https://docimg.replit.com/images/replitai/complete-code-examples-accurate-suggestion.png)\n\n## Prompt Engineering\n\nGood prompts for AI code helpers like Replit AI can greatly improve the tool's performance and usefulness. Here are some examples of original prompts and improved versions that provide more context and detail:\n\n| Original Prompt                                      | Improved Prompt                                                                                                        | Possible AI Confusion                                                                                                                                  |","metadata":{"id":346}}],["347",{"pageContent":"| ---------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `// write a function that adds two numbers together` | `// a function that returns the sum of two numbers`                                                                    | Replit AI might get confused with what to do with the added numbers. In the original prompt, no steps are specified with what to do with the result. |\n| `// event listener`                                  | `// 'ready' event listener`                                                                                            | Replit AI will not know what to write next if only 'event listener' is specified.                                                                    |\n| `// fetch a random image from unsplash`              | `// use axios to fetch a random image from the unsplash api`                                                           | Replit AI  might accidentally provide a URL instead of actually making the api call.                                                                  |\n| `/* apply a custom style to my checkbox */`          | `/* select all html elements with the .checkbox class and use labels and pseudo-elements to give it a custom style */` | Replit AI  will most likely get confused selecting the checkbox element.                                                                              |\n| `// create an array of numbers`                      | `// create an array of numbers from 0 to 10`                                                                           | Replit AI  might not know which numbers to include in the array without more specific instructions.                                                   |","metadata":{"id":347}}],["348",{"pageContent":"| `// sort the list of names`                          | `// sort the list of names alphabetically`                                                                             | Replit AI  might not know the desired sorting order without more specific instructions.                                                               |\n| `// read data from the file`                         | `// read data from the file 'data.txt'`                                                                                | Replit AI  might not know which file to read without a specific filename.                                                                             |\n| `// connect to the database`                         | `// connect to the MySQL database using the 'mysql' library`                                                           | Replit AI might not know which database to connect to or which library to use.                                                                       |\n| `// loop through the list`                           | `// loop through the list of numbers and print each one`                                                               | Replit AI might not know what to do with the list items without specific instructions.                                                               |\n| `// insert a new record`                             | `// insert a new record into the 'users' table`                                                                        | Replit AI might not know which table to insert into without a specific table name.                                                                   |\n\n## Toggling Code Completion\n\nTo deactivate Replit AI's Code Completion feature, go to bottom of your editor, click AI and uncheck the Enable button. This can also be completed within the Settings pane. \n\n![toggle code completion](https://docimg.replit.com/images/replitai/Toggling-Code-Completion.png)","metadata":{"id":348}}],["349",{"pageContent":"# Explain Code\n\nReplit AI can give you step-by-step natural language explanations of your code with Explain Code. This feature is especially useful when trying to understand other people's code or code you wrote in the past.\n\nConsider this example from [100 Days of Code](https://replit.com/learn/100-days-of-python). Follow these steps:\n\n1. Select the block of code you want explained.\n   ![](https://docimg.replit.com/images/replitai/Explain_Code_Inline_Step_1.png)\n2. Right-click in the editor to open up the context menu.\n   ![](https://docimg.replit.com/images/replitai/Explain_Code_Inline_Step_2.png)\n3. Select `Explain code` from the context menu and wait for Replit AI to generate an explanation for the code you selected.\n   ![](https://docimg.replit.com/images/replitai/Explain_Code_Inline_Step_3.png)\n4. Once your explanation has been generated, you'll see a step-by-step walkthrough of the code you selected.\n5. If the explanation wasn't helpful, you can have Replit AI try again by pressing the `Retry`.\n6. Want to ask a followup to the explanation? Press `Reply in Chat` and you will be redirected to the Chat interface where you can ask followup questions","metadata":{"id":349}}],["350",{"pageContent":"# Edit Code\n\nWith Edit Code, Replit AI can refactor your code to run faster, translate it into another language, and make your code easier to read\n\nTo use Edit Code, follow these steps:\n\n1. Select the block of code you want to transform.\n   ![image](https://docimg.replit.com/images/replitai/Edit_Code_Inline_1.png)\n2. Right-click in the editor to open up the context menu.\n   ![image](https://docimg.replit.com/images/replitai/Edit_Code_Inline_2.png)\n3. Select `Edit code`.\n   ![image](https://docimg.replit.com/images/replitai/Edit_Code_Inline_3.png)\n4. Type a prompt for what you would like to change about the highlighted code block in the provided text field and press `Send`\n   ![image](https://docimg.replit.com/images/replitai/Edit_Code_Inline_4.png)\n5. Replit AI will provide a suggestion to transform your code. From here, you can choose to:   \n   **5) View suggested edits** - See an inline diff of the code edit.   \n   **6) Cycle between views** - See the original code, or just the suggested change.   \n   **7 & 8) Type a new prompt** - Refine your prompt and try again.   \n   **9) Discard** - Discard the code edit.   \n   **10) Accept suggestion** - If you like the suggestion, click this and Replit AI will apply the difference in your editor.","metadata":{"id":350}}],["351",{"pageContent":"# Generate Code\n\nWith Generate Code, you can give Replit AI a natural language prompt, and Replit AI will return a block of code to fulfill the purpose. This feature can write large chunks of code at once, so it's useful when you want to write small programs or several related functions in one shot.\n\nTo use Generate Code, follow these steps:\n\n1. Right-click in the editor to open up the context menu\n   ![](https://docimg.replit.com/images/replitai/Generate_Code_Inline_Step_1.png)\n2. Select `Generate code` from the menu\n   ![](https://docimg.replit.com/images/replitai/Generate_Code_Inline_Step_2.png)\n3. Input a natural language prompt in the text field and press send\n   ![](https://docimg.replit.com/images/replitai/Generate_Code_Inline_Step_3.png)\n4. Replit AI will provide suggested code. From here, you can choose to:   \n   - **4) See generated code** - See what replitai is suggesting.   \n   - **5) Type a new prompt** - Refine your prompt and try again.   \n   - **6) Generate** - If you want to try again with the current prompt.   \n   - **9) Discard** - Discard the code generation.   \n   - **10) Accept suggestion** - If you like the suggestion, click this and Replit AI will insert the code in your editor.","metadata":{"id":351}}],["352",{"pageContent":"# Comparing Github Copilot and Replit Replit AI\n\nIn this doc, we'll be comparing Github Copilot and [Replit Replit AI](https://replit.com/site/ghostwriter). We'll go over how each works, available features, pricing, and more. Much of the information for Github Copilot in this doc was pulled from Github's Copilot marketing page and their associated docs.\n\n## What is Replit AI?\n\nReplit AI is more than just an AI pair programmer. It is Replit’s suite of artificial intelligence features which include: Complete Code, Generate Code, Edit Code, and Explain Code. Complete Code is our flagship feature and it offers autocomplete-style suggestions as you code.\n\n## What is Github Copilot\n\nGitHub Copilot is an AI pair programmer. It offers autocomplete-style suggestions as you code. You can receive suggestions from GitHub Copilot either by starting to write the code you want to use, or by writing a natural language comment describing what you want the code to do.\n\n## How does Replit AI work?\n\nReplit AI returns results generated from large language models trained on publicly available code and tuned by Replit. To make suggestions and explain your code, Replit AI considers what you type and other context from your Repl like the programming language you're using.\n\n## How does Github Copilot work?\n\nGitHub Copilot analyzes the context in the file you are editing, as well as related files, and offers suggestions from within your text editor. GitHub Copilot is powered by OpenAI Codex, a new AI system created by OpenAI.\n\n## What are Replit AI's features?\n\n**Complete Code** - Replit AI leverages context to provide code suggestions as you're typing. Press `tab` to accept suggestions.\n\n<video controls width=\"80%\" loop src=\"https://docimg.replit.com/images/replitai/221029_GW_JS_Demo.mp4\" type=\"video/mp4\">\n</video>\n\n**Generate Code** - Provide a natural language prompt, and let Replit AI generate code to help solve your problem.","metadata":{"id":352}}],["353",{"pageContent":"</video>\n\n**Generate Code** - Provide a natural language prompt, and let Replit AI generate code to help solve your problem.\n\n<video controls width=\"80%\" loop src=\"https://docimg.replit.com/images/replitai/generate_code.mp4\" type=\"video/mp4\">\n</video>\n\n**Explain Code** - Highlight code, and Replit AI will walk through it step-by-step in plain English. This feature is especially useful when trying to understand other people's code or code you wrote in the past.\n\n<video controls width=\"80%\" loop src=\"https://docimg.replit.com/images/replitai/explain_code.mp4\" type=\"video/mp4\">\n</video>\n\n**Edit Code** - Edit Code allows users to highlight blocks of code, describe the adjustments needed (like changing variable names), and Replit AI will provide a suggested rewrite of the code block.\n\n<video controls width=\"80%\" loop src=\"https://docimg.replit.com/images/replitai/transform_code.mp4\" type=\"video/mp4\">\n</video>\n\n## What are Github Copilot's features?\n\nCopilot offers two main features: autocomplete-style suggestions and generating code through natural language comments. Both features are used to generate code or entire functions in real-time. Copilot also integrates into multiple editors including Visual Studio, VS code, & Neovim.\n\n## How much does Replit Replit AI cost?\n\nCurrently, Replit AI is available in the Replit Core membership. Feel free to visit our [Replit AI marketing page](https://replit.com/site/replitai) to upgrade and see more live examples of Replit AI in action.\n\n## How much does Github Copilot cost?\n\nGitHub Copilot is available as a monthly and yearly subscription. The monthly subscription is $10 per calendar month and the yearly subscription is $100 per year.","metadata":{"id":353}}],["354",{"pageContent":"---\nsidebar_position: 6\n---\n\n# FAQ\n\n## General\n\n### What is Replit AI?\n\nReplit AI is Replit’s suite of artificial intelligence features: Complete Code, Generate Code, Edit Code, Explain Code and Chat. Together, they enhance your development experience on Replit.\n\n### How does Replit AI work?\n\nReplit AI returns results generated from large language models trained on publicly available code and tuned by Replit. To make suggestions and explain your code, Replit AI considers what you type and other context from your Repl like the programming language you're using.\n\n### How much does Replit AI cost?\n\nReplit AI is free for all users.\n\nAdvanced Replit AI features are available through our Replit Core membership.\n\nYou can find more pricing details on our [pricing page](https://replit.com/pricing).\n\n### Which programming languages does Replit AI support?\n\nReplit AI performs best with JavaScript and Python code, but it supports 16 languages in total. The current list:\n\n- Bash\n- C\n- C#\n- C++\n- CSS\n- Go\n- Java\n- JavaScript\n- HTML\n- PHP\n- Perl\n- Python\n- R\n- Ruby\n- Rust\n- SQL\n- TypeScript\n\nNote: effectiveness may vary by language.\n\n### Can I turn off Replit AI Complete Code?\n\nYes. You can turn off Replit AI Complete Code in the Replit workspace. See step-by-step guide [here](/power-ups/replitai/complete-code).\n\n\n### What is the difference between Generate and Complete Code?\n\nComplete Code actively provides suggestions in your workspace while you program in Replit. In contrast, for Generate Code, you select then prompt the feature with words describing the code you would like.\n\nThe two features use different models. For more information on how each works, visit the [Complete Code](/power-ups/replitai/complete-code) docs.\n\n### How can I help?","metadata":{"id":354}}],["355",{"pageContent":"The two features use different models. For more information on how each works, visit the [Complete Code](/power-ups/replitai/complete-code) docs.\n\n### How can I help?\n\nUse Replit AI and share your feedback with Replit as you code. We also encourage you to report bugs, offensive output, code vulnerabilities, or unwanted data to our Support team at [replit.com/support](https://replit.com/support). Replit works and ships fast, takes trust and safety seriously, and we are committed to continually improving our products.\n\n### Can Replit AI be used on other platforms?\n\nReplit AI is exclusive to Replit.\n\n## Privacy\n\n### Is code I write on Replit shared through Replit AI?\n\nPublic Repls (including their code and your keystrokes) may be used to train Replit AI. If you do not wish your Repl to be used for training at all, you may make it private.\n    \n### Does Replit AI change my rights for code I write on Replit? \n\nNo. As was the case before Replit launched Replit AI, code in public Repls is automatically subject to the MIT License. Check out [Licensing Information](/legal-and-security-info/licensing-info) for details. To check if a given Repl of yours is public or private, go to [My Repls](https://replit.com/repls).\n\n### What data is collected when I use Replit?\n\nTo work as an online development environment, Replit collects your interactions with the service and data that you input so we can display and run your software. Like any online service, we use this data so that we can provide and improve our services.\n\n### How can I report problems with code generated or suggested for me?","metadata":{"id":355}}],["356",{"pageContent":"### How can I report problems with code generated or suggested for me?\n\nCode generated or suggested for you may be offensive or otherwise inappropriate. By reporting this, you can help us to improve our products. Click the “Share feedback” link at the bottom right of the Generate Code window to provide your feedback, or visit our [Support page](https://support-form.util.repl.co/) to provide your feedback. Please include a copy of the code that you wrote and the code suggestion or explanation that you received.\n\n### Where can I learn more about Replit privacy and data protection?\n\nFor more information about how Replit processes personal data, please see our [Privacy Policy](http://replit.com/privacy).","metadata":{"id":356}}],["357",{"pageContent":"# SSH\n\nWith SSH, you can access your Repl's shell remotely. SSH enables workflows like easy file transfer or using your favorite local IDE to edit your code on Replit.\n\nSSH is available in all of our paid plans.\n\n## Configuring SSH\n\nOpen the \"SSH\" pane in the left sidebar. You will need an SSH Private Key to configure SSH for your Repl. For Linux or Mac, you can use the [`ssh-keygen` tool](https://www.ssh.com/academy/ssh/keygen) to generate SSH keys. On Windows with PuTTY you can [use PuTTYgen](https://www.ssh.com/academy/ssh/putty/windows/puttygen) to generate SSH keys. Alternatively, on Windows you can [install OpenSSH](https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse) and use `ssh-keygen` and the `ssh` command in the Windows terminal.\n\nYou will need the \"public\" part of the key. On Linux this has a `.pub` extension.\n\nYou will also need your Repl's ID and name. You can quickly see those by running the following in your Repl's Shell tab:\n\n```sh\necho REPL-ID is $REPL_ID\necho REPL-NAME is $REPL_SLUG\necho USERNAME is $REPL_OWNER\n```\n\n### Public Key\n\n#### Linux/Mac\n\nYour public key is generated by `ssh-keygen` and has a `.pub` extension. For example, if you generated a key at `~/.ssh/replit`, the public key will be found at `~/.ssh/replit.pub`. You can display it by running:\n\n```sh\ncat ~/.ssh/replit.pub\n```\n\nThe output of this command should be pasted into the \"SSH\" pane to enable the key in your Repl.\n\n#### Windows\n\nWhen you create a key or load an existing key into PuTTYgen, the public key to copy to Replit is displayed in the \"Public key for parsing...\" section:\n![](https://docimg.replit.com/images/ssh/puttygen-pubkey.png)\n\nThe public key should be pasted into the \"SSH\" pane to enable the key in your Repl.\n\n### SSH Configuration\n\nWhen configuring your SSH client, you will need to configure at least the following:\n\n- The SSH username is `REPL-ID`\n- The SSH hostname is `REPL-NAME--USERNAME.repl.co`","metadata":{"id":357}}],["358",{"pageContent":"### SSH Configuration\n\nWhen configuring your SSH client, you will need to configure at least the following:\n\n- The SSH username is `REPL-ID`\n- The SSH hostname is `REPL-NAME--USERNAME.repl.co`\n- You will need to configure the SSH session to use your key. Password authentication is not supported.\n\n### Example: Linux/Mac, and Windows with OpenSSH\n\nFor the purposes of this documentation we'll assume that the private key file generated above is at `~/.ssh/replit`. If you changed the location of the generated private key, you'll need to tweak the paths to reflect this.\n\n#### Option 1: All-in-one SSH Command\n\nIn your favorite terminal application:\n\n```sh\nssh -i ~/.ssh/replit REPL-ID@REPL-NAME--USERNAME.repl.co\n```\n\n#### Option 2: SSH Configuration File\n\nYou can add the following to your `~/.ssh/config` to add a configuration for your Repl. This is the recommended way to configure SSH to your Repl if you expect to reconnect often.\n\n```ssh-config\nHost REPL-NAME--USERNAME.repl.co\n  User REPL-ID\n  IdentityFile ~/.ssh/replit\n```\n\nThen, in your favorite terminal application:\n\n```sh\nssh REPL-NAME--USERNAME.repl.co\n```\n\n### Example: Windows (with PuTTY)\n\nYou will need to configure your PuTTY session for Replit SSH:\n\n1. In the \"Session\" category, set \"Host Name (or IP address)\" to `REPL-NAME--USERNAME.repl.co`\n   ![](https://docimg.replit.com/images/ssh/putty-hostname.png)\n2. In the \"Connection > Data\" category, set \"Auto-login username\" to `REPL-ID`\n   ![](https://docimg.replit.com/images/ssh/putty-username.png)\n3. In the \"Connection > SSH > Auth\" category, set \"Private key file for authentication\" to the path to your private key generated earlier\n   ![](https://docimg.replit.com/images/ssh/putty-privkey.png)\n4. (Optional) In the \"Session\" category, save your session configuration\n5. Click \"Done\" to open a connection to the Repl","metadata":{"id":358}}],["359",{"pageContent":"import Loom from '../../src/components/Loom'\n\n# Introduction to the Workspace\n\n<Loom id=\"45e8cbc1586f49b5a9ef4a9416ef2a4b\"/>\n\nThe Workspace is like an IDE (Integrated Development Environment), providing a comprehensive set of development tools and features for creating, debugging, and managing your software. It helps you quickly and easily create, modify, and collaborate on your code.\n\n## How to create a Repl\n\nA Repl (derived from REPL—\"read-eval-print loop\") is an interactive programming environment where you can write and execute code in real-time. To create one, navigate to [Replit](https://replit.com) and click the **create** button in the sidebar.\n\n![create a Repl](https://docimg.replit.com/images/programming-ide/create-repl.gif)\n\nNext, give your Repl a name and choose the Template you want to use. You can also directly [import a GitHub repository](/category/using-git-on-replit).\n\nTo import a GitHub repository, read our docs [here](/category/using-git-on-replit).\n\n![name and choose template](https://docimg.replit.com/images/programming-ide/choose-lang.gif)\n\nCongratulations! You've just created a Repl!\n\n## The sidebar\n\nNavigate between files and folders easily using the file navigator in the sidebar. Repls come with syntax highlighting and autocompletion to make coding easier. And you can access helpful resources such as documentation from the Tools section for extra support.\n\n### The file tree\n\nQuickly locate and access files in your project using the file tree, an organized navigation system that displays the hierarchical structure of your project with each file and folder clearly labeled. The file tree offers a comprehensive view of the structure of your project and lets you modify any file immediately.\n\n<Loom id=\"84129671e4fd4346b426b726609a7cae\"/>\n\n### Tools\n\nYou can find Tools in the sidebar, like the Shell, Console, Secrets, and other helpful utilities for your Repl.\n\n<Loom id=\"2fe5ad5b4f644496be84986c088a566e\"/>\n\n### Repl Resources","metadata":{"id":359}}],["360",{"pageContent":"### Tools\n\nYou can find Tools in the sidebar, like the Shell, Console, Secrets, and other helpful utilities for your Repl.\n\n<Loom id=\"2fe5ad5b4f644496be84986c088a566e\"/>\n\n### Repl Resources\n\nMonitor your Repl's storage, memory, and processing capacity in real time using the Repl Resources section in the sidebar.\n\n<Loom id=\"294a292862504b8f962b2e4789bf67fb\"/>\n\n## Tabs and panes\n\nFiles and Tools are displayed in the workspace using tabs and panes. A tab is a single file or tool, while a pane can contain multiple files and tools.\n\n<Loom id=\"495838f6de3a42a890461572615ad48e\"/>\n\n## Run your code\n\nTo execute your code, select the **Run** button. You can also use the Shell to run a custom command or modify the `.replit` file to alter the initial run command. Check out the [Configuring a Repl](/programming-ide/configuring-repl) doc to learn how to customize the way your Repl runs even further.\n\n<Loom id=\"086c8447bf234ca290ad11f0bbb2e13e\"/>\n\n## The spotlight page\n\nThe spotlight page is how others can view and interact with your Repl.\n\n<Loom id=\"568fa9603a5546919e97b06695ea1da5\"/>\n\n## Multiplayer\n\nReplit's multiplayer feature allows users to collaborate on code simultaneously in real-time.\n\n<Loom id=\"9addef3f98584fefa07ef7a875e37440\"/>\n\n---\n\nWith the basics of coding on Replit under your belt, you can quickly get started on your new project. To learn more about Workspace features, check out [this collection of docs](/category/workspace-features). If you're ready to dive in, check out the [Templates page](https://replit.com/templates) or follow along with one of our [tutorials](/tutorials/overview). If you need more help, reach out to the [Replit community](https://ask.replit.com) for assistance.","metadata":{"id":360}}],["361",{"pageContent":"import Loom from '../../src/components/Loom'\n\n# Configuring a Repl\n\nEvery Repl comes with two configuration files `.replit` and `replit.nix`. The `.replit` file controls multiple aspects of your Repl's behavior including the run command, LSP (Language Server Protocol), whether your Repl is a [Workspace Extension](/extension/intro), and more.\n\nThis page will cover configuring the `.replit` file, which follows the [toml configuration format](https://learnxinyminutes.com/docs/toml/). To view this file, click on the three-dot menu on the file tree and select **Show hidden files**.\n\n- [Nix Configuration](/programming-ide/nix-on-replit)\n- [Change the Run Command](#run)\n- [Extension Configuration](#extension)\n\n---\n\n## `run`\n\nGets executed when the Run button is clicked.\n\nThis command has lower precedence than `[interpreter] > command`, meaning [`[interpreter] > command`](#command) will override `run`.\n\n```toml\nrun = \"node index.js\"\n```\n\n---\n\n## `onBoot`\n\nThe command that executes when your Repl boots up.\n\n```toml\nonBoot = \"npm install\"\n```\n\n---\n\n## `compile`\n\nRuns directly before the [`run`](#run) command. Used for compiled languages like C, C++, Java, etc.\n\n---\n\n## `language`\n\nDuring a GitHub import, this tells the workspace which language should be used when creating the Repl.\n\n```toml\nlanguage = \"javascript\"\n```\n\n---\n\n## `entrypoint`\n\nThe name of the main file including the extension. This is the file that will be run, and shown by default when opening the editor.\n\n```toml\nentrypoint = \"index.js\"\n```\n\n---\n\n## `hidden`\n\nA list of files or folders to hide by default in the side filetree. These filepaths are still accessible through clicking the three dot menu in the file tree, and selecting **Show hidden files**.\n\n```toml\nhidden = [\".config\", \"package-lock.json\", \"*.zip\", \"**/*.svg\"]\n```\n\n---\n\n## `audio`\n\nEnables [system-wide audio](/tutorials/replit/playing-audio-replit) for the Repl when configured to `true`.\n\n```toml\naudio = true\n```\n\n---\n\n## `[languages]`","metadata":{"id":361}}],["362",{"pageContent":"```\n\n---\n\n## `audio`\n\nEnables [system-wide audio](/tutorials/replit/playing-audio-replit) for the Repl when configured to `true`.\n\n```toml\naudio = true\n```\n\n---\n\n## `[languages]`\n\nSpecifies whether LSP (Language Server Protocol) should be enabled for the following specified languages.\n\n### `[languages.<language name>]`\n\nPre-language configuration. The language name has no special meaning other than to allow multiple languages to be configured at once.\n\n#### `pattern`\n\n**Type:** `string`\n\nA [glob](<https://en.wikipedia.org/wiki/Glob_(programming)>) used to identify which files belong to the specified language configuration.\n\n```\n[languages]\n\n[languages.javascript]\npattern = \"**/{*.js,*.jsx,*.ts,*.tsx,*.json}\"\n```\n\n### `[languages.<language name>.languageServer]`\n\nConfiguration for setting up [LSP](https://microsoft.github.io/language-server-protocol/) for the specified language. This allows for code intelligence (autocomplete, underlined errors, etc).\n\n#### `start`\n\nThe command used to start the LSP server for the specified language.\n\n```\n[languages]\n\n[languages.javascript]\npattern = \"**/{*.js,*.jsx,*.ts,*.tsx,*.json}\"\n\n[languages.javascript.languageServer]\nstart = \"typescript-language-server --stdio\"\n```\n\n---\n\n## `[[hints]]`\n\nSet hints to display in the console/shell alongside your output. You can have any number of hints in a Repl.\n\nEach hint is required to consist of a `regex` and a `message`. The `regex` is a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) that searches through your output. If a match is found, the `message` is printed logged to the console/shell.\n\n```toml\n[[hints]]\nregex = \"ERROR\"\nmessage = \"Something went wrong.\"\n\n[[hints]]\nregex = \"exit status [12]\"\nmessage = \"Bad exit code, an error occurred.\"\n```\n\n---\n\n## `[nix]`\n\nSpecifies the [Nix channel](https://nixos.wiki/wiki/Nix_channels) your Repl will use.\n\n### `channel`\n\nA nix channel ID.\n\n```toml\n[nix]\nchannel = \"stable-22_11\"\n```\n\n---\n\n## `[[ports]]`\n\n**Type:** `{localPort, externalPort}`","metadata":{"id":362}}],["363",{"pageContent":"### `channel`\n\nA nix channel ID.\n\n```toml\n[nix]\nchannel = \"stable-22_11\"\n```\n\n---\n\n## `[[ports]]`\n\n**Type:** `{localPort, externalPort}`\n\nAllows you to configure which HTTP port to expose for your web output. By default, any exposed HTTP port with host `0.0.0.0` will be exposed as your Repl's web output.\n\nExtra ports can be served without overriding the default port by adding a new `[[ports]]` entry to your `.replit` file. You are required to specify both a `localPort` and `externalPort` entry. You can add multiple extra ports by adding multiple `[[ports]]` entries to your `.replit` file as defined below.\n\n### Supported ports\n\nA repl can expose `8099` and `9000` as extra `externalPorts`.\n\n### `localPort`\n\nDetermines which port should be run in the background without overriding your Repl's web output.\n\n### `externalPort`\n\nDetermines which port should be exposed as your Repl's web output.\n\n```toml\n[[ports]]\nlocalPort = 3000\nexternalPort = 8099\n```\n\n---\n\n## `[extension]`\n\nSpecifies whether a Repl is a [Workspace Extension](/extension/intro).\n\n### `isExtension`\n\nShould be set to `true` in an extension Repl. This makes the [Extension Devtools](/extensions/development/devtools) accessible and optimizes the workspace for developing extensions.\n\n```toml\n[extension]\nisExtension = true\n```\n\n### `extensionID`\n\nDetermines if a Repl is attached to a specific extension. If unset, publishing your Extension creates a new extension and automatically fills `extensionID` for you.\n\n```toml\n[extension]\nextensionID = \"492a5fcd-f090-4356-ace8-50755e8deb2b\"\n```\n\n### `buildCommand`\n\nThis command is run to bundle your extension into a static directory (specified by `outputDirectory` below), which is then uploaded to Replit as an Extension.\n\n```toml\n[extension]\nbuildCommand = \"npm run build\"\n```\n\n### `outputDirectory`\n\nThe path to the static directory that should be used to render the Extension. This path is relative to your Repl's root directory.\n\n```toml\n[extension]\noutputDirectory = \"./dist\"\n```\n\n---\n\n## `[env]`","metadata":{"id":363}}],["364",{"pageContent":"The path to the static directory that should be used to render the Extension. This path is relative to your Repl's root directory.\n\n```toml\n[extension]\noutputDirectory = \"./dist\"\n```\n\n---\n\n## `[env]`\n\nA key-value object of environment variables. For sensitive environment variables, use [Secrets](/programming-ide/workspace-features/secrets) instead\n\n```toml\n[env]\nVIRTUAL_ENV = \"/home/runner/${REPL_SLUG}/venv\"\nPATH = \"${VIRTUAL_ENV}/bin\"\nPYTHONPATH=\"${VIRTUAL_ENV}/lib/python3.8/site-packages\"\n```\n\n---\n\n## `[unitTest]`\n\nIf set, enables unit testing for the Repl.\n\n### `language`\n\nThe language for unit tests. Unit testing is only available for `java`, `python`, and `nodejs`.\n\n```toml\n[unitTest]\nlanghage = \"nodejs\"\n```\n\n---\n\n## `[interpreter]`\n\nSpecifies the interpreter, which should be a compliant [prybar binary](https://github.com/replit/prybar).\n\n### `command`\n\nStarts the interpreter. Overrides the [`run`](#run) command if set.\n\n```toml\n[interpreter]\ncommand = [\n    \"prybar-nodejs\",\n    \"-q\",\n    \"--ps1\",\n    \"\\u0001\\u001b[33m\\u0002\\u0001\\u001b[00m\\u0002 \",\n    \"-i\"\n]\n```\n\n### `prompt`\n\nA list of bytes used to detect running state, if unspecified it defaults to `[0xEE, 0xA7]`.\n\n```toml\n[interpreter]\nprompt = [0xEE, 0xA7]\n```\n\n---\n\n## `[packager]`\n\nIf set, enables package management with the Packager .\n\n### `afterInstall`\n\nIf set, is executed after a new package is installed via the Packager.\n\n```toml\n[packager]\nafterInstall = \"echo 'package installed'\"\n```\n\n### `ignoredPaths`\n\nA list of paths to ignore while attempting to guess packages.\n\n```toml\n[packager]\nignoredPaths = [\".git\"]\n```\n\n### `ignoredPackages`\n\nA list of modules to never attempt to guess a package for, when installing packages.\n\n```toml\n[packager]\nignoredPackages = [\"twitter\", \"discord\"]\n```\n\n### `language`\n\nSpecifies the language to use for package operations. See available languages in the [Universal Package Manager](https://github.com/replit/upm) repository.\n\n```toml\n[packager]\nlanguage = \"python\"\n```\n\n### `[packager.features]`\n\nUPM features that are supported by the specified languages.\n\n#### `packageSearch`","metadata":{"id":364}}],["365",{"pageContent":"```toml\n[packager]\nlanguage = \"python\"\n```\n\n### `[packager.features]`\n\nUPM features that are supported by the specified languages.\n\n#### `packageSearch`\n\nWhen set to `true`, enables support for the Packager.\n\n```toml\n[packager]\nlanguage = \"python3\"\n\n  [packager.features]\n  packageSearch = true\n```\n\n#### `guessImports`\n\nWhen set to `true`, UPM will attempt to guess which packages need to be installed prior to running the Repl.\n\n```toml\n[packager]\nlanguage = \"python3\"\n\n  [packager.features]\n  guessImports = true\n```\n\n#### `enabledForHosting`\n\nSets whether hosting the Repl requires running a package installation operation.\n\n```toml\n[packager]\nlanguage = \"python3\"\n\n  [packager.features]\n  enabledForHosting = false\n```\n\n## `[deployment]`\n\n### `run`\n\nThe command that executes when a Deployment container starts.\n\n```toml\n[deployment]\nrun = \"npm start\"\n```\n\n### `build`\n\nThe command that executes before running a Deployment.\n\n```toml\n[deployment]\nbuild = \"npm run build\"\n```\n\n### `ignorePorts`\n\nIf `true`, we won't check if a Repl has opened a port in order to deem a deployment as successful.\n\n```toml\n[deployment]\nignorePorts = true\n```","metadata":{"id":365}}],["366",{"pageContent":"# Using Nix with Replit\n\nReplit supports all programming languages through integration with [Nix](https://nixos.org/). Nix is a tool for managing software packages and system configurations.\n\nAll Nix Repls have a `replit.nix` configuration file. To access this file, click the three dots on the file tree and select **Show hidden files**.\n\n## Installation\n\nTo use a specific Nix package in your Repl, [find the package](https://search.nixos.org) on the Nix foundation and it to your `replit.nix` file.\n\n### NodeJS 19\n\nIn some cases, some packages on NPM may require a newer version of NodeJS to run. To install a newer version, search to confirm that it exists on Nix.\n\n![Finding NodeJS on Nix](https://docimg.replit.com/images/programming-ide/find-nix.png)\n\nIn this case, we will use `nodejs-19_x`. Click on the package name to expand it.\n\n![Expanded nix package](https://docimg.replit.com/images/programming-ide/nix-package.png)\n\nUnder **How to install \\_nodejs-19_x**, switch to the **NixOS Configuration** tab. Highlighted in blue is what you will paste into your `replit.nix` file. Listed under **Programs provided** are the new bash commands that will be available once the package is installed.\n\n![Installation instructions](https://docimg.replit.com/images/programming-ide/nix-package.png)\n\nReplace `pkgs.nodejs-18_x` in your existing `replit.nix` file to the new package. After your shell is reloaded, the NodeJS version will be updated to v19.\n\n```nix\n{ pkgs }: {\n\tdeps = [\n\t\tpkgs.nodejs-19_x\n    pkgs.nodePackages.typescript-language-server\n    pkgs.yarn\n    pkgs.replitPackages.jest\n\t];\n}\n```\n\n### OpenRA\n\nYou can play the classic game Command and Conquer Red Alert by installing the `openra` package from Nix.\n\n```nix\n{ pkgs }: {\n  deps = [\n    pkgs.openra\n  ];\n}\n```\n\nTo start the game, run `openra` in the shell, or set that as your Repl's run command.\n\n### Python & NodeJS\n\nSome packages such as [node-gyp](https://www.npmjs.com/package/node-gyp) require Python in order to run.","metadata":{"id":366}}],["367",{"pageContent":"### Python & NodeJS\n\nSome packages such as [node-gyp](https://www.npmjs.com/package/node-gyp) require Python in order to run.\n\nPython Repls require a special Nix configuration due to its vast amount of abilities. Simply insert the desired NodeJS Nix package in the `deps` section of the `replit.nix` file, maintaining the original configuration of the python nix file.\n\n```nix\n{ pkgs }: {\n  deps = [\n    pkgs.nodejs-19_x\n    pkgs.python310Full\n    pkgs.replitPackages.prybar-python310\n    pkgs.replitPackages.stderred\n  ];\n  env = {\n    PYTHON_LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath [\n      # Needed for pandas / numpy\n      pkgs.stdenv.cc.cc.lib\n      pkgs.zlib\n      # Needed for pygame\n      pkgs.glib\n      # Needed for matplotlib\n      pkgs.xorg.libX11\n    ];\n    PYTHONHOME = \"${pkgs.python310Full}\";\n    PYTHONBIN = \"${pkgs.python310Full}/bin/python3.10\";\n    LANG = \"en_US.UTF-8\";\n    STDERREDBIN = \"${pkgs.replitPackages.stderred}/bin/stderred\";\n    PRYBAR_PYTHON_BIN = \"${pkgs.replitPackages.prybar-python310}/bin/prybar-python310\";\n  };\n}\n```\n\n## Switch the Nix Channel\n\nYou can switch the Nix Channel in your Repl by [editing the [nix] entry](/programming-ide/configuring-repl#nix) in your `.replit` file.\n\n## Unstable Packages\n\nIn some cases, a Nix package can be labeled as broken or insecure, not be suitable for the current platform, or not have a free licence. Nix will not install a package under any of these circumstances.\n\nTo allow for the installation of such packages, navigate into the `.config` folder > `nixpkgs/config.nix`, and then set it to the following. If you do not see the `.config` folder, click the three dots on the file tree and select **Show hidden files**.\n\n```nix\n{\n  allowUnfree = true;\n}\n```","metadata":{"id":367}}],["368",{"pageContent":"# Keyboard Shortcuts\n\nKeyboard shortcuts are a great way to save time and increase productivity.\n\nThe shortcuts shown in this document are the default ones set up in Replit.  See [here](/programming-ide/workspace-features/preferences#keyboard-shortcuts) for customizing keyboard shortcuts.\n\nIf you're using a Mac, use the `Cmd` key instead of the `Ctrl` key, and the `Option` key instead of the `Alt` key.  The shortcuts shown in this document do not apply if you have customized your own shortcuts.\n\n## Basic editing\n\n| Command                                           | Key              |\n| ------------------------------------------------- | ---------------- |\n| Select up                                         | `Shift+Up`       |\n| Select down                                       | `Shift+Down`     |\n| Select line                                       | `Ctrl+L`         |\n| Cut line (without selection)                      | `Ctrl+X`         |\n| Copy line (without selection)                     | `Ctrl+C`         |\n| Paste                                             | `Ctrl+V`         |\n| Delete line                                       | `Ctrl+Shift+K`   |\n| Move Line Down                                    | `Alt+Down`       |\n| Move Line Up                                      | `Alt+Up`         |\n| Copy Line Down                                    | `Shift+Alt+Down` |\n| Copy Line Down                                    | `Shift+Alt+Up`   |\n| Undo                                              | `Ctrl+Z`         |\n| Redo                                              | `Ctrl+Y`         |\n| Format                                            | `Ctrl+S`         |\n| Add cursors                                       | `Alt+Left Click` |\n| Undo last cursor operation                        | `Ctrl+U`         |\n| Select all occurrences of current selection       | `Ctrl+Shift+L`   |\n| Select all occurrences of current word            | `Ctrl+F2 `       |","metadata":{"id":368}}],["369",{"pageContent":"| Select all occurrences of current selection       | `Ctrl+Shift+L`   |\n| Select all occurrences of current word            | `Ctrl+F2 `       |\n| Jump to matching bracket                          | `Ctrl+Shift+\\ `  |\n| Indent Line                                       | `Ctrl+] `        |\n| Outdent Line                                      | `Ctrl+[ `        |\n| Go to Beginning of Line                           | `Home `          |\n| Go to End of Line                                 | `End `           |\n| Go to End of File                                 | `Ctrl+End `      |\n| Go to Beginning of File                           | `Ctrl+Home `     |\n| Toggle Line Comment                               | `Ctrl+/ `        |\n| Add Block Comment                                 | `Shift+Alt+A `   |\n| Find                                              | `Ctrl+F `        |\n| Find Next                                         | `Enter `         |\n| Find Previous                                     | `Shift+Enter `   |\n| Add Selection To Next Find Match                  | `Ctrl+D`         |\n| Select All Occurrences of Find Match              | `Alt+Enter `     |\n| Trigger Suggest                                   | `Ctrl+Space `    |\n| Go to References                                  | `Ctrl+F12 `      |\n| Peek Definition                                   | `shift+F12 `     |\n| Rename Symbol                                     | `F2 `            |\n| Generate Code (Replit AI subscription required) | `Alt+G`          |\n\n## Navigation\n\n| Command                     | Key                                           |\n| --------------------------- | --------------------------------------------- | --- |\n| Go to Line...               | `Ctrl+G`                                      |\n| Go to File..., Quick Open   | `Ctrl+P `                                     |\n| Go to Next Error or Warning | `F8 `                                         |","metadata":{"id":369}}],["370",{"pageContent":"| Go to File..., Quick Open   | `Ctrl+P `                                     |\n| Go to Next Error or Warning | `F8 `                                         |\n| Show command palette        | `Ctrl+Shift+P` or `F1` (use `F1` on Firefox). |\n| Go Back                     | `Alt+Left `                                   |\n| Go Forward                  | `Alt+Right `                                  |     |\n| Show Version Control        | `Ctrl+Shift+G `                               |\n| Show Search                 | `Ctrl+Shift+F `                               |\n| Open Settings               | `Ctrl+, `                                     |\n\n## Frequently used keyboard shortcuts\n\nThe following keyboard shortcuts can be used in a variety of ways. If you forget a keyboard shortcut, check the command palette.\n\n### Command palette\n\nThe command palette allows you to view all available commands based on your current context.\n\nTo access the command palette, press `F1` or `Ctrl+Shift+P`.\n\n**Note:** If you are using Firefox, `Ctrl+Shift+P` will open an incognito window, so use the `F1` option instead.\n\n### Navigating with `Tab` key\n\nIn most cases, you can navigate the entire page via the `Tab` key. In the editor, console, and shell, however, `Tab` will be used for indentation. In these cases, you can press `Esc` and then press `Tab` to navigate to the next element on the page.","metadata":{"id":370}}],["371",{"pageContent":"# Installing packages\n\nReplit will install most available Python and Javascript packages using [the universal package manager](https://blog.replit.com/upm).\n\n## Searching For and Adding Packages\n\nOn a Python or JavaScript Repl, you can search for a package to install by clicking on the Package icon on the sidebar in the workspace. Search for the package you want and select it to install the package or to view its documentation. Clicking on the \"Add Package\" icon will put it in a spec file and a lock file.\n\nUnless otherwise specified, your Repl will attempt to install the latest version of each package.\n\n## Direct Imports\n\nIf you would prefer to import directly, you can do that too (though we recommend using the Package Manager):\n\nPython:\n\n```python\nimport flask\n```\n\nJavaScript:\n\n```javascript\nconst express = require(\"express\");\n```\n\nThis will install the latest version of the package into your Repl. A spec file and lock file will be created so the versions won't change. Wherever possible, we recommend using a file to manage dependencies.\n\n### Guessing Failures\n\nWhen you add a package by importing, we guess what package you want based on the modules you are importing. This works well for most languages, but in Python we sometimes get it wrong. If that happens, you can request a specific package on the import line.\n\n```python\nimport twitter #upm package(python-twitter)\n```\n\nYou can configure additional options for package guessing by reading about the [.replit](/programming-ide/configuring-repl) file.\n\n## Spec Files\n\nEach language has a file that is used to describe the project's required packages:\n\n- Python: `pyproject.toml`\n- JavaScript (Node.js): `package.json`\n\n### Python\n\nIn a `pyproject.toml` file, you list your packages along with other details about your project. For example, consider the following snippet from `pyproject.toml`:\n\n```\n...\n[tool.poetry.dependencies]\npython = \"^3.8\"\nflask = \"^1.1\"\n...\n```","metadata":{"id":371}}],["372",{"pageContent":"```\n...\n[tool.poetry.dependencies]\npython = \"^3.8\"\nflask = \"^1.1\"\n...\n```\n\nThis will tell the packager that your project requires at least Python version 3.8, and to install the flask package at version 1.1.\n\n### JavaScript\n\nNote that `package.json` files are only for Nodejs/Express Repls (they do not work in HTML/CSS/JS Repls). A `package.json` file contains more information about the project, but also lists the dependencies. As an example, here is the `package.json` file you can include in a\n[Nodejs/Express template](https://replit.com/languages/nodejs):\n\n```json\n{\n  \"name\": \"app\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {},\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"express\": \"latest\",\n    \"body-parser\": \"latest\",\n    \"sqlite3\": \"latest\"\n  }\n}\n```\n\nAll the packages will be installed with the latest version. If you need a specific version number, you can replace \"latest\" with that version number or precede a version number with a carat `^` to indicate \"this version or newer\". For example:\n\n```json\n  \"dependencies\": {\n    \"express\": \"^4.16.3\",\n    \"body-parser\": \"latest\",\n    \"sqlite3\": \"3.1.12\"\n  }\n```\n\nThis will install `express` at version 4.16.3 or newer, `body-parser` at the latest version, and `sqlite3` at exactly version 3.1.12.","metadata":{"id":372}}],["373",{"pageContent":"# Repl Environment Metadata\n\nIn some cases, it's useful to retrieve some metadata about the current Repl you're in. Every Repl has some pre-populated environment variables, exposing some information about itself.\n\nTo access this data, first retrieve your Repl's environment variables.\n\n#### Node.js\n\n```js\nconsole.log(process.env);\n```\n\n#### Python\n\n```python\nimport os\n\nprint(os.environ)\n```\n\n#### Rust\n\n```rust\nuse std::env;\n\nfn main() {\n    for (key, value) in env::vars() {\n        println!(\"{}: {}\", key, value);\n    }\n}\n```\n\nTo access a single environment variable from within a Repl, use the following examples:\n\n#### Node.js\n\n```js\nconst variable = process.env.REPL_SLUG;\nconsole.log(variable);\n```\n\n#### Python\n\n```python\nimport os\n\nvariable = os.environ.get('REPL_SLUG')\nprint(variable)\n```\n\n#### Rust\n\n```rs\nuse std::env;\n\nfn main() {\n    let variable = env::var(\"REPL_SLUG\").unwrap();\n    println!(\"{}\", variable);\n}\n```\n\nSome useful environment variables accessible from within your Repl include:\n\n| key             | description                                                                                                                                                        |\n| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `REPL_OWNER`    | The username of the owner of the Repl. If your Repl is text-based and has no webserver, `REPL_OWNER` will reflect the value of the current user accessing the Repl |\n| `REPLIT_DB_URL` | The URL of your key-value Replit database                                                                                                                          |\n| `REPL_ID`       | The unique UUID string of your Repl                                                                                                                                |","metadata":{"id":373}}],["374",{"pageContent":"| `REPL_ID`       | The unique UUID string of your Repl                                                                                                                                |\n| `HOME`          | The home path of your Repl                                                                                                                                         |\n| `system`        | The system name of your Repl                                                                                                                                       |\n| `LANG`          | Text language and encoding                                                                                                                                         |\n| `REPL_IMAGE`    | The docker image that corresponds to your Repl                                                                                                                     |\n| `REPL_LANGUAGE` | The language of your Repl                                                                                                                                          |\n| `REPL_PUBKEYS`  | A stringified JSON object containing different public api keys                                                                                                     |\n| `REPL_SLUG`     | The slug of your Repl                                                                                                                                              |\n| `PRYBAR_FILE`   | The main/entrypoint file of your Repl                                                                                                                              |","metadata":{"id":374}}],["375",{"pageContent":"import Loom from '../../../src/components/Loom'\n\n# Connecting Replit to GitHub\n\nTo import and edit GitHub repositories on Replit, first connect your Replit account to GitHub.\n\n<Loom id=\"9d8c3eb731c14e369e73edb12bc6d539\"/>\n\n---\n\nNavigate to your [Replit account](https://replit.com/account), scroll down to **Connected Services**, and click the GitHub \"Connect\" button.\n\n![linking connected services](https://docimg.replit.com/gh/images/connected-services.png)\n\nYou should then be prompted to allow access to Replit. Follow the steps on GitHub and after that, your Replit account should be successfully linked. If at first the Connected Services section under your account is not showing that your account is linked, refresh the page and it should work now.\n\nIf all goes well, you should be ready to [import your first repository](/programming-ide/using-git-on-replit/import-repository)! 👏","metadata":{"id":375}}],["376",{"pageContent":"import Loom from '../../../src/components/Loom'\n\n# Import your first Repository\n\nNow that you've linked your github account to replit, it's time to import some code from github!\n\n<Loom id=\"16ab07218e984f408e61778e369a325a\"/>\n\n---\n\nClick on the **Create Repl** button from the sidebar.\n\n![creating a repl from the sidebar](https://docimg.replit.com/gh/images/sidebar.png)\n\nAfter opening the menu to create a new repl, press the **Import from Github** button in the top-right corner.\n\n![importing a repository](https://docimg.replit.com/gh/images/import-repo-button.png)\n\nCopy the URL of a public GitHub repository and paste it into the text field. After you've finished, press the **Import** button.\n\n![finalizing import configuration](https://docimg.replit.com/gh/images/import-final.png)\n\nDepending on the language you've selected, you might have to configure the run command for your Repl. If you are unsure about how to properly run your Repl, you can read about how to [configure your repl](/programming-ide/configuring-repl).","metadata":{"id":376}}],["377",{"pageContent":"import Loom from '../../../src/components/Loom'\n\n# Private & Personal Repositories\n\nOnce you've imported a GitHub repository, you will need to grant Replit permission so you can make changes tracked by your remote repository.\n\n<Loom id=\"f3908dfd60274dba90b1b1c0c20450e2\"/>\n\n---\n\nLet's start by creating a new Repl from scratch and opening the **Version Control** tab.\n\n![version control tab](https://docimg.replit.com/gh/images/version-control-pane.png)\n\nThe next step is to click the **Existing Git Repo** button. You should get a popup asking to access your GitHub repositories. Simply authorize GitHub by clicking the link \"Connect GitHub to import your private repos\".\n\n![authorizing github](https://docimg.replit.com/gh/images/authing-github.png)\n\nThe final step is to install Replit on your personal GitHub account. Allow access to all repositories and hit **Install & Authorize**.\n\n![Installing github](https://docimg.replit.com/gh/images/install-replit-on-github.png)\n\nAfter you've finished this step, the popup should update and allow you to import all of your GitHub repositories! Choose one and hit **Pull changes**.\n\n![pulling changes](https://docimg.replit.com/gh/images/pull-changes.png)\n\nYour repository's code should now be successfully imported. Let's learn about how to [use the GUI](use-gui) in the next tutorial!","metadata":{"id":377}}],["378",{"pageContent":"# Using the Git Pane\n\nThe Git pane allows you to seamlessly track and manage your code, switch between branches, and collaborate with others. Click on the **Git** tool in the sidebar to get started.\n\n## Getting Started\n\nOpen the sidebar, navigate into the Tools section, and select **Git**. A pane will open prompting you to initialize a Git Repository. Press **Initialize Git Repository** to get started.\n\n![Initialize your Repository](https://docimg.replit.com/gh/pane/00-init-repo.png)\n\n### Connect to GitHub\n\nClick the gear icon in the upper-right corner after the repository has been initialized.\n\n![empty repo](https://docimg.replit.com/gh/pane/01-empty-repo.png)\n\nYou will see two commit authors, one pointing to a default generated profile and another pointing to your personal GitHub account. If you haven't given Replit access to your GitHub account, you will be prompted to connect it.\n\n![settings](https://docimg.replit.com/gh/pane/02-settings.png)\n\nWhen you connect your GitHub account, allow Replit access to all your repositories.\n\n![Allowing access to all repositories](https://docimg.replit.com/gh/pane/03-all-repos.png)\n\nAfter authenticating with GitHub, select your personal account as the commit author.\n\n![Select your personal GitHub account](https://docimg.replit.com/gh/pane/04-select-personal-account.png)\n\nOpen the **Github** dropdown in settings. Fill out the repository metadata and hit **Create Repository on GitHub**.\n\n![filling out repo metadata](https://docimg.replit.com/gh/pane/05-repo-meta.png)\n\nOnce the repository has been created, you will see the Remote update. The new repository you've created will be empty.\n\n![remote update](https://docimg.replit.com/gh/pane/06-remote.png)\n\n### Push your first commit\n\nChange some files in your Repl. Shortly after, the changed files will appear in the Staging Area. If you don't see the changed files immediately, hit the **Refresh** icon in the upper-right corner of the Git pane.\n\n![staging area](https://docimg.replit.com/gh/pane/07-change-files.png)","metadata":{"id":378}}],["379",{"pageContent":"![staging area](https://docimg.replit.com/gh/pane/07-change-files.png)\n\nCreate a commit message describing what you changed. Hit the **Enter** key if you would like to add a commit description (optional).  **CMD/CTRL + Enter** will automatically commit your changes.\n\n![commit message](https://docimg.replit.com/gh/pane/08-commit-message.png)\n\nAfter writing your commit message, hit **Stage and commit all changes**.\n\n![commit everything](https://docimg.replit.com/gh/pane/09-hit-commit.png)\n\nYou will see your commit appear and a button prompting you to publish your branch. Hit **Publish branch as 'origin/main'** and your Repository will be populated with the files in your Repl.\n\n![publish branch](https://docimg.replit.com/gh/pane/10-publish-branch.png)\n\n## Staging Area\n\nThe Staging Area reflects all the changed files that are tracked by Git. You can manage what files you want to commit and even reset files you don't want to add to your commit.\n\nIf your changes don't immediately appear in the staging area, click the **Refetch** icon button in the top-right corner of the Git pane.\n\n![staging area](https://docimg.replit.com/gh/pane/staging-area.png)\n\n### Stage and commit all files\n\nTo add and commit **all** changed files to your commit, provide a commit message and click **Stage and commit all changes**.\n\n### Stage files\n\nTo stage a single file, click the **\"+\"** icon on the right-hand-side of it. This does the equivalent of running `git add <file>`.\n\nTo stage all changed files, click **Stage All**. This does the equivalent of `git add .`\n\n![stage a single file](https://docimg.replit.com/gh/pane/staging-add-single-file.png)\n\n### Unstage files\n\nTo unstage a file, click the **\"-\"** icon on its right side. This does the equivalent of `git reset <file>`.\n\nTo unstage all files, click **Unstage All**. This does the equivalent of `git reset .`\n\n![unstage a file](https://docimg.replit.com/gh/pane/staging-unstage-file.png)\n\n### Reset a file","metadata":{"id":379}}],["380",{"pageContent":"To unstage all files, click **Unstage All**. This does the equivalent of `git reset .`\n\n![unstage a file](https://docimg.replit.com/gh/pane/staging-unstage-file.png)\n\n### Reset a file\n\nTo reset a file, click the **Reset** icon on its right side. This does the equivalent of `git checkout <branch> <file>`.\n\n![reset a file](https://docimg.replit.com/gh/pane/staging-reset-file.png)\n\n**Note**: Be cautious with this action as it will reset the file to its value when last tracked by Git. If the file did not exist in the latest version of your branch, it will be deleted.\n\n## Branches\n\nThe Git pane allows you to easily create and switch between branches.\n\n### Create a branch\n\nClick **Create Branch** to create a new branch.\n\n![branches](https://docimg.replit.com/gh/pane/branch-homepage.png)\n\nAfter creating the new branch, you will be prompted to publish it. Click **Publish branch as 'origin/`<branch>`'**.\n\n![unpublished branch](https://docimg.replit.com/gh/pane/branch-new.png)\n\nAfter having been published, your new branch is ready.\n\n![published branch](https://docimg.replit.com/gh/pane/branch-published.png)\n\n### Switch to a branch\n\nFrom the branch homepage, click on the desired branch. Some metadata about the branch such as past commits will be shown. Hit **Switch to Branch**.\n\n![switch to a branch](https://docimg.replit.com/gh/pane/branch-prompt-switch.png)\n\n## Pulling Changes\n\nTo pull the latest changes from a repository, click **Pull <var>n</var> commits**. This will update your code to the latest version of the current branch.\n\nIf you have uncommitted changes, you can't pull the latest changes from the current branch. Stage and commit those changes first, and then you can pull.\n\n![pull a change](https://docimg.replit.com/gh/pane/pull-ui.png)\n\n## Merge Conflicts\n\nA merge conflict happens when two different versions of code try to be combined, but they have changes in the same part of the code that need to be manually fixed.\n\nHere is a common example of a merge conflict:","metadata":{"id":380}}],["381",{"pageContent":"Here is a common example of a merge conflict:\n\n1. John changes line 1 of `script.js` to `console.log(\"Hi Developers!\")` and pushes his changes to the `main` branch\n2. Kevin changes line one of `script.js` to `console.log(\"Hello Programmers\")` **after** John makes pushes his changes\n3. Kevin tries to push his changes to the `main` branch\n4. A merge conflict has been created, since Git is unsure what exact code it should keep\n\nIf you try to push your changes when a merge conflict is active, you will see a Git error.\n\n![conflict message](https://docimg.replit.com/gh/pane/conflict-message.png)\n\nOn the other hand, if you try to pull changes when a merge conflict is active, you will see some notices in the Git UI.\n\n![conflict pull message](https://docimg.replit.com/gh/pane/conflict-pull-message.png)\n\nYou are required to manually edit your code to combine the changes from multiple versions. This involves identifying the conflicting changes and deciding which changes to keep before pushing your changes.\n\n### Resolving a Merge Conflict\n\nWhen a merge conflict arises, the Git Pane will look something like this. Hit the **Pull** button on the upstream section.\n\n![active merge conflict](https://docimg.replit.com/gh/pane/conflict-ui.png)\n\nThe UI will then indicate what conflicting files there are.\n\n![conflict resolver UI](https://docimg.replit.com/gh/pane/conflict-merge-ui.png)\n\nNavigate to each of the conflicting files. You will see some conflict markers. A typical conflict marker looks like this:\n\n```\n<<<<<<< HEAD\n<Current change>\n=======\n<Incoming change>\n>>>>>>> <Commit ID>\n```\n\nThe **Current change** is your code and the **Incoming change** is the conflicting code. You can either:\n\n1. Keep your change\n2. Keep the incoming change\n3. Manually edit the two changes to make the code behave in the desired way\n\n![conflicted code](https://docimg.replit.com/gh/pane/conflict-code.png)\n\nAfter resolving a conflicted file, remove the conflict markers.\n\n![resolved code](https://docimg.replit.com/gh/pane/conflict-resolved-code.png)","metadata":{"id":381}}],["382",{"pageContent":"After resolving a conflicted file, remove the conflict markers.\n\n![resolved code](https://docimg.replit.com/gh/pane/conflict-resolved-code.png)\n\nAfter the conflict has been resolved, click **Complete pull**.\n\n![complete pull](https://docimg.replit.com/gh/pane/conflict-resolved-ui.png)\n\nAfter having completed the pull, your code is now ready to be pushed. Click **Synchronize** or **Push** to update the branch.\n\n![push resolved changes](https://docimg.replit.com/gh/pane/conflict-resolved-push.png)","metadata":{"id":382}}],["383",{"pageContent":"# Using Git with the Shell\n\n## Cloning an existing repository from the shell\n\nUsing Git in the shell allows you to do the same things as the graphical Version Control tool and much more, leveraging the full power of Git. You can use Git in the Shell on Replit the same as you would on your local terminal.\n\nTo clone a repository, use `git clone <url-to-your-repository>`. The URL should start with `https` so that you don't need to configure an SSH client on your repl. If the repository is public, it will immediately be cloned into your Replit Workspace, and you'll see the new directory appear in your files bar.\n\nIf the repository is private, you'll be prompted for your username and password. Note that GitHub no longer accepts passwords on the command line, so if you are cloning a private repository for GitHub you should rather put in a [personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) when prompted for your password.\n\nIn the example shown below, we run `git clone https://github.com/ritza-co/git-demo.git` and can see the new files appear in a subdirectory on the left called `git-demo`.\n\n![Git Clone](https://docimg.replit.com/images/programming-ide/git-with-replit/git-clone.png)\n\n## Making changes on Replit and pushing back to a remote Git host\n\nOnce you've cloned a repository, you can make changes to your files in the Workspace. Once you're happy with the changes, you can add new files, commit your changes, and push everything back up to your Git hosting provider (e.g. GitHub) by running a few commands.\n\nBefore running any of the below, make sure you're in the correct directory. For example, if you cloned your repository using `git clone` as described above, you'll first have to change into the sub-directory, e.g. `cd git-demo` in the example we are using.\n\n1. First, check the status of your repository by running the following command. This will show you any new files, changed files, or removed files:","metadata":{"id":383}}],["384",{"pageContent":"1. First, check the status of your repository by running the following command. This will show you any new files, changed files, or removed files:\n\n```\ngit status\n```\n\nIf you are happy with all of your changes, you can add them all with the following command:\n\n```\ngit add .\n```\n\nOnce you've added the files, you can run `git status` again to see that all the changes are listed in green now, showing that they're tracked by Git. In the example below, we see that we changed one file (`READEME.md`) and removed another one (The `git-demo` subdirectory). We also added a new file called `newfile.md` which is shown under \"untracked files\".\n\nAfter running `git add .`, all files and changes are tracked by Git, so they appear under \"Changes to be committed\".\n\n![Git Status and Git Add](https://docimg.replit.com/images/programming-ide/git-with-replit/git-status-git-add.png)\n\nBefore we can commit the files, we'll have to tell Git who we are by configuring a name and email address. Run the following commands, using your own name and email address:\n\n```\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email \"jane@example.com\"\n```\n\nNow you can commit and push your changes as follows. You may have to change the branch name `main` to whatever your branch is called, e.g. `git push origin master` or `git push origin develop` are some common names.\n\n```\ngit commit -m \"add newfile and some fixes\"\ngit push origin main\n```\n\nYou'll be prompted for your username and password, whether or not the repository is public. Remember to use your GitHub access token instead of your password if you are using GitHub.\n\nIf everything works out, you should see a \"Writing Objects...\" message, followed by \"done\", as shown below.\n\n![Git Commit Git Push](https://docimg.replit.com/images/programming-ide/git-with-replit/git-config-commit-push.png)\n\n## Pushing without typing in your password or access token","metadata":{"id":384}}],["385",{"pageContent":"![Git Commit Git Push](https://docimg.replit.com/images/programming-ide/git-with-replit/git-config-commit-push.png)\n\n## Pushing without typing in your password or access token\n\nThere's always a tradeoff between convenience and security. If you are dealing with sensitive code or information, it's best to store your password or access token in a password manager, and paste it in each time you push changes.\n\nIf you prefer, you can store your credentials as part of the remote Git URL as environment variables, using Replit secrets. This means you won't have to type your username and password each time, but it also means that anyone with access to your repl will be able to find your password or token.\n\nUnder the secrets tab in the sidebar, add a new secret. Put `GIT_URL` as the key and the URL to your Git repository with your credentials as the value. For example, on GitHub you use the format `https://<username>:<github-access-token>@github.com/<user-or-organization>/<repository>`. Click 'Add Secret'. You may have to restart your shell before this secret becomes available, which you can do by typing `exit` in the shell.\n\n![Add secret](https://docimg.replit.com/images/programming-ide/git-with-replit/add-secret.png)\n\nNow you can use `git push $GIT_URL` to push up to your remote Git host without needing to type in your credentials.\n\nFor more advanced use of Git, including branching, rebasing, cherry-picking, and more, see our [Git commands reference guide](git-commands).","metadata":{"id":385}}],["386",{"pageContent":"# Running GitHub repositories on Replit\n\nGitHub repositories can be run automatically on Replit. Head to [https://replit.com/github](https://replit.com/github) to import a repository. You can unlock private repositories after authenticating with GitHub and purchasing the [Replit Core membership](https://replit.com/pricing).\n\n![import modal](https://docimg.replit.com/images/programming-ide/running-github-repositories-replit/XOFmfO94Du.png)\n\nFrom the modal above, you can select the repo, language, and owner of the Repl. We will automatically detect the language if your GitHub repository already has a `.replit` file!\n\n## Configuring a Cloned Repo\n\nWhen you clone a repository without a `.replit` file, we automatically show the visual `.replit` editor:\n\n![Visual config editor](https://docimg.replit.com/images/programming-ide/running-github-repositories-replit/2QlSkG7YCB.png)\n\nThis will automatically create the `.replit` file and make it possible to customize how the repl will run.\n\nYou can use the shell to run any command and then set the \"Run\" button once you've decided what it should do.\n\nClicking \"done\" will finalize the Repl's configuration and close the visual editor.\n\nAdding a `.replit` file to a repository makes cloning fast with no configuration necessary. The configuration file can always be changed at any time. For more information on how to configure your Repl, see the documentation on [Configuring your Repl](/programming-ide/configuring-repl).\n\n## Adding a \"Run on Replit\" Badge\n\n<img\nstyle={{ height: 40, width: 190 }}\nsrc=\"https://replit.com/badge/github/replit/clui\"\n/>\n\nAfter configuring a run command for your Repl, you can add a badge to your repository README that will allow anyone to run your project automatically!\n\n### Generate a badge\n\n<iframe\n  style={{ border: 0, width: '100%', height: 280 }}\n  src=\"https://run-on-replit.util.repl.co\">\n</iframe>","metadata":{"id":386}}],["387",{"pageContent":"# Git workflows and commands\n\nThe most crucial features of Git to learn are the basic Git workflow and\ncommands, such as cloning a repository, creating and switching between branches,\ncommitting changes, and pushing and pulling from a remote repository. Understanding\nthese basic concepts and commands will enable you to use Git effectivelv for your Replit\nprojects.\n\nHere's a guide of common Git workflows and example commands for them:\n\n## Cloning a repository\n\nThis creates a local copy of a remote Git repository.\n\nExample command: `git clone <repository url>`\n\n## Creating and switching between branches\n\nThis allows you to work on multiple versions of a project.\n\nExample commands: `git branch branch name>` and `git checkout <branch name>`\n\n## Committing changes\n\nThis saves your progress on a project.\n\nExample command: `git commit -m ‹commit message>`\n\n## Pushing and pulling from a remote repository\n\nThis synchronizes your local repository with the remote repository.\n\nExample commands: `git push` and `git pull`.\n\n## Branching and merging\n\nThis allows you to create separate branches of a project and merge your changes back into the main branch.\n\nExample commands: `git branch <new branch name>` and `git merge <branch to merge>`\n\n## Resolving merge conflicts\n\nThis is the process of resolving conflicts that can arise when multiple users make changes to the same file in a repository.\n\nExample commands: `git merge --abort` and `git merge --continue`","metadata":{"id":387}}],["388",{"pageContent":"# GitHub Authentication Errors in Replit\n\nWhile interacting with our Git-based Version Control tool in the Workspace and our GitHub integration, you may run into error messages that look like this:\n![An error modal reading 'unable to connect to this GitHub repository'](https://docimg.replit.com/images/programming-ide/github-auth-errors/generic-autherror-modal.png)\n\nThis is usually the result of permission issues with the GitHub integration. To grant replit permission to read and write to your repositories, learn how to connect to personal repos [here](private-repo)\n\n## Push errors\n\nPush errors commonly occur when trying to push to a repository that you don't have collaboration permissions for.\n\nTry contacting the repository owner to add you as a collaborator. On GitHub, this can be done through navigating to the Repo, clicking `Settings`, then `Collaborators`, and adding an account under `Manage Access`.\n\n### Branch Protection\n\nIf this modal appears with the message 'confirm that you have permission to push to [repo]', another reason could be [GitHub's branch protection feature](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches).\n\nThis feature allows repository admins to set restrictions on who and what can be pushed to certain branches: for example, only allowing PRs that have been reviewed to be pushed to a branch.\n\nIf the repository you're working with has enabled this feature, talk with your repository admin about allowing the Replit GitHub app as an exception. [The GitHub docs announcement](https://github.blog/changelog/2022-05-17-consistently-allow-github-apps-as-exceptions-to-branch-protection-rules/) has more information on how to set this up.\n\n## Fetch and Clone errors\n\nFetch and Clone errors usually occur when trying to interact with a private repository, or one that you don't have view access to.","metadata":{"id":388}}],["389",{"pageContent":"## Fetch and Clone errors\n\nFetch and Clone errors usually occur when trying to interact with a private repository, or one that you don't have view access to.\n\nThis can occur when you haven't signed into GitHub through Replit - click the 'Connect Replit to your GitHub account' first, and ensure that you allow Replit's GitHub App to have access to all the repositories that you want to edit.\n\nAlternatively, try contacting the repository owner to add you as a collaborator on GitHub (see Push errors section for instructions.)","metadata":{"id":389}}],["390",{"pageContent":"# Secrets and Environment Variables\n\nYou can store sensitive information such as API keys, credentials, and more in your Repl with Secrets. Get started by clicking on the **Secrets** icon in the Tools section.\n\n![secrets icon](https://docimg.replit.com/images/programming-ide/secrets-icon.png)\n\n## How Replit keeps your Secrets safe\n\nOnly you and your invited collaborators can see Secret values in a Repl. Secrets data is encrypted with AES-256 at rest, and encryption keys are stored in a secure location that is protected by multiple layers of security. To help protect against key compromise, encryption keys are rotated regularly. Data in transit is encrypted using TLS. These measures safeguard your Secrets against breaches and vulnerabilities to ensure secure storage and protection.\n\n## Managing Secrets\n\nYou can easily and securely edit your Repl's secrets/environment variables with the Secrets tool. Alternatively, you can open the raw JSON editor if you want to quickly edit multiple secrets at the same time.\n\n![secrets tab](https://docimg.replit.com/images/programming-ide/secret-tab.png)\n\n## Accessing Secrets\n\nIn most Repls, you will be provided with instructions on how to access secrets in your code. Here are some examples of widely-used programming languages:\n\n### Python\n\n```python\nimport os\nprint(os.getenv(\"MY_SECRET\"))\n```\n\n### JavaScript\n\n```javascript\nconsole.log(process.env.MY_SECRET);\n```\n\n### Java\n\n```java\nSystem.out.println(System.getenv(\"MY_SECRET\"))\n```\n\n## FAQs\n\n### Why can't I see the Secrets Pane?\n\nHTML/CSS/JS Repls don't have Secrets since they are [statically hosted](https://blog.hubspot.com/website/static-vs-dynamic-website).\n\n### Why aren't my secrets updating?\n\nRestarting your Repl will reload its secrets, exposing them to your Repl's environment again.\n\n### What happens when someone forks my Repl?\n\nA forked Repl will contain the keys, but not the values, of the secrets/environment variables from the original Repl it was forked from.","metadata":{"id":390}}],["391",{"pageContent":"# File History\n\nTo make sure you never lose any of your work, Replit auto-saves your code as you write. If you ever lose an edit to your code that you'd like to recover, rewind back in time with File History.\n\nGet started by opening a text file in the Workspace and pressing the **History** button in the bottom-right corner.\n\n![opening history](https://docimg.replit.com/images/programming-ide/history-button.png)\n\n## Viewing previous versions of a file\n\nOnce you've opened up File History, you can view previous versions of a file by using the scroll bar, the arrow buttons, or the **left** and **right** arrow keys.\n\n![scroll bar demo](https://docimg.replit.com/images/animations/history-versioning.gif)\n\n## Comparing previous versions to the current file\n\nPress the Compare Latest toggle in the bottom left hand of the File History pane to see in-line comparisons of your file at that point in time and the latest version.\n\n![compare latest image](https://docimg.replit.com/images/animations/compare-history.gif)\n\n## Restoring a previous version of a file\n\nIf you want to restore a file to a previous version, just press the `Restore` button, which will restore. Don't worry, you won't erase any history. When you restore to a previous version, it is added as a new version to the file's history.\n\n![restore history image](https://docimg.replit.com/images/animations/restore-history.gif)\n\n## Viewing File History playback\n\nYou can use the playback feature of File History to watch your file change over time like a movie. This can be useful for creating videos of your programming sessions.\n\n![replay history video](https://docimg.replit.com/images/animations/history-replay.gif)","metadata":{"id":391}}],["392",{"pageContent":"---\ntitle: Inline Threads\n---\n\nimport Loom from '../../../src/components/Loom'\n\n# Inline Threads\n\nWith Inline Threads, you can make comments and discuss topics with collaborators directly in your code.\n\n<Loom id=\"5135855b46244145abd7a2c1531d9606\"/>\n\n## Threads\n\nTo create a thread, highlight some code, right-click it, and hit **Start Thread**. Next, start off the conversation by sending the first message.\n\n![creating a thread](https://docimg.replit.com/images/animations/thread-preview.gif)\n\nOpen a thread by clicking on the chat icon in a code file. Type in the text box and hit the **Enter** key to send a message.\n\n![commenting in a thread](https://docimg.replit.com/images/animations/commenting-in-threads.gif)\n\n## The Thread Inbox\n\nTo open the Thread inbox, enter a multiplayer or team Repl, open the Tools section on the sidebar, and hit **Threads**.\n\n![open the threads inbox](https://docimg.replit.com/images/animations/open-thread-inbox.gif)","metadata":{"id":392}}],["393",{"pageContent":"# Debugging\n\n## Why use a debugger?\n\nDebuggers are powerful tools that enable you to pause and step through the execution of your code. When the debugger is active, you can inspect the results of your code, including the data stored within your variables. This allows you to model the execution of your program step-by-step and identify precisely where your program encounters issues.\n\n## How to use the debugger?\n\nRepls that are written in the following languages can use a built-in, multiplayer debugger:\n\n- Python\n- JavaScript (Node.js)\n- Java\n- C/C++\n- With more coming soon (through [Nix](/programming-ide/nix-on-replit).\n\n## Opening the Debugger Panel\n\nTo begin using the debugger, click on the Debugger icon on the sidebar or open a new tab and type \"Debugger\":\n\n![debugger-in-tools](https://docimg.replit.com/images/programming-ide/debugger/01-debugger-in-tools.png)\n![search-debugger](https://docimg.replit.com/images/programming-ide/debugger/02-search-debugger.png)\n\nThe debugger pane will appear as shown below:\n![debugger-pane](https://docimg.replit.com/images/programming-ide/debugger/03-debugger-pane.png)\n\n## Multiplayer Debugging Experiencing\n\nWhen debugging a program in a Repl, app participants will see all actions performed by any other participant. This means that the debugging experience will be shared by all participants in a Repl, including:\n\n- The breakpoints.\n- The place / time where the program is paused.\n- The contents of the variables.\n- The output of the console.\n\n## Adding breakpoints\n\nTo start, add [breakpoints](https://en.wikipedia.org/wiki/Breakpoint) to your Repl. Breakpoints are lines of the code where the program will pause during execution while debugging but do not affect the program when run normally. When the program is paused, the Debugger will display the values of all variables, eliminating the need for print/log statements.\n\n![add-breakpoints](https://docimg.replit.com/images/programming-ide/debugger/04-add-breakpoints.png)\n\n## Starting and Controlling Debugger","metadata":{"id":393}}],["394",{"pageContent":"![add-breakpoints](https://docimg.replit.com/images/programming-ide/debugger/04-add-breakpoints.png)\n\n## Starting and Controlling Debugger\n\n1. **Starting the Debugger:** With your breakpoints set, click the play button in the debugger panel to start the debugging process:\n   ![run-debugger](https://docimg.replit.com/images/programming-ide/debugger/05-run-debugger.png)\n\n   The program will run until it reaches a breakpoint, then pause for inspection.\n\n2. **Advancing the Debugger:** Use the \"Next Step\" button to advance the program to the next possible line where it can be stopped inside your source code. For example, if the current line calls a function, \"Next Step\" will go inside the function. If it is last line in a function, \"Next Step\" will return to where that function was called.\n\n3. **Jumping to the Next Breakpoint:** The \"Next Breakpoint\" button will advance the program to the next breakpoint or until the program finishes if there are no more breakpoints after the current one.\n\n4. **Stopping the Debugger:** The \"Stop\" button terminates the debugging session and kills the process being debugged.\n\n## Inspecting Variables\n\nWhile the debugger is running and your program is paused, you can view a list of variables in scope. For this demo, we see a `numbers` list and an `i` variable created by a `for` loop:\n![variable-inspector](https://docimg.replit.com/images/programming-ide/debugger/07-variable-inspector.png)\n\nOnce you identify the issue, you can stop the debugger and fix the problem.\n\n## Stopping the Debugger\n\nClick the \"stop\" button (the square button) to exit the debugger and run your program normally.\n\nIn the example provided earlier, the issue was with the `i` variable from the `for` loop starting at `1` instead of `0`, causing the first item of the array to be missed.\n![fixing-the-code](https://docimg.replit.com/images/programming-ide/debugger/08-fixing-the-code.png)","metadata":{"id":394}}],["395",{"pageContent":"![fixing-the-code](https://docimg.replit.com/images/programming-ide/debugger/08-fixing-the-code.png)\n\nAfter correcting the error by changing the range from `1..len` instead of `0..len` and running the code again, the program works as expected\n![fixed-output](https://docimg.replit.com/images/programming-ide/debugger/09-fixed-output.png)\n\n## Adding support for other languages through Nix\n\nSupport for additional languages through [Nix](https://docs.replit.com/programming-ide/nix-on-replit) is coming soon. This feature will expand the debugger's capabilities, allowing users to debug programs in even more languages within the Replit environment.","metadata":{"id":395}}],["396",{"pageContent":"# Expandable Storage\n\nExpandable Storage provides you with account-wide storage, where your Repls can take up as much space as you have on your account. This is great for storing large amounts of data.\n\n## Viewing Your Storage Usage\n\nTo monitor your storage usage, visit the \"Resource Usage\" section on your account page at https://replit.com/account. You'll see your current storage limit and the amount you've used.\n\n![account page storage section](https://docimg.replit.com/images/programming-ide/workspace-features/expandable-storage/storage-usage.png)\n\n## Storage Limitations Based On Plan\n\nYour storage limits are determined by your chosen subscription plan:\n\n- **Free:** 10GiB\n- **Replit Core:** 50GiB\n\nVisit our [pricing page](https://replit.com/pricing) to learn about each plan's features.\n\n<summary>\n  Previous 1GiB storage limitation is no longer enforced.\n\n  <details>\n    Storage limits are now account-wide. Each Repl can use any amount of your available account storage without the previous 1GiB restriction.\n  </details>\n</summary>\n\n## What If I Go Over My Storage Limit?\n\nWhen your combined storage from your Repls exceeds your account storage limit, you will see a warning in the workspace and on the account page, prompting you to delete extra files or Repls or upgrade your plan. You can upgrade your plan in two ways:\n\n1. **From the Workspace:** Click the \"Upgrade Storage\" button in the warning at the bottom left of the workspace\n\n   ![upgrade storage button](https://docimg.replit.com/images/programming-ide/workspace-features/expandable-storage/out-of-storage-warning.png)\n\n2. **From the Account Page:** Go to the [Replit Account page](https://replit.com/account) and click the \"Upgrade Plan\" button in the \"Resource Usage\" section.\n\n   ![account page upgrade button](https://docimg.replit.com/images/programming-ide/workspace-features/expandable-storage/upgrade-button.png)\n\nUpgrading your plan increases your account-wide storage limit, providing more storage for your Repls.\n\n## Managing Storage","metadata":{"id":396}}],["397",{"pageContent":"Upgrading your plan increases your account-wide storage limit, providing more storage for your Repls.\n\n## Managing Storage\n\nIf you've reached your storage limit, consider upgrading your plan as described above, or free up space by deleting files from your Repls or removing individual Repls.\n\n## Scratch Disk\nEvery Repl also has a separate filesystem attached to it called the Scratch Disk. Scratch Disk storage is temporary storage used for package installation or to store temporary files. It is reset regularly. \n \nEvery Repl has a base Scratch Disk quota of 2 GiB, though using space beyond that will consume account storage while you're using the Repl.","metadata":{"id":397}}],["398",{"pageContent":"---\ntitle: Multiplayer\n---\n\nimport Loom from '../../../src/components/Loom'\n\n# Multiplayer\n\nMultiplayer in Replit allows two or more users to code together in real-time.\n\n<Loom id=\"2415fb8aaf9a468c9c355cefe1c080f1\"/>\n\n## Invite someone to Multiplayer\n\nHit the **Invite** button in the top-right corner of the Workspace, and add someone by their username or email. Alternatively, you can generate an join link and send it to the person you want to invite.\n\n![inviting a multiplayer](https://docimg.replit.com/images/animations/invite-multiplayer.gif)\n\nTo remove someone from your Repl, hit the **Invite** button in the top-right corner and click the **X** button beside the user's name.\n\n![removing a multiplayer](https://docimg.replit.com/images/programming-ide/remove-member.png)\n\n## Observation Mode\n\nObservation mode enables you to view what someone else in your Repl is doing and follows them around as they code and switch to different files.\n\n![observation mode](https://docimg.replit.com/images/animations/observation.gif)\n\n## Threads & Chat\n\n[Inline Threads](/programming-ide/workspace-features/inline-threads) and Chat allow you to communicate both synchronously and asynchronously with others in Multiplayer.\n\nTo start talking with collaborators in your Repl, open the Chat pane from the Tools section of the sidebar.\n\n![open the chat](https://docimg.replit.com/images/animations/open-chat.gif)\n\nThreads provide you with the ability to make comments and discuss topics directly in the code.\n\n![thread preview functionality](https://docimg.replit.com/images/animations/thread-preview.gif)\n\nFor more information on how threads work and how to use them to their full extent, check out the corresponding [documentation](/programming-ide/workspace-features/inline-threads).\n\n## Team Repls\n\nTeam Repls are multiplayer by default, meaning that all members of a team can access it.\n\n![removing a multiplayer](https://docimg.replit.com/images/programming-ide/team-repl.png)","metadata":{"id":398}}],["399",{"pageContent":"# Repl Resources\n\nYou can find the current resource usage of your Repl in the workspace header. This includes the amount of **RAM**, **CPU**, and **Storage** currently being used by your Repl to run your code, the LSP, and other background services.\n\n<img src=\"https://docimg.replit.com/images/programming-ide/repl-resources/resources.png\" alt=\"opening the Resources panel\" width=\"400px\" />\n\n## Why Monitor Repl Resources?\n\nIt's important to monitor your resource usage to ensure that your Repl has enough resources to run smoothly. If you notice that your resource usage is consistently high, it may make sense to use a Boost to increase the resources your Repl can use, or make changes to your code so your program uses less resources.\n\n<img src=\"https://docimg.replit.com/images/programming-ide/repl-resources/near-limit.png\" alt=\"Resources panel when near limit\" width=\"400px\" />\n\n## High Resource Usage\n\nYou might be unsure about what high resource usage means, or why it is happening. It's important to remember that high resource usage is not necessarily a bad thing. As long as your experience in the workspace or your app is not degraded, high resource usage not a signal of something wrong.\n\nBut if you do notice that your resource usage is consistently high and your experience with Replit is being affected, you may want to consider upgrading your Repl specs with Boosts, that can be activated using [Cycles](/cycles/about-cycles). With a Boost, you can 4-8x the CPU and RAM of your Repl, allowing for resource-intensive programs without affecting your or your end users' experience.","metadata":{"id":399}}],["400",{"pageContent":"# Preferences\n\nYou can customize your coding experience by opening up the Settings tool in the Tools section.\n\n![Settings](https://docimg.replit.com/images/programming-ide/tools-settings.png)\n\n## General\n\n### Default layout\n\nThe initial layout of the workspace when you enter a new Repl.\n\n### Font size\n\nThe font size of the code editor.\n\n### Indent type\n\nWhether your code uses tabs or spaces for indentation.\n\n### Indent size\n\nThe number of tabs/spaces each indentation level consists of.\n\n### Wrapping\n\nDetermines whether your code should wrap or scroll horizontally within the editor.\n\n### Keybinds\n\nThe type of keybinds you use while coding. Options include **default**, **emacs**, and **vim**.\n\n### Multiselect modifier key\n\nThe modifier key used for selecting multiple items in the filetree.\\\n\n### Automatically open Webview when a port is open\n\nDetermines whether the Webview tool should open whenever your Repl serves an HTTP webserver on any port.\n\n### Theme\n\nAllows you to control the site-wide [theme](/category/themes).\n\n### Code intelligence\n\nDetermines whether autocomplete/suggestions/intellisense should be enabled.\n\n### Replit AI Complete Code\n\nDetermines whether Replit AI's Complete Code feature should be enabled. Exclusive to Replit AI subscribers.\n\n## Accessibility\n\n### Accessible Terminal Output\n\nAllows screen readers to access the contents of the Shell and the Console. If enabled, this setting has the\npotential to negatively affect performance.\n\n## Keyboard Shortcuts\n\nAllows you to customize keybinds for specific functions in the workspace.\n\n### Toggle sidebar\n\nOpens or closes the sidebar\n\n### Toggle Commandbar\n\nOpens or closes the command bar\n\n### Toggle pane context menu\n\nOpens or closes the options for the currently-focused Workspace Pane.\n\n### Switch to next tab\n\nSwitches you to the next Tab in the currently-focused Pane.\n\n### Switch to previous tab\n\nSwitches you to the previous Tab in the currently-focused Pane.\n\n### New tab\n\nCreates a new empty Tab.\n\n### Close tab\n\nCloses the currrently-focused Tab.\n\n### Find file\n\nOpens up a file search.","metadata":{"id":400}}],["401",{"pageContent":"Switches you to the previous Tab in the currently-focused Pane.\n\n### New tab\n\nCreates a new empty Tab.\n\n### Close tab\n\nCloses the currrently-focused Tab.\n\n### Find file\n\nOpens up a file search.\n\n### Search file contents\n\nOpens up a tool to search contents across all files with a single text query.\n\n### Run Repl\n\nRuns the Repl.\n\n### See multiplayers\n\nShows all multiplayers in the Repl.\n\n### Show shell\n\nSwitches focus to the shell if it exists as a tab in the workspace. If no shell tab is exists in the workspace, opens and focuses a new one.\n\n### Show console\n\nSwitches focus to the console if it exists as a tab in the workspace. If no console tab exists in the workspace, opens and focuses a new one.\n\n### Show docs\n\nSwitches focus to the Replit documentation if it exists as a tab in the workspace. If no docs tab exists in the workspace, opens and focuses a new one.\n\n### Show Replit AI\n\nSwitches focus to Replit AI Chat if it exists as a tab in the workspace. If no Replit AI Chat tab exists in the workspace, opens and focuses a new one.\n\n### Show settings\n\nSwitches focus to settings if it exists as a tab in the workspcae. If no settings tab exists in the workspace, opens and focuses a new one.\n\n### Show git\n\nSwitches focus to the Git tool if it exists as a tab in the workspace. If no Git tab exists in the workspace, opens and focuses a new one.\n\n### Toggle float group\n\nToggles whether the currently-focused Pane is floating or not.\n\n### Toggle maximize group\n\nToggles whether the currently-focused Pane is maximized or not.\n\n### Close group\n\nCloses the currently-focused Pane, including all files in tools located in it.\n\n### Close other tabs in group\n\nCloses all other Tabs in the currently-focused Pane, except for the currently-focused one\n\n### Insert group above\n\nInserts and focuses a Pane above the currently-focused Pane.\n\n### Insert group right\n\nInserts and focuses a Pane to the right of the currently-focused Pane.\n\n### Insert group left\n\nInserts and focuses a Pane to the left of the currently-focused Pane.\n\n### Insert group below","metadata":{"id":401}}],["402",{"pageContent":"Inserts and focuses a Pane to the right of the currently-focused Pane.\n\n### Insert group left\n\nInserts and focuses a Pane to the left of the currently-focused Pane.\n\n### Insert group below\n\nInserts and focuses a Pane below the currently-focused Pane.\n\n### Move tab into group above\n\nMoves the currently-focused Tab into the Pane located above the currently-focused Pane.\n\n### Move tab into group left\n\nMoves the currently-focused Tab into the Pane located to the left of the currently-focused Pane.\n\n### Move tab into group right\n\nMoves the currently-focused Tab into the Pane located to the right of the currently-focused Pane.\n\n### Move tab into group below\n\nMoves the currently-focused Tab into the Pane located below the currently-focused Pane.\n\n### Move focus to group above\n\nSwitches focus from the currently-focused Tool or File to the open Tool or File in the Pane located above.\n\n### Move focus to group left\n\nSwitches focus from the currently-focused Tool or File to the open Tool or File in the Pane located to the left.\n\n### Move focus to group right\n\nSwitches focus from the currently-focused Tool or File to the open Tool or File in the Pane located to the right.\n\n### Move focus to group below\n\nSwitches focus from the currently-focused Tool or File to the open Tool or File in the Pane located below.\n\n### Move cursor left\n\nMoves the cursor position one character to the left.\n\n### Move cursor left across one group\n\nMoves the cursor position one keyword to the left.\n\n### Move selection left\n\nMoves the current selection left by one character.\n\n### Move selection left across one group\n\nMoves the current selection left by one keyword.\n\n### Move cursor right\n\nMoves the cursor position one character to the right.\n\n### Move cursor right across one group\n\nMoves the cursor position one keyword to the right.\n\n### Move selection right\n\nMoves the current selection right by one character.\n\n### Move selection right across one group\n\nMoves the current selection right by one keyword.\n\n### Move cursor up\n\nMoves the cursor up by one line.\n\n### Move cursor down","metadata":{"id":402}}],["403",{"pageContent":"### Move selection right across one group\n\nMoves the current selection right by one keyword.\n\n### Move cursor up\n\nMoves the cursor up by one line.\n\n### Move cursor down\n\nMoves the cursor down by one line.\n\n### Move selection up\n\nMoves the current selection up by one line.\n\n### Move selection down\n\nMoves the current selection down by one line.\n\n### Go to line\n\nOpens and focuses an input. Upon confirmation, jumps you to the specified line.\n\n### Select next selection occurrence\n\nSelects the next occurrence of a matched term in a search operation.\n\n### Select all selection matches\n\nSelects all occurrences of a matched term in a search operation.\n\n### Fold all\n\nFolds all code blocks in the current file.\n\n### Unfold all\n\nUnfolds all code blocks in the current file.\n\n### Add line comment\n\nAdds a line comment in the current file, in the current file's language.\n\n### Remove line comment\n\nRemoves the line comment on the current line of the current file.","metadata":{"id":403}}],["404",{"pageContent":"# Console & Shell\n\nEvery Repl has both a Console and a Shell.\n\nThe console shows the output your Repl when it is run while the shell allows you to execute any bash command at any time within your Repl.\n\n## Stop a process\n\nTo stop a process in the Shell or the Console, use the `CTRL+C` shortcut on your keyboard. Performing this action in the Console will stop the Repl and performing it in the Shell will stop the current process running in the particular Shell tab.\n\n## Searching\n\nWhen either the Console or the Shell is focused, you will see a search button.\n\n![Search](https://docimg.replit.com/images/programming-ide/console-shell-search.png)\n\nOnce you start searching, you will see an input and three options.\n\n1. Enter a search term in the input\n2. Hit \"Next\" to jump to the next match\n3. Hit \"Back\" to jump to the previous match\n4. Hit \"Exit\" to exit Search mode\n\n## Clear the Console/Shell\n\nTo clear all the existing content on either the console or the shell, hit the Trash icon in the top-right corner of either one. Alternatively, you can run the `clear` command if you are using the Shell.\n\n## Multiple Shell instances\n\nYou can open up any number of Shell instances in a Repl, but only one console. The console will only ever show the output of the Repl in realtime.\n\nYou can open up multiple Shell instances by opening a new tab and selecting the Shell tool multiple times, or by dragging the Shell tool from the Tools section of the sidebar into multiple different areas.\n\n## FAQs\n\n### Why is my JavaScript output not showing?\n\nEnsure that your Repl is in NodeJS and not HTML/CSS/JS. To see the javascript output in an HTML/CSS/JS Repl, you will need to use the [Devtools](/programming-ide/workspace-features/webview#devtools) instead.","metadata":{"id":404}}],["405",{"pageContent":"# The Webview\n\nThe Webview is a specialized Tool for previewing and debugging your web application.\n\n![Webview](https://docimg.replit.com/images/programming-ide/webview.png)\n\nBy default, when your Repl exposes an HTTP server, the Webview will automatically open. If you don't want this intrusive behavior, there is a setting to [turn it off](/programming-ide/workspace-features/preferences#automatially-open-the-webview-then-a-port-is-open).\n\n## Domain Linking\n\nClick on the Pencil icon on the right side of the URL bar to add a custom domain to your Repl. For instructions on how to do this, see [Connecting your domain to your Repl](/hosting/custom-domains).\n\n*Please note that domain linking for development hosting will be deprecated on January 1st, 2024 and may not appear in the webview you for you, if you would like to deploy your app to a domain you own consider using [production deployments](/hosting/deployments/about-deployments). Read more about the transition [in our blog post](https://blog.replit.com/hosting-changes)*.\n\n## Devtools\n\nClick on the Wrench icon to open the developer tools in the Webview. The Developer tools will allow you to see console logs, inspect elements, view network requests, and more.\n\n![Devtools](https://docimg.replit.com/images/programming-ide/webview-devtools.png)\n\n## FAQs\n\n### Why can't I edit the URL in the webview?\n\nThe URL shown in the webview is read-only and points to the root route of your Repl's web output through the [`<iframe>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe) HTML element. To test a different route, click the button on the far right to open your project's web output in a new browser tab.\n\n### What's the difference between the Webview and an [Extension](/extension/intro)?\n\nThe Webview is a normal iframe and an Extension establishes a special handshake with the Replit workspace. Read more [here](/extensions/faq#whats-the-difference-between-the-webview-and-an-extension).","metadata":{"id":405}}],["406",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Books\n\n## Code with Replit\n\nOur [tutorials](/tutorials/overview) are also available as a book which you can download as a .pdf, .epub, or .mobi for offline reading.\n\nYou can grab a completely free copy [here](https://codewithrepl.it).\n\nThese are all project based tutorials where you will build a unique and useful project while learning specific tools and concepts.\n\nFor a more theoretical introduction to programming in Python, take a look at [Learn Python the Right Way](https://learnpythontherightway.com).\n\n## Learn Python the Right Way\n\n[Learn Python the Right Way](https://learnpythontherightway.com) is our free introduction to Python. It is a book aimed at teaching university students programming, but it is suitable for all ages and for complete beginners.\n\nFor a more practical introduction, see [Code With Replit](https://codewithreplit.com/) - a practical, project-based book.\n\nWe recommend going through both books simultaneously to get a good mix of theory and practice.\n\n## Make Javascript Games\n\n[Make Javascript Games](https://makejsgames.com) is our free introduction to game development using Kaboom.js. The website is available as a book which you can download as a .pdf, .epub, or .mobi for offline reading.\n\nYou can grab a completely free copy [here](https://makejsgames.com).\n\nThese are all project based tutorials where you will build a unique game project while learning specific tools and concepts.","metadata":{"id":406}}],["407",{"pageContent":"---\nsidebar_position: 8\ntitle: Abstract Data Types\n---\n\n# Abstract Data Types curriculum\n\n## Course Overview\n\nThis course is designed for high school students with a moderate level of programming experience. It introduces how to construct abstract data types and how to use them to solve a variety of problems.\n\nThe language used throughout is Python, though the slides could be easily adapted to suit another language. If adapted, please provide attribution to Replit and Thomas Bach, who created it.\n\n## The Full Curriculum\n\nThis course is split into six units, each of which takes an estimated 1.5 to 4 hours to complete. For each unit, there is a presentation and a teacher guide which provides additional content, answers to questions, vocabulary and additional material. There are also multiple coding challenges that go along with each lesson. These are linked within the teaching document and on the course folder on Replit.\n\nThe units covered are as follows:\n\n- [Introduction to ADTs](https://drive.google.com/drive/folders/1CcxXXs5UMfIGLyyKn0lnpaerQRKzTkYT)\n- [Stacks](https://drive.google.com/drive/folders/1XWw65cZhokGKxeYY9Cwq8oV59Va60jTr)\n- [Queues](https://drive.google.com/drive/folders/1mDVAsj5yWem90Gr4tOXBKXW5GAf-H2KG)\n- [Linked Lists](https://drive.google.com/drive/folders/1671Hp1PHv83hBFDEYEQZ9wSqPSDYlq-I)\n- [Recursion](https://drive.google.com/drive/folders/1TEHwGvSXwkl2icOayQ835ubVskHGhDu2)\n- [Binary Trees](https://drive.google.com/drive/folders/1cISSvLBK4PhxyTPNHgN-6gKI-VO-qMgr)\n\nIn addition, you can find the following:\n\n- [Course Overview Video](https://drive.google.com/file/d/1JjCOp_eTx0n30gu45ZyrQvy9rBh3mcNA/view?usp=sharing)\n- [Complete Code Examples](https://drive.google.com/drive/folders/1pXxiDx2yc9eA9mhpLPVSYsDLmsSku7hA)\n- [All Materials](https://drive.google.com/drive/folders/1e5EukNg71bHVpOMy3FWBlmh1kNgg2lJr)\n\n## Our Awesome Creator\n\n![](https://docimg.replit.com/images/curriculumImg/tbach.png)\n\nThis course was created by **Thomas Bach**.","metadata":{"id":407}}],["408",{"pageContent":"## Our Awesome Creator\n\n![](https://docimg.replit.com/images/curriculumImg/tbach.png)\n\nThis course was created by **Thomas Bach**.\n\nThomas is a former software developer and a teacher of 14 years. He has taught computer science, IT, and mathematics, both in the United States and internationally.\n\nContact: tsbach [at] gmail","metadata":{"id":408}}],["409",{"pageContent":"---\nsidebar_position: 7\ntitle: Intermediate Python\n---\n\n# Intermediate Python curriculum\n\n## How To Use This Course\n\nThis course is designed for students who already have experience of the following programming techniques:\n\n- Output\n- Input\n- Variables\n- Simple selection\n- Simple iteration\n- Lists\n- Basic functions\n\nThese techniques are referred to, built upon and used in the lessons and tasks. It is not essential that students have direct experience with the Python language as the syntax is fairly straightforward and simple to pick up.\n\nIf you’re not sure that your students are ready to start this course, you might want to check out our [Intro To Python](/teaching-curriculum/intro-python) course instead.\n\nFeel free to use the curriculum as is, or modify it to fit your needs. If you share these materials (as is or with modifications), please provide attribution to Replit and Andy Colley, who created the curriculum.\n\n## The Full Curriculum\n\nThe course is split into seven sub-topics. For each one there is a more in-depth .readme document to help you get started. This contains teacher notes to break down the key concepts linked to the coding skills, links to the tasks, example solutions on Replit, and the text of the tasks set. There’s also a slide deck for each week with presenter notes containing context, subject knowledge cues, possible questions to ask your students, and other useful links.\n\nFor every task, we’ve provided a hyperlink to a repl that students can work on. Share this with them and get them to fork their own version. There are also links to example solutions. There are often multiple ways of completing a task, so students may well have different code that works.\n\n### Intro Video\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RkhricaF5Jc\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n### Materials","metadata":{"id":409}}],["410",{"pageContent":"### Materials\n\n[Click here](https://drive.google.com/drive/folders/1cOtJLGhjBoc27cj7FQLP78ADnZ7D0y-6?usp=sharing) for the master folder containing all resources.\n\nLinks to the individual sub topics are below:\n\n- [Strings](https://drive.google.com/drive/folders/1J7JqajOuTB1nsEnu6wy-lNxXyeAN062Y?usp=sharing): String functions and manipulation\n- [Numbers](https://drive.google.com/drive/folders/1v8rEV4jNlbNMOuPOxCelwism9D8yvj8K?usp=sharing): Data types, random numbers, modulus\n- [Selection](https://drive.google.com/drive/folders/1PKyQgFfc4lBYXB7oIdG8CPhETnOJyFHh?usp=sharing): Multiple conditions using AND, OR, nesting selection\n- [Iteration](https://drive.google.com/drive/folders/1GATYadADxJnYBOF6WRq9_kWbQ5AgYepa?usp=sharing): Multiple boolean conditions, validation, combining selection and iteration\n- [Lists](https://drive.google.com/drive/folders/1A2SLvxSZPGD180wYYa_QuWoJFYJ53H-S?usp=sharing): Output a range of items from a list, search a list\n- [Files](https://drive.google.com/drive/folders/1fnyhMq618-5ixP_JxGTg5Y1SJjx25yes?usp=sharing): Read from a file, write to a file\n- [Exception Handling](https://drive.google.com/drive/folders/1Ty16cT9-JTj9wGQbsmsW2vm_WHn5KQac?usp=sharing): Using try/catch\n\n### Pedagogy\n\nThe tasks in this course make use of the [PRIMM pedagogical approach](https://primming.wordpress.com/). This model is based upon [Rosenshine’s principles of instruction](https://www.aft.org/sites/default/files/periodicals/Rosenshine.pdf).\n\n## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/andy.jpg\" width=\"300px\"/>\n\nThis course was created by **Andy Colley.**","metadata":{"id":410}}],["411",{"pageContent":"## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/andy.jpg\" width=\"300px\"/>\n\nThis course was created by **Andy Colley.**\n\nAndy has been teaching age 11 - 18 computer science and ICT in Manchester, UK, since 2004. He's a Computing at School master teacher, a Lead Practitioner for teaching & learning, and mentors trainee teachers. You can find him on twitter as [@MrAColley](https://twitter.com/mracolley) or hosting the [@LearningDust](https://twitter.com/learningdust) edtech podcast at [learningdust.com](https://www.learningdust.com/).\n\nIf you have any feedback, questions or comments about the resources, please get in touch. We’re excited about these resources and would love to hear from you.","metadata":{"id":411}}],["412",{"pageContent":"---\nsidebar_position: 2\ntitle: Intro to C++\n---\n\n# Intro to C++ curriculum\n\nThis course is designed for students with some programming experience but not with C++. It covers the proper use of core programming concepts, like ifs, loops, and functions, in C++ and introduces some more advanced concepts like pointers and data structures.\n\nFeel free to use the curriculum as is, or modify it to fit your needs. If you share these materials (as is or with modifications), please provide attribution to Replit and Alfonso Torres, who created the curriculum.\n\nYou can find more information and a lesson plan [here](https://docs.google.com/document/d/16phDT0r-OB9ZfF3JlWiMCE1jEvLzZNBpfHga-IG4_Gw/edit). You can copy all the assignments into your Replit team [here](https://replit.com/teams/import/afurhdoyyeyvpxbo-SeaPlusPlus).\n\n## The Full Curriculum\n\nWe’ve split this course into six sessions plus a bonus seventh lesson and a project, each designed to take a few hours with practice repls and homework assignments.\n\n[Click here](https://docs.google.com/document/d/16phDT0r-OB9ZfF3JlWiMCE1jEvLzZNBpfHga-IG4_Gw/edit) for the lesson plan and link to problems and homework.\n\n[Click here](https://replit.com/teams/import/afurhdoyyeyvpxbo-SeaPlusPlus) to copy all the assignments into your Replit team.\n\nLesson slides:\n\n1. [Basics](https://docs.google.com/presentation/d/1HmJzuvLpCqdgOA_1jsQg4FwrgBdGeGOqZpPLm2YPHpQ/edit?usp=sharing)\n\n- Variables\n- Input/output\n- Comments\n- Data types\n- Debugging\n\n2. [If statements](https://docs.google.com/presentation/d/109_wyyCNi9wfvB6Nte9Cs3XO9VJbPin67hO9Q1tE8qA/edit?usp=sharing)\n\n- Arithmetic expressions\n- Boolean expressions and relational operators\n- If statements\n- Logical operators (&& ||)\n\n3. [Loops](https://docs.google.com/presentation/d/1IRX0GRZZ-mQWbYAD8ld55z_9ox0M7XairUkRc263G1g/edit?usp=sharing)\n\n- Loops (while, for, do)\n- Arrays\n- Looping through arrays\n\n4. [Functions](https://docs.google.com/presentation/d/1gMO3fG6yzHJ08IKqhOVMNdeHVNQY29D-UnZDH96HNoI/edit?usp=sharing)\n\n- Functions","metadata":{"id":412}}],["413",{"pageContent":"- Loops (while, for, do)\n- Arrays\n- Looping through arrays\n\n4. [Functions](https://docs.google.com/presentation/d/1gMO3fG6yzHJ08IKqhOVMNdeHVNQY29D-UnZDH96HNoI/edit?usp=sharing)\n\n- Functions\n- Best practices\n- Function overloading\n\n5. [Pointers](https://docs.google.com/presentation/d/15w6EcscBjwFPrBNOlGnIxnbqkT5jKtTjFa4qV7SBY4A/edit?usp=sharing)\n\n- Pointers\n- Memory allocation\n\n6. [Data structures](https://docs.google.com/presentation/d/1xEyrZQiBd1orl1I7Zk39h_XvNdJa_VBLzpIgWnobxI8/edit?usp=sharing)\n\n- Vectors\n- Stacks\n- Queues\n\n7. [Bonus: Advanced data structures](https://docs.google.com/presentation/d/1RGF-SfdeWlkSj2-b86rlt7-y3_cUDsuiVtuxOINyEBY/edit?usp=sharing)\n\n- Sets\n- Nodes\n- Linked lists\n\n8. [Project: Caesar Cipher](https://docs.google.com/presentation/d/1ydlKQyY06bM4BnaG-7eyGS5uOX-bWQv-lXlJAcwtERU/edit?usp=sharing)\n\n## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/alfonso.png\" width=\"300px\"/>\n\nThis course was created by **Alfonso Torres**.\n\n> Hello, my name is Alfonso Torres and I am the creator of the C++ lessons. Before getting a chance to work with Replit, I attended CSU Monterey Bay. After five years, I was able to complete my degree in Computer Science. During my time in college, I had the opportunity to work with my local community college as a Programming Teacher. I worked with students all over Monterey County to teach them C++, Python, Java, and HTML/CSS. After finishing school, I got another great opportunity to work with Replit to create these C++ Lessons. I had loads of fun making the lessons, so I hope you feel the same way when learning C++.\n\n> If you'd like to get in touch you can reach me at: alftaurus [at] gmail [dot] com","metadata":{"id":413}}],["414",{"pageContent":"---\nsidebar_position: 3\ntitle: Intro to HTML/CSS\n---\n\n# Intro to HTML & CSS curriculum\n\nWelcome to our web design course. We are providing you with a free set of pick up and play materials that include: course timeline, course outline, a high quality set of teaching slides, teacher notes and engaging activities with premade Replit templates and teacher solutions.\n\nLearners will be introduced to the basics of HTML and CSS through a set of practical lessons that cover paragraph tags, to divs and changing font colour, to exploring gradient colour backgrounds. Each lesson will build learner knowledge of HTML and CSS and ends with an open team task. Learners are given the freedom to be creative and use their knowledge and the skills learnt throughout the course to create a website of their very own.\n\nFeel free to use the curriculum as is, or modify it to fit your needs. If you share these materials (as is or with modifications), please provide attribution to Replit and Toni Scullion, who created the curriculum.\n\nYou can find more information and an in-depth overview [here](https://docs.google.com/document/d/1EFIIbmNpNp0p1havMiwtRdBG0xqEZhtq3lyLVLumuYs/edit?usp=sharing).\n\n## The Full Curriculum\n\nIn this set of lessons, learners will explore the two core languages that are used to build web pages: Hypertext Markup Language (HTML) and Cascading Style Sheets (CSS). Learners will be introduced to and explore basic HTML and CSS while also completing challenges and using the knowledge they will develop over the lessons to create their very own web design projects. They will be tasked with three debugging challenges allowing learners to apply their knowledge of HTML and CSS to identify and fix errors in code.\n\nYou can find the entire curriculum, including Replit assignments, [here](https://docs.google.com/document/d/1AAjJcGtGXcP5xSJm3Bse33mgURKwmTrt9qV_5ZACvnA/edit?usp=sharing)\n\n### More Resources","metadata":{"id":414}}],["415",{"pageContent":"You can find the entire curriculum, including Replit assignments, [here](https://docs.google.com/document/d/1AAjJcGtGXcP5xSJm3Bse33mgURKwmTrt9qV_5ZACvnA/edit?usp=sharing)\n\n### More Resources\n\n- [Here](https://drive.google.com/file/d/1TWvt2pVxi-DSjMbRxoz4ayym04llTr0n/view?usp=sharing) is a video overview of this course.\n- [This](https://docs.google.com/presentation/d/1m2a0cbzz2hh9_A8U1ztuyoYuIc6eeTXSRAHd0ZT7-Y0/edit?usp=sharing) is the full PowerPoint referenced in the curriculum.\n\n## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/TScullion.jpg\" width=\"300px\"/>\n\nThis course was created by **Toni Scullion**.\n\nToni Scullion is a computing science teacher and founder of dressCode, a non-profit charity aspiring to make a dent in the computing science gender gap. She is extremely passionate about teaching computing science and getting more young people into the subject, particularly more girls. Toni works to raise the profile of computing science as a subject in schools, to ultimately help inspire the next generation and get more young people into the work of tech.\n\n- [dresscode Website](https://www.dresscode.org.uk)\n- dressCode Twitter: [@dresscodehq](https://twitter.com/dresscodehq)\n- Toni's Twitter Handle: [@sculliontoni](https://twitter.com/sculliontoni)\n- [Toni's Linkedin](https://linkedin.com/in/toni-scullion)\n- [dressCode Linkedin](https://linkedin.com/company/dresscodehq)","metadata":{"id":415}}],["416",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Intro to Java curriculum\n\nWelcome to this intro curriculum for learning to code with Java using the Replit platform. On this page, you can find links to the three units of the curriculum and find other resources to support the use of the guides.\n\n## The Full Curriculum\n\n### Unit 1\n\nCourse contents:\n\n- Displaying values\n- Storing values using variables\n- Storing and displaying messages using values and variables\n\n[Access the full course on Coda](https://coda.io/d/duke-1_dC_pdnoekO1/read-me-first_suj9j?utm_campaign=embed&utm_medium=web&utm_source=C_pdnoekO1#_lu_jE) or you can view it in the frame below.\n\n<iframe\n  src=\"https://coda.io/embed/C_pdnoekO1/_suj9j?viewMode=embedplay\"\n  width=\"100%\"\n  height=\"100%\"\n  style={{ maxWidth: \"100%\" }}\n  allow=\"fullscreen\"\n/>\n\n### Unit 2\n\nCourse contents:\n\n- Using a keyboard to enter data\n- Updating stored values\n- Calculating results by evaluating expressions\n- Some challenges using IPO program plan\n\n[Access the full course on Coda](https://coda.io/d/duke-2_dM8qF5mIGzV/read-me-first_suj9j?utm_campaign=embed&utm_medium=web&utm_source=M8qF5mIGzV#_lu_jE) or you can view it in the frame below.\n\n<iframe\n  src=\"https://coda.io/embed/M8qF5mIGzV/_suj9j?viewMode=embedplay\"\n  width=\"100%\"\n  height=\"100%\"\n  style={{ maxWidth: \"100%\" }}\n  allow=\"fullscreen\"\n/>\n\n### Unit 3\n\nCourse contents:\n\n- Thinking about sequence and introducing control structures\n- Using conditional code (if)\n- Using loops in code\n- Storing lists using arrays\n- Using built-in functions\n\n[Access the full course on Coda](https://coda.io/d/duke-3_dPgK6TRXYJe/read-me-first_suj9j?utm_campaign=embed&utm_medium=web&utm_source=PgK6TRXYJe#_lu_jE) or you can view it in the frame below.\n\n<iframe\n  src=\"https://coda.io/embed/PgK6TRXYJe/_suj9j?viewMode=embedplay\"\n  width=\"100%\"\n  height=\"100%\"\n  style={{ maxWidth: \"100%\" }}\n  allow=\"fullscreen\"\n/>\n\n## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/brendanmccart.jpg\" width=\"300px\"/>","metadata":{"id":416}}],["417",{"pageContent":"height=\"100%\"\n  style={{ maxWidth: \"100%\" }}\n  allow=\"fullscreen\"\n/>\n\n## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/brendanmccart.jpg\" width=\"300px\"/>\n\nThis course was created by **Brendan McCart**.\n\n> Hi, I'm Brendan McCart. I've been teaching school level computing science in Scotland for about 35 years, so when I learned to program at school I had to write FORTRAN code out on big squared sheets and got the output a week later! It is really inspiring and a privilege to be supporting the amazing young people in my school who are so passionate about developing their own CS skills and knowledge. I find the core CS principles I learned at university still hold and continue to power the fantastic opportunities that digital tech offers. CS education seems really exciting right now, with loads of innovation coming from a fusion of energy out of industry, academia and most importantly enthusiastic students and teachers. In Scotland, there is currently a growing wave of ambition for CS education and I'm pleased to see the contribution that dressCode, a charity I help with (led by the heroic Toni Scullion), is part of that. The Replit platform is an awesome fit for school-level CS education only matched by the amazing team who drive Replit forward and deliver for teachers and students.\n\nYou can contact Brendan at: brendan.mccart [at] dresscode.org.uk","metadata":{"id":417}}],["418",{"pageContent":"---\nsidebar_position: 5\ntitle: Intro to Python\n---\n\n# Intro to Python curriculum\n\nThis course is designed for students with little or no experience of programming and/or the Python language. It introduces core programming concepts and techniques used in the vast majority of programming languages.\n\nFeel free to use the curriculum as is, or modify it to fit your needs. If you share these materials (as is or with modifications), please provide attribution to Replit and Andy Colley, who created the curriculum.\n\nYou can find more information and an in-depth overview [here](https://docs.google.com/document/d/1DdYZkkyTZrcmFTtqmKYx6Rq4Sg_PbPNQT4_chUCZWfI/edit?usp=sharing).\n\n## The Full Curriculum\n\nThis course is split into six sessions, each designed to take roughly 2-3 hours with a homework task as well.\n\nFor each session, there is a more in-depth .readme document to help you get started. This contains teacher notes to break down the key concepts linked to the coding skills, links to the tasks, and example solutions on Replit and the text of the tasks set. There’s also a slide deck for each week with presenter notes containing context, subject knowledge cues, possible questions to ask your students, and other useful links.\n\nFor every task, we’ve provided a hyperlink to a repl that students can work on. Share this with them and get them to fork their own version. We’ve also linked to an example solution. There are often multiple ways of completing a task, so students may well have different code that works (mine often do).\n\nYou can find a folder with all the lessons [here](https://drive.google.com/drive/folders/1w1UZLD2sMQlEeFvOVmjUxk4WU8p0o8dJ?usp=sharing).\n\n- [Course Introduction](https://docs.google.com/document/d/1DdYZkkyTZrcmFTtqmKYx6Rq4Sg_PbPNQT4_chUCZWfI/edit?usp=sharing)\n\n1. [Output, Variables & Input](https://drive.google.com/drive/folders/1GB5NZGE9-soL4MRH46Oj19ZZmF_nrKhU?usp=sharing)","metadata":{"id":418}}],["419",{"pageContent":"1. [Output, Variables & Input](https://drive.google.com/drive/folders/1GB5NZGE9-soL4MRH46Oj19ZZmF_nrKhU?usp=sharing)\n2. [Maths with variables](https://drive.google.com/drive/folders/1U0QgaWsiGyTr_-06sXMesWvcQPujQntu?usp=sharing)\n3. [Selection](https://drive.google.com/drive/folders/10Ltumn60X_1Pwgw-6YujfP2f5gSssiWb?usp=sharing)\n4. [Iteration](https://drive.google.com/drive/folders/1_aqB0sW9IZ4f88th1-RvuldONGY1qQ1C?usp=sharing)\n5. [Lists](https://drive.google.com/drive/folders/10YC6os7LzPws3A9MuG8-gfWgEH_QlG0L)\n6. [Functions](https://drive.google.com/drive/folders/1sCrG1jgwffcZ9uXHroubKvea6YGfrEUm?usp=sharing)\n\nInside this folder, each of the six lessons will have its own folder along with a .readme, PowerPoint, and a video walkthrough.\n\n## Testimonials\n\n> What you've put together is absolutely perfect. I appreciate that there is a video explaining the concepts, and the ppt is thorough. There are no useless workbooks for students to write in. But most of all, the tasks/replits are perfect for the students and they scaffold the concepts really well while still requiring some stand alone code.\n>\n> It's exactly what I've been looking for. Finally!\n>\n> _– High School Programming Teacher_\n\n## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/andy.jpg\" width=\"300px\"/>\n\nThis course was created by **Andy Colley.**\n\nAndy has been teaching age 11 - 18 computer science and ICT in Manchester, UK, since 2004. He's a Computing at School master teacher, a Lead Practitioner for teaching & learning, and mentors trainee teachers. You can find him on twitter as [@MrAColley](https://twitter.com/mracolley) or hosting the [@LearningDust](https://twitter.com/learningdust) edtech podcast at [learningdust.com](https://www.learningdust.com/).\n\nIf you have any feedback, questions or comments about the resources, please get in touch. We’re excited about these resources and would love to hear from you.","metadata":{"id":419}}],["420",{"pageContent":"---\nsidebar_position: 6\ntitle: Intro to SQL\n---\n\n# Intro to SQL curriculum\n\nWelcome to our SQL course. Our free set of pick up and play materials include: course timeline, course outline, a high quality set of teaching slides, teacher notes and engaging activities with premade Replit tasks and teacher solutions.\n\nLearners will be introduced to the basics of SQL through a set of practical lessons that cover everything from creating a database, running simple and complex queries as well as how to use the like wildcard. Each lesson builds learner knowledge of SQL. We have made three levels of lessons with fun challenges along the way, allowing learners to apply the SQL knowledge they’ve learnt in previous lessons.\n\nFeel free to use the curriculum as is, or modify it to fit your needs. If you share these materials (as is or with modifications), please provide attribution to Replit and Toni Scullion, who created the curriculum.\n\nYou can find more information and an in-depth overview [here](https://docs.google.com/document/d/1ubXn_wfWlvfN_UN0yiv5_9aNmnjO3FpNF13FFkl7on4/edit?usp=sharing).\n\n## The Full Curriculum\n\nIn this set of lessons, learners will explore the most commonly used language to access and manipulate data: SQL. Learners will be introduced to and explore basic SQL while also completing challenges.\n\nYou can find the entire curriculum, including Replit assignments, [here](https://drive.google.com/drive/folders/1JcaorHEA8tTiubK0igmb7_D2yl8jHya1).\n\n### More Resources\n\n- [Here](https://drive.google.com/file/d/1iQffSlt4VF2-usWgf2KdDXcfIMMpCc4Y/view?usp=sharing) is a video overview of this course.\n- Bronze level\n  - [Learners' slides](https://docs.google.com/presentation/d/1zv-tk2k8AfdGFUAwzTEj7GUezwq63lHhRYFIaC2M8xA/edit?usp=sharing)\n  - [Teacher's slides](https://docs.google.com/presentation/d/1mxtC5CjwbLpPZWQapL6OlqurZI7Nn1fnq9cwrTZP79g/edit?usp=sharing)\n  - [Lesson plan](https://docs.google.com/document/d/1srq6WXdsxK6yN8-xYR6AltbqfZhpySCze2C42pHpucg/edit?usp=sharing)\n- Silver level","metadata":{"id":420}}],["421",{"pageContent":"- [Lesson plan](https://docs.google.com/document/d/1srq6WXdsxK6yN8-xYR6AltbqfZhpySCze2C42pHpucg/edit?usp=sharing)\n- Silver level\n  - [Learners' slides](https://docs.google.com/presentation/d/1hoQiVSWwiufBbZhBRfe368lGq4mgDS-nCrrLFH6lTzs/edit?usp=sharing)\n  - [Teacher's slides](https://docs.google.com/presentation/d/143pJSwMu-avRytSPk8mOdAy6E5ahGVXnGVJ7aBhBpXA/edit?usp=sharing)\n  - [Lesson plan](https://docs.google.com/document/d/1xbze5v2-lTn-t0p5OcuhRtfOMAtbFAZheqqq9t80E_o/edit?usp=sharing)\n- Gold level\n  - [Learners' slides](https://docs.google.com/presentation/d/1lVdQ2X9NYK2EU53A-FIbyvNoh_C3iIgR6pfaK7jrcMg/edit?usp=sharing)\n  - [Teacher's slides](https://docs.google.com/presentation/d/1zvnVfTmX5n5yoGJcbaHqhdjxzjde6KO-oPgZGQnBXUo/edit?usp=sharing)\n  - [Lesson plan](https://docs.google.com/document/d/1M2_wctR6JGtV54LH84D7RgZEL_IAb_BieuBMRmsvp6M/edit?usp=sharing)\n- [SQL Cheat Sheet](https://docs.google.com/presentation/d/1-vY3QibA6nFm40k6tuNBvFUNNwjttpjX9Jl1YA-xazs/edit?usp=sharing)\n\n## Our Awesome Creator\n\n<img class=\"profile_pic\" src=\"https://docimg.replit.com/images/curriculumImg/TScullion.jpg\" width=\"300px\"/>\n\nThis course was created by **Toni Scullion**.\n\nToni Scullion is a computing science teacher and founder of dressCode, a non-profit charity aspiring to make a dent in the computing science gender gap. She is extremely passionate about teaching computing science and getting more young people into the subject, particularly more girls. Toni works to raise the profile of computing science as a subject in schools, to ultimately help inspire the next generation and get more young people into the work of tech.\n\n- [dresscode Website](https://www.dresscode.org.uk)\n- dressCode Twitter: [@dresscodehq](https://twitter.com/dresscodehq)\n- Toni's Twitter Handle: [@sculliontoni](https://twitter.com/sculliontoni)\n- [Toni's Linkedin](https://linkedin.com/in/toni-scullion)\n- [dressCode Linkedin](https://linkedin.com/company/dresscodehq)","metadata":{"id":421}}],["422",{"pageContent":"---\nsidebar_position: 1\ntile: Introduction to Teaching Curriculum\n---\n\n# Free Curricula for Educators\n\nAt Replit, our mission is to make programming more accessible to all. We aim to do this by partnering with the incredibly talented educators in our community. Thanks to these partnerships, we can provide free curricula that educators are encouraged to use, modify, and share when they are teaching computer science and programming.\n\n## Curricula\n\n- [Intro to C++](/teaching-curriculum/intro-cpp)\n- [Intro to HTML/CSS](/teaching-curriculum/intro-html-css)\n- [Intro to Java](/teaching-curriculum/intro-java)\n- [Intro to Python](/teaching-curriculum/intro-python)\n- [Intro to SQL](/teaching-curriculum/intro-sql)\n- [Intermediate Python](/teaching-curriculum/intermediate-python)\n- [Abstract Data Types](/teaching-curriculum/abstract-data-types)\n\n- More to come!\n\n_Email us at contact@replit.com if you'd like to write curriculum for us. We have some budget available._\n\n## **Why are we doing this?**\n\nOur mission at Replit is to make programming more accessible to all. We know this can be accomplished through multiple avenues and in partnership with the inredibly talented educators in our community, which is why we are now providing free curricula that educators are free to use, modify, and share alike when they are teaching Computer Science and Programming.\n\nCheck this page regularly, as we aim to update it often with a wide variety of curricula across multiple disciplines.\n\n## Get Started\n\nClick on one of our curricula in the left sidebar (or below) and you're on your way! You can use the curricula as is, or modify them to fit your needs. If you'll be sharing modifications, please ensure that they are freely (non-commercially) shared and that you give credit to Replit and the specific curriculum creator.\n\nHappy teaching and happy coding!\n\n## Curricula\n\n- [Intro to Java](/teaching-curriculum/intro-java)\n- [Intro to Python](/teaching-curriculum/intro-python)","metadata":{"id":422}}],["423",{"pageContent":"Happy teaching and happy coding!\n\n## Curricula\n\n- [Intro to Java](/teaching-curriculum/intro-java)\n- [Intro to Python](/teaching-curriculum/intro-python)\n- [Intermediate Python](/teaching-curriculum/intermediate-python)\n- [Intro to HTML/CSS](/teaching-curriculum/intro-html-css)\n- [Intro to SQL](/teaching-curriculum/intro-sql)\n- [Abstract Data Types](/teaching-curriculum/abstract-data-types)\n- [Intro to C++](/teaching-curriculum/intro-cpp)\n- More to come!\n\n## Additional Resources\n\n- [FB Replit for CS Education group](https://www.facebook.com/groups/replitforcseducation/)\n- [FB ICT & Computing Teachers group](https://www.facebook.com/groups/ict.computing/)\n- [FB KS3 Computer Science group](https://www.facebook.com/groups/ks3computing/)\n- [FB AP Computer Science A Teachers group](https://www.facebook.com/groups/APComputerScienceTeachers/)\n- [FB AP Computer Science Principles Teachers](https://www.facebook.com/groups/APComputerSciencePrinciples)\n- [TES resources](https://www.tes.com/teaching-resources)\n- [Computing at School](https://www.computingatschool.org.uk/)\n\n## Get in Touch\n\nWe would love to hear from you! Please email [contact@replit.com](mailto:contact@replit.com) if:\n\n- You've found the curricula helpful.\n- You have general feedback.\n- You have any other resources you'd like us to add to the list.\n- You'd like to write a curriculum for us. We have some budget available.","metadata":{"id":423}}],["424",{"pageContent":"---\nsidebar_position: 23\n---\n\n# Archiving Teams\n\nTeams that are no longer in use may be archived by visiting your Teams dashboard, expanding the menu next to the team you wish to archive, and selecting \"Archive\".\n\nOnce you archive a team, members will still be able access repls created in this Team, but they cannot create new repls within it.\n\nYou can unarchive your team at any time.\n\n![Mouse cursor hovering over the dropdown menu next to a team, revealing the options to Archive or Delete the team](https://docimg.replit.com/images/teamsForEducation/teamarchive.png)\n\n- Instructors can [copy Team Projects from an archived team to a new team](/teams-edu/copying-projects-other-teams).\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Om-YChvLfpY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":424}}],["425",{"pageContent":"---\nsidebar_position: 6\n---\n\n# Assigning nicknames\n\nTeam nicknames allow teachers, and other admins, the ability to assign nicknames to their students.\n\n## Common Uses\n\n- Student Privacy\n  - Students that sign up using the privacy enabled link are assigned a random username. In the past it has been up to the teachers to keep track of which student belonged to which generated username. Nicknames will allow teachers to assign the correct name to the student without violating COPPA regulations.\n- Sectioning Students\n  - Teachers who use Teams for multiple class sections or cohorts can now sort their students' submissions by section by assigning nicknames with identifiers such as section number or cohort year.\n    ![Searching project submissions by section](https://docimg.replit.com/images/teamsForEducation/nicknamesections.png)\n\n## How to use\n\n- Open the 'Manage team members' modal on the home screen of a team.\n- Double click on any member's name.\n- An input box will appear.\n- Enter the nickname you wish the member to have and press the enter key.\n- The nickname will be created.\n\nTo update and delete a nickname:\n\n- Click on the name in the 'Manage team members' modal.\n- The input box will appear with the nickname pre-loaded.\n- Update the nickname and press enter.\n- To delete the nickname completely, remove all characters from the input box and press the enter key.\n\n![Assigning nicknames](https://docimg.replit.com/images/teamsForEducation/nicknames.gif)\n\n## Where nicknames will appear\n\nOnce a team member has a nickname it will appear in:\n\n- Team Overview table\n- Submission Overview\n- Group assignments when creating groups.\n- Who's Coding section\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ch9D63mgYZI?start=207\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":425}}],["426",{"pageContent":"---\nsidebar_position: 7\n---\n\n# Assigning user roles\n\nYou can assign different members of your team different roles.\n\n- **Organization Owner** is the main contact for the full organization. They can add and remove Org Admins, delete and rename an org, and create and access all teams as an admin.\n- **Organization Admin** Can create new teams within an organization to access Team Owner privileges in each of the teams they create.\n- **Team Owner:** Owners are the user who originally creates a team. Owners can add and change user roles, create Team Projects, and view student work.\n- **Team Admin:** This is for teachers, teaching assistants, etc. It is meant for anyone who will be creating assignments and grading. Admins may create new Team Projects and view student work, but may not change user roles.\n- **Team Member:** This is the default role and best for students or other people who don't need special access. They can only view and fork published Team Projects and can view and edit Team Repls.\n\n## Adding Org Owners and Admins\n\n- To add a new Org Admin or Owner, find your Organization and click on the settings gear.\n- Click \"Add Org Admin or Owner\"\n- Invite an Org Admin or Owner using their username or email. They'll receive a notification to join your team with their new role!\n  ![Adding Team Admins](https://docimg.replit.com/images/teamsForEducation/inviting-users/add_org_admin.gif)\n\n- Once they've accepted the invitation, you can go back to edit their role or remove them.\n  ![Editing org admins](https://docimg.replit.com/images/teamsForEducation/inviting-users/edit_org_admin.gif)\n\n## Assigning Team Admins and Team Members\n\nYou can assign roles to members who are part of your team by navigating to your [team dashboard](https://replit.com/teams) and choosing \"Manage team members\".\n\n![](https://docimg.replit.com/images/teamsForEducation/team-roles.png)","metadata":{"id":426}}],["427",{"pageContent":"![](https://docimg.replit.com/images/teamsForEducation/team-roles.png)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ch9D63mgYZI?start=75\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":427}}],["428",{"pageContent":"---\nsidebar_position: 14\n---\n\n# Copying projects to other teams\n\nTeachers can bulk copy and share projects to any Team. This feature is useful for a single teacher managing multiple classes, sharing curricula with your colleagues, or duplicating projects within a team or from one semester to the next. Sharing and bulk copying is managed using a secure private link that is created by the team admin.\n\n### To duplicate projects individually:\n\n1. Click on the three dots next to a Team Project\n1. Select “Copy Project”\n1. Indicate the team and unit you’d like to copy the Team 1. Project to. You can also select the same team to simply create a duplicate of the Team Project!\n1. Click “Copy”\n\n![Copying individual projects](https://docimg.replit.com/images/teamsForEducation/copy_individual_project.gif)\n\n### To duplicate projects in bulk:\n\n1. Click on \"Share projects\" :\n\n![Project Copying](https://docimg.replit.com/images/teamsForEducation/copyProjectOne.png)\n\n2. Click on \"+ Create a new link\". This creates the link you'll share with others.\n\n![Project Copying](https://docimg.replit.com/images/teamsForEducation/copyProjectTwo.png)\n\n3. You can choose all or a specific subset of assignments you want to be linked with the URL you are creating.\n\n![Project Copying](https://docimg.replit.com/images/teamsForEducation/copyProjectThree.png)\n\n4. This is the final link that you can share with others (you can edit it). You can also create new links as needed; the old ones will not be removed. This is useful if you want to share different projects with different people/teams. You can also delete the link so that it can no longer be used.\n\n![Project Copying](https://docimg.replit.com/images/teamsForEducation/copyProjectFour.png)\n\n5. To import the projects into a new team, open the link you created, then select the team you'd like to update as well as the projects you want to import into the team. To duplicate projects within the same team, simply select the original team name to import the projects into.","metadata":{"id":428}}],["429",{"pageContent":"![Project Copying](https://docimg.replit.com/images/teamsForEducation/copyProjectFive.png)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/E8t4T4652qY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":429}}],["430",{"pageContent":"---\nsidebar_position: 8\n---\n\n# Creating projects and assignments\n\n**Team Projects** are projects and assignments that teachers can set up with starter code, instructions, and materials for their students. When starting a Team Project, students duplicate their own, private versions of the Team Projects to edit and customize freely.\n\n_Team Projects are private by default and are visible and editable only by the teacher and each individual student or student group._\n\n> **Please note that Team Repls were deprecated in October 2021.**\n\n- If you'd like to create private repls to store solutions, we recommend using the [Project Solutions tool](/teams-edu/project-solutions).\n- You can also store notes and demos as unpublished Team Projects. Unpublished projects are not visible to your students at all.\n- Use the [Curriculum Authoring tool](/teams-edu/lesson-authoring) to write read-only instructions for your students to follow as well as admin-only lesson plans where you can stash your class notes.\n- You can also convert repls from your personal account into Team Projects using [this workflow](/teams-edu/repls-to-team-projects).\n- If you still have questions or need support, please contact us at [education@replit.com](mailto:education@replit.com).\n\n## Creating Team Projects\n\nFrom your team dashboard, create a new project.\n\n![Create project button](https://docimg.replit.com/images/teamsForEducation/project-create-button.png)\n\n**Select project language, title, description, due date, and whether this will be a [group project](/teams-edu/group-projects).** You'll be redirected to the IDE to add any comments, tests, and initial coding blocks you'd like your students to start from. You'll assign groups when you publish the project.\n\n<img\nstyle={{ maxWidth: 600 }}\nsrc=\"https://docimg.replit.com/images/teamsForEducation/project-create.png\"\n/>\n\n### Publishing","metadata":{"id":430}}],["431",{"pageContent":"<img\nstyle={{ maxWidth: 600 }}\nsrc=\"https://docimg.replit.com/images/teamsForEducation/project-create.png\"\n/>\n\n### Publishing\n\nWhen you are done editing your project and it is ready to be published, click \"Publish project\" from the IDE. Once published, your project will be viewable and editable by all members assigned to that project.\n\n![Project publish button](https://docimg.replit.com/images/teamsForEducation/project-publish-button.png)\n\nA modal appears, where you can toggle the project between \"Published\" and \"Unpublished\". You can also toggle this from your team homepage to unlist projects from your team.\n\n## Submitting Student Work\n\nWhen students have completed their work on the project, they click \"Submit\" in the IDE header, which will notify all teachers of their submission. Students may continue working on projects and resubmit them after hitting \"Submit.\"\n\n![Project submit](https://docimg.replit.com/images/teamsForEducation/project-submit.png)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FjzF1t6htn4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OEuAMAt9ex4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":431}}],["432",{"pageContent":"---\nsidebar_position: 25\n---\n\n# Curriculum Hub\n\nWith the [Curriculum Hub](https://replit.com/curriculum), admins on Teams for Education accounts can access pre-built projects, lesson plans, instructions, and tests to import and utilize in their own teams. Curriculum Hub materials are designed to work as full units or as stand-alone projects.\n\nTeams for Education admin users may access the Curriculum Hub from their sidebar or at [this link](https://replit.com/curriculum).\n\n![Curriculum Hub](https://docimg.replit.com/images/teamsForEducation/curriculum-hub/curriculum_hub.png)\n\nUsers may preview the lesson plans and sequence for each curriculum unit. _Project code, instructions, and solutions are only visible to admins after curriculum has been imported into their own team._\n\n![Previewing lesson plans](https://docimg.replit.com/images/teamsForEducation/curriculum-hub/curriculum_viewlessonplan.gif)\n\nTo import the full curriculum into a team, click on \"Import into Teams for Education\" and select the destination team. _Because the full curriculum unit will be imported, we recommend creating a curriculum-only team that you can use to view all project details and solutions, then deploy to your other teams selectively._\n\n![Importing curriculum into teams](https://docimg.replit.com/images/teamsForEducation/curriculum-hub/curriculum_import.gif)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LJhpVRS1sHk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":432}}],["433",{"pageContent":"---\nsidebar_position: 21\n---\n\n# Embedding projects\n\nTo embed a project, follow the simple steps below or follow along with our [video walkthrough](https://www.loom.com/share/788fb7ade7154c83baf0df6ecf1fe102):\n\n_Please note that to access their project in an iframe, students must be added to the team and logged into their Replit account._\n\n1. Click on the three dot menu found on the right side of each project.\n2. Copy the embed code. This will provide you with an [iframe](/teams-edu/embedding-projects) which you can paste into HTML or copy the project link.\n3. Paste it wherever you are trying to embed the project, and you'll be good to go!\n\n![Embedding projects](https://docimg.replit.com/images/teamsForEducation/embedProjectsImage.png)\n\nThe embed code you copy will look like the example below:\n\n```\n<iframe width=\"100%\" height=\"600px\" src=\"https://replit.com/team/{team name}/{project name}\"></iframe>\n```","metadata":{"id":433}}],["434",{"pageContent":"# How to create a good enrichment coding assignment using Replit\n\nThe best way to learn to code is by coding. If you're teaching a programming class, you've no doubt noticed that there are some students who are champing at the bit, wanting to be challenged.\n\nSetting extended homework, optional projects, or enrichment assignments is a great way to allow these students to do more without disadvantaging the ones who are battling to keep up with the standard syllabus.\n\nBut setting an appropriate project can be challenging for teachers. In this guide, we'll take a look at what makes a good enrichment homework assignment with some practical examples of how to set and grade these.\n\n## What makes a great extended homework assignment?\n\nA good enrichment assignment should be:\n\n- **Motivating:** The student should be inspired to build something fun or useful. Multiple choice questions or work that closely matches the format of the normal homework is often not a good fit.\n- **Practical:** The student should be able to use or play with what they've built, and show it off to friends and family.\n- **Difficult to plagiarise:** Especially if there are bonus grades on offer, students shouldn't be able to easily copy from each other or from online code samples and submit it as their own work.\n\nFinally, extended homework needs to find a delicate balance between between freedom and constraints. Students should have enough freedom to explore and learn related concepts on their own, while having some constraints so that you can fairly compare the work done by different students and to provide enough guidance as to not be overwhelming.\n\n## Example topics that work well for enrichment assignments\n\nIt's more inspiring for students if they can build something that seems real. Therefore the following topic areas often work great for enrichment assignments:\n\n- Game development\n- Web application development\n- Data science and visualisation\n- Command line interface tooling development","metadata":{"id":434}}],["435",{"pageContent":"- Game development\n- Web application development\n- Data science and visualisation\n- Command line interface tooling development\n\nDifferent students are likely to find different topics more inspiring: some people just want to build games, while others will find 'serious' projects more interesting, so it's great to rotate through different topics.\n\n## Example: Build a memory game with PyGame\n\nAn example of a simple game that is a great starting point for students who are interested in game development is the well-known memory game. In this game, we have a set of cards with two of each kind of color. The cards are placed face down and the player is allowed to turn over any two cards. If the cards match, the cards are removed. If not, the cards are turned face down again.\n\nAt the start, players turn over cards at random, trying to remember what cards they see and remembering where the matches are.\n\nThis is a good project for beginners as it is fairly simple, not requiring moving objects or physics simulations, while also being very extensible. Ambitious students can add many features such as scoring, animations, automatic card flipping, or more combinations of shapes and colour combinations for the cards.\n\nTo set this project as a homework assignment, you should give the student enough code to get started that they can immediately interact with the program and see how the basics of PyGame works, but not so much starter code that they are overwhelmed and confused by how it works. Giving them around 50 lines of code to start is usually a good ballpark for something that is useful but can also be understood easily.\n\nWe've created an example starter Repl that you can fork (and adapt if necessary before giving to your students) [here](https://replit.com/@ritza/memory-game-starter-project). It demonstrates how to lay out the cards using random colours, and how to detect which card a user clicked on.\n\n![](https://docimg.replit.com/images/teamsForEducation/enrichment/memory-starter.png)","metadata":{"id":435}}],["436",{"pageContent":"![](https://docimg.replit.com/images/teamsForEducation/enrichment/memory-starter.png)\n\n## Example instructions for a student\n\nHere's an example of how you could introduce your students to this project. These instructions are also in the [accompanying repl](https://replit.com/@ritza/memory-game-starter-project#instructions.md) in Markdown format so you can easily edit them as required and the student can easily read the formatted version.\n\n<hr/>\n\n### Enrichment assignment: PyGame\n\nThis week your enrichment task is to build a memory game in Python using PyGame.\n\n#### Game background\n\nYour game consists of a set of cards which have different colours on the front but have the same backs. The player has to find matching pairs of cards by turning them over.\n\nYou start with 16 cards of 8 colors: 2 cards of each color.\n\nStart the game by laying out the 16 cards in a 4x4 grid, all front side down.\n\nEach turn, the player may turn over two cards. If the cards match (have the same color on the front), then the cards should be removed from the game. If not, the cards should be turned upside down again and the player can try again.\n\n#### Starter code\n\nThe code in [`main.py`](https://replit.com/@ritza/memory-game-starter-project#main.py) includes a basic PyGame example which lays out the cards face up. When the player clicks on the cards, they are turned face down.\n\n#### Instructions\n\nThe starter code shows you how to set up a basic GUI using PyGame and draw objects. It also hints at how you can interact with the user: it shows how you find out where the user clicked and modify the screen accordingly. However, it is missing most of the features of the game, which you still need to build.\n\nSpecifically you need to:\n\n- Start the game by laying the cards face down instead of face up.\n- Keep track of which cards are which colour.\n- Track how many cards the player has turned over (don't allow the player to turn over more than 2 cards at once).\n- Implement logic to check if the player has chosen matching cards.","metadata":{"id":436}}],["437",{"pageContent":"- Track how many cards the player has turned over (don't allow the player to turn over more than 2 cards at once).\n- Implement logic to check if the player has chosen matching cards.\n- Implement logic to remove these cards from the game (to simulate removal you can simply change the card color to white which is not used for the front or backs of the cards).\n\n### Optional extra features\n\nFeel free to implement any extra features that you think would be fun! Some ideas are:\n\n- Automatically turn the cards back upside down after a given time period instead of making the player manually return the cards upside down\n- Turn it into a multi player game and keep track of the score for each player (each match the player gets to 'keep' the removed cards and they are added to that player's score)\n- Make the board size dyanmic: allow the player to choose to play on a bigger board (you'll need to add more colours for this or allow for multiple possible matches of each colour)\n- Add gaps between the cards to make it easier to differentiate them when two cards of the same colour are next to each other.\n\nGood luck!\n\n<hr />\n\n## What to look for in a solution\n\nApart from checking that the basic and optional features that your students have implemented work as expected, there are some othe things you can look out for to assign a grade and give feedback to your students.\n\n### Plagiarism\n\nIt is likely that your students will be able to find similar projects online, so as always plagiarism is likely to be a problem. A good example of this game with all of the features implemented is at [InventWithPython's memory game](https://inventwithpython.com/pygame/chapter3.html) which you can run on Replit from [this repl](https://replit.com/@ritza/memorypuzzle-iwp).\n\n![](https://docimg.replit.com/images/teamsForEducation/enrichment/iwp-advancedsolution.png)","metadata":{"id":437}}],["438",{"pageContent":"![](https://docimg.replit.com/images/teamsForEducation/enrichment/iwp-advancedsolution.png)\n\nIt should be easy to spot if your students borrowed too heavily from that example without understanding what they were doing, as it is significantly different from the starter code provided here. If you are concerned about plagiarism, copying a few 10-40 character snippets of your students' code into Google in double quotation marks usually brings up their source fairly quickly.\n\nFor example, the Google search shown below shows many sources that use exactly the same code:\n\n![](https://docimg.replit.com/images/teamsForEducation/enrichment/plagiarism.png)\n\n### Reusable code\n\nGames like this one are a great example to introduce your students to the idea of DRY (don't repeat yourself) in software engineering. Because the entire screen has to be completely redrawn even when only one card is changed, it's likely that your students will be tempted to copy-paste the same code into different places (for example, to set up the board, and to update it after a click).\n\nIf your students have already learned to use small functions or Object Oriented Programming, make sure that they are following these good practices. Especially with a solution that relies on classes like `Board`, `Card`, `Player`, `Game`, etc, it can be quite tricky to decide what functionality belongs where. Should `Card` objects keep track of their own coordinates or is that the job of the `Board`?\n\nWhile there are many different ways to implement this solution, and in the end the 'best' solution might come down to personal taste, try to check that your students have thought about these issues (and hopefully left comments explaining their choices).\n\n### User Experience","metadata":{"id":438}}],["439",{"pageContent":"### User Experience\n\nGames are also a good way to introduce concepts from User Experience (UX) to your students. Did they provide instructions to the player on how to use the game, either in comments or in the game interface itself? Does the game start up and exit cleanly? Is it easy to configure any options that they exposed like number of cards?\n\n## Finishing off\n\nWe went through an enrichment example using PyGame in this guide. PyGame is a great library for beginners as it gives them enough features to easily build advanced features (e.g. an easy way to draw a UI and track user events), but it is still low level enough for the student to have to understand fundamental concepts like the game loop and drawing objects based on pixel coordinates.\n\nFor more PyGame inspiration, take a look at our basic [Juggling Game](/tutorials/python/building-a-game-with-pygame) which includes an example of how to animate objects too.\n\nAs we mentioned, data science and web application development are also good topics to set for enrichment homework. Take a look at our collection of [Python projects for beginners](https://www.codewithrepl.it/python-projects-for-beginners.html) for more ideas.","metadata":{"id":439}}],["440",{"pageContent":"---\nsidebar_position: 16\n---\n\n# Example homework assignments\n\nIf you need some inspiration to set homework assignments or enrichment projects for your students, we've put together some guides and full projects that you can use.\n\n## Guides and Tutorials\n\nThese are higher level guides and walkthrough tutorials that you can use as-is or adapt to your own needs.\n\n### [Create a Pinboard Project](/tutorials/html-css-js/pinboard-project-part-1)\n\nThis is a full tutorial on how to build a pinboard project with Replit. It focuses on front-end coding and uses examples targetted to be more inclusive towards girls when compared to traditional beginner coding project examples, which tend to skew towards appealing more to boys. This is a two part tutorial where [Part 1](../tutorials/html-css-js/pinboard-project-part-1) covers HTML and CSS then [Part 2](../tutorials/html-css-js/pinboard-project-part-2) introduces JavaScript.\n\n### [How to create a good enrichment coding assignment using Replit](/teams-edu/EnrichmentHomework)\n\nThis is a higher-level guide on how to set a good enrichment assignment, using a PyGame project as an example. It contains starter code, example instructions, and some guidelines on what to look for in the solution.\n\n### [Teach your kid to code](/teams-edu/TeachYourKid)\n\nThis guide shows you how to get started with teaching your kid to code, showing examples of our different GUI libraries, including Pygame, Python Play, Turtle, and Basic.\n\n## Example Repls\n\nThese are some examples that you can fork directly. They contain example starter code, model answers, and example instructions for your students.\n\n### [Harry Potter game with PyGame](https://replit.com/@ritza/PotterGame)\n\nA basic game where the player can use their keyboard to move Harry and catch the snitch.\n\n### [Harry Potter game with Python Play](https://replit.com/@ritza/PlayPotterGame)\n\nThis is a clone of the above but written in Python Play, our simple GUI library built on top of PyGame.","metadata":{"id":440}}],["441",{"pageContent":"### [Harry Potter game with Python Play](https://replit.com/@ritza/PlayPotterGame)\n\nThis is a clone of the above but written in Python Play, our simple GUI library built on top of PyGame.\n\n### [Python Shopping List](https://replit.com/@ritza/ShoppingList)\n\nA command-line app which demonstrates Python classes, input, output, and string manipulation.","metadata":{"id":441}}],["442",{"pageContent":"---\nsidebar_position: 24\n---\n\n# Exporting student submissions\n\nStudents may export their project submissions into their personal Replit accounts to maintain access when they are removed from a Team or a Team is archived.\n\nTo export their projects from a team, students can go to `https://replit.com/teams/TEAM-USERNAME/export`.\n\nFor example, if the team username is @teamsEduDemo, then the link would direct students to log into their accounts, then go to: `https://replit.com/teams/teamsEduDemo/export`\n\n![Where to find your team username](https://docimg.replit.com/images/teamsForEducation/team-username.png)","metadata":{"id":442}}],["443",{"pageContent":"---\nsidebar_position: 2\n---\n\nimport Loom from '../../src/components/Loom'\n\n# FAQ\n\n#### How do I get started with Teams for Education?\n\n[Here](https://www.youtube.com/watch?v=NJjDFJbUzdM) is an introduction tutorial on Teams for Education.\n\n#### How do I manage team members in a team?\n\nYou can [invite teachers and students](/teams-edu/inviting-teachers-students) to a team. Additionally, you can [change user roles](/teams-edu/assigning-user-roles) for teachers in order for them to have admin access to the subscription to create their own teams, create projects, etc.\n\n#### How do I create a team project?\n\n[Team Projects](/teams-edu/creating-projects-assignments) are projects and assignments that teachers can set up with starter code, instructions, and materials for their students. When starting a Team Project, students duplicate their own, private versions of the Team Projects to edit and customize freely.\n\n#### How do I auto-grade projects?\n\nOne option is [input/output testing](/teams-edu/input-output-testing) which allows a teacher to create simple tests that automatically match input values to expected output in student projects. Teachers can also create [unit tests](/teams-edu/unit-testing) which allows a Repl author to create code-driven tests that compare actual function output with expected output.\n\n#### How do I know if Replit is compliant with my school's compliancy standards?\n\nReplit Teams for Education is COPPA, FERPA, and CIPA compliant. You can learn more about privacy in our [privacy FAQs.](/teams-edu/privacy-faq)\n\n#### I am having trouble with portions of Replit being blocked by my school's servers. What do I do?\n\nShare our [IT Administrators Tooolkit](/teams-edu/it-administrators-toolkit) with your IT department to ensure Replit runs smoothly for your team.\n\n_Addtionally, if your school previously blocked `repl.co` to filter all internet content, you can now unblock it and use [Firewalled Replit](/getting-started/firewalled-replit) for that instead._","metadata":{"id":443}}],["444",{"pageContent":"_Addtionally, if your school previously blocked `repl.co` to filter all internet content, you can now unblock it and use [Firewalled Replit](/getting-started/firewalled-replit) for that instead._\n\n#### How do I reset a student's password if their account is a privacy account?\n\nIf a student lost or forgot their password, go to their team, open the \"Manage team members\" window, then find the students account name and click the lock icon to the right of their name.\n\n![Student PW Reset](https://docimg.replit.com/images/teamsForEducation/FAQ/%20PW%20EDU.png)\n\n#### How do I move Repls from the My Repls page to a Team Project?\n\nForking Repls from the My Repls page is recomended because the Repls on the My Repls page are public, even if you are a teacher, only the Project Repls in a Team are private.\n\nThe best practice is to start projects in a Team where they will be private until you publish them. This will prevent students from seeing answers to future Projects.\n\nTo fork, or transfer, the Repls in My Repls, use the [CLUI](/getting-started/clui-graphical-cli) tool fork-repl-to-project. See the CLUI link, or view this video here:\n\n<Loom id=\"121b4e99405b49e3bdeb312703186064\"/>\n\n## Toggling Code Completion\n\nTo deactivate Replit AI's Code Completion feature, go to bottom of your editor, click AI and uncheck the Enable button. This can also be deactivated within the Settings pane under \"AI code completion\". \n\n![toggle code completion](https://docimg.replit.com/images/replitai/Toggling-Code-Completion.png)","metadata":{"id":444}}],["445",{"pageContent":"---\nsidebar_position: 22\n---\n\n# Google Classrooms Integration\n\nWith Replit's Google Classroom integration, teachers can quickly add every student in their Google Classroom to a Team and easily share Replit projects as Google Classroom assignments.\n\nStudents and teachers can easily build and collaborate on [Replit](https://replit.com/) from a Chromebook, [download it from the Google Play Store](https://play.google.com/store/apps/details?id=com.replit.twa) to their device, or find it on the [Chromebook App Hub](https://chromebookapphub.withgoogle.com/apps/replit-teams-for-education).\n\n_Soon, teachers who have added their students to Replit through Google Classroom will also be able to integrate their Google Classrooms gradebooks with Replit's [Projects Overview](/teams-edu/reviewing-submissions)!_\n\nView a demo of these functionalities [here](https://www.loom.com/share/e2bb4abf6ad84fa28e19859d1089354f).\n\n## Adding Students to a Team from Google Classrooms\n\nTo add your students from Google Classrooms into a Replit Team for Education, click \"Manage team members\" at the top of your Team, and select \"Invite Via Google Classroom\".\n\nThis will prompt you to connect your Replit Team for Education with your Google Classroom, and select students from your Google Classroom to add to your Teams roster.\n\n![Inviting students to Replit via Google Classroom](https://docimg.replit.com/images/teamsForEducation/invite_via_gc.png)\n\n## Creating Assignments in Google Classrooms from Replit\n\nTo create an assignment in Google Classroom directly from your Teams for Education dashboard, click on the dropdown menu next to a Team Project, and select \"Share to Google Classroom\". This will automatically create an assignment in your Google Classroom with a link to your Replit Project.\n\n![Inviting students to Replit via Google Classroom](https://docimg.replit.com/images/teamsForEducation/create_assignment_gc.png)","metadata":{"id":445}}],["446",{"pageContent":"---\nsidebar_position: 12\ntitle: Individual & group projects\n---\n\n# Individual, Group, and Self-Grouping Projects\n\n_View a video explainer on Group Assignments [here](https://www.youtube.com/watch?v=RwbgtaDu6EY)._\n\n**For individual projects**, students are able to fork the project and create their own copy. Their copy will be private so that only the student and team admins can see and edit their work.\n\n**For group projects**, you can assign students into submission groups to collaborate. Click \"Auto Assign\" to automatically assign all students into equal groups or assign each group manually. You can add and remove new groups, drag and drop students between groups, and search for students. Groups cannot be removed after saving, but students may be reassigned into different groups later.\n![Auto assign groups](https://docimg.replit.com/images/teamsForEducation/groups/auto_assign.png)\n\n**Self-Grouping Projects** allow students to create and join their own groups.\n\nHere's what your students will see when a project allows for self-grouping:\n![Student View: Select Group](https://docimg.replit.com/images/teamsForEducation/groups/group_project_student_view.png)\nIf no groups are created, they'll have the option to create their own:\n![Student View: Create Group](https://docimg.replit.com/images/teamsForEducation/groups/student_create_group.png)\nIf groups have already been created, they may either join one or create their own:\n![Student View: Join Group](https://docimg.replit.com/images/teamsForEducation/groups/student_selectcreate_group.png)\n\nClick \"Save\" to finalize any changes, or \"Cancel\" to discard changes.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RwbgtaDu6EY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":446}}],["447",{"pageContent":"---\nsidebar_position: 19\n---\n\n# Input/output testing\n\nRepl input/output testing allows a teacher to create simple tests that automatically match input values to expected output in student projects. Students can also easily test their code before submitting projects, which improves persistence. You can even use regular expressions (regex) for complex, flexible pattern matching.\n\nThere is also a video explanation available [here](https://www.youtube.com/watch?v=MfgeyUf2s6o).\n\n## Teams for Education\n\nInput/output testing is a feature of [Teams for Education](https://teamsforeducationresources.util.repl.co). If you don't have a team yet you can create one [here](https://replit.com/teams).\n\n## Creating a Project\n\nIf you are new to projects, you can find more info on creating a project [here](/teams-edu/creating-projects-assignments).\n\n## Input/Output Tests\n\nOnce your project is created, you'll find the \"Input/Output Tests\" window by clicking the Debugger Icon in the left side bar.\n\n![Image showing in/out tests location](https://docimg.replit.com/images/teamsForEducation/input-output-tests/in-out-testing-location.png)\n\n## Creating a Project with Input/Output Tests\n\nIdeally, after creating your project, you should:\n\n1. Add instructions for the student.\n2. Write some skeleton code for the student.\n3. Configure the Input/Output tests (we will explain how shortly).\n4. Publish the project for students to start.\n\nLet's look at the different testing options, each following the above sequence.\n\n## Match Tests\n\nA match test is passed if the expected output is in (or equal to) the actual output. In other words, the actual output does not have to be identical to the expected output, it must just include it. The JavaScript equivalent is `actualOutput.includes(expectedOutput)`.\n\nLet's say we have a test on string formatting in Python.\n\nWe have created a README.md file with the student's instructions.\n\n![Image showing match README.md](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-readme.png)","metadata":{"id":447}}],["448",{"pageContent":"We have created a README.md file with the student's instructions.\n\n![Image showing match README.md](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-readme.png)\n\nWe have created some skeleton code for the student to start from.\n\n![Image showing match main.py](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-skeleton-code.png)\n\nNow we can create the test.\n\nOpen the \"Input/Output Tests\" pane from the left sidebar and click on \"+ Create test\".\n\n![Image showing Create test button](https://docimg.replit.com/images/teamsForEducation/input-output-tests/create-test.png)\n\nA modal window will pop up where you can configure the input and output of the test.\n\n![Image showing match test config](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-config.png)\n\nAbove, we create the test with the following steps:\n\n1. Give the test a name.\n2. Leave the input blank as it's not needed for this test.\n3. Specify \"John Smith\" for the output.\n4. Select \"match\" for the test type.\n\nWe are selecting \"match\" for this test because we don't want an exact match. Students can write their own welcome message, however, the full name \"John Smith\" must be part of the output string.\n\nOnce the test is created, it'll be listed under \"Input/Output Tests\" and you can delete or modify it from there. To edit the test, click on the pencil icon next to the test name.\n\n![Image showing match test created](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-test-created.png)\n\nWe now have a complete project for students to work on. Let's publish the project and look at the testing from the student's perspective.\n\n![Image showing the publishing button](https://docimg.replit.com/images/teamsForEducation/input-output-tests/publish-unpublished.gif)","metadata":{"id":448}}],["449",{"pageContent":"![Image showing the publishing button](https://docimg.replit.com/images/teamsForEducation/input-output-tests/publish-unpublished.gif)\n\nOnce published, the students will get a notification that a new project has been published. Clicking on the notification opens the team's projects page where they can find the new project. They will click on \"Start project\" to open it.\n\n![Student Notification](https://docimg.replit.com/images/teamsForEducation/input-output-tests/student-notification.png)\n\nThe student will be greeted with the project instructions `README.md file` added earlier.\n\nThe `main.py` file has the skeleton code we added, and they can start working from there.\n\nLet's open the input/output tests and run the String-Formatting test as a student. It will fail now, because we haven't added any code.\n\n![Image showing student running the test- fail](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-test-failing.png)\n\nThe student can check the results to see what the expected output should be.\n\n![Image showing failed results match](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-test-fail-results.png)\n\nLet's add some code to make the test pass. We'll change the code to print the full name and then run the test again.\n\n![Image showing string-code](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-test-passed.png)\n\nChecking the \"passed\" results now, you'll see that the expected output only has the full name \"John Smith\", whereas the actual output has a string with some other words in it. With match tests, this will pass because the expected output is present within the actual output. If the name was incorrectly printed ie. \"Smith John\", then this test would fail. If you want an exact match, you can use \"exact\" for the input/output test type.\n\n![Image showing the passed results](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-passed-results.png)\n\n## Exact Tests","metadata":{"id":449}}],["450",{"pageContent":"![Image showing the passed results](https://docimg.replit.com/images/teamsForEducation/input-output-tests/match-passed-results.png)\n\n## Exact Tests\n\nExact tests pass only if the expected output is equal to the actual output (although we allow a trailing newline). The equivalent to this in JavaScript is `expectedOutput === actualOutput || expectedOutput + '\\n' === actualOutput`.\n\nCreating an exact test is similar to the match test created above.\n\nAs an example, we'll create an assignment where students have to write the formula to calculate the area of a circle using the `math` module. To test that the student uses `math.pi` instead of some variable like `pi=3.14`, we will use the exact input/output test.\n\nWe have already created the skeleton code and README.md file, so now we'll create the test.\n\n![Image showing the exact test config](https://docimg.replit.com/images/teamsForEducation/input-output-tests/exact-test-config.png)\n\nAbove, we create an exact test that will check for exactly the areas specified within the expected output. Follow the below steps to create an exact test.\n\n1. Open the \"Input/Output Tests\" pane.\n2. Click on \"+ Create test\".\n3. Name the test.\n4. Add the exact expected output.\n5. Choose \"exact\" as the test type and click the save button.\n\nYou can now publish the project. Students will get a notification that the project is published.\n\nFrom the students' perspective, they'll have the skeleton code, and the README.md file with instructions to complete the project.\n\nIf they run the test, it will fail because we haven't added any code to the skeleton yet. Students can check the expected output by checking the test results.\n\nThe student can then add their code to the main.py file with the skeleton code and run the test again to see if they passed.\n\nBelow we have code that uses the incorrect representation of `pi` and because we are using exact tests, the test is failing.","metadata":{"id":450}}],["451",{"pageContent":"Below we have code that uses the incorrect representation of `pi` and because we are using exact tests, the test is failing.\n\n![Image showing incorrect pi test fail](https://docimg.replit.com/images/teamsForEducation/input-output-tests/exact-failed-pi-results.png)\n\nThen, when we import the math module and use `math.pi`, we get the correct answer that matches exactly with the expected output, so our test passes, and it is safe for the student to submit their code.\n\n![Image showing exact test passing ](https://docimg.replit.com/images/teamsForEducation/input-output-tests/exact-test-pass.png)\n\nWhen a student submits a project without running the tests first, they will get a notification asking them to run tests first or submit anyway. This is a reminder for students to test their work before submitting as it will give them a good indication whether the work they did is correct.\n\n![Image showing submit without running test](https://docimg.replit.com/images/teamsForEducation/input-output-tests/submit-without-testing.png)\n\nWhen a student tries to submit a project while tests are failing, they will also get a notification making them aware of the fact, with an option to \"View tests\" or \"Submit anyway\".\n\n![Image showing submission with failing tests](https://docimg.replit.com/images/teamsForEducation/input-output-tests/submit-with-failing-tests.png)\n\n## Regex Tests\n\nFor more flexibility in defining the expected output, you can use regular expressions or \"regex\". The regex test is the third type of input/output test.\n\nThe test passes if the test matches the expected output compiled as a regex. This is equivalent to `actualOutput.match(expectedOutput)`.\n\nAs an example, we have a project where the student has to write code that will compile email addresses from the given variables.\n\nFor the test, we'll set up a regex test to check that the student's email address matches the required email format.","metadata":{"id":451}}],["452",{"pageContent":"For the test, we'll set up a regex test to check that the student's email address matches the required email format.\n\n![Image showing regex test config](https://docimg.replit.com/images/teamsForEducation/input-output-tests/regex-test-config.png)\n\nTo create the test seen above:\n\n1. Open the \"Input/Output Tests\" pane.\n2. Create a new test.\n3. Give the test a name.\n4. Add the regex expression to the \"Expected output\".\n5. Choose \"regex\" as the test type and click save.\n\nWhen we add the code to compile the email address and run the test, we get the following results.\n\n![Image showing regex passed results](https://docimg.replit.com/images/teamsForEducation/input-output-tests/regex-pass-results.png)\n\nIf you don't want to be lenient of an extra newline and prefer to have a truly exact match with the expected output and actual output, you can use the `regex` with a `^` at the start and `$` at the end. Keep in mind though, that you'll have to escape the other regex characters.\n\nTest cases can be added, edited, and deleted at any time – even after the project has been published. This added flexibility allows you to get started with testing right away.\n\n### While I/O tests work with most languages on Replit, there are just a few exceptions:\n\n- APL\n- Basic\n- Bloop\n- BrainF\n- Coffeescript\n- Emoticon\n- Forth\n- HTML, CSS, JS\n- Kaboom\n- Lolcode\n- Python with turtle\n- Qbasic\n- Roy\n- Scheme\n- Unlambda\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MfgeyUf2s6o\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":452}}],["453",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Introduction to Teams for Education\n\n[Teams for Education](https://replit.com/teams-for-education) adds key workflows for students and teachers on top of all the core Replit features. In this article, you'll:\n\n- Learn how to sign up for a team\n- Set up your Team\n- Get started with extra curriculum and teacher resources.\n\n## More About Teams\n\nA team is a collaborative workspace for teachers and students. The platform is based around projects, which give students real-world experience. Each project can have multiple versions (often, one for each student or group), so students can all start from the same point, but extend the base project in different ways.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NJjDFJbUzdM\" title=\"Intro to Teams for Education\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## How to Sign Up\n\nIf you don't already have an account, sign up at [Replit](https://replit.com). Now click on [Teams](https://replit.com/teams) in the sidebar on the left and choose \"new education organization.\" Give your organiation a name and specifiy if you are a higher education institution or K-12 (secondary school) institution. Choose \"create new team organization.\"\n\n![](https://docimg.replit.com/images/teamsForEducation/intro/neweduorg.png)\n\nNow click on \"Create team\" and choose a team display name and team username. _The team username cannot be changed._\n\nSelect the checkbox \"Click here if any of your students are under thirteen years of age\" if applicable. _This will ensure that a private invitation link is used in the following Manage Team step, and is required for your team to be FERPA/COPPA compliant._\n\n![](https://docimg.replit.com/images/teamsForEducation/intro/teamname-new.png)\n\n_Note: You can change this setting any time by going to https://replit.com/~/cli/teams and running the `update-invite` command as shown here:_","metadata":{"id":453}}],["454",{"pageContent":"_Note: You can change this setting any time by going to https://replit.com/~/cli/teams and running the `update-invite` command as shown here:_\n![](https://docimg.replit.com/images/teamsForEducation/intro/clui-update-invite.png)\n![](https://docimg.replit.com/images/teamsForEducation/intro/how-to-update-invite.png)\n\n### Inviting Teammates\n\nNow, [invite some users](/teams-edu/inviting-teachers-students) and start [building out your classroom materials](creating-projects-assignments)!\n_Users who are added to a team and assigned the `Admin` role will be able to create their own teams within an organization._\n\n### Creating Teams\n\nIf you'd like to create a new team in your organization, simply go to your [Teams Dashboard](https://replit.com/teams) and click \"Add Team\".\n![Adding a team to an organization](https://docimg.replit.com/images/teamsForEducation/add_team.gif)\n\n**Need more help getting set up? Use our [Checklist](teams-edu-checklist)!**\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hAWhare6sFE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":454}}],["455",{"pageContent":"---\nsidebar_position: 4\n---\n\n# Inviting teachers and students\n\nTo invite people with their Replit username or email address, follow the steps during [team creation](/teams-edu/intro-teams-education).\n\n## Invite Org Owners and Admins (Teachers)\n\n**Org Owners** can add and remove Org Admins, delete and rename an org, and create and access all teams as an admin.\n\n**Org Admins** can create new teams within an organization.\n\n- To add a new Org Admin or Owner, find your Organization and click on the settings gear.\n- Click \"Add Org Admin or Owner\"\n- Invite an Org Admin or Owner using their username or email. They'll receive a notification to join your team with their new role!\n  ![Adding Team Admins](https://docimg.replit.com/images/teamsForEducation/inviting-users/add_org_admin.gif)\n\n- Once they've accepted the invitation, you can go back to edit their role or remove them.\n  ![Editing org admins](https://docimg.replit.com/images/teamsForEducation/inviting-users/edit_org_admin.gif)\n\n---\n\n## Invite Team Admins\n\n**Team Admins** can view and edit Team Projects, Project Solutions, and student submissions.\n\n- To add someone as a Team Admin, first add them to your team as you would a student.\n- Once they've accepted the invite, go to the \"Manage Team Members\" modal and change their role to \"Admin\"\n  ![Changing a user role to team admin](https://docimg.replit.com/images/teamsForEducation/inviting-users/add_team_admin.gif)\n\n---\n\n## Invite Team Members (Students)\n\nIf you've already created a team, navigate to your [team dashboard](https://replit.com/teams), click on your chosen team username, and then click \"Manage team members\".\n\n![](https://docimg.replit.com/images/teamsForEducation/manageTeamMembers.png)\n\n### You may add team members by:\n\n1. Entering the email or username of an existing user.\n2. Inviting via link (link does not expire).\n3. Uploading a CSV of emails or usernames.\n\n## Invite Students in Privacy Mode","metadata":{"id":455}}],["456",{"pageContent":"1. Entering the email or username of an existing user.\n2. Inviting via link (link does not expire).\n3. Uploading a CSV of emails or usernames.\n\n## Invite Students in Privacy Mode\n\nIf the checkbox \"Click here if any of your students are under thirteen years of age\" was selected during team creation, the ability to enter email addresses or upload a CSV will be disabled, to ensure that the team remains FERPA/COPPA compliant.\n\nIn this case, you can anonymously invite your students to Replit and to your education team by sharing the team invite link that is shown at the bottom of the \"Manage your team's members\" screen.\n\n![](https://docimg.replit.com/images/teamsForEducation/privacy-invite-new.png)\n\nYou can share this link with your students. When signing up from this link, they will not be required to enter an email address. Once they have signed up, they will automatically be added to your team.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/y4a0kN3TS2I\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":456}}],["457",{"pageContent":"---\nsidebar_position: 27\n---\n\n# IT Administrator's Toolkit\n\nIf you are new to Teams for Education, this page will help ensure Replit runs smoothly for you and your team. You may want to send this page to your technology team or IT department.\n\nRead more about [our commitment to user safety](https://docimg.replit.com/images/teamsForEducation/Our%20Commitment%20to%20User%20Safety.pdf).\n\n## Recommended option: full Replit experience\n\nTo make sure Replit works for you and your students on your school network, you need to ensure the following domains are whitelisted/unblocked:\n\n- `*.replit.com` (primary domain)\n- `*.repl.co` (where web applications built on Replit are hosted)\n- `*.repl.it` (old domain, not actively used)\n- `*.replitusercontent.com` (old domain, not actively used)\n- `*.cdn.replit.com`\n\nClients must be able to access all subdomains of the above domains. The specific hosts that clients communicate with under the above names are subject to change without notice.\n\nWe block objectionable and NSFW content by default. You can read more about this [on our blog](https://blog.replit.com/family-friendly-dns).\n\n## Alternative 1: lite filtering mode\n\nTo block access to webpages through Replit, you may block `repl.co` **only**, but this will impact students' ability to run and preview HTML projects. In most cases, alternative 2 below is a better option for schools, because HTML projects are supported, while being firewalled from the larger Internet.\n\n## Alternative 2: firewalled mode","metadata":{"id":457}}],["458",{"pageContent":"## Alternative 2: firewalled mode\n\nFor schools who find that their students are still accessing third-party proxy websites or other undesirable content using Replit, and desire a simple solution to prevent this, we offer an alternative domain, `firewalledreplit.com`. When Replit is accessed using this domain, a firewall is used to prevent repls from accessing the Internet, and Replit’s community features are hidden. More information about this alternative option is given in [this blog post](https://blog.replit.com/computing-superpower-at-school) and [this FAQ](/firewalled-replit/firewalled-replit-faq).\n\nTo use this alternative option, please ensure that the following domains are whitelisted/unblocked:\n\n- `*.firewalledreplit.com`\n- `*.firewalledreplit.co`\n- `*.cdn.replit.com`\n\nClients must be able to access all subdomains of the above domains. The specific hosts that clients communicate with under the above names are subject to change without notice.\n\nIf it is also desired to limit students from logging in and using replit from our main domain, then you may block each of the domains listed in the “Recommended option” section above.\n\n## Protocols\n\nThe Replit application is delivered over the following protocols:\n\n- HTTPS (for all web pages)\n- WebSocket over HTTPS\n- VNC (for running graphical applications in a browser)\n\n## Data Retention and Usage\n\nPlease refer to our [Privacy FAQs](/teams-edu/privacy-faq) and [US Student Data Protection Addendum](/teams-edu/us-student-dpa) for more details.","metadata":{"id":458}}],["459",{"pageContent":"# Keeping notes in repls\n\nTo help you communicate with students and team members about what is required from them, you can add documents and notes to your repl. Use the below options for instructions, helpful tips, suggestions, or even just some encouragement!\n\n## Leaving Instructions\n\nYou can add any supplementary material or arbitrary files to your repl, which means you can add PDFs, images, or plain text notes. However, to leave instructions for your students, we recommend that you start with a README.md file. This is the standard documentation and entry-point file for code repositories and when Replit sees that file, it will display it first. Here is an [example repl with a README](https://replit.com/@amasad/python-with-readme).\n\n## Classroom Lessons\n\nA handy way to create classroom lessons is by creating a private repl on your team, which can only be accessed by those on the team. You can also create folders and store the associated lessons in each. The repls that are created can have notes from the class in markdown files or in commented out code. Remember that you can also upload images, videos, etc. into a repl, so your options for communicating are basically limitless!","metadata":{"id":459}}],["460",{"pageContent":"---\nsidebar_position: 11\n---\n\n# How to Create a Lesson with Replit\n\n_You can find some more information about lesson authoring [here](/teams-edu/lesson-authoring)._\n\nTeams for Education is a collaborative platform where teachers can create assignments for their students.\n\nIn this tutorial, we're going to cover how to create a lesson.\n\n## Steps to follow:\n\nWe'll cover how to:\n\n- Create a new lesson\n- Add lesson contents\n- Perform input output testing\n- Publish project\n\n### Step 1 - Creating a new lesson\n\nTo create a new lesson with Replit, you need to make sure that you're the admin in your team.\n\nIf you navigate to your Teams page, you should see the following below the team's name:\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Create_project_button.png)\n\nGo ahead and click on the 'Create Project' button.\n\nYou'll be prompted to select the template language you'll be working with and the name of your project. You can descibe the type of project you have created and this project can be an assignment students have to submit or a lesson with notes or both. If it's an assignment that you want the students to submit, you can specify a due date for submission. You can also specify which unit the project covers.\n\nClick the 'Create' button at the bottom.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Create_project.png)\n\n### Step 2 - Add lesson contents\n\nOnce you've created your project you'll be taken to a new window where you can add content for your lesson.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Add%20_lesson_contents.png)\n\nIn the Files tab, the `main.py` file is where students can write submissions or complete different tasks. Any other files added in this section will be visible to the students so you can also place additional notes in this section.","metadata":{"id":460}}],["461",{"pageContent":"The section labelled 'Lesson' will consist of all files accesible by the teachers or team admins. The files `instructions.md` and `lessonplan.md` are created by default.`instructions.md` will be available to the students in a read only format while `lessonplan.md` is admin-only.\n\nReplit will also generate an `assets` folder where you can put resources such as images to use in markdown files.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Teacher_view.png)\n\n### Step 3 - Input Output Testing\n\nOnce you've created your project, you can also add Input/Output testing to allow students to test their code against the expected output.\n\nYou'll find the \"Input/Output Tests\" window by clicking the tick in the left side bar as shown below:\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Create_tests_tick.png)\n\nNext, you can create a test by clicking on 'Create test' and adding the test name and expected input and output.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Create_test_button.png)\n\nYou can define the expected output by indicating whether it should be a \"match\", \"exact\", \"regex\" or \"compatibility\" test. You can find out more [here](/teams-edu/input-output-testing).\n\nIn most cases, a match test is sufficient. A match test is passed if the expected output is in (or equal to) the actual output. In other words, the actual output does not have to be identical to the expected output, it must just include it.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Create_test.png)\n\n### Step 4 - Publish project\n\nYou can publish the project to make it available to students by clicking on the 'Publish' button on the top right section of the window. On the next popup, make sure the slider is moved to the right and turned blue to ensure it's visibility to the students and then click save.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Publish_project.png)","metadata":{"id":461}}],["462",{"pageContent":"![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Publish_project.png)\n\nTo preview the lesson from a student's point of view, as an admin you can add a new non-admin member to your team for testing purposes.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Manage%20team%20members.png)\n\nYou can log in as the member in a different browser to keep the ‘teacher’ (admin) and ‘student’ (non-admin) separate and logged in at the same time.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Student_view.png)\n\nThe student can run tests to check their work before submitting. They can do this by clicking on 'Run tests'.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Run_tests.png)\n\nThe student can then submit their work for review by clicking on the 'Submit' in the top right corner of the window.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FjzF1t6htn4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OEuAMAt9ex4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":462}}],["463",{"pageContent":"---\nsidebar_position: 10\n---\n\n# Lesson Authoring\n\n_You can find a step-by-step guide to creating a new lesson [here](/teams-edu/lesson-authoring-tutorial)._\n\nTeachers may create read-only instructions for their students to follow as well as admin-only lesson plans to keep as notes and share curriculum with their peers using the Curriculum Authoring tool in their Team Project file tree.\n\nTo add Lesson Plan and Instructions files to your project, click on \"Add Lesson Contents\" as shown below:\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Add%20_lesson_contents.png)\n\nThe lesson contents are automatically created as shown below. Instructions and Lesson Plan files are written in markdown. You can find a handy guide to markdown [here](https://www.markdownguide.org/cheat-sheet/)!\n\n![Lesson Contents](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Student_view.png)\n\nTo preview the lesson from a student's point of view, as an admin you can add a new non-admin member to your team for testing purposes. You can log in as the member in a different browser to keep the ‘teacher’ (admin) and ‘student’ (non-admin) separate and logged in at the same time.\n\n![](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Manage%20team%20members.png)\n\n## Lesson Plans\n\nLesson Plans are accessible only to admins in the `lessonplan.md` file. They are meant to provide speaker notes for individual teachers or guidance for teachers who may share curriculum with their peers or in the Curriculum Hub.\n\n_Do not place project solutions in the Lesson Plan._\n\n![Teacher View](https://docimg.replit.com/images/teamsForEducation/curriculum-authoring/Teacher_view.png)\n\n## Assets\n\nThe Assets folder contains images and other files to be used in the Instructions and Lesson Plans.\n\nYou can embed images from your Assets folder into your curriculum files like so: `![Image alt text](assets/imagename.png)`","metadata":{"id":463}}],["464",{"pageContent":"You can embed images from your Assets folder into your curriculum files like so: `![Image alt text](assets/imagename.png)`\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/FjzF1t6htn4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OEuAMAt9ex4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":464}}],["465",{"pageContent":"---\nsidebar_position: 13\n---\n\n# Organizing Projects\n\nOnce Team Projects are created, you may organize them into units.\n\n### Creating Units\n\nBegin by clicking on the **+** icon at the top right of your Team to create a unit.\n![Create a unit](https://docimg.replit.com/images/teamsForEducation/create_unit.gif)\n\n### Organizing Projects Into Units\n\nNext, drag and drop your projects into the correct units in the order you would like them to appear in for your students.\n![Drag and Drop projects](https://docimg.replit.com/images/teamsForEducation/move_projects.gif)\n\n### Editing Units\n\nTo change the name of a unit, click on the three dots to the right of the unit and select \"Edit unit\".\n![Editing Units](https://docimg.replit.com/images/teamsForEducation/organizing-projects/edit-unit.gif)\n\n### Reordering Units\n\nTo reorder units, select the list icon on the top right of your Team. Use the up and down arrows to define the order of your units.\n![Reordering Units](https://docimg.replit.com/images/teamsForEducation/organizing-projects/reorder-units.gif)\n\n### Deleting Units\n\nTo delete a unit, click on the three dots to the right of the unit select \"Delete unit\".\n![Deleting Units](https://docimg.replit.com/images/teamsForEducation/organizing-projects/delete-unit.gif)","metadata":{"id":465}}],["466",{"pageContent":"---\nsidebar_position: 26\n---\n\n# Privacy FAQ\n\nNaturally, we expect the [Teams for Education](https://replit.com/teams-for-education) platform to be used by students of all ages. We are aware that there are implications for having users who are under 18 years old, especially when it comes to privacy. We have put together some handy FAQs to give you peace of mind that your students' personal information remains secure and confidential. But before we get there, our **Key Privacy and Data Security Assurances** might be able to answer your immediate concerns:\n\n- Replit does not sell your data or your students' data.\n- Replit does not show you advertisements for products/services from other companies.\n- Replit is compliant with FERPA, COPPA, GDPR, CCPA, UK Data Protection Act of 2018, and many other privacy regulations.\n- You retain the rights to the work you create on Replit.\n- Replit makes it easy to keep student work private and preserve academic integrity.\n- Replit follows industry standard best practices for privacy and data security.\n- All Replit employees receive privacy/security training and are bound by our privacy/security policies.\n- Replit ensures all contracts with third-parties are compliant with our internal policies.\n- Replit has a designated Data Protection Officer.\n- Replit values transparency and will update you about any changes to our policies.\n- [Firewalled Replit](https://docs.replit.com/getting-started/firewalled-replit) is a special version of our site that blocks adult and inappropriate content.\n\nStill have questions? Read on...\n\n**1. Can Replit be used in schools without disclosing students' personal information?**","metadata":{"id":466}}],["467",{"pageContent":"Still have questions? Read on...\n\n**1. Can Replit be used in schools without disclosing students' personal information?**\n\nYes. Using [Teams for Education](https://replit.com/teams-for-education), teachers can set up their own accounts and email students directly to invite them to use the service. Students can create accounts at no cost to them, and use Teams for Education without providing personal information like names or email addresses. All that is required is a unique username and password, and you are good to go!\n\n_Note: You can code in any of our supported languages without needing to log in or share any information. You just won't get all the great extras available when you sign up. [Try coding in Python](https://replit.com/languages/python3) in a private browser window._\n\n**2. How can I invite students and protect their privacy?**\n\nWith [Teams for Education](https://replit.com/teams-for-education) and [Private Invites](/teams-edu/inviting-teachers-students), you can choose to generate a private invite link, which will protect the privacy of your students (including under 13-year olds). _Please note that students **must** be added using private invites for your team to be FERPA/COPPA compliant._\n\nWhen you share that link (for example by emailing it to your students outside of Replit, or by pasting the link into your LMS or curriculum), we will not ask students to provide names, emails, or other personal information when they sign up. Neither you nor the students will need to provide us with that information. Students will have view-only access to the [Repl Community](https://replit.com/community/all), so they can still see all the great content, guides, and tutorials from the community, but they post or can't be contacted, which protects their privacy.\n\n![private invite](https://docimg.replit.com/images/teamsForEducation/privacy-invite-tooltip.png)\n\n**3. What data does Replit collect about students through Teams for Education?**","metadata":{"id":467}}],["468",{"pageContent":"![private invite](https://docimg.replit.com/images/teamsForEducation/privacy-invite-tooltip.png)\n\n**3. What data does Replit collect about students through Teams for Education?**\n\nWe do not ask students to provide personal information during the sign up process. When students are invited to create an account on Replit, we only ask them to enter a username that does not include their real name. We do not ask them to provide their name, email address, or any other personal information during sign up. Like all online services, we receive Log Information (as defined in our [Privacy Policy](https://replit.com/site/privacy)) when students use the services.\n\nWe do not allow students to post on our public forums. Students can still benefit from the forums, though, because they are not restricted from viewing them.\n\n**4. How does Replit use student data?**\n\nWe only use the student data we collect for the purposes for which it was provided to us – that is, to perform services for the school and otherwise support the internal operations of our service. You can read the [FTC’s COPPA FAQs](https://www.ftc.gov/tips-advice/business-center/guidance/complying-coppa-frequently-asked-questions-0) for more detail on what “support for internal operations” includes.\n\nWe do not disclose student data to third parties other than our own subprocessors. We also implement appropriate technical, physical and administrative security measures to protect students’ information.\n\n**5. Can students under 13 use Replit in compliance with COPPA?**","metadata":{"id":468}}],["469",{"pageContent":"**5. Can students under 13 use Replit in compliance with COPPA?**\n\nYes, with Teams for Education, students under 13 can use Replit in compliance with COPPA. As noted above, we do not ask students (including students under 13) to provide personal information during sign up and we do not allow them to post in our public forums. The only COPPA-covered personal information we collect from students under 13 is Log Information and, as noted above, we only use that information to provide services for the school and otherwise support the internal operations of our service. Because of this, “verifiable parental consent” is not required for students to use our service.\n\nIn addition, and consistent with COPPA, we do not disclose student data to third parties other than our own subprocessors, and we implement appropriate measures to protect students’ information.\n\n**6. Can Replit be used in compliance with FERPA?**\n\nYes, when we contract with schools to use Teams for Education, we do not collect information about students that can be used to identify or contact them, such as a name and email address. We only collect student’s Log Information (as defined in our [privacy policy](https://replit.com/site/privacy)) and use this limited data for the purposes for which it was provided to us; that is, to perform services for the school and support our internal operations. We do not disclose data to third parties other than our own subprocessors.\n\n**7. Is Replit compliant with the GDPR?**","metadata":{"id":469}}],["470",{"pageContent":"**7. Is Replit compliant with the GDPR?**\n\nYes, Replit is compliant with the [EU General Data Protection Regulation](https://gdpr-info.eu/) (GDPR). We are committed to protecting customer data and privacy. We take our obligations regarding data compliance seriously, and approach them transparently. Replit has engaged in a GDPR compliance review to make our practices consistent with the GDPR, in respect to the processing of EU personal data. For example, Replit maintains records of its processing activities, has a legal basis for each processing activity in which it engages, and uses a variety of technical, organizational, and physical measures to safeguard and protect data. We also actively monitor our compliance efforts and seek to continuously improve them.\n\n**8. How does Replit protect personal data provided by its EU customers and users?**\n\nReplit executes a [Data Processing Agreement](https://replit.com/site/dpa) (DPA) with its EU entity customers, which contains all of the requirements of GDPR Article 28 and governs how Replit uses and protects personal data when the platform serves as a data processor to our controller customers. Moreover, with respect to individual end-users of Replit, Replit maintains a consumer-facing [Privacy Policy](https://replit.com/site/privacy) that provides transparent information about our information collection and processing activities consistent with the GDPR. Replit also enters into agreements with its subprocessors, binding them to contractual provisions designed to comply with the GDPR, and keeps an [updated list of its subprocessors](https://replit.com/site/subprocessors).\n\n**9. How does Replit transfer and store personal data from the EU?**","metadata":{"id":470}}],["471",{"pageContent":"**9. How does Replit transfer and store personal data from the EU?**\n\nAs Replit is located in the United States, Replit stores the personal data we receives from EU customers on secure data servers hosted by reputable third parties in the United States. To transfer personal data from the EU to the United States, Replit relies on a variety of transfer mechanisms as applicable to a particular transfer, such as EU Commission approved Standard Contractual Clauses, contractual necessity, and consent.\n\n**10. What other privacy regulations and security frameworks is Replit compliant with?**\n\nThis list is **not exhaustive** and we will continue to update it over time. However, we have reviewed and are compliant with the following privacy regulations:\n\n- [Student Privacy Pledge 2020](https://studentprivacypledge.org/signatories/)\n- [New York Education Law 2-D](https://www.nysenate.gov/legislation/laws/EDN/2-D)\n- [California Consumer Privacy Act (CCPA)](https://www.oag.ca.gov/privacy/ccpa)\n- [UK Data Protection Act of 2018](https://www.gov.uk/data-protection)\n- [NIST Cybersecurity Framework](https://www.nist.gov/cyberframework)\n- [Higher Education Community Vendor Assessment Toolkit (HECVAT) Lite](https://library.educause.edu/resources/2020/4/higher-education-community-vendor-assessment-toolkit)\n- [Connecticut Student Privacy Pledge](https://portal.ct.gov/DAS/CTEdTech/Commission-for-Educational-Technology/Initiatives/Student-Data-Privacy)\n- [Montana Student Privacy Alliance](https://sdpc.a4l.org/view_alliance.php?state=MT)\n- [MA-RI-NH NDPA](https://sdpc.a4l.org/search_company_national.php?company_name=repl.it&state2=)\n\n![](https://docimg.replit.com/images/teamsForEducation/SPP_Logo_Vertical_.png)\n\n![](https://docimg.replit.com/images/teamsForEducation/dpa logo.png)\n\n![](https://docimg.replit.com/images/teamsForEducation/HECVAT logo.png)\n\n![](https://docimg.replit.com/images/teamsForEducation/nist-logo.png)\n\n![](https://docimg.replit.com/images/teamsForEducation/CCPA logo.jpeg)","metadata":{"id":471}}],["472",{"pageContent":"![](https://docimg.replit.com/images/teamsForEducation/nist-logo.png)\n\n![](https://docimg.replit.com/images/teamsForEducation/CCPA logo.jpeg)\n\n![](https://docimg.replit.com/images/teamsForEducation/Montana logo.png)\n\n\n  <div style={{ clear: \"both\" }} />\n\n**11. Will Replit sign our university's, school's or district's Data Security or Privacy Agreement?**\n\nWe are unable to sign individual agreements with specific institutions or districts. However, the privacy regulations and declarations listed above may meet your requirements. If you are a Local Educational Agency in the United States, our [U.S. Student Data Protection Addendum](/teams-edu/us-student-dpa) also applies.\n\n**12. Is all of the above information reflected in the Replit Privacy Policy?**\n\nYes, our [Privacy Policy](https://replit.com/site/privacy) reflects all of this information.\n\n**13. Does Replit block adult content in Teams for Education?**\n\nYes. We offer the use of [Firewalled Replit](/getting-started/firewalled-replit), which prevents students from using proxies to bypass school content filters and access adult content.","metadata":{"id":472}}],["473",{"pageContent":"---\nsidebar_position: 9\n---\n\n# Project Solutions\n\nTeachers may create project solutions to reference and provide students with solution code once they have completed the project or the project due date has passed.\n\n<a href=\"https://www.youtube.com/watch?v=n7fXOkUKvUk\">\n  <p>Project Solutions - Watch Video</p>\n</a>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/n7fXOkUKvUk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n### Creating project solutions\n\nTo create a project solution, click on the three dots to the right of a Team Project and select \"Create Solution\".\n![Create solution](https://docimg.replit.com/images/teamsForEducation/model-solutions/create_solution.gif)\n\nThis will create a duplicate of the Team Project that is hidden from students. Teachers may add solution code to this repl and run it against their [unit and I/O tests](/teams-edu/testing-assessments-autograding).\n\n### Publishing project solutions\n\nTo publish or update the project solution, click the \"Update Solution\" button on the top right of the screen.\n\nSelect the check boxes to indicate when students will be able to view the solution.\n\n![Update solution](https://docimg.replit.com/images/teamsForEducation/model-solutions/update_solution.gif)\n\nProject solutions are hidden from students until:\n\n- student submits the project\n- student passes all tests\n- after the project due date\n\n![project solution reveal settings](https://docimg.replit.com/images/teamsForEducation/model-solutions/update_solution_status.png)\n\n### Updating and Referencing project solutions\n\nTo update or review a project solution, click again on the three dots to the right of the Team Project and select \"Update Solution\".\n\nEdit the project solution code and click \"Update Solution\" and \"Save\" to update the code students will see.\n\n### Student View","metadata":{"id":473}}],["474",{"pageContent":"Edit the project solution code and click \"Update Solution\" and \"Save\" to update the code students will see.\n\n### Student View\n\nIf the submission is published to students, they can fork the model solution to run, modify, and explore the solution provided by the teacher.\n\nNo changes made in their solution fork will ever affect the teacher solution. The solution will remain in a separate repl from the student's project submission.\n\nStudents may [delete their solution and start over](https://www.loom.com/share/513259afbb9d4d11a918ea18c22dffab) should they choose.\n\n![Student view of project solution](https://docimg.replit.com/images/teamsForEducation/model-solutions/solution_student_view.png)","metadata":{"id":474}}],["475",{"pageContent":"---\nsidebar_position: 15\n---\n\n# Duplicating personal repls into Team Projects\n\nTeams for Education admins may duplicate repls from their personal accounts into a Team for Education as a Team Project.\n\n<a href=\"https://www.loom.com/share/31e2d176705844369364e4339961e292\">\n    <p>Forking Personal Repls into Team Projects  - Watch Video</p>\n    ![](https://cdn.loom.com/sessions/thumbnails/31e2d176705844369364e4339961e292-with-play.gif)\n/>\n\n  </a>\n\nOpen the CLUI tool from the top left drop down menu or by navigating to [replit.com/~/cli](https://replit.com/~/cli).\n\n![Opening the CLUI tool](https://docimg.replit.com/images/teamsForEducation/CLUI.png\"\nalt=\"Opening the CLUI tool)\n\nType or search `Team` > `fork-repl-to-project`\n\n![CLUI view of transfer repls into Team Projects tool](https://docimg.replit.com/images/teamsForEducation/fork-repl-to-teamproject.gif)\n\nOpen the repl you'd like to duplicate in a new tab. Copy and paste the repl slug or URL into the first form field.\n\n![Where to find a repl URL](https://docimg.replit.com/images/teamsForEducation/repl-url.png)\n\nCopy and paste the _username_ of the destination team into the second form field.\n\n![Where to find a team username](https://docimg.replit.com/images/teamsForEducation/team-username.png)\n\nIf you would like this to be a group project, check off the box next to `isGroupProject`.\n\n![Filling in the form](https://docimg.replit.com/images/teamsForEducation/formfill.gif)\n\nClick `Submit` and find the new project in your destination Team!","metadata":{"id":475}}],["476",{"pageContent":"---\nsidebar_position: 17\n---\n\n# Reviewing submissions\n\n[Leaving Feedback on Projects Using Annotations](#leaving-feedback-on-projects-using-annotations)\n\nTeachers can view project submissions from their team dashboard by clicking \"View submissions\" next to the project name.\n\n![](https://docimg.replit.com/images/teamsForEducation/project-list.png)\n\nSubmissions will show all student projects submitted and in progress. Click \"View Repl\" to review each student's or group's code.\n\n![](https://docimg.replit.com/images/teamsForEducation/project-submissions.png)\n\nTo review student work in bulk:\n\n- You can open the Projects Overview from your Team homepage to see all projects and student progress at-a-glance.\n  ![](https://docimg.replit.com/images/teamsForEducation/project-overview.png)\n- Hover over the student project to see whether their tests have passed (students must run their tests for this to appear).\n- The Progress column shows percentage of projects submitted.\n- To export the Projects Overview as a CSV file, click on \"Export\" at the top right of the page.\n  ![](https://docimg.replit.com/images/teamsForEducation/projects-overview-export.png)\n\n- You can navigate from one project to the next by clicking \"View Repl\" for any project, clicking on the book icon in the left bar, and using the Navigation pane to move between projects.\n  ![](https://docimg.replit.com/images/teamsForEducation/project-review.png)\n\n## Leaving feedback on projects using annotations\n\nTo leave feedback on your students' work, you can use threads. Threads can be added on projects and team repls, and are an easy way to leave comments on a specific word or line of code.\n\nYou can add a thread by highlighting the line where you want to leave the comment. Left-click to view the context menu, and click `Start thread.`\n\n![Start thread pop up](https://docimg.replit.com/images/teamsForEducation/threads-start.png)\n\nA comment box will pop up towards the right of the code. Type in a comment and press the arrow on the right to save it.","metadata":{"id":476}}],["477",{"pageContent":"A comment box will pop up towards the right of the code. Type in a comment and press the arrow on the right to save it.\n\n![Comment box](https://docimg.replit.com/images/teamsForEducation/annotation-made.png)\n\nThe student who created the repl will receive an in-app notification with your comment. They'll be able to reply to the comment or modify the code accordingly.\n\nYou can also use familiar markdown syntax in threads and chat.\n\nHere's a quick guide to markdown syntax available in annotation threads:\n\n![Markdown syntax in Annotations](https://blog.replit.com/images/annotations/annotations-formatting-2.png)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JCsUSo1WfaM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","metadata":{"id":477}}],["478",{"pageContent":"# Teaching your kid to code with Replit\n\nIf you're a parent who wants to teach your child how to code from scratch, this guide is for you. We've put together some examples that are easy to get started with, don't require any setup, and are fun from the start.\n\n<hr/>\n\n**A note on privacy:** Especially if your child is young, you're probably worried about privacy and data protection. In many countries, storing and processing personal data of minors is treated differently. In the USA, there are regulations concerning anyone under the age of 13. You can use our Teams for Education package from [Replit teams](https://replit.com/teams) which includes an anonymous invite feature. This allows you to invite your child to create a fully anonymous account. You can find more information on invitations and the privacy invite links [here](/teams-edu/inviting-teachers-students).\n\n<hr/>\n\n## The benefits of teaching children to code\n\nAlthough coding is generally only introduced in secondary school, there is nothing stopping younger children from learning. Like learning a new language, or studying maths, learning to code provides not only useful skills but also a great way to stimulate and develop the brain in general.\n\nSo-called \"visual languages\" like [Scratch](https://scratch.mit.edu/) are developed specifically to teach children the concepts of coding without their having to memorize syntax. However, these are usually pretty limited and can be frustrating to work with, so we recommend teaching 'real' coding from the start.\n\nStart with showing them how coding can be **fun** and how they can **create** things using it. While it's definitely beneficial for children to be exposed to concepts like logic, data types and algorithms, the primary focus should be on how enjoyable coding can be.\n\n## Getting started","metadata":{"id":478}}],["479",{"pageContent":"## Getting started\n\nIn this guide, we'll show some basic examples focused on graphical programming. We'll show you how to use different libraries for basic game development, including standard libraries and some custom Replit ones. We'll look at examples using:\n\n- Python Turtle\n- PyGame\n- Python Play\n- Basic\n\nIt's likely that you'll introduce your child to just one or two of these to start, but each has different strengths. Python Turtle is the easiest to get started with, but is fairly limited. PyGame is too complicated for complete beginners, but you can build far more sophisticated games.\n\nWe built Python Play on top of PyGame as a compromise in the simplicity/power tradeoff. Basic borrows syntax from older programming paradigms: using things like `GOTO` is rare in modern programming languages, but it can make it easier for beginners to understand what's happening \"under the hood\" in terms of program flow, compared to more modern constructions like function definitions.\n\nEach of the examples is a starting point for you and your child to play with and develop your own unique extensions.\n\nIf you do not have a Replit Teams account yet, read this [introduction to Teams](/teams-edu/intro-teams-education) and sign up. The free account will be sufficient to follow along, but you may choose a premium option for more powerful repls and heightened privacy.\n\n## Drawing with Python Turtle\n\nWe'll start with Python Turtle, as it is uses high-level commands like `forward()` to move a turtle character around the screen. This makes it really easy for your child to understand the basics of how it works and modify it to move the turtle differently or draw different shapes.\n\nWe are going to build a simple turtle game with two characters. One (controlled by you) will draw a maze and the other (controlled by your child's code) will attempt to navigate through it.\n\n![](https://docimg.replit.com/images/teamsForEducation/teach-your-kid/turtle-example.gif)","metadata":{"id":479}}],["480",{"pageContent":"![](https://docimg.replit.com/images/teamsForEducation/teach-your-kid/turtle-example.gif)\n\nYou can draw the maze and explain to your child how you did it and ask them to write the code to allow their turtle to navigate through it.\n\nThe idea is that you (the parent) draw the maze showing the kid how you do it and then allow them to look at your code and write code that will make their turtle navigate the maze and \"escape\".\n\nCreate a new Python repl or [fork ours](https://replit.com/@ritza/coding-for-kids-turtle#main.py) and start by adding the following code to the `main.py` file.\n\n```python\nimport turtle\n\nparent = turtle.Turtle()\nkid = turtle.Turtle()\n\nkid.shape('turtle')\n```\n\nThe above code imports the Turtle library, defines two turtles, one for the parent and one for the kid. The last line changes the shape of your kid's turtle to represent a turtle.\n\nNow write the code that makes the parent turtle draw a maze - in this example we draw a simple line with a gap. We'll start out with a very simple maze but you can use your creativity to draw more difficult ones once your child has learned the basics.\n\nAdd the code below to the same file.\n\n```python\nparent.up()\nparent.setx(100)\nparent.sety(200)\nparent.down()\n\nparent.color('red')\n\nparent.right(90)\nparent.forward(300)\nparent.up()\nparent.forward(50)\nparent.down()\nparent.forward(50)\n```\n\nThe first block of code lifts the pen and moves it to the (x,y) coordinates (100,200) then puts the pen down again. (By default, the pens will draw as they move so this moves to a new starting location without making a line.)\n\nThe second block changes the parent turtle to draw with red ink.\n\nThe last block of code changes direction (90 degrees to the right) and draws a line (down, as that's the way the turtle is now facing) that is 300 pixels long. Then it lifts the pen and moves another 50 pixels to create a gap, and finally lowers the pen to complete the line.\n\nYou can explain to your child how this code works line by line so that they can try it with their turtle next.","metadata":{"id":480}}],["481",{"pageContent":"You can explain to your child how this code works line by line so that they can try it with their turtle next.\n\nNow your child can take the driver's seat and you can help them as much or as little as needed to write code similar to the following (directly below your existing code).\n\n```python\nkid.right(90)\nkid.forward(120)\nkid.left(90)\nkid.forward(200)\n```\n\nWith the above code the black turtle will turn right (facing down), move to the same level as the gap in the red line, turn left and move forward through the gap.\n\nIf your child likes solving these mazes and you get tired of creating them, you can use Python's `random` module to help with drawing random mazes.\n\n## Building interactive games with Python Play\n\n[Python Play](https://github.com/replit/play) is an abstraction layer built on top of PyGame that makes it easy to build a more advanced game than with Turtle, but without needing to understand all of the concepts required for PyGame.\n\nIf you want something almost as simple as Turtle, but with more advanced options, like easy handling of input through your mouse or keyboard, this is a good option to introduce before something more advanced such as PyGame.\n\n![](https://docimg.replit.com/images/teamsForEducation/teach-your-kid/python-play-example.gif)\n\nFork [this repl](https://replit.com/@ritza/coding-for-kids-python-play) which is a simple game that shows how to process mouse input.\n\nThe cat moves randomly around the screen, and the player has to click on the cat within 15 flashes to win.\n\nYou could show your child how to:\n\n#### Change the characters that make up the cat\n\nBy modifying the line\n\n```python\ncat = play.new_text('=^.^=', font_size=70)\n```\n\n#### Make the game easier or harder\n\nEspecially if you are using a computer with a trackpad or otherwise find that your mouse is not sensitive enough, you can make the game easier in a few different ways:\n\nBy modifying the number of seconds the cat is shown for in the following code.\n\n```python\ncat.show()\ncats_shown += 1\nawait play.timer(seconds=0.6)\n```","metadata":{"id":481}}],["482",{"pageContent":"By modifying the number of seconds the cat is shown for in the following code.\n\n```python\ncat.show()\ncats_shown += 1\nawait play.timer(seconds=0.6)\n```\n\nOr by increasing/decreasing the number of flashes allowed before the game ends by modifying the following code.\n\n```python\nif cats_shown >= 15:\n    cat.words = 'Game over!'\n```\n\nOr by making the font size larger in the initial definition of the cat.\n\n#### Build an entirely new game\n\nOnce you're both comfortable with the Python Play syntax that makes up this game, take a look at all the building blocks available in [the documentation](https://github.com/replit/play) and build something fun!\n\n## Building more advanced games with PyGame\n\nPyGame is more complicated than Python Play, but it also has a larger community and many [pre-built examples](https://www.pygame.org/docs/ref/examples.html) that you can use as a starting point.\n\nIt's likely that your child will benefit from starting out with some easier libraries and moving up to Python Play over time. But if you want to jump in the deep end, we also have a [detailed tutorial](/tutorials/python/building-a-game-with-pygame) on how to build a juggling game in PyGame.\n\n## Drawing on a blank canvas with Basic\n\nProgramming used to look pretty different. Older languages like BASIC relied heavily on `GOTO` statements and other constructs that are rarely seen in more modern languages.\n\nHowever, these constructs are also \"closer to the metal\" and they can help beginners understand how things like program flow actually work under the hood.\n\n[Classic Basic on Replit](/tutorials/misc/classic-basic-replit) combines the syntax of BASIC with some more modern features for the best of both worlds.\n\nAt its simplest, it can be used like Microsoft Paint: to draw pixel by pixel on a canvas, but using code instead of your mouse.\n\n![](https://docimg.replit.com/images/teamsForEducation/teach-your-kid/basic-example.png)\n\nHere's a starter example showing how to draw a dog pixel by pixel and then add a line using a `for` loop.","metadata":{"id":482}}],["483",{"pageContent":"![](https://docimg.replit.com/images/teamsForEducation/teach-your-kid/basic-example.png)\n\nHere's a starter example showing how to draw a dog pixel by pixel and then add a line using a `for` loop.\n\nFork this [repl](https://replit.com/@ritza/coding-for-kids-basic) so that you and your child can draw together using code.\n\nBasic is definitely not limited to only drawing static pictures. For more inspiration, take a look at this repl of a [full snake game](https://replit.com/@ritza/BASIC-Kids-SnakeGame#program.bas).\n\n## Where next?\n\nOnce your child understands the basics of programming they can move on to work through [our tutorials](/tutorials/overview).\n\nWhile games are often a good way to get children hooked on programming, many children also prefer building non-game programs. See whether they are most interested in games, web application development or even something like data visualisation and then double down on finding more examples that match their interests.\n\nIt is also a good time to introduce kids to 'computational thinking'. [CS Unplugged](https://csunplugged.org/en/) is a good resource for teaching beginners the foundations of computer science without a computer.","metadata":{"id":483}}],["484",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Checklist: Getting Started with Teams for Education\n\n### For Organization Admins:\n\n1. Start by [signing up for a Team for Education](/teams-edu/intro-teams-education). Now you are an organization owner and can view all of the teams within your organization.\n2. To give your colleagues the ability to create new teams for their own classes, [add them as Org Admins](/teams-edu/inviting-teachers-students).\n3. TIP: Create a “home” team and [invite all of the teachers](/teams-edu/inviting-teachers-students) who will be using Replit with you to join it. This can be their hub to collaborate on shared curriculum resources.\n\n### For Teachers:\n\n1. Click on “Add Team” to begin creating your first team. Now you’re the team owner!\n2. [Give your team a username.](/teams-edu/intro-teams-education) (Don’t worry, you can always update your team’s display name later!)\n3. Select the checkbox \"Click here if any of your students are under thirteen years of age\" if applicable. _This will ensure that a private invitation link is used in the following Manage Team step, and is required for your team to be FERPA/COPPA compliant._\n4. [Invite your students and TAs.](/teams-edu/inviting-teachers-students) Only the team owner can assign user roles.\n5. Now you can begin [creating projects and assignments for your students to complete!](/teams-edu/creating-projects-assignments) You can build your own projects from scratch, [import them from your colleagues or other teams](/teams-edu/copying-projects-other-teams), or [import them from the Replit Curriculum Hub](https://replit.com/curriculum)!\n\n[Need support with Teams for Edu?](/teams-edu/teams-edu-support)","metadata":{"id":484}}],["485",{"pageContent":"---\nsidebar_position: 28\n---\n\n# Teams for Edu Support\n\nNeed some extra help with Teams for Edu?\n\n- [Ask our teacher community](https://ask.replit.com/c/edu/edu-support/2)! You can find ideas, discuss best practices, and get help in this forum just for teachers.\n- Come to [Office Hours](https://www.eventbrite.com/e/replit-teams-for-education-office-hours-tickets-151837105871). Every month, we host a live gathering where you can ask us about Teams for Edu, get help and brainstorm with other teachers, and learn about new features. Always free!\n- If you can't find an answer to your question or you need to get in touch with someone on our team, you can always reach us at education@replit.com.","metadata":{"id":485}}],["486",{"pageContent":"---\nsidebar_position: 18\n---\n\n# Testing, assessments, and autograding\n\nReplit has a number of features related to helping teachers automatically grade students' assignments.\n\nThe simplest of these is [Input/Output testing](/teams-edu/input-output-testing), which allows you to check that your student's homework produces specific outputs, matching exact strings or regexes.\n\nA step above this is [Unit Testing](/teams-edu/unit-testing), which allows you to write full unit tests in Java (JUnit), Python (unittest), or JavaScript (Jest).","metadata":{"id":486}}],["487",{"pageContent":"---\nsidebar_position: 20\n---\n\n# Unit testing\n\nRepl unit testing allows a repl author to create code-driven tests that compare actual function output with expected output.\n\n## Supported Languages and Testing Frameworks\n\n- Java – [JUnit](https://junit.org/junit5/docs/current/user-guide/)\n- Python – [unittest](https://docs.python.org/3/library/unittest.html)\n- Node.js – [Jest](https://jestjs.io/docs/en/getting-started)\n\n## Why Use Unit Testing?\n\nUnit testing is great for more complicated testing scenarios. For example, when you need to test that functions return specific values based on their (dynamic) inputs.\n\nEach test is itself a function that follows a pattern:\n\n- Invoke one function from your application with parameters.\n- Compare the return value to an expected value (your function should always have predictable outputs)\n- If the actual value does not match the expected value, the assert method with throw an exception and cause the test to fail.\n\nHere's an example using Java:\n\n```\n// invoke with 3.0, 4.0 as input\ndouble area = calculateRectArea(3.0, 4.0);\n// compare expected to actual\nassertEqual(12.0, actual);\n```\n\nUnit testing is not ideal for testing that involves using Standard In (`System.in`) and Standard Out (`System.out`). Input/Output testing is ideal for testing that relies on precise usage of `println()`.\n\n## Using the Testing Pane\n\nThe testing pane can be found in your left-hand sidebar in your repl. It is your hub for creating tests. Read on to find out more about how to use this helpful feature.\n\n### Defining a test function\n\nOpen the testing pane within a project.\n\n![unit testing pane](https://docimg.replit.com/images/unit-testing/unit-testing-pane.png)\n\nIf prompted, select \"Unit tests\".\n\n![](https://docimg.replit.com/images/unit-testing/testing-method.png)\n\nWrite a function within the main file that's easy to test: something which accepts parameters and returns a single result. Our example includes an `add` function which simply returns the result of adding two numbers.\n\nIn a Python repl:","metadata":{"id":487}}],["488",{"pageContent":"In a Python repl:\n\n![unit testing main py](https://docimg.replit.com/images/unit-testing/unit-testing-add-py.png)\n\nIn a Node.js repl:\n\n![unit testing index js](https://docimg.replit.com/images/unit-testing/unit-testing-add-js.png)\n\nClick \"+ Add test\".\n\n![unit testing add test](https://docimg.replit.com/images/unit-testing/unit-testing-add-test.png)\n\nProviding a test will construct a unit test function for you. Only the body of the function is editable. Configure the test to invoke the `add` function and compare the result to the expected value. **If the actual value does not match the expected value, the assert method with throw an exception and cause the test to fail.** Include a helpful failure message to explain the intent of the test.\n\nNote: Python exposes its assert methods on the `self` object. This behavior will be different depending on the language you use. See the \"Assertion documentation\" below to read about the invocation patterns for each unit testing framework.\n\nIn a Python repl:\n\n![unit testing add modal](https://docimg.replit.com/images/unit-testing/unit-testing-add-modal.png)\n\nIn a Node.js repl:\n\n![unit testing add modal js](https://docimg.replit.com/images/unit-testing/unit-testing-add-modal-js.png)\n\nNote: by default, in a Node.js repl, the exports are available via an `index` variable, e.g. `index.add` here. You can add your own imports too, see the \"Importing Libraries\" section.\n\nClick \"Run tests\" to begin executing your test suite. Open the Console tab to monitor execution progress.\n\n![unit testing running](https://docimg.replit.com/images/unit-testing/unit-testing-running.png)\n\nTest results will appear in the Console.\n\n![unit testing results](https://docimg.replit.com/images/unit-testing/unit-testing-results.png)\n\n### Importing libraries\n\nImports can be configured in the \"Setup\" for the test suite, which is helpful if:\n\n- Your repl has library dependencies.\n- You would like to include any other library just for testing purposes.","metadata":{"id":488}}],["489",{"pageContent":"Imports can be configured in the \"Setup\" for the test suite, which is helpful if:\n\n- Your repl has library dependencies.\n- You would like to include any other library just for testing purposes.\n\nFor example, you can import [NumPy](https://numpy.org/) for all tests. Keep in mind that this will affect all test functions within your test suite (you will not need to import more than once):\n\n![unit test setup](https://docimg.replit.com/images/unit-testing/unit-testing-import.png)\n\nHere is an example function using NumPy:\n\n![unit test numpy](https://docimg.replit.com/images/unit-testing/unit-testing-np-example.png)\n\nEvery other test you write can also use NumPy:\n\n![unit test numpy](https://docimg.replit.com/images/unit-testing/unit-testing-np-test.png)\n\n### Importing modules\n\nIf you would like to test multiple modules or files within your repl, you must manually import them in the \"Setup\".\n\n![unit test import module](https://docimg.replit.com/images/unit-testing/unit-testing-import-module.png)\n\n## Advanced Setup and Teardown\n\nSometimes tests require specific setup and teardown steps to configure and destroy global state.\n\nConsider a repl that relies on Repl Database and loads specific data by key.\n\n![unit testing database](https://docimg.replit.com/images/unit-testing/unit-testing-database.png)\n\n### Import\n\nUse import to include Repl Database.\n\n![unit testing db import](https://docimg.replit.com/images/unit-testing/unit-testing-db-import.png)\n\n### Setup\n\nUse the setup to add a database key with test data:\n\n![unit testing setup](https://docimg.replit.com/images/unit-testing/unit-testing-setup.png)\n\n### Teardown\n\nUse the teardown to delete the test data:\n\n![unit testing teardown](https://docimg.replit.com/images/unit-testing/unit-testing-teardown.png)\n\n## Assertion Documentation\n\nRead about the supported assert function for each unit testing library:\n\n- Java – [JUnit](https://junit.org/junit4/javadoc/latest/org/junit/Assert.html)","metadata":{"id":489}}],["490",{"pageContent":"## Assertion Documentation\n\nRead about the supported assert function for each unit testing library:\n\n- Java – [JUnit](https://junit.org/junit4/javadoc/latest/org/junit/Assert.html)\n- Python – [unittest assert methods](https://docs.python.org/3/library/unittest.html#assert-methods)\n- Node.js – [Jest expect functions](https://jestjs.io/docs/en/expect)\n\n## Tips for Writing Good Tests\n\n1. Only test one expected output at a time.\n2. Avoid relying on external libraries when possible.\n3. Avoid testing functions that rely on the entire app running (e.g. databases, network connections, rendering user-interfaces).\n4. Avoid testing functions that are not crucial portions of the program.\n5. Avoid testing functions that are part of external libraries.\n\n## Tips for Writing \"Testable\" Functions\n\n1. Decompose your program into discrete functions.\n2. Keep functions concise and descriptive.\n3. Design predictable inputs (parameters) and outputs (return).\n\n## Teams for Education\n\nUnit testing is supported in [Teams for Education](https://teamsforeducationresources.util.repl.co). If you don't have a team yet, create one [here](https://replit.com/teams).\n\n### Creating a project\n\nIf you are new to projects, you can find more info on creating a project [here](/teams-edu/creating-projects-assignments).\n\n<!--\nTBD\n### Example Team projects\n\nUse project share links below to import a example unit test projects into your team:\n\n  - Java `JUnit`: link\n  - Python `unittest`: link\n  - Node.js `Jest`: link -->","metadata":{"id":490}}],["491",{"pageContent":"# US Student Data Protection Addendum\n\nThis U.S. Student Data Protection Addendum (\"DPA\" or \"Addendum\") is entered into between the Local Educational Agency using the Replit, Inc. (\"Provider\") services (\"LEA\") and Provider (together, the \"Parties\") on the date on which the LEA first enters into the Replit Terms & Conditions (\"Effective Date\").\n\nWHEREAS LEA and Provider exchange certain information and Provider may collect certain information on behalf LEA in furtherance of the Services as defined in the Master Services Agreement (“MSA”) between the Parties and intend for this DPA to apply to all information exchanged or collected for the purpose of such Services, unless otherwise expressly agreed by the Parties in writing in advance;\n\nWHEREAS the Provider and LEA recognize the need to protect personally identifiable student information and other regulated data exchanged between them as required by applicable laws and regulations, such as the Family Educational Rights and Privacy Act (“FERPA”) at 20 U.S.C. § 1232g (34 CFR Part 99), the Children’s Online Privacy Protection Act (“COPPA”) at 15 U.S.C. § 6501-6506 (16 CFR Part 312), and applicable state privacy laws and regulations, including California Assembly Bill 1584 (\"AB 1584\") and the Student Online Personal Information Protection Act (“SOPIPA”);\n\nWHEREAS, for the purposes of FERPA, Provider shall be considered a School Official, under the control and direction of the LEAs as it pertains to the use of Student Data.\n\nNOW THEREFORE, the Parties agree as follows:\n\n### ARTICLE I: DEFINITIONS\n\nAll terms not defined herein shall have the meaning defined in applicable law and regulation or the MSA.\n\nFor the purposes of this DPA, the following definitions shall apply:.","metadata":{"id":491}}],["492",{"pageContent":"### ARTICLE I: DEFINITIONS\n\nAll terms not defined herein shall have the meaning defined in applicable law and regulation or the MSA.\n\nFor the purposes of this DPA, the following definitions shall apply:.\n\n**LEA Records** shall mean (1) information directly related to and capable of identifying a pupil; and (2) content generated by the pupil; where such information is maintained by the LEA or acquired directly from the pupil through the use of instructional software or applications assigned to the pupil by a teacher or other LEA employees, including records requiring protection subject to FERPA or other records requiring equivalent protection for the data of students and minors, pursuant to applicable laws and regulations. LEA Records continue to be the property of and under the control of LEA. Notwithstanding the foregoing, LEA Records do not include Deidentified Data, as defined below.\n\n**Deidentified Data** shall mean data that does not identify a specific individual and is not reasonably capable of identifying an individual using reasonable means.\n\n### ARTICLE II: DUTIES OF PROVIDER\n\n1. **Privacy Compliance**. With respect to LEA Records, Provider shall comply with all applicable state and federal laws and regulations pertaining to data privacy and security.\n1. **Restrictions on Processing**. Provider shall not:\n   1. collect, retain, use, or disclose LEA Records for any purpose other than for the specific purpose of performing the Services specified in the MSA for Customer, except that Provider may Deidentify LEA Records and shall own such Deidentified data.\n   1. engage in targeted advertising or retargeting to students or parents using LEA Records;\n   1. use LEA Records, including persistent unique identifiers, created or gathered by the service to amass a profile about a student, except in furtherance of school purposes;\n   1. sell LEA Records;","metadata":{"id":492}}],["493",{"pageContent":"1. use LEA Records, including persistent unique identifiers, created or gathered by the service to amass a profile about a student, except in furtherance of school purposes;\n   1. sell LEA Records;\n   1. disclose LEA Records, unless required by law; for legitimate research purposes; or as part of the maintenance, development, support, operation, or improvement of Provider’s Services in accordance with applicable law.\n1. **Disposition of Data**. Upon termination or completion of the terms of the MSA, Provider shall use reasonable efforts to delete or dispose of LEA Records. The duty to delete or dispose of a pupil’s records does not apply to Deidentified Datas.\n1. **Parent and Eligible Student Data Requests**.\n   1. Provider shall provide commercially reasonable assistance to LEA for the fulfillment of LEA’s obligations to respond to parent or eligible student requests regarding LEA Records, including requests related to access, correction, or deletion of such records.\n   1. In the event that a parent or guardian of a pupil contacts Provider with any such request regarding LEA Records, Provider shall refer the individuals to the LEA by email, [LEA Request email] and take no further action. LEA acknowledges that it is responsible for assessing and responding to such request upon referral by Provider to the email address specified herein. It is LEA’s sole responsibility to maintain and monitor such email address and to notify Provider of any changes to such email address in writing.\n1. **Data Security**.","metadata":{"id":493}}],["494",{"pageContent":"1. **Data Security**.\n   1. Provider shall implement and maintain reasonable and appropriate administrative, physical, and technical security measures appropriate to the nature of the covered information in order to secure data from unauthorized access, destruction, use, modification, or disclosure. Provider will (i) when any LEA Records is under its control, comply with the measures identified below with respect to such records; and (ii) keep documentation of such measures to facilitate audits and where required, for the preservation of evidence.\n   1. Such measures shall include:\n      1. **Data Processing Facilities**. Provider shall maintain reasonable measures designed to help prevent and detect unauthorized access to the data processing facilities where LEA Records is stored or processed by Provider.\n      1. **Provider Systems**. Provider shall maintain reasonable measures designed to help prevent and detect unauthorized access of the Provider systems used to process LEA Records.\n      1. **Access to LEA Records**. Provider shall maintain reasonable measures designed to help prevent and detect unauthorized access to or disclosure of LEA Records.\n      1. **Provider Asset Management**. Provider shall maintain reasonable measures designed to help ensure reasonable control and configuration of Provider-owned hardware and software assets.\n      1. **Provider Application Software Security**. Provider shall maintain reasonable measures designed to help address privacy and security considerations in the development of its code for the Provider platform.\n      1. **Personnel**. Provider shall maintain reasonable technical and organizational measures to help ensure its staff are subject to a contractual or statutory obligation of confidentiality and are regularly trained regarding privacy and security.\n\n### ARTICLE III: DUTIES OF LEA","metadata":{"id":494}}],["495",{"pageContent":"### ARTICLE III: DUTIES OF LEA\n\n1. **Privacy Compliance**. LEA shall provide data for the purposes of the MSA in compliance with all applicable privacy laws, including FERPA, PPRA, and all applicable state student privacy laws. LEA shall not make any request of Provider if complying with such request would be unlawful for either LEA or Provider.\n1. **Annual Notification of Rights**. If the LEA has a policy of disclosing education records under FERPA (4 CFR § 99.31 (a) (1)), LEA shall include a specification of criteria for determining who constitutes a school official and what constitutes a legitimate educational interest in its Annual notification of rights, sufficient to for LEA’s disclosure of such records to Provider in compliance with FERPA and any other applicable law requiring equivalent such notice.\n1. **Reasonable Precautions**. LEA shall take reasonable precautions to secure usernames, passwords, and any other means of gaining access to the Services and data hosted by Provider.\n\n### ARTICLE IV: SECURITY INCIDENT","metadata":{"id":495}}],["496",{"pageContent":"### ARTICLE IV: SECURITY INCIDENT\n\nIn the event either Party identifies or otherwise becomes aware of an actual or reasonably suspected Security Incident (meaning, any unauthorized access, destruction, use, modification, disclosure or acquisition of information requiring confidentiality pursuant to applicable law and/or the MSA), the identifying Party shall report such Security Incident to the other Party without undue delay and shall include written details of such Security Incident, including the type of data affected and the identity of any affected person(s), promptly after such details become known or reasonably available to the identifying Party. Furthermore, in the event of such Security Incident, the identifying Party will: (1) provide timely information and cooperation as the other Party may reasonably require to fulfill its data breach reporting obligations under applicable laws, if any; and (2) take such measures and actions as are appropriate to reasonably remedy or mitigate the effects of such Security Incident. The decision whether to provide notification, public/regulatory communication or press release (each, a “Notification”) concerning any such Security Incident shall be solely at the discretion of the Party whose confidential information may have been affected by such incident, but the content of any Notification that names the other Party or from which the other Party’s identity could reasonably be determined shall be subject to the other Party’s prior approval, which shall not be unreasonably withheld, conditioned or delayed, except as otherwise required by applicable laws, and provided that conditioning of the Notification on the other Party’s approval shall not prevent the identifying Party from complying with applicable laws.","metadata":{"id":496}}],["497",{"pageContent":"---\nsidebar_position: 5\n---\n\n# Using multiplayer with anonymous users\n\nMultiplayer can only be used if you're signed into Replit. We are working on some solutions to allow for anonymous multiplayer functionality but, in the meantime, follow these steps if you have an anonymous user who wants to collaborate with you.\n\n1. Click the \"invite\" button in your repl.\n\n![Multiplayer invite button](https://docimg.replit.com/images/repls/multiplayer-invite-button.png)\n\n2. Copy the join link in your repl.\n\n![Copy join link](https://docimg.replit.com/images/repls/multiplayer-invite-link.png)\n\n3. Send your collaborator the join link. They'll be redirected to the sign in page below:\n\n![Login](https://docimg.replit.com/images/repls/login.png)\n\n4. After they sign in, they'll be redirected back to your repl as a collaborator!\n\nIf you have any feedback, please let us know using our [feedback form](https://replit.com/support).","metadata":{"id":497}}],["498",{"pageContent":"---\nsidebar_position: 7\n---\n\n# How to manage and copy repls for interviewing\n\nIf you're using Replit for technical interviews, you'll probably want to use one or more template repls. For each candidate, you can create a copy of the template repl for that role. This lets you keep a record of each candidate's work.\n\nIn this tutorial, we cover how to:\n\n- Fork a repl for multiple interviews\n- Add a naming convention to interview repls\n- Organize candidate interviews\n- Remove candidates from completed interviews\n- Perform code reviews\n\n## Forking template repls\n\nTo get started, navigate to your Teams Dashboard and create a template repl (for example, `backend-dev-python`) consisting of all the material you need to interview for the role.\n\n![template repl](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/template.png)\n\nNext, click on the repl name on the top-left of your workspace. In the pop-up window, click on the three-dot menu next to the \"Spotlight page\" button and select \"Fork\" to create a fork (copy) of the repl.\n\n![fork repl](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/fork.png)\n\nChoose the owner of the new forked repl, select your Team's name, and click \"Confirm\".\n\n![confirm fork](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/create-fork.png)\n\nYou will be redirected to the workspace of the copied repl where you can modify the repl as you see fit.\n\n## Adding a naming convention\n\nYou can invite a candidate and interview them using the forked repl in order to keep your template clean. For more details on how to invite candidates to interviews, you can follow this tutorial: [Interviewing candidates with Guest Mode](/teams-pro/interviewing-candidates).","metadata":{"id":498}}],["499",{"pageContent":"When the interview is over, save the repl with the candidate's name or some other identifier on it. For example, you could use a naming convention like `backend-dev-python-2022-01-21-jane-doe` to make it easier to find if there have been numerous candidates for the same type of interview.\n\n![rename fork](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/rename-repl.png)\n\n## Organizing interview templates\n\nTo keep track of your templates, you can group them into collections, which is a feature of Teams Pro.\n\nIn the Team Dashboard, you'll find plus and list buttons on the right side of the screen, level with the 'Create Team Repl' button.\n\n![collections](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/collections.png)\n\nTo name and create a new collection, click on the plus button.\n\n![name collection](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/new-collection.png)\n\nYou can add interview repls to the collection by dragging them in. You can also arrange these in any order.\n\n![add repls to collection](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/interview-collection.png)\n\n## Removing candidates from completed interview repls\n\nOnce an interview with a candidate is complete, you can remove their access to the repl so that they cannot modify the code they wrote during the interview.\n\nOpen the candidate's interview repl and click the invite button. Find the candidate's username or email, and click on the \"x\" button next to it.\n\n![remove candidate](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/remove-candidates.png)\n\nThis will prevent the candidate from opening the repl after the interview.\n\n## Performing code review\n\nYou can review a candidate's code by adding notes on the repl about their overall coding solutions or sections of it. You can share notes, scores, or anything else with the rest of the hiring team.\n\nTo add a note, right click on a line or selection of code and choose \"Add note\".","metadata":{"id":499}}],["500",{"pageContent":"To add a note, right click on a line or selection of code and choose \"Add note\".\n\n![adding notes](https://docimg.replit.com/images/teamsPro/copying-repls-interviewing/add-notes.png)\n\nIn the text field, add any comments you have on the candidate's code and click the button next to the text field, which will be blue once you have typed something in.\n\nYou can also add collaborators by tagging them in your comment. Type `@<their username>` to bring their attention to the repl.","metadata":{"id":500}}],["501",{"pageContent":"---\nsidebar_position: 6\ntitle: Conducting effective technical interviews with Replit\n---\n\n# How to effectively conduct technical interviews with Replit\n\nEvery company has a different way of conducting technical interviews. As a hiring manager, you want to make sure that the interviews you conduct best assess the candidate's problem-solving capabilities.\n\nTo effectively to conduct technical interviews, some questions to think about are:\n\n- What constitutes the ideal technical interview?\n- What tools or platforms can be used to provide the ideal coding environment?\n\nThese questions are important because you want to make sure that the tools you use enable you to properly evaluate the candidate's competency and skill for the role, and that they best represent the company's dedication to its employees' time.\n\nLet's take a look at what makes Replit an effective platform to conduct coding interviews and some of its features that create a seamless coding interview environment.\n\nWe'll cover:\n\n- Different types of technical interviews\n- Why live coding interviews are the best\n- How to leverage Replit as a coding interviewing platform\n\n## What are technical interviews?\n\nTechnical interviews are challenges and tests to evaluate a candidate's coding skills, problem-solving abilities, and personality. They allow interviewers to see how the interviewee tackles real-world problems like those they may face in the role they are applying for, as well as whether they are a good fit for the role and the company.\n\n## Different types of technical interviews\n\nTechnical interviews typically have three stages:\n\n- Technical phone screen\n- Remote coding interviews via coding tests\n- Onsite interviews\n\nTechnical interviews can be quite a lengthy process, but each stage gives you a clearer idea of the candidate's personality and capabilities.","metadata":{"id":501}}],["502",{"pageContent":"- Onsite interviews\n\nTechnical interviews can be quite a lengthy process, but each stage gives you a clearer idea of the candidate's personality and capabilities.\n\nReplit [Teams Pro](/teams-pro/intro-teams-pro) can be used to conduct effective interviews following a successful first stage. It is an ideal platform for conducting remote coding interviews because of the following features:\n\n- In-built support for multiple programming languages and frameworks\n\n![Languages](https://docimg.replit.com/images/teamsPro/effective-technical-interviews/languages.png)\n\n- Team collaboration using threads\n\n![Threads](https://docimg.replit.com/images/teamsPro/effective-technical-interviews/threads.png)\n\n- Multiplayer feature that allows interviewers to view a candidate's repl in real time\n\n![Multiplayer](https://docimg.replit.com/images/teamsPro/effective-technical-interviews/multiplayer.png)\n\nFor more information on getting started with conducting interviews using Teams Pro, take a look at our [Introduction to Teams Pro](/teams-pro/intro-teams-pro).\n\nRegardless of the type of interview you want to conduct, the first step to follow is to create a team repl. Our [Interviewing candidates in guest mode guide](/teams-pro/interviewing-candidates) will show you how.\n\nNow we'll look at the different stages of a technical interview process and see where Replit can be used.\n\n### Technical phone screen\n\nThis stage mainly consists of theory questions that comprise behavioral and situational questions, as well as questions about the candidate's education, technical knowledge, and experience.\n\nIt's a short but essential social call for evaluating the candidate's enthusiasm for tech, communication skills, qualifications, values, and overall character as a good fit for the company and its culture.\n\nThe technical phone screen can be conducted via a phone or video screen, and can last anywhere from 15 to 60 minutes.\n\n### Coding tests","metadata":{"id":502}}],["503",{"pageContent":"The technical phone screen can be conducted via a phone or video screen, and can last anywhere from 15 to 60 minutes.\n\n### Coding tests\n\nThis stage of the interview process is for assessing the candidate's coding and problem-solving abilities. The different types of coding tests that a company can provide for candidates include:\n\n- Automated tests,\n- Take-home assessments, or\n- Live coding tests.\n\n#### _Automated tests_\n\nAutomated tests include the use of automation frameworks and other software tools to automatically assess the candidate's coding skills and speed. These coding tests are time-efficient for a company, as they typically result in a \"pass\" or \"fail\" outcome for each candidate. However, they may not necessarily provide a true reflection of the candidate's skills, as they do not highlight a candidate's thought process.\n\nDue to how restrictive this process is, companies could potentially miss out on a lot of talented candidates. Furthermore, monitoring candidates during tests is often difficult, so for some developers, it may be easy to plagiarize code solutions. For candidates that do not honor this system, it results in a misrepresentation of their speed and skill.\n\nAutomated tests can be created by setting up unit testing. Unit testing allows you to create code-driven tests that compare actual function output with expected output. Repl [Unit Testing](/teams-edu/unit-testing) allows a repl author to write full unit tests in Java (JUnit), Python (unittest), or JavaScript (Jest).\n\n![Unit Testing](https://docimg.replit.com/images/teamsPro/effective-technical-interviews/unit_testing.png)\n\n#### _Take-home assessments_\n\nThese types of tests are project-based assignments with a deadline that the company assigns to candidates. Take-home assignments provide a sense of comfort for the candidates by letting them work in their own time and space. Candidates can rest before taking up the problem from a different angle when needed.","metadata":{"id":503}}],["504",{"pageContent":"While they remove most of the pressure that comes with other interview types, they are also somewhat controversial. Often, they are seen as discriminating against candidates with work, family, or other strict obligations that may hinder them from completing assessments in time. Additionally, since these are not monitored, candidates may often seek help from friends when completing tasks, or simply plagiarize. Follow-ups can help assess the candidate's level of understanding, but this can be time-consuming.\n\nReplit's [Teams For Education](/teams-edu/intro-teams-education) platform can be used for take-home assessments. Teams for Education adds key workflows for teachers and students, but it can be leveraged by hiring managers to create a collaborative workspace for interviews.\n\nOn top of the core Replit features, hiring managers can create a curriculum that consists of a number of [projects](/teams-edu/creating-projects-assignments) that candidates must complete and [submit](/teams-edu/reviewing-submissions). These projects can be reviewed and candidates can be given feedback.\n\n#### _Live coding tests_\n\nLive coding tests are typically conducted via a video interview with a web-based code editor. Unlike automated tests, live coding tests are monitored and they result in a more accurate assessment of the interviewee's capabilities because they also offer a way for the interviewee to communicate their thought processes and the challenges they come across as they implement solutions. This can help hiring managers identify potential in candidates.\n\nLive coding interviews can be affected by poor connectivity issues. Candidates' unfamiliarity with the interviewing tools may also reduce their confidence, and therefore their chances of getting the job.","metadata":{"id":504}}],["505",{"pageContent":"Furthermore, candidates can sometimes get stuck on live-coding exercises because the interview process made them too nervous to think clearly enough. The more-focused nature of these tests may make candidates feel a lot of pressure in the spotlight. Of course, there are ways to reduce interviewees' nervousness, such as not timing the tests, which would allow them time to settle and calm their nerves for better productivity.\n\nLive coding tests are ideal for conducting remote code interviews for a number of reasons:\n\n- Automated code tests tend to feel inhumane. Candidates may not feel respected if they are given an automated test to assess their skills, because these tests also aren't a very good indicator of capabilities.\n\n- During live coding tests, candidates can communicate with the interviewers where clarity is needed.\n\n- Live coding tests allow candidates to feel valued. The candidate can be assured that they are being seriously considered for the job.\n\n- Live tests also remove any opportunity for plagiarism. They give the interviewers a better opportunity to assess the candidate's competency level and thought process, which can help them identify whether a candidate is nervous or inexperienced.\n\nThe Replit multiplayer feature is ideal for live coding tests, because it allows you to observe candidates as they implement their code and candidates get immediate feedback on their solutions or if there are any changes you want to make to their challenges.\n\nWith this feature, companies can have several interviewers monitoring the same repl at a time. These interview repls can also be reused for different candidates applying for the same role. Take a look at this article on how to [manage and copy repls for interviewing](/teams-pro/copying-repls-for-interviewing).\n\n### Onsite interviews","metadata":{"id":505}}],["506",{"pageContent":"### Onsite interviews\n\nIn this third stage of the interviewing process, a series of interviews are conducted at the company's office and it usually lasts for a few hours to a full day. This is often the most crucial and challenging part of the interview process. Onsite interviews offer an extended opportunity for assessment on both the interviewer's and the interviewee's sides. Onsite interviews can consist of pair programming sessions, live coding tests, non-coding, and non-technical interviews.\n\nSpending more time with the candidate may be worth the time. The onsite interview creates a more comfortable environment for communication and it can also give candidates a chance to experience the type of environment they'll be working in.\n\nOnsite interviews usually consist of different types of tasks, from pair-programming to live-coding tests and whiteboard challenges.\n\n[Pair-programming with Replit](/programming-ide/workspace-features/multiplayer) allows you to invite members into a repl and code with them. There can be multiple programmers in a single repl, as long as they join via the invite link. This allows interviewers to monitor pairs as they work together on code challenges and assess their ability to work in a team.\n\n[Excalidraw](/tutorials/replit/excalidraw-with-replit) is a cool feature on Teams Pro that is ideal for whiteboard challenges. If you are observing many candidates at once, Excalidraw can be a great tool for monitoring them through interview repls.\n\n![Excalidraw](https://docimg.replit.com/images/teamsPro/effective-technical-interviews/excalidraw.png)","metadata":{"id":506}}],["507",{"pageContent":"# Interviewing candidates in guest mode\n\nYou can use Replit to conduct technical interviews. The Teams Pro guest feature lets you pair program with candidates so you can work with them or observe them in real time.\n\nIn this tutorial, we'll show you step-by-step how to conduct a technical interview using Teams Pro. Watch the video or read the text below.\n\n<div\n  className=\"video-container\"\n  style={{ textAlign: \"center\", margin: \"30px 0\" }}\n>\n  <iframe\n    width={560}\n    height={315}\n    src=\"https://www.youtube.com/embed/pOOdoXUu5SI\"\n    title=\"YouTube video player\"\n    frameBorder={0}\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen=\"\"\n  />\n</div>\n\n## Steps to follow:\n\nWe'll cover how to:\n\n- Create a repl\n- Invite candidates\n- Observe candidates\n\n## 1. Create a repl\n\nTo create a repl for an interview, you need to be a team admin. See the documentation [here](/teams-pro/managing-teams) to find out how to create a team with Replit.\n\nNavigate to the \"Teams\" page. Under \"Team Repls\", click the \"Create team repl\" button and the following popup window will appear:\n\n![Creating a repl](https://docimg.replit.com/images/teamsPro/interviewing-candidates-tutorial-images/create_interview_repl.png)\n\nChoose the template language you will be using for the interview and give you repl a name, then click the \"Create repl\" button.\n\nOnce the repl has been created, you will be able to add the relevant files required for the interview. In this example, we've put the instructions for the candidate to follow during the interview in the `main.py` file.\n\n![interview challenge](https://docimg.replit.com/images/teamsPro/interviewing-candidates-tutorial-images/instructions.png)\n\n## 2. Invite candidates\n\nOnce you have written your challenges, invite candidates by clicking on the \"Invite\" button in the top-right corner of the window.\n\n![repl invitation](https://docimg.replit.com/images/teamsPro/interviewing-candidates-tutorial-images/invite_members.png)","metadata":{"id":507}}],["508",{"pageContent":"![repl invitation](https://docimg.replit.com/images/teamsPro/interviewing-candidates-tutorial-images/invite_members.png)\n\nYou can invite candidates by entering their email address or by generating a join link to share with them. Candidates will get a notification of the invite. They will need to sign up for a Replit account before they can accept the invitation.\n\n![invite notification](https://docimg.replit.com/images/teamsPro/interviewing-candidates-tutorial-images/notification.png)\n\n## 3. Observe candidates\n\nOnce candidates join the interview repl, they will be able to access the challenges in the provided files in read and write mode.\n\nYou can observe the candidates as they complete the challenges. Click on the round icon next to the \"Invite\" button to observe the candidate's repl and watch them work on their `main.py` file.\n\n![interview window](https://docimg.replit.com/images/teamsPro/interviewing-candidates-tutorial-images/interview_screen.gif)\n\nCandidates can also view your IDE in the same way. This lets them see the changes you want them to make or new intructions you want to add.\n\n![candidate_screen](https://docimg.replit.com/images/teamsPro/interviewing-candidates-tutorial-images/candidate_screen.png)\n\n## 4. Remove candidate access\n\nTo remove candidates from interview repls so they cannot access the interview once it is complete, click on the \"Invite\" button. In the pop-up window, find the candidate’s name or email.\n\n![remove a member](https://docimg.replit.com/images/teamsPro/remove-member.png)\n\nClick on the \"x\" next to their name and they will be removed from the interview rempl. They will no longer be able to access the repl via the invite link.","metadata":{"id":508}}],["509",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Introduction to Teams Pro\n\nTeams Pro is a new and revolutionary approach to working, collaborating, and building. It's a shared repo for your entire team (and potential new team members), making it easier for you to work together.\n\nThe platform it is built around four cornerstones which we used to inform its features:\n\n## 1. Build\n\n- You can program and dogfood anything from a small script to building out a full MVP\n- You can interview candidates easily and efficiently, thanks to [guest mode](/teams-pro/interviewing-candidates)\n- You can connect to GitHub, to push or pull all your code\n- Your team can focus purely on programming, without worrying about the rest\n\n## 2. Collaborate\n\n- _Threads_ allow you to have asynchronous conversations across all repls so that feedback and conversations are never lost. You can highlight specific lines of code or writing, and assign a comment.\n- _Multiplayer_ allows your team to work together on any repl, all at once or at different times. This is a great way to knowledge share and debug, or just build!\n\n<div\n  className=\"video-container\"\n  style={{ textAlign: \"center\", margin: \"30px 0\" }}\n>\n  <iframe\n    width={475}\n    height={275}\n    src=\"https://www.youtube.com/embed/kO0EJJcuW1k\"\n    frameBorder={0}\n    allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen=\"\"\n  />\n</div>\n\n- _Who's coding?_ provides a live view of what your team is working on, which helps teammates understand if they should jump in and give input as needed.\n\n<div\n  className=\"video-container\"\n  style={{ textAlign: \"center\", margin: \"30px 0\" }}\n>\n  <iframe\n    width={560}\n    height={315}\n    src=\"https://www.youtube.com/embed/RHKz3grfPrw\"\n    title=\"YouTube video player\"\n    frameBorder={0}\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen=\"\"\n  />\n</div>\n\n## 3. Host","metadata":{"id":509}}],["510",{"pageContent":"title=\"YouTube video player\"\n    frameBorder={0}\n    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n    allowFullScreen=\"\"\n  />\n</div>\n\n## 3. Host\n\nTeams Pro allows you and your organization to host [internal tools](/tutorials/python/internal-organization-tool), blogs, scripting tools, and endless more possibilities.\n![Our internal tool](https://pbs.twimg.com/media/EuCd-dvVkAwNO8K?format=jpg&name=large)\n\n## 4. Fun\n\n- Teams Pro really allows team work to turn into dream work\n- Markdown puts the power in your hands; you can do everything from meeting minutes and post-mortems, to user interviews\n- Prototype and plan with [excalidraw files](/tutorials/replit/excalidraw-with-replit)\n- You can create design docs and brainstorming sessions by combining .md and .draw files\n- You can also use it as a knowledge base (one source of truth for the whole team)\n\n## Questions? Need help?\n\nPlease email us at pro@replit.com.\n\n## Further Reading\n\n- Host an [internal organization tool](/tutorials/python/internal-organization-tool) on Replit\n- Prototyping with [excalidraw files](/tutorials/replit/excalidraw-with-replit)","metadata":{"id":510}}],["511",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Managing teams\n\nTo create a team, click the \"Teams\" tab in the sidebar. From the Teams dashboard, click \"+ Create a team\" and follow the steps. You can invite people using their Replit username or their email address, or by sharing a link through the \"Generate a team invite link\" button (the link does not expire).\n\n![Manage Team](https://docimg.replit.com/images/teamsPro/manageTeam.png)\n\nIf you've already created a team, navigate to the [Teams dashboard](https://replit.com/teams) and then click on your team name. Once inside, click \"Manage team members\" in the header. From there, you can invite new members to your existing team.\n\n![](https://docimg.replit.com/images/teamsForEducation/manageTeamMembers.png)\n\nYou will only be able to invite as many people as seats you paid for. The ability to invite will be locked once you reach your limit.","metadata":{"id":511}}],["512",{"pageContent":"---\nsidebar_position: 6\n---\n\nimport Loom from '../../src/components/Loom'\n\n# Themes Explore Page\n\nThe [Themes Explore Page](https://replit.com/themes) is a great place to browse and preview Custom Themes created by the community. Publishing your theme allows others to try it out and enjoy Replit through a brand new palette of colors.\n\n## Publish your Theme\n\nTo publish one of your Custom Themes to the Community, simply hit the \"Publish\" button from within the Themes Editor, fill out the title and description, and submit.\n\nDon't worry if your theme isn't perfect yet - you can always publish updates if you decide to make changes in the future!\n\n## Search for Themes\n\nIf you're looking for something in particular, you can also filter Themes by title, author, color scheme (light or dark), and even specific hex codes!\n\nFor example, a very popular theme from other editors is **Atom One Dark**. Searching for this title brings up\na few results that we can choose from!\n\n![searching for a theme](https://docimg.replit.com/themes/search-atom.gif)\n\nSome creators are particularly enthusiastic about making cool themes! If you want to see all of the themes that someone you like has created, you can even filter by a specific author!\n\n![searching by user](https://docimg.replit.com/themes/search-by-author.gif)\n\nLastly, you can filter themes by color scheme (light or dark) and even find themes that match a specific color.\n![searching by color](https://docimg.replit.com/themes/search-color.gif)\n\n## Preview, Install, and Tip\n\nOnce you select a Theme you like, you will be redirected to its Cover Page where you can preview the Theme to see how it looks, install it so that you can apply it across the site, and even leave the creator [a tip](/cycles/tipping) to thank them for their hard work!\n\n<Loom id=\"d75f080e700a4b27a17764c2b527088b\"/>\n\n---\n\nReady to start searching for and using your favorite Custom Themes? Get started by visiting the [Themes Explore Page](https://replit.com/themes) today!","metadata":{"id":512}}],["513",{"pageContent":"---\nsidebar_position: 0\n---\n\n# Creating your first theme\n\nWith Custom Themes, you can make Replit truly yours by customizing much of the UI from the background and foreground colors site-wide to your code's syntax highlighting. Let's dive into creating your first theme and get Replit looking just the way you want it to!\n\nNavigate to your [account page](https://replit.com/account) and scroll down to the **Themes** section Create a new theme, fill out the title, select a color scheme, optionally add a description, and hit **Create Theme**.\n\n![creating a theme](https://docimg.replit.com/themes/creating-theme.png)\n\nAfter creating your theme, you will be redirected to the Themes Editor. Let's first look at the **Global Theme** section and how each color option applies.\n\n![global-theme](https://docimg.replit.com/themes/global-theme.png)\n\n**Background** is the most noticeable color and the easiest one to get right. Notice how the entire page changes color as you edit it. Let's make it a very dark bluish color for this theme.\n\n**Outline** controls the color of borders. I'll choose a nice dark blue color to give off that cyberpunk experience.\n\n**Foreground** mostly controls text and icon colors. We're going to make the foreground a bluish-grey to give a lower contrast with the background, so as to not hurt the eyes through long coding sessions.\n\n**Primary** controls the color of most buttons. Fitting with the other colors we've selected, a more cyan-teal blue should do.\n\n**Positive** controls things like the color of the run button and those confirmation toasts that appear in the lower-right corner of the screen—anything that denotes something \"positive\". We've chosen a pale green color for this example theme.\n\n**Negative** colors appear when there is an error or if you are about to perform a dangerous action. A nice orange color will do here.\n\n![global theme](https://docimg.replit.com/themes/global-theme-preview.png)","metadata":{"id":513}}],["514",{"pageContent":"![global theme](https://docimg.replit.com/themes/global-theme-preview.png)\n\nFinally, hit **Apply Theme** to start using your new theme. If you want to go deeper and style syntax highlighting for your code, let's move on to the [next step](syntax-highlighting)","metadata":{"id":514}}],["515",{"pageContent":"---\nsidebar_position: 1\n---\n\n# Managing installed themes\n\nAll of your installed themes can be managed from your [account](https://replit.com/account) under the **Themes** section.\n\n## Switching Themes\n\nTo switch out your current active theme for another one, simply click on the button next to the theme's title.\n\n![switching themes gif](https://docimg.replit.com/themes/switching-themes.gif)\n\n## Edit / Delete an existing theme\n\nTo edit or delete an existing theme of yours, hit the three dots beside a theme and hit either **Edit** or **Delete**. Note that only custom themes that you have created can be edited or deleted.\n\n![edit or delete a theme](https://docimg.replit.com/themes/edit-delete-theme.gif)","metadata":{"id":515}}],["516",{"pageContent":"---\nsidebar_position: 2\n---\n\n# Syntax Highlighting\n\nSyntax highlighting enables you to color specific tokens in your code. Imagine what a life it would be if all of your code was only one color! Thanks to Custom Themes, you can now customize syntax highlighting to your liking!\n\n- ## `Variable Names`\n  Usually this color is applied when you use or define a variable in which no declaration keyword is used.\n\n### Javascript\n\n```javascript\nconst message = \"Hello World\";\nconsole.log(message); // \"message\" on this line gets highlighted\n```\n\n### Python\n\n```python\nmessage = \"hello python\" # no declaration keyword like \"const\" is used, so 'message' is colored here\nprint(message) # and during usage\n```\n\n- ## `Variable Definitions`\n  This color gets put into use when defining a variable with a definition keyword such as `const`, `var`, `int`, etc.\n\n### Javascript\n\n```javascript\nconst variableName = \"Look Ma, I'm a variable!\"; // 'variableName' is highlighted\n```\n\n### Java\n\n```java\npublic class Main {\n  public static void main(String[] args) {\n    int numericValue = 100; // 'numericValue' is highlighted\n  }\n}\n```\n\n- ## `Function References`\n  This color gets applied when you call a function.\n\n### Javascript\n\n```javascript\nfunction run() {\n  console.log(\"I'm Running!\");\n}\nrun(); // 'run' is highlighted\n```\n\n### Python\n\n```python\ndef dog_bark():\n  print(\"Woof!\")\ndog_bark() # 'dog_bark' is highlighted\n```\n\n- ## `Function Definitions`\n  When defining a function, this is the color that your function definition will be.\n\n### Javascript\n\n```javascript\nfunction run() {\n  // 'run' is highlighted\n  console.log(\"I'm Running!\");\n}\n```\n\n### Python\n\n```python\ndef dog_bark(): # 'dog_bark' is highlighted\n  print(\"Woof!\")\n```\n\n- ## `Keywords`\n  This one color highlights the important keywords in your code such as variable definitions, class definitions, imports/exports, and more!\n\n### Javascript\n\n```javascript\nexport default async function MyAsyncFunction() {\n  // 'export', 'default', 'async', and 'function' get highlighted\n  // 'return' and 'new' get highlighted","metadata":{"id":516}}],["517",{"pageContent":"### Javascript\n\n```javascript\nexport default async function MyAsyncFunction() {\n  // 'export', 'default', 'async', and 'function' get highlighted\n  // 'return' and 'new' get highlighted\n  return new Promise((resolve, reject) => resolve(\"hello world\"));\n}\n```\n\n### Python\n\n```python\nimport string, sys # 'import' gets highlighted\nfor i in sys.argv[1:]: # 'for' and 'in' get highlighted\n  try: # 'try' gets highlighted\n    fahrenheit=float(string.atoi(i))\n  except string.atoi_error: # 'expect' gets highlighted\n    print(repr(i), \"not a numeric value\") # 'print' gets highlighted\n```\n\n- ## `Property Names`\n  This color gets applied when accessing a property from a variable.\n\n### Javascript\n\n```javascript\nconst person = {\n  name: \"John\",\n  job: \"Programmer\",\n};\nconst { job } = person; // 'job' is highlighted\nconsole.log(person.name, job); // 'name' is highlighted\n```\n\n- ## `Property Definitions`\n  This color gets applied when defining a method or property.\n\n### Javascript\n\n```javascript\nclass Person {\n  constructor(name, job) {\n    // 'constructor' gets highlighted\n    this.name = name;\n    this.job = job;\n    this.stats = {\n      weight: 200, // 'weight' gets highlighted\n    };\n  }\n}\n```\n\n- ## `Function Properties`\n  This color gets applied when calling a method.\n\n### Javascript\n\n```javascript\nconsole.log(\"Hello World\"); // 'log' gets highlighted\n```\n\n### Python\n\n```python\nfahrenheit = float(string.atoi(i)) # 'atoi' gets highlighted\n```\n\n- ## `Tag Names`\n\n  This color applies to tags in HTML and JSX.\n\n  ### HTML\n\n  ```html\n  <div>This is a test</div>\n  <!--'div' gets highlighted in both places-->\n  ```\n\n- ## `Type Names`\n\n  This color applies to types in strongly typed languages such as Java, TypeScript, etc.\n\n  ### TypeScript\n\n  ```typescript\n  const name: string = \"John\"; // 'string' gets highlighted\n  const allNames: Array<string> = [name]; // 'Array' and 'string' get highlighted\n  ```\n\n  ### Java\n\n  ```java\n  int N = 100; // 'N' gets highlighted\n  boolean[] isPrime = new boolean[N + 1]; // 'boolean' gets highlighted in both cases\n  ```\n\n- ## `Class Names`","metadata":{"id":517}}],["518",{"pageContent":"```\n\n  ### Java\n\n  ```java\n  int N = 100; // 'N' gets highlighted\n  boolean[] isPrime = new boolean[N + 1]; // 'boolean' gets highlighted in both cases\n  ```\n\n- ## `Class Names`\n  When defining or, in some cases, using a class, this is the color that will be used.\n\n### Javascript\n\n```javascript\nclass Animal {\n  // 'Animal' gets highlighted\n  constructor(type) {\n    this.type = type;\n  }\n}\nconst Fish = new Animal(\"catfish\"); // 'Animal' gets highlighted\n```\n\n### Python\n\n```python\nclass Person: # 'Person' gets highlighted\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n```\n\n- ## `Attribute Names`\n  This color gets usually gets applied in HTML and JSX tag attributes.\n\n### HTML\n\n```html\n<div className=\"dog\" id=\"the-dog\"></div>\n<!--'className' and 'id' get highlighted-->\n```\n\n### JSX\n\n```jsx\nconst MyComponent = (props) => {\n  // 'passedProp' gets highlighted\n  return (\n    <OtherComponent passedProp={props.prop}>\n      <div>{props.children}</div>\n    </OtherComponent>\n  );\n};\n```\n\n- ## `Comments`\n  This color applies to all code comments.\n\n### Javascript\n\n```javascript\n// This comment gets colored\n```\n\n### Python\n\n```python\n# This comment gets colored\n```\n\n- ## `Strings`\n  This color refers to strings in code.\n\n### Javascript\n\n```javascript\nconsole.log(\"hello!\"); // '\"hello\"' gets highlighted\n```\n\n### Python\n\n```python\nprint(\"hi!\") // '\"hi!\"' gets highlighted\n```\n\n- ## `Numbers`\n  This color refers to all numerical values including integers, floats, doubles, and more.\n\n### Javascript\n\n```javascript\nconsole.log(12345); // '12345' gets highlighted\n```\n\n### Python\n\n```python\nprint(54321) # '54321' gets highlighted\n```\n\n- ## `Booleans`\n  This color gets applied to boolean values like `true` and `false`.\n\n### Javascript\n\n```javascript\nconst t = true; // 'true' gets highlighted\nconst f = false; // 'false' gets highlighted\n```\n\n### Python\n\n```python\nt = True # 'True' is highlighted\nf = False # 'False' is highlighted\n```\n\n- ## `Regular Expressions`\n  This color gets applied for regular expressions.\n\n### Javascript\n\n```javascript\nconst str = \"ohhh hello world!\";","metadata":{"id":518}}],["519",{"pageContent":"f = False # 'False' is highlighted\n```\n\n- ## `Regular Expressions`\n  This color gets applied for regular expressions.\n\n### Javascript\n\n```javascript\nconst str = \"ohhh hello world!\";\nconst matchOs = str.match(/o/gi); // '/o/ig' gets highlighted\n```\n\n- ## `Operators`\n  Operators such as `+`, `-`, `*`, `/`, and more get highlighted with this color.\n\n### Javascript\n\n```javascript\nconsole.log(5 + (3 % 2)); // '.', '+', and '%' get highlighted\n```\n\n### Python\n\n```python\nif len(\"dog\") == 3: # '==' gets highlighted\n  print(\"dog is \" + \"3\" + \" characters long\") # '+' gets highlighted in both cases\n```\n\n- ## `Square Brackets`\n  This colors square brackets, usually the `[` and `]` characters.\n\n### Javascript\n\n```javascript\nconst arr = [0, 1, 2, 3, 4, 5]; // '[' and ']' get highlighted\n```\n\n### Python\n\n```python\narr = [0, 1, 2, 3, 4, 5]; # '[' and ']' get highlighted\n```\n\n- ## `Angle Brackets`\n  This colors angle brackets, usually the `<` and `>` characters, when they aren't being used as part of HTML and JSX tags or other token types.\n\n### HTML\n\n```html\n<h1>Hi, World!</h1>\n<!--'<' and '>' on both sides of each tag get highlighted-->\n```\n\nCongratulations on getting your syntax highlighting colors customized! Now let's learn how to further [improve the design of your theme](theme-design).","metadata":{"id":519}}],["520",{"pageContent":"---\nsidebar_position: 3\n---\n\n# Theme Design\n\nYou can make your theme look even better by considering details like contrast, color palette, and visibility. Let's go over how to do this for your favorite themes.\n\n## Examples of popular existing themes\n\nLet's take a look at some of the most popular VS Code themes and spot some differences between them.\n\n### 1. Atom One Dark\n\nAtom One Dark is one of the most popular themes of all time. Originally made for Atom code editor, this theme has made its way across many different code editors. Take a look at the vibrant color palette used here and how well the colors contrast against each other.\n![atom one dark theme](https://docimg.replit.com/themes/themes/atom-one-dark.png)\n\n### 2. Nord\n\nThe Nord theme is a beautiful, minimalistic theme that uses blue, green, and white hues for syntax highlighting. While it may not use as many colors as the Atom One Dark theme, each color is carefully chosen to complement the others and the foreground.\n![nord theme](https://docimg.replit.com/themes/themes/nord.png)\n\n### 3. Tokyo Night (Storm)\n\nIn Tokyo Night (Storm), the contrast between the foreground text and the background is greater than in the previous two themes. It uses hues of red and purple to color the code.\n![tokyo night storm theme](https://docimg.replit.com/themes/themes/tokyo-night-storm.png)\n\n### 4. Night Owl\n\nOf all the themes, Night Owl has the highest contrast between the code and the background. Similar to Atom One Dark, this color palette uses a wide range of colors rather than just one.\n![night owl theme](https://docimg.replit.com/themes/themes/night-owl.png)\n\n### 5. Bluloco Light\n\nBluloco Light has a playful design and uses a wide range of colors in its syntax highlighting palette. In light mode, the foreground colors are brighter to improve visibility against the background.\n![bluloco light theme](https://docimg.replit.com/themes/themes/bluloco-light.png)\n\n## Background and Foreground","metadata":{"id":520}}],["521",{"pageContent":"![bluloco light theme](https://docimg.replit.com/themes/themes/bluloco-light.png)\n\n## Background and Foreground\n\nAs you may have noticed, we've been using the terms \"background\" and \"foreground\" a lot. Background refers to the color of your theme's background and Foreground refers to the content on top of the background, such as text. To get a better understanding of how this works, there is a blog post on how many of Replit's theme tokens work located here:\nhttps://blog.replit.com/rui-tokens.\n\nTo choose a background color for your theme, it's best to pick a color that is close to black or white, with a hint of a colorful hue. If you take a look back at the popular themes we featured above, notice how none of the backgrounds use sharp colors like **hot pink** or **lime green**.\n\nHere is a gif of some examples of backgrounds that should not be used for theming:\n\n![bad themes gif](https://docimg.replit.com/themes/bad-themes.gif)\n\nIn contrast, here are some examples of good dark mode background colors:\n\n![good dark themes gif](https://docimg.replit.com/themes/good-themes.gif)\n\nAnd of course, some nice-looking light mode themes with well-chosen, accessible background colors.\n\n![good light themes gif](https://docimg.replit.com/themes/good-light-themes.gif)\n\n## Accent Colors\n\nAccent colors should typically have a medium-high contrast relative to the background but not as high as the foreground.\n\n![accent colors](https://docimg.replit.com/themes/accents.png)\n\n## Syntax Highlighting\n\nNotice how the code syntax colors in the screenshots above look nice next to each other and contrast well against the background. To have legible syntax highlighting in your theme, try your best to:\n\n- Make sure your colors don't clash visually.\n- Enforce a range of brightness for your color palette.\n- Make sure your colors aren't hard to see against the background.\n- Make sure your colors don't appear with such a large contrast difference against your background.","metadata":{"id":521}}],["522",{"pageContent":"- Make sure your colors aren't hard to see against the background.\n- Make sure your colors don't appear with such a large contrast difference against your background.\n\nIf you can nail those four points, your theme's going to look awesome. Here are some examples of bad code syntax highlighting colors:\n\n### 1. Large Brightness Difference\n\nNotice the two circled elements in the code with different colors. In this case, `app` is quite dark while the string is very bright. When the brightness of selected colors varies too much, code becomes a lot harder to read.\n![bad code syntax highlighting colors in brightness](https://docimg.replit.com/themes/syntax-brightness-bad.png)\n\n### 2. Poor Color Matching\n\nAlthough most of the colors in this example fall within a similar brightness range, they don't look great together. It's best to choose similar colors for different areas rather than painting a rainbow all over your code. [Color Hunt](https://colorhunt.co) has some cool palettes that you can use to color different areas of your code if you need some inspiration.\n![bad color matching](https://docimg.replit.com/themes/bad-color-matching.png)\n\n### 3. Low Contrast\n\nIf you have to squint to see your code, that is not good. Make sure your code has enough contrast so that it can be easily read, especially by those with impaired visibility.\n![super low contrast](https://docimg.replit.com/themes/super-low-contrast.png)\n\n---\n\nAwesome! Keep building great themes and you'll become a pro in no time! If you're wondering how to get your favorite theme from VS Code ported over to Replit, check out the [next tutorial](port-from-vscode)!","metadata":{"id":522}}],["523",{"pageContent":"---\ntitle: Learning HTML and CSS by building a 90s-inspired website\n---\n\n# Learning HTML and CSS by building a 90s-inspired website\n\nIn this tutorial, we will make a 90s-inspired website using HTML and a little CSS.\n\nNineties web design is pretty iconic. With backgrounds that can make your eyes water, animated GIFs and cursors, and an overload of text, graphics, and ads, there is only one word to describe 90s web design - garish!\n\nYet for those who witnessed the birth of the world wide web, 90s web design brings back fond memories.\n\nAs most of the websites built in the 90s didn't require complicated CSS and JavaScript, building a 90s-inspired website can be a fun first project to learn web development.\n\n## HTML and CSS\n\nEvery website you see on the web has two main building blocks: [HTML](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics) and [CSS](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics).\n\nHyper Text Markup Language (HTML) is not a programming language. It is, as the name suggests, a markup language. To understand what a markup language is, we need to travel back in history.\n\nImagine you are an editor in the olden days and you receive a manuscript to revise. You want to write a bunch of revision instructions for the author on the manuscript. Or you may want to write instructions for the copy editor (write certain lines in a bigger font, make certain words bold, and so on).\n\nTo keep your instructions distinct from the content of the manuscript itself, you grab a [red or blue pencil](<https://en.wikipedia.org/wiki/Blue_pencil_(editing)>) and write your instructions. In other words, you \"mark up\" the manuscript.\n\nFast forward to the electronic age. You are a website developer. You want your website to look a certain way. You need to \"mark up\" the content for the browser, which is responsible for displaying the content on the screen.\n\nEnter HTML!","metadata":{"id":523}}],["524",{"pageContent":"Enter HTML!\n\nRather than marking up our content with red and blue pencils, we will break our content into elements and wrap each element inside an opening and closing HTML tag.\n\n> HTML is a _markup language_ that defines the structure of your content. HTML consists of a series of **[elements](https://developer.mozilla.org/en-US/docs/Glossary/Element)**, which you use to enclose, or wrap, different parts of the content to make it appear a certain way, or act a certain way. The enclosing [tags](https://developer.mozilla.org/en-US/docs/Glossary/Tag) can make a word or image hyperlink to somewhere else, can italicize words, can make the font bigger or smaller, and so on. ~ [MDN](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics)\n\nHTML tags are written using angle brackets, like these: `< >`. A closing tag also has a forward slash: `</ >`.\n\nLet's say we have some text:\n\n```\nI love 90s design\n```\n\nAnd we want to instruct the browser to display this text as a heading. We can simply wrap the text between the opening and closing tags, like so:\n\n```html\n<h1>I love 90s design</h1>\n```\n\n![Anatomy of an HTML tag](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/html-tags.png)\n\nThere are tons of HTML elements. But don't worry! You don't have to memorize everything. Once you understand how elements and tags work, you can always refer to [the documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element) and find relevant elements and their usage.\n\nHTML is the skeleton of our website. But CSS or Cascading Style Sheets is what adds interest to a website. CSS is used to style and alter the layout of HTML elements. We use CSS to specify fonts, change colors and size, add animations, and control other decorative features of our website.\n\nWe will learn more about HTML and CSS as we make our website.\n\n## Getting started","metadata":{"id":524}}],["525",{"pageContent":"We will learn more about HTML and CSS as we make our website.\n\n## Getting started\n\nIn this tutorial we are going to use [Replit](https://replit.com/) to make our website. The cool thing about Replit is that you don't need to install anything. All you need is a computer with a browser and internet connection.\n\nCreate an account on [Replit](https://replit.com/) if you haven't already. Create a new Repl and choose **HTML, CSS, JS** from the template dropdown.\n\n![create a new repl](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/create-a-new-repl.png)\n\nYou will see that we have three files added to our project. The `index.html` file is where we will write our HTML. The `style.css` file is where we will write our CSS. You can delete the `script.js` file, as we won't write any JavaScript in this tutorial.\n\nReplit prepopulates the `index.html` file with a bunch of code. Delete everything in there as we will start from scratch.\n\nCopy the following line in your `index.html` file, and you will see it formatted as a heading in the browser preview window:\n\n```html\n<h1>Web Design in the 90s</h1>\n```\n\n![replit interface](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/replit-interface.png)\n\nThat's it! You just made your very own web page 🎉🎉🎉\n\n## Building structure\n\nWhile writing individual HTML tags does work, to create a real website we need to combine individual elements in a structured way. We will also need to add some extra information and metadata about our site for SEO and other purposes.\n\nIn your code editor, erase everything.\n\nThe very first piece of HTML we will write is `<!DOCTYPE html>`.\n\n```html\n<!DOCTYPE html>\n```\n\nThe `<!DOCTYPE html>` tag is a [doctype](https://developer.mozilla.org/en-US/docs/Glossary/Doctype) tag. It is a required tag that is added at the top of all HTML documents. This tag makes sure everything behaves as expected. Note that there is no closing tag as we are not wrapping this tag around any content.","metadata":{"id":525}}],["526",{"pageContent":"Next we will add an `<html>` element:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\"></html>\n```\n\nThe `<html>` tag wraps around all the content and is often called the root element. This tag tells the browser that everything enclosed inside this tag is HTML. HTML elements can also be nested inside each other. All further elements we add will be nested inside the `<html>` element.\n\nAlso, notice how we set the language to USA English by setting the value of the `lang` attribute to `\"en-US\"`. We can pass extra information to an HTML element using attributes.\n\n## The `<head>` element\n\nInside the `<html>` element, the content is divided into a `<head>` element and a `<body>` element.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head> </head>\n\n  <body></body>\n</html>\n```\n\nThe head element is a container where we include all the meta information. We can also include extra information about the website, which we don't want to render, or show, on the website itself. This extra information can include data to improve our website's SEO ranking, links to other files, and so on.\n\nLet's add these elements to the `<head>`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My 90s website</title>\n  </head>\n\n  <body></body>\n</html>\n```\n\nTo display an HTML page correctly, a web browser must know which character set to use. Adding the line `<meta charset=\"utf-8\">` tells our browser to use the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) character set. UTF-8 is the recommended character set as it covers almost all of the characters and symbols in the world!\n\nThe `<title>` element contains the title of our website. This title appears in the browser tab. It is also used to describe the page when you bookmark it.\n\n:::tip\n\nIn Replit you can generate this boilerplate code by typing `!` followed by the tab key in an empty HTML file.\n\n:::\n\n## The `<body>` element","metadata":{"id":526}}],["527",{"pageContent":":::tip\n\nIn Replit you can generate this boilerplate code by typing `!` followed by the tab key in an empty HTML file.\n\n:::\n\n## The `<body>` element\n\nEverything we want to display on our website will be nested within the `<body>` element. We will spend most of our time as web developers in this element.\n\nLet's add a `<header>` element and a heading to the `<body>` of our site:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My 90s Website</title>\n  </head>\n  <body>\n    <header>\n      <h1>My 90s Website</h1>\n    </header>\n  </body>\n</html>\n```\n\nThe `<header>` element usually contains introductory and/or navigational content. Don't confuse the `<header>` with the `<head>` element.\n\nThe `<h1>` element is the level one heading element. Heading elements allow us to specify that certain parts of our content are headings or subheadings. There are six heading levels in HTML, `<h1>` to `<h6>`.\n\n:::info Indentation\n\nThe indentation in the HTML code is not required. The only reason we indent our code is to make it easier to read.\n\n:::\n\n## Adding more content\n\nLet's add some more content to our site. We already have a heading, so let's add a `<main>` element to our web page:\n\n```html\n<body>\n  <header>\n    <h1>My 90s Website</h1>\n  </header>\n  <main></main>\n</body>\n```\n\nThe `<main>` element represents the dominant content of the `body` of a document.\n\nNext we will add some text or paragraph elements:\n\n```html\n<body>\n  <header>\n    <h1>My 90s Website</h1>\n  </header>\n  <main>\n    <p>\n      This is a <strong>90s inspired</strong> website. Today, 90s web design is\n      more likely to raise a smile than admiration.\n    </p>\n    <hr />\n    <p>\n      See what Apple, Microsoft, Yahoo or Pepsi websites looked like in the\n      mid-1990s.\n    </p>\n  </main>\n</body>\n```\n\nWe have added two paragraph elements under the heading. According to the [documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p):","metadata":{"id":527}}],["528",{"pageContent":"mid-1990s.\n    </p>\n  </main>\n</body>\n```\n\nWe have added two paragraph elements under the heading. According to the [documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p):\n\n> The **`<p>`** [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.\n\nWe have also wrapped the text \"90s inspired\" with the `<strong>` tag. The `<strong>` element indicates that its contents have strong importance. The browser will render the contents of `<strong>` element in bold type.\n\nAlso, notice the `<hr>` element which is adding a horizontal separator between the two paragraphs. There are certain elements like the `<hr>` element that do not require a closing tag as they do not wrap around any content.\n\n:::tip Think\n\nWhich other element have we used that didn't require a closing tag?\n\n:::\n\nHit the \"Run\" button on your Replit site and you will see the new text appear in the browser preview window.\n\n![paragraphs added](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/paragraphs-added.png)\n\n## Adding links\n\nNext, we will add a link to [the web design museum](https://www.webdesignmuseum.org/exhibitions/web-design-in-the-90s) so our readers can see some actual 90s websites. We want to make some of our text clickable. We can do that by using [the anchor tag `<a>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a).\n\nFirst wrap the text that you want to make clickable with the `<a></a>` tags, like so:\n\n```html\n<p>\n  See what Apple, Microsoft, Yahoo or Pepsi websites\n  <a>looked like in the mid-1990s</a>.\n</p>\n```\n\nThe anchor element requires an `href` or hyperlink reference attribute, which is the URL that the hyperlink points to.\n\n```html\n<p>","metadata":{"id":528}}],["529",{"pageContent":"<a>looked like in the mid-1990s</a>.\n</p>\n```\n\nThe anchor element requires an `href` or hyperlink reference attribute, which is the URL that the hyperlink points to.\n\n```html\n<p>\n  See what Apple, Microsoft, Yahoo or Pepsi websites\n  <a href=\"https://www.webdesignmuseum.org/exhibitions/web-design-in-the-90s\"\n    >looked like in the mid-1990s</a\n  >.\n</p>\n```\n\nHit \"Run\" and you should see the link in action:\n\n![hyperlink-added.png](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/hyperlink-added.png)\n\n## Adding images\n\nYou can't have a 90s-inspired website without the animated GIF of the dancing baby!\n\nCreate a new folder in the \"Files\" section in your repl, and name it \"img\". Download the images from [here](https://tutorial-files.util.repl.co/nineties-website/assets.zip) and upload them to the \"img\" folder.\n\nImages are added with an [image element `<img>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img). Inside this tag we need to give the image location, or _source_, with a `src` attribute, like so:\n\n```html\n<img src=\"img/dancing-baby.gif\" />\n```\n\nWe will add the image within the `<header>` element. We will also add a description of the image with an `alt` attribute:\n\n```html\n<body>\n  <header>\n    <h1>My 90s Website</h1>\n    <img src=\"img/dancing-baby.gif\" alt=\"Animated GIF of a dancing baby\" />\n  </header>\n  <main>\n    <p>\n      This is a <strong>90s inspired</strong> website. Today, 90s web design is\n      more likely to raise a smile than admiration.\n    </p>\n    <hr />\n    <p>\n      See what Apple, Microsoft, Yahoo or Pepsi websites\n      <a\n        href=\"https://www.webdesignmuseum.org/exhibitions/web-design-in-the-90s\"\n        >looked like in the mid-1990s</a\n      >.\n    </p>\n  </main>\n</body>\n```\n\nThis is how our website looks:\n\n![image added](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/image-added.gif)\n\n## The `<div>` element","metadata":{"id":529}}],["530",{"pageContent":">.\n    </p>\n  </main>\n</body>\n```\n\nThis is how our website looks:\n\n![image added](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/image-added.gif)\n\n## The `<div>` element\n\nThe `<div>` element is like an empty box. We can use it when we need to break the content on our website into different sections, to control styling, and more.\n\nFor our site, we will use the `<div>` element to add a background image to our site later.\n\nLet's add a new `<div>` element to our \"index.html\" file and nest everything else inside it:\n\n```html\n<body>\n  <div>\n    <!-- This is the new addition. -->\n    <header>\n      <h1>My 90s Website</h1>\n      <img src=\"img/dancing-baby.gif\" alt=\"\" />\n    </header>\n    <main>\n      <p>\n        This is a <strong>90s inspired</strong> website. Today, 90s web design\n        is more likely to raise a smile than admiration.\n      </p>\n      <hr />\n      <p>\n        See what Apple, Microsoft, Yahoo or Pepsi websites\n        <a\n          href=\"https://www.webdesignmuseum.org/exhibitions/web-design-in-the-90s\"\n          >looked like in the mid-1990s</a\n        >.\n      </p>\n    </main>\n  </div>\n  <!-- Don't forget to close the div element -->\n</body>\n```\n\n:::info Comments\n\nThe `<!-- -->` characters mark a comment. Anything written between these two tags will be ignored by the browser. We add comments to explain our code to other humans.\n\n:::\n\n## Linking files\n\nThe website has all the content that we need. Now it's time to add some CSS magic.\n\nBefore we write any CSS, we need to leave instructions for our browser so it knows where to look for our CSS file.\n\nTo link the CSS file to the HTML file, we will use a [link element `<link>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link). The `<link>` element is used to specify relationships between the current document and an external resource. This element is most commonly used to link to CSS, but it can be used to link other files.\n\nWe will add the `<link>` element within the `<head>` element of our site:\n\n```html\n<head>","metadata":{"id":530}}],["531",{"pageContent":"We will add the `<link>` element within the `<head>` element of our site:\n\n```html\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"style.css\" />\n  <title>My 90s Website</title>\n</head>\n```\n\nThe `<link>` element needs a `rel` or relationship attribute and an `href` attribute. We set the `rel` attribute to \"stylesheet\" to tell our browser what kind of document are we linking. We will add the name of our stylesheet as the value of the `href` attribute.\n\n:::info\n\nIf your CSS file is in another folder or directory, you will need to provide the complete path to the CSS sheet.\n\n:::\n\nNotice we have also added a new `<meta>` tag. This gives the browser instructions on how to control the page's dimensions and scaling. You can read more about it on [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag).\n\n## Basic styling\n\nIn our CSS file, we can list the HTML elements we’ve used and say how we want them to look. We use CSS properties and values to control the look of our elements.\n\nThere are many ways to point to the elements we want. The easiest way is to use the element's name.\n\nFor example, the following code will select the `<body>` element, and change its `background-color` property to black:\n\n```css\nbody {\n  background-color: black;\n}\n```\n\nYou can also select multiple elements at once. For example, the following code will change the text color of both `<h1>` and `<p>` elements:\n\n```css\nh1,\np {\n  color: blueviolet;\n}\n```\n\nWe can also declare more than one rule at once. For example, the following group of rules will alter the size and the extra spacing (padding) at the top of our `<h1>` elements:\n\n```css\nh1 {\n  font-size: 4rem;\n  padding-top: 10rem;\n}\n```\n\n![css applied](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/css-applied-1.png)","metadata":{"id":531}}],["532",{"pageContent":"```css\nh1 {\n  font-size: 4rem;\n  padding-top: 10rem;\n}\n```\n\n![css applied](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/css-applied-1.png)\n\nThere are a lot of CSS properties. Covering them all is beyond the scope of this tutorial. You can look up all the CSS properties on [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/Reference).\n\nAnother good way to find CSS properties and their values for your use case is searching for them using your favorite search engine. For example, if we want to learn how to align the text on our web page to the center, we can search \"CSS text align\".\n\nThe first result was this [MDN page](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align) which explains the usage of `text-align` property. Add this new property to your code:\n\n```css\nbody {\n  background-color: black;\n  text-align: center;\n}\n```\n\n:::tip\n\nA good way to learn CSS is by playing around with different properties and their values.\n\n:::\n\n## HTML classes\n\nSelecting elements by name comes in handy when we want to select all elements of the same type on a page at once. But for better control, we may want to select and make changes to individual elements. One way to select individual elements is using _classes_.\n\n_HTML classes_ are attributes that we can add to elements. Once an element has a class name, we can use this in our CSS. You can think of classes as custom labels that we attach to our elements.\n\nLet's add a class `bigger-text` to our first `<p>` element:\n\n```html\n<p class=\"bigger-text\">\n  This is a <strong>90s inspired</strong> website. Today, 90s web design is more\n  likely to raise a smile than admiration.\n</p>\n```\n\nNaming the classes is totally up to you. You can name the classes whatever way you want. But it's a good practice to give classes a descriptive name.","metadata":{"id":532}}],["533",{"pageContent":"likely to raise a smile than admiration.\n</p>\n```\n\nNaming the classes is totally up to you. You can name the classes whatever way you want. But it's a good practice to give classes a descriptive name.\n\nIn our `style.css` file we can select the element with the class `bigger-text`. To tell the CSS that we are selecting a class, and not a built-in HTML element, we have to add a dot `.` before the class name. For example, we can select the `bigger-text` class and change its fonts to a different size like so:\n\n```css\n.bigger-text {\n  font-size: 1.5rem;\n}\n```\n\n:::info\n\nCSS has several different units for expressing length. We are using a relative size unit `rem` here. But we can also use absolute units like `px`, which stands for pixels.\n\n:::\n\nLet's also add a class `container` to our `<div>` element and use it to add a background image:\n\n```html\n<body>\n  <div class=\"container\">\n    <header>...</header>\n    <main>...</main>\n  </div>\n</body>\n```\n\nUpload the `window.png` file to your image folder, if you haven't already. Now add the following CSS code to your `style.css` file:\n\n```css\n.container {\n  background: url(\"img/window.png\");\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: contain;\n  height: 800px;\n  width: 800px;\n  margin: auto;\n}\n```\n\nCSS properties are pretty self-explanatory. In the code above, we use an image as a background with a `url()` function. This is just like passing the URL of an image to the `href` attribute in HTML.\n\nNext, we tell the browser to position this image in the center and not to repeat it multiple times. We also set the height and width. This time we use absolute length units `px`.\n\nThe `margin` property controls the extra space around an element. Setting it to `auto` means we want equal space all around an element, which is a good way to center an element.\n\n![css applied](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/css-applied-2.png)","metadata":{"id":533}}],["534",{"pageContent":"![css applied](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/css-applied-2.png)\n\nLet's add our emoji image to the `body` element to make our website as eye-watering as possible 😀\n\n```css\nbody {\n  background: black url(\"img/emoji.png\");\n  text-align: center;\n}\n```\n\nNotice we changed the `background-color` property to `background` and added both a color and an image to it in a single line.\n\nAlso notice that this time we didn't use the `background-repeat: no-repeat` which resulted in our image repeating multiple times to fill the whole `body` element.\n\n![css applied 3](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/css-applied-3.png)\n\n## Custom domain\n\nOur website is done! We can share it with the world by sharing the URL of our repl.\n\n![replit url](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/replit-url.png)\n\nThere is one problem, however. The URL is not very reader-friendly. We want something easier like \"ilove90sdesign.com\".\n\nThere are many places you can buy a custom URL or domain. Some of them are [Google Domains](https://domains.google/v2/), [GoDaddy](https://www.godaddy.com), and [Namecheap](https://www.namecheap.com/).\n\nLet's walk through the process of connecting our repl to a custom domain from Namecheap.\n\nBuy a domain on Namecheap.\n\nNext, in your Replit site, click on the pencil icon in the browser preview window and click on \"Create Domain Link\". Enter your domain and the domain linking window will open:\n\n![domain linking](https://replit-docs-images.bardia.repl.co/images/tutorials/nineties-website/domain-linking.png)\n\nCopy the IP address from the \"Domain Linking\" dialog.\n\nSign in to your Namecheap account. Follow the instructions from step 3 of [this guide](https://www.namecheap.com/support/knowledgebase/article.aspx/9837/46/how-to-connect-a-domain-to-a-server-or-hosting/). Select \"@\" for \"Host\" and enter the IP address that you have copied above in the \"IP Address\" field.","metadata":{"id":534}}],["535",{"pageContent":"Click \"Save changes\". Back in your Replit site, click the \"Next\" button. Replit will verify the domain and you are done!\n\n:::note\n\nIt can take some time before the changes take effect.\n\n:::\n\n## Where next?\n\nThat's it for this tutorial, but you can build your site further. Try adding more sections to your website, or play around with CSS properties and selectors to give your site a different look.\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/My-90s-website?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":535}}],["536",{"pageContent":"---\ntitle: Make Snake with vanilla JavaScript\n---\n\n# Make Snake with vanilla JavaScript\n\nSnake is a simple game that is great for learning the basics of game development. It can be basic, like the classic Nokia cellphone Snake game, or it can be more complex with added features such as obstacles or making it a two-player game.\n\nIn this tutorial, we'll implement a simple version of Snake, using HTML, CSS, and JavaScript.\n\n![Snake game](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/snake-game.gif)\n\n## Getting started\n\nWe'll use the [Replit](https://replit.com/) web IDE to create our Snake game. This means that you can do this tutorial in the browser, and it will be easy to share your game online. If you don't already have a Replit account, [create one now](https://replit.com/signup).\n\nFor the Snake game, we'll need to:\n\n- Create a grid with cells - the game grid where the snake and food will be.\n- Move the snake from cell to cell.\n- Control the snake's direction.\n- Randomly place food items.\n- Detect when the snake's head touches the food.\n- Detect when the snake hits the wall of the game grid.\n- Detect when the snake hits itself.\n- Keep track of the score - how many food items are eaten.\n\nLet's get started and create a new project in [Replit](https://replit.com/).\n\n## Creating a new project in Replit\n\nHead over to [Replit](https://replit.com/) and create a new repl. Choose **HTML, CSS, JS** as your project type.\n\n![Replit - how to create a new project](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/replit-how-to-use.png)\n\n## Setting up the folder structure","metadata":{"id":536}}],["537",{"pageContent":"![Replit - how to create a new project](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/replit-how-to-use.png)\n\n## Setting up the folder structure\n\nOur main JavaScript module will be the `script.js` file. We'll have a utility module, `utils.js` for some utility functions. A utility function is a generic function that performs a task that we could reuse in another project. We'll create two utility functions: A wait function that pauses an async function for a defined amount of time and a function to get a random element from an array.\n\nCreate a `utils.js` file so that you have the following files in your project:\n\n```\n|__ index.html\n|__ style.css\n|__ script.js\n|__ utils.js\n```\n\n## Adding the HTML\n\nLet's add the HTML needed for the Snake game. Replace the code in your `index.html` file with the following code:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n    <script src=\"script.js\" type=\"module\" defer></script>\n    <title>Snake - vanilla JavaScript</title>\n  </head>\n  <body>\n    <button class=\"start-btn\" data-content=\"Start\">Start</button>\n    <div class=\"score\">Score: <span>0</span></div>\n    <div class=\"grid\"></div>\n    <div class=\"keys-container\">\n      <button id=\"ArrowUp\">\n        <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n          <g transform=\"rotate(0, 5, 5)\">\n            <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n          </g>\n        </svg>\n      </button>\n      <button id=\"ArrowLeft\">\n        <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n          <g transform=\"rotate(-90, 5, 5)\">\n            <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n          </g>\n        </svg>\n      </button>\n      <button id=\"ArrowDown\">\n        <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n          <g transform=\"rotate(180, 5, 5)\">\n            <path d=\"M5,4 L7,6 L3,6 L5,4\" />","metadata":{"id":537}}],["538",{"pageContent":"</button>\n      <button id=\"ArrowDown\">\n        <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n          <g transform=\"rotate(180, 5, 5)\">\n            <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n          </g>\n        </svg>\n      </button>\n      <button id=\"ArrowRight\">\n        <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n          <g transform=\"rotate(90, 5, 5)\">\n            <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n          </g>\n        </svg>\n      </button>\n    </div>\n  </body>\n</html>\n```\n\nThe `type=module` attribute on the `<script>` tag for the `script.js` file allows us to use [module](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) features in our script. The `<div>` with a `class` of `grid` is the game grid. We'll create the cells of the game grid using JavaScript. The `<div>` with an `id` of `keys` contains the up, down, left, and right buttons that we'll use to change the snake's direction on a mobile device. The icons for the keys are created using SVGs.\n\n## Adding the CSS\n\nNow let's add some basic styling. Replace the code in your `style.css` file with the following code:\n\n```css\n:root {\n  --color-button: #f78400;\n  --color-button-after: #f5f5f5;\n  --color-button: #424246;\n  --color-border: #373737;\n}\n\n* {\n  margin: 0;\n}\n\nhtml {\n  font-family: \"Trebuchet MS\", \"Lucida Sans Unicode\", \"Lucida Grande\",\n    \"Lucida Sans\", Arial, sans-serif;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n}\n\nbutton {\n  cursor: pointer;\n}\n\n.grid {\n  display: flex;\n  flex-wrap: wrap;\n  border: 2px solid var(--color-border);\n  min-height: 200px;\n  min-width: 200px;\n}\n\n.start-btn {\n  position: relative;\n  font-size: 1.15rem;\n  font-weight: bold;\n  background: var(--color-button);\n  padding: 0.6rem 1rem;\n  margin: 1rem 0;\n  border: 0;\n}\n.start-btn::after {\n  position: absolute;\n  content: attr(data-content);\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  box-shadow: inset 0 0 2px var(--color-border);\n  background-color: var(--color-button-after);\n  display: flex;","metadata":{"id":538}}],["539",{"pageContent":"content: attr(data-content);\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  box-shadow: inset 0 0 2px var(--color-border);\n  background-color: var(--color-button-after);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transform: translate(-0.2rem, -0.2rem);\n  transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n}\n\n.start-btn:hover::after,\n.start-btn:focus::after {\n  transform: translate(0);\n}\n\n.grid div {\n  transition: transform 0.4s ease;\n}\n\n.food-item {\n  transform: scale(1.15);\n}\n\n.keys-container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \".    up   .\"\n    \"left down right\";\n  grid-gap: 10px;\n  padding: 1rem;\n}\n\n.keys-container button {\n  background-color: var(--color-button-after);\n  border: none;\n  padding: 0.5rem;\n  box-shadow: 3px 3px 3px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s ease;\n}\n\n.keys-container button:focus {\n  box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n}\n\n#ArrowUp {\n  grid-area: up;\n}\n\n#ArrowDown {\n  grid-area: down;\n}\n\n#ArrowLeft {\n  grid-area: left;\n}\n\n#ArrowRight {\n  grid-area: right;\n}\n\n.shake {\n  animation: shake 0.5s linear 1;\n}\n\n@keyframes shake {\n  10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```","metadata":{"id":539}}],["540",{"pageContent":"}\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n}\n```\n\nWe use [CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties) to store the colors that we'll use. The `body` selector uses Flexbox to center the snake game grid on the screen. The start button, which has a `class` of `start-btn`, is styled using the `::after` [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements). This is done to give the button a layered effect. The `::after` pseudo-element is on top of the button, the text is set using the `content` CSS property. We use a [data attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*) to label the button. The data attribute `data-content` was added to the start button in the `index.html` file. The shake [keyframe animation](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes) will be used to shake the game grid when the snake hits the walls or itself.\n\n## Setting up the JavaScript structure\n\nReplace the code in your `script.js` file with the following code:\n\n```javascript\nimport { randomElementFromArray, wait } from \"./utils.js\";\n\nconst foodItemsArray = [\n  \"🐁\",\n  \"🍇\",\n  \"🍉\",\n  \"🍈\",\n  \"🍓\",\n  \"🍍\",\n  \"🍌\",\n  \"🥝\",\n  \"🍏\",\n  \"🍎\",\n  \"🍔\",\n  \"🍅\",\n  \"🥚\",\n];\n```\n\nWe import the utility functions that we'll soon create. The `foodItemsArray` variable contains the food items that will be randomly selected and added to the game grid. You can change the food item emojis if you want to.\n\n## Adding utility functions\n\nAdd the following lines to the `utils.js` file:\n\n```javascript\nexport function wait(ms = 0) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function randomElementFromArray(arr) {\n  const element = arr[Math.floor(Math.random() * arr.length)];\n  return element;\n}\n```","metadata":{"id":540}}],["541",{"pageContent":"return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function randomElementFromArray(arr) {\n  const element = arr[Math.floor(Math.random() * arr.length)];\n  return element;\n}\n```\n\nThe `wait` function takes in a time, in milliseconds, as an argument. It returns a promise that resolves after the time passed in has elapsed. We'll use it to pause an async function that will be used in the game. The `randomElementFromArray` function takes in an array as an argument and returns a randomly selected element from the array. We'll use it to randomly select a food item from the `foodItemsArray` variable.\n\nNow try running the code, by pushing the `Run` button at the top of the Replit window. You should see the start and arrow buttons:\n\n![Basic code - view in the browser](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/basic-code.png)\n\n## Building the game logic\n\nBefore we start coding the game logic, let's look at an overview of how we'll design the game.\n\n## Game overview\n\nThere are four main functions we'll use to make the game:\n\n- `startGame`\n- `gameLoop`\n- `createFood`\n- `moveSnake`\n\nWe'll run the `startGame` function when the user clicks start button. In this function, the game grid cells are cleared, the snake and a randomly positioned food item are added to the game grid, and the `gameLoop` function is run. We run `gameLoop` every x milliseconds by using [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval). The snake moves one cell in each game loop.\n\nIn the `gameLoop` function, we check for collisions with the wall of the game grid or the snake itself. We also check if the snake head is in the same cell as a food item. If it is, we remove the food item and create a new randomly positioned food item using the `createFood` function. The snake length is increased by adding a new tail index to the `currentSnake` array. We also increase the score.","metadata":{"id":541}}],["542",{"pageContent":"The snake's body, stored in the `currentSnake` variable, is represented as an array indicating the cell indexes of the snake. The first element in the array is the snake's head, and the last element in the array is the snake's tail. The game grid cells containing the snake are given a `class` of `snake` so that we can detect collisions. We use the cell index positions to style the snake: giving the snake cells a background color and giving the snake head two eyes.\n\nThe game grid cell containing the food item is given a `class` of `food-item` so that we can detect when the snake collides with this (and eats the food). The cell index of the food item is stored so that we can find the food item cell and place the food item emoji in it. When the game grid is cleared at the start of the game, these added classes are removed from each cell and the cell's inner text content is cleared.\n\nThe user can move the snake using the keyboard arrow keys or by clicking the arrow keys on the screen. We listen for the \"keydown\", \"mousedown\" or \"touchstart\" events on the arrow keys and use the `moveSnake` function to change the direction of the snake. These events change the `direction` variable value. This variable determines which direction the snake moves. In each game loop, the `direction` value will be added to the cell index position of the snake's head to give the snake a new head position. The snake's tail will be removed. The `direction` value indicates the change in index position required for the snake's head to move one cell in the current direction, The `direction` values are as follows:\n\n- right: +1\n- left: -1\n- up: -10\n- down: +10\n\n![Vanilla JS snake game logic outline](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/vanilla-js-snake-game-logic-outline.png)\n\nNow let's create the game.\n\n## Creating the game grid\n\nAdd the following lines to the `script.js` file:\n\n```javascript\n// game display elements\nconst grid = document.querySelector(\".grid\");","metadata":{"id":542}}],["543",{"pageContent":"Now let's create the game.\n\n## Creating the game grid\n\nAdd the following lines to the `script.js` file:\n\n```javascript\n// game display elements\nconst grid = document.querySelector(\".grid\");\nconst scoreDisplay = document.querySelector(\"span\");\nconst startBtn = document.querySelector(\".start-btn\");\nconst keyBtns = document.querySelectorAll(\".keys-container button\");\n\n// game variables\nconst width = 10;\nconst numCells = width * width;\ngrid.style.width = `${width * 10 * 2}px`;\ngrid.style.height = `${width * 10 * 2}px`;\n\n// create grid cells\nfor (let i = 0; i < width * width; i++) {\n  const cell = document.createElement(\"div\");\n  cell.style.width = `${width * 2}px`;\n  cell.style.height = `${width * 2}px`;\n  grid.appendChild(cell);\n}\nconst cells = document.querySelectorAll(\".grid div\");\n```\n\nWe first get the game display HTML elements from the DOM. We'll only use the `grid` element now. We then create some of the game variables that we'll need. We set the `width` to 10 cells and set the game grid's width and height based on the `width` variable. The square grid is 200 px wide.\n\nWe then create the grid cells using a for loop. The number of cells is equal to the `width` squared. We create each cell using the `createElement` method. Each square cell is 20 px wide. We then append each cell to the grid. The grid is a flex container and the cells, which are flex items, wrap after each row, which is 10 cells long. We then select the cells using the `querySelectorAll` method for later use.\n\nRun your code again and you should now be able to see our game grid as a square below the \"Start\" button.\n\n![Game grid](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/game-grid.png)\n\n## Adding the snake\n\nAdd the following game variables in the `// game variables` section in the `script.js` file:\n\n```javascript\nlet currentSnake = [2, 1, 0];\nlet snakeColor = Math.floor(Math.random() * 360);\nlet snakeColorIncrement = 10;\n```","metadata":{"id":543}}],["544",{"pageContent":"```javascript\nlet currentSnake = [2, 1, 0];\nlet snakeColor = Math.floor(Math.random() * 360);\nlet snakeColorIncrement = 10;\n```\n\nNow add the following function and event listener to the bottom of the `script.js` file:\n\n```javascript\nfunction startGame() {\n  currentSnake = [2, 1, 0];\n  currentSnake.forEach((i) => {\n    snakeColor += snakeColorIncrement % 360;\n    cells[i].style.background = `hsl(${snakeColor}, 100%, 50%)`;\n    cells[i].classList.add(\"snake\");\n  });\n}\n\nstartBtn.addEventListener(\"click\", startGame);\n```\n\nWe define the snake's position on the game grid as an array called `currentSnake`. This indicates the index position of the snake's head [2], body [1] and tail [0] in the game grid. All of the middle elements are the snake's body. At the start of the game, the snake only has one body segment. We also style the snake's body segments using [`hsla()`functional notation](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsla). This is done to give our snake a \"rainbow\" color that changes as it moves. We create a random color value for the hue called `snakeColor`. This has a value between 0 degrees to 360 degrees. It represents an angle of the color circle: Red = 0 degrees = 360 degrees, green = 120 degrees, blue = 240 degrees, etc.\n\nWe loop through the snake segments and give each cell that contains the snake a color. The color changes for each segment as the `snakeColor` increases in each loop. We also add the `class` of `snake` to the game grid cells containing the snake.\n\nNow run the code again and then press the \"Start\" button in the game UI to see the snake on the game grid:\n\n![Adding snake](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/adding-snake.png)\n\nEach time you press the \"Start\" button, the snake's color will change. Inspect the snake cells in your browser dev tools. You will see the added `snake` class and the added `background` color.\n\n## Moving the snake","metadata":{"id":544}}],["545",{"pageContent":"## Moving the snake\n\nLet's get the snake moving by adding the `gameLoop` function. Add the following game variables in the `// game variables` section in the `script.js` file:\n\n```javascript\nlet direction = 1;\nlet intervalTime = 200; // determines speed - frequency of game loop calls\nlet interval = 0;\n```\n\nWe set the initial `direction` to one. In each game loop, the snake's index position in the game grid will increase by one, so the snake will move to the right. The game loop will run five times per second as the interval time is set to 200 ms. The `interval` variable will be the returned `intervalID` from the [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) function that we'll use to run the game loop continuously. The `interval` variable will be used to cancel the interval so that the game loop is stopped when there is a collision.\n\nAdd the following code inside the `startGame` function, at the top:\n\n```javascript\ncurrentSnake.forEach((i) => {\n  cells[i].style.background = \"none\";\n  cells[i].classList.remove(\"snake\");\n  cells[i].innerText = \"\";\n});\nclearInterval(interval);\ndirection = 1;\n```\n\nAt the start of a game, we remove the snake from the game grid cells. We clear the interval to remove any previous interval and set the direction to it's initial value.\n\nNow add the `gameLoop` function below the `startGame` function:\n\n```javascript\nfunction gameLoop() {\n  cells[currentSnake[0]].innerText = \"\";\n  const tail = currentSnake.pop();\n  cells[tail].classList.remove(\"snake\");\n  cells[tail].style.background = \"none\";\n  currentSnake.unshift(currentSnake[0] + direction); // gives direction to the head\n\n  cells[currentSnake[0]].classList.add(\"snake\");\n  cells[currentSnake[0]].innerText = \"👀\";\n  snakeColor += snakeColorIncrement % 360;\n  cells[currentSnake[0]].style.background = `hsl(${snakeColor}, 100%, 50%)`;\n}\n```","metadata":{"id":545}}],["546",{"pageContent":"cells[currentSnake[0]].innerText = \"👀\";\n  snakeColor += snakeColorIncrement % 360;\n  cells[currentSnake[0]].style.background = `hsl(${snakeColor}, 100%, 50%)`;\n}\n```\n\nWe first clear the `innerText` of the current snake head to remove the emoji eyes from the current snake head. We then remove the tail and add a new head. To get the index of the new head position in the game grid, we add a new head that has an index of the current snake head plus the current direction. We then style the new head by giving it emoji eyes and a background color.\n\nWe also need to call the game loop at the start of the game. Add the following to the `startGame` function, at the bottom:\n\n```javascript\ninterval = setInterval(gameLoop, intervalTime);\n```\n\nNow press the start button to see the snake move along the game grid:\n\n![Moving snake](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/moving-snake.gif)\n\nThe snake moves from index 0 to 99, incrementing its position by one in each game loop.\n\n## Controlling the snake\n\nWe'll add a \"keydown\" event listener and an event handler function to control the snake movement with our keyboard arrow keys. Add the following code below the `gameLoop` function:\n\n```javascript\nfunction moveSnake(moveDirection) {\n  if (moveDirection === \"ArrowRight\") {\n    direction = 1;\n  }\n  if (moveDirection === \"ArrowLeft\") {\n    direction = -1;\n  }\n  if (moveDirection === \"ArrowUp\") {\n    direction = -width;\n  }\n  if (moveDirection === \"ArrowDown\") {\n    direction = width;\n  }\n}\n\nfunction handleKeyMove(e) {\n  if (![\"ArrowRight\", \"ArrowLeft\", \"ArrowUp\", \"ArrowDown\"].includes(e.key))\n    return;\n  moveSnake(e.key);\n}\n\ndocument.addEventListener(\"keydown\", handleKeyMove);\n```\n\nWe added a \"keydown\" event listener that is handled by the `handleKeyMove` function. The `handleKeyMove` function calls the `moveSnake` function if one of the arrow keys is pressed down.\n\nThe `moveSnake` function changes the snake's direction, depending on which arrow key was pressed.","metadata":{"id":546}}],["547",{"pageContent":"The `moveSnake` function changes the snake's direction, depending on which arrow key was pressed.\n\nYou will now be able to change the snake's direction using the arrow keys on your keyboard. However, the snake will be able to move through the walls and move through self. You will also get an error in your console if you go outside of the bounds of the grid by hitting the top or bottom wall. We'll fix this by detecting collisions.\n\n## Detecting collisions with the walls and itself\n\nIn the `gameLoop` function, add the following code below the `cells[currentSnake[0]].innerText = '';` line:\n\n```javascript\nif (\n  (currentSnake[0] + width >= width * width && direction === width) || // hits bottom wall\n  (currentSnake[0] % width === width - 1 && direction === 1) || // hits right wall\n  (currentSnake[0] % width === 0 && direction === -1) || // hits left wall\n  (currentSnake[0] - width < 0 && direction === -width) || // hits the top wall\n  cells[currentSnake[0] + direction].classList.contains(\"snake\") // hits itself\n) {\n  grid.classList.add(\"shake\");\n  clearInterval(interval);\n  return;\n}\n```\n\nThis if statement checks if the current snake index is outside the bounds of the game grid. It also checks if the snake hit itself by checking if the next cell that the snake head will move to has the `snake` class. If there is a collision, the game loop is stopped by clearing the interval and a shake animation is added by adding the `shake` class to the game grid. This will make the game grid shake when there is a collision. This uses the shake keyframe animation that defined earlier in our `style.css` file.\n\nFor the shake animation to work each time we restart a game, we need to remove the `shake` class from the game grid at the start of each game. Do this by adding the following line inside of the `startGame()` function, at the top:\n\n```javascript\ngrid.classList.remove(\"shake\");\n```","metadata":{"id":547}}],["548",{"pageContent":"```javascript\ngrid.classList.remove(\"shake\");\n```\n\nNow, if your snake hits the wall or itself, it will stop the game loop and the game grid will shake. There are two bugs with the snake direction changes. If you are moving in one direction, then press the arrow key to move in the opposite direction, the snake will hit itself. Also, if your snake is going in one direction and then you make two quick 90-degree turns so that the snake moves in the opposite direction, the snake will hit itself. Let's change the `moveSnake` function to fix these issues. Replace your `moveSnake` function with the following:\n\n```javascript\nfunction moveSnake(moveDirection) {\n  let directionVal;\n  if (moveDirection === \"ArrowRight\" && direction !== -1) {\n    directionVal = 1;\n    if (currentSnake[0] + directionVal === currentSnake[1]) return;\n    direction = directionVal;\n  }\n  if (moveDirection === \"ArrowLeft\" && direction !== 1) {\n    directionVal = -1;\n    if (currentSnake[0] + directionVal === currentSnake[1]) return;\n    direction = directionVal;\n  }\n  if (moveDirection === \"ArrowUp\" && direction !== width) {\n    directionVal = -width;\n    if (currentSnake[0] + directionVal === currentSnake[1]) return;\n    direction = directionVal;\n  }\n  if (moveDirection === \"ArrowDown\" && direction !== -width) {\n    directionVal = width;\n    if (currentSnake[0] + directionVal === currentSnake[1]) return;\n    direction = directionVal;\n  }\n}\n```\n\nFor each direction change, we now check that the direction change is not the opposite of the current direction. We also check that the direction change does not cause the snake's head to hit the first segment of its body.\n\n## Adding and eating food\n\nLet's add food items to the game grid. When the snake eats a food item, the score will be increased by one and a new food item will be created. Add the following game variables in the `// game variables` section:\n\n```javascript\nlet foodItemIndex = 0; // first cell\nlet score = 0;\n```","metadata":{"id":548}}],["549",{"pageContent":"```javascript\nlet foodItemIndex = 0; // first cell\nlet score = 0;\n```\n\nThe `foodItemIndex` is the cell index in the game grid that the food item will be added to. We'll randomly position it.\n\nNow let's define the `createFood` function that we'll use to randomly add food items to our game grid. Add the following `createFood` function above the `startGame` function:\n\n```javascript\nasync function createFood() {\n  foodItemIndex = Math.floor(Math.random() * numCells);\n  if (currentSnake.includes(foodItemIndex)) {\n    await wait(100);\n    createFood();\n  } else {\n    cells[foodItemIndex].classList.add(\"food-item\");\n    cells[foodItemIndex].innerText = randomElementFromArray(foodItemsArray);\n  }\n}\n```\n\nIn this recursive async function, we create a random food item index position and add the food item to the game grid. This function is recursive to prevent the food item from being added in a position occupied by the snake. If the random index is on the snake, the `createFood` function is called again to get another random index position. Our `wait` utility function prevents the recursive function from being called too often by pausing the function for 100 ms before each recursive function call.\n\nLet's modify our `startGame` function so that the food items are cleared at the start of the game, the score is reset and a food item is created. Add the following lines to the `startGame` function, above the `interval = setInterval(gameLoop, intervalTime);` line:\n\n```javascript\ncells[foodItemIndex].classList.remove(\"food-item\");\ncells[foodItemIndex].innerText = \"\";\ncreateFood();\nscore = 0;\nscoreDisplay.innerHTML = score;\n```\n\nNow we need to detect if the food item is eaten and if so, add a new food item to the game grid. Add the following lines to the `gameLoop` function, above the `cells[currentSnake[0]].classList.add('snake');` line:\n\n```javascript\nif (cells[currentSnake[0]].classList.contains(\"food-item\")) {\n  cells[currentSnake[0]].classList.remove(\"food-item\");\n  cells[tail].classList.add(\"snake\");","metadata":{"id":549}}],["550",{"pageContent":"```javascript\nif (cells[currentSnake[0]].classList.contains(\"food-item\")) {\n  cells[currentSnake[0]].classList.remove(\"food-item\");\n  cells[tail].classList.add(\"snake\");\n  snakeColor += snakeColorIncrement % 360;\n  cells[tail].style.background = `hsl(${snakeColor}, 100%, 50%)`;\n  currentSnake.push(tail);\n  score++;\n  scoreDisplay.textContent = score;\n  createFood();\n}\n```\n\nThe food item is 'eaten' by checking if the snakes head position cell contains the food item. If it does, we remove the 'food-item' class to remove the food item. We increase the snake's length by adding a new segment to the tail end of the snake. Then we increase the score, and create a new randomly positioned food item.\n\nThe food items increase in size when they are added as we added a scale transform to the `food-item` class in the `style.css` file.\n\nOur snake game is almost complete! The last thing we need to do is make it mobile-friendly by making the on-screen arrow buttons functional.\n\n![Snake eating food items](https://replit-docs-images.bardia.repl.co/images/tutorials/make-snake-game-vanilla-javascript/snake-eating.gif)\n\n## Making the game mobile-friendly\n\nAdd the following lines near the bottom of the `script.js` file, just above the existing event listeners.\n\n```javascript\nfunction handleButtonKeyMove(e) {\n  const { id } = e.currentTarget;\n  moveSnake(id);\n}\nkeyBtns.forEach((keyBtn) => {\n  keyBtn.addEventListener(\"mousedown\", handleButtonKeyMove);\n  keyBtn.addEventListener(\"touchstart\", handleButtonKeyMove);\n});\n```\n\nFor each key button, we add two event listeners: \"mousedown\" and \"touchstart\". We use the `handleButtonKeyMove` function to handle these events. We get the `id` attributes of the on-screen buttons from the HTML `id` attributes that we added in the `index.html` file. These `id` attributes match the corresponding event key strings of the arrow keys on a keyboard. This makes it easy to pass the id string to the `moveSnake` function to handle the direction change.","metadata":{"id":550}}],["551",{"pageContent":"Run your project. Our game is now complete. See how high you can get your score using either your keyboard or the on-screen buttons.\n\n## Next steps\n\nNow that you have built a simple snake game with some basic styling, you might want to improve it or add extra features.\n\nYou can build your own by copying the code above, or by forking our example repl at [replit.com/@ritza/snake-game-vanilla-javascript](https://replit.com/@ritza/snake-game-vanilla-javascript).\n\nHere are some suggestions:\n\n- Make the snake transition from cell to cell a smooth animation.\n- Persist the top five highest scores by storing them in local storage. Create a pop dialog menu to view these high scores.\n- Increase the speed of the snake as the game progresses to make it harder.\n- Add obstacles.\n- Add sound effects.\n- Make different food items have different points.\n\nYou can also [learn how to make Snake with Kaboom](/tutorials/kaboom/build-snake-with-kaboom) is a JavaScript game programming library that makes creating games like this easy.","metadata":{"id":551}}],["552",{"pageContent":"# Pinboard project Part 1: HTML & CSS\n\nIn this project, you'll create a 'Pinboard': a web application to save, categorise and collect images from across the internet. Users will be able to:\n\n- Add new images to the board.\n- Assign specific tags to these images.\n- Filter the board to show only images matching a specific tag.\n\n![Example of the Moodboard functionality](https://docimg.replit.com/images/teamsForEducation/pinboard-project/pinboard.gif)\n\nYou can take a look at the final code that we will have at the end of this project by going to [https://replit.com/@ritza/Pinboard-Project](https://replit.com/@ritza/Pinboard-Project). In addition, you can view it as a standalone page by pressing the `Open in a new tab` button (at the top right of the repl) or by going straight to the following URL: [https://pinboard-project.ritza.repl.co](https://pinboard-project.ritza.repl.co/)\n\nWe'll walk through the creation of the final pinboard in two parts.\n\n- In part 1 (this article), we'll set up the HTML and CSS of our pinboard.\n- In [part 2](/tutorials/html-css-js/pinboard-project-part-2), we'll add the functionality using JavaScript.\n\nIn part 1, we'll work through\n\n- [Creating Your Own Project on Replit](#creating-your-own-project-on-replit)\n- [Basic Structure and Styling](#basic-structure-and-styling)\n- [Markup](#markup)\n  - [Head](#head)\n  - [Datalist](#datalist)\n  - [Header](#header)\n  - [Sections](#sections)\n  - [Dialog](#dialog)\n- [Styling](#styling)\n  - [Universal selector](#universal-selector)\n  - [Scrolling](#scrolling)\n  - [Positioning](#positioning)\n  - [Pseudo-classes](#pseudo-classes)\n  - [Media queries](#media-queries)\n  - [Transition](#transition)\n  - [Object-fit](#object-fit)\n  - [Fixed overlay](#fixed-overlay)\n- [Next Steps](#next-steps)\n\n## Creating Your Own Project on Replit\n\nIf you haven't already, head to the [signup page](https://replit.com/signup) and create a Replit account. Once created, set up a new project by:\n\n1. Clicking on the `+ New repl` button.\n2. Choosing the \"HTML, CSS, JS\" language.","metadata":{"id":552}}],["553",{"pageContent":"1. Clicking on the `+ New repl` button.\n2. Choosing the \"HTML, CSS, JS\" language.\n3. Giving your repl a name: In our case \"pinboard-project\".\n4. Clicking the `Create repl` button.\n\n![Creating a new Repl](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-1.png)\n\nBecause we selected \"HTML, CSS, JS\" as our repl language, Replit has created the basic files needed for our front-end project, which should be:\n\n- `index.html`\n- `style.css`\n- `script.js`\n\n## Basic Structure and Styling\n\nWe'll start off with a basic skeleton with some hard-coded examples in it. First, we need to open our `style.css` file and add the following styling to it. If you are unsure what it does, don't worry – we'll discuss it in depth later.\n\n```css\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  padding: 0;\n  margin: 0;\n  background-color: #f4b0b0;\n  font-family: \"Helvetica neue\", Helvetica, Arial, sans-serif;\n  overflow-y: scroll;\n  overflow-x: hidden;\n}\n\n.title {\n  font-size: 4rem;\n  text-align: center;\n  font-family: \"Bungee Shade\", cursive;\n  color: purple;\n  display: none;\n}\n\n@media (min-width: 40rem) {\n  .title {\n    display: block;\n  }\n}\n\n.field {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n  font-weight: bold;\n  letter-spacing: 0.5px;\n  position: relative;\n  cursor: pointer;\n  max-width: 40rem;\n}\n\n.label {\n  position: absolute;\n  font-size: 0.75rem;\n  left: 1rem;\n  top: 1rem;\n  opacity: 0.5;\n  text-transform: uppercase;\n  font-weight: bold;\n}\n\n.input {\n  border-radius: 6px;\n  font-weight: bold;\n  padding: 2rem 0.75rem 0.75rem;\n  width: 100%;\n  font-size: 1.5rem;\n  box-shadow: 0 0 5px #fc47bb;\n}\n\n.controls {\n  display: flex;\n  justify-content: space-between;\n  padding: 2rem;\n  flex-wrap: wrap;\n}\n\n.button {\n  border-radius: 6px;\n  padding: 1rem;\n  font-size: 2rem;\n  font-family: \"Montserrat\", sans-serif;\n  font-weight: bold;\n  white-space: nowrap;\n  cursor: pointer;\n  margin: 0.5rem 0;\n}\n\n.button:disabled {\n  cursor: not-allowed;\n}\n\n.button:not(:disabled):hover {\n  background: #ccc;\n}\n\n.list {\n  margin: -1rem;\n  display: flex;","metadata":{"id":553}}],["554",{"pageContent":"white-space: nowrap;\n  cursor: pointer;\n  margin: 0.5rem 0;\n}\n\n.button:disabled {\n  cursor: not-allowed;\n}\n\n.button:not(:disabled):hover {\n  background: #ccc;\n}\n\n.list {\n  margin: -1rem;\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0 1rem 4rem;\n}\n\n.pin {\n  position: relative;\n  padding: 1rem;\n  width: 100%;\n}\n\n@media (min-width: 40rem) {\n  .pin {\n    width: 50%;\n  }\n}\n\n@media (min-width: 65rem) {\n  .pin {\n    width: 33.333333333333%;\n  }\n}\n\n@media (min-width: 100rem) {\n  .pin {\n    width: 25%;\n  }\n}\n\n.info {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  opacity: 0;\n  transition: opacity 0.3s, transform 0.3s;\n  list-style: none;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  transform: translateY(1rem);\n}\n\n.pin:hover .info {\n  opacity: 1;\n  transform: translateY(-1rem);\n}\n\n.remove {\n  position: absolute;\n  right: 2rem;\n  top: 2rem;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 2.5rem;\n  width: 2.5rem;\n  font-size: 1.5rem;\n  font-weight: bold;\n  font-family: \"Montserrat\", sans-serif;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.3s, transform 0.3s;\n  transform: translateY(-1rem);\n}\n\n.pin:hover .remove {\n  transform: translateY(0);\n  opacity: 1;\n}\n\n.remove:hover {\n  background: #ccc;\n}\n\n.image {\n  width: 100%;\n  height: 20rem;\n  object-fit: cover;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  background-color: #d18c8c;\n}\n\n.tag {\n  margin: 0.5rem;\n  border-radius: 15px;\n  padding: 1rem;\n  font-size: 1rem;\n  font-family: \"Montserrat\", sans-serif;\n  font-weight: bold;\n  cursor: pointer;\n  text-transform: capitalize;\n}\n\n.tag:hover {\n  background: #ccc;\n}\n\n.overlay {\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14),\n    0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n\n.form {\n  background: white;\n  width: 100%;\n  max-width: 40rem;\n  border-radius: 16px;\n}","metadata":{"id":554}}],["555",{"pageContent":"0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n\n.form {\n  background: white;\n  width: 100%;\n  max-width: 40rem;\n  border-radius: 16px;\n}\n\n.dialog-list {\n  list-style: none;\n  padding: 1rem;\n}\n\n.dialog-item {\n  padding: 1rem;\n  text-align: center;\n}\n\n.helper {\n  display: block;\n  padding: 0.75rem 0;\n  opacity: 0.6;\n}\n\n.hidden {\n  display: none;\n}\n```\n\nAfter adding the above code to `style.css`, open your `index.html` file and replace all of the existing code with the following snippet.\n\n```html\n<!DOCTYPE html>\n\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>My Moodboard</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\n    <link rel=\"stylesheet\" href=\"./style.css\" />\n    <script src=\"./script.js\" defer></script>\n\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Bungee+Shade&family=Montserrat:wght@400;700&display=swap\"\n      rel=\"stylesheet\"\n    />\n  </head>\n\n  <body id=\"app\">\n    <datalist id=\"existing-tags\">\n      <option>Engineering</option>\n      <option>Headphones</option>\n      <option>Wellness</option>\n      <option>Ocean</option>\n      <option>Office</option>\n      <option>Coding</option>\n      <option>Desk</option>\n      <option>Boxing</option>\n      <option>Lab</option>\n    </datalist>\n\n    <header>\n      <h1 class=\"title\">My Moodboard</h1>\n\n      <div class=\"controls\">\n        <label class=\"field\" for=\"filter-input\">\n          <span class=\"label\">Filter</span>\n          <input\n            type=\"search\"\n            id=\"filter-input\"\n            class=\"input\"\n            list=\"existing-tags\"\n            placeholder=\"None\"\n          />\n        </label>\n\n        <button class=\"button\" id=\"dialog-start\">Add New Image</button>\n      </div>\n    </header>\n\n    <main>\n      <div class=\"list\" id=\"pins-list\">\n        <section class=\"pin\">\n          <img\n            class=\"image\"\n            src=\"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\"\n          />\n\n          <ul class=\"info\">\n            <li class=\"tag-wrap\">","metadata":{"id":555}}],["556",{"pageContent":"<img\n            class=\"image\"\n            src=\"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\"\n          />\n\n          <ul class=\"info\">\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">engineering</button>\n            </li>\n          </ul>\n\n          <button\n            class=\"remove\"\n            aria-label=\"remove\"\n            value=\"122203215486581930752615279550\"\n          >\n            &#10005;\n          </button>\n        </section>\n\n        <section class=\"pin\">\n          <img\n            class=\"image\"\n            src=\"https://images.unsplash.com/photo-1572932491814-4833690788ad?w=600\"\n          />\n\n          <ul class=\"info\">\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">headphones</button>\n            </li>\n\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">ocean</button>\n            </li>\n\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">wellness</button>\n            </li>\n          </ul>\n\n          <button\n            class=\"remove\"\n            aria-label=\"remove\"\n            value=\"144685389103194178251333634000\"\n          >\n            &#10005;\n          </button>\n        </section>\n\n        <section class=\"pin\">\n          <img\n            class=\"image\"\n            src=\"https://images.unsplash.com/photo-1580894908361-967195033215?w=600\"\n          />\n\n          <ul class=\"info\">\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">office</button>\n            </li>\n\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">coding</button>\n            </li>\n\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">desk</button>\n            </li>\n          </ul>\n\n          <button\n            class=\"remove\"\n            aria-label=\"remove\"\n            value=\"159279541173033634211014623228\"\n          >\n            &#10005;\n          </button>\n        </section>\n\n        <section class=\"pin\">\n          <img\n            class=\"image\"","metadata":{"id":556}}],["557",{"pageContent":"value=\"159279541173033634211014623228\"\n          >\n            &#10005;\n          </button>\n        </section>\n\n        <section class=\"pin\">\n          <img\n            class=\"image\"\n            src=\"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=600\"\n          />\n\n          <ul class=\"info\">\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">boxing</button>\n            </li>\n\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">wellness</button>\n            </li>\n          </ul>\n\n          <button\n            class=\"remove\"\n            aria-label=\"remove\"\n            value=\"75261220651273643680893699100\"\n          >\n            &#10005;\n          </button>\n        </section>\n\n        <section class=\"pin\">\n          <img\n            class=\"image\"\n            src=\"https://images.unsplash.com/photo-1581094271901-8022df4466f9?w=600\"\n          />\n\n          <ul class=\"info\">\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">lab</button>\n            </li>\n\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">engineering</button>\n            </li>\n          </ul>\n\n          <button\n            class=\"remove\"\n            aria-label=\"remove\"\n            value=\"161051747537834597427464147310\"\n          >\n            &#10005;\n          </button>\n        </section>\n      </div>\n    </main>\n\n    <dialog id=\"dialog\" class=\"overlay hidden\">\n      <form id=\"dialog-form\" class=\"form\">\n        <div class=\"dialog-item\">\n          <label class=\"field\" for=\"dialog-image\">\n            <span class=\"label\">Image URL</span>\n            <input class=\"input\" type=\"url\" id=\"dialog-image\" />\n          </label>\n\n          <em class=\"helper\"\n            >For example:\n            https://images.unsplash.com/photo-1584464491033-06628f3a6b7b</em\n          >\n        </div>\n\n        <div class=\"dialog-item\">\n          <label class=\"field\" for=\"dialog-tags\">\n            <span class=\"label\">Tags</span>\n            <input class=\"input\" type=\"text\" id=\"dialog-tags\" />\n          </label>","metadata":{"id":557}}],["558",{"pageContent":"<label class=\"field\" for=\"dialog-tags\">\n            <span class=\"label\">Tags</span>\n            <input class=\"input\" type=\"text\" id=\"dialog-tags\" />\n          </label>\n\n          <em class=\"helper\"\n            >Separate multiple tags with commas. For example: engineering,\n            coding</em\n          >\n        </div>\n\n        <div class=\"dialog-item\">\n          <button type=\"submit\" class=\"button\" id=\"dialog-submit\" disabled>\n            Save Image\n          </button>\n        </div>\n      </form>\n    </dialog>\n  </body>\n</html>\n```\n\nYikes! That is quite a lot of HTML and CSS. Regardless, if you run your repl (with the big `Run` button at the top) you should see your project spring to life, as shown below.\n\n![First Run](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-2.png)\n\nYou can click the `Open in new tab` button at the far top right to open your project in a separate browser tab as follows:\n\n![Open in new browser tab](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-3.png)\n\n## Markup\n\nLet's walk through the above code step by step, starting with the HTML.\n\n### Head\n\nOur HTML starts off with a `<!DOCTYPE html>` and a `<html>` element. These signal to the browser that we are using modern HTML.\n\nInside the `<html>` element, we see another element titled `<head>`. This element is used to communicate meta information to the browser. The elements inside it won't be shown to the user but provide the browser with useful commands to run before the user-facing HTML content is created. Our `<head>` element has the following nested elements:\n\n```html\n<head>\n  <meta charset=\"utf-8\" />\n  <title>My Moodboard</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\n  <link rel=\"stylesheet\" href=\"./style.css\" />\n  <script src=\"./script.js\" defer></script>\n\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n\n  <link\n    href=\"https://fonts.googleapis.com/css2?family=Bungee+Shade&family=Montserrat:wght@400;700&display=swap\"","metadata":{"id":558}}],["559",{"pageContent":"<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n\n  <link\n    href=\"https://fonts.googleapis.com/css2?family=Bungee+Shade&family=Montserrat:wght@400;700&display=swap\"\n    rel=\"stylesheet\"\n  />\n</head>\n```\n\n- The first `<meta>` element determines the character types that should be used by the browser. This is required in all HTML documents, and is almost always set to \"utf-8\".\n- The `<title>` element determines the name that is shown on in a user's browser tab. It is also used by search engines and accessibility devices as the name of the page.\n- The second `<meta>` element tells the browser to not automatically scale the size of our content. This is required for styling to look the same across several screen sizes such as a desktop computer and mobile phone (called [responsive web design](https://en.wikipedia.org/wiki/Responsive_web_design)).\n- The first `<link>` element loads our CSS file (`style.css`) which we populated above.\n- The `<script>` element loads the (still empty) JavaScript file (`script.js`). In addition, the `defer` attribute tells the browser to only execute our JavaScript once all HTML has been created. Otherwise, the HTML tags that we look for in our JavaScript will not exist yet (since the `<script>` element is created before our HTML content, inside the `<body>` element).\n- The remaining `<link>` elements are specific code that we receive when selecting fonts to use from the [Google Fonts website](https://fonts.google.com/). These are copied and pasted from the Google Fonts website, and allow us to use the fonts in question.\n\n### Datalist","metadata":{"id":559}}],["560",{"pageContent":"### Datalist\n\nNext is our `<body>` element. The `<body>` element contains the actual HTML that should be shown to a user. The first element in our body is a `<datalist>` element. The `<datalist>` element will not be displayed to users but will be used by `<input>` elements within our HTML to recommend existing tag values as users type. Note that despite the `<datalist>` not rendering anything to users, it is required to be in the `<body>` element and not the `<head>` element.\n\n```html\n<datalist id=\"existing-tags\">\n  <option>Engineering</option>\n  <option>Headphones</option>\n  <option>Wellness</option>\n  <option>Ocean</option>\n  <option>Office</option>\n  <option>Coding</option>\n  <option>Desk</option>\n  <option>Boxing</option>\n  <option>Lab</option>\n</datalist>\n```\n\n### Header\n\nNext is the `<header>` element (note that this is different from `<head>`). The `<header>` element groups content (shown to the user) at the top of the page. Inside our `<header>` element we have the following:\n\n```html\n<header>\n  <h1 class=\"title\">My Moodboard</h1>\n\n  <div class=\"controls\">\n    <label class=\"field\" for=\"filter-input\">\n      <span class=\"label\">Filter</span>\n      <input\n        type=\"search\"\n        id=\"filter-input\"\n        class=\"input\"\n        list=\"existing-tags\"\n        placeholder=\"None\"\n      />\n    </label>\n\n    <button class=\"button\" id=\"dialog-start\">Add New Image</button>\n  </div>\n</header>\n```\n\n- An `<h1>` element that serves as the title of our page. The `<h1>` element will be used by search engines and accessibility devices to determine what page a user is currently on. Given that we only have one page, this can be the same as our `<title>` (defined in the above section).","metadata":{"id":560}}],["561",{"pageContent":"- By default, `<div>` elements do not have any inherent meaning and are often used to group and position content. The `<div>` element that we are using here is meant to wrap and style both the filter field and \"Add New Image\" button. The `controls` CSS `class` attribute is used to add styling that aligns the filter and button side by side.\n- The `<label>` element wraps the entire filter field and tells search engines and accessibility devices that the tags inside are grouped together. The `field` CSS `class` is used to style the field itself, whereas the `for` attribute points to the `id` attribute of the `input` element that is used by this `<label>` element.\n- By default `<span>` elements indicate a piece of short text used on our page. In our case, it adds a description in the top of the field. We are using the `label` CSS `class` attribute to add the styling required to overlay the `<span>` element on top of the `<input>` element.\n- The `<input>` element has a `type` attribute that is set to `search`. This tells the browser to make use of a special search input (this has several enhancements, such as a button to clear the current search phrase). Furthermore, we have the standard `id` attribute and `class` attributes. Lastly, we add the `id` value of our `datalist` (from the previous code snippet) to the `list` attribute (this links this input to our `datalist`). Finally, we add a `placeholder` attribute that tells the browser to display \"None\" when the `input` is empty.\n- Lastly, similar to the above, our button has a `class` attribute for CSS styling and an `id` attribute to be used by our JavaScript.\n\n### Sections\n\nNext, we have a `<main>` element (signifying the main content of our `<body>` element). Inside the `<main>` element we have a `<div>` with several `<section>` elements inside it. Each `<section>` element displays an image (and associated controls) pinned by the user. Let's take a look at a single pinned image:\n\n```html\n<section class=\"pin\">\n  <img","metadata":{"id":561}}],["562",{"pageContent":"```html\n<section class=\"pin\">\n  <img\n    class=\"image\"\n    src=\"https://images.unsplash.com/photo-1580894908361-967195033215?w=600\"\n  />\n\n  <ul class=\"info\">\n    <li class=\"tag-wrap\">\n      <button class=\"tag\">office</button>\n    </li>\n\n    <li class=\"tag-wrap\">\n      <button class=\"tag\">coding</button>\n    </li>\n\n    <li class=\"tag-wrap\">\n      <button class=\"tag\">desk</button>\n    </li>\n  </ul>\n\n  <button\n    class=\"remove\"\n    aria-label=\"remove\"\n    value=\"159279541173033634211014623228\"\n  >\n    &#10005;\n  </button>\n</section>\n```\n\n- The wrapping `<section>` element indicates to search engines and accessibility devices that the content inside should be treated as a grouped, standalone piece of information.\n- The `<img>` element is used to show the pinned image (by supplying the URL). Note that the behaviour of this image is a bit different from regular `<img>` element behaviour. By means of the CSS styling applied to it, the relevant image will scale up or down until it covers the entire `<section>` element.\n- The `<ul>` element is used to indicate to search engines and accessibility devices that the content that follows is part of a list. When using an `<ul>` element, the order of the items doesn't matter, whereas if you use an `<ol>` element, it does.\n- Each `<li>` inside the `<ul>` element indicates a separate item inside the list.\n- Inside each `<li>` is a `<button>` element that can be pressed to show all pins that have the same tag.","metadata":{"id":562}}],["563",{"pageContent":"- Each `<li>` inside the `<ul>` element indicates a separate item inside the list.\n- Inside each `<li>` is a `<button>` element that can be pressed to show all pins that have the same tag.\n- The last `<button>` element creates a way for users to remove an image from the pinboard. We are using the multiplication sign (`×`) as the text label of the button. It can be added to HTML by using the following special [HTML entity](https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references) code: `&#10005;`. While this visually appears similar to a crossed-out icon, usually associated with removing something, semantically it will be read differently by search engines and accessibility devices. It will be read as a multiplication sign, which as you can probably understand will create a lot of confusion. Therefore, we use the `aria-label` attribute to override the semantic value associated with the button to \"remove\". Lastly, you will see that the `<button>` element also has a `value` attribute with a unique number. The reason for this will be explained in part 2 of this project, so don't worry about it too much for now.\n\n### Dialog\n\nLastly, is a `<dialog>` element. While the `<dialog>` element is currently hidden from users with a `hidden` CSS class, it will be shown once the `hidden` class is removed. When it is visible, users can use it to add a new image to the board. The `<dialog>` element consists of the following:\n\n```html\n<dialog id=\"dialog\" class=\"overlay hidden\">\n  <form id=\"dialog-form\" class=\"form\">\n    <div class=\"dialog-item\">\n      <label class=\"field\" for=\"dialog-image\">\n        <span class=\"label\">Image URL</span>\n        <input class=\"input\" type=\"url\" id=\"dialog-image\" />\n      </label>\n\n      <em class=\"helper\"\n        >For example:\n        https://images.unsplash.com/photo-1584464491033-06628f3a6b7b</em\n      >\n    </div>\n\n    <div class=\"dialog-item\">\n      <label class=\"field\" for=\"dialog-tags\">\n        <span class=\"label\">Tags</span>","metadata":{"id":563}}],["564",{"pageContent":">\n    </div>\n\n    <div class=\"dialog-item\">\n      <label class=\"field\" for=\"dialog-tags\">\n        <span class=\"label\">Tags</span>\n        <input class=\"input\" type=\"text\" id=\"dialog-tags\" />\n      </label>\n\n      <em class=\"helper\"\n        >Separate multiple tags with commas. For example: engineering,\n        coding</em\n      >\n    </div>\n\n    <div class=\"dialog-item\">\n      <button type=\"submit\" class=\"button\" id=\"dialog-submit\" disabled>\n        Save Image\n      </button>\n    </div>\n  </form>\n</dialog>\n```\n\n- The wrapping `<dialog>` element forms the transparent black overlay that sits behind the `<form>` element. It has both an `overlay` CSS class (for this behaviour) and a dynamic `hidden` CSS class that can be toggled on and off in order to show or hide the dialog (and nested elements).\n- The `<form>` element indicates to search engines and accessibility devices that the next section functions as a traditional web form that should be submitted by clicking a button (as opposed to our filtering which happens in real time as you type). Note that a `<form>` element can also be submitted with the \"Enter\" key once the required data has been provided.\n- Within the `<form>` element are three repeating `<div>` elements. As mentioned before, these have no semantic meaning, but can be used to group and position elements. In this case, we are using the `<div>` elements to add some spacing between the different elements in the form (by means of the `dialog-item` CSS class).\n- Inside the first two `<div>` tags, we are reusing the first input field HTML structure we created (from the above `<header>` snippet), albeit with different `id` and `type` attributes on each `<input>` element.","metadata":{"id":564}}],["565",{"pageContent":"- We are also adding `<em>` elements after each. The `<em>` element is short for \"emphasis\" and is similar in function to `<span>`; however, it indicates that the piece of text has specific importance. In our snippet above, we use this element for helper text to provide users with context regarding what is expected in the fields.\n\nWhen unhidden, the dialog will look as follows:\n\n![Unhidden dialog](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-4.png)\n\n## Styling\n\nNow that we've covered the basic HTML structure, let's dive into our CSS (`style.css`). We won't cover each part of this in detail, but you can use the phenomenal [CSS-Tricks maintained Almanac](https://css-tricks.com/almanac/) to understand exactly what specific properties do. Let's take a look at some broader aspects of CSS that we have used in this file.\n\n### Universal selector\n\nThe `*` selector is named the [universal CSS selector](https://css-tricks.com/almanac/selectors/u/universal). It applies the designated styling rules to every single HTML element on the page. In our case, we want to override the way that size is calculated on our page. By default, all elements have a `box-sizing` of `content-box`; however, we want to override the default behaviour for all tags to `border-box`. This snippet of CSS is so common in modern-day web development that the 1st of February is actually designated annual [International Box-sizing Awareness Day](https://css-tricks.com/international-box-sizing-awareness-day/) by the front-end community.\n\n```css\n* {\n  box-sizing: border-box;\n}\n```\n\nBy default, `content-box` adds all borders and padding on top of the designated size of an element. For example, if we have an element that has a `width: 10rem` with `padding: 1rem` and `border: 1px`, the actual size of the element will be the total value of `10rem + 1rem + 1px`.","metadata":{"id":565}}],["566",{"pageContent":"By using `border-box`, all of these are included as part of an element's designated width. For example, instead of the total width being `10rem + 1rem + 1px`, it will be the specified `10rem` with the space needed for padding and borders being factored into this amount.\n\n### Scrolling\n\nYou will notice that we set a couple of rules in order to override the default (often different) values of the `<body>` element in different browsers.\n\n```css\nbody {\n  padding: 0;\n  margin: 0;\n  background-color: #f4b0b0;\n  font-family: \"Helvetica neue\", Helvetica, Arial, sans-serif;\n  overflow-y: scroll;\n  overflow-x: hidden;\n}\n```\n\nSpecifically, you'll see that we set `overflow-x: hidden` and `overflow-y: scroll`. This is done to prevent users from accidentally scrolling horizontally, and it also forces a vertical scroll bar (even if the content does not exceed the height of your window). The latter is to ensure that the content doesn't jump around when a vertical scroll bar automatically gets added (or removed).\n\n### Positioning\n\nNext, you'll notice that we are using `position: relative` and `position: absolute` in our `field` and `label` CSS classes. This allows us to overlay the field label on top of the input (overlaying it). The `position: absolute` rule tells the element to exit the [regular content flow](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout) and instead resort to being manually placed by the CSS (by means of `top` and `left`). Meanwhile, `position: relative` tells the absolute positioned content what it should use as a reference. This means that our label will be set `1rem` from the top and bottom of the parent field. Furthermore, `flex`, `justify-content` and `align-items` are used to position elements using the regular content flow inside an element. If you want to learn more about these properties you can have a look at [Chris Coyier](https://chriscoyier.net)'s super useful [A Complete Guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox).\n\n```css","metadata":{"id":566}}],["567",{"pageContent":"```css\n.field {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n  font-weight: bold;\n  letter-spacing: 0.5px;\n  position: relative;\n  cursor: pointer;\n  max-width: 40rem;\n}\n\n.label {\n  position: absolute;\n  font-size: 0.75rem;\n  left: 1rem;\n  top: 1rem;\n  opacity: 0.5;\n  text-transform: uppercase;\n  font-weight: bold;\n}\n```\n\n### Pseudo-classes\n\nYou will notice that there is an independent `button` class which has selectors with [pseudo-classes](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) associated. The base class defines the styling of our button class in its resting state, whereas the `:hover` pseudo-class indicates that the styling should only be applied when users hover over a button. Furthermore, you'll notice that we are adding the `font-family` property once again (despite us already setting it on the `<body>` element). This is because the HTML rules are not automatically applied to `<button>` elements, meaning that we need to manually set them once again (this is one of the strange quirks of HTML and CSS). Lastly, you'll see that we are using a special mouse cursor for buttons when they are disabled. Furthermore, we are not applying the hover effect when the button is disabled.\n\n```css\n.button {\n  border-radius: 6px;\n  padding: 1rem;\n  font-size: 2rem;\n  font-family: \"Montserrat\", sans-serif;\n  font-weight: bold;\n  white-space: nowrap;\n  cursor: pointer;\n}\n\n.button:disabled {\n  cursor: not-allowed;\n}\n\n.button:not(:disabled):hover {\n  background: #ccc;\n}\n```\n\n### Media queries\n\nWe use several media queries on our `pin` CSS class. If you are not familiar with media queries, they essentially allow us to set the styling rules to be applied to different browser sizes. Media queries are the heart of the modern-day [responsive web design](https://en.wikipedia.org/wiki/Responsive_web_design) methodology.","metadata":{"id":567}}],["568",{"pageContent":"In the snippet below, if a user's browser screen is wider than `40rem`, then two pins should be shown on a row (each pin should take up `50%` of available space). However, if the browser width is wider -- `65rem` -- then we should show three pins on a row, and so forth. Try resizing your browser window when viewing the pinboard to see this in action.\n\n```css\n.pin {\n  position: relative;\n  padding: 1rem;\n  width: 100%;\n}\n\n@media (min-width: 40rem) {\n  .pin {\n    width: 50%;\n  }\n}\n\n@media (min-width: 65rem) {\n  .pin {\n    width: 33.333333333333%;\n  }\n}\n\n@media (min-width: 100rem) {\n  .pin {\n    width: 25%;\n  }\n}\n```\n\nWe use the cascading nature of CSS here to override each width if the browser is wider than the previous value. This approach, named [mobile first](https://en.wikipedia.org/wiki/Responsive_web_design#Mobile_first,_unobtrusive_JavaScript,_and_progressive_enhancement), was pioneered by [Luke Wroblewski](https://www.lukew.com/) in [a book with the same title](https://abookapart.com/products/mobile-first). The reasoning is that it is easier to scale a design up than it is to scale it down; therefore, we start by assuming the smallest browser size and then incrementally working our way upwards.\n\nThis is also closely related to the computer science principle of [progressive enhancement](https://en.wikipedia.org/wiki/Progressive_enhancement).\n\n### Transition\n\nFurther down you will see the `opacity`, `transform` and `transition` properties being used on a CSS class called `info`. We can use the `transition` property to tell CSS to animate the change in specific CSS values. In our case, we are telling it to animate changes in `opacity` and `transform`. This is used to create the sliding effect of the tags when you hover over an image.","metadata":{"id":568}}],["569",{"pageContent":"We use `.pin:hover .info` and `pin:hover .remove` to change the styling of the `info` and `remove` CSS classes. The blank space between each of these two classes indicates a parent-child relationship. In other words, when users hover over the parent (`pin`), then the following should be applied to the children: `info` and `remove`. Likewise, if a user stops hovering over an image, the styling is animated back to its original resting state.\n\nNote that a blank space in our CSS selectors does not imply a direct parent-child relation. It indicates that classes can be nested at any level within the parent element. In order to use a direct parent-child relation, you need to use a greater-than sign (`>`). For example with `.pin > .info`, the `info` class needs to be nested only a single level below the parent.\n\n```css\n.info {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  opacity: 0;\n  transition: opacity 0.3s, transform 0.3s;\n  list-style: none;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  transform: translateY(1rem);\n}\n\n.pin:hover .info {\n  opacity: 1;\n  transform: translateY(-1rem);\n}\n\n.remove {\n  position: absolute;\n  right: 2rem;\n  top: 2rem;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 2.5rem;\n  width: 2.5rem;\n  font-size: 1.5rem;\n  font-weight: bold;\n  font-family: \"Montserrat\", sans-serif;\n  cursor: pointer;\n  opacity: 0;\n  transition: opacity 0.3s, transform 0.3s;\n  transform: translateY(-1rem);\n}\n\n.pin:hover .remove {\n  transform: translateY(0);\n  opacity: 1;\n}\n\n.remove:hover {\n  background: #ccc;\n}\n```\n\nOur hover effect will display the `info` and `remove` classes over our image, as follows:\n\n![Image hover overlay](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-5.gif)\n\n### Object-fit\n\nOur `<img>` elements' behaviour needs to be a bit different from the default `<img>` element behaviour. We accomplish this as follows:","metadata":{"id":569}}],["570",{"pageContent":"### Object-fit\n\nOur `<img>` elements' behaviour needs to be a bit different from the default `<img>` element behaviour. We accomplish this as follows:\n\n- The `width: 100%` and `height: 20rem` values tell the image to fill its entire parent width (the pin itself), but to force a height of `20rem`.\n- By default, the above will cause the image to stretch and distort (since it will be forced to that size without cropping).\n- However, `object-fit: cover` tells the image to scale up or down (keeping its original aspect ratio) while cropping the overflowing parts of the image as needed until the entire `<img>` space is filled.\n\n```css\n.image {\n  width: 100%;\n  height: 20rem;\n  object-fit: cover;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  background-color: #d18c8c;\n}\n```\n\nIf we leave out the `object-fit` property, then our images will get stretched as follows:\n\n![Stretched images](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-6.png)\n\n### Fixed overlay\n\nSimilar to our `position: absolute` example above, the `position: fixed` rule on our `overlay` CSS class ejects the HTML out of the regular page flow. However, while `position: absolute` positions a tag in relation to any parent that has the `position: relative` rule applied, the `position: fixed` property positions an element in relation to the browser viewport itself. Therefore, since we are setting `left` and `top` to `0`, as well as the size of the tag to a `width` and `height` of `100%`, our overlay will fill the entire screen. Note the element is overlaid in the restricted sense of the word, meaning that even if we scroll down it will still cover the viewport.\n\n```css\n.overlay {\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14),\n    0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n```\n\n## Next steps","metadata":{"id":570}}],["571",{"pageContent":"align-items: center;\n  justify-content: center;\n  box-shadow: 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14),\n    0px 9px 46px 8px rgba(0, 0, 0, 0.12);\n}\n```\n\n## Next steps\n\nWhile the above creates all of the structural parts needed for our pinboard, it is completely static. This means that nothing happens when users press buttons or enter text into inputs. In [part 2 of our project](/tutorials/html-css-js/pinboard-project-part-2), we'll use JavaScript to make our project functional and interactive.","metadata":{"id":571}}],["572",{"pageContent":"# Pinboard project Part 2: JavaScript\n\n[Part 1](/tutorials/html-css-js/pinboard-project-part-1) of this project showed us how to create the basic structure and styling of our pinboard, but static HTML and CSS can only get us so far. The last step in creating a fully functional pinboard is to add interactivity with JavaScript. Here is what we will cover now:\n\n- [Updating HTML and CSS](#updating-html-and-css)\n- [JavaScript Code](#javascript-code)\n- [Handling Data](#handling-data)\n  - [Local Storage](#local-storage)\n  - [HTML DOM Nodes](#html-dom-nodes)\n- [Functions](#functions)\n  - [Updating Displayed HTML](#updating-displayed-html)\n  - [Updating Saved Pins](#updating-saved-pins)\n  - [Filtering Displayed Pins](#filtering-displayed-pins)\n- [Event Specific Functions](#event-specific-functions)\n  - [Handling Input Events](#handling-input-events)\n  - [Handling Click Events](#handling-click-events)\n  - [Handling Submit Events](#handling-submit-events)\n- [Executing Code](#executing-code)\n- [Further Reading](#further-reading)\n\n## Updating HTML and CSS\n\nWe'll be using JavaScript to control and create dynamic content, so we can remove our hardcoded elements from our basic structure.\n\nWe added a `defer` attribute to our `script` tag in our HTML. Since we are no longer hardcoding our pins in the HTML, we have to wait for the HTML to be created before our JavaScript runs. This means that there might be a brief delay before JavaScript loads the dynamic content. While we wait, we will only be able to see the HTML and CSS. We might want to display a loading animation so users know the content is still loading, so let's add the following CSS to our `style.css` file:\n\n```css\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.loader {\n  animation: spin 0.6s linear 0s infinite;\n  display: block;\n  border: 8px solid #80008030;\n  border-top: 8px solid purple;\n  border-radius: 50%;\n  width: 6rem;\n  height: 6rem;\n  margin: 6rem auto;\n}\n```","metadata":{"id":572}}],["573",{"pageContent":"animation: spin 0.6s linear 0s infinite;\n  display: block;\n  border: 8px solid #80008030;\n  border-top: 8px solid purple;\n  border-radius: 50%;\n  width: 6rem;\n  height: 6rem;\n  margin: 6rem auto;\n}\n```\n\nThe \"strange\" syntax in the snippet above is a way of declaring animations in CSS. The declared animation (via `@keyframes`) is telling our styling that our animated element should start a 0 degrees rotation and continue all the way to 360 degrees rotation. We are also binding the animation to our `.loader` class using the `animation` property. Our `animation` property describes behaviour in this order:\n\n- We want to use the `spin` animation declared by means of the `@keyframe` at-rule.\n- Each cycle of the animation (from `0%` to `100%` ) should last `0.6` seconds.\n- The animation should be `linear`, meaning it moves at the same speed, continually.\n- The animation should have no delay; it should wait `0` seconds before starting.\n- The animation should repeat the cycle indefinitely (`infinite`).\n\nThe HTML element with the `loader` class will be an exact square, with a `height` and `width` of `6rem`. When we apply a `border-radius` of `50%`, the element gets turned into a circle. This circle should not have a background colour but should have a light-pink border but where one edge is dark purple (by overriding with `border-top`). By spinning this circle on its own axis (as per the `animation`), we create our loading effect.\n\nOnce the loader is added, we can replace our placeholder pins with the HTML below. You should replace the entire original `<main>` element and its content in your HTML:\n\n```js\n<main>\n  <div class=\"list\" id=\"pins-list\">\n    <span class=\"loader\"></span>\n  </div>\n</main>\n```\n\nThis means you will see this while our JavaScript loads (you don't have any JavaScript now, so it should be in this state indefinitely):\n\n![Page loading animation](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-7.png)","metadata":{"id":573}}],["574",{"pageContent":"![Page loading animation](https://docimg.replit.com/images/teamsForEducation/pinboard-project/image-7.png)\n\nHowever, there are still some other left-overs from our hardcoded HTML in part 1. If we enter a value into the filter field (top-left), we will still get autocompleted recommendations from our previous pins (even though we have no pins or tags on the page at the moment). To fix this, we must clear the contents of our `<datalist>` HTML element (since we'll be managing these via JavaScript):\n\nYou should change the current `<datalist>` element to:\n\n```js\n<datalist id=\"existing-tags\"></datalist>\n```\n\n## JavaScript Code\n\nNow we are ready to add our JavaScript code. Similar to what we did in part 1, we will add the JavaScript in its entirety and then walk through it step by step. Let's start by placing the entire snippet below in our `script.js` file:\n\n```js\nlet pins = [];\n\nconst defaultPins = [\n  {\n    id: \"122203215486581930752615279550\",\n    image: \"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\",\n    tags: [\"engineering\"],\n  },\n  {\n    id: \"144685389103194178251333634000\",\n    image: \"https://images.unsplash.com/photo-1572932491814-4833690788ad?w=600\",\n    tags: [\"headphones\", \"ocean\", \"wellness\"],\n  },\n  {\n    id: \"159279541173033634211014623228\",\n    image: \"https://images.unsplash.com/photo-1580894908361-967195033215?w=600\",\n    tags: [\"office\", \"coding\", \"desk\"],\n  },\n  {\n    id: \"75261220651273643680893699100\",\n    image: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=600\",\n    tags: [\"boxing\", \"wellness\"],\n  },\n  {\n    id: \"161051747537834597427464147310\",\n    image: \"https://images.unsplash.com/photo-1581094271901-8022df4466f9?w=600\",\n    tags: [\"lab\", \"engineering\"],\n  },\n];\n\nconst savedPins = localStorage.getItem(\"savedPins\");\n\nif (savedPins) {\n  pins = JSON.parse(savedPins);\n} else {\n  pins = defaultPins;\n}\n\nconst existingTagsNode = document.querySelector(\"#existing-tags\");\nconst filterInputNode = document.querySelector(\"#filter-input\");","metadata":{"id":574}}],["575",{"pageContent":"pins = JSON.parse(savedPins);\n} else {\n  pins = defaultPins;\n}\n\nconst existingTagsNode = document.querySelector(\"#existing-tags\");\nconst filterInputNode = document.querySelector(\"#filter-input\");\nconst pinsListNode = document.querySelector(\"#pins-list\");\n\nconst dialogNode = document.querySelector(\"#dialog\");\nconst dialogStartNode = document.querySelector(\"#dialog-start\");\nconst dialogFormNode = document.querySelector(\"#dialog-form\");\nconst dialogImageNode = document.querySelector(\"#dialog-image\");\nconst dialogTagsNode = document.querySelector(\"#dialog-tags\");\nconst dialogSubmitNode = document.querySelector(\"#dialog-submit\");\n\nfunction updateHTML(providedPins) {\n  pinsListNode.innerHTML = (providedPins || pins)\n    .map(\n      ({ id, image, tags }) => `\n      <section class=\"pin\">\n        <img class=\"image\" src=\"${image}\">\n\n        <ul class=\"info\">\n          ${tags\n            .map(\n              (tag) => `\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">${tag}</button>\n            </li>\n          `\n            )\n            .join(\"\")}\n        </ul>\n        <button class=\"remove\" aria-label=\"remove\" value=\"${id}\">\n          &#10005;\n        </button>\n      </section>\n    `\n    )\n    .join(\"\");\n}\n\nfunction updatePins(newPins) {\n  if (newPins) pins = newPins;\n  localStorage.setItem(\"savedPins\", JSON.stringify(pins));\n  existingTagsNode.innerHTML = pins\n    .reduce((result, { tags }) => {\n      const newTags = tags.filter((tag) => !result.includes(tag));\n      return [...result, ...newTags];\n    }, [])\n    .map((tag) => `<option>${tag[0].toUpperCase()}${tag.slice(1)}</option>`)\n    .join(\"\");\n  updateHTML();\n}\n\nfunction applyFilter(filter) {\n  if (filter.trim() === \"\") return updateHTML();\n  const array = filter\n    .split(\",\")\n    .map((text) => text.trim())\n    .map((text) => text.toLowerCase());\n  const filteredPins = pins.filter(({ tags }) => {\n    const matchedTags = tags.filter((tag) => array.includes(tag));\n    return matchedTags.length >= array.length;\n  });\n  updateHTML(filteredPins);\n}","metadata":{"id":575}}],["576",{"pageContent":"const filteredPins = pins.filter(({ tags }) => {\n    const matchedTags = tags.filter((tag) => array.includes(tag));\n    return matchedTags.length >= array.length;\n  });\n  updateHTML(filteredPins);\n}\n\nfunction handleInput(event) {\n  if (event.target === filterInputNode) {\n    applyFilter(escape(event.target.value));\n  } else if (\n    event.target === dialogImageNode ||\n    event.target === dialogTagsNode\n  ) {\n    if (\n      dialogImageNode.value.trim() !== \"\" &&\n      dialogTagsNode.value.trim() !== \"\"\n    ) {\n      dialogSubmitNode.disabled = false;\n    } else {\n      dialogSubmitNode.disabled = true;\n    }\n  }\n}\n\nfunction handleClick(event) {\n  if (event.target === dialogStartNode || event.target === dialogNode) {\n    dialogNode.classList.toggle(\"hidden\");\n    dialogNode.open = !dialogNode.open;\n  } else if (event.target.classList.contains(\"remove\")) {\n    updatePins(pins.filter(({ id }) => id !== event.target.value));\n    applyFilter(filterInputNode.value);\n  } else if (event.target.classList.contains(\"tag\")) {\n    filterInputNode.value = event.target.innerText;\n    applyFilter(filterInputNode.value);\n  }\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const time = new Date().getTime();\n  const id = `${time}${Math.random() * 100000000000000000}`;\n  const image = encodeURI(dialogImageNode.value.trim());\n  const tags = dialogTagsNode.value\n    .split(\",\")\n    .map((tag) => tag.trim())\n    .map((tag) => tag.toLowerCase())\n    .map((tag) => escape(tag));\n  updatePins([...pins, { id, image, tags }]);\n  applyFilter(filterInputNode.value);\n  dialogNode.classList.add(\"hidden\");\n  dialogNode.open = false;\n  dialogImageNode.value = \"\";\n  dialogTagsNode.value = \"\";\n  dialogSubmitNode.disabled = true;\n}\n\ndocument.body.addEventListener(\"input\", handleInput);\ndocument.body.addEventListener(\"click\", handleClick);\ndocument.body.addEventListener(\"submit\", handleSubmit);\nupdatePins();\n```\n\n## Handling Data","metadata":{"id":576}}],["577",{"pageContent":"}\n\ndocument.body.addEventListener(\"input\", handleInput);\ndocument.body.addEventListener(\"click\", handleClick);\ndocument.body.addEventListener(\"submit\", handleSubmit);\nupdatePins();\n```\n\n## Handling Data\n\nBefore executing any logic, we need to set up some basic data structures. First, instead of hardcoding our pins in the HTML as before, we will now keep track of them using an array with objects in our JavaScript. Each object will contain an `id`, `image` and an array of `tags`. However, if a user visits our page for the first time, their pins will start as an empty array (`[]`). This won't look very appealing, so we also add a `defaultPins` array that we can add to our active `pins` array if this is the first time a user is visiting our page. The `defaultPins` contains all the values that we hardcoded in part 1, but you can replace them with your own default values.\n\n### Local Storage\n\nAll the above JavaScript will stop running once we close the page, so any data stored in the `pins` variable (whether added by a user or the default pins) will be lost. This means that the array will be created again from scratch when the user returns to their pinboard - not helpful.\n\nFortunately, all modern browsers allow us to persist data even after we close our pinboard. We can use the `localStorage.setItem` method to save data locally to our device, and then use `localStorage.getItem` to retrieve the data again when the page loads. While `localStorage` is super powerful, there are a couple of things to keep in mind:\n\n- It does not persist between different browsers.\n- It won't sync between devices.\n- If you clear your browser history, it might delete your `localStorage` data too.\n- You can only save strings (a single line of text data) in `localStorage`.\n- Each string needs to be assigned to a unique name in `localStorage`.","metadata":{"id":577}}],["578",{"pageContent":"- You can only save strings (a single line of text data) in `localStorage`.\n- Each string needs to be assigned to a unique name in `localStorage`.\n\nThe last two points are important since it means that we are unable to store arrays or objects to `localStorage`. A common way around this is to turn our data structures into strings (via `JSON.stringify`) before saving it to `localStorage`, and then turn it back into an array or object (via `JSON.parse`) after retrieving it from `localStorage`.\n\nFor example, by running `JSON.stringify` on our array, we are able to save a string resembling the following in `localStorage`:\n\n```jsx\n\"[{id:\\\"1222032154865\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580983218765-f663bec07b37?w=600\\\",tags:[\\\"engineering\\\"],},{id:\\\"1446853891031\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1572932491814-4833690788ad?w=600\\\",tags:[\\\"headphones\\\",\\\"ocean\\\",\\\"wellness\\\"],},{id:\\\"1592795411730\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580894908361-967195033215?w=600\\\",tags:[\\\"office\\\",\\\"coding\\\",\\\"desk\\\"],},{id:\\\"752612206512\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1584464491033-06628f3a6b7b?w=600\\\",tags:[\\\"boxing\\\",\\\"wellness\\\"],},{id:\\\"1610517475378\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1581094271901-8022df4466f9?w=600\\\",tags:[\\\"lab\\\",\\\"engineering\\\"],},]\";\n```\n\nThis is how we use `localStorage` in our JavaScript code:\n\n1. We check if there is a string called `savedPins` saved in our `localStorage`.\n2. If there is a string assigned, we run `JSON.parse` on it to turn it into an array.\n3. We then set our active `pins` variable to the returned array. (If no such `savedPins` value exists in `localStorage`, we know that this is the first time a user is visiting our page.)\n4. We populate the `pins` variable with the default pins:\n\n```js\nlet pins = [];\n\nconst defaultPins = [\n  {\n    id: \"1222032154865\",\n    image: \"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\",\n    tags: [\"engineering\"],\n  },\n  {\n    id: \"1446853891031\",","metadata":{"id":578}}],["579",{"pageContent":"let pins = [];\n\nconst defaultPins = [\n  {\n    id: \"1222032154865\",\n    image: \"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\",\n    tags: [\"engineering\"],\n  },\n  {\n    id: \"1446853891031\",\n    image: \"https://images.unsplash.com/photo-1572932491814-4833690788ad?w=600\",\n    tags: [\"headphones\", \"ocean\", \"wellness\"],\n  },\n  {\n    id: \"1592795411730\",\n    image: \"https://images.unsplash.com/photo-1580894908361-967195033215?w=600\",\n    tags: [\"office\", \"coding\", \"desk\"],\n  },\n  {\n    id: \"752612206512\",\n    image: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=600\",\n    tags: [\"boxing\", \"wellness\"],\n  },\n  {\n    id: \"1610517475378\",\n    image: \"https://images.unsplash.com/photo-1581094271901-8022df4466f9?w=600\",\n    tags: [\"lab\", \"engineering\"],\n  },\n];\n\nconst savedPins = localStorage.getItem(\"savedPins\");\n\nif (savedPins) {\n  pins = JSON.parse(savedPins);\n} else {\n  pins = defaultPins;\n}\n```\n\n### HTML DOM Nodes\n\nIn addition to keeping all our active pins in a `pins` variable, it's also helpful to declare all the HTML elements that we will be using upfront. This means that when returning, you'll see all the IDs used by JavaScript grouped together. All of these HTML elements are selected by means of the `document.querySelector` method. The query we use is similar to selectors in CSS, for example, `#existing-tags` means that JavaScript needs to look for an HTML tag with an `id` attribute of `existing-tags`.\n\nIn part one, we created a couple of `id` attributes in our HTML that we can use to find the required elements:\n\n```js\nconst existingTagsNode = document.querySelector(\"#existing-tags\");\nconst filterInputNode = document.querySelector(\"#filter-input\");\nconst pinsListNode = document.querySelector(\"#pins-list\");\n\nconst dialogNode = document.querySelector(\"#dialog\");\nconst dialogStartNode = document.querySelector(\"#dialog-start\");\nconst dialogFormNode = document.querySelector(\"#dialog-form\");\nconst dialogImageNode = document.querySelector(\"#dialog-image\");","metadata":{"id":579}}],["580",{"pageContent":"const dialogStartNode = document.querySelector(\"#dialog-start\");\nconst dialogFormNode = document.querySelector(\"#dialog-form\");\nconst dialogImageNode = document.querySelector(\"#dialog-image\");\nconst dialogTagsNode = document.querySelector(\"#dialog-tags\");\nconst dialogSubmitNode = document.querySelector(\"#dialog-submit\");\n```\n\n## Functions\n\nNow that we've created our basic data structures, we'll be declaring some JavaScript functions that we can run when specific conditions are met. All of these snippets just create the functions and don't do anything until the functions are called later in our code.\n\n### Updating Displayed HTML\n\nAny type of interactivity on the web is only possible by directly modifying the HTML or CSS that is displayed by the user. This is done by\n\n1. Loading a new page (using server-side rendering), or\n2. Directly manipulating the former with JavaScript.\n\nLet's go with option 2. We will create a low-level function that we can run each time our `pins` array changes. By running this function, our HTML will be re-rendered to reflect the current state of our `pins` array.\n\nWe start by referencing the `pinsListNode` variable, which holds the `div` HTML tag that wraps all our displayed pins. Because we made changes, it only contains a `<span class=\"loader\"></span>` HTML at the moment. Once we run our `updateHTML` function, the HTML inside the `div` will be overridden by a new HTML string created by the following logic:\n\n- When the `updateHTML` function is called, an optional `providedPins` array can be passed directly to it as an argument.\n- Within the function, we start with `(providedPins || pins)` which tells JavaScript to use the `providedPins` argument if it is passed to the function, otherwise it should fall back to the default `pins` variable declared at the top of the file.","metadata":{"id":580}}],["581",{"pageContent":"- Next, we start by running the `.map` method, the array that was selected in the last step. The `.map` method accepts a function as an argument, which we immediately pass as an [arrow function.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) This function will be executed on every single item in our array (a pin object in our case), and will then return a new array populated with the results of each execution.\n- Each object in our starting array should have an `id`, `image` and `tags` property (which we decided when we created the `pins` variable above). This means that we can directly [destructure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) them into the arrow function that we pass.\n- Each time the arrow function executes, it returns a string of HTML created by a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) (wrapped in back-tick characters). Template literals are super useful because they allow us to insert dynamic values straight into the string. Dynamic values should be wrapped in the following syntax: `${ }`. This is called [interpolation](https://en.wikipedia.org/wiki/String_interpolation).\n- The first variable we interpolate is the `image` property retrieved directly from the object by destructuring. However, the next interpolation is an actual JavaScript expression (in this case, the result of the expression will be placed in our string where the interpolation is defined).\n- In this interpolated expression, we do another `.map`, this time over the tags array inside each pin object. We're again using interpolation to add the value dynamically to the returned HTML string.","metadata":{"id":581}}],["582",{"pageContent":"- In this interpolated expression, we do another `.map`, this time over the tags array inside each pin object. We're again using interpolation to add the value dynamically to the returned HTML string.\n- Our interpolation expression should have an array of HTML strings once it finishes, for example: `[\"<li class=\"tag-wrap\"><button class=\"tag\">engineering</button></li>\", <li class=\"tag-wrap\"><button class=\"tag\">Wellness</button></li>\", <li class=\"tag-wrap\"><button class=\"tag\">Coding</button></li>\"]`\n- At the end of the interpolated expression, we are running a `.join('')` method. The `.join` method combines all values of an array into a single string. The argument that we pass to `.join` determines how the items will be divided in the final string. Since we don't want any dividers between our lines of HTML strings above, we simply pass an empty string as an argument (`''`). For example, `[1,2,3].join('-')` will create the string: `\"1-2-3\"`. Likewise `[1,2,3].join('')` will create `\"123\"`\n- Finally, you'll see that we do the exact same thing on the first `.map` that provides the final value to `pinsListNode.innerHTML`.\n\n```js\nfunction updateHTML(providedPins) {\n  pinsListNode.innerHTML = (providedPins || pins)\n    .map(\n      ({ id, image, tags }) => `\n      <section class=\"pin\">\n        <img class=\"image\" src=\"${image}\">\n\n        <ul class=\"info\">\n          ${tags\n            .map(\n              (tag) => `\n            <li class=\"tag-wrap\">\n              <button class=\"tag\">${tag}</button>\n            </li>\n          `\n            )\n            .join(\"\")}\n        </ul>\n        <button class=\"remove\" aria-label=\"remove\" value=\"${id}\">\n          &#10005;\n        </button>\n      </section>\n    `\n    )\n    .join(\"\");\n}\n```\n\nThe above should create a string that looks something like the below, and is assigned as the HTML inside `pinListNode`:\n\n```js\npinsListNode.innerHTML = `\n<section class=\"pin\">\n  <img \n    class=\"image\" \n    src=\"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\"\n  >","metadata":{"id":582}}],["583",{"pageContent":"```js\npinsListNode.innerHTML = `\n<section class=\"pin\">\n  <img \n    class=\"image\" \n    src=\"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\"\n  >\n\n  <ul class=\"info\">\n    <li class=\"tag-wrap\">\n      <button class=\"tag\">engineering</button>\n    </li>\n  </ul>\n\n  <button class=\"remove\"aria-label=\"remove\" value=\"1222032154865\">\n  &#10005;\n  </button>\n</section>\n\n<section class=\"pin\">\n  <img\n    class=\"image\"\n    src=\"https://images.unsplash.com/photo-1572932491814-4833690788ad?w=600\"\n  >\n\n  <ul class=\"info\">\n    <li class=\"tag-wrap\">\n      <button class=\"tag\">headphones</button>\n    </li>\n\n    <li class=\"tag-wrap\">\n      <button class=\"tag\">ocean</button>\n    </li>\n\n    <li class=\"tag-wrap\">\n      <button class=\"tag\">wellness</button>\n    </li>\n  </ul>\n\n  <button class=\"remove\"aria-label=\"remove\" value=\"1446853891031\">\n  &#10005;\n  </button>\n</section >`;\n```\n\n### Updating Saved Pins\n\nIt's not enough to just update our HTML. We need to perform some higher-level tasks, too. For example, we need to save the current `pins` variable to `localStorage` and update our `datalist` HTML (so that we get the most up-to-date autocomplete recommendations). We do this using the following function:\n\n```js\nfunction updatePins(newPins) {\n  if (newPins) pins = newPins;\n  localStorage.setItem(\"savedPins\", JSON.stringify(pins));\n  existingTagsNode.innerHTML = pins\n    .reduce((result, { tags }) => {\n      const newTags = tags.filter((tag) => !result.includes(tag));\n      return [...result, ...newTags];\n    }, [])\n    .map((tag) => `<option>${tag[0].toUpperCase()}${tag.slice(1)}</option>`)\n    .join(\"\");\n  updateHTML();\n}\n```\n\nSimilar to our `updateHTML` function, we are able to pass a value called `newPins` to this function. If a `newPins` array is passed to the function, then the current `pins` variable (declared at the top of the file) will be overridden with `newPins`. This is a quality of life feature, because in most cases where we run `newPins`, we also want to update the `pins` variable.","metadata":{"id":583}}],["584",{"pageContent":"First, the function runs `JSON.stringify` on our `pins` array and then overrides (or creates) the current `savedPins` value in `localStorage` with the string from `JSON.stringify`. We then retrieve the `existingTagsNode` variable (which has the element for our `datalist` in the HTML) and we replace its inner HTML with the result of this logic:\n\n- We get the current `pins` array and run the `.reduce()` method on it. To recap, `.reduce()` is similar to `.map()`, and also runs a function (passed as an arrow function to reduce) on each item in the original array. However, instead of providing the item itself as the argument of the arrow function, `.reduce()` provides two arguments. The first `result` contains the last value returned. The next argument (which we restructure as `{ tags }`) is the current array item that it is looping over. This allows us to do some powerful things in JavaScript. For example, we can add all the values in an array: `[1,2,3,4,5,6,7,8].reduce((result, number) => result + number), 0);` which will return `36`.\n- In our case, we are destructuring only the `tags` array from each object in our array (although the other properties still exist on the object).\n- We then use the `filter` method to create a new array that contains only the tag items that are not already in the existing `result`. The `.filter()` method works similar to `.map()` and `.reduce()` as it returns a new array, but items from the original array are only copied over if the arrow function executed on the particular item returns `true`. For example `[21, 9, 40, 0, 3, 11].filter(number => number < 10)` will return `[9, 0, 3]`.\n- In our function, we use the `includes()` method to determine if a tag already exists in `results`. If it does, it will return `true`; if not, `false`.","metadata":{"id":584}}],["585",{"pageContent":"- In our function, we use the `includes()` method to determine if a tag already exists in `results`. If it does, it will return `true`; if not, `false`.\n- We then modify the `result` of our `.reduce()` method by combining the newly created array with the existing `result` values. If the newly created array is empty (if it has no tags or all its tags are already present in `result`), then an empty array will be added to `result` (ie keeping `result` as is).\n- In addition to the arrow function that we pass to `.reduce()`, we also need to pass a second argument. This second argument determines the `result` value when the `reduce()` method starts. In our case, we want it be an empty array (`[]`).\n- Now, since we're only getting the string value of the tags themselves in the `result` of `.reduce()`, we still need to wrap them in actual HTML. We do this by passing the results to a `.map()` method that simply wraps them in an `<options>` HTML element.\n- Then we pass another expression into the interpolation of this template literal. In this case, the expression simply capitalizes the first character of the tag value by means of selecting it and running `.toUpperCase()` on it and then interpolating the rest of the value after it. `.slice(1)` extracts all characters after the first one. For example, `engineering` will be converted to `Engineering`.\n- Lastly, we run `.join('')` on the final array to turn it into one big HTML string.\n\nThe above should replace the inner HTML inside `existingTagsNode` with something like:\n\n```js\nexistingTagsNode.innerHTML = `\n  <option>Engineering</option>\n  <option>Headphones</option>\n  <option>Wellness</option>\n  <option>Ocean</option>\n  <option>Office</option>\n  <option>Coding </option>\n  <option>Desk</option>\n  <option>Boxing</option>\n  <option>Lab</option>\n`;\n```\n\nAt the end, we automatically trigger the `updateHTML` function to make sure that we are showing the correct pins.\n\n### Filtering Displayed Pins","metadata":{"id":585}}],["586",{"pageContent":"<option>Boxing</option>\n  <option>Lab</option>\n`;\n```\n\nAt the end, we automatically trigger the `updateHTML` function to make sure that we are showing the correct pins.\n\n### Filtering Displayed Pins\n\nLet's create our last core function before we move on to event handlers. This function updates the HTML being displayed to the user based on a single text value (passed directly to the function). This value will correspond to the input of the filter field in our HTML:\n\n```js\nfunction applyFilter(filter) {\n  if (filter.trim() === \"\") return updateHTML();\n  const array = filter\n    .split(\",\")\n    .map((text) => text.trim())\n    .map((text) => text.toLowerCase());\n  const filteredPins = pins.filter(({ tags }) => {\n    const matchedTags = tags.filter((tag) => array.includes(tag));\n    return matchedTags.length >= array.length;\n  });\n  updateHTML(filteredPins);\n}\n```\n\nBefore we do anything, we want to check if the `filter` argument passed to the function is `''`. If nothing is passed to the filter, we should call the `updateHTML` function without passing any arguments. This means that the function will replace the current HTML using the full default `pins` array (instead of a custom filtered object). This will override any currently filtered HTML (since we are essentially saying that no filters should be applied) and display all pins. We also run `.trim()` on the values passed, using `filter`. This is to account for empty spaced values like `\"         \"` (which should still be considered empty).\n\nHowever, if the string passed by means of `filter` is not empty, we start by turning it into a variable called `array` that can be looped over when comparing tags. We do this to allow users to pass chained filters into a single string by means of separating them by commas (`,`), for example `\"Engineering, Office, Lab\"`. To transform this into a useable `array` value, we will:","metadata":{"id":586}}],["587",{"pageContent":"- Run `split` on the string. This breaks the string into an array, with the argument passed being used as the point of division (essentially the opposite of `.join()`). This means that our example above will be transformed into the following array: `[\"Engineering\", \" Office\", \" Lab\"]`\n- The last two items in the array have spaces before them, so they won't match any of our tags –`\" Office\"` is not the same as `\"Office\"` according to JavaScript. We use `.map()` and the `trim()` method again to remove any whitespace around our tags. This should also get rid of random spaces added by users.\n- We also don't want our filtering to be case sensitive, so we run `.map()` over the array and covert all tags to lowercase (since we are keeping everything as lowercase in our JavaScript).\n\nIn addition to the above, we have created another array. This array, titled `filteredPins` is a duplicate of the default `pins` array, but we have removed all the objects that do not have tags that match any items in `array`. To create this array, we:\n\n- Run the `filter()` method on our `pins` array and pass an arrow function that automatically destructures the `tags` array from each object in `pins`.\n- Run a second nested filter inside the arrow function on the `tags` property from the pin object.\n- Within this nested arrow function, we loop over each tag assigned to an object and use `.includes()` to see if it matches one of the values created in our initial `array` variable above (based on the filter string that was passed to the function).\n- The nested `filter()` will only return tags that actually match the filter `array`, so we can say that if it returns `0` items (checked with `.length`) then none of the tags in the object match any items in our reference `array` variable. This object should not be added to our new `filteredPins` array.","metadata":{"id":587}}],["588",{"pageContent":"- On the other hand, if there is at least one item in the `matchingTags` array, we can say that at least one tag matches our original filter `array`. This means that the object should be copied to the new `filteredPins` array.\n- After only the objects that have matching tags are copied to `filteredPins`, we run `updateHTML` passing `filteredPins` as the array to use (using the `providePins` parameter created in the `updateHTMl` function). This means that the default `pins` variable won't be used, replaced by the filtered pins array that we pass.\n\nHere, the distinction between `updatePins` and the lower-level `updateHTML` becomes important. The `updatePins` functions also runs the `updateHTML` function after it performs its own tasks, such as overriding `savedPins` in `localStorage` and updating the `datalist` HTML. You might have wondered why we didn't just embed the `updateHTML` logic directly in the `updatePins` functions. Here, we see the value of being able to call `updateHTML` directly (without `updatePins`), since this means that we can side-step all the latter logic that changes the actual `pins` data. The filters are only visual in nature, so we only want to update the HTML show to the user, while keeping our `pins` data untouched. Filtering pins should not actually remove any objects from the `pins` array or remove any recommendations from our `datalist`. If we used `updatePins` instead, then this would accidentally change the pins that were added.\n\nTaking this approach also means that we can simply run the default `updateHTML` function (without passing an argument) if the filter value changes to empty, essentially syncing up the displayed HTML with the full `pins` array again.\n\n## Event Specific Functions","metadata":{"id":588}}],["589",{"pageContent":"## Event Specific Functions\n\nWe created three modular, low-level tasks by means of functions. These can be reused throughout our JavaScript logic and abstract away common tasks. However, at this point, we've only declared these functions so nothing will happen if we run our JavaScript up until this point. To actually use the above functions, we need to trigger them in response to actions performed by users.\n\nThis is commonly done by adding [event listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventListener) directly to HTML nodes. For example in the case of our _\"Add New Image\"_ button, we want to remove the `hidden` CSS class from our dialog element. We can do the following:\n\n```js\ndialogStartNode.addEventListener(\"click\", () => {\n  dialogNode.classList.remove(\"hidden\");\n  dialogNode.open = true;\n});\n```\n\nThis is a common approach to handling user-triggered events, but it becomes tricky if we relinquish the creation of our HTML to JavaScript itself. This is because when we recreate HTML via JavaScript (as we do with `updateHTML`), we need to manually re-add each individual event listener. We also need to manually remove all previous event listeners (via `removeEventListener` ) before swapping out the HTML. Otherwise, [as outlined by Nolan Lawson](https://nolanlawson.com/2020/02/19/fixing-memory-leaks-in-web-applications/), we can cause unexpected memory leaks. This is not a problem with our example because the `dialogStartNode`never gets replaced. However, when we do replace HTML, this approach introduces large amounts of overhead.\n\nLuckily, the HTML DOM itself gives us a way around this. Most modern browsers do [event propagation](https://www.freecodecamp.org/news/a-simplified-explanation-of-event-propagation-in-javascript-f9de7961a06e/). This means that if an event is fired, it ripples up the entire HTML tree until it is captured or reaches the top-level `<body>` element.","metadata":{"id":589}}],["590",{"pageContent":"This means we can get around placing event listeners directly on our HTML elements by rather adding them to the highest level parent the HTML `<body>` element. However, since all events in our HTML will set off the event listener added to the `<body>` element, we need to be able to distinguish between events. This is easy and only requires us to look at the `target` property of an event's dispatched object.\n\nWith this approach, we can create three separate functions that handle all our `click`, `input` and `submit` events on the page. Note these functions are not the event listeners themselves, but are used to respond to the event listeners by being passed as a callback to, for example, `document.body.addEventListener('input', handleInput)`.\n\n### Handling Input Events\n\nLet's start with a piece of interaction that seems like it might require a fair bit of complexity: `input`. Because things need to update real-time as our input events fire, the associated logic might be heavily nested. In fact, both cases of where we listen to `input` events are actually pretty trivial because we have already done most of the work with our previous core functions. However, we need to take into account [character escaping](https://en.wikipedia.org/wiki/Escape_character).\n\nWe allow users to enter values into our inputs without restriction, so we should prevent them from entering anything that might be harmful or break the functionality of our pinboard. For example, if a user enters `console.log('You've been hacked!')` into the input, we want to prevent this value from accidentally getting executed by JavaScript as code (thereby logging \"You've been hacked\" to the browser console).\n\nGoing back to one of our examples at the very top where we discussed how an array can be changed into a string with `JSON.stringify` (in order to save it into `localStorage`), we looked at the following example:\n\n```jsx","metadata":{"id":590}}],["591",{"pageContent":"```jsx\n\"[{id:\\\"1222032154865\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580983218765-f663bec07b37?w=600\\\",tags:[\\\"engineering\\\"],},{id:\\\"1446853891031\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1572932491814-4833690788ad?w=600\\\",tags:[\\\"headphones\\\",\\\"ocean\\\",\\\"wellness\\\"],},{id:\\\"1592795411730\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580894908361-967195033215?w=600\\\",tags:[\\\"office\\\",\\\"coding\\\",\\\"desk\\\"],},{id:\\\"752612206512\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1584464491033-06628f3a6b7b?w=600\\\",tags:[\\\"boxing\\\",\\\"wellness\\\"],},{id:\\\"1610517475378\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1581094271901-8022df4466f9?w=600\\\",tags:[\\\"lab\\\",\\\"engineering\\\"],},]\";\n```\n\nYou'll see that all our double quotation marks (`\"`) have backslashes (`\\`) before them. This tells JavaScript that the double quote symbol should be treated as the string character `\"` and not as an actual JavaScript syntax symbol. If we didn't escape the quotes, JavaScript would actually close the above string prematurely, since the `\"` symbol is used in JavaScript to end string declarations.\n\nThis means that JavaScript would end the string when it reaches the double quote as follows:\n\n```jsx\n\"[{id:\";\n```\n\nWe will be escaping some of the data provided by users, so it's important to understand exactly why we are doing this. Let's look at the function itself:\n\n```js\nfunction handleInput(event) {\n  if (event.target === filterInputNode) {\n    applyFilter(escape(event.target.value));\n  } else if (\n    event.target === dialogImageNode ||\n    event.target === dialogTagsNode\n  ) {\n    if (\n      dialogImageNode.value.trim() !== \"\" &&\n      dialogTagsNode.value.trim() !== \"\"\n    ) {\n      dialogSubmitNode.disabled = false;\n    } else {\n      dialogSubmitNode.disabled = true;\n    }\n  }\n}\n```\n\nWe can see that there are two types of event listeners that we are interested in:\n\n- Where the `target` is the same as the `filterInputNode` input.\n- Where the `target` is either the `dialogImageNode` or `dialogTagsNode` inputs.","metadata":{"id":591}}],["592",{"pageContent":"- Where the `target` is the same as the `filterInputNode` input.\n- Where the `target` is either the `dialogImageNode` or `dialogTagsNode` inputs.\n\nThe `input` event is different from the `change` event as that `change` only fires when a user changes the value inside input and then clicks outside it. `input` is triggered even when a single character changes in our input. This means that if we type `Hello!`, it would fire the `input` event six times, and then when we remove the exclamation mark (`!`), changing the value to `Hello`, it would fire again. Whereas `change` would only fire once we click away from the `input`.\n\nThe actual card filtering event is simple; we check if it was the `filterInputNode` that triggered `input` and if so, we pass the value of the input to the `applyFilter` function. However, we want to add another piece of functionality to this behaviour. Because the fields used in our dialog are empty when our page loads, we also want to set the button to add the values as a pin to `disabled`. However, having a button that is indefinitely disabled is useless, so we want to check the values whenever either the image URL or entered tags change. Only once both of these are full do we enable the button. We do this by:\n\n- Removing all surrounding whitespace from the both input field values by means of `.trim()`.\n- If neither of these values are empty (i.e. they do not trim to `''` ), we set the disabled state of the submit button to `false` (allowing it to be clicked).\n- If either of the latter return `''` when trimmed, we will either keep the button disabled or set it back to disabled.\n\n### Handling Click Events\n\nA `click` event listener is one of the most common event listeners on the web. It is triggered whenever a user presses anything in our HTML (this includes touch events on mobile). Currently, there are four types of click events that we are interested in:\n\n- A user clicks on the `Add New Image\"` button.\n- A user clicks outside of the dialog form.","metadata":{"id":592}}],["593",{"pageContent":"- A user clicks on the `Add New Image\"` button.\n- A user clicks outside of the dialog form.\n- A user clicks on the remove button (`x`) on top of a pinned image.\n- A user clicks on one of the tag buttons on top of a pinned image.\n\nWe can cover all of these with the following function:\n\n```js\nfunction handleClick(event) {\n  if (event.target === dialogStartNode || event.target === dialogNode) {\n    dialogNode.classList.toggle(\"hidden\");\n    dialogNode.open = !dialogNode.open;\n  } else if (event.target.classList.contains(\"remove\")) {\n    updatePins(pins.filter(({ id }) => id !== event.target.value));\n    applyFilter(filterInputNode.value);\n  } else if (event.target.classList.contains(\"tag\")) {\n    filterInputNode.value = event.target.innerText;\n    applyFilter(filterInputNode.value);\n  }\n}\n```\n\nLet's go through this function step by step:\n\nThe first two events in our list require the exact same thing: the toggling of hidden and open states of the dialog. We check if the `event.target` is either `dialogStartNode` or the `dialogNode` itself. If so, we can simply toggle the `hidden` class and set the `open` attribute to the exact opposite of what it currently is (by means of a [logical not operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT)). While the last attribute has no effect on what is shown to users, it is helpful for search engines and accessibility devices.\n\nThen, if our `target` is neither of the above, we check if the `target` value contains the `remove` CSS class. Since we are using the `remove` class to style our deletion buttons, we can assume that the event came from one of these buttons. But how do we see which pin it came from? You may remember that we added a `value` attribute to each of these buttons in our HTML. This `value` attribute contains the unique `id` of the object corresponding to a specific pin.","metadata":{"id":593}}],["594",{"pageContent":"This means that we can once again use the `.filter()` method and tell it to create a new array that only contains objects that do not match the supplied ID (using the `value` attribute). We then pass this new array directly to `updatePins` and the pin is removed from the HTML and our `pins` array. After updating the pins, we also re-apply the current filter value (if there is one) so the HTML update that removed the pin does not break any current filtering condition.\n\nLastly, if our event is neither of these, then we can check if the target has a class of `tag`. If so, then we know that we are dealing with one of the tags buttons overlaid on top of a pin (when a user hovers over a pin). This means that we can use its inner text to check the name of the tag that was clicked on, and override the current filtering input with this value. However, since we are doing this programmatically (and it is not triggered by the user), we need to manually trigger the `input` event.\n\n### Handling Submit Events\n\nLastly, we have the `submit` event function. This is fired whenever a form is submitted on our page. Because we only have one form on our page, we don't need to check where the event came from. We just execute the following logic:\n\n```js\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const id = new Date().getTime().toString();\n  const image = encodeURI(dialogImageNode.value.trim());\n  const tags = dialogTagsNode.value\n    .split(\",\")\n    .map((tag) => tag.trim())\n    .map((tag) => escape(tag));\n  updatePins([...pins, { id, image, tags }]);\n  applyFilter(filterInputNode.value);\n  dialogNode.classList.add(\"hidden\");\n  dialogNode.open = false;\n  dialogImageNode.value = \"\";\n  dialogTagsNode.value = \"\";\n  dialogSubmitNode.disabled = true;\n}\n```","metadata":{"id":594}}],["595",{"pageContent":"applyFilter(filterInputNode.value);\n  dialogNode.classList.add(\"hidden\");\n  dialogNode.open = false;\n  dialogImageNode.value = \"\";\n  dialogTagsNode.value = \"\";\n  dialogSubmitNode.disabled = true;\n}\n```\n\n- By default, when a form is submitted on a web page the page automatically refreshes (assuming that the data will be handled by the server). However, since we are using JavaScript to handle our logic (and not a server), we want to override this behaviour. Luckily, the submit event object includes a method (`preventDefault`) that we can run on the event itself to prevent this from happening.\n- We then need to create a unique `id` value to identify this new pin added to the `pins` array. We generate a unique `id` value by using the current date and time. We simply get the current date and time with `new Date()` and then run `getTime()` on it. The latter turns the created date object into a number of milliseconds that have passed since midnight 1 January 1970 (called the [unix epoch](https://en.wikipedia.org/wiki/Unix_time) in programming).\n- The implication here is that unless a user presses the submit button twice at the exact same millisecond, each of their pins will have a different unique value (based on when it was created).\n- To be technically correct, we should save our ID as a string, not a number, by running the `.toString()` method on our millisecond number. Although an amount of milliseconds looks like a number, when we use it as a unique ID it technically isn't a number anymore.\n- Then we retrieve the URL value provided and run `encodeURI()` on it. Not only does `encodeURI()` escape characters (eg. turning `;,/?:@&=+$#` into `%3B%2C%2F%3F%3A%40%26%3D%2B%24%23`), it also does this in a way that still makes it useable as a URL.","metadata":{"id":595}}],["596",{"pageContent":"- We then create the tags that were entered. This very closely resembles the logic we use in our `applyFilter` function, with the exception that we loop over the items afterwards and manually run the native JavaScript `escape` function on each item.\n- Next, we create a new array by destructuring the current `pins` array and adding an object to it that uses the values we created above.\n- We manually trigger `applyFilter` to not break any filtering that is currently applied.\n- We close the dialog by making direct use of the `dialog` HTML element.\n- We reset all HTML elements inside the dialog to empty and disabled.\n\n## Executing Code\n\nWe've created all the logic required by our pinboard, but if we run our JavaScript up to this point, nothing will happen. This is because we only created the required data structures and functions that will be used by JavaScript. We need to action them. We do this using four lines of code:\n\n```js\ndocument.body.addEventListener(\"input\", handleInput);\ndocument.body.addEventListener(\"click\", handleClick);\ndocument.body.addEventListener(\"submit\", handleSubmit);\nupdatePins();\n```\n\nEach line is responsible for actioning a different function:\n\n- We attach an event listener to the HTML body element and tell it to fire `handleInput` when users input values into any input field.\n- We attach an event listener to the HTML body element and tell it to fire `handleClick` when a user clicks on anything in our HTML.\n- We attach an event listener to the HTML body element and tell it to fire `handleSubmit` when a user submits a form created in our HTML.\n- We manually trigger `updatePins` in order to create the HTML for the pins that have been loaded by JavaScript.\n\n## Where next\n\nWe've touched on many concepts and native functionality of JavaScript itself. We've explained each concept as we went.\n\nIf you want a deeper understanding of something, take a look at the [Mozilla Developer Network Glossary](https://developer.mozilla.org/en-US/docs/Glossary) page.","metadata":{"id":596}}],["597",{"pageContent":"If you want a deeper understanding of something, take a look at the [Mozilla Developer Network Glossary](https://developer.mozilla.org/en-US/docs/Glossary) page.\n\nYou can extend the project by starting from our example repl below. For example, you can add more advanced tagging functionality to allow the user to specify multiple tags and say whether they want to show cards that match all tags (an \"AND\" search) or any cards (an \"OR\" search).\n\nIf you want to add back-end functionality, you can add a database and use sign-up so that people can view their pins from any device, instead of only the one where they originally saved them.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Pinboard-Project?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":597}}],["598",{"pageContent":"---\ntitle: 3D game with Kaboom.js\n---\n\n# Building a pseudo-3D game in Kaboom.js\n\nThree-dimensional games became popular in the late 80's and early 90's with games like the early Flight Simulator and Wolfenstein 3D. But these early games were really [2.5D, or pseudo-3D](https://en.wikipedia.org/wiki/2.5D): the action takes place in 2 dimensions, and the world only appears to be 3D.\n\n[Kaboom.js](https://kaboomjs.com) is a 2D game engine, but we can use some of those early game designers' techniques to create a pseudo-3D game. This game is roughly based on our [2D space shooter game tutorial](/tutorials/build-space-shooter-with-kaboom), but we'll use a view from the cockpit of the spaceship instead of the side-scrolling view.\n\n![Game functionality](https://docimg.replit.com/images/tutorials/3d-game-kaboom/gameplay.gif)\n\nYou can download this [zip file](https://tutorial-files.util.repl.co/3d-game-kaboom/3d-game-resources.zip) with all the sprites and sounds you'll need for this tutorial.\n\n## Game design\n\nHere's what we want from this game:\n\n- A sense of depth to give the illusion of 3D\n- The feeling of freedom of movement throughout space\n\nWe'll make use of Kaboom's [scale component](https://kaboomjs.com/doc#scale) to achieve the sense of depth, representing our sprites as smaller if they are meant to be further away, and larger when they are closer. We'll create a feeling of moving through space using an algorithm to generate a star field, like the early Windows screensavers.\n\n## Creating a new project\n\nHead over to [Replit](https://replit.com) and create a new repl. Choose **Kaboom** as your project type. Give this repl a name, like \"3D Space Shooter\".\n\n![New repl](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/new-repl.png)\n\nAfter the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding.\n\n## Setting up the Kaboom environment","metadata":{"id":598}}],["599",{"pageContent":"After the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding.\n\n## Setting up the Kaboom environment\n\nThe Kaboom interface on Replit is specialised for game-making. Besides the Space Invader icon, you'll notice a few special folders in the file try, like \"Code\", '\"Sprites\", and \"Sounds\". These special folders take care of loading up assets, and all the necessary code to start scenes and direct the game. You can read up more about the Kaboom interface [here](/tutorials/kaboom/kaboom-editor).\n\nIf you haven't already, download this [zip file](https://tutorial-files.util.repl.co/3d-game-kaboom/3d-game-resources.zip) containing all the sprites and sounds for the game. Extract the file on your computer, then add the sprites to the \"Sprites\" folder, and the sounds to the \"Sounds\" folder.\n\n![Uploading sprites](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/upload-sprites.gif)\n\nTo set up the game play environment, we need to set up Kaboom with the screen size and colors we want for the game window. Replace the code in `main.js` with the code below:\n\n```javascript\nimport kaboom from \"kaboom\";\n\nkaboom({\n  background: [0, 0, 0],\n  width: 320,\n  height: 200,\n  scale: 2,\n});\n```\n\nHere we import the kaboom library, and then initialize the context by calling `kaboom({ ... })`. We set the size of the view to 320x200 pixels and `scale` to make the background twice the size on screen.\nNow, let's load up the sprites and sounds we will need in this game. The code below loads each of the graphic elements we'll use, and gives them a name, so we can refer to them when we build the game characters:\n\n```javascript\nloadRoot(\"sprites/\");\nloadSprite(\"cockpit\", \"cockpit.png\");\nloadSprite(\"alien\", \"alien.png\");\n\nloadRoot(\"sounds/\");\nloadSound(\"shoot\", \"shoot.wav\");\nloadSound(\"explosion\", \"explosion.wav\");\n```","metadata":{"id":599}}],["600",{"pageContent":"```javascript\nloadRoot(\"sprites/\");\nloadSprite(\"cockpit\", \"cockpit.png\");\nloadSprite(\"alien\", \"alien.png\");\n\nloadRoot(\"sounds/\");\nloadSound(\"shoot\", \"shoot.wav\");\nloadSound(\"explosion\", \"explosion.wav\");\n```\n\nThe first line, [`loadRoot`](https://kaboomjs.com/#loadRoot), specifies which folder to load all the sprites and game elements from, so we don't have to keep typing it in for each sprite. Then each line loads a game sprite and gives it a name so that we can refer to it in code later. We use similar code to load the sounds we will need in this game, but instead of [`loadSprite`](https://kaboomjs.com/#loadSprite) we use [`loadSound`](https://kaboomjs.com/#loadSound) to load sounds.\n\n## Creating the interface layers\n\nKaboom games are made up of \"Scenes\", which are like levels, or different parts and stages of a game. The IDE has a default \"main\" scene already, which we can use for our main game code. Each scene has multiple \"Layers\", allowing us to have backgrounds that don't affect the game, main game objects (like the player, bullets, enemies, and so on), and UI elements (like the current score and health).\n\nAdd the following code to the `main.js` file to create the 3 layers \"Background (`bg`)\", \"Object (`obj`)\", \"User Interface (`ui`)\":\n\n```javascript\nlayers([\"bg\", \"obj\", \"ui\"], \"obj\");\n```\n\nThe `obj` layer is set as the default layer and that's where the game action will take place. We'll use the `bg` layer to draw the star field, as we don't interact with the objects on that layer. Then we'll use the `ui` layer to draw fixed foreground objects, like the cockpit of the spaceship the player is travelling in.\n\n## Creating alien bugs\n\nAs in the [2D version of this game](/tutorials/kaboom/build-space-shooter-with-kaboom), the point of our game is to avoid and shoot down exploding alien bugs. This time, instead of the bugs coming from the left and right of the screen, we'll make it appear as though they are coming toward the player from \"inside\" the screen.","metadata":{"id":600}}],["601",{"pageContent":"To create this effect, we'll start by making the alien bugs small and spread out over the screen, and have them get bigger and loom toward the center of the screen as they get closer.\n\nWe need a 3D coordinate system to work out how our elements should move. We'll create a system like the one in the image below, with 0 for all three dimension axes in the center. This is how we'll track the movements of the aliens in code. When we draw them to the screen, we'll convert these coordinates into the 2D screen coordinate system.\n\n![3D co-ordinate system](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/3d-system.png)\n\nLet's add the following code to the `main` scene file to achieve this:\n\n```js\nconst SCREEN_WIDTH = 320;\nconst SCREEN_HEIGHT = 200;\nconst ALIEN_SPEED = 200;\n\nlet aliens = [];\n\nfunction spawnAlien() {\n  const x = rand(0, SCREEN_WIDTH);\n  const y = rand(0, SCREEN_HEIGHT);\n\n  var newAlien = add([\n    sprite(\"alien\"),\n    pos(x, y),\n    scale(0.2),\n    area(),\n    rotate(0),\n    {\n      xpos: rand((-1 * SCREEN_WIDTH) / 2, SCREEN_WIDTH / 2),\n      ypos: rand((-1 * SCREEN_HEIGHT) / 2, SCREEN_HEIGHT / 2),\n      zpos: 1000,\n      speed: ALIEN_SPEED + rand(-0.5 * ALIEN_SPEED, 0.5 * ALIEN_SPEED),\n    },\n    \"alien\",\n  ]);\n\n  aliens.push(newAlien);\n}\n\nloop(0.8, spawnAlien);\n```\n\nFirst, we define some general constants for the size of the screen and the speed at which aliens will move. This way, we don't have to keep remembering and typing numbers, and it's easier to change these aspects later if we need to. We also create an array to hold each alien object we create so that we can keep track of all of them. This will be especially important when we add movement to the aliens.","metadata":{"id":601}}],["602",{"pageContent":"The function `spawnAlien` creates a new alien at a random location on the screen. The first lines calculate a random x and y position to place the alien on the screen initially. This isn't logically needed, as we'll calculate the alien's actual position later from our 3D coordinate system and calculate the projected screen position on each frame. But we need to pass a position [`pos`](https://kaboomjs.com/doc#pos) component to the [`add`](https://kaboomjs.com/doc#add) method when we create a new object, so any random position will do.\n\nThere are two more components we include when constructing the alien object:\n\n- [`scale`](https://kaboomjs.com/doc#scale), allowing us to adjust the size of the alien over time as if it's getting closer, and\n- [`rotate`](https://kaboomjs.com/doc#rotate), allowing us to rotate the aliens so we can simulate 'rolling' when changing the spaceship's direction.\n\nWe also add the coordinates of the alien's position in the 3D system to the alien object as custom properties. We start with a fixed `zpos`, or position on the Z axis, far from the screen.\n\nThen we set the alien's speed, varied by a random amount of up to half the base speed faster or slower so that there's some variety in the way aliens approach the ship. We'll use these custom values when we calculate the alien's position on each frame.\n\nFinally, we add the new alien to the `aliens` array we created earlier to keep track of it.\n\nOutside the function, we make use of the Kaboom [`loop`](https://kaboomjs.com/doc#loop) functionality to call the `spawnAlien` function to create new aliens at regular intervals.\n\n## Moving the alien bugs\n\nNow we need to have the aliens we've generated move with each frame. Here's the code:\n\n```js\nonUpdate(\"alien\", (alien) => {\n  alien.zpos -= alien.speed * dt();\n\n  alien.scale = 2 - alien.zpos * 0.002;\n\n  const centerX = SCREEN_WIDTH * 0.5;\n  const centerY = SCREEN_HEIGHT * 0.25;\n\n  alien.pos.x = centerX + alien.xpos * (alien.zpos * 0.001);","metadata":{"id":602}}],["603",{"pageContent":"alien.scale = 2 - alien.zpos * 0.002;\n\n  const centerX = SCREEN_WIDTH * 0.5;\n  const centerY = SCREEN_HEIGHT * 0.25;\n\n  alien.pos.x = centerX + alien.xpos * (alien.zpos * 0.001);\n  alien.pos.y = centerY + alien.ypos * (alien.zpos * 0.001);\n\n  if (alien.zpos <= 1) {\n    destroyAlien(alien);\n  }\n});\n\nfunction destroyAlien(alien) {\n  aliens = aliens.filter((a) => a != alien);\n  destroy(alien);\n}\n```\n\nFirst we add a new event handler onto the [`onUpdate`](https://kaboomjs.com/doc#onUpdate) event, and filter for any objects tagged `alien`. The `onUpdate` event handler is fired for each frame. In this event handler function, we adjust the `zpos` of the alien to make it 'move' a little closer to the screen. We use the [`dt()`](https://kaboomjs.com/doc#dt) function to get the time from the last frame, together with the speed per second we assigned to the alien when we constructed it, to calculate the alien's new `zpos` in our 3D coordinate system. We then translate that value to screen coordinates, and mimic the z-axis position by adjusting the size, or `scale`, of the alien sprite.\n\nRemember that screen coordinates start with (0,0) in the top left corner of the screen, and our 3D coordinate system starts with (0,0,0) in the 'center' of the system. To translate between the 2 systems, we need to find the center of the screen so that we can center the 3D system over it. We do this by by halving the screen `WIDTH` and `HEIGHT` by 2. The screen is the red rectangle in the image below, showing how the 3D system will be centered on it.\n\n![overlay 3d system over 2d system](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/overlay.png)","metadata":{"id":603}}],["604",{"pageContent":"![overlay 3d system over 2d system](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/overlay.png)\n\nNow we can add the alien's `x` and `y` positions in 3D coordinate space relative to the center point of the screen. We bias the center point \"up\" a bit, as this will seem to be the center of the spaceship's view when we add the cockpit later. We also modify each of these `x` and `y` positions by a factor relating to the alien's `z` position: As the alien approaches, its `zpos` value decreases, and our factor uses this value to draw the alien nearer to the center of the screen. This enhances the depth illusion and makes it feel to the player that the aliens are coming at them.\n\nFinally, we see if the alien is very close by seeing if the `zpos < 1`. If it is, we destroy the alien to remove it from the scene, as it's either gone past our spaceship or crashed into it. We create a small helper function, `destroyAlien`, to manage this, so that we also remove the alien from the tracking array.\n\nIf you run the code now, you should see the aliens start to move toward you.\n\n![aliens coming at you](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/alieans-coming.gif)\n\n## Adding a star field\n\nNow that we have the aliens moving and coming at us, let's add another element to give a further sense of depth and show that we are in outer space: the star field generator. We can implement the star field in a similar way as we did for the aliens' movement. One difference will be that we will use color, or more specifically _intensity_, instead of scaling to proxy for the `z-axis`. Another difference is that we'll have the stars spread away from the center rather than towards it, as if the ship is going past them. This also makes it seem like we're travelling at warp speed, which is cool.\n\n```js\nconst STAR_COUNT = 1000;\nconst STAR_SPEED = 5;\nvar stars = [];\n\nfunction spawnStars() {\n  for (let i = 0; i < STAR_COUNT; i++) {\n    const newStar = {","metadata":{"id":604}}],["605",{"pageContent":"```js\nconst STAR_COUNT = 1000;\nconst STAR_SPEED = 5;\nvar stars = [];\n\nfunction spawnStars() {\n  for (let i = 0; i < STAR_COUNT; i++) {\n    const newStar = {\n      xpos: rand(-0.5 * SCREEN_WIDTH, 0.5 * SCREEN_WIDTH),\n      ypos: rand(-0.5 * SCREEN_HEIGHT, 0.5 * SCREEN_HEIGHT),\n      zpos: rand(1000),\n    };\n    stars.push(newStar);\n  }\n}\n\nspawnStars();\n\nonUpdate(() => {\n  const centerX = SCREEN_WIDTH * 0.5;\n  const centerY = SCREEN_HEIGHT * 0.5;\n\n  stars.forEach((star) => {\n    star.zpos -= STAR_SPEED;\n    if (star.zpos <= 1) {\n      star.zpos = 1000;\n    }\n    const x = centerX + star.xpos / (star.zpos * 0.001);\n    const y = centerY + star.ypos / (star.zpos * 0.001);\n\n    if (x >= 0 && x <= SCREEN_WIDTH && y >= 0 && y <= SCREEN_HEIGHT) {\n      const scaled_z = star.zpos * 0.0005;\n      const intensity = (1 - scaled_z) * 255;\n\n      drawRect({\n        width: 1,\n        height: 1,\n        pos: vec2(x, y),\n        color: rgb(intensity, intensity, intensity),\n      });\n    }\n  });\n});\n```\n\nWhile this is very similar to the code we added above for the alien bugs, you'll notice the `spawnStars` function has a few differences to the `spawnAlien` function, such as:\n\n- We create all the stars at once. This is because we need a significant star field to start with, not just a few stars every second.\n- We don't create a Kaboom object for each star. This is because we don't need the collision handling and other overhead that comes with a Kaboom object, especially since we are generating a lot of stars (`const STAR_COUNT = 1000; `). Instead, we store the stars' info in custom [object literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#object_literals), and add each of these to the `stars` array.","metadata":{"id":605}}],["606",{"pageContent":"- We set the initial `z-pos` of the stars to a random value from 0 to 1000, using the Kaboom [`rand`](https://kaboomjs.com/doc#rand) function. We do this because we create all the stars at once, so we seed the stars at random positions on the z-axis to give the feeling of depth to the star field. If the stars were all initialised to the same `z-pos`, they would move in unison, and it would look like a mass of pixels were coming at us - a bit weird!\n\nNow take a look at the [`onUpdate`](https://kaboomjs.com/doc#onUpdate) event handler for our stars. It differs from the event handler for our alien bugs in a few ways:\n\n- We don't use an object filter to look for the stars, as we didn't create them as Kaboom objects. Instead, we just cycle through each star in the `stars` array.\n- Instead of destroying the star and removing it from the array when it reaches the 'front' of the screen, we recycle it by resetting its `z-pos` back to 1000.\n- We also check if the star is out of the screen view. If it is, we don't draw it, to save a bit of overhead.\n- Instead of using the `z-pos` to calculate a value by which to scale the star, we use it to calculate the star's intensity, or brightness. Kaboom uses color values in the range 0-255. So we first scale the `z-pos` down to below 1. Then we subtract it from 1 to create an inverse relationship between `z-pos` and intensity. We then multiply the intensity value by 255 to scale it to a value that is within the range 0-255. In other words, stars further away from us have higher `zpos` values, giving us lower color intensity. This makes stars far away glow dimly, while those closer to our view look brighter.\n- Finally, we use the Kaboom's [drawRect](https://kaboomjs.com/doc#drawRect) method to directly draw the star to the screen. As there is no pixel level drawing function in Kaboom, we create a rectangle of size 1 to draw just one pixel.\n\n## Adding the spaceship cockpit","metadata":{"id":606}}],["607",{"pageContent":"## Adding the spaceship cockpit\n\nNow that we have a star field to fly through, let's add the player's spaceship. Our game uses the spaceship pilot's point of view. Add the following code to add a view from the spaceship cockpit.\n\n```js\nconst cockpit = add([\n  sprite(\"cockpit\"),\n  layer(\"ui\"),\n  rotate(0),\n  pos(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2),\n  origin(\"center\"),\n  scale(0.275),\n]);\n```\n\nThis adds the `cockpit` sprite (image) to the `ui` layer. We also add the [`rotate`](https://kaboomjs.com/doc#rotate) component to it, so that we can add some rotation effects when the spaceship is flying. We use the [`origin`](https://kaboomjs.com/doc#origin) component to center the image in the middle of the screen, which also provides the axis to rotate the sprite around when banking (turning) the spaceship. Then we use a scaling factor to [`scale`](https://kaboomjs.com/doc#scale) the image down to the size of the screen. We scale the image as it's much larger (1334×834) than the size of the game screen (320x200). We could resize the image in an image editing programme, but we would lose some detail and sharpness. Note that the factor of the scale means that the image is still a little larger than the screen size. This gives us a bit of overlap available for when we rotate the image when banking the spaceship.\n\nRun the game now and you should see the view from inside the spaceship.\n\n![spaceship view](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/spaceship-view.gif)\n\n## Creating the spaceship's movement controls\n\nOur basic game world is up and running, now let's add some controls so we can move around in it. We'll allow a few different moves for the spaceship: bank left or right, and fly up or down.","metadata":{"id":607}}],["608",{"pageContent":"Our basic game world is up and running, now let's add some controls so we can move around in it. We'll allow a few different moves for the spaceship: bank left or right, and fly up or down.\n\nConsider for a moment how the spaceship moves through the game world. We can't move the cockpit left or right, up or down - it would just disappear off the screen. One way of simulating movement from the point of view of the cockpit is to keep it stationary and move all the other game elements.\n\nTo achieve this, let's add some helper functions to move the game objects. Here's the code:\n\n```js\nfunction shiftAliens(x, y) {\n  aliens.forEach((alien) => {\n    alien.xpos += x / (alien.zpos * 0.01);\n    alien.ypos += y / (alien.zpos * 0.01);\n  });\n}\n\nfunction shiftStars(x, y) {\n  stars.forEach((star) => {\n    star.xpos += x * 0.01;\n    star.ypos += y * 0.01;\n  });\n}\n```\n\nThese 2 functions take `x` and `y` values for the amount we want to \"move\" by, and uses these to move the aliens and the stars. In each case, we loop through the arrays holding the alien or star game objects. We make some adjustments to the values supplied to the functions to account for the perception that, when we move, objects further away appear to move \"less\" than objects close to us. In the case of the stars, we assume they are all in the far distance, so we scale down the amounts to move by a constant factor. In the case of the aliens, some are far away, while others are right up against the spaceship. To account for this variance, we adjust the amount to move an alien by a factor related to its distance from us, or `zpos`. Aliens close by will appear to move more than those far away.\n\nNow we can add some event handlers for keyboard input:\n\n```js\nconst MOVE_DELTA = 2000;\n\nonKeyDown(\"left\", () => {\n  const delta = MOVE_DELTA * dt();\n  shiftAliens(delta, 0);\n  shiftStars(delta * 0.01, 0);\n  camRot(5.7);\n});\n\nonKeyDown(\"right\", () => {\n  const delta = -1 * MOVE_DELTA * dt();\n  shiftAliens(delta, 0);\n  shiftStars(delta * 0.01, 0);\n  camRot(-5.7);\n});","metadata":{"id":608}}],["609",{"pageContent":"shiftStars(delta * 0.01, 0);\n  camRot(5.7);\n});\n\nonKeyDown(\"right\", () => {\n  const delta = -1 * MOVE_DELTA * dt();\n  shiftAliens(delta, 0);\n  shiftStars(delta * 0.01, 0);\n  camRot(-5.7);\n});\n\nonKeyDown(\"up\", () => {\n  const delta = MOVE_DELTA * dt();\n  shiftAliens(0, delta);\n  shiftStars(0, delta * 0.01);\n});\n\nonKeyDown(\"down\", () => {\n  const delta = -1 * MOVE_DELTA * dt();\n  shiftAliens(0, delta);\n  shiftStars(0, delta * 0.01);\n});\n\nonKeyRelease(\"left\", () => {\n  camRot(0);\n});\n\nonKeyRelease(\"right\", () => {\n  camRot(0);\n});\n```\n\nBecause we're moving the aliens and stars to make it appear as if the spaceship is moving, these elements must move in the opposite direction to that of the arrow key being used. When we use the left key to move the spaceship, our scene moves to the right. We use the Kaboom events [`onKeyDown`](https://kaboomjs.com/doc#onKeyDown) and [`onKeyRelease`](https://kaboomjs.com/doc#onKeyRelease) to attach event handlers for direction controls to the arrow keys on the keyboard. In each of the `onKeyDown` event handlers, we get the time elapsed from the last frame by calling the [`dt()`](https://kaboomjs.com/doc#dt) function, and multiply it by a constant `MOVE_DELTA`, representing the amount to move by each second. For the `right` and `up` keys, our elements move left and down respectively, so we make the amount to move negative - recall that we are moving the objects in our 3D coordinate system. Then we call the 2 helper functions we defined above with the amount to move the objects in the `x` and `y` dimensions.\n\nIn the event handlers for `left` and `right` keys, we also make use of the Kaboom [`camRot`](https://kaboomjs.com/doc#camRot) effect. This effect rotates all objects by the amount we specify, giving the perception of the spaceship banking hard while turning. We add in two additional event handlers on [`onKeyRelease`](https://kaboomjs.com/doc#onKeyRelease) for the `left` and `right` keys to reset the rotation when the player stops turning.","metadata":{"id":609}}],["610",{"pageContent":"Give the game a run, and you should be able to control the spaceship.\n\n![flying controls](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/fly-controls.gif)\n\n## Adding weapons\n\nNow we're flying through the alien bug field, but if an alien makes contact with our spaceship, it will explode and damage us. We need some weapons to shoot the aliens with and protect ourselves. For this, we need to implement some lasers. First, let's add cross hairs to aim with:\n\n```js\nconst vertical_crosshair = add([\n  rect(1, 10),\n  origin(\"center\"),\n  pos(SCREEN_WIDTH * 0.5, SCREEN_HEIGHT * 0.33),\n  color(0, 255, 255),\n  layer(\"ui\"),\n]);\n\nconst horizontal_crosshair = add([\n  rect(10, 1),\n  origin(\"center\"),\n  pos(SCREEN_WIDTH * 0.5, SCREEN_HEIGHT * 0.33),\n  color(0, 255, 255),\n  layer(\"ui\"),\n]);\n```\n\nThis adds 2 lines at a point halfway across the screen, and about 1/3 down the screen, which is roughly the center of the view out of the spaceship window. Since Kaboom doesn't have a line component, we use [`rect`](https://kaboomjs.com/doc#rect) to draw rectangles with a width of 1 pixel, effectively a line. We add the cross hairs to the UI layer, so they are always on top of the aliens and stars.\n\nNow we have a point to aim at, let's add the lasers. Our player will shoot using the spacebar, and we want a classic laser effect: 2 lasers, one shooting from each side of the ship towards the same point to give the effect of shooting into the distance, towards a vanishing point.\n\n```js\nconst BULLET_SPEED = 10;\nfunction spawnBullet() {\n  const BULLET_ORIGIN_LEFT = vec2(\n    SCREEN_WIDTH * 0.25,\n    SCREEN_HEIGHT - SCREEN_HEIGHT * 0.33\n  );\n  const BULLET_ORIGIN_RIGHT = vec2(\n    SCREEN_WIDTH - SCREEN_WIDTH * 0.25,\n    SCREEN_HEIGHT - SCREEN_HEIGHT * 0.33\n  );\n\n  const BULLET_VANISHING_POINT = vec2(SCREEN_WIDTH * 0.5, SCREEN_HEIGHT * 0.33);\n\n  add([\n    rect(1, 1),\n    pos(BULLET_ORIGIN_LEFT),\n    area(),\n    color(255, 0, 0),\n    \"bullet\",\n    {\n      bulletSpeed: BULLET_SPEED,\n      targetPos: BULLET_VANISHING_POINT,\n    },\n  ]);","metadata":{"id":610}}],["611",{"pageContent":"add([\n    rect(1, 1),\n    pos(BULLET_ORIGIN_LEFT),\n    area(),\n    color(255, 0, 0),\n    \"bullet\",\n    {\n      bulletSpeed: BULLET_SPEED,\n      targetPos: BULLET_VANISHING_POINT,\n    },\n  ]);\n\n  add([\n    rect(1, 1),\n    pos(BULLET_ORIGIN_RIGHT),\n    color(255, 0, 0),\n    \"bullet\",\n    {\n      bulletSpeed: -1 * BULLET_SPEED,\n      targetPos: BULLET_VANISHING_POINT,\n    },\n  ]);\n\n  play(\"shoot\", {\n    volume: 0.2,\n    detune: rand(-1200, 1200),\n  });\n}\n```\n\nWhen the player fires, we call the `spawnBullet` function to create a new set of laser bullets. First, we calculate the position the bullets will be coming from. To make it seem as though they're coming from under the spaceship either side, we calculate our bullets' starting positions a quarter way from each side of the screen and about a third of the way from the bottom using the multipliers `0.25` and `0.33` respectively.\n\nThen we calculate where we want the bullets to end up. This is the same position as the cross hairs.\n\nUsing these values, we create 2 bullet objects - simple 1 pixel objects with the tag `bullet` and color set to red `(255,0,0)` so they look menacing. We also add custom properties to the object: A speed for the bullet to move at, and the vanishing point where its course ends.\n\nAs a final detail, we set our \"shoot\" sound to play as each bullet is created, adjusting the volume and applying a randomly generated detune value so that the pitch of the sound is slightly different each time it's played.\n\nWe've got our bullets, their sounds and their trajectories, so let's make them go from their origin point to the vanishing point at the cross hairs by moving them with each frame:\n\n```js\nonUpdate(\"bullet\", (b) => {\n  const m = (b.pos.y - b.targetPos.y) / (b.pos.x - b.targetPos.x);\n  const c = b.targetPos.y - m * b.targetPos.x;\n\n  let newX = b.pos.x + b.bulletSpeed;\n  let newY = m * newX + c;\n  b.pos.x = newX;\n  b.pos.y = newY;\n  // Remove the bullet once it has hit the vanishing point y line\n  if (b.pos.y < SCREEN_HEIGHT * 0.33) {\n    destroy(b);","metadata":{"id":611}}],["612",{"pageContent":"let newY = m * newX + c;\n  b.pos.x = newX;\n  b.pos.y = newY;\n  // Remove the bullet once it has hit the vanishing point y line\n  if (b.pos.y < SCREEN_HEIGHT * 0.33) {\n    destroy(b);\n  }\n});\n\nonKeyDown(\"space\", () => {\n  spawnBullet();\n});\n```\n\nHere we use the [`onUpdate`](https://kaboomjs.com/doc#onUpdate) event handler, filtered to `bullet` objects.\n\nTo calculate the bullet's next position on its trajectory for each frame, we need to find the values for the slope (`m`) and y-intercept (in this case, `c`) of the straight line between the bullet's current position and its end position. Our first 2 lines of the function express those variable parameters as formulas. Let's take a moment to see how we came to those formulas.\n\nWe began with the [equation for a straight line](https://www.mathsisfun.com/equation_of_line.html):\n\n```js\ny = m * x + c;\n```\n\nSince we have the `x` and `y` coordinates for the start and end of the trajectory, we can use them to find the values of the unknowns `m` and `c` by solving simultaneous equations:\n\n```\ny_start = m*x_start + c         (1)\ny_target = m*x_target + c       (2)\n\nre-arranging (2):\nc = y_target - m*x_target\n\nSubstitute (2) into (1) for c:\ny_start = m*x_start + (y_target - m*x_target)\ny_start - y_target  = m*x_start - m*x_target\n                    = m*(x_start - x_target)\nso m = (y_start - y_target) / (x_start - x_target)\n\nNow we can solve for c:\nc = y_target - m*x_target\n\n```\n\nNow that we can express `m` and `c` as formulas, we use them in our code to calculate the parameters.\n\nOur code goes on to advance the bullet's current `x` position by the bullet speed amount, and we can figure out the corresponding new `y` position using the `m` and `c` values calculated above with our new `x` position. We then update the bullet's new position (`pos`) with these new values.","metadata":{"id":612}}],["613",{"pageContent":"We want the bullets to disappear once they hit the target at the vanishing point, so we go on to check if the bullet has crossed the horizontal cross hairs. If it has, we remove the bullet from the scene using the [`destroy`](https://kaboomjs.com/doc#destroy) function.\n\nFinally, we have an event handler for the `space` key, which calls the `spawnBullet` function whenever it is pressed.\n\nTry this out now, and you should be able to shoot some laser bullets into space.\n\n![Shooting](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/shooting.gif)\n\n## Checking for collisions with bullets\n\nNow that we can shoot bullets, we need to check if they hit an alien bug. If they did, we explode the alien.\n\n```js\nconst BULLET_SLACK = 10;\nonCollide(\"alien\", \"bullet\", (alien, bullet) => {\n  if (bullet.pos.y > SCREEN_HEIGHT * 0.33 + BULLET_SLACK) return;\n  makeExplosion(bullet.pos, 5, 5, 5);\n  destroy(alien);\n  destroy(bullet);\n});\n```\n\nWe make use of the Kaboom event [`onCollide`](https://kaboomjs.com/doc#onCollide) which is fired when 2 game objects are overlapping or touching each other. We pass in the tags for the aliens and bullets, so we know when they collide.\n\nWe want to limit bullet hits to only be around the target area, so that the 3D perspective is kept. But because they could collide at any point along the path the bullet takes, we check if the collision has taken place at around the cross hairs area. Then, if is in the target zone, we remove both the bullet and the alien from the scene, and call a function to create an explosion effect. This is the same code used in the [2D Space Shooter tutorial](/tutorials/kaboom/build-space-shooter-with-kaboom).\n\n```js\nfunction makeExplosion(p, n, rad, size) {\n  for (let i = 0; i < n; i++) {\n    wait(rand(n * 0.1), () => {\n      for (let i = 0; i < 2; i++) {\n        add([\n          pos(p.add(rand(vec2(-rad), vec2(rad)))),\n          rect(1, 1),\n          scale(1 * size, 1 * size),\n          lifespan(0.1),\n          grow(rand(48, 72) * size),","metadata":{"id":613}}],["614",{"pageContent":"add([\n          pos(p.add(rand(vec2(-rad), vec2(rad)))),\n          rect(1, 1),\n          scale(1 * size, 1 * size),\n          lifespan(0.1),\n          grow(rand(48, 72) * size),\n          origin(\"center\"),\n        ]);\n      }\n    });\n  }\n}\n\nfunction lifespan(time) {\n  let timer = 0;\n  return {\n    update() {\n      timer += dt();\n      if (timer >= time) {\n        destroy(this);\n      }\n    },\n  };\n}\n\nfunction grow(rate) {\n  return {\n    update() {\n      const n = rate * dt();\n      this.scale.x += n;\n      this.scale.y += n;\n    },\n  };\n}\n```\n\nWe won't explain this code here, but if you'd like to know how it works, visit the [2D Space Shooter tutorial](/tutorials/kaboom/build-space-shooter-with-kaboom) to learn more.\n\nRun this now, and you should be able to shoot the alien bugs down.\n\n![Shooting explosions](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/shooting-explosion.gif)\n\n## Checking if alien bugs hit the spaceship\n\nNow we can add functionality to check if an alien bug makes it past our laser and explodes into the spaceship. Since the cockpit covers the entire screen, we can't make use of the [`onCollide`](https://kaboomjs.com/doc#onCollide) function to check if an alien has hit the cockpit, as it would always be colliding. Instead, we can check the `z` value of the alien, plus if it is within an area of the spacecraft that would cause damage. We'll use a \"strike zone\" in the center of the cockpit view as the area that aliens can do damage to the craft. Outside that area, we'll assume that the aliens go around or up and over the spacecraft.\n\nTo implement this scheme, add a definition for the strike zone:\n\n```js\nconst STRIKE_ZONE = { x1: 80, x2: 240, y1: 20, y2: 100 };\n```\n\nThen we can modify the `onUpdate(\"alien\",....)` event handler that we added earlier in **\"Moving the Alien Bugs\"** section. In the part of the function where we check if the alien is close to us (`if (alien.zpos <= 1 )`), update the code as follows:\n\n```js\nif (alien.zpos < 1) {\n  //check if the alien has hit the craft\n  if (","metadata":{"id":614}}],["615",{"pageContent":"```js\nif (alien.zpos < 1) {\n  //check if the alien has hit the craft\n  if (\n    alien.pos.x >= STRIKE_ZONE.x1 &&\n    alien.pos.x <= STRIKE_ZONE.x2 &&\n    alien.pos.y >= STRIKE_ZONE.y1 &&\n    alien.pos.y <= STRIKE_ZONE.y2\n  ) {\n    shake(20);\n    makeExplosion(alien.pos, 10, 10, 10);\n  }\n  destroyAlien(alien);\n}\n```\n\nWe've modified the code to check if the alien is really close to us (`alien.zpos < 1 `), and if it is, we check if it is within the bounds of the `STRIKE_ZONE` area. The strike zone is a rectangle - you could implement more complex shapes if you wanted to be more accurate about where the alien can hit. However, a rectangle approximation is OK for this game.\n\nIf the alien is close enough, and within our strike zone, we use the [`shake`](https://kaboomjs.com#shake) effect to make it \"feel\" like we've been hit. Then we create an explosion at the point of impact for some visual effects.\n\n![Colliding](https://docimg.replit.com/images/tutorials/25-3d-game-kaboom/colliding.gif)\n\n## Finishing up the game\n\nCongratulations, we've got all the main elements of flying and shooting and damage in the game. The next thing to do would be to add a scoring system, and a way to reduce the spaceship's health or shield when it gets hit. You can look at the [tutorial for the 2D version of this game](/tutorials/kaboom/build-space-shooter-with-kaboom), and copy the scoring and health code from there into this game. You can also copy the code for background music and more sound effects.\n\nHappy coding and have fun!\n\n## Credits\n\nThe game art and sounds used in this tutorial are from the following sources:\n\nLaser : https://freesound.org/people/sunnyflower/sounds/361471/\n\nExplosion: https://freesound.org/people/tommccann/sounds/235968/\n\nAlien Bug: https://opengameart.org/content/8-bit-alien-assets\n\nThe spaceship cockpit was made by Ritza.\n\nThank you to all the creators for putting their assets up with a Creative Commons license and allowing us to use them.","metadata":{"id":615}}],["616",{"pageContent":"The spaceship cockpit was made by Ritza.\n\nThank you to all the creators for putting their assets up with a Creative Commons license and allowing us to use them.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/3d-space-shooter-new?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":616}}],["617",{"pageContent":"---\ntitle: Asteroids game with Kaboom.js\n---\n\n# Building Asteroids in Kaboom.js\n\nFollowing our [previous tutorial on building Snake](/tutorials/kaboom/build-snake-with-kaboom), and cover the following topics:\n\n- Getting set up in Kaboom.js.\n- Calculating movement angles for our spaceship and bullet mechanics.\n- Random generation of asteroid placement.\n- Defining the effects of object collisions.\n- Developing a polished game with animation and sound effects.\n\nOur finished game will look like this:\n\n![Complete game](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/asteroids-game.gif)\n\nWe will use these [Asteroids sprites](https://opengameart.org/content/asteroids-game-sprites-atlas) and this [space background](https://opengameart.org/content/space-background) from OpenGameArt.org, and the following sounds from FreeSound.org:\n\n- [Laser](https://freesound.org/people/Daleonfire/sounds/376694/)\n- [Explosion](https://freesound.org/people/deleted_user_5405837/sounds/399303/)\n- [Rocket thrust](https://freesound.org/people/MATRIXXX_/sounds/515122/)\n\nWe will also be using [music by Eric Matyas of Soundimage.org](https://soundimage.org/sci-fi/).\n\nWe've created a single ZIP file with the sprites and sounds you will need for this tutorial, which you can download [here](https://tutorial-files.util.repl.co/asteroids-kaboom/asteroids-resources.zip).\n\n## Creating a new project and loading assets\n\nLog into your [Replit](https://replit.com) account and create a new repl. Choose **Kaboom** as your project type. Give this repl a name, like \"asteroids\".\n\n![Creating an REPL](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/create-repl.png)\n\nKaboom repls are quite different from other kinds of repls you may have seen before: instead of dealing directly with files in folders, you'll be dealing with scenes, sounds and sprites.","metadata":{"id":617}}],["618",{"pageContent":"Kaboom repls are quite different from other kinds of repls you may have seen before: instead of dealing directly with files in folders, you'll be dealing with scenes, sounds and sprites.\n\nBefore we start coding, we need to upload our sprites and sounds. Download [this ZIP file](https://tutorial-files.util.repl.co/asteroids-kaboom/asteroids-resources.zip) and extract it on your computer. Click the \"Files\" icon on the sidebar then, upload everything in Sounds folder to the \"sounds\" section of your repl, and everything in the Sprites folder to the \"sprites\" section of your repl.\n\n![](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/upload-sprites.gif)\n\nOnce you've uploaded the files, you can click on the \"Kaboom\" icon in the sidebar, and return to the \"main\" code file.\n\n## Setting up Kaboom\n\nTo start, we need to initialise and set up Kaboom with the scale we want for the game window. Replace the code in `main.js` with the code below:\n\n```javascript\nimport kaboom from \"kaboom\";\n\nkaboom({\n  scale: 1.5,\n});\n```\n\nThis will give us a blank canvas with a nice checkerboard pattern.\n\nNow, let's load up the sprites and sound files to make them available in the game. This code loads each of the graphic elements we'll use, and gives them a name so we can refer to them when we build the game objects:\n\n```javascript\nloadRoot(\"sprites/\");\nloadSprite(\"space\", \"space.jpg\");\nloadSprite(\"rocket1\", \"rocket1.png\");\nloadSprite(\"rocket2\", \"rocket2.png\");\nloadSprite(\"rocket3\", \"rocket3.png\");\nloadSprite(\"rocket4\", \"rocket4.png\");\nloadSprite(\"ship\", \"ship.png\");\nloadSprite(\"bullet\", \"bullet.png\");\nloadSprite(\"asteroid\", \"asteroid.png\");\nloadSprite(\"asteroid_small1\", \"asteroid_small1.png\");\nloadSprite(\"asteroid_small2\", \"asteroid_small2.png\");\nloadSprite(\"asteroid_small3\", \"asteroid_small3.png\");\nloadSprite(\"asteroid_small4\", \"asteroid_small4.png\");\n\nloadRoot(\"sounds/\");\nloadSound(\"rocket_thrust\", \"rocket_thrust.wav\");\nloadSound(\"laser\", \"laser.wav\");\nloadSound(\"explosion\", \"explosion.mp3\");","metadata":{"id":618}}],["619",{"pageContent":"loadSprite(\"asteroid_small4\", \"asteroid_small4.png\");\n\nloadRoot(\"sounds/\");\nloadSound(\"rocket_thrust\", \"rocket_thrust.wav\");\nloadSound(\"laser\", \"laser.wav\");\nloadSound(\"explosion\", \"explosion.mp3\");\nloadSound(\"Steamtech-Mayhem_Looping\", \"Steamtech-Mayhem_Looping.mp3\");\n```\n\nThe first line, [`loadRoot`](https://kaboomjs.com/#loadRoot), specifies which folder to load all the sprites and game elements from, so we don't have to keep typing it in for each sprite. Then each line loads a game sprite and gives it a name so that we can refer to it in code later. We also use similar code to load sound elements for our game using the [`loadSound`](https://kaboomjs.com/#loadSound) function.\n\n## Setting the scene\n\nA Kaboom.js game is made up of scenes, which you can think of as different screens, levels or stages. You can use scenes for game levels, menus, cut-scenes and any other screens your game might contain. In this tutorial, we'll just use one scene, which will contain the entire game logic.\n\nScenes are further divided into layers, which are populated by game objects (also called sprites). The layer an object is on will determine when it gets drawn and which other objects it can collide with. In this game, we'll use three layers: the background layer (`bg`), the object layer (`obj`), and UI layer (`ui`). To initialize these layers, add the code below to the bottom of the `main.js` file:\n\n```javascript\nscene(\"main\", () => {\n  layers([\"bg\", \"obj\", \"ui\"], \"obj\");\n\n  // add more scene code here\n});\n\ngo(\"main\");\n```\n\nOn the first line we define the `main` scene, and then we declare the game layers.\nThese layers will be drawn in the order declared. The majority of gameplay will happen in the `obj` layer, so we've set that as the default layer. Any objects we create will be placed in this layer, unless we specify a different layer when we create the object.\n\n**Note:** The code snippets in the sections that follow should be added within the body of the main scene unless specified otherwise.","metadata":{"id":619}}],["620",{"pageContent":"**Note:** The code snippets in the sections that follow should be added within the body of the main scene unless specified otherwise.\n\nThe `bg` layer will be drawn first, beneath everything else, and we'll use that to specify a background image for our game. Do that now by adding the following code to within the body of the main scene.\n\n```javascript\n// Background\nadd([sprite(\"space\"), layer(\"bg\")]);\n```\n\nHere we're adding a very simple game object: the space sprite we uploaded earlier on the background layer. Later game objects, such as the player's ship and the asteroids, will be more complicated.\n\nThe final layer, `ui`, is where we will display information such as the player's remaining lives and total score. Let's draw the score now. First, we have to declare a global variable named `score`, with the following line:\n\n```javascript\nlet score = 0;\n```\n\nNow we'll create an empty object on the UI layer, as follows:\n\n```javascript\n// UI\nui = add([layer(\"ui\")]);\n```\n\nAlthough Kaboom allows us to [create objects that display text](https://kaboomjs.com/doc#text), this text is set once at object creation and has to be updated manually, which doesn't really make sense for a real-time UI. Instead of doing that, we'll use our `ui` object's [draw event](https://kaboomjs.com/doc#on) [callback](<https://en.wikipedia.org/wiki/Callback_(computer_programming)>) to draw text containing the current score. Add the following code:\n\n```javascript\nui.on(\"draw\", () => {\n  drawText({\n    text: \"Score: \" + score,\n    size: 14,\n    font: \"sink\",\n    pos: vec2(8, 24),\n  });\n});\n```\n\nCallbacks are a key concept in JavaScript and Kaboom makes heavy use of them. Some callbacks, such as the one above, are called on every frame of the game (around 60 times a second). Others are called when specific events happen, such as user keypresses. Because this callback will be invoked so often, our score will always be up to date.\n\nRun your repl now and marvel at the vast emptiness of space.","metadata":{"id":620}}],["621",{"pageContent":"Run your repl now and marvel at the vast emptiness of space.\n\n![Empty with score](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/empty-with-score.png)\n\n## The player's ship\n\nNow let's populate that empty space. Enter the following code below the UI drawing code to create the player:\n\n```javascript\n// The ship\nconst player = add([\n  sprite(\"ship\"),\n  pos(160, 120),\n  rotate(0),\n  origin(\"center\"),\n  solid(),\n  area(),\n  \"player\",\n  \"mobile\",\n  \"wraps\",\n  {\n    turn_speed: 4.58,\n    speed: 0,\n    max_thrust: 48,\n    acceleration: 2,\n    deceleration: 4,\n    lives: 3,\n    can_shoot: true,\n    laser_cooldown: 0.5,\n    invulnerable: false,\n    invulnerablity_time: 3,\n    animation_frame: 0,\n    thrusting: false,\n  },\n]);\n```\n\nHere we're creating a game object with a number of [components](https://kaboomjs.com/doc#add), each of which give our object some data or behavior. These are:\n\n- The [`sprite`](https://kaboomjs.com/#sprite) component, which draws the `ship` sprite.\n- The [`pos`](https://kaboomjs.com/#pos) (position) component, which places the player near the center of the screen in the Replit browser.\n- The [`rotate`](https://kaboomjs.com/#rotate) component, which will allow the player to turn the ship with the left and right arrow keys.\n- The [`origin`](https://kaboomjs.com/#origin) component, which sets the sprite's _origin_ to \"center\", so that when we rotate the ship, it will rotate around the middle of its sprite rather than the default top-left corner.\n- The [`area`](https://kaboomjs.com/#area) component, which generates the collision area for the ship to detect collisions.\n\nFollowing that initial configuration, we're giving the player object three tags: `player`, `mobile` and `wraps`. Kaboom uses a tagging system to apply behavior to objects -- you can think of this as similar to [multiple inheritance](https://en.wikipedia.org/wiki/Multiple_inheritance). By tagging objects with shared behavior, we can save ourselves from duplicating code.","metadata":{"id":621}}],["622",{"pageContent":"Finally, we assign a number of custom properties to our player object. We'll use these properties to handle a variety of gameplay functions, such as moving and shooting.\n\nIf you run your repl now, you should see the ship sprite in the middle of a blank screen. In the next section, we'll implement movement controls.\n\n![Ship in space](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/ship-in-space.png)\n\n### Movement controls\n\nIn this game, our player will turn the nose of the spaceship with the left and right arrow keys, and thrust forward and backward with the up and down arrow keys. We'll handle movement in two phases: user input, and actually moving the ship. First, let's allow the player to turn their ship to the left and right. Add the following code:\n\n```javascript\n// Movement keys\nonKeyDown(\"left\", () => {\n  player.angle -= player.turn_speed;\n});\nonKeyDown(\"right\", () => {\n  player.angle += player.turn_speed;\n});\n```\n\nRun your repl now, and you should be able to turn the ship to the left and right by pressing the respective arrow keys. If you think it turns too fast or too slow, change the value of `turn_speed` in the player creation code.\n\nNow let's implement the up and down keys, so the player can move around the scene. Enter the following code beneath the player turning code:\n\n```javascript\nonKeyDown(\"up\", () => {\n  player.speed = Math.min(\n    player.speed + player.acceleration,\n    player.max_thrust\n  );\n  play(\"rocket_thrust\", {\n    volume: 0.1,\n    speed: 2.0,\n  });\n});\n```","metadata":{"id":622}}],["623",{"pageContent":"```javascript\nonKeyDown(\"up\", () => {\n  player.speed = Math.min(\n    player.speed + player.acceleration,\n    player.max_thrust\n  );\n  play(\"rocket_thrust\", {\n    volume: 0.1,\n    speed: 2.0,\n  });\n});\n```\n\nRather than having the spaceship go from zero to max speed immediately, we want to simulate a gradual acceleration to our max speed. To achieve this, we use [Math.min()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) to set the player's speed to the minimum value between current speed plus acceleration and its maximum speed. This will make the ship gradually increase in speed until it reaches `max_thrust`. Play around with the values of `acceleration` and `max_thrust` in the player creation code and see what feels right to you.\n\nAdditionally, we set our rocket thrust sound to [play](https://kaboomjs.com/doc#play) while accelerating. Kaboom allows us to manipulate sounds in a few different ways, such as changing their speed and volume.\n\nWe'll handle deceleration by doing the opposite to acceleration, using [Math.max()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) to choose the maximum between the player's speed minus their deceleration, and their maximum speed in reverse (i.e. negative). Add the following code below the acceleration controls:\n\n```javascript\nonKeyDown(\"down\", () => {\n  player.speed = Math.max(\n    player.speed - player.deceleration,\n    -player.max_thrust\n  );\n  play(\"rocket_thrust\", {\n    volume: 0.2,\n    speed: 2.0,\n  });\n});\n```\n\nIf you run your repl now and try to accelerate or decelerate, the sound will play, but the ship will go nowhere. This is because we're manipulating `player.speed`, which is a custom property that Kaboom hasn't attached any special behavior to (unlike `player.angle`). Let's add some movement parameters now.\n\n### Movement","metadata":{"id":623}}],["624",{"pageContent":"### Movement\n\nMovement in Kaboom and most other 2D game development systems is handled using X and Y coordinates on a plane. To move an object left, you subtract from its X coordinate, and to move it right, you add to its X coordinate. To move an object up, you subtract from its Y coordinate, and to move it down, you add to its Y coordinate. Therefore, basic four-directional movement in games like Snake or Pacman is quite straightforward. The directional movement we need for Asteroids (commonly called [tank controls](https://en.wikipedia.org/wiki/Tank_controls)) is more complex, requiring some calculations.\n\nAt a high level, we want to move a given distance (`player.speed`) in a given direction (`player.angle`). As a first step, let's create an `onUpdate` callback for our `mobile` tag. This code, like our UI drawing code above, will be run by every object with the \"mobile\" tag on every frame of the game, so we can use it for more than just the player object. Add the following code at the bottom of your main scene:\n\n```javascript\n// Movement\nonUpdate(\"mobile\", (e) => {\n  e.move(pointAt(e.speed, e.angle));\n});\n```\n\nFirst, we move our object, using the function `pointAt()`, which takes a speed and an angle and returns the corresponding X and Y co-ordinates as a [`vec2`](https://kaboomjs.com/doc#vec2) object, Kaboom's 2D vector type. This data type is provided by Kaboom specifically for working with X and Y coordinates, and comes with a number of useful functions, such as addition and subtraction.\n\nNow we need to create the `pointAt()` function. Before we jump into the code, let's think about the problem. Our movement can be drawn as an angled line on a plane, and its X and Y coordinates as horizontal and vertical lines connected to it, giving us a right-angled triangle.\n\n![Triangle](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/triangle.png)","metadata":{"id":624}}],["625",{"pageContent":"![Triangle](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/triangle.png)\n\nWe know the values of the triangle's angles: one is 90 degrees, and the other two are equal to `player.angle`. The length of the triangle's hypotenuse (the red line in the diagram above) is `player.speed`: this is the _distance_ our ship will be traveling.\n\nWe now need to calculate the lengths of the other two sides to get the X and Y values for our movement vector. We can do this using [the trigonometric sine and cosine functions](https://www2.clarku.edu/faculty/djoyce/trig/formulas.html), like so:\n\n```\nsine(angle) = y / distance\ny = distance * sin(angle)\n\ncosine(angle) = x / distance\nx = distance * cos(angle)\n```\n\nRemember, in Kaboom and most other 2D game development platforms, the Y axis is inverted, so we have to make it negative. Add the `pointAt()` function below, at the top of the main scene code.\n\n```javascript\nfunction pointAt(distance, angle) {\n  let radians = -1 * deg2rad(angle);\n  return vec2(distance * Math.cos(radians), -distance * Math.sin(radians));\n}\n```\n\nRun your repl now and take the ship for a spin. You should be able to thrust forward and backward, moving according to where the ship's nose is pointing.\n\nThere's one little problem though: thrust too long, and you'll fly off the screen. In any other game, we might solve that by enclosing the play area with walls, but that doesn't seem quite right in the infinite expanse of space. The original _Asteroids_ solved this by having the player and other key objects wrap around the screen, i.e. appear at the bottom after going over the top, or at the left edge after going past the right edge. Let's implement that now, using the \"wraps\" tag we assigned to our player object when we created it. Add the following code to the bottom of your main scene:\n\n```javascript\n// Wrap around the screen\nonUpdate(\"wraps\", (e) => {\n  if (e.pos.x > width()) {\n    e.pos.x = 0;\n  }\n  if (e.pos.x < 0) {\n    e.pos.x = width();\n  }\n  if (e.pos.y > height()) {","metadata":{"id":625}}],["626",{"pageContent":"```javascript\n// Wrap around the screen\nonUpdate(\"wraps\", (e) => {\n  if (e.pos.x > width()) {\n    e.pos.x = 0;\n  }\n  if (e.pos.x < 0) {\n    e.pos.x = width();\n  }\n  if (e.pos.y > height()) {\n    e.pos.y = 0;\n  }\n  if (e.pos.y < 0) {\n    e.pos.y = height();\n  }\n});\n```\n\nThis is a fairly straightforward piece of code that checks whether an object's position is outside of the room and, if so, places it on the other side. The [`width()`](https://kaboomjs.com/doc#width) and [`height()`](https://kaboomjs.com/doc#height) functions are Kaboom built-ins that return the size of the game canvas. Run your repl now and try it out.\n\n### Rocket animation\n\nOur ship can move now, but it would be nice to see its rockets firing when the player presses the up arrow key, as well as hear them. Reactive animations like these make games feel more responsive and look more dynamic.\n\nKaboom has methods for handling animations when a game object uses an animated sprite (i.e. one with multiple images), but this isn't quite what we want here. Rather than animating the player's ship, we need to animate the rocket thrust that appears behind it when a thrusting key is pressed, so we'll need to handle all the animation code ourselves. Luckily, Kaboom makes this fairly simple.\n\nFirst, let's create an array with our four rocket sprites. Add the following code at the bottom of your main scene:\n\n```javascript\n// Animate rocket\nconst thrust_animation = [\"rocket1\", \"rocket2\", \"rocket3\", \"rocket4\"];\n```\n\nThen we need some way to indicate when to start and stop the animation. We can use Kaboom's [`onKeyPress`](https://kaboomjs.com/doc#onKeyPress) and [`onKeyRelease`](https://kaboomjs.com/doc#onKeyRelease) events for this, as well as two of the properties we defined for our player (`thrusting` and `animation_frame`). Add the following code:\n\n```javascript\n// rocket animation helpers\nonKeyPress(\"up\", () => {\n  player.thrusting = true;\n  player.animation_frame = 0;\n});\nonKeyRelease(\"up\", () => {\n  player.thrusting = false;\n});\n```","metadata":{"id":626}}],["627",{"pageContent":"```javascript\n// rocket animation helpers\nonKeyPress(\"up\", () => {\n  player.thrusting = true;\n  player.animation_frame = 0;\n});\nonKeyRelease(\"up\", () => {\n  player.thrusting = false;\n});\n```\n\nNow let's draw the animation. We'll use a draw event callback, which lets us make the player draw other things in addition to its own sprite. Add the following code:\n\n```javascript\n// draw current rocket animation frame\nonDraw(\"player\", (p) => {\n  if (player.thrusting) {\n    // draw current frame\n    drawSprite({\n      sprite: thrust_animation[p.animation_frame],\n      pos: p.pos.add(pointAt(-p.height / 2, p.angle)),\n      origin: \"center\",\n      angle: p.angle,\n    });\n  }\n});\n\n/*\nNOTE: starting from kaboom v2000.2 the coordinate system in onDraw(\"player\") will be relative to the current \"player\" object, it's an unintended breaking change but will be the default behavior starting on the next major release. If you're on v2000.2, change the drawSprite code to\n\ndrawSprite( {\n    sprite: thrust_animation[p.animation_frame],\n    // use a fixed position because it's going to be relative to the current player's coordinate system\n    pos: vec2(-p.width / 2, 0),\n    origin: \"center\",\n});\n*/\n```\n\nHere we're using our `pointAt` function again, but this time we're looking for the rocket end of the ship, rather than its nose. We use our `thrust_animation` array in conjunction with the player's `animation_frame` value to figure out which rocket image to draw.\n\nTo actually make the rocket animate (i.e. cycle through animation frames), we'll use Kaboom's [`onUpdate`](https://kaboomjs.com#onUpdate) function, and create a callback that changes the animation frame every 0.1 seconds. Add the following code:\n\n```javascript\nlet move_delay = 0.1;\nlet timer = 0;\n// loop rocket animation\nonUpdate(() => {\n  timer += dt();\n  if (timer < move_delay) return;\n  timer = 0;\n\n  if (player.thrusting) {\n    player.animation_frame++;\n    if (player.animation_frame >= thrust_animation.length) {\n      // wrap to start\n      player.animation_frame = 0;\n    }\n  }\n});\n```","metadata":{"id":627}}],["628",{"pageContent":"timer = 0;\n\n  if (player.thrusting) {\n    player.animation_frame++;\n    if (player.animation_frame >= thrust_animation.length) {\n      // wrap to start\n      player.animation_frame = 0;\n    }\n  }\n});\n```\n\nThat's it! Run your repl and move your ship around.\n\n![Ship thrusting](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/ship-thrusting.png)\n\n### Shooting\n\nTo make our ship fire laser bullets, we need to create bullet objects just in front of the ship's nose, and have them travel in the same direction the ship is pointing. Here we can reuse our new `pointAt()` function. Add the following code beneath the existing movement control code:\n\n```javascript\n// Shooting\nonKeyDown(\"space\", () => {\n  add([\n    sprite(\"bullet\"),\n    pos(player.pos.add(pointAt(player.width / 2, player.angle))),\n    rotate(player.angle),\n    origin(\"center\"),\n    area(),\n    \"bullet\",\n    \"mobile\",\n    \"destructs\",\n    {\n      speed: 100,\n    },\n  ]);\n  play(\"laser\");\n});\n```\n\nHere we're creating a bullet object at the tip of the ship's nose. We calculate the position of the tip by running our `pointAt()` function with a distance of half the ship sprite's width, and the sprite's angle. We use half the sprite's width because the ship sprite's origin is at its center. Additionally, we rotate the bullet according to the ship's angle (again using center as the origin) and assign a number of tags to it. Note that because we're tagging it with \"mobile\" and giving it both a `rotate` component and a speed property, it will use the same movement code we wrote for our player object.\n\nTry the game out now, and hold down the spacebar to shoot. Do you notice anything about your ship's firing rate?\n\n![Too many bullets](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/too-many-bullets.png)","metadata":{"id":628}}],["629",{"pageContent":"![Too many bullets](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/too-many-bullets.png)\n\nAt the moment, a bullet object will be created in every frame while space is down. That's a lot of bullets, and might make the game too easy, as well as slowing it to a crawl on less capable devices. We need to add a cooldown period, and we can do so by altering our shooting code to look like this:\n\n```javascript\n// Shooting\nonKeyDown(\"space\", () => {\n  if (player.can_shoot) {\n    // new if statement\n    add([\n      sprite(\"bullet\"),\n      pos(player.pos.add(pointAt(player.width / 2, player.angle))),\n      rotate(player.angle),\n      origin(\"center\"),\n      area(),\n      \"bullet\",\n      \"mobile\",\n      \"destructs\",\n      {\n        speed: 100,\n      },\n    ]);\n    play(\"laser\");\n    player.can_shoot = false; //\n    wait(player.laser_cooldown, () => {\n      player.can_shoot = true;\n    });\n  }\n});\n```\n\nHere, we use two of the properties we defined in the player object above, `can_shoot` and `laser_cooldown`, to implement a cooldown mechanism. We will only create a bullet if `can_shoot` is true, and we set it to false immediately after each shot. Then we use Kaboom's [`wait`](https://kaboomjs.com/doc#wait) timer to set it to true after `laser_cooldown` number of seconds. Because this timer is an [asynchronous callback](<https://en.wikipedia.org/wiki/Callback_(computer_programming)>), the rest of the game can continue while the laser cooldown period passes.\n\nRun your repl and test whether the ship's laser fires at the expected intervals.\n\n![Laser rate](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/laser.png)\n\n## The asteroids\n\nNow that we've added shooting, we need to add something to shoot at. It's time to create the asteroids this game gets its name from.\n\n### Creation\n\nAdd the following code at the bottom of the main scene:\n\n```javascript\n// Asteroids\nconst NUM_ASTERIODS = 5;\n\nfor (let i = 0; i < NUM_ASTERIODS; i++) {\n  var spawnPoint = asteroidSpawnPoint();\n  var a = add([","metadata":{"id":629}}],["630",{"pageContent":"Add the following code at the bottom of the main scene:\n\n```javascript\n// Asteroids\nconst NUM_ASTERIODS = 5;\n\nfor (let i = 0; i < NUM_ASTERIODS; i++) {\n  var spawnPoint = asteroidSpawnPoint();\n  var a = add([\n    sprite(\"asteroid\"),\n    pos(spawnPoint),\n    rotate(rand(1, 90)),\n    origin(\"center\"),\n    area(),\n    solid(),\n    \"asteroid\",\n    \"mobile\",\n    \"wraps\",\n    {\n      speed: rand(5, 10),\n      initializing: true,\n    },\n  ]);\n\n  a.pushOutAll();\n}\n```\n\nHere we're creating a constant number of asteroids, and assigning them a random position, direction of movement and speed. The asteroid creation code is largely similar to our player creation code, but with fewer custom properties. One key difference is the presence of the [`solid`](https://kaboomjs.com/doc#solid) component, which marks the asteroid as a solid object that other objects shouldn't be able to pass through.\n\nThe one custom property that's unique to asteroids is `initializing`. Because we're spawning each asteroid in a random position, there's a chance we might spawn one on top of another, or on top of the player.\n\nOne approach to avoiding this might be to ensure we don't spawn any two asteroids at the same coordinates, but we might still end up spawning them close enough to overlap with each other. We would then need to take into account the size of asteroids and prevent asteroids from spawning at any of those coordinates, and our code would quickly become complicated.\n\nInstead of doing that, we can leverage Kaboom's collision detection to achieve the same effect. Right after we create the asteroid, we can check if it's overlapping with another \"mobile\"-tagged object (i.e. another asteroid, or the player's ship), and if so, we randomise its position again. We can use a while loop to repeat this action until our asteroid lands up in a free space. Add the following code inside the asteroid creation for-loop, below the `add` function:\n\n```javascript\nwhile (a.isColliding(\"mobile\")) {\n  spawnPoint = asteroidSpawnPoint();","metadata":{"id":630}}],["631",{"pageContent":"```javascript\nwhile (a.isColliding(\"mobile\")) {\n  spawnPoint = asteroidSpawnPoint();\n  a.pos = spawnPoint;\n  a.pushOutAll();\n}\n\na.initializing = false;\n```\n\nWe want the asteroid to be in an \"initializing\" state while we're finding its starting position. When we implement its actions later on, we'll check the value of its `initializing` property to prevent it from harming the player or affecting other asteroids while it's still spawning.\n\nBefore we move on, let's implement the `asteroidSpawnPoint()` function. Add the following code near the top of the main scene, just beneath the `pointAt()` function:\n\n```javascript\nfunction asteroidSpawnPoint() {\n  // spawn randomly at the edge of the scene\n  return choose([\n    rand(vec2(0), vec2(width(), 0)),\n    rand(vec2(0), vec2(0, height())),\n    rand(vec2(0, height()), vec2(width(), height())),\n    rand(vec2(width(), 0), vec2(width(), height())),\n  ]);\n}\n```\n\nThis function uses Kaboom's [`choose()`](https://kaboomjs.com/doc#choose) and [`rand()`](https://kaboomjs.com/doc#rand) functions to choose a random location on the edge of the scene to spawn an asteroid.\n\n### Collisions\n\nIf you've seen any movies set in outer space, you'll know that the main thing asteroids do is crash into spaceships and each other, even though the [real-life asteroid belt](https://en.wikipedia.org/wiki/Asteroid_belt) in our solar system is not nearly dense enough for asteroid collisions to be a frequent occurrence.\n\nThere are three types of collisions we need to account for:\n\n- Player and asteroid, which damages the player, causing them to lose a life.\n- Bullet and asteroid, which destroys the asteroid.\n- Asteroid and asteroid, which causes both asteroids to bounce off each other.\n\nLet's go through the code for each of these, adding it to our main scene just below the code we wrote to make objects wrap around the screen. First, player and asteroid:\n\n```javascript\n// Collisions\nonCollide(\"player\", \"asteroid\", (p, a) => {\n  if (!a.initializing) {\n    p.lives--;\n  }\n});\n```","metadata":{"id":631}}],["632",{"pageContent":"```javascript\n// Collisions\nonCollide(\"player\", \"asteroid\", (p, a) => {\n  if (!a.initializing) {\n    p.lives--;\n  }\n});\n```\n\nThis code reduces the player's lives by one as long as the asteroid is not initializing.\n\nNext, add the code for collisions between a bullet and an asteroid:\n\n```javascript\nonCollide(\"bullet\", \"asteroid\", (b, a) => {\n  if (!a.initializing) {\n    destroy(b);\n    destroy(a);\n    play(\"explosion\");\n    score++;\n  }\n});\n```\n\nThis very simple code destroys both the bullet and the asteroid, plays an explosion sound, and increments the game score.\n\nFinally, add the following to handle asteroid collisions.\n\n```javascript\nonCollide(\"asteroid\", \"asteroid\", (a1, a2) => {\n  if (!(a1.initializing || a2.initializing)) {\n    a1.speed = -a1.speed;\n    a2.speed = -a2.speed;\n  }\n});\n```\n\nThis code makes the asteroids appear to bounce off each other by reversing their movement direction.\n\nRun the game now and see what happens when you ram your ship into some asteroids!\n\n![Asteroids](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/asteroids.png)\n\n## Ending the game\n\nThe player's ship can now lose lives by crashing into asteroids, but this doesn't mean much at the moment, as we haven't added any code to end the game if the player runs out of lives, or even to display the lives remaining. Let's do that now. First, let's change the code in the player–asteroid collision to [trigger](https://kaboomjs.com/doc#obj.trigger) a custom \"damage\" event instead of just subtracting a life.\n\n```javascript\n// Collisions\nonCollide(\"player\", \"asteroid\", (p, a) => {\n  if (!a.initializing) {\n    p.trigger(\"damage\"); // previously lives--\n  }\n});\n```\n\nNow we can add the code to handle this event just below the collision code:\n\n```javascript\n// Take damage\nplayer.on(\"damage\", () => {\n  player.lives--;\n\n  // destroy ship if lives finished\n  if (player.lives <= 0) {\n    destroy(player);\n  }\n});\n```","metadata":{"id":632}}],["633",{"pageContent":"```javascript\n// Take damage\nplayer.on(\"damage\", () => {\n  player.lives--;\n\n  // destroy ship if lives finished\n  if (player.lives <= 0) {\n    destroy(player);\n  }\n});\n```\n\nWhen objects are destroyed in Kaboom, the \"destroy\" event is triggered. We'll use this event to show a game over screen with the player's score by adding the following code:\n\n```javascript\n// End game on player destruction\nplayer.on(\"destroy\", () => {\n  add([\n    text(`GAME OVER\\n\\nScore: ${score}\\n\\n[R]estart?`, { size: 20 }),\n    pos(width() / 2, height() / 2),\n    layer(\"ui\"),\n  ]);\n});\n```\n\nWe need to give the player a way to restart the game and try again. Add the following code just below the previous block:\n\n```javascript\n// Restart game\nonKeyPress(\"r\", () => {\n  go(\"main\");\n});\n```\n\nThe `go` function is a Kaboom built-in for moving between scenes. As this game only has one scene, we can use it to reset the scene and thus the game to its initial state.\n\nLastly, we need to add the player's lives to the game UI, so they know how much more damage they can afford to take. Find the `ui` object code near the top of the main scene and alter it to resemble the below:\n\n```javascript\nui.on(\"draw\", () => {\n  drawText({\n    text: \"Score: \" + score,\n    size: 14,\n    font: \"sink\",\n    pos: vec2(8, 24),\n  });\n\n  // lives (new code below)\n  drawText({\n    text: \"Lives: \",\n    size: 12,\n    font: \"sink\",\n    pos: vec2(8),\n  });\n  for (let x = 64; x < 64 + 16 * player.lives; x += 16) {\n    drawSprite({\n      sprite: \"ship\",\n      pos: vec2(x, 12),\n      angle: -90,\n      origin: \"center\",\n      scale: 0.5,\n    });\n  }\n});\n```\n\nThis code draws a number of scaled down player spaceships equal to the number of remaining lives.\n\n![Lives](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/lives.png)\n\n## Final touches\n\nOur game is fully playable now, but it's still missing some niceties, and one core gameplay feature that you should be able to identify if you've played _Asteroids_ before. In this final section, we'll add the following:\n\n- Some background music.","metadata":{"id":633}}],["634",{"pageContent":"- Some background music.\n- Smaller, faster asteroids that our large asteroids break into when destroyed.\n- Temporary invulnerability for the player for a few seconds after they take damage.\n\n### Background music\n\nAdd the following code somewhere in your main scene.\n\n```javascript\n// Background music\nconst music = play(\"Steamtech-Mayhem_Looping\");\nmusic.loop();\n```\n\nThe first line [plays](https://kaboomjs.com/doc#play) the piece [Steamtech Mayhem from Soundimage.org](https://soundimage.org/sci-fi/) and the second line will ensure that it repeats as long as the game is running.\n\n### Smaller asteroids\n\nTo create smaller asteroids when a large asteroid is destroyed, we'll use a destroy event callback, which will run every time an asteroid is destroyed. Add the following code to the bottom of your main scene:\n\n```javascript\n// Asteroid destruction\non(\"destroy\", \"asteroid\", (a) => {\n  if (!a.is(\"small\")) {\n    // create four smaller asteroids at each corner of the large one\n    positions = [\n      a.pos.add(vec2(a.width / 4, -a.height / 4)),\n      a.pos.add(vec2(-a.width / 4, -a.height / 4)),\n      a.pos.add(vec2(-a.width / 4, a.height / 4)),\n      a.pos.add(vec2(a.width / 4, a.height / 4)),\n    ];\n\n    // small asteroids move out from the center of the explosion\n    rotations = [16, 34, 65, 87];\n\n    for (let i = 0; i < positions.length; i++) {\n      var s = add([\n        sprite(`asteroid_small${i + 1}`),\n        pos(positions[i]),\n        rotate(rotations[i]),\n        origin(\"center\"),\n        area(),\n        solid(),\n        \"asteroid\",\n        \"small\",\n        \"mobile\",\n        \"wraps\",\n        {\n          speed: rand(15, 25),\n          initializing: false,\n        },\n      ]);\n\n      s.pushOutAll();\n    }\n  }\n});\n```\n\nOur small asteroids are mostly similar to our large ones. Differences include the addition of the `small` tag, the less random approach to initial placement, the higher speed, and the selection of one of four different possible small asteroid sprites.","metadata":{"id":634}}],["635",{"pageContent":"To make our game true to the original _Asteroids_, we should give the player more points for destroying these fast, small asteroids. Find and modify the bullet–asteroid collision code as below:\n\n```javascript\nonCollide(\"bullet\", \"asteroid\", (b, a) => {\n  if (!a.initializing) {\n    destroy(b);\n    destroy(a);\n    play(\"explosion\");\n    score = a.is(\"small\") ? score + 2 : score++; // 2 points for small, 1 for big\n  }\n});\n```\n\n![Small asteroids](https://docimg.replit.com/images/tutorials/23-asteroids-kaboom/small-asteroids.png)\n\n### Temporary invulnerability\n\nA nice touch to make our game a little more forgiving is temporary invulnerability for the player after they lose a life. We can add this by finding and altering the player's damage event callback as follows:\n\n```javascript\n// Take damage\nplayer.on(\"damage\", () => {\n  if (!player.invulnerable) {\n    // new if statement\n    player.lives--;\n  }\n\n  // destroy ship if lives finished\n  if (player.lives <= 0) {\n    destroy(player);\n  } // new code\n  else {\n    // Temporary invulnerability\n    player.invulnerable = true;\n\n    wait(player.invulnerablity_time, () => {\n      player.invulnerable = false;\n      player.hidden = false;\n    });\n  }\n});\n```\n\nHere we're making the player invulnerable and then using a `wait` callback to make them vulnerable again after a given number of seconds, similar to what we did for the laser timeout. We're also making sure the player is visible by setting [`player.hidden`](https://kaboomjs.com/doc#add) to false, because the way we're going to indicate the player's invulnerability is by having their ship flash rapidly. Find and update the `onUpdate` event callback we added earlier for rocket thrust animation :\n\n```javascript\nonUpdate(() => {\n  timer += dt();\n  if (timer < move_delay) return;\n  timer = 0;\n\n  if (player.thrusting) {\n    player.animation_frame++;\n    if (player.animation_frame >= thrust_animation.length) {\n      // wrap to start\n      player.animation_frame = 0;\n    }\n  }\n\n  // new if statement\n  if (player.invulnerable) {","metadata":{"id":635}}],["636",{"pageContent":"if (player.animation_frame >= thrust_animation.length) {\n      // wrap to start\n      player.animation_frame = 0;\n    }\n  }\n\n  // new if statement\n  if (player.invulnerable) {\n    player.hidden = !player.hidden;\n  }\n});\n```\n\n## Where to next?\n\nWe've covered a lot of ground in this tutorial and touched on a lot of Kaboom's features. From here, you can start making your own games with Kaboom, or if you want to extend this one, here are some ideas:\n\n- Power-ups, such as extra lives and time-limited weapon upgrades.\n- Enemy spaceships that fire at the player.\n- A third, even smaller size of asteroid.\n- More animations, for explosions and laser firing.\n\nYou can find the game repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Asteroids-new?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":636}}],["637",{"pageContent":"---\ntitle: Breakout with Kaboom.js\n---\n\n# Building a block-breaking game with Kaboom.js\n\nIn this tutorial, we'll use the Kaboom framework to develop a simple block-breaking game, similar to classics like Atari's _Breakout_ and Taito's _Arkanoid_.\n\nBy the end of this tutorial, you'll be able to:\n\n- Use the Kaboom framework to develop a polished arcade game with multiple levels.\n- Have a basic game to build on by adding your own powerups and block types.\n\nOur finished game will look like this:\n\n![The finished game](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/gameplay.gif)\n\nWe will be using [this set of sprites](https://opengameart.org/content/breakout-set) by [Michele Bucelli](https://opengameart.org/users/buch) and sound effects from [this pack](https://opengameart.org/content/100-plus-game-sound-effects-wavoggm4a) by [Jaymin Covy](https://opengameart.org/users/damaged-panda). We'll also use [music](https://soundimage.org/chiptunes-4/) by [Eric Matyas](https://soundimage.org/chiptunes-4/) of Soundimage.org.\n\nWe've created a single ZIP file with the sprites and sounds you will need for this tutorial, which you can download [here](https://tutorial-files.util.repl.co/breakout-kaboom/breakout-resources.zip).\n\n## Getting started\n\nLog into your [Replit](https://replit.com/login) account and create a new repl. Choose **Kaboom** as your project type. Give this repl a name, like \"blockbreaker\".\n\n![Create a new repl](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/create-repl.png)\n\nKaboom repls are quite different from other kinds of repls you may have seen before: instead of dealing directly with files in folders, you'll be dealing with code, sounds and sprites, the latter of which you can draw directly in Replit's [image editor](/tutorials/kaboom/kaboom-editor).","metadata":{"id":637}}],["638",{"pageContent":"Before we start coding, we need to upload our sprites and sounds. Download [this ZIP file](https://tutorial-files.util.repl.co/breakout-kaboom/breakout-resources.zip) and extract it on your computer. Click the \"Files\" icon on the sidebar and upload everything in the extracted file's Sounds folder to the \"sounds\" section of your repl, and everything in the Sprites folder to the \"sprites\" section of your repl.\n\n![Uploading assets](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/upload-assets.gif)\n\nOnce you've uploaded the files, you can click on the \"Kaboom\" icon in the sidebar, and return to the \"main\" code file.\n\n## Loading assets\n\nWhen you first open your new Kaboom repl, you'll be greeted by a file containing the sample code below.\n\n```javascript\nimport kaboom from \"kaboom\";\n\n// initialize context\nkaboom();\n\n// load assets\nloadSprite(\"bean\", \"sprites/bean.png\");\n\n// add a character to screen\nadd([\n  // list of components\n  sprite(\"bean\"),\n  pos(80, 40),\n  area(),\n]);\n\n// add a kaboom on mouse click\nonClick(() => {\n  addKaboom(mousePos());\n});\n\n// burp on \"b\"\nonKeyPress(\"b\", burp);\n```\n\nBefore we start developing our game, let's remove most of this code, leaving only the following lines:\n\n```javascript\nimport kaboom from \"kaboom\";\n\n// initialize context\nkaboom();\n```\n\nNow we can set the stage for our own game. First, we'll make the game background black and fix the game's screen size by altering the [Kaboom context initialization](https://kaboomjs.com/#kaboom). Add the following to the line `kaboom();`:\n\n```javascript\n// initialize context\nkaboom({\n  width: 768,\n  height: 360,\n  background: [0, 0, 0],\n});\n```","metadata":{"id":638}}],["639",{"pageContent":"```javascript\n// initialize context\nkaboom({\n  width: 768,\n  height: 360,\n  background: [0, 0, 0],\n});\n```\n\nNext, we need to import sprites for our game's objects: the player's paddle, the ball, and the breakable blocks. As the OpenGameArt sprites we're using are all in a single image file, we'll load them using Kaboom's [`loadSpriteAtlas()`](https://kaboomjs.com/#loadSpriteAtlas) function. This saves us the hassle of splitting each sprite into its own image file. Add the following code to the bottom of your main code file:\n\n```javascript\nloadSpriteAtlas(\"sprites/breakout_pieces.png\", {\n  blocka: {\n    x: 8,\n    y: 8,\n    width: 32,\n    height: 16,\n  },\n  blockb: {\n    x: 8,\n    y: 28,\n    width: 32,\n    height: 16,\n  },\n  blockc: {\n    x: 8,\n    y: 48,\n    width: 32,\n    height: 16,\n  },\n  blockd: {\n    x: 8,\n    y: 68,\n    width: 32,\n    height: 16,\n  },\n  paddle: {\n    x: 8,\n    y: 152,\n    width: 64,\n    height: 16,\n  },\n  ball: {\n    x: 48,\n    y: 136,\n    width: 8,\n    height: 8,\n  },\n  heart: {\n    x: 120,\n    y: 136,\n    width: 8,\n    height: 8,\n  },\n});\n```\n\nNote that we've imported four different block sprites, named `block{a-d}`. Each sprite is a different color and will be worth a different number of points when broken. We've also left most of the sprite sheet's contents untouched – only a few sprites are needed for basic gameplay.\n\nNext, we need to import a font, which we'll use to display the player's score and lives. As Kaboom comes with a number of default fonts we could use, this step is optional, but it will help to give our game a cohesive visual style.\n\n```javascript\nloadFont(\"breakout\", \"sprites/breakout_font.png\", 6, 8, {\n  chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ  0123456789:!'\",\n});\n```","metadata":{"id":639}}],["640",{"pageContent":"```javascript\nloadFont(\"breakout\", \"sprites/breakout_font.png\", 6, 8, {\n  chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ  0123456789:!'\",\n});\n```\n\nWe've used Kaboom's [`loadFont()`](https://kaboomjs.com/#loadFont) function, specifying the name of the font, the image file to source it from, the width and height of individual characters, and the characters it contains. Take a look at the layout of `breakout_font.png` to see the format Kaboom expects. Also note that we will not be able to use any characters outside of the ones represented here – this includes lowercase letters.\n\n![Breakout font](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/breakout_font.png)\n\nLastly, we need to load our sound effects and music. Add the following code at the bottom to do this:\n\n```javascript\n// sounds\nloadSound(\"blockbreak\", \"sounds/Explosion5.ogg\");\nloadSound(\"paddlehit\", \"sounds/Powerup20.ogg\");\nloadSound(\"powerup\", \"sounds/Powerup2.ogg\");\nloadSound(\"ArcadeOddities\", \"sounds/Arcade-Oddities.mp3\");\n```\n\n## Creating levels\n\nWe will create two initial levels for our game, using Kaboom's [ASCII art level creation](https://kaboomjs.com/#addLevel) functionality. Add the following level definitions to the bottom of your file:\n\n```javascript\n// levels\nconst LEVELS = [\n  [\n    \"                        \",\n    \"                        \",\n    \"dddddddddddddddddddddddd\",\n    \"cccccccccccccccccccccccc\",\n    \"bbbbbbbbbbbbbbbbbbbbbbbb\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaa\",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"            .           \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"            @           \",\n  ],\n  [\n    \" aaaaaaaaaaaaaaaaaaaaaa \",","metadata":{"id":640}}],["641",{"pageContent":"\"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"            @           \",\n  ],\n  [\n    \" aaaaaaaaaaaaaaaaaaaaaa \",\n    \" a                    a \",\n    \" a  bbbbbbbbbbbbbbbbb a \",\n    \" a  b               b a \",\n    \" a  b    ccccccc    b a \",\n    \" a  b  ccdddddddcc  b a \",\n    \" a  b    ccccccc    b a \",\n    \" a  b               b a \",\n    \" a  bbbbbbbbbbbbbbbbb a \",\n    \" a                    a \",\n    \" aaaaaaaaaaaaaaaaaaaaaa \",\n    \"                        \",\n    \"            .           \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"                        \",\n    \"            @           \",\n  ],\n];\n```\n\nIn the above levels, `a-d` are blocks, `.` is the ball, and `@` is the player's paddle. We will make these definitions with a `LevelOpt` JSON object, which defines the width and height of individual blocks, and provides definitions for each game object. Add the following code to your file:\n\n```javascript\nconst LEVELOPT = {\n  width: 32,\n  height: 16,\n  a: () => [\n    // block\n    sprite(\"blocka\"),\n    area(),\n    \"block\",\n    \"bouncy\",\n    {\n      points: 1,\n    },\n  ],\n  b: () => [\n    // block\n    sprite(\"blockb\"),\n    area(),\n    \"block\",\n    \"bouncy\",\n    {\n      points: 2,\n    },\n  ],\n  c: () => [\n    // block\n    sprite(\"blockc\"),\n    area(),\n    \"block\",\n    \"bouncy\",\n    {\n      points: 4,\n    },\n  ],\n  d: () => [\n    // block\n    sprite(\"blockd\"),\n    area(),\n    \"block\",\n    \"bouncy\",\n    {\n      points: 8,\n    },\n  ],\n  \"@\": () => [\n    // paddle\n    sprite(\"paddle\"),\n    area(),\n    origin(\"center\"),\n    \"paddle\",\n    \"bouncy\",\n    {\n      speed: 400,\n    },\n  ],\n  \".\": () => [\n    // ball\n    sprite(\"ball\"),\n    color(WHITE),\n    area(),\n    origin(\"center\"),\n    \"ball\",\n    {\n      hspeed: 100,\n      vspeed: 50,\n    },\n  ],\n};\n```","metadata":{"id":641}}],["642",{"pageContent":"{\n      speed: 400,\n    },\n  ],\n  \".\": () => [\n    // ball\n    sprite(\"ball\"),\n    color(WHITE),\n    area(),\n    origin(\"center\"),\n    \"ball\",\n    {\n      hspeed: 100,\n      vspeed: 50,\n    },\n  ],\n};\n```\n\nLet's take a closer look at each of these definitions, starting with the first block object.\n\n```javascript\n    \"a\": () => [ // block\n        sprite(\"blocka\"),\n        area(),\n        \"block\",\n        \"bouncy\",\n        {\n            points: 1\n        }\n    ],\n```\n\nA game object definition in Kaboom is a list of components, tags, and custom attributes.\n\nComponents are a core part of Kaboom – they provide different functionality to game objects, from an object's appearance to functionality such as collision detection. In this case, we have two components: [`sprite()`](https://kaboomjs.com/#sprite), which tells the object which sprite to represent itself with and [`area()`](https://kaboomjs.com/#area), which gives the object the ability to collide with other objects.\n\nWhile components come with prepackaged behaviors, tags are just labels that we can use to define our own behavior. This object has the tag \"block\", which we'll use to give it block-specific behaviors, such as being destroyed by the ball and giving the player points. It also has the tag \"bouncy\", which we'll use to make the ball bounce off it.\n\nLastly, our block has a custom `points` attribute, which will determine how many points it will give the player when it is destroyed. Our four block objects use different sprites and have different point values, but are otherwise identical.\n\nNext, let's look at the paddle object:\n\n```javascript\n    \"@\": () => [ // paddle\n        sprite(\"paddle\"),\n        area(),\n        origin(\"center\"),\n        \"paddle\",\n        \"bouncy\",\n        {\n            speed: 400\n        }\n    ],\n```","metadata":{"id":642}}],["643",{"pageContent":"```javascript\n    \"@\": () => [ // paddle\n        sprite(\"paddle\"),\n        area(),\n        origin(\"center\"),\n        \"paddle\",\n        \"bouncy\",\n        {\n            speed: 400\n        }\n    ],\n```\n\nLike our block objects, the paddle has both `sprite()` and `area()` components. We've also given it the \"bouncy\" tag, so that the ball will bounce off it. Using tags like this is a great way to avoid writing the same code multiple times. Unlike our block objects, the paddle has an [`origin`](https://kaboomjs.com/#origin) component, set to \"center\" – this will allow us to move the object from its center rather than its top-left corner.\n\nThe paddle object also has a `speed` attribute, which will determine how fast it moves across the screen.\n\nOur last object is the ball.\n\n```javascript\n    \".\": () => [ // ball\n        sprite(\"ball\"),\n        area(),\n        origin(\"center\"),\n        \"ball\",\n        {\n            hspeed: 100,\n            vspeed: 50\n        }\n    ]\n```\n\nAs a moving object, this is largely similar to the paddle. The main difference is that we give it both horizontal and vertical speed attributes, as it will be moving in all directions, whereas the paddle only moves left and right.\n\nNow that we've defined our level layouts and the objects that will populate them, we can create our game [scene](https://kaboomjs.com/#scene). In Kaboom, a scene is a unique screen with its own objects and game rules. We can use scenes to separate gameplay from menus and information screens, or even to separate different kinds of minigames in the same project. As scenes can take arguments, we can use a single \"game\" scene to represent all of our levels. Add the following code below your `LEVELOPT` definition:\n\n```javascript\nscene(\"game\", ({ levelIndex, score, lives }) => {\n  addLevel(LEVELS[levelIndex], LEVELOPT);\n});\n```","metadata":{"id":643}}],["644",{"pageContent":"```javascript\nscene(\"game\", ({ levelIndex, score, lives }) => {\n  addLevel(LEVELS[levelIndex], LEVELOPT);\n});\n```\n\nIn addition to providing the level number as an argument (`levelIndex`), we provide both `score` and `lives`. This will allow us to preserve both values when the player defeats one level and moves to the next.\n\nThen add this code to the bottom of the main code file to define and call game start function. This function will [`go()`](https://kaboomjs.com/#go) to the first level, setting the player's score to 0 and their lives to 3. In addition to calling it when the game first loads, we will call this function when we need to restart after a game over.\n\n```javascript\n// start game on first level\nfunction start() {\n  go(\"game\", {\n    levelIndex: 0,\n    score: 0,\n    lives: 3,\n  });\n}\n\nstart();\n```\n\nRun your repl now. You should see our first level, with its colorful blocks, paddle and ball, frozen in amber. In the next section, we'll add some motion.\n\n![First level](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/firstlevel.png)\n\n## Moving the paddle\n\nLet's write some code to control the player's paddle. First, we need to retrieve a reference to the paddle using [`get()`](https://kaboomjs.com/#get). We'll place this code inside the \"game\" scene, below `addLevel`:\n\n```javascript\n// player's paddle\nconst paddle = get(\"paddle\")[0];\n```\n\nNow we'll add code to move the paddle left and right. We could do this with the left and right arrow keys, which would give our game a retro feeling, but most modern browser-based block-breaking games have a mouse-controlled paddle. Moreover, as Kaboom automatically translates touch events to mouse events, implementing mouse controls will make our game playable on mobile devices without keyboards. So let's add some code to have our paddle follow the mouse cursor:\n\n```javascript\n// mouse controls\nonUpdate(() => {\n  if (\n    mousePos().x > 0 &&\n    mousePos().x < width() &&\n    mousePos().y > 0 &&\n    mousePos().y < height()\n  ) {","metadata":{"id":644}}],["645",{"pageContent":"```javascript\n// mouse controls\nonUpdate(() => {\n  if (\n    mousePos().x > 0 &&\n    mousePos().x < width() &&\n    mousePos().y > 0 &&\n    mousePos().y < height()\n  ) {\n    if (mousePos().x < paddle.worldArea().p1.x) {\n      // left\n      paddle.move(-paddle.speed, 0);\n    } else if (mousePos().x > paddle.worldArea().p2.x) {\n      // right\n      paddle.move(paddle.speed, 0);\n    }\n  }\n});\n```\n\nThis code will [run every frame](https://kaboomjs.com/#onUpdate). First, it checks whether the mouse cursor is inside the game area. Then it checks whether the cursor is to the paddle's left or right, and moves the paddle in that direction. The paddle won't move if it is vertically in line with the cursor.\n\nNote the use of `worldArea()`. This method, provided by the `area()` component, returns an object containing two sets of X- and Y-coordinates, `p1` and `p2`. The first set, `p1`, is the top-left corner of the object's collision mask, and `p2` is its bottom-right corner. By default, an object's collision mask is a rectangle of the same size as its sprite – Kaboom does not support non-rectangular collision masks.\n\nRerun your repl now and try out the controls. If you have a touch screen on your device, you can also move the paddle by tapping or dragging your finger.\n\n![Moving the paddle](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/move-paddle.gif)\n\n## Moving the ball\n\nNow that we can move the paddle, we need the ball to move too. Add the following code to your file with the \"game\" scene:\n\n```javascript\n// ball movement\nonUpdate(\"ball\", (ball) => {\n  ball.move(ball.hspeed, ball.vspeed);\n});\n```\n\nYou'll recall that we set the ball's `hspeed` and `vspeed` in its object definition. Run your repl now, and watch as the ball flies off the screen. Our game won't last very long if the ball can leave the screen like this, so we need to add some code to have it bounce off the edges. Alter your `onUpdate(\"ball\")` callback to match the following:\n\n```javascript\nonUpdate(\"ball\", (ball) => {","metadata":{"id":645}}],["646",{"pageContent":"```javascript\nonUpdate(\"ball\", (ball) => {\n  // bounce off screen edges\n  if (ball.worldArea().p1.x < 0 || ball.worldArea().p2.x > width()) {\n    ball.hspeed = -ball.hspeed;\n  }\n\n  if (ball.worldArea().p1.y < 0 || ball.worldArea().p2.y > height()) {\n    ball.vspeed = -ball.vspeed;\n  }\n\n  // move\n  ball.move(ball.hspeed, ball.vspeed);\n});\n```\n\nIf the ball goes off the left or right edges of the screen, we reverse its horizontal direction, and if it goes off the top or bottom of the screen, we reverse its vertical direction. Run your repl now to see this effect in action.\n\n![Moving the ball](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/move-ball.gif)\n\n## Collisions\n\nNow that the ball can move and bounce off the screen's edges, we need it to also bounce off the paddle and the blocks. To achieve this, we'll write an [`onCollide()`](https://kaboomjs.com/#onCollide) event handler for the tags \"ball\" and \"bouncy\". Add the following code to the \"game\" scene, below your ball movement code:\n\n```javascript\n// collisions\nonCollide(\"ball\", \"bouncy\", (ball, bouncy) => {\n  ball.vspeed = -ball.vspeed;\n\n  if (bouncy.is(\"paddle\")) {\n    // play sound\n    play(\"paddlehit\");\n  }\n});\n```\n\nNote that we're only changing the vertical direction of the ball, because that's the important one for our gameplay. While we could implement more complex bounce physics by taking into account which sides the collision occurred on, changing the vertical direction alone gets us the type of ball movement players expect from a block-breaking game.\n\nNow that the player can actually hit the ball with their paddle, we shouldn't have the ball bounce off the bottom of the screen anymore. Find your `onUpdate(\"ball\")` callback and remove second condition from the second `if` statement. Your callback should now look like this:\n\n```javascript\n// ball movement\nonUpdate(\"ball\", (ball) => {\n  // bounce off screen edges\n  if (ball.worldArea().p1.x < 0 || ball.worldArea.p2().x > width()) {\n    ball.hspeed = -ball.hspeed;\n  }","metadata":{"id":646}}],["647",{"pageContent":"```javascript\n// ball movement\nonUpdate(\"ball\", (ball) => {\n  // bounce off screen edges\n  if (ball.worldArea().p1.x < 0 || ball.worldArea.p2().x > width()) {\n    ball.hspeed = -ball.hspeed;\n  }\n\n  if (ball.worldArea().p1.y < 0) {\n    // <-- second condition removed\n    ball.vspeed = -ball.vspeed;\n  }\n\n  // move\n  ball.move(ball.hspeed, ball.vspeed);\n});\n```\n\nThe other important collision event that we need to implement is having the ball destroy blocks it hits. Add the following code below the `onCollide(\"ball\", \"bouncy\")` callback.\n\n```javascript\nonCollide(\"ball\", \"block\", (ball, block) => {\n  block.destroy();\n  score += block.points;\n  play(\"blockbreak\"); // play sound\n});\n```\n\nHere we use the [`destroy()`](https://kaboomjs.com/#destroy) function to remove the block object from play, and then increment our score by the block's points value.\n\nNow that we're changing the `score` variable, it's important that we display it on the screen, along with `lives`. Add the following code to the \"game\" scene, below your collision code:\n\n```javascript\n// ui\nonDraw(() => {\n  drawText({\n    text: `SCORE: ${score}`,\n    size: 16,\n    pos: vec2(8, 8),\n    font: \"breakout\",\n    color: WHITE,\n  });\n  drawText({\n    text: `LIVES: ${lives}`,\n    size: 16,\n    pos: vec2((width() * 13) / 16, 8),\n    font: \"breakout\",\n    color: WHITE,\n  });\n});\n```\n\nWe've added an [`onDraw()`](https://kaboomjs.com/#onDraw) callback, which will run every frame, after all `onUpdate()` callbacks have run. The `onDraw()` callbacks are the only place we can use drawing functions such as [`drawText()`](https://kaboomjs.com/#drawText). Also note that we've used the font we defined at the start of this tutorial.\n\nRun your repl now, and you should be able to hit the ball with your paddle, destroy blocks, and get points. Our core gameplay is implemented.\n\n![Game play](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/basicgameplay.png)\n\n## Winning and losing","metadata":{"id":647}}],["648",{"pageContent":"![Game play](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/basicgameplay.png)\n\n## Winning and losing\n\nAs it stands, our game is both unforgiving and unrewarding. If you let the ball go off the bottom of the screen, it's permanently gone, and you have to refresh your browser to try again. If you manage to destroy all the blocks, the game continues without moving to the next level or acknowledging your victory.\n\nLet's fix these deficiencies now by implementing lives, as well as win and lose conditions. We'll implement lives in the `onUpdate(\"ball\")` callback that deals with ball movement. Find this callback and add the following new code just below the second `if` statement:\n\n```javascript\nonUpdate(\"ball\", (ball) => {\n  // bounce off screen edges\n  if (ball.worldArea().p1.x < 0 || ball.worldArea().p2.x > width()) {\n    ball.hspeed = -ball.hspeed;\n  }\n\n  if (ball.worldArea().p1.y < 0) {\n    ball.vspeed = -ball.vspeed;\n  }\n\n  // fall off screen -- NEW CODE BELOW\n  if (ball.pos.y > height()) {\n    lives -= 1;\n    if (lives <= 0) {\n      go(\"lose\", { score: score });\n    } else {\n      ball.pos.x = width() / 2;\n      ball.pos.y = height() / 2;\n    }\n  }\n  // END OF NEW CODE\n\n  // move\n  ball.move(ball.hspeed, ball.vspeed);\n});\n```\n\nThis code checks whether the ball has fallen of the screen, and if so, decrements `lives`. If there are lives remaining, it moves the ball back to the middle of the screen. Otherwise, it sends the player to the \"lose\" scene, which we'll define soon. But first, we need to provide for the game's win condition.\n\nWe'll consider a level won once all the blocks have been destroyed. To determine this, we can check whether the number of blocks in the level is 0. We'll put this check in the ball and block collision callback, after the block is destroyed. Find this code and alter it to resemble the following:\n\n```javascript\nonCollide(\"ball\", \"block\", (ball, block) => {\n  block.destroy();\n  score += block.points;\n  play(\"blockbreak\");\n\n  // level end -- NEW CODE BELOW","metadata":{"id":648}}],["649",{"pageContent":"```javascript\nonCollide(\"ball\", \"block\", (ball, block) => {\n  block.destroy();\n  score += block.points;\n  play(\"blockbreak\");\n\n  // level end -- NEW CODE BELOW\n  if (get(\"block\").length === 0) {\n    // next level\n    if (levelIndex < LEVELS.length) {\n      go(\"game\", {\n        levelIndex: levelIndex + 1,\n        score: score,\n        lives: lives,\n      });\n    } else {\n      // win\n      go(\"win\", { score: score });\n    }\n  }\n});\n```\n\nNow we need to create our \"win\" and \"lose\" scenes. Add the following code for both scenes below the \"game\" scene and above the `start` function definition:\n\n```javascript\n// gameover screens\nscene(\"lose\", ({ score }) => {\n  add([\n    text(`GAME OVER\\n\\nYOUR FINAL SCORE WAS ${score}`, {\n      size: 32,\n      width: width(),\n      font: \"breakout\",\n    }),\n    pos(12),\n  ]);\n\n  add([\n    text(`PRESS ANY KEY TO RESTART`, {\n      size: 16,\n      width: width(),\n      font: \"breakout\",\n    }),\n    pos(width() / 2, height() * (3 / 4)),\n  ]);\n\n  onKeyPress(start);\n  onMousePress(start);\n});\n\nscene(\"win\", ({ score }) => {\n  add([\n    text(`CONGRATULATIONS, YOU WIN!\\n\\nYOUR FINAL SCORE WAS ${score}`, {\n      size: 32,\n      width: width(),\n      font: \"breakout\",\n    }),\n    pos(width() / 2, height() / 2),\n  ]);\n\n  add([\n    text(`PRESS ANY KEY TO RESTART`, {\n      size: 16,\n      width: width(),\n      font: \"breakout\",\n    }),\n    pos(width() / 2, height() * (3 / 4)),\n  ]);\n\n  onKeyPress(start);\n  onMousePress(start);\n});\n```\n\nThese scenes are quite similar to each other: each one displays some text, including the player's final score, and prompts the player to press any key. Both `onKeyPress(start)` and `onMousePress(start)` will call the `start` function if any keyboard key or mouse button is pressed, or if the screen is tapped on a touch device.\n\nRun your repl now. You should now be able to play through both levels of our block-breaking game (or lose and reach the game over screen).\n\n![Game over screen](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/gameover.png)\n\n## Powerups","metadata":{"id":649}}],["650",{"pageContent":"![Game over screen](https://docimg.replit.com/images/tutorials/37-breakout-kaboom/gameover.png)\n\n## Powerups\n\nThere's one more sprite we loaded at the start of the tutorial that we haven't used yet – the heart. This will be a powerup. We'll have it randomly appear in place of destroyed blocks and start falling. If the player catches it with their paddle, they will gain an additional life.\n\nFind your `onCollide(\"ball\", \"block\")` code and add the new code specified below:\n\n```javascript\n// collisions\nonCollide(\"ball\", \"block\", (ball, block) => {\n  block.destroy();\n  score += block.points;\n  play(\"blockbreak\");\n\n  // level end\n  if (get(\"block\").length === 0) {\n    // next level\n    if (levelIndex < LEVELS.length) {\n      go(\"game\", {\n        levelIndex: levelIndex + 1,\n        score: score,\n        lives: lives,\n      });\n    } else {\n      // win\n      go(\"win\", { score: score });\n    }\n  }\n\n  // powerups -- NEW CODE BELOW\n  if (chance(0.05)) {\n    // extra life\n    add([\n      sprite(\"heart\"),\n      pos(block.pos),\n      area(),\n      origin(\"center\"),\n      cleanup(),\n      \"powerup\",\n      {\n        speed: 80,\n        effect() {\n          lives++;\n        },\n      },\n    ]);\n  }\n});\n```\n\nThis code uses Kaboom's [`chance()`](https://kaboomjs.com/#chance) function to set our powerup to spawn after a block is destroyed 5% of the time. The powerup is a game object with similar components to other moving objects we've defined. The [`cleanup()`](https://kaboomjs.com/#cleanup) component will ensure it's automatically destroyed when it leaves the screen. Additionally, we give it a movement speed and an `effect()` function, which we'll call when it hits the paddle.\n\nJust below the `onCollide(\"ball\", \"block\")` callback, add the following two callbacks to define our powerup's movement and collision behavior:\n\n```javascript\n// powerups\nonUpdate(\"powerup\", (powerup) => {\n  powerup.move(0, powerup.speed);\n});\n\npaddle.onCollide(\"powerup\", (powerup) => {\n  powerup.effect();\n  powerup.destroy();\n  play(\"powerup\");\n});\n```","metadata":{"id":650}}],["651",{"pageContent":"```javascript\n// powerups\nonUpdate(\"powerup\", (powerup) => {\n  powerup.move(0, powerup.speed);\n});\n\npaddle.onCollide(\"powerup\", (powerup) => {\n  powerup.effect();\n  powerup.destroy();\n  play(\"powerup\");\n});\n```\n\nRun your repl now and you should see the occasional extra life powerup as you play.\n\n## Music\n\nAs a final touch, we'll add some music to our game. Near the bottom of your file, just above the invocation of `start()`, add the following code:\n\n```javascript\n// play music\nconst music = play(\"ArcadeOddities\");\nmusic.loop();\n```\n\n`loop()` will ensure that the music plays continuously.\n\n## Where next?\n\nWe've built a simple but polished block-breaking game. From here, you might want to make the following additions:\n\n- Extra levels.\n- New powerups, such as a longer paddle, multiple balls, or even a paddle-mounted laser gun.\n- Bigger and smaller blocks, blocks that can take multiple hits, or moving blocks.\n\nYou can find our repl here.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/blockbreaker?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":651}}],["652",{"pageContent":"---\ntitle: Flappy Bird with Kaboom.js\n---\n\n# Building Flappy Bird in Kaboom.js\n\nFlappy Bird was a smash hit game for mobile phones back in 2013-2014. The inspiration behind the app was the challenge of bouncing a ping pong ball on a paddle for as long as possible without letting it drop to the ground or shoot off into the air. At the peak of its success, the game creator unexpectedly removed it from all app stores, saying that he felt guilty that the game had become addictive for many people. In the wake of the removal, many clones were made to fill the gap left by the original Flappy Bird. After a few months, the original author released new versions of the game.\n\nLet's take a trip back to 2014 and create our own clone of Flappy Bird using Kaboom! By remaking a game, you can not only learn how to make games, but also extend and change the game in any way you like.\n\n![Flappy game](https://docimg.replit.com/images/tutorials/35-flappy-bird/game-play.gif)\n\nThis article is based on this [video tutorial](https://www.youtube.com/watch?v=hgReGsh5xVU), with a few small differences. Mainly, the Flappy assets (graphics and sound) are no longer available by default in the Replit Kaboom asset library, but that's OK because we've included them as a download [here](https://tutorial-files.util.repl.co/flappy-bird-kaboom/flappy-assets.zip), so you can still use them.\n\n## Creating a new project in Replit\n\nHead over to [Replit](https://replit.com) and create a new repl. Choose **Kaboom** as your project type. Give this repl a name, like \"Flappy!\".\n\n![Creating a new repl](https://docimg.replit.com/images/tutorials/35-flappy-bird/new-repl.png)\n\nAfter the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding. There is already some code in this file, but we'll replace that.","metadata":{"id":652}}],["653",{"pageContent":"After the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding. There is already some code in this file, but we'll replace that.\n\nDownload the [sprites and asset files](https://tutorial-files.util.repl.co/flappy-bird-kaboom/flappy-assets.zip) we need for the game, and unzip them on your computer. In the Kaboom editor, click the \"Files\" icon in the sidebar. Now drag and drop all the sprites (image files) into the \"sprites\" folder, and all the sounds (MP3 files) into the \"sounds\" folder. Once they have uploaded, you can click on the \"Kaboom\" icon in the sidebar, and return to the \"main\" code file.\n\n![Uploading sprites](https://docimg.replit.com/images/tutorials/35-flappy-bird/upload-sprites.gif)\n\n## Initializing Kaboom\n\nIn the \"main\" code file, delete all the example code. Now we can add reference to Kaboom, and initialize it:\n\n```js\nimport kaboom from \"kaboom\";\n\nkaboom();\n```\n\nLet's import the game assets (graphics and sound). We can use Kaboom's [`loadSprite`](https://kaboomjs.com/#loadSprite) and [`loadSound`](https://kaboomjs.com/#loadSound) functions:\n\n```js\nloadSprite(\"birdy\", \"sprites/birdy.png\");\nloadSprite(\"bg\", \"sprites/bg.png\");\nloadSprite(\"pipe\", \"sprites/pipe.png\");\nloadSound(\"wooosh\", \"sounds/wooosh.mp3\");\n```\n\nThe first argument in each `load` function is the name we want to use to refer to the asset later on in our code. The second parameter is the location of the asset to load.\n\n## Adding scenes\n\n[Scenes](https://kaboomjs.com/#scene) are like different stages in a Kaboom game. There are generally three scenes in games:\n\n- The intro scene, which gives some info and instructions, and waits for the player to press \"start\".\n- The main game, where we play.\n- An endgame, or game over scene, which gives the player their score or overall result, and allows them to start again.\n\n![game scenes](https://docimg.replit.com/images/tutorials/35-flappy-bird/game-scenes.png)","metadata":{"id":653}}],["654",{"pageContent":"![game scenes](https://docimg.replit.com/images/tutorials/35-flappy-bird/game-scenes.png)\n\nFor this tutorial, we'll omit the intro scene, since we already know what Flappy bird is and how to play it, but you can add your own intro scene later!\n\nLet's add the code for defining each scene:\n\n```js\nscene(\"game\", () => {\n  // todo.. add scene code here\n});\n\nscene(\"gameover\", (score) => {\n  // todo.. add scene code here\n});\n\ngo(\"game\");\n```\n\nNotice in the `gameover` scene definition, we add a custom parameter, `score`. This is so that we can pass the player's final score to the end game scene to display it.\n\nTo start the whole game off, we use the [`go`](https://kaboomjs.com/#go) function, which switches between scenes.\n\n## Building the game world\n\nNow that we have the main structure and overhead functions out of the way, let's start adding in the characters that make up the Flappy world. In Kaboom, characters are anything that makes up the game world, including floor, platforms, etc., and not only the players and bots. They are also known as \"game objects\".\n\nWe'll start with the background, using the `bg.png` image we added earlier. Add this code to the `game` scene section:\n\n```js\nadd([sprite(\"bg\", { width: width(), height: height() })]);\n```\n\nHere we use the [`add`](https://kaboomjs.com/#add) function to add a new character to the scene. The `add` function takes an array of components that we can use to give each game character special properties. In Kaboom, every character is made up of one or more components. There are built-in components for many properties, like [`sprite`](https://kaboomjs.com/#sprite), which gives the character an avatar; [`body`](https://kaboomjs.com/#body), which makes the character respond to gravity; and [`solid`](https://kaboomjs.com/#solid), which makes the character solid, so other characters can't move through it.","metadata":{"id":654}}],["655",{"pageContent":"Since the background doesn't need to do much, just stay in the back and look pretty, we only use the [`sprite`](https://kaboomjs.com/#sprite) component, which displays an image. The `sprite` component takes the name of the sprite, which we set when we loaded the sprite earlier, and optionally, the width and height that it should be displayed at on the screen. Since we want the background to cover the whole screen, we need to set the `width` and `height` of the sprite to the width and height of the window our game is running in. Kaboom provides the [`width()`](https://kaboomjs.com/#width) and [`height()`](https://kaboomjs.com/#height) functions to get the window dimensions.\n\nIf you press the \"Run\" button at the top of your repl now, you should see the background of the Flappy world come up in the output section of the repl:\n\n![Flappy background with buildings, trees and building sky line](https://docimg.replit.com/images/tutorials/35-flappy-bird/flappy-background.png)\n\nGreat! Now let's add in the Flappy Bird. Add this code to the `game` scene:\n\n```js\nconst player = add([\n  // list of components\n  sprite(\"birdy\"),\n  scale(2),\n  pos(80, 40),\n  area(),\n  body(),\n]);\n```\n\nWe use the same [`add`](https://kaboomjs.com/#add) function we used for adding the background. This time, we grab a reference, `const player`, to the returned game object. This is so we can use this reference later when checking for collisions, or flapping up when the player taps the space bar.\n\nYou'll also notice that the character we are adding here has many more components than just the [`sprite`](https://kaboomjs.com/#sprite) component we used for the background. We already know what the `sprite` component does, here is what the rest are for:\n\n- The [`scale`](https://kaboomjs.com/#scale) component makes the sprite larger on screen by drawing it at `2` times the sprite's normal image size. This gives a nice pixelated look, while also making it easier to spot the bird.","metadata":{"id":655}}],["656",{"pageContent":"- The [`pos`](https://kaboomjs.com/#pos) component sets the position on the screen that the character should initially be at. It takes X and Y coordinates to specify a position.\n- The [`area`](https://kaboomjs.com/#area) component gives the sprite an invisible bounding box around it, which is used when calculating and detecting collisions between characters. We'll need this so that we can detect if Flappy flies into the pipes.\n- The [`body`](https://kaboomjs.com/#body) component makes the character subject to gravity. This means Flappy will fall out of the sky if the player doesn't do anything.\n\nPress `command + s` (Mac) or `control + s` (Windows/Linux) to update the game output window. You should see Flappy added and fall out of the sky very quickly:\n\n![flappy falling out of the sky](https://docimg.replit.com/images/tutorials/35-flappy-bird/flappy-falls.gif)\n\n## Making Flappy fly\n\nOur next task is to save Flappy from plummeting to their death by giving control to the player to flap Flappy's wings. We'll use the spacebar for this. Kaboom has an [`onKeyPress`](https://kaboomjs.com/#onKeyPress) function, which fires a callback with custom code when the specified key is pressed. Add this code to the `game` scene to make Flappy fly when the `space` key is pressed:\n\n```js\nonKeyPress(\"space\", () => {\n  play(\"wooosh\");\n  player.jump(400);\n});\n```","metadata":{"id":656}}],["657",{"pageContent":"```js\nonKeyPress(\"space\", () => {\n  play(\"wooosh\");\n  player.jump(400);\n});\n```\n\nIn the callback handler, we first [`play`](https://kaboomjs.com/#play) a sound of flapping wings to give the player feedback and add some interest to the game. Then we use the [`jump`](https://kaboomjs.com/#body) method, which is added to our player character through the [`body`](https://kaboomjs.com/#body) component we added earlier. The `jump` function makes a character accelerate up sharply. We can adjust just how sharp and high the jump should be through the number we pass as an argument to the jump method – the larger the number, the higher the jump. Although Flappy is technically not jumping (you normally need to be on a solid surface to jump), it still has the effect we need.\n\nUpdate the game output window, and if you press the spacebar now, you'll be able to keep Flappy in the air! Remember to quickly click in the output window as the game starts, so that it gains focus and can detect player input such as pressing the `space` key.\n\n![flying-flappy](https://docimg.replit.com/images/tutorials/35-flappy-bird/flappy-fly.gif)\n\n## Adding in the pipes\n\nNow we can get to the main part of the game – adding in the moving pipes that Flappy needs to fly through.\n\nHere is a diagram of the layout of the pipes in the game.\n\n![pipe layout and gap](https://docimg.replit.com/images/tutorials/35-flappy-bird/pipe-gap.png)\n\nWe want to move the pipe gap, and therefore the pipes, up and down for each new pipe pair that is created. This is so we don't have the gap at the center point of the screen constantly – we want it to be slightly different for each pipe pair that comes along. We do want to keep the gap size consistent though.","metadata":{"id":657}}],["658",{"pageContent":"Let's start by having the pipe gap in the center of the screen. We'll give the pipe gap a size `PIPE_GAP`. Then to place the pipes, the bottom of the upper pipe should be `PIPE_GAP/2` pixels above the center point of the window, which is `height()/2`. Likewise, the top of the lower pipe should be `PIPE_GAP/2` pixels below the center point of the window, again which is `height()/2`.\n\nThis way, we place the pipe so that the pipe gap is in the center of the window. Now we want to randomly move this up or down for each new pair of pipes that comes along. One way to do this is to create a random offset, which we can add to the midpoint to effectively move the midpoint of the window up or down. We can use the Kaboom [`rand`](https://kaboomjs.com/#rand) function to do this. The [`rand`](https://kaboomjs.com/#rand) function has two parameters to specify the range in which the random number should be.\n\nLet's put that all together. The Y-position of the lower pipe can be calculated as:\n\n`height()/2 + offset + PIPE_GAP/2 `\n\nRemember, the top of the window is `y=0`, and the bottom is `y=height()`. In other words, the lower down on the screen a position is, the higher its `y` coordinate will be.\n\nFor the upper pipe, we can calculate the point where the bottom of the pipe should be like this:\n\n`height()/2 + offset - PIPE_GAP/2`\n\nKaboom has an [`origin`](https://kaboomjs.com/#origin) component that sets the point a character uses as its origin. This is `topleft` by default, which works well for our lower pipe, as our calculations above are calculating for that point. However, for the upper pipe, our calculations are for the _bottom_ of the pipe. Therefore, we can use the [`origin`](https://kaboomjs.com/#origin) component to specify that.\n\nSince we want the pipes to come from the right of the screen toward the left, where Flappy is, we'll set their X-position to be the [`width()`](https://kaboomjs.com/#width) of the screen.","metadata":{"id":658}}],["659",{"pageContent":"Since we want the pipes to come from the right of the screen toward the left, where Flappy is, we'll set their X-position to be the [`width()`](https://kaboomjs.com/#width) of the screen.\n\nTo identify and query the pipes later, we add the text tag `\"pipe\"` to them.\n\nFinally, since we need to create many pipes during the game, let's wrap all the pipe code in a function that we will be able to call at regular intervals to make the pipes.\n\nHere is the code from all those considerations and calculations. Insert this code to the `game` scene:\n\n```js\nconst PIPE_GAP = 120;\n\nfunction producePipes() {\n  const offset = rand(-50, 50);\n\n  add([\n    sprite(\"pipe\"),\n    pos(width(), height() / 2 + offset + PIPE_GAP / 2),\n    \"pipe\",\n    area(),\n  ]);\n\n  add([\n    sprite(\"pipe\", { flipY: true }),\n    pos(width(), height() / 2 + offset - PIPE_GAP / 2),\n    origin(\"botleft\"),\n    \"pipe\",\n    area(),\n  ]);\n}\n```\n\nNow we need to do a few more things to make the pipes appear and move.\n\nTo move the pipes across the screen, we can use the [`onUpdate`](https://kaboomjs.com/#onUpdate) function to update all pipes' positions with each frame. Note that we only need to adjust the `x` position of the pipe. Add this code to the `game` scene part of your code:\n\n```js\nonUpdate(\"pipe\", (pipe) => {\n  pipe.move(-160, 0);\n});\n```\n\nNext we'll generate pipes at a steady rate. We can use the [`loop`](https://kaboomjs.com/#loop) function for this. Add the following to the `game` scene part of the code:\n\n```js\nloop(1.5, () => {\n  producePipes();\n});\n```\n\nThis calls our `producePipes()` function every `1.5` seconds. You can adjust this rate, or make it variable to increase the rate as the game progresses.\n\nUpdate the game output window now and you should see the pipes being generated and moving across the screen. You can also fly Flappy, although crashing into the pipes does nothing for now.\n\n![moving pipes](https://docimg.replit.com/images/tutorials/35-flappy-bird/moving-pipes.gif)","metadata":{"id":659}}],["660",{"pageContent":"![moving pipes](https://docimg.replit.com/images/tutorials/35-flappy-bird/moving-pipes.gif)\n\nFlappy is flapping and the pipes are piling on. The next task is to detect when Flappy flies past a pipe, increasing the player's score.\n\n## Adding in scoring\n\nWhen Flappy flies past a pipe, the player's score is incremented. To do this, we'll need to keep track of which pipes have gone past Flappy. Let's modify the pipe-generating function `producePipes` to add a custom property called `passed` to the pipes. It should look like this now:\n\n```js\nfunction producePipes() {\n  const offset = rand(-50, 50);\n\n  add([\n    sprite(\"pipe\"),\n    pos(width(), height() / 2 + offset + PIPE_GAP / 2),\n    \"pipe\",\n    area(),\n    { passed: false },\n  ]);\n\n  add([\n    sprite(\"pipe\", { flipY: true }),\n    pos(width(), height() / 2 + offset - PIPE_GAP / 2),\n    origin(\"botleft\"),\n    \"pipe\",\n    area(),\n  ]);\n}\n```\n\nNext, we'll add in a variable to track the `score`, and a text element to display it on screen. Add this code to the `game` scene:\n\n```js\nlet score = 0;\nconst scoreText = add([text(score, { size: 50 })]);\n```\n\nNow we can modify the `onUpdate()` event handler we created earlier for moving the pipes. We'll check if any pipes have moved past Flappy, and update their `passed` flag, so we don't count them more than once. We'll only add the `passed` flag to one of the pipes, and detect it, so as not to add a point for both the upper and lower pipe. Update the `onUpdate` handler as follows:\n\n```js\nonUpdate(\"pipe\", (pipe) => {\n  pipe.move(-160, 0);\n\n  if (pipe.passed === false && pipe.pos.x < player.pos.x) {\n    pipe.passed = true;\n    score += 1;\n    scoreText.text = score;\n  }\n});\n```\n\nThis checks any pipe that we haven't marked as `passed` (`passed === false`) to see if it has passed Flappy (`pipe.pos.x < player.pos.x`). If the pipe has gone past, we add `1` to the score and update the score text onscreen.\n\nIf you update the game output window now, you should see the score increase as you fly past each pipe.","metadata":{"id":660}}],["661",{"pageContent":"If you update the game output window now, you should see the score increase as you fly past each pipe.\n\n![Score increasing](https://docimg.replit.com/images/tutorials/35-flappy-bird/score-increase.gif)\n\n## Collision detection\n\nNow that we have scoring, the last thing to do is collision detection – that is, checking if Flappy has splatted into a pipe. Kaboom has a [`collides`](https://kaboomjs.com/#onCollide) method that is added with the [`area`](https://kaboomjs.com/#area) collider component. We can use that to call a function when the player collides with any character with the `\"pipe\"` tag. Add this code to the `game` scene:\n\n```js\nplayer.collides(\"pipe\", () => {\n  go(\"gameover\", score);\n});\n```\n\nIn the collision handler, we use the [`go`](https://kaboomjs.com/#go) function to switch to the `gameover` scene. We don't have anything in that scene yet, so let's update that to show a game over message and the score. We can also keep track of the high score to compare the player's latest score to. Update the `gameover` scene as follows:\n\n```js\nlet highScore = 0;\nscene(\"gameover\", (score) => {\n  if (score > highScore) {\n    highScore = score;\n  }\n\n  add([\n    text(\"gameover!\\n\" + \"score: \" + score + \"\\nhigh score: \" + highScore, {\n      size: 45,\n    }),\n  ]);\n\n  onKeyPress(\"space\", () => {\n    go(\"game\");\n  });\n});\n```\n\nFirst, we create a `highScore` variable where we can track the top score across multiple game plays. Then, in our `gameover` scene, we check if the latest score passed in is bigger than the `highScore` we have recorded. If it is, the `highScore` is updated to the latest score.\n\nTo show a \"game over\" message, and the player's score along with the high score, we use the [`add`](https://kaboomjs.com/#add) function to add a [`text`](https://kaboomjs.com/#text) component to a new game object or character. We also make the font `size` large-ish for this message.","metadata":{"id":661}}],["662",{"pageContent":"Let's include a quick way for the player to play again and try to beat their score. We use the [`onKeyPress`](https://kaboomjs.com/#onKeyPress) to listen for the player pressing the `space` bar. In our key-press handler, we [`go`](https://kaboomjs.com/#go) back to the main `game` scene, to start the game all over again.\n\nWe also need to end the game if Flappy flies too high out of the screen, or plummets down off the screen. We can do this by adding a handler for the player's [`onUpdate`](https://kaboomjs.com/#add) event, which is called each frame. Here we can check if Flappy's position is beyond the bounds of the game window. Add this code to the `game` scene:\n\n```js\nplayer.onUpdate(() => {\n  if (player.pos.y > height() + 30 || player.pos.y < -30) {\n    go(\"gameover\", score);\n  }\n});\n```\n\nThis gives a margin of 30 pixels above or below the window, to take account of Flappy's size. If Flappy is out of these bounds, we [`go`](https://kaboomjs.com/#go) to the `gameover` scene to end the game.\n\nUpdate the game output window again and test it out. If you fly into a pipe now, or flap too high, or fall out of the sky, you should be taken to the game over screen:\n\n![game over screen](https://docimg.replit.com/images/tutorials/35-flappy-bird/game-over.gif)\n\n## Next steps\n\nHere are some ideas you can try to improve your clone of the Flappy Bird game:\n\n- Make the game play faster as the player gets a higher score. You can do this by updating the speed that the pipes move by making the speed parameter passed to the `pipe.move` method a variable, which increases as the player score increases.\n- Add some different types of obstacles, other than the pipes, for Flappy to try to avoid.\n- Use the [Kaboom sprite editor](/tutorials/kaboom/kaboom-editor) to create your own graphics for your Flappy world!\n- Add in some more sound effects and play some game music using the [`play`](https://kaboomjs.com/#play) function.\n\nYou can find the code for this tutorial here:","metadata":{"id":662}}],["663",{"pageContent":"- Add in some more sound effects and play some game music using the [`play`](https://kaboomjs.com/#play) function.\n\nYou can find the code for this tutorial here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Flappy-Bird?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":663}}],["664",{"pageContent":"---\ntitle: Mario with Kaboom.js\n---\n\n# Building a _Mario_-like side-scroller with Kaboom.js\n\nThe _Mario_ series is one of the most known and loved game series of all time. The first _Mario_ game was released by Nintendo in the mid-80s, and people haven't stopped playing _Mario_ since.\n\nTons of games still use the basic side-scroller formula of _Mario_, so it's a good game to build to learn the basics of game making. We'll build it in the new [Kaboom](https://kaboomjs.com) game engine. Kaboom has many useful functions for building platform games, and we'll try to go through as many as we can in this tutorial.\n\n![Game functionality](https://docimg.replit.com/images/tutorials/32-mario-kaboom/bigger-kill-scenes.gif)\n\n## Designing the game\n\nWe'd like to make a game that has the _Mario_ essence. This means we need a few things:\n\n- The ability to jump and bump into reward boxes.\n- A big and small character type.\n- The ability to attack enemies by jumping on them.\n- The classic _Mario_ scrolling and camera motion.\n\nFor the graphics, we will use a [tile set from this creator](https://dotstudio.itch.io/super-mario-1-remade-assets).\n\n## Creating a new project in Replit\n\nHead over to [Replit](https://replit.com) and create a new repl. Choose **Kaboom** as your project type. Give this repl a name, like \"Mario\".\n\n![New mario repl](https://docimg.replit.com/images/tutorials/32-mario-kaboom/new-repl.png)\n\nAfter the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding. It already has some code in it, but we'll replace that.\n\nDownload [this archive of sprite and asset files](https://tutorial-files.util.repl.co/mario-kaboom/mario-resources.zip) that we'll need for the game, and unzip them on your computer. In the Kaboom editor, click the \"Files\" icon in the sidebar. Now drag and drop all the sprite and asset files into the \"sprites\" folder. Once they have uploaded, you can click on the \"Kaboom\" icon in the sidebar, and return to the \"main\" code file.","metadata":{"id":664}}],["665",{"pageContent":"![Uploading assets](https://docimg.replit.com/images/tutorials/32-mario-kaboom/upload-assets.gif)\n\n## Setting up Kaboom\n\nTo start, we need to set up Kaboom with the screen size and colors we want for the game window. Replace the code in `main.js` with the code below:\n\n```js\nimport kaboom from \"kaboom\";\n\nkaboom({\n  background: [134, 135, 247],\n  width: 320,\n  height: 240,\n  scale: 2,\n});\n```\n\nThis creates a new Kaboom canvas with a nice _Mario_ sky-blue background. We also set the size of the view to 320x240 pixels, which is a very low resolution for a modern game, but the right kind of pixelation for a _Mario_-type remake. We use `scale` to make the background twice the size on screen - you can increase this value if you have a monitor with very high resolution. Click the \"Run\" button, and you should see a lovely blue sky in the output window.\n\n![blue sky](https://docimg.replit.com/images/tutorials/32-mario-kaboom/blue-sky.png)\n\nNow, let's load up some of the sprites so we can add them to the blue sky scene. This code loads each of the graphic elements we'll use, and gives them a name so we can refer to them when we build the game characters:\n\n```js\nloadRoot(\"sprites/\");\nloadAseprite(\"mario\", \"Mario.png\", \"Mario.json\");\nloadAseprite(\"enemies\", \"enemies.png\", \"enemies.json\");\nloadSprite(\"ground\", \"ground.png\");\nloadSprite(\"questionBox\", \"questionBox.png\");\nloadSprite(\"emptyBox\", \"emptyBox.png\");\nloadSprite(\"brick\", \"brick.png\");\nloadSprite(\"coin\", \"coin.png\");\nloadSprite(\"bigMushy\", \"bigMushy.png\");\nloadSprite(\"pipeTop\", \"pipeTop.png\");\nloadSprite(\"pipeBottom\", \"pipeBottom.png\");\nloadSprite(\"shrubbery\", \"shrubbery.png\");\nloadSprite(\"hill\", \"hill.png\");\nloadSprite(\"cloud\", \"cloud.png\");\nloadSprite(\"castle\", \"castle.png\");\n```\n\nThe first line, [`loadRoot`](https://kaboomjs.com/#loadRoot), specifies which folder to load all the sprites and game elements from, so we don't have to keep typing it in for each sprite. Then each line loads a game sprite and gives it a name so that we can refer to it in code later.","metadata":{"id":665}}],["666",{"pageContent":"Notice that the `mario` and `enemies` sprites are loaded with the function [`loadAseprite`](https://kaboomjs.com/#loadAseprite), and have an extra parameter specifying a `.json` file. This extra file is in a file format made by [Aseprite](https://www.aseprite.org), which is a pixel art and animation app. If you open the `Mario.png` file, you'll see that it has many different images of Mario in different positions, which are frames of Mario animations. The `.json` file from Aseprite contains all the information needed to animate Mario in our game. Kaboom knows how to interpret this file, and we can pick which animation we want to run at any time by choosing one from the `frameTags` list in the `.json` file and using the [`.play()`](https://kaboomjs.com/#sprite) method on a sprite. We can also choose a particular frame to show at any time, using the sprite's [`.frame`](https://kaboomjs.com/#sprite) property, and specifying the frame number to use, starting from 0.\n\n![Mario Aseprite file](https://docimg.replit.com/images/tutorials/32-mario-kaboom/aseprite-contents.png)\n\n## Creating the level maps\n\nLet's add 2 levels to start. You can create and add as many levels as you want - that's one of the great benefits of writing your own game!\n\nKaboom has a really cool way of defining levels. It allows us to draw a layout of the level using only text. Each letter or symbol in this text map can be mapped to a character in the Kaboom game. In Kaboom, characters are anything that makes up the game world, including floor, platforms, and so on, and not only the players and bots.\n\nAdd the following to define the levels:\n\n```js\nconst LEVELS = [\n  [\n    \"                                                                                                \",\n    \"                                                                                                \",\n    \"                                                                                                \",","metadata":{"id":666}}],["667",{"pageContent":"\"                                                                                                \",\n    \"                                                                                                \",\n    \"                                                                                                \",\n    \"                                                                                                \",\n    \"                                                                                                \",\n    \"      -?-b-                                                                                     \",\n    \"                                                    ?        ?                                  \",\n    \"                                                                                                \",\n    \"                                      _                 ?                                       \",\n    \"                                 _    |                                                         \",\n    \"                           _     |    |                _                                        \",\n    \"       E                   |     |    |   E   E        |                            H           \",\n    \"================     ===========================================================================\",\n    \"================     ===========================================================================\",\n  ],\n  [\n    \"                                                                                             \",\n    \"                                                                                             \",\n    \"                                                                                             \",\n    \"                                       ?                                                     \",\n    \"                                                                                             \",","metadata":{"id":667}}],["668",{"pageContent":"\"                                       ?                                                     \",\n    \"                                                                                             \",\n    \"                                   -?-                                                       \",\n    \"                                                                                             \",\n    \"      -?-b-                  -?-                                                             \",\n    \"                                                                                             \",\n    \"                                                                                             \",\n    \"                                                                                             \",\n    \"                                                                                             \",\n    \"       _                                            _                                        \",\n    \"       |                                            |          E    E            H           \",\n    \"================     ========================================================================\",\n    \"================     ========================================================================\",\n  ],\n];\n```\n\nNow we can map each symbol and letter in the levels to a [character definition](https://kaboomjs.com/#addLevel):\n\n```js\nconst levelConf = {\n  // grid size\n  width: 16,\n  height: 16,\n  pos: vec2(0, 0),\n  // define each object as a list of components\n  \"=\": () => [sprite(\"ground\"), area(), solid(), origin(\"bot\"), \"ground\"],\n  \"-\": () => [sprite(\"brick\"), area(), solid(), origin(\"bot\"), \"brick\"],\n  H: () => [\n    sprite(\"castle\"),\n    area({ width: 1, height: 240 }),\n    origin(\"bot\"),\n    \"castle\",\n  ],\n  \"?\": () => [\n    sprite(\"questionBox\"),\n    area(),\n    solid(),\n    origin(\"bot\"),\n    \"questionBox\",\n    \"coinBox\",\n  ],\n  b: () => [\n    sprite(\"questionBox\"),\n    area(),\n    solid(),\n    origin(\"bot\"),","metadata":{"id":668}}],["669",{"pageContent":"],\n  \"?\": () => [\n    sprite(\"questionBox\"),\n    area(),\n    solid(),\n    origin(\"bot\"),\n    \"questionBox\",\n    \"coinBox\",\n  ],\n  b: () => [\n    sprite(\"questionBox\"),\n    area(),\n    solid(),\n    origin(\"bot\"),\n    \"questionBox\",\n    \"mushyBox\",\n  ],\n  \"!\": () => [\n    sprite(\"emptyBox\"),\n    area(),\n    solid(),\n    // bump(),\n    origin(\"bot\"),\n    \"emptyBox\",\n  ],\n  c: () => [\n    sprite(\"coin\"),\n    area(),\n    solid(),\n    //bump(64, 8),\n    cleanup(),\n    lifespan(0.4, { fade: 0.01 }),\n    origin(\"bot\"),\n    \"coin\",\n  ],\n  M: () => [\n    sprite(\"bigMushy\"),\n    area(),\n    solid(),\n    //patrol(10000),\n    body(),\n    cleanup(),\n    origin(\"bot\"),\n    \"bigMushy\",\n  ],\n  \"|\": () => [sprite(\"pipeBottom\"), area(), solid(), origin(\"bot\"), \"pipe\"],\n  _: () => [sprite(\"pipeTop\"), area(), solid(), origin(\"bot\"), \"pipe\"],\n  E: () => [\n    sprite(\"enemies\", { anim: \"Walking\" }),\n    area({ width: 16, height: 16 }),\n    solid(),\n    body(),\n    //patrol(50),\n    //enemy(),\n    origin(\"bot\"),\n    \"badGuy\",\n  ],\n  p: () => [\n    sprite(\"mario\", { frame: 0 }),\n    area({ width: 16, height: 16 }),\n    body(),\n    //mario(),\n    //bump(150, 20, false),\n    origin(\"bot\"),\n    \"player\",\n  ],\n};\n```\n\nThat looks like a lot, but it's really one pattern repeated for each element. Let's take it apart.\n\nThe first 3 lines of the config set the default width and height of each element in the level maps. We use `pos` to specify where to position the whole map in the Kaboom canvas. This is normally going to be (0,0), i.e. at the top left of the screen.","metadata":{"id":669}}],["670",{"pageContent":"Next we have definitions for each of the symbols we used in the map. Each definition is a function that returns an array of [components](https://kaboomjs.com/doc/intro). In Kaboom, every character is made up of 1 or more components. Components give special properties to each character. There are built-in components for many properties, like [`sprite`](https://kaboomjs.com/#sprite) to give the character an avatar, [`body`](https://kaboomjs.com/#body), to make the character respond to gravity, [`solid`](https://kaboomjs.com/#solid) to make the character solid so other characters can't move through it, and many others.\n\nKaboom also allows you to write your own custom components to create any property or behavior you like for a character. The components `patrol`, `mario`, `enemy`, and `bump` are all custom here. You'll notice that those custom components are commented out (`//`), as we'll need to create the implementations for them before we can use them. We'll do that later in this tutorial.\n\n## Adding a scene\n\nKaboom [\"scenes\"](https://kaboomjs.com/#scene) allow us to group logic and levels together. In this game we'll have 2 scenes:\n\n- A \"start\" or intro scene, which waits for a player to press a button to start the game. We'll also return to this scene if the player dies, so they can start again.\n- A main \"game\" scene, which will contain the game levels and all the logic to move Mario, and the logic for the enemies and rewards, etc.\n\nWe can use the [`go`](https://kaboomjs.com/#go) function to switch between scenes.\n\nLet's add the \"start\" scene, and make the game go to that scene by default:\n\n```js\nscene(\"start\", () => {\n  add([\n    text(\"Press enter to start\", { size: 24 }),\n    pos(vec2(160, 120)),\n    origin(\"center\"),\n    color(255, 255, 255),\n  ]);\n\n  onKeyRelease(\"enter\", () => {\n    go(\"game\");\n  });\n});\n\ngo(\"start\");\n```","metadata":{"id":670}}],["671",{"pageContent":"add([\n    text(\"Press enter to start\", { size: 24 }),\n    pos(vec2(160, 120)),\n    origin(\"center\"),\n    color(255, 255, 255),\n  ]);\n\n  onKeyRelease(\"enter\", () => {\n    go(\"game\");\n  });\n});\n\ngo(\"start\");\n```\n\nWe define the scene using the [`scene`](https://kaboomjs.com/#scene) function. This function takes a string as the scene name – we're calling the scene \"start\". We're using an inline function here, using [arrow function notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). You could also use the `function` keyword, if you'd like to specify a function in that way.\n\nWe also add some instruction text in the scene function, using the [`text`](https://kaboomjs.com/#text) component and setting the text's content and size. The [`pos`](https://kaboomjs.com/#pos) component sets the position of the text on the screen, and the [`origin`](https://kaboomjs.com/#origin) component specifies that the center of the text should be used to position it. Finally, we set the color of the text to white using the [`color`](https://kaboomjs.com/#color) component, which takes RGB (red, green, blue) values from 0-255.\n\nWe also have a call to the function [`onKeyRelease`](https://kaboomjs.com/#onKeyRelease), which listens for the enter key being pressed. If the enter key is pressed, we `go` to the main game scene (which we'll add shortly!).\n\nFinally, we use the [`go`](https://kaboomjs.com/#go) function to go to the start scene when the game starts up.\n\nAfter copying the code into your repl, press Command + S (Mac) or Control + S (Windows/Linux) to update the output window. You should see something like this:\n\n![start game screen](https://docimg.replit.com/images/tutorials/32-mario-kaboom/start-scene.png)\n\nNote that if you push enter now to start the game, you'll get an error message. Don't worry, we'll sort that out soon.\n\n## Adding the main game scene\n\nNow let's get the game scene up and running. Add the code below:\n\n```js\nscene(\"game\", (levelNumber = 0) => {","metadata":{"id":671}}],["672",{"pageContent":"## Adding the main game scene\n\nNow let's get the game scene up and running. Add the code below:\n\n```js\nscene(\"game\", (levelNumber = 0) => {\n  layers([\"bg\", \"game\", \"ui\"], \"game\");\n\n  const level = addLevel(LEVELS[levelNumber], levelConf);\n\n  add([sprite(\"cloud\"), pos(20, 50), layer(\"bg\")]);\n\n  add([sprite(\"hill\"), pos(32, 208), layer(\"bg\"), origin(\"bot\")]);\n\n  add([sprite(\"shrubbery\"), pos(200, 208), layer(\"bg\"), origin(\"bot\")]);\n\n  add([\n    text(\"Level \" + (levelNumber + 1), { size: 24 }),\n    pos(vec2(160, 120)),\n    color(255, 255, 255),\n    origin(\"center\"),\n    layer(\"ui\"),\n    lifespan(1, { fade: 0.5 }),\n  ]);\n\n  const player = level.spawn(\"p\", 1, 10);\n});\n```\n\nPress Command + S or Control + S now, and push enter at the start screen prompt. You should see our replica of _Mario World_ instead of the error message.\n\nYou should also see the enemy character wobble its feet, like it's trying to walk. This is because when we added the enemy definition `E` in the level config, we specified in the `sprite` component that it must use the `Walking` animation, which is defined in the `enemies.json` file. Kaboom starts the character using that animation.\n\n![static mario world](https://docimg.replit.com/images/tutorials/32-mario-kaboom/mario-world.gif)","metadata":{"id":672}}],["673",{"pageContent":"![static mario world](https://docimg.replit.com/images/tutorials/32-mario-kaboom/mario-world.gif)\n\nOk, back to looking at the code we added and what it does. First, we define a new [`scene`](https://kaboomjs.com/#scene) like we did for the start scene. This time, we specify a parameter `levelNumber` that can be passed to the scene. We give this parameter a default value of `0`. This will be the first level in our `LEVELS` array - remember, arrays start at index 0, so 0 is level 1. This parameter will let us call the same scene again when we get to the end of the level, but with `1` as the parameter so that we can play the next level. You can specify any parameters you like or need when creating a scene, and you can pass values from one scene to another. This is very useful, for example if you want to pass the player score to an end game scene, or pass in player options from the start scene.\n\nNext, we define some [`layers`](https://kaboomjs.com/#layers). Layers allow us to have backgrounds that don't affect the game - we call that layer `bg`. We'll place all the main game objects (like our hero, his enemies, and any other objects he interacts with) on the `game` layer, and all the UI elements (like current score, health, etc.) on the `ui` level. We make `game` the default layer, so if we don't specify a layer component on a game object, it will be drawn on the `game` layer.","metadata":{"id":673}}],["674",{"pageContent":"In the next line of code, we initialize and create the level by calling the [`addLevel`](https://kaboomjs.com/#addLevel) function. Here we pass in the level from the `LEVELS` array, using the index from the `levelNumber` parameter we added to the scene. We also pass in the configuration for all the symbols in the level map that we assigned to the `levelConf` variable. At this point, the map and all the characters in it are drawn to the screen. Note that, because the map is much wider than the size we set in the settings for the Kaboom window, we only see part of the map. This is great, because it will allow us to show more of the map as Mario starts walking.\n\nThen we add a few elements to the background layer - clouds, hills and shrubberies. Note the use of the `layer` component on these elements. We do this so that they don't interact with our game objects - they just add some visual interest. You can add as many as you like - the original _Mario_ has them in a repeating pattern across the whole level.\n\nWe also add some temporary text to the `ui` layer to let the player know which level they are on. Notice that we use the [`lifespan`](https://kaboomjs.com/#lifespan) component here to automatically fade out and remove the info text after 1 second.\n\nFinally, we add Mario to the game! We could have added him by placing his symbol, `p`, on our level map definition. However, by adding him manually to the scene using [`level.spawn()`](https://kaboomjs.com/#spawn), we can get a reference to him. This will be useful later when we are dealing with collisions and other interactions. We also set the position we want the character to initially be placed at.\n\n## Making Mario move","metadata":{"id":674}}],["675",{"pageContent":"## Making Mario move\n\nThe scene is all set up, so let's add in some interaction. The player will use the arrow keys to move Mario left and right, and the space bar to make him jump. We'll use the [`onKeyDown`](https://kaboomjs.com/#onKeyDown) function for moving left and right, as we want Mario to keep moving as long as the player holds down either key. Then we can use the [`onKeyPress`](https://kaboomjs.com/#onKeyPress) function to make Mario jump. The player will need to push the space key each time they want Mario to jump - it's always fun to smash buttons! Add the following code at the bottom of the game scene:\n\n```js\nconst SPEED = 120;\n\nonKeyDown(\"right\", () => {\n  player.flipX(false);\n  player.move(SPEED, 0);\n});\n\nonKeyDown(\"left\", () => {\n  player.flipX(true);\n  if (toScreen(player.pos).x > 20) {\n    player.move(-SPEED, 0);\n  }\n});\n\nonKeyPress(\"space\", () => {\n  if (player.grounded()) {\n    player.jump();\n  }\n});\n```\n\nTake a look at the`onKeyDown` handlers `\"right\"` and `\"left\"`. We use the `flipX` method that is added to the character through the [`sprite`](https://kaboomjs.com/#sprite) component. If this is `true`, it draws the sprite as a mirror image. This flip will make Mario face in the correct direction. We call the `move` method, which is added by the [`pos`](https://kaboomjs.com/#pos) component. Our `move` method takes in the number of pixels to move per second, which we set in the `SPEED` constant. You might want to move this constant definition nearer to the top of the file, so it's easier to find if you want to tweak it later.","metadata":{"id":675}}],["676",{"pageContent":"In the `\"left\"` handler, there is also another check. In _Mario_, you can't walk back to previous parts of a level once it's gone off screen. We can simulate this by checking if Mario is near the left edge of the screen. We get Mario's current position by calling the [`pos`](https://kaboomjs.com/#pos) method which is added by the `pos` component. However, this position will be relative to the whole level, and not just the onscreen view. To help us figure out if Mario is near the edge of the screen, and not just at the beginning of the level, we can use the [`toScreen`](https://kaboomjs.com/#toScreen) function, which converts \"game world\" or level co-ordinates to actual screen co-ordinates.\n\nWhen a player releases the space key, we want to make Mario jump. To do this, we can call the [`jump`](https://kaboomjs.com/#body) method, which is added to the character through the [`body`](https://kaboomjs.com/#body) component. However, `jump` will make the character shoot up, even if it is already in the air. To prevent this double jumping, we first check if the player is standing on some [`solid`](https://kaboomjs.com/#solid) object. The [`body`](https://kaboomjs.com/#body) component also adds the [`grounded()`](https://kaboomjs.com/#body) function, which returns `true` if the player is indeed standing on a solid object.\n\nPress Command + S or Control + S to update the output, and test it out. Mario should move around, but it doesn't look very natural and _Mario_-like - yet! Another thing you'll notice is that the screen does not scroll when Mario walks to the right, so we can't get to the rest of the level. Let's fix that first.\n\n![Mario moving](https://docimg.replit.com/images/tutorials/32-mario-kaboom/mario-move.gif)\n\n## Adding scrolling","metadata":{"id":676}}],["677",{"pageContent":"![Mario moving](https://docimg.replit.com/images/tutorials/32-mario-kaboom/mario-move.gif)\n\n## Adding scrolling\n\nKaboom has a number of functions to control the \"camera\" of the scene. The camera represents the field of view that the player can see. At the moment, the camera only shows the first part of the level. By using the [`camPos`](https://kaboomjs.com/#camPos) function, we can move the camera to show more of the level as Mario walks across the scene.\n\nLet's add this code to the game scene:\n\n```js\nplayer.onUpdate(() => {\n  // center camera to player\n  var currCam = camPos();\n  if (currCam.x < player.pos.x) {\n    camPos(player.pos.x, currCam.y);\n  }\n});\n```\n\nHere we add a handler to the [`onUpdate`](https://kaboomjs.com/#onUpdate) event for the player. This is called for each frame that is rendered. In this handler, we get the camera's current position by calling the [`camPos`](https://kaboomjs.com/#camPos) function without any arguments. Then we can check if Mario is further to the right of the scene than the camera is. If he is, then we set the camera's X position to that of Mario, so essentially the camera is following Mario. We only do this if he is further to the right of the camera, and not for positions further to the left. This is because we don't want the player to be able to go back on a level.\n\nUpdate the output again and test it out. As you move Mario past the center of the screen, the camera should start following him, giving the sense of scrolling.\n\n![Scrolling](https://docimg.replit.com/images/tutorials/32-mario-kaboom/scrolling.gif)\n\n## Creating a custom component\n\nTo add more abilities to the characters and features to the game, we'll use components that we create ourselves and can add to our games objects. To define a new component in Kaboom, we make a function that returns an object with a few required fields and methods. Here's a template to illustrate code for a custom component (not part of the game code):\n\n```js\nfunction customComponent(args) {\n  return {","metadata":{"id":677}}],["678",{"pageContent":"```js\nfunction customComponent(args) {\n  return {\n    id: \"name\",\n    require: [\"component1\", \"component2\"],\n    add() {},\n    update() {},\n  };\n}\n```\n\nIn the object we return, Kaboom requires an `id`, which is a unique name for the component. Kaboom also needs a `require` property, which is a list of other components this component needs in order to work. When a component is first initialized on a game object, Kaboom calls the `add()` method so we have the opportunity to run any setup code we need. The method `update()` is called on every game frame, so we can make animation and collision updates there.\n\nOne behavior we need is for the enemy characters to walk up and down, instead of just standing in one place. Let's make a custom component we can add to our enemy characters so that they automatically move back and forth, or patrol their part of the level. Add the code below to the bottom of `main.js`:\n\n```js\nfunction patrol(distance = 100, speed = 50, dir = 1) {\n  return {\n    id: \"patrol\",\n    require: [\"pos\", \"area\"],\n    startingPos: vec2(0, 0),\n    add() {\n      this.startingPos = this.pos;\n      this.on(\"collide\", (obj, side) => {\n        if (side === \"left\" || side === \"right\") {\n          dir = -dir;\n        }\n      });\n    },\n    update() {\n      if (Math.abs(this.pos.x - this.startingPos.x) >= distance) {\n        dir = -dir;\n      }\n      this.move(speed * dir, 0);\n    },\n  };\n}\n```\n\nWe've called this custom component \"patrol\", as it will make a character move some `distance`, at a set `speed`, and then turn around and walk in the opposite direction, `dir`. The character will also turn and move in the opposite direction if it collides with another game object. Because we use the `move` method (which is part of the [`pos`](https://kaboomjs.com/#pos) component), and the `collide` event handler (which is part of the [`area`](https://kaboomjs.com/#area) component), we add the `pos` and `area` components to the `require` list.","metadata":{"id":678}}],["679",{"pageContent":"When the component is first initialized, we want to record its starting position. This is so that we know how far the character is from where it started off, and therefore we'll know when we must turn it to move in the opposite direction. We do this by making use of the `add()` method. As we mentioned above, Kaboom will call this method on our component when the character is added to the scene. We read the position of the character at that time by calling `this.pos`: `this` refers to our character (as our component is made part of the character, `this` is reference to the combination of all the components making up the character). We can save this initial position to a property of the component object, in our case one called `startingPos`. We then attach a [`collide`](https://kaboomjs.com/#area) handler, so we know if the character bumps into anything, so we can turn it and move it in the opposite direction again.\n\nThe [`collide`](https://kaboomjs.com/#on) handler has 2 arguments passed to it: the `obj` that our character collided with, and the `side` of character that was hit. We only want to flip the direction our character moves in if it was hit from the sides `left` and `right`. To change the direction, we flip the sign of our `dir` variable, which we'll use in the `update()` method.","metadata":{"id":679}}],["680",{"pageContent":"The `update()` method is called for each frame. In it, we first check if the character is further than the specified maximum `distance` from its starting position. If it is, we switch the sign of the `dir` variable to make the character move in the opposite direction. Note that we we use the [`Math.abs`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs) function, which returns the absolute value of a number. The absolute value of a number is always positive, and this allows us to compare it to our `distance` variable, which is also a positive value. Then we call the `move` method (provided by the [`pos`](https://kaboomjs.com/#pos) component) and use the `speed` variable (passed in when the component was created) along with the `dir` variable to specify how fast and in which direction to move the character for this frame.\n\nNow that we've created this component, let's use it on a character. Uncomment the lines `//patrol` wherever you see it in the `levelConf` setup we created. Update the output and test it out. You should see the enemy character walk back and forth.\n\n![Patrol component](https://docimg.replit.com/images/tutorials/32-mario-kaboom/patrol.gif)\n\nYou'll notice we also make use of the `patrol` component on the `bigMushy` character, which we'll use to make Mario grow from small Mario to big Mario. We'll get to that in a bit.\n\n## Creating a custom component for the enemies\n\nNow that the enemies are moving around, we can give them some more behaviors and properties. One of the most important things to do is to squash the enemies if Mario jumps on them. If you take a look at the `enemies.png` sprite file, you'll see that the 3rd frame (index 2) is an image of the enemy, but squashed.\n\n![Enemies-index](https://docimg.replit.com/images/tutorials/32-mario-kaboom/enemies-index.png)","metadata":{"id":680}}],["681",{"pageContent":"![Enemies-index](https://docimg.replit.com/images/tutorials/32-mario-kaboom/enemies-index.png)\n\nWe can swap out the animation that is played when the enemy is patrolling for this frame. Kaboom has a built in [`lifespan`](https://kaboomjs.com/#lifespan) component that also has a fade out function. This component allows us to slowly fade out the squashed enemy from the scene, and then automatically remove it entirely once the specified lifetime is reached. Kaboom also allows us to dynamically add and remove components from characters using the `use` and `unuse` methods. These methods are not yet documented, but you can find them (and more tricks!) by looking at the [Kaboom source code](https://github.com/replit/kaboom). Let's use this knowledge to build a custom component to handle the enemy getting squashed and fading out of the scene:\n\n```js\nfunction enemy() {\n  return {\n    id: \"enemy\",\n    require: [\"pos\", \"area\", \"sprite\", \"patrol\"],\n    isAlive: true,\n    update() {},\n    squash() {\n      this.isAlive = false;\n      this.unuse(\"patrol\");\n      this.stop();\n      this.frame = 2;\n      this.area.width = 16;\n      this.area.height = 8;\n      this.use(lifespan(0.5, { fade: 0.1 }));\n    },\n  };\n}\n```\n\nWe define the custom component as we did before. Because we need to stop the enemy from patrolling, we require the `patrol` custom component. We also require the [`sprite`](https://kaboomjs.com/#sprite) component so we can stop the animation and set the squashed frame to display. The [`area`](https://kaboomjs.com/#area) component is necessary, as the squashed enemy frame is half the height of the regular enemy frames (8 pixels vs 16 pixels). We're going to need to adjust the height of the area so that the collision zone the enemy occupies once squashed is correct.","metadata":{"id":681}}],["682",{"pageContent":"As a side note, pressing F1 in the game turns on Kaboom debugging, which will draw the [`area`](https://kaboomjs.com/#area) box around each game element, so you can easily see when characters collide. It also shows other handy info, like the frame rate and character properties.\n\n![debug mode](https://docimg.replit.com/images/tutorials/32-mario-kaboom/debug-mode.png)\n\nBack to our code. We execute our enemy squash in the `squash` method. We have a flag called `isAlive`, which we'll use to determine if the enemy is able to hurt Mario. This is usually `true`, but set to `false` once the enemy is squashed and harmless. We also `unuse` the patrol component so that the enemy stops walking back and forth. Then we call `stop`, which is a method added by the [`sprite`](https://kaboomjs.com/#sprite) component. Calling `stop` stops playing the current animation. Then we set the `frame` of the sprite to use to `2`, which is the squashed enemy frame, and update the [`area`](https://kaboomjs.com/#area) width and height to be the same size as the frame. Finally, we call `use` to add the [`lifespan`](https://kaboomjs.com/#lifespan) component so that the character is removed from the scene after `0.5` seconds, and fades out for `0.1` seconds.\n\nNow let's add this custom component to the enemy. First, uncomment the `//enemy(),` line in the `levelConf` setup we created earlier. Now create a collision handler in the game scene between Mario and the enemy, so we know when it gets squashed:\n\n```js\nlet canSquash = false;\n\nplayer.onCollide(\"badGuy\", (baddy) => {\n  if (baddy.isAlive == false) return;\n  if (canSquash) {\n    // Mario has jumped on the bad guy:\n    baddy.squash();\n  } else {\n    // Mario has been hurt. Add logic here later...\n  }\n});\n```","metadata":{"id":682}}],["683",{"pageContent":"if (baddy.isAlive == false) return;\n  if (canSquash) {\n    // Mario has jumped on the bad guy:\n    baddy.squash();\n  } else {\n    // Mario has been hurt. Add logic here later...\n  }\n});\n```\n\nIn this `onCollide` handler, we check if the player, Mario, collides with a `badGuy` - which is the tag we gave to the enemies in the `levelConf` setup above. Then we attach our handler, which takes the `baddy` character Mario collided with. We first check if the `baddy` is still alive - if not we leave early, as there is no real interaction between Mario and a dead enemy. Then, we check the `canSquash` variable - if it is set to `true`, that means Mario has jumped onto the enemy. In this case, we call the `squash` method, which we created in the custom component for the enemy. This will execute all the logic we added there, and \"kill\" the enemy. We leave a bit of room in the handler to come back and add logic if Mario collides with the enemy without jumping on it - we'll add in that logic later.\n\nModify the `onKeyPress` handler for the `space` key as follows:\n\n```javascript\nonKeyPress(\"space\", () => {\n  if (player.grounded()) {\n    player.jump();\n    canSquash = true;\n  }\n});\n```\n\nHere, we set the `canSquash` variable to `true` to allow the player to squash the enemy if the player has jumped over it upon collision.\n\nAdd the following code to the `player.onUpdate` handler:\n\n```javascript\nif (player.grounded()) {\n  canSquash = false;\n}\n```\n\nThis code will reset the `canSquash` variable so that the player will not squash the enemy if it hasn't jumped over it in the collision handler we added earlier.\n\nUpdate the output and test our game out. If you jump on an enemy, it should be squashed and then disappear after half a second.\n\n![Squash enemy](https://docimg.replit.com/images/tutorials/32-mario-kaboom/squash.gif)\n\n## Headbutting surprise boxes","metadata":{"id":683}}],["684",{"pageContent":"![Squash enemy](https://docimg.replit.com/images/tutorials/32-mario-kaboom/squash.gif)\n\n## Headbutting surprise boxes\n\nAnother key _Mario_ action is headbutting the surprise boxes (the ones with \"?\" on them). In _Mario World_, this could release a coin, a super mushroom (one that makes Mario grow bigger), etc. When Mario headbutts these boxes, the box is 'bumped' and moves up and down quickly, while releasing its surprise. Once the box is empty, the \"?\" is removed from it. Let's create the logic to control these boxes. As above, we'll make more use of custom components.\n\nWe'll take care of the boxes for coins and for the grow-bigger mushrooms. If you take a look in the `levelConf` setup we added in the beginning, you'll see entries for coin and mushroom \"question boxes\". The only real difference between the two is the final tag, which marks which surprise the box should release. We also have definitions for an empty box (`!`), the coin (`c`), and the mushroom (`M`).\n\nLet's create a component that makes the box jump up and fall back down when it is headbutted. We can also re-use it on the coin to make it flip as it's bumped out of the box. We'll call this new component `bump`:\n\n```js\nfunction bump(offset = 8, speed = 2, stopAtOrigin = true) {\n  return {\n    id: \"bump\",\n    require: [\"pos\"],\n    bumpOffset: offset,\n    speed: speed,\n    bumped: false,\n    origPos: 0,\n    direction: -1,\n    update() {\n      if (this.bumped) {\n        this.pos.y = this.pos.y + this.direction * this.speed;\n        if (this.pos.y < this.origPos - this.bumpOffset) {\n          this.direction = 1;\n        }\n        if (stopAtOrigin && this.pos.y >= this.origPos) {\n          this.bumped = false;\n          this.pos.y = this.origPos;\n          this.direction = -1;\n        }\n      }\n    },\n    bump() {\n      this.bumped = true;\n      this.origPos = this.pos.y;\n    },\n  };\n}\n```","metadata":{"id":684}}],["685",{"pageContent":"this.pos.y = this.origPos;\n          this.direction = -1;\n        }\n      }\n    },\n    bump() {\n      this.bumped = true;\n      this.origPos = this.pos.y;\n    },\n  };\n}\n```\n\nThis looks a bit more complicated than our other custom components, but that's only because it has code for the object moving in both directions. First off, we have a few parameters when creating this component:\n\n- `offset` is how far up we want the object to be bumped before settling down again.\n- `speed` is how fast we want it to move when bumped.\n- `stopAtOrigin` specifies whether we want the object to return to its original position after being bumped, or just keep falling down - if this parameter is `false`, then bumping the object will make it look like it got dislodged and it will fall down.\n\nThe object this component is added to must also have the `pos` component. We'll use that to move the object when it is bumped.\n\nWe add a method, `bump`, which we can call from a collision handler or elsewhere. This sets the property `bumped` to `true`. This is a flag in the `update` method that will trigger the bump behavior. In the `bump` method, we also record the `y` position of the object in a property `origPos` so that we can stop the object at its original position if the `stopAtOrigin` flag has been set.\n\nIn the `update` method, which is run on each frame, we first check if the `bumped` flag has been set. If it has, we update the `y` position of the object using the `speed` we set, and in the current `direction`. On a screen, the top of the screen is where y = 0, and the bottom is the max height of the screen. Therefore to start, `direction` is set to `-1` to move the object up. Then we have a check to see if the new position of the object is higher than the `offset` parameter distance from the object's original position. If it is, we reverse the direction, so the object now starts moving back down.","metadata":{"id":685}}],["686",{"pageContent":"Next, we have a check to see if the flag `stopAtOrigin` is set. If the object has fallen down to its original position (or further), we set the `bumped` flag back to `false` and update the object's position exactly back to its original position. We also set the `direction` flag back to `-1`, so the object is back in a state that it can be bumped again.\n\nNow that this `bump` component exists, you can uncomment the `//bump(),` lines in the `levelConf` setup we created earlier.\n\nTo trigger the bump and add the code to make the surprise come out, we'll need to add a collision handler. Believe it or not, Kaboom has a special case collision event called `headbutt` (which is not documented, but you can also find it in the [source code](https://github.com/replit/kaboom)) just for this type of thing!\n\n```js\nplayer.on(\"headbutt\", (obj) => {\n  if (obj.is(\"questionBox\")) {\n    if (obj.is(\"coinBox\")) {\n      let coin = level.spawn(\"c\", obj.gridPos.sub(0, 1));\n      coin.bump();\n    } else if (obj.is(\"mushyBox\")) {\n      level.spawn(\"M\", obj.gridPos.sub(0, 1));\n    }\n    var pos = obj.gridPos;\n    destroy(obj);\n    var box = level.spawn(\"!\", pos);\n    box.bump();\n  }\n});\n```\n\nIn the handler for `headbutt`, we are passed the object, `obj`, that the player headbutted. We check to see if it is indeed one of our `questionBox` objects. If it is, we check if it is a `coinBox` (a coin must pop out) or a `mushyBox` (a grow-bigger mushroom should pop out).\n\nIf it is a `coinBox`, we `spawn` a new coin 1 block above the coin box, using the configuration `c` we setup for a coin in the `levelConf` in the beginning. Then we call `bump` on the coin to invoke our custom component's method to make it appear to flip up out of the box.","metadata":{"id":686}}],["687",{"pageContent":"If it is a `mushyBox`, we do the same, except we don't bump the mushroom. The mushroom has our custom `patrol` component added to it (check in the `levelConf` for `M`), so it will start moving immediately. We set the patrol distance very large on the mushroom so it won't automatically turn around, it will just keep going until if falls of the screen.\n\nThen, to replace the `questionBox` with an empty box, we first record its position, then [`destroy`](https://kaboomjs.com/#destroy) it, and `spawn` a new empty box (`!` in the `levelConf`) to take its place. Finally, we `bump` this new box to give it the motion we want.\n\nCool, time to update the output and test this out. When you jump up using the `space` key and headbutt the question boxes now, they should move and have things pop out!\n\n![question-boxes](https://docimg.replit.com/images/tutorials/32-mario-kaboom/question-box.gif)\n\n## Adding special behaviors to Mario\n\nNow we've got the basics of all the other game elements down, it's time to create a custom component for Mario himself. This component will need to do quite a bit, as Mario is the main character. Here are the things it will need to handle:\n\n- Make Mario get bigger or smaller.\n- Run the \"running\" animation when Mario is running, and change to a standing or jumping frame in other cases.\n- \"Freeze\" Mario when he gets to the castle or has died, so the player can no longer move him.\n- Handle Mario dying, with a classic spring up and out of the scene.\n\nOk, here it is, our Mario custom component:\n\n```js\nfunction mario() {\n  return {\n    id: \"mario\",\n    require: [\"body\", \"area\", \"sprite\", \"bump\"],\n    smallAnimation: \"Running\",\n    bigAnimation: \"RunningBig\",\n    smallStopFrame: 0,\n    bigStopFrame: 8,\n    smallJumpFrame: 5,\n    bigJumpFrame: 13,\n    isBig: false,\n    isFrozen: false,\n    isAlive: true,\n    update() {\n      if (this.isFrozen) {\n        this.standing();\n        return;\n      }\n\n      if (!this.grounded()) {\n        this.jumping();\n      } else {","metadata":{"id":687}}],["688",{"pageContent":"isFrozen: false,\n    isAlive: true,\n    update() {\n      if (this.isFrozen) {\n        this.standing();\n        return;\n      }\n\n      if (!this.grounded()) {\n        this.jumping();\n      } else {\n        if (keyIsDown(\"left\") || keyIsDown(\"right\")) {\n          this.running();\n        } else {\n          this.standing();\n        }\n      }\n    },\n    bigger() {\n      this.isBig = true;\n      this.area.width = 24;\n      this.area.height = 32;\n    },\n    smaller() {\n      this.isBig = false;\n      this.area.width = 16;\n      this.area.height = 16;\n    },\n    standing() {\n      this.stop();\n      this.frame = this.isBig ? this.bigStopFrame : this.smallStopFrame;\n    },\n    jumping() {\n      this.stop();\n      this.frame = this.isBig ? this.bigJumpFrame : this.smallJumpFrame;\n    },\n    running() {\n      const animation = this.isBig ? this.bigAnimation : this.smallAnimation;\n      if (this.curAnim() !== animation) {\n        this.play(animation);\n      }\n    },\n    freeze() {\n      this.isFrozen = true;\n    },\n    die() {\n      this.unuse(\"body\");\n      this.bump();\n      this.isAlive = false;\n      this.freeze();\n      this.use(lifespan(1, { fade: 1 }));\n    },\n  };\n}\n```\n\nFirstly, we require the character to have a few other components: [`body`](https://kaboomjs.com/#body), so we can determine if Mario is jumping or on the ground; [`area`](https://kaboomjs.com/#area), so we can change the collision box area of Mario as he grows or shrinks; [`sprite`](https://kaboomjs.com/#sprite), so we can start and stop animations and set static frames; and our custom `bump` component, so we can throw Mario off the screen if he dies.","metadata":{"id":688}}],["689",{"pageContent":"If we take a peek in the `Mario.json` file along with the `Mario.png` sprite file, we'll see that there are some animations defined in the `frameTags` section that we can use. The `Running` animation contains all the frames to make Mario appear to be running when he is in small size. Similarly, `RunningBig` has all the frames for when Mario is running while he is in big size. We can also see that a good frame for small Mario standing still, or stopped, is the first frame, or frame `0`. A good frame to use for big Mario standing still or stopped is frame `8`. Good frames for Mario jumping when he is small and big are `5` and `13` respectively. So we don't have to keep remembering all these magic strings and numbers, we set them as properties of the Mario component.\n\nIf we measure the size of the big Mario images, we'll see that the tightest crop we can get on them is about 24x32 pixels. For small Mario, the size is 16x16 pixels. We'll use this knowledge to set the correct Mario animation and [`area`](https://kaboomjs.com/#area) collision boxes when changing between animations and sizes.\n\nIn the `mario` component, we define a number of custom methods. Let's go through them.\n\n- The `bigger` and `smaller` methods provide a way to change the size of Mario. We set a flag `isBig` that we check in the other methods to choose appropriate animations and frames. We also set the collision [`area`](https://kaboomjs.com/#area) size appropriate for the size of Mario.\n- The `standing` and `jumping` methods are called from our main `update` method, which is called with each frame. In these 2 methods, we stop any animation that is currently running using the `stop` method provided by the [`sprite`](https://kaboomjs.com/#sprite) component. Then, depending on the size of Mario, determined by the `isBig` flag, we set the appropriate static `frame` to make Mario look like he is standing still or jumping.","metadata":{"id":689}}],["690",{"pageContent":"- In the `running` method, we find the correct running animation depending on whether Mario is big or small. Then we check if that animation is the same animation that Mario is currently using, by calling the `curAnim` method provided by the [`sprite`](https://kaboomjs.com/#sprite) component. If they are not the same, we update the current animation by calling `play` to start the new animation. We first check the current animation because, if we set the animation regardless of what is currently playing, we'd keep resetting the current animation to the beginning with each frame and make it appear as a static frame.\n- The `freeze` method sets a flag `isFrozen`, which is used in the `update` method to determine whether Mario can move.\n- When Mario is killed, we can call the `die` method. This first removes the [`body`](https://kaboomjs.com/#body) component on Mario so that he is no longer subject to gravity or collisions, because these are things that ghosts are not worried about. Then we call the `bump` method that is added by our custom `bump` component. This shoots Mario up into the air, and back down again. We also set the `isAlive` flag to false, to signal to any collision handlers that Mario is dead before they try kill him again, or give him a 1-up mushroom or coin. We `freeze()` Mario so that he reverts to a standing pose and keyboard input doesn't affect him, and finally, we `use` the [`lifespan`](https://kaboomjs.com/#lifesspan) component to fade Mario out and remove him from the scene.","metadata":{"id":690}}],["691",{"pageContent":"We also have the required `update` method, which Kaboom calls every frame. In this method, we check if Mario is frozen, in which case we call our `standing` method to update Mario's pose. Then we check if Mario is not on the ground, in other words he is in the air, using the `grounded()` method provided by the [`body`](https://kaboomjs.com/#body) component. This method returns `true` if he is on a `solid` object, or `false` otherwise. If this comes back `false`, we call the `jumping` method to stop any animations and set the static jumping frame.\n\nIf Mario is not jumping, i.e. he is `grounded`, then we check if the user currently has the `left` or `right` key down. If so, this means Mario is `running()`. The final condition is if Mario is on the ground but is not moving, then he must be `standing()`.\n\nNice! Uncomment the `mario` component line in the `levelConf` to activate this new component on Mario. Update the output and test the animation changes out. Instead of Mario in a single pose, you should see an animation as he runs, changing to a static frame as he stands still or jumps.\n\nNow we can hook up collision handlers to check if Mario has eaten the mushroom to grow larger, or if he gets injured or killed by an enemy or falling off the screen.\n\n## Adding more Mario collisions and events\n\nFirst, let's add a collision handler between the mushroom and Mario. Then we can call our `bigger` method from our custom `mario` component to grow him.\n\n```js\nplayer.onCollide(\"bigMushy\", (mushy) => {\n  destroy(mushy);\n  player.bigger();\n});\n```\n\nIn this handler, we remove the mushroom from the scene, and then make Mario `bigger()`.\n\nLet's add some more code to the handler we created earlier for Mario colliding with an enemy. There, we only handled the case of Mario jumping on the enemy. We still need to account for Mario being injured or killed by the enemy. Update the `badGuy` collision handler like this:\n\n```js\nplayer.onCollide(\"badGuy\", (baddy) => {\n  if (baddy.isAlive == false) return;","metadata":{"id":691}}],["692",{"pageContent":"```js\nplayer.onCollide(\"badGuy\", (baddy) => {\n  if (baddy.isAlive == false) return;\n  if (player.isAlive == false) return;\n  if (canSquash) {\n    // Mario has jumped on the bad guy:\n    baddy.squash();\n  } else {\n    // Mario has been hurt\n    if (player.isBig) {\n      player.smaller();\n    } else {\n      // Mario is dead :(\n      killed();\n    }\n  }\n});\n```\n\nWe add in a condition at the top of the handler to exit early if Mario is not alive.\n\nIn the `else` condition, if Mario did not squash the bad guy, we check if we are dealing with big Mario. If so, _Mario World_ rules are that he doesn't die, he just gets `smaller()`. However, if Mario is already small, he unfortunately is now dead. We call out to another function `killed` to handle Mario's death scene. Let's add that function:\n\n```js\nfunction killed() {\n  // Mario is dead :(\n  if (player.isAlive == false) return; // Don't run it if mario is already dead\n  player.die();\n  add([\n    text(\"Game Over :(\", { size: 24 }),\n    pos(toWorld(vec2(160, 120))),\n    color(255, 255, 255),\n    origin(\"center\"),\n    layer(\"ui\"),\n  ]);\n  wait(2, () => {\n    go(\"start\");\n  });\n}\n```\n\nThis function does a few things. First, we run the code in the `die` method from the custom `mario` component. Then we [`add`](https://kaboomjs.com/#add) some [`text`](https://kaboomjs.com/#text) to notify the player that the game is over. We [`wait`](https://kaboomjs.com/#wait) for 2 seconds as we pay Mario our final respects, and then we [`go`](https://kaboomjs.com/#go) back to the start scene to play again.\n\nAnother way Mario can die in _Mario World_ is if he falls off the platform into the void. We can check for this by modifying the `player.onUpdate` handler we added earlier for moving the camera:\n\n```js\nplayer.onUpdate(() => {\n  // center camera to player\n  var currCam = camPos();\n  if (currCam.x < player.pos.x) {\n    camPos(player.pos.x, currCam.y);\n  }\n\n  if (player.isAlive && player.grounded()) {\n    canSquash = false;\n  }\n\n  // Check if Mario has fallen off the screen","metadata":{"id":692}}],["693",{"pageContent":"if (currCam.x < player.pos.x) {\n    camPos(player.pos.x, currCam.y);\n  }\n\n  if (player.isAlive && player.grounded()) {\n    canSquash = false;\n  }\n\n  // Check if Mario has fallen off the screen\n  if (player.pos.y > height() - 16) {\n    killed();\n  }\n});\n```\n\nHere, we check if Mario's `y` co-ordinate is greater than the [`height`](https://kaboomjs.com/#height) of the Kaboom window, less the size of one platform block, which is 16 pixels. If this is the case, it means Mario has fallen off the top row of the platform, and therefore has been `killed()`.\n\nWe also need to update our `left` and `right` key handler events to check if Mario `isFrozen`. In this case the handlers should just return early without moving Mario:\n\n```js\nonKeyDown(\"right\", () => {\n  if (player.isFrozen) return;\n  player.flipX(false);\n  player.move(SPEED, 0);\n});\n\nonKeyDown(\"left\", () => {\n  if (player.isFrozen) return;\n  player.flipX(true);\n  if (toScreen(player.pos).x > 20) {\n    player.move(-SPEED, 0);\n  }\n});\n```\n\nThen we also modify the `space` key handler to only jump if Mario is still alive:\n\n```javascript\nonKeyPress(\"space\", () => {\n  if (player.isAlive && player.grounded()) {\n    player.jump();\n    canSquash = true;\n  }\n});\n```\n\nTime to update the output and test all these changes out! First thing to test is if Mario grows bigger by eating the mushroom. Second thing to check is if Mario then gets smaller again by colliding with an enemy. Also check if Mario is killed when colliding with an enemy when he is small, or when falling off the platform.\n\n![Mario bigger and killed](https://docimg.replit.com/images/tutorials/32-mario-kaboom/bigger-kill-scenes.gif)\n\n## Ending when we get to the castle\n\nThe final thing to do for this tutorial is to handle the case when Mario reaches the castle. At this point, when Mario is at the door, we want him to `freeze`, a congratulations message to appear to the player, and then move on to the next level.","metadata":{"id":693}}],["694",{"pageContent":"We can use a regular collision handler to check if Mario is at the castle. Notice in the setup for the castle in the `levelConf` we added earlier, we set the collision [`area`](https://kaboomjs.com/#area) of the castle to a very narrow, completely vertical line of width 1 pixel and height 240, which is the screen height:\n\n```js\n  \"H\": () => [\n    sprite(\"castle\"),\n    area({ width: 1, height: 240 }),\n    origin(\"bot\"),\n    \"castle\"\n  ],\n```\n\nThis is so that the collision between Mario and the castle is only registered when Mario gets to the center of the castle, where the door is. We can visualize this by pressing F1 in the game to enable the debugger and look at the area box at the castle:\n\n![castle area](https://docimg.replit.com/images/tutorials/32-mario-kaboom/castle.png)\n\nThe reason we make the area box the height of the screen is make sure the player can't accidentally jump over the ending point and fall off the end of the level.\n\nNow let's add our collision handler for the castle to the game scene:\n\n```js\nplayer.onCollide(\"castle\", (castle, side) => {\n  player.freeze();\n  add([\n    text(\"Well Done!\", { size: 24 }),\n    pos(toWorld(vec2(160, 120))),\n    color(255, 255, 255),\n    origin(\"center\"),\n    layer(\"ui\"),\n  ]);\n  wait(1, () => {\n    let nextLevel = levelNumber + 1;\n\n    if (nextLevel >= LEVELS.length) {\n      go(\"start\");\n    } else {\n      go(\"game\", nextLevel);\n    }\n  });\n});\n```\n\nFirst, we `freeze` Mario so the player can't control him anymore. Then we [`add`](https://kaboomjs.com/#add) our \"Well Done!\" [`text`](https://kaboomjs.com/#text) message to the center of the screen. We [`wait`](https://kaboomjs.com/#wait) a second before incrementing our level number and going to the next level, or going back to the start of the game if we have completed all levels.\n\n## Next steps\n\nThere are few things left to do to complete the game:\n\n- Add in some scoring. You can check out a previous Kaboom tutorial, like [Space Shooter](/tutorials/kaboom/build-space-shooter-with-kaboom), to see how scoring works.","metadata":{"id":694}}],["695",{"pageContent":"- Add in some scoring. You can check out a previous Kaboom tutorial, like [Space Shooter](/tutorials/kaboom/build-space-shooter-with-kaboom), to see how scoring works.\n- Add in sounds and music. If you get your own copy of the _Mario_ soundtrack and effects, you can use the [`play`](https://kaboomjs.com/#play) sound function in Kaboom to get those classic tunes blasting as you play.\n- Add in some more levels. This is the really fun part, where you get to create _Mario_ levels you wish existed.\n- You can also add in some more of the _Mario World_ game characters.\n\n## Credits\n\n[https://twitter.com/Arrow_N_TheKnee](https://twitter.com/Arrow_N_TheKnee) for the [Mario Visual Assets](https://dotstudio.itch.io/super-mario-1-remade-assets)\n\nYou can find the code for this tutorial here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Mario?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":695}}],["696",{"pageContent":"---\ntitle: Snake game with Kaboom.js\n---\n\n# Building Snake in Kaboom.js\n\nSnake was an incredibly popular game, mostly remembered from 1990s era cell phones. At the time, it was often the only game you'd find on a phone. In the most basic form, it's a super simple game, but still wildly entertaining. It's also a great game to build when you are learning the basics of game making.\n\nIn this tutorial, we'll implement Snake using [Kaboom.js](https://kaboomjs.com) built into [Replit](https://replit.com)\n\n![game functionality](https://docimg.replit.com/images/tutorials/21-snake-kaboom/updated-graphic.gif)\n\n## Overview and Requirements\n\nWe'll use the [Replit](https://replit.com) web IDE to create our version of Snake. If you don't already have a Replit account, [create one now](https://replit.com/signup).\n\nLet's think a bit about what we need to do. Snake, at its core, is a series of blocks representing a snake moving around a grid, with the player controlling the direction. It also has simple rules – when the snake touches the sides of the screen, it dies. If the snake crosses itself, it also dies. If the snake eats some food (a different type of block), it grows by 1 block. The food then re-appears at another random place on the screen.\n\nA few components we will need to build are:\n\n- A way to draw the blocks and move them on the screen.\n- A way to get steering directions from the player to the snake.\n- A way to determine if the snake has gone out of bounds of the screen.\n- A way to determine if the snake has crossed over itself (or \"bitten itself\", as another analogy).\n- A way to randomly place the food on the screen.\n- A way to determine if the snake has eaten, or touched, the food.\n- A way to grow the snake.\n\nThat's a lot to think about! Let's get started and create a project in [Replit](https://replit.com).\n\n## Creating a New Project\n\nLog into your [Replit](https://replit.com) account and create a new repl. Choose **Kaboom** as your project type. Now, give this repl a name, like \"snake-kaboom\".","metadata":{"id":696}}],["697",{"pageContent":"## Creating a New Project\n\nLog into your [Replit](https://replit.com) account and create a new repl. Choose **Kaboom** as your project type. Now, give this repl a name, like \"snake-kaboom\".\n\n![New repl](https://docimg.replit.com/images/tutorials/21-snake-kaboom/new-repl.png)\n\nAfter the repl has booted up, you should see a `main.js` file under the \"Scenes\" section. This is where we'll start coding.\n\n## Getting Started with Kaboom.js\n\n[Kaboom.js](https://kaboomjs.com) is a JavaScript library that contains many useful features to make simple in-browser games. It has functionality to draw shapes and sprites (the images of characters and game elements) to the screen, get user input, play sounds, and more. We'll explore these features and learn how they work by using some of them in our game.\n\nKaboom.js also makes good use of JavaScript's support for [callbacks](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function); instead of writing loops to read in keyboard input and check if game objects have collided (bumped into each other), Kaboom.js uses an event model, where it tells us when such an event has occurred. Then we can connect up [callback functions](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function) that act on these events.\n\nUsing Kaboom.js in Replit takes care of all the boilerplate initialisation code, as well as asset loading, so we can concentrate on writing the game logic and making game graphics and sound.\n\n## Creating the Game Map\n\nTo start, we can get our game board, or _map_ drawn on the screen. This will define the edges of the board so that if the snake crashes into them, we can detect and end the game.\n\nKaboom.js has built-in support for defining game maps, using a text array and the function [`addLevel`](https://kaboomjs.com/doc#addLevel). This takes away a lot of the hassle normally involved in loading and rendering maps.\n\nReplace the example code in `main.js` file with the following to create the game board:\n\n```javascript","metadata":{"id":697}}],["698",{"pageContent":"Replace the example code in `main.js` file with the following to create the game board:\n\n```javascript\nimport kaboom from \"kaboom\";\n\nkaboom();\n\nconst block_size = 20;\n\nconst map = addLevel(\n  [\n    \"==============\",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"=            = \",\n    \"==============\",\n  ],\n  {\n    width: block_size,\n    height: block_size,\n    pos: vec2(0, 0),\n    \"=\": () => [rect(block_size, block_size), color(255, 0, 0), area(), \"wall\"],\n  }\n);\n```\n\nOn the first line we import the kaboom library, and then initialize the context by calling `kaboom()`. This will give us a blank canvas with a nice checkerboard pattern. We then create a constant for the size of each block on our grid. This is just so we don't need to keep typing in the number, and also helps if we want to experiment later with different block sizes etc.\n\nThen we create the game map. The map, or level design, is expressed in an array of strings. Each row in the array represents one row on the screen. So, we can design visually in text what the map should look like. The `width` and `height` parameters specify the size of each of the elements in the map. The `pos` parameter specifies where on the screen the map should be place – we choose `(0,0)`, which is the top left of the screen, as the starting point for the map.","metadata":{"id":698}}],["699",{"pageContent":"Then Kaboom.js allows us to specify what to draw for each symbol in the text map. We're only using one symbol here, `=`, but you can make maps out of many different elements – e.g., a symbol for a wall, a symbol for water, a symbol for a health kit and so on. To tell Kaboom.js what to draw for the symbol, we add the symbol as a key, as in `=`, and then specify parameters for it. In this code, we draw a red rectangle as each piece of the boundary wall. The `area()` component generates the collision area which will be useful when we want to check for collision between the snake and wall later on. The string `wall` assigns a tag to each of the pieces of wall drawn, which will also help us with collision detection later on.\n\nIf we run this code, we should see the outline of a red square on the screen, representing the map.\n\n![Boundary wall from map\"](https://docimg.replit.com/images/tutorials/21-snake-kaboom/boundary-wall.png)\n\n## Adding the Snake\n\nNow that we have a map, let's add the snake. The snake is made up of a number of blocks moving together. We'll need to keep track of these so that we can move them together, so an [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) would be a good data structure to use here.\n\nWe also need to start the snake off with a given size, position and direction to move in on the map. It can return to these each time the game ends as well. So we should make a function that we can call whenever a new game starts, or the old one ends, to reset the snake to a default position and size.\n\nWe'll need to add a few variables and constants that our snake drawing function will use. Add these definitions above the `const block_size = 20;` we added earlier:\n\n```javascript\nconst directions = {\n  UP: \"up\",\n  DOWN: \"down\",\n  LEFT: \"left\",\n  RIGHT: \"right\",\n};\n\nlet current_direction = directions.RIGHT;\nlet run_action = false;\nlet snake_length = 3;\nlet snake_body = [];\n```","metadata":{"id":699}}],["700",{"pageContent":"const directions = {\n  UP: \"up\",\n  DOWN: \"down\",\n  LEFT: \"left\",\n  RIGHT: \"right\",\n};\n\nlet current_direction = directions.RIGHT;\nlet run_action = false;\nlet snake_length = 3;\nlet snake_body = [];\n```\n\nFirst, we define an object with properties for each of the allowable directions the snake can move in. This makes code that checks and changes directions easy to read and change, compared to just using numbers or strings to define the directions. The variable `current_direction` tracks the direction the snake is moving at any given time. We choose a starting direction, `RIGHT`, as its default. `run_action` is a flag variable that we'll use to flag if we are in the actual game, or setting up, or ending the game. The variable `snake_length` keeps track of how long the snake tail has become – we start it at a chosen value of 3. Finally, `snake_body` holds all the screen objects that make up the snake's body.\n\nNow we can add a function to spawn, and respawn, the snake.\n\nLet's add this function:\n\n```javascript\nfunction respawn_snake() {\n  destroyAll(\"snake\");\n\n  snake_body = [];\n  snake_length = 3;\n\n  for (let i = 1; i <= snake_length; i++) {\n    let segment = add([\n      rect(block_size, block_size),\n      pos(block_size, block_size * i),\n      color(0, 0, 255),\n      area(),\n      \"snake\",\n    ]);\n    snake_body.push(segment);\n  }\n  current_direction = directions.RIGHT;\n}\n\nfunction respawn_all() {\n  run_action = false;\n  wait(0.5, function () {\n    respawn_snake();\n    run_action = true;\n  });\n}\n\nrespawn_all();\n```\n\nFirst, the function gets rid of any existing snake segment objects by using the Kaboom.js [`destroyAll` function](https://kaboomjs.com/doc#destroyAll). This removes any object with the given tag from the game. Then we reset our segment array to an empty array, and the snake length back to the default.","metadata":{"id":700}}],["701",{"pageContent":"Then the function sets up a loop to create new snake segments, up to the length we specified. It does this by calling the Kaboom.js [`add`](https://kaboomjs.com/doc#add) method, which adds a new object to the game. `add` takes a few parameters, as components of the object to create. We pass in components to specify how to draw the object (using [`rect`](https://kaboomjs.com/doc#rect)), its color, and a tag \"snake\" to identify the segments when we are checking collisions, and updating/removing segments. We also specify the position for the segment we create. To create the starting snake, we just ensure it is at least one `block_size`, or block, from the left side, and then add each subsequent segment one more block down per loop. This gives a straight snake pointing down to start. Then we add the new segment to our `snake_body` array to keep track of it.\n\nFinally, we set a default starting direction for the snake to move in.\n\nYou'll notice that we also add in a function `respawn_all`, and a call to the function `respawn_snake`. We'll use the `respawn_all` function to call all of our other respawn functions. Currently we have one for the snake, but we'll also need one for the food when we add it. In the `respawn_all` function, we also take care to set the `run_action` flag to false, so that no updates are made while we are setting up or resetting objects. We also wrap the calls in a Kaboom.js [`wait` function](https://kaboomjs.com/doc#wait), with a small delay of 0.5 seconds. This is because when we detect a \"game over\" condition, we don't immediately want to reset the game, as it could be a bit disorienting to a player.\n\nRunning the code now, you should see a blue line at the top-left side of the map.\n\n![static snake](https://docimg.replit.com/images/tutorials/21-snake-kaboom/static-snake.png)\n\n## Moving the Snake\n\nNow that we've got map boundaries, and a snake drawn on the screen, we can work on getting player input and moving the snake around.","metadata":{"id":701}}],["702",{"pageContent":"## Moving the Snake\n\nNow that we've got map boundaries, and a snake drawn on the screen, we can work on getting player input and moving the snake around.\n\nKaboom.js has a function [`onKeyPress`](https://kaboomjs.com/doc#onKeyPress), which can call a supplied function whenever a particular key is pressed. We'll use that to determine which way the player wants the snake to go. Add this code to get user direction input:\n\n```javascript\nonKeyPress(\"up\", () => {\n  if (current_direction != directions.DOWN) {\n    current_direction = directions.UP;\n  }\n});\n\nonKeyPress(\"down\", () => {\n  if (current_direction != directions.UP) {\n    current_direction = directions.DOWN;\n  }\n});\n\nonKeyPress(\"left\", () => {\n  if (current_direction != directions.RIGHT) {\n    current_direction = directions.LEFT;\n  }\n});\n\nonKeyPress(\"right\", () => {\n  if (current_direction != directions.LEFT) {\n    current_direction = directions.RIGHT;\n  }\n});\n```\n\nFor each of the named \"arrow\" keys, we set up a function to call if the key is pressed. In each of these functions, we check to ensure that the new direction input is not the complete opposite direction to which the snake is currently moving. This is because we don't want to allow the snake to reverse. If the input direction is a legal move, we update the `current_direction` property to the new direction.\n\nNow we need to think about how to make the snake appear to move on the screen. A way to do this is to check which direction the snake is heading, and add a block in front of the snake in that direction. Then we'll need to remove a block at the tail-end of the snake. We'll need to do this a few times in a second so that the snake appears to be moving smoothly. Kaboom.js has a function [`onUpdate`](https://kaboomjs.com/doc#onUpdate) which can be used to update game objects on each frame. Add the following code, which uses the `onUpdate` function, to move the snake:\n\n```javascript\nlet move_delay = 0.2;\nlet timer = 0;\nonUpdate(() => {\n  if (!run_action) return;\n  timer += dt();","metadata":{"id":702}}],["703",{"pageContent":"```javascript\nlet move_delay = 0.2;\nlet timer = 0;\nonUpdate(() => {\n  if (!run_action) return;\n  timer += dt();\n  if (timer < move_delay) return;\n  timer = 0;\n\n  let move_x = 0;\n  let move_y = 0;\n\n  switch (current_direction) {\n    case directions.DOWN:\n      move_x = 0;\n      move_y = block_size;\n      break;\n    case directions.UP:\n      move_x = 0;\n      move_y = -1 * block_size;\n      break;\n    case directions.LEFT:\n      move_x = -1 * block_size;\n      move_y = 0;\n      break;\n    case directions.RIGHT:\n      move_x = block_size;\n      move_y = 0;\n      break;\n  }\n\n  // Get the last element (the snake head)\n  let snake_head = snake_body[snake_body.length - 1];\n\n  snake_body.push(\n    add([\n      rect(block_size, block_size),\n      pos(snake_head.pos.x + move_x, snake_head.pos.y + move_y),\n      color(0, 0, 255),\n      area(),\n      \"snake\",\n    ])\n  );\n\n  if (snake_body.length > snake_length) {\n    let tail = snake_body.shift(); // Remove the last of the tail\n    destroy(tail);\n  }\n});\n```\n\nWe set the action to run every 0.2 seconds, or 5 times a second to get smooth movement. Since the `action` function updates game objects on each frame we use the [`dt()` function](https://kaboomjs.com/doc#dt) to get the time that has elapsed between the previous and current frame, so that we can keep track if 0.2 seconds has elapsed for us to move the snake. If the desired delay has not elapsed we exit early without updating anything otherwise we reset the timer and execute the code to move the snake. You can try experiment with different times to see the effect on the game by adjusting the value of the `move_delay` variable. We also check the flag variable `run_action` we defined earlier – if it is false, we exit early without updating anything. Then, the function defines 2 local variables, `move_x` and `move_y`, which is used to determine where to place the 'next' block relative to the head of the snake.","metadata":{"id":703}}],["704",{"pageContent":"Then the function switches on the value of the current direction the snake is heading in. For each direction, the `move_x` and `move_y` are set to either 0, block_size or -1 \\* block_size. If the snake is moving left or right, we add or subtract a block from the x dimension accordingly. The same occurs if the snake is moving up or down, but in the y dimension.\n\nAfter the switch, we get the current snake head by indexing the last element in the snake body array. Now that we have both the current snake head position, and the position amount relative to the snake head to move in, we can create the new snake head by adding a new block game object. This is similar to the code we used in `respawn_snake`.\n\nNow all that remains is to remove a block at the tail end of the snake, using the built-in array [`shift` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift), which removes the first element from an array, and returns that element. Because our 'oldest' part of the snake, also known as a tail, is the first element, we call shift on the array, and then the Kaboom.js [`destroy` function](https://kaboomjs.com/doc#destroy) to get rid of the segment. We only do this if the current length of the snake body array is greater than our determined snake length. This means if we increase `snake_length`, the overall length of the snake on the screen will also increase. We can use this when we add food to the game.\n\nRunning the project now and clicking into the game screen should allow you to move the snake around. Note that there isn't collision detection yet, so the snake can go out of bounds without consequence.\n\n![Moving the snake](https://docimg.replit.com/images/tutorials/21-snake-kaboom/snake-move.gif)\n\n## Adding Snake Food","metadata":{"id":704}}],["705",{"pageContent":"![Moving the snake](https://docimg.replit.com/images/tutorials/21-snake-kaboom/snake-move.gif)\n\n## Adding Snake Food\n\nWe have a snake, it moves, and a player can steer it. Let's add some food that the snake can eat, which will cause it to grow longer. Whenever the snake eats the food, we'll have to respawn the food again, so let's write the food creation code in a function as well, like we did for the snake:\n\n```javascript\nlet food = null;\n\nfunction respawn_food() {\n  let new_pos = rand(vec2(1, 1), vec2(13, 13));\n  new_pos.x = Math.floor(new_pos.x);\n  new_pos.y = Math.floor(new_pos.y);\n  new_pos = new_pos.scale(block_size);\n\n  if (food) {\n    destroy(food);\n  }\n  food = add([\n    rect(block_size, block_size),\n    color(0, 255, 0),\n    pos(new_pos),\n    area(),\n    \"food\",\n  ]);\n}\n```\n\nFirstly, we set up a variable `food` so that we can keep track of food objects we create. You can move this variable up to where we declared other variables, like `block_size` and `snake_body` if you want to keep them all neatly in the same place.\n\nThen the function `respawn_food` does a few things. In the game of snake, once a food block is eaten, another one appears at a random location on the grid. This means we'll need a random number generator to determine the location to place the food. Kaboom.js has a function called [`rand`](https://kaboomjs.com/doc#rand) which we can use to find a random position on the screen to place the food. We need both random `x` and `y` co-ordinates – conveniently, the `rand` function can accept 2D vectors as the start and end amount for the random range to generate numbers in, and will then return another 2D vector as a result.","metadata":{"id":705}}],["706",{"pageContent":"Why do we choose a range of 1-13 for the random position of the food? If you look at the map we added earlier, it is 14 spaces across and 14 spaces down. These are the dimensions of our screen in grid blocks. Because we don't want to draw the food over the boundaries, we use 1-13 to choose blocks within the map. Now, the `rand` function returns real numbers, with decimals, not integers. This means we need to add the `Math.floor` call to truncate any decimals off the random numbers, as we don't want to place the food halfway through a particular grid block. We also need to convert from our grid co-ordinates to regular screen pixels. This is done by multiplying each co-ordinate by the `block_size`, which specifies the size of each grid block in pixels. We make use of the Kaboom.js [`scale` method](https://kaboomjs.com/doc#vec2) on the `vec2` class to perform the multiplication.\n\nThe next part of the function checks if the `food` variable already contains an existing food object. If it does, we call [`destroy`](https://kaboomjs.com/doc#destroy) to remove that food from the game. Finally, the function creates a new food object by calling the Kaboom.js [`add`](https://kaboomjs.com/doc#add) function to create a new food object at the random position we made.\n\nTo call this new `respawn_food` function, we need to update our `respawn_all` function, like this:\n\n```javascript\nfunction respawn_all() {\n  run_action = false;\n  wait(0.5, function () {\n    respawn_snake();\n    respawn_food();\n    run_action = true;\n  });\n}\n```\n\nRunning the game now shows a green food block positioned somewhere randomly on the map:\n\n![food added](https://docimg.replit.com/images/tutorials/21-snake-kaboom/food-added.png)\n\n## Detecting Collisions\n\nNow that we have all the objects our game needs – a boundary wall, a snake, and food – we can move on to detecting interactions, or collisions, between these objects.","metadata":{"id":706}}],["707",{"pageContent":"## Detecting Collisions\n\nNow that we have all the objects our game needs – a boundary wall, a snake, and food – we can move on to detecting interactions, or collisions, between these objects.\n\nKaboom.js has a useful function for helping with this: [`onCollide`](https://kaboomjs.com/doc#onCollide). The function takes in 2 tags for different game object types, and calls a provided callback function if there is a collision of the objects.\n\nLet's start with detecting if the snake moves over a food block. Add the code below:\n\n```javascript\nonCollide(\"snake\", \"food\", (s, f) => {\n  snake_length++;\n  respawn_food();\n});\n```\n\nWe set up the `onCollide` function with tags for the snake, and the food object. Then, in the callback function, `snake_length` is increased by 1, and we call `respawn_food` to replace the eaten food somewhere else on the map.\n\nRunning this, and eating the food, you should see the snake grow each time, and the food re-appear on another block:\n\n![eating food](https://docimg.replit.com/images/tutorials/21-snake-kaboom/eat-food.gif)\n\nNow, we can add similar code to detect if the snake has hit the wall:\n\n```javascript\nonCollide(\"snake\", \"wall\", (s, w) => {\n  run_action = false;\n  shake(12);\n  respawn_all();\n});\n```\n\nIn the callback function, we immediately set the `run_action` flag to false. This is so that the code in the move loop does not run and create the appearance of the snake stuck in the wall. Then the code calls a cool Kaboom.js effect function [`shake`](https://kaboomjs.com/doc#shake), which \"shakes\" the screen in a way that makes it feel like the snake has crashed heavily, and communicates quite effectively that the game is over. Finally, we call `respawn_all` to reset all the game objects.\n\nWe can use the same code to detect if the snake has hit itself – we just replace the `wall` tag with another `snake` tag:\n\n```javascript\nonCollide(\"snake\", \"snake\", (s, t) => {\n  run_action = false;\n  shake(12);\n  respawn_all();\n});\n```","metadata":{"id":707}}],["708",{"pageContent":"```javascript\nonCollide(\"snake\", \"snake\", (s, t) => {\n  run_action = false;\n  shake(12);\n  respawn_all();\n});\n```\n\nRunning the game now, and crashing into the wall should look something like this:\n\n![snake prang](https://docimg.replit.com/images/tutorials/21-snake-kaboom/snake-prang.gif)\n\nCongratulations! You've finished creating Snake in Kaboom.js!\n\n## Improving the Graphics\n\nWe have a working snake game, but it does look a bit bland. Kaboom.js has good support for [_sprites_](https://en.wikipedia.org/wiki/Sprite_%28computer_graphics%29), which are small pictures used to represent game objects and characters. Replit also has built-in management and loading of sprites for Kaboom.js to take care of the overhead in using sprites.\n\nUsing sprites, let's give the snake something nicer to eat than a green block. Right click and select \"Save image as\" on the pizza slice below, and save it to your computer. Then, in Replit, click the upload button next to \"Sprites\" and upload the pizza to your repl.\n\n![pizza](https://docimg.replit.com/images/tutorials/21-snake-kaboom/pizza.png)\n\n![add pizza sprite](https://docimg.replit.com/images/tutorials/21-snake-kaboom/add-pizza-sprite.gif)\n\nNow, we can update the `respawn_food` function to use this sprite, instead of drawing a green block. Remove the lines `rect` and `color`, and replace with a call to add the pizza sprite, like this:\n\n```javascript\nfunction respawn_food() {\n  let new_pos = rand(vec2(1, 1), vec2(13, 13));\n  new_pos.x = Math.floor(new_pos.x);\n  new_pos.y = Math.floor(new_pos.y);\n  new_pos = new_pos.scale(block_size);\n\n  if (food) {\n    destroy(food);\n  }\n  food = add([sprite(\"pizza\"), pos(new_pos), area(), \"food\"]);\n}\n```","metadata":{"id":708}}],["709",{"pageContent":"new_pos.y = Math.floor(new_pos.y);\n  new_pos = new_pos.scale(block_size);\n\n  if (food) {\n    destroy(food);\n  }\n  food = add([sprite(\"pizza\"), pos(new_pos), area(), \"food\"]);\n}\n```\n\nWe can also update the background to be more interesting. To do this, we can make use of Kaboom.js' [layers](https://kaboomjs.com/doc#layers) concept. This allows us to create different graphic layers, for example one for a static background image, another one for the active game objects over that, and another top layer for stats and scores etc.\n\nWe'll create 2 layers, background and game, to support a background. Download and add the background grass image below to your repl as you did for the pizza slice:\n\n![background](https://docimg.replit.com/images/tutorials/21-snake-kaboom/background.png)\n\nNow, we can set up the layers and add the background grass. Add the following code to the top of the `main` file:\n\n```javascript\nlayers([\"background\", \"game\"], \"game\");\n\nadd([sprite(\"background\"), layer(\"background\")]);\n```\n\nThis sets up our 2 layers, and makes the `game` layer the default layer to draw on. Whenever we call [`add`](https://kaboomjs.com/doc#add), we can optionally specify a layer to put the object on – if we don't specify a layer, it uses whatever we set as default in the call to [`layers`](https://kaboomjs.com/doc#layers). Then we add our background sprite to the background layer.\n\nNext, we can update the boundaries to look a bit better. Recall that in our map we add with [`addLevel`](https://kaboomjs.com/doc#addLevel), each different symbol we use can map to a different game object. Using this, we can create a good looking border fence, with different elements for each side and corners. Download the following 8 sprites as before, and upload them to your repl:\n\n![fence bottom](https://docimg.replit.com/images/tutorials/21-snake-kaboom/fence-bottom.png)\n\n![fence left](https://docimg.replit.com/images/tutorials/21-snake-kaboom/fence-left.png)","metadata":{"id":709}}],["710",{"pageContent":"![fence bottom](https://docimg.replit.com/images/tutorials/21-snake-kaboom/fence-bottom.png)\n\n![fence left](https://docimg.replit.com/images/tutorials/21-snake-kaboom/fence-left.png)\n\n![fence right](https://docimg.replit.com/images/tutorials/21-snake-kaboom/fence-right.png)\n\n![fence top](https://docimg.replit.com/images/tutorials/21-snake-kaboom/fence-top.png)\n\n![post bottom left](https://docimg.replit.com/images/tutorials/21-snake-kaboom/post-bottom-left.png)\n\n![post bottom right](https://docimg.replit.com/images/tutorials/21-snake-kaboom/post-bottom-right.png)\n\n![post top left](https://docimg.replit.com/images/tutorials/21-snake-kaboom/post-top-left.png)\n\n![post top right](https://docimg.replit.com/images/tutorials/21-snake-kaboom/post-top-right.png)\n\nNow, we can update the level map to use these. Replace the previous `addLevel` code with the following code:\n\n```javascript\nconst map = addLevel(\n  [\n    \"1tttttttttttt2\",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"l            r \",\n    \"3bbbbbbbbbbbb4\",\n  ],\n  {\n    width: block_size,\n    height: block_size,\n    pos: vec2(0, 0),\n    t: () => [sprite(\"fence-top\"), area(), \"wall\"],\n    b: () => [sprite(\"fence-bottom\"), area(), \"wall\"],\n    l: () => [sprite(\"fence-left\"), area(), \"wall\"],\n    r: () => [sprite(\"fence-right\"), area(), \"wall\"],\n    1: () => [sprite(\"post-top-left\"), area(), \"wall\"],\n    2: () => [sprite(\"post-top-right\"), area(), \"wall\"],\n    3: () => [sprite(\"post-bottom-left\"), area(), \"wall\"],\n    4: () => [sprite(\"post-bottom-right\"), area(), \"wall\"],\n  }\n);\n```\n\nThe last thing is to upgrade the snake itself. Download the skin below, and upload to the repl as before.\n\n![snake skin](https://docimg.replit.com/images/tutorials/21-snake-kaboom/snake-skin.png)","metadata":{"id":710}}],["711",{"pageContent":");\n```\n\nThe last thing is to upgrade the snake itself. Download the skin below, and upload to the repl as before.\n\n![snake skin](https://docimg.replit.com/images/tutorials/21-snake-kaboom/snake-skin.png)\n\nWe create snake pieces in 2 places: in the `respawn_snake` function, and in the draw loop. Update both to use the snake skin sprite instead of a blue block. The `respawn_snake` function should look like this:\n\n```javascript\nfunction respawn_snake() {\n  snake_body.forEach((segment) => {\n    destroy(segment);\n  });\n  snake_body = [];\n  snake_length = 3;\n\n  for (let i = 1; i <= snake_length; i++) {\n    snake_body.push(\n      add([\n        sprite(\"snake-skin\"),\n        pos(block_size, block_size * i),\n        area(),\n        \"snake\",\n      ])\n    );\n  }\n  current_direction = directions.RIGHT;\n}\n```\n\nIn the loop callback, the updated code for adding a new snake segment to the body should now look like this:\n\n```javascript\nsnake_body.push(\n  add([\n    sprite(\"snake-skin\"),\n    pos(snake_head.pos.x + move_x, snake_head.pos.y + move_y),\n    area(),\n    \"snake\",\n  ])\n);\n```\n\nBefore we run the game we need to load the sprites that we made reference to in the code snippets above. Add the following code, below the line `kaboom();` to load the sprites and make them available in the game:\n\n```javascript\nloadSprite(\"background\", \"sprites/background.png\");\nloadSprite(\"fence-top\", \"sprites/fence-top.png\");\nloadSprite(\"fence-bottom\", \"sprites/fence-bottom.png\");\nloadSprite(\"fence-left\", \"sprites/fence-left.png\");\nloadSprite(\"fence-right\", \"sprites/fence-right.png\");\nloadSprite(\"post-top-left\", \"sprites/post-top-left.png\");\nloadSprite(\"post-top-right\", \"sprites/post-top-right.png\");\nloadSprite(\"post-bottom-left\", \"sprites/post-bottom-left.png\");\nloadSprite(\"post-bottom-right\", \"sprites/post-bottom-right.png\");\nloadSprite(\"snake-skin\", \"sprites/snake-skin.png\");\nloadSprite(\"pizza\", \"sprites/pizza.png\");\n```\n\nIf you run the game now, you should see it looking much better!","metadata":{"id":711}}],["712",{"pageContent":"loadSprite(\"snake-skin\", \"sprites/snake-skin.png\");\nloadSprite(\"pizza\", \"sprites/pizza.png\");\n```\n\nIf you run the game now, you should see it looking much better!\n\n![game functionality](https://docimg.replit.com/images/tutorials/21-snake-kaboom/updated-graphic.gif)\n\n## Things to Try\n\nThere is a lot of good functionality in [Kaboom.js](https://kaboomjs.com/) to try out, and make the game more entertaining. Here are some suggestions:\n\n- Create a 2 player version.\n- Add obstacles for the snake.\n- Incrementally speed up the game as it goes on, to make it harder. You can do this by adjusting the delay parameter of the `loop` function as the game progresses.\n- Add [sound effects](https://kaboomjs.com/doc#play) and background music.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/snake-kaboom?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":712}}],["713",{"pageContent":"---\ntitle: Space Invaders with Kaboom.js\n---\n\n# Building _Space Invaders_ with Kaboom.js\n\n_Space Invaders_ is a classic shoot 'em up arcade game created by Taito Corporation in Japan way back in 1978. It was an absolute monster hit, making nearly $4 billion in sales (that's the equivalent of over $13 billion today)!\n\nLater, Atari released a clone of _Space Invaders_ on the Atari 2600 home system. It was a great success, and meant that people could play _Space Invaders_ on their home systems, instead of on an arcade machine. _Space Invaders_ is pretty embedded in pop culture these days, and you might even find [_Space Invaders_ mosaic and graffiti on the streets](https://theculturetrip.com/europe/france/paris/articles/everything-you-need-to-know-about-the-street-artist-invader/)!\n\nOf course, _Space Invaders_ was such a popular game, there were many clones and variations. Let's make our own version using [Kaboom](https://kaboomjs.com) and [Replit](https://replit.com).\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/gameplay.mp4\" type=\"video/mp4\">\n</video>\n\n## Game mechanics\n\n_Space Invaders_ features alien enemies that move across the screen from one side to the other in a grid formation. The player moves left and right along the bottom of the screen and shoots at the aliens from below. Once the aliens reach the end of the screen, they move down one row and start moving in the opposite direction. In this way, the aliens get closer and closer to the player. Shooting an alien will destroy it and score points for the player. The aliens in the bottom row can shoot downwards towards the player.\n\nIf the player gets shot, they lose a life. Players have three lives, and the game ends when they run out of lives.\n\nWhen the aliens reach the bottom of the screen, the game is immediately over, as the alien invasion was a success! To win, the player has to destroy all the aliens before they reach the bottom of the screen.","metadata":{"id":713}}],["714",{"pageContent":"## Getting started on Replit\n\nHead over to [Replit](https://replit.com/) and create a new repl, using \"Kaboom\" as the template. Name it something like \"Space Invaders\", and click \"Create Repl\".\n\n![Creating a new repl](https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/newrepl.png)\n\nAfter the repl has booted up, you should see a `main.js` file under the \"Scenes\" section. This is where we'll start coding. It already has some code in it, but we'll replace that.\n\nDownload [this archive of sprites and asset files](https://tutorial-files.util.repl.co/space-invaders-kaboom/space-invaders-resources.zip) we'll need for the game, and unzip them on your computer. In the Kaboom editor, click the \"Files\" icon in the sidebar. Now drag and drop all the sprite files (image files) into the \"sprites\" folder. Once they have uploaded, you can click on the \"Kaboom\" icon in the sidebar, and return to the \"main\" code file.\n\n<video controls width=\"50%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/uploadassets.mp4\" type=\"video/mp4\">\n</video>\n\n## Setting up Kaboom\n\nFirst we need to initialize Kaboom. In the \"main\" code file, delete all the example code. Now we can add a reference to Kaboom, and initialize it:\n\n```js\nimport kaboom from \"kaboom\";\n\nkaboom({\n  background: [0, 0, 0],\n  width: 800,\n  height: 600,\n  scale: 1,\n  debug: true,\n});\n```\n\nWe initialize Kaboom with a black background (`[0, 0, 0]`), a width of 800 pixels, a height of 600 pixels, and a scale of 1. We also set `debug` to `true`, so we can access Kaboom diagnostics and info as we are developing. You can bring up the Kaboom debug info in the game by pressing \"F1\".\n\n## Importing sprites and other game assets","metadata":{"id":714}}],["715",{"pageContent":"## Importing sprites and other game assets\n\nKaboom can import sprites in many different formats. We'll use the `.png` format, along with the Kaboom [`loadSpriteAtlas`](https://kaboomjs.com/#loadSpriteAtlas) function. This function allows us to tell Kaboom how to load a _sprite sheet_. A sprite sheet is an image with multiple frames of a sprite animation in it. We'll use sprite sheets for the aliens, so we can have a \"move\" animation when the aliens move, and an \"explosion\" animation for when the aliens are destroyed.\n\nSimilarly, we'll use a sprite sheet for the player's ship, so that we can animate an explosion when the player is destroyed.\n\nThis is what the two sprite sheets look like, for the aliens and the player:\n\n![Alien sprite sheet](https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/alien-sprite.png)\n![Player sprite sheet](https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/player-sprite.png)\n\nWe need to describe how to use each of the images in the sprite sheets. Kaboom's [`loadSpriteAtlas`](https://kaboomjs.com/#loadSpriteAtlas) function accepts an object describing all these details. Add the following code to the \"main\" code file:\n\n```js\nloadRoot(\"sprites/\");\nloadSpriteAtlas(\"alien-sprite.png\", {\n  alien: {\n    x: 0,\n    y: 0,\n    width: 48,\n    height: 12,\n    sliceX: 4,\n    sliceY: 1,\n    anims: {\n      fly: { from: 0, to: 1, speed: 4, loop: true },\n      explode: { from: 2, to: 3, speed: 8, loop: true },\n    },\n  },\n});\n\nloadSpriteAtlas(\"player-sprite.png\", {\n  player: {\n    x: 0,\n    y: 0,\n    width: 180,\n    height: 30,\n    sliceX: 3,\n    sliceY: 1,\n    anims: {\n      move: { from: 0, to: 0, speed: 4, loop: false },\n      explode: { from: 1, to: 2, speed: 8, loop: true },\n    },\n  },\n});\n```\n\nThe first call, `loadRoot`, tells Kaboom which directory to use as default for loading sprites – this is just easier than typing out the full root for each asset when we load it.","metadata":{"id":715}}],["716",{"pageContent":"},\n  },\n});\n```\n\nThe first call, `loadRoot`, tells Kaboom which directory to use as default for loading sprites – this is just easier than typing out the full root for each asset when we load it.\n\nThen we load the sprite sheets. The first argument is the path to the sprite sheet, and the second argument is an object describing how to use the sprite sheet. The object has a key for each sprite in the sprite sheet, and the value is another object describing how to use that sprite. Let's take a look at the keys we've used:\n\n- `x` and `y` describe where the sprites start, by specifying the top left corner of the sprite.\n- `width` and `height` describe the size of the sprite.\n- `sliceX` and `sliceY` describe how many sprites are in each row and column of the sprite sheet. We have four separate sprites in the `x` direction in the alien file, and three in the player file.\n- `anims` is an object that describes the animation for each sprite. Here we use the names of the animations for the keys, and the values are objects describing the animation.\n- `from` and `to` describe the index of the first and last frames of the animation.\n- `speed` is how many frames to show per second.\n- `loop` is a boolean that tells Kaboom if the animation should loop, or only play once.\n\n## Making a scene\n\n[Scenes](https://kaboomjs.com/#scene) are like different stages in a Kaboom game. Generally, there are three scenes in games:\n\n- The intro scene, which gives some info and instructions, and waits for the player to press \"start\".\n- The main game, where we play.\n- An endgame, or game over scene, which gives the player their score or overall result, and allows them to start again.\n\nFor this tutorial, we'll omit the intro scene, since we already know what _Space Invaders_ is and how to play it. You might like to add your own intro scene in later!\n\n![game scenes](https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/game-scenes.png)\n\nLet's add the code for defining each scene:\n\n```js\nscene(\"game\", () => {","metadata":{"id":716}}],["717",{"pageContent":"![game scenes](https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/game-scenes.png)\n\nLet's add the code for defining each scene:\n\n```js\nscene(\"game\", () => {\n  // todo.. add scene code here\n});\n\nscene(\"gameOver\", (score) => {\n  // todo.. add scene code here\n});\n\ngo(\"game\");\n```\n\nNotice in the `\"gameOver\"` scene definition, we add a custom parameter: `score`. This is so we can pass the player's final score to the end game scene to display it.\n\nTo start the whole game off, we use the [`go`](https://kaboomjs.com/#go) function, which switches between scenes.\n\n## Adding the player object\n\nNow that we have the main structure and overhead functions out of the way, let's start adding in the characters that make up the _Space Invaders_ world. In Kaboom, characters are anything that makes up the game world, including floor, platforms, and so on, not only the players and bots. They are also known as \"game objects\".\n\nLet's add in our player object. Add this code to the `\"game\"` scene:\n\n```js\nconst player = add([\n  sprite(\"player\"),\n  scale(1),\n  origin(\"center\"),\n  pos(50, 550),\n  area(),\n  {\n    score: 0,\n    lives: 3,\n  },\n  \"player\",\n]);\n\nplayer.play(\"move\");\n```\n\nThis uses the [`add`](https://kaboomjs.com/#add) function to add a new character to the scene. The `add` function takes an array (`[ ]`) of components that make up the look and behavior of a game character. In Kaboom, every character is made up of one or more components. Components give special properties to each character. There are built-in components for many properties, like:\n\n- [`sprite`](https://kaboomjs.com/#sprite), to give the character an avatar.\n- [`pos`](https://kaboomjs.com/#pos), to specify the starting position of the object and give it functionality like movement.\n- [`origin`](https://kaboomjs.com/#origin), to specify whether `pos` uses the object's center or one of the corners.","metadata":{"id":717}}],["718",{"pageContent":"- [`origin`](https://kaboomjs.com/#origin), to specify whether `pos` uses the object's center or one of the corners.\n\nKaboom also allows us to add custom properties to a game object. For the player, we add in their score and number of lives remaining as custom properties. This makes it simple to keep track of these variables without using global variables.\n\nWe can also add a `tag` to the game objects. This is not too useful on the player object, but it will be very useful on the alien objects. The tag will allow us to select and manipulate a group of objects at once, like selecting and moving all aliens.\n\n## Adding the aliens\n\nIn _Space Invaders_, the aliens operate as a unit in a tightly formed grid. They all move in sync with each other. This is what that looks like:\n\n![alien grid](https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/alien-grid.png)\n\nTo create this grid, we could add each alien one at a time, but that would be a lot of code. Instead, we can use a [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop to cut down on the amount of code we need to write. We just need to decide how many rows and columns of aliens we want.\n\nLet's create two constants for the number of rows and columns of aliens. Add this code to top of the \"main\" file:\n\n```js\nconst ALIEN_ROWS = 5;\nconst ALIEN_COLS = 6;\n```\n\nWe also need to specify the size of each \"block\" of the grid. Add these constants under the rows and columns we added above:\n\n```js\nconst BLOCK_HEIGHT = 40;\nconst BLOCK_WIDTH = 32;\n```\n\nThe last constants we need are to determine how far from the top and left side the alien block should start. Add these below the block-size constants:\n\n```js\nconst OFFSET_X = 208;\nconst OFFSET_Y = 100;\n```","metadata":{"id":718}}],["719",{"pageContent":"The last constants we need are to determine how far from the top and left side the alien block should start. Add these below the block-size constants:\n\n```js\nconst OFFSET_X = 208;\nconst OFFSET_Y = 100;\n```\n\nNow we can use the [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop to add each alien. We'll use an _outer_ [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop to run through each row, and then we'll use an _inner_ [`for`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop to add the aliens in columns, in this type of pattern:\n\n```\n  for each row       // Loop through each row\n    for each column  // Loop through each column\n      add alien      // Add an alien at position [row,column]\n```\n\nWe'll also keep a reference to each alien in a 2D array. This will be useful later, when we need to choose an alien to shoot at the player.\n\nNow, let's translate that to actual code. Add the following code to the `\"game\"` scene:\n\n```js\nlet alienMap = [];\nfunction spawnAliens() {\n  for (let row = 0; row < ALIEN_ROWS; row++) {\n    alienMap[row] = [];\n    for (let col = 0; col < ALIEN_COLS; col++) {\n      const x = col * BLOCK_WIDTH * 2 + OFFSET_X;\n      const y = row * BLOCK_HEIGHT + OFFSET_Y;\n      const alien = add([\n        pos(x, y),\n        sprite(\"alien\"),\n        area(),\n        scale(4),\n        origin(\"center\"),\n        \"alien\",\n        {\n          row: row,\n          col: col,\n        },\n      ]);\n      alien.play(\"fly\");\n      alienMap[row][col] = alien;\n    }\n  }\n}\nspawnAliens();\n```\n\nThis code adds the function `spawnAliens` to the `\"game\"` scene. We implement the double for loop in the function, and add the aliens to the scene.","metadata":{"id":719}}],["720",{"pageContent":"}\n  }\n}\nspawnAliens();\n```\n\nThis code adds the function `spawnAliens` to the `\"game\"` scene. We implement the double for loop in the function, and add the aliens to the scene.\n\nWe use the constants we defined earlier to calculate where to add each alien. We also add a custom property to each alien called `row` and `col`. This is so we can easily access which row and column the alien is in when we query it later. Our 2D array, `alienMap`, is where we store a reference to each alien at indices `row` and `col`. There is some code to initialise each row of the array after the first for loop.\n\nWe also call `alien.play(\"fly\")`, which tells Kaboom to run the `\"fly\"` animation on the alien. If you look at the `loadSpriteAtlas` call for the `alien` sprite, you'll see that it defines the `\"fly\"` animation, which switches between the first two frames of the sprite sheet.\n\nThen we call the `spawnAliens` function to add the aliens to the scene.\n\nIf you run the game, you should see a block of animated aliens and the blue player block at the bottom of the screen, like this:\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/added-characters.mp4\" type=\"video/mp4\">\n</video>\n\n## Moving the player\n\nThe next step is adding controls to move the player around the screen. Kaboom has the useful [`onKeyDown`](https://kaboomjs.com/#onKeyDown) function that we can use to call a handler when specified keys are pressed. When we added the [`pos`](https://kaboomjs.com/#pos) component to our player, it added methods to [`move`](https://kaboomjs.com/#move) the player. We'll use these functions to add this move-handling code to the `\"game\"` scene:\n\n```js\nlet pause = false;\nonKeyDown(\"left\", () => {\n  if (pause) return;\n  if (player.pos.x >= SCREEN_EDGE) {\n    player.move(-1 * PLAYER_MOVE_SPEED, 0);\n  }\n});\n\nonKeyDown(\"right\", () => {\n  if (pause) return;\n  if (player.pos.x <= width() - SCREEN_EDGE) {\n    player.move(PLAYER_MOVE_SPEED, 0);\n  }\n});\n```","metadata":{"id":720}}],["721",{"pageContent":"player.move(-1 * PLAYER_MOVE_SPEED, 0);\n  }\n});\n\nonKeyDown(\"right\", () => {\n  if (pause) return;\n  if (player.pos.x <= width() - SCREEN_EDGE) {\n    player.move(PLAYER_MOVE_SPEED, 0);\n  }\n});\n```\n\nYou'll notice that we use two constants:\n\n- `SCREEN_EDGE`, which provides a margin before the player gets right to the edge of the screen, and\n- `PLAYER_MOVE_SPEED`, which is the speed at which the player moves.\n\nAdd the two constants at the top of the \"main\" file, along with the other constants:\n\n```js\nconst PLAYER_MOVE_SPEED = 500;\nconst SCREEN_EDGE = 100;\n```\n\nYou'll also notice that we have a `pause` variable. We'll use this later on to prevent the player from moving when they have been shot.\n\nIf you run the game now, you'll be able to move the player left and right on the screen.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/moving.mp4\" type=\"video/mp4\">\n</video>\n\n## Moving the aliens\n\nThe next step is to make the aliens move. In _Space Invaders_, the aliens move from one side of the screen to the other. When they reach either end of the screen, they move down a row, and start moving in the opposite direction.\n\nFor this, we'll need a few flags to determine where we are in the sequence. Add these to the `\"game\"` scene:\n\n```js\nlet alienDirection = 1;\nlet alienMoveCounter = 0;\nlet alienRowsMoved = 0;\n```\n\nWe use `alienDirection` as a flag that can be either 1 or -1. It controls if the aliens move left or right. We use `alienMoveCounter` to track how many places the aliens have moved over in the current direction. When this counter reaches a certain value, we'll switch the alien direction and move them all down a row. We use `alienRowsMoved` to track how many rows down the aliens have moved. When they have moved down a certain number of rows and reach the ground, we'll end the game.","metadata":{"id":721}}],["722",{"pageContent":"We'll also need a few constants that hold the speed the aliens should move at, how many columns the aliens should move before switching directions, and how many rows the aliens can move before reaching the ground. Add these along with the other constants:\n\n```js\nconst ALIEN_SPEED = 15;\nconst ALIEN_STEPS = 322;\nconst ALIEN_ROWS_MOVE = 7;\n```\n\nSince the aliens should move automatically, without the player pressing a key, we need a way to call our code to move the aliens every frame. Kaboom has a function [`onUpdate`](https://kaboomjs.com/#onUpdate) that we can use. Add the following code to the `\"game\"` scene:\n\n```js\nonUpdate(() => {\n  if (pause) return;\n\n  every(\"alien\", (alien) => {\n    alien.move(alienDirection * ALIEN_SPEED, 0);\n  });\n\n  alienMoveCounter++;\n\n  if (alienMoveCounter > ALIEN_STEPS) {\n    alienDirection = alienDirection * -1;\n    alienMoveCounter = 0;\n    moveAliensDown();\n  }\n\n  if (alienRowsMoved > ALIEN_ROWS_MOVE) {\n    pause = true;\n    player.play(\"explode\");\n    wait(2, () => {\n      go(\"gameOver\", player.score);\n    });\n  }\n});\n\nfunction moveAliensDown() {\n  alienRowsMoved++;\n  every(\"alien\", (alien) => {\n    alien.moveBy(0, BLOCK_HEIGHT);\n  });\n}\n```\n\nThis code has a number of parts. First, we check if the game is in the pause state. If it is, we don't want to do anything, so we return early. Then we use the Kaboom [`every`](https://kaboomjs.com/#every) function, which selects game objects with a given tag, and runs the given function on each one. In this case, we're selecting all aliens and using [`move`](https://kaboomjs.com/#move) to move them across the screen, at the speed and direction specified by our direction flag.","metadata":{"id":722}}],["723",{"pageContent":"Then we update the `alienMoveCounter` and check if it has reached the value of `ALIEN_STEPS`. If it has, we switch the direction of the aliens and reset the counter. We also call a helper function `moveAliensDown` to move the aliens down a row. Note that in the `moveAliensDown` function, we also select all aliens using the [`every`](https://kaboomjs.com/#every) function. This time, we make use of the `moveBy` function, which moves the aliens by a given amount. The difference between the [`move`](https://kaboomjs.com/#move) and `moveBy` functions is that `move` parameters specify pixels per second, while `moveBy` specifies the total number of pixels to move by.\n\nFinally, we check if the aliens have moved down more than `ALIEN_ROWS_MOVE`. If they have, we end the game. When the game ends, we change the player sprite to play the `explode` animation, which plays the last two frames of the sprite sheet. We also wait for two seconds before calling the `go` function to go to the `\"gameOver\"` scene, passing in the player's score so it can be shown to the player.\n\n## Firing bullets\n\nNow our game characters can all move around. Let's add in some shooting. In _Space Invaders_, the player shoots up to the aliens. There should be a \"reload\" time between shots, so that the player can't just hold down the fire button and machine-gun all the aliens. That would make the game too easy, and therefore boring. To counter that, we'll need to keep track of when the last bullet was fired and implement a short \"cooldown\" period before the player can shoot again. We'll use the [`onKeyDown`](https://kaboomjs.com/#onKeyDown) function to connect pressing the space bar to our shooting code. Add the following code to the `\"game\"` scene:\n\n```js\nlet lastShootTime = time();\n\nonKeyPress(\"space\", () => {\n  if (pause) return;\n  if (time() - lastShootTime > GUN_COOLDOWN_TIME) {\n    lastShootTime = time();\n    spawnBullet(player.pos, -1, \"bullet\");\n  }\n});\n\nfunction spawnBullet(bulletPos, direction, tag) {\n  add([","metadata":{"id":723}}],["724",{"pageContent":"if (time() - lastShootTime > GUN_COOLDOWN_TIME) {\n    lastShootTime = time();\n    spawnBullet(player.pos, -1, \"bullet\");\n  }\n});\n\nfunction spawnBullet(bulletPos, direction, tag) {\n  add([\n    rect(2, 6),\n    pos(bulletPos),\n    origin(\"center\"),\n    color(255, 255, 255),\n    area(),\n    cleanup(),\n    \"missile\",\n    tag,\n    {\n      direction,\n    },\n  ]);\n}\n```\n\nYou'll see in the code above that we have a helper function, `spawnBullet`, that handles creating a bullet. It has some parameters, like the starting position of the bullet `bulletPos`, the direction it should move in `direction`, and the tag to give the bullet. The reason this is in a separate function is so that we can re-use it for the aliens' bullets when we make them shoot. Notice that we use Kaboom's [`cleanup`](https://kaboomjs.com/#cleanup) component to automatically remove the bullet when it leaves the screen. That is super useful, because once a bullet leaves the screen, we don't want Kaboom spending resources updating it every frame. With hundreds of bullets on the screen, this can be a performance killer.\n\nWe also use the constant `GUN_COOLDOWN_TIME` to test if the player can shoot again. This is the time in seconds between shots. Add this constant to the other constants we have used:\n\n```js\nconst GUN_COOLDOWN_TIME = 1;\n```\n\nTo check the gun cooldown time, we use the Kaboom [`time`](https://kaboomjs.com/#time) function. The `time` function returns the time since the game started in seconds. Whenever the player shoots, we record the time in `lastShootTime`. Then, each time the player presses the space bar, we check if the time since the last shot is greater than `GUN_COOLDOWN_TIME`. If it is, we can shoot again. If it isn't, we can't shoot again. This way we can make sure the player needs to smash the fire button to get a rapid fire.","metadata":{"id":724}}],["725",{"pageContent":"The code above handles the player pressing the fire button, the space bar, and spawning a bullet. This bullet will just be stationary until we add in some movement for it each frame. We've given each bullet spawned a tag called `missile` so that we'll be able to select it later. We also added a custom property `direction` to the bullet. Using those properties, we can move the bullet in the direction it should move using this code:\n\n```js\nonUpdate(\"missile\", (missile) => {\n  if (pause) return;\n  missile.move(0, BULLET_SPEED * missile.direction);\n});\n```\n\nThe [`onUpdate`](https://kaboomjs.com/#onUpdate) function has an option to take a tag to select the game objects to update each frame. In this case, we're updating all bullets. We also have a constant `BULLET_SPEED` that specifies the speed of the bullets. Add this constant to the other constants:\n\n```js\nconst BULLET_SPEED = 300;\n```\n\nIf you run the game now, you should be able to shoot bullets. They won't kill the aliens yet. We'll add that next.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/shooting.mp4\" type=\"video/mp4\">\n</video>\n\n## Bullet collisions with aliens\n\nNow that we have bullets and they move, we need to add collision detection and handling code to check when the bullet hits an alien. For this, we can use the Kaboom [`onCollide`](https://kaboomjs.com/#onCollide) function. First add the constant below to the other constants:\n\n```js\nconst POINTS_PER_ALIEN = 100;\n```\n\nThen add the following code to the `\"game\"` scene:\n\n```js\nonCollide(\"bullet\", \"alien\", (bullet, alien) => {\n  destroy(bullet);\n  alien.play(\"explode\");\n  alien.use(lifespan(0.5, { fade: 0.1 }));\n  alienMap[alien.row][alien.col] = null; // Mark the alien as dead\n  updateScore(POINTS_PER_ALIEN);\n});\n```","metadata":{"id":725}}],["726",{"pageContent":"destroy(bullet);\n  alien.play(\"explode\");\n  alien.use(lifespan(0.5, { fade: 0.1 }));\n  alienMap[alien.row][alien.col] = null; // Mark the alien as dead\n  updateScore(POINTS_PER_ALIEN);\n});\n```\n\nIn this function, we pass the tags for the `bullet` and `alien` in to `onCollide`, so that our handler is fired whenever these two types of objects collide on the screen. First we call Kaboom's [`destroy`](https://kaboomjs.com/#destroy) function to destroy the bullet on the screen. Then we call the `play` function on the alien to play the `explode` animation. We also use the [`lifespan`](https://kaboomjs.com/#lifespan) function to make the alien fade out and disappear after a short period of time. Finally, we mark the alien as dead in the `alienMap` array, by setting its entry to null. This way, we can keep tabs on which aliens are still alive when we choose an alien to shoot back at the player.\n\nFinally, we call a helper method `updateScore` to add to the player's score, and update it on screen. We need a bit of code to get this part working - including adding text elements to the screen to show the score. Add the following code to the `\"game\"` scene:\n\n```js\nadd([\n  text(\"SCORE:\", { size: 20, font: \"sink\" }),\n  pos(100, 40),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nconst scoreText = add([\n  text(\"000000\", { size: 20, font: \"sink\" }),\n  pos(200, 40),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nfunction updateScore(points) {\n  player.score += points;\n  scoreText.text = player.score.toString().padStart(6, \"0\");\n}\n```","metadata":{"id":726}}],["727",{"pageContent":"pos(200, 40),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nfunction updateScore(points) {\n  player.score += points;\n  scoreText.text = player.score.toString().padStart(6, \"0\");\n}\n```\n\nFirst we add a text label for the score. We use the Kaboom [`text`](https://kaboomjs.com/#text) component to create a text element. Then we need a text element that shows the actual score. We add it the same way as the label, except this time we store a reference to this text element in `scoreText`. Then we have the helper function `updateScore`, which adds points to the player's score and updates the score text element. We use the `padStart` function to add leading zeros to the score, so that the score is always six digits long. This shows the player that it is possible to score a lot of points!\n\nIf you run the game now, you should be able to shoot at an alien, destroy it, and see your points increase.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/destroy-alien.mp4\" type=\"video/mp4\">\n</video>\n\n## The aliens fight back\n\nIt's not fair that only the player can shoot the aliens - we've got to give the aliens a chance to shoot back! Since we don't want the aliens to be shooting each other, we need to only allow aliens with a clear shot to the ground to be able to shoot. In other words, an alien that shoots must not have another alien in front of them. Recall that when we added the aliens, we created a 2D array that stores a reference to each alien. When an alien gets hit, we set the entry in the array to null. Therefore we can use this array to find an alien that has a clear shot to the ground to shoot at the player.\n\nTo make the aliens shoot at regular intervals, we'll use the Kaboom [`loop`](https://kaboomjs.com/#loop) function, which calls a function at a regular interval. Add the following code to the `\"game\"` scene:\n\n```js\n// Find a random alien to make shoot\nloop(1, () => {\n  if (pause) return;","metadata":{"id":727}}],["728",{"pageContent":"```js\n// Find a random alien to make shoot\nloop(1, () => {\n  if (pause) return;\n  // Randomly choose a column, then walk up from the\n  // bottom row until an alien that is still alive is found\n\n  let row, col;\n  col = randi(0, ALIEN_COLS);\n  let shooter = null;\n\n  // Look for the first alien in the column that is still alive\n  for (row = ALIEN_ROWS - 1; row >= 0; row--) {\n    shooter = alienMap[row][col];\n    if (shooter != null) {\n      break;\n    }\n  }\n  if (shooter != null) {\n    spawnBullet(shooter.pos, 1, \"alienBullet\");\n  }\n});\n```\n\nFirst, we check if we are in a paused state - if so, we get out early. If not, our task is to randomly choose an alien that has a clear shot at the ground. To do this, we use this logic:\n\n- Choose a random column in the alien map.\n- Walk up the rows from the bottom until we find an alien that is still alive.\n- If we find an alien, we can use it as the shooter.\n- If we successfully find a shooter, spawn a bullet at the shooter's position, and tag it as an alien bullet.\n\nThis way, there is no pattern that the player can learn to outsmart the aliens.\n\nIf you run the game now, you should see a random alien shoot at the player every second.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/41-space-invaders-kaboom/aliens-shooting.mp4\" type=\"video/mp4\">\n</video>\n\n## Bullet collisions with the player\n\nNow that the aliens can shoot, we can add code to determine if one of their bullets hit the player. To do this, we can use the Kaboom [`onCollide`](https://kaboomjs.com/#onCollide) function again. Add the following code to the `\"game\"` scene:\n\n```js\nplayer.onCollide(\"alienBullet\", (bullet) => {\n  if (pause) return;\n  destroyAll(\"bullet\");\n  player.play(\"explode\");\n  updateLives(-1);\n  pause = true;\n  wait(2, () => {\n    if (player.lives == 0) {\n      go(\"gameOver\", player.score);\n    } else {\n      player.moveTo(50, 550);\n      player.play(\"move\");\n      pause = false;\n    }\n  });\n});\n```","metadata":{"id":728}}],["729",{"pageContent":"pause = true;\n  wait(2, () => {\n    if (player.lives == 0) {\n      go(\"gameOver\", player.score);\n    } else {\n      player.moveTo(50, 550);\n      player.play(\"move\");\n      pause = false;\n    }\n  });\n});\n```\n\nThis code is similar to the previous collision handler we added for bullets hitting aliens. There are a few difference though.\n\nFirst, we check if the game is in the pause state, and exit early from the function if it is. If not, then we destroy the bullet, as we don't want to display it anymore (it's stuck in the player!). Next, we use the `play` method to change the player sprite to the `explode` animation we defined in the `loadSpriteAtlas` call. We have a helper method, `updateLives`, similar to the one we used to update the score. We set the the `pause` flag to true to prevent the player or aliens from moving or shooting. After two seconds, using the [`wait`](https://kaboomjs.com/#wait) function, we either go to the end game screen (if the player has no more lives left) or reset the player to the start position (if the player still has lives) to allow the game to continue. Once the player has been reset, we set the `pause` flag to false and switch the player sprite back to the `move` animation.\n\nThe `updateLives` helper function needs a few UI elements, as we did for the score. Add the following code to add the lives text elements to the `\"game\"` scene:\n\n```js\nadd([\n  text(\"LIVES:\", { size: 20, font: \"sink\" }),\n  pos(650, 40),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nconst livesText = add([\n  text(\"3\", { size: 20, font: \"sink\" }),\n  pos(700, 40),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nfunction updateLives(life) {\n  player.lives += life;\n  livesText.text = player.lives.toString();\n}\n```\n\nThis code follows the same pattern as the score UI elements, so we won't go into details here.","metadata":{"id":729}}],["730",{"pageContent":"]);\n\nfunction updateLives(life) {\n  player.lives += life;\n  livesText.text = player.lives.toString();\n}\n```\n\nThis code follows the same pattern as the score UI elements, so we won't go into details here.\n\nWe made a call to the `\"gameOver\"` scene. At the moment, we just have a placeholder comment there. Let's add the code we need to show the final score and add the logic to start a new game. Add the following code to the `\"gameOver\"` scene:\n\n```js\nadd([\n  text(\"GAME OVER\", { size: 40, font: \"sink\" }),\n  pos(width() / 2, height() / 2),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nadd([\n  text(\"SCORE: \" + score, { size: 20, font: \"sink\" }),\n  pos(width() / 2, height() / 2 + 50),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nonKeyPress(\"space\", () => {\n  go(\"game\");\n});\n```\n\nIn the `\"gameOver\"` scene, we add a big, size 40 \"Game Over\" banner. The score is added below it, in smaller text. We also add a way to start a new game. We use the [`onKeyPress`](https://kaboomjs.com/#onKeyPress) function to listen for the space bar being pressed. When this happens, we call the `go` function to start the game again.\n\nAll the elements for the game are now defined. Give it a go, and see how you do!\n\n## Next steps\n\nThere are a number of things you can add to this game to make it more interesting.\n\n1. Once the player shoots all the aliens and wins, nothing happens. Try making the screen fill with more aliens, and make them move or shoot faster for each level the player reaches.\n2. Add some sound effects and music. Kaboom has the [`play`](https://kaboomjs.com/#play) function to play audio files. You can add effects for shooting, explosions, points scored, etc.\n3. Add different types of aliens. In many _Space Invaders_ versions, a \"boss\" ship flies across the top of the screen at random intervals. Shooting this ship gives the player lots of bonus points.\n4. Try giving the player a bonus life if they reach a certain score.\n\nWhat other features can you add to this game? Have fun, and happy coding!","metadata":{"id":730}}],["731",{"pageContent":"4. Try giving the player a bonus life if they reach a certain score.\n\nWhat other features can you add to this game? Have fun, and happy coding!\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Space-Invaders?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":731}}],["732",{"pageContent":"---\ntitle: Space Shooter with Kaboom.js\n---\n\n# Build a Space Shooter with Kaboom.js\n\nIn this tutorial, we'll build a space shooter game with a platformer feel. We'll use [Kaboom.js](https://kaboomjs.com) for the game engine, and we'll code it using [Replit](https://replit.com) online IDE (Integrated Development Environment).\n\nHere's how the game will look when we're done:\n\n![The finished game](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/gameplay.gif)\n\nYou can download this [zip file](https://tutorial-files.util.repl.co/space-shooter-kaboom/space-shooter-resources.zip) with all the sprites and sounds you'll need for this tutorial.\n\n## Game Design\n\nHere's what we're aiming for in this game:\n\n- Fast action: the player moves around a lot.\n- Good sound effects: to immerse the player in the game and contribute to the overall game vibe.\n- Lots of shooting opportunities.\n- Increasing challenge: the game gets harder and faster as the player gets better.\n\nIn our game, a player flies a spaceship around a faraway planet, collecting gems and dodging or shooting alien bugs that explode on contact. The spaceship will lose shield strength each time an alien bug hits it. With every 1000 points the player earns, the game gets faster and more bugs appear.\n\n## Creating a New Project on Replit\n\nLet's head over to [Replit](https://replit.com) and create a new repl. Choose **Kaboom** as your project type. Give this repl a name, like \"Space Shooter\".\n\n![Creating an Repl](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/create-repl.png)\n\nAfter the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding.\n\n## Getting Started with Kaboom.js","metadata":{"id":732}}],["733",{"pageContent":"After the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding.\n\n## Getting Started with Kaboom.js\n\n[Kaboom.js](https://kaboomjs.com) is a JavaScript library that contains a lot of useful features for making simple browser games. It has functionality to draw shapes and sprites (the images of characters and game elements) to the screen, get user input, play sounds, and more. We'll use some of these features in our game to explore how Kaboom works.\n\nThe Replit Kaboom interface is specialised for game-making. Besides the Space Invader icon, you'll notice a few special folders in the file tray, like \"Code\", \"Sprites\", and \"Sounds\". These special folders take care of loading up assets, and all the necessary code to start scenes and direct the game. You can read up more about this interface [here](/tutorials/kaboom/kaboom-editor).\n\nIf you haven't already, download this [zip file](https://tutorial-files.util.repl.co/space-shooter-kaboom/space-shooter-resources.zip) which contains all the sprites and sounds for the game. Extract the file on your computer, then add the sprites to the \"Sprites\" section in the Replit editor, and the sounds to the \"Sounds\" section.\n\n![Uploading assets](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/upload-sprites.gif)\n\nKaboom makes good use of JavaScript's support for [callbacks](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function): instead of writing loops to read keyboard input and check if game objects have collided, Kaboom uses an event model that tells us when these events have happened. We can then write [callback functions](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function) to act on these events.","metadata":{"id":733}}],["734",{"pageContent":"A Kaboom game is made up of \"scenes\", which are like levels, or different parts and stages of a game. Scenes have multiple \"layers\", allowing us to have game backgrounds, main game objects (like the player, bullets, enemies, etc), and UI elements (like the current score, health, etc).\n\n## Setting up Kaboom\n\nTo start, we need to set up Kaboom with the screen size and colors we want for the game window. Replace the code in `main.js` with the code below:\n\n```javascript\nimport kaboom from \"kaboom\";\n\nkaboom({\n  background: [0, 0, 0],\n  width: 440,\n  height: 275,\n  scale: 1.5,\n});\n```\n\nHere we import the kaboom library, and then initialize the context by calling `kaboom({ ... })`. We also set the size of the view to 440x275 pixels and `scale` the background by a factor of `1.5` on screen.\nNow, let's load up the sprites and sounds we will need in this game. This code loads each of the graphic elements we'll use, and gives them a name, so we can refer to them when we build the game characters:\n\n```javascript\nloadRoot(\"sprites/\");\nloadSprite(\"stars\", \"stars.png\");\nloadSprite(\"gem\", \"gem.png\");\nloadSprite(\"spaceship\", \"spaceship.png\");\nloadSprite(\"alien\", \"alien.png\");\n\nloadRoot(\"sounds/\");\nloadSound(\"shoot\", \"shoot.wav\");\nloadSound(\"score\", \"score.wav\");\nloadSound(\"music\", \"music.mp3\");\nloadSound(\"explosion\", \"explosion.wav\");\n```\n\nThe first line, [`loadRoot`](https://kaboomjs.com/#loadRoot), specifies which folder to load all the sprites and game elements from, so we don't have to keep typing it in for each sprite. Then each line loads a game sprite and gives it a name so that we can refer to it in code later. We use similar code to load the sounds we will need in this game, but instead of [`loadSprite`](https://kaboomjs.com/#loadSprite) we use [`loadSound`](https://kaboomjs.com/#loadSound) to load sounds.\n\n## Adding the main game scene\n\nKaboom [\"scenes\"](https://kaboomjs.com/#scene) allow us to group logic and levels together. In this game we'll have 2 scenes:","metadata":{"id":734}}],["735",{"pageContent":"## Adding the main game scene\n\nKaboom [\"scenes\"](https://kaboomjs.com/#scene) allow us to group logic and levels together. In this game we'll have 2 scenes:\n\n- A \"main\" scene, which will contain the game levels and all the logic to move the spaceship.\n- An \"endGame\" scene which will display when the game is over.\n\n```javascript\nscene(\"main\", () => {\n  layers([\"bg\", \"obj\", \"ui\"], \"obj\");\n\n  add([sprite(\"stars\"), layer(\"bg\")]);\n\n  // todo.. add main scene code here\n});\n\ngo(\"main\");\n```\n\nWe define the scene using the [`scene`](https://kaboomjs.com/#scene) function. This function takes a string as the scene name – we're calling the scene \"main\".\nThen we create 3 layers: \"background\" (`bg`), \"object\" (`obj`) and \"user interface\" (`ui`). The `obj` layer is set as the default layer. We then add the stars sprite to the background layer.\n\nFinally, we use the [`go`](https://kaboomjs.com/#go) function to go to the main scene when the game starts up.\n\n**Note** The code snippets in the sections that follow have to be added within the body of the main scene unless specified otherwise.\n\n## Creating the Game Map\n\nLet's get a scene layout, or _map_, drawn on the screen. This will define the ground and platforms in the game.\n\nKaboom has built-in support for defining game maps using text and the function [`addLevel`](https://kaboomjs.com/doc#addLevel). This takes away a lot of the hassle normally involved in loading and rendering maps.\n\nThe code below creates the game map. Add it to the `main.js` file, within the main scene (below the code to add the stars sprite to the background layer).\n\n```javascript\n// Game Parameters\nconst MAP_WIDTH = 440;\nconst MAP_HEIGHT = 275;\nconst BLOCK_SIZE = 11;\n\nconst map = addLevel(\n  [\n    \"--------------------------------------------\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",","metadata":{"id":735}}],["736",{"pageContent":"\"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                pppppp    -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-   pppppp                                 -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                 pppppp                   -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"-                                          -\",\n    \"============================================\",\n    \"                                            \",\n  ],\n  {\n    width: BLOCK_SIZE,\n    height: BLOCK_SIZE,\n    pos: vec2(0, 0),\n    \"=\": () => [\n      rect(BLOCK_SIZE, BLOCK_SIZE),\n      color(150, 75, 0),\n      \"ground\",\n      area(),\n      solid(),\n    ],\n    p: () => [\n      rect(BLOCK_SIZE, BLOCK_SIZE),\n      color(0, 0, 255),\n      \"platform\",\n      area(),\n      solid(),\n    ],\n    \"-\": () => [\n      rect(BLOCK_SIZE / 10, BLOCK_SIZE),\n      color(0, 0, 0),\n      \"boundary\",\n      area(),\n      solid(),\n    ],\n  }\n);\n```\n\nFirst, we add some game parameters, which we'll use when we define the size of the map, and the default block size for map elements.","metadata":{"id":736}}],["737",{"pageContent":"\"boundary\",\n      area(),\n      solid(),\n    ],\n  }\n);\n```\n\nFirst, we add some game parameters, which we'll use when we define the size of the map, and the default block size for map elements.\n\nNext, we create the game map. The map, or level design, is expressed in an array of strings. Each row in the array represents one row on the screen, so we can design visually in text what the map should look like. The width and height parameters specify the size of each of the elements in the map. The `pos` parameter specifies where on the screen the map should be placed – we chose `0,0`, which is the top left of the screen, as the starting point for the map.\n\nKaboom allows us to specify what to draw for each symbol in the text map. You can make maps out of different elements, e.g. a symbol for a wall, a symbol for ground, a symbol for a hump, and so on. To tell Kaboom what to draw for the symbol, we add the symbol as a key, for example `=`, and then specify parameters for it.\n\nIn this code, we have 3 different type of fixed map elements: `=` representing the ground, `p` representing platforms, and `-` representing the invisible boundaries of the screen. Each of the map elements has a tag (`ground`, `platform`, `boundary`) which is the string name grouping the individual pieces together. This allows us to refer to them collectively later.\n\nIf we run the code, we should see the game map, like this:\n\n![Game map](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/game-map.png)\n\n## Adding the Spaceship\n\nLet's add the spaceship using the [`add`](https://kaboomjs.com/doc#add) function:\n\n```javascript\nconst player = add([\n  sprite(\"spaceship\"),\n  pos(100, 200),\n  body(),\n  area(),\n  scale(1),\n  rotate(0),\n  origin(\"center\"),\n  \"player\",\n  {\n    score: 0,\n    shield: 100,\n  },\n]);\n```\n\nThe [`add`](https://kaboomjs.com/doc#add) function constructs a game object using different components, e.g. `pos`, `body`, `scale`, etc. Each of these components gives the object different features.","metadata":{"id":737}}],["738",{"pageContent":"The [`add`](https://kaboomjs.com/doc#add) function constructs a game object using different components, e.g. `pos`, `body`, `scale`, etc. Each of these components gives the object different features.\n\nNotably, the [`body`](https://kaboomjs.com/doc#body) component makes the object react to gravity: the spaceship falls if it's not on the ground or a platform. The [`rotate`](https://kaboomjs.com/doc#rotate) component allows us to tilt the spaceship in the direction the player wants to go, providing good visual feedback. By default, all operations are calculated around the top left corner of game objects. To make the tilt work correctly, we add the [`origin`](https://kaboomjs.com/doc#origin) component and set it to `center`, so that the tilt adjusts the angle from the center of the object.\n\nKaboom also allows us to attach custom data to a game object. We've added `score` to hold the player's latest score, and `shield` to hold the percentage of the ship's protection shield still available. We can adjust these as the player picks up items or crashes into aliens.\n\nWhen we created the `map` earlier, we added the [`solid`](https://kaboomjs.com/doc#solid) component to map objects. This component marks objects as solid, meaning other objects can't move past them.\n\n## Moving the Spaceship\n\nWe'll allow a few different moves for the spaceship: change direction left or right and fly up. We also need to keep track of which way the spaceship is facing, so that we'll know which side to shoot lasers from later.\n\nTo handle the changing and tracking of direction, add the following code:\n\n```javascript\nconst directions = {\n  LEFT: \"left\",\n  RIGHT: \"right\",\n};\n\nlet current_direction = directions.RIGHT;\n\nonKeyDown(\"left\", () => {\n  player.flipX(-1);\n  player.angle = -11;\n  current_direction = directions.LEFT;\n  player.move(-100, 0);\n});\n\nonKeyDown(\"right\", () => {\n  player.flipX(1);\n  player.angle = 11;\n  current_direction = directions.RIGHT;\n  player.move(100, 0);\n});\n\nonKeyRelease(\"left\", () => {\n  player.angle = 0;\n});","metadata":{"id":738}}],["739",{"pageContent":"});\n\nonKeyDown(\"right\", () => {\n  player.flipX(1);\n  player.angle = 11;\n  current_direction = directions.RIGHT;\n  player.move(100, 0);\n});\n\nonKeyRelease(\"left\", () => {\n  player.angle = 0;\n});\n\nonKeyRelease(\"right\", () => {\n  player.angle = 0;\n});\n```\n\nFirst, we create a constant object defining the directions our game allows. Then we create a variable to track the `current_direction` the spaceship is facing.\n\nThen we add the key-handling code. The key names `left` and `right` refer to the left and right arrow keys on the keyboard. Kaboom provides the [`onKeyDown`](https://kaboomjs.com#onKeyDown) event, which lets us know if a certain key is being pressed. We create `onKeyDown` event handlers for each of the arrow keys. As long as the given key is held down, `onKeyDown` calls the event handler repeatedly.\n\nThe code inside each `onKeyDown` event does the following:\n\n- The `flipX` function mirrors the player's spaceship image so that it looks different depending on the direction it is facing. We use `-1` to flip it to appear facing the left, `1` the right.\n- The function `player.angle` slightly tilts the spaceship while the key is being held down. This is so the spaceship looks like it is about to move in the given direction.\n- The `current_direction` tracking variable is updated. We'll use this variable when we add shooting.\n- The `move` function moves the spaceship in the given direction.\n\nWe also have `onKeyRelease` event handlers for the left and right keys. These reset the spaceship's tilt angle to 0 (i.e. straight up) when the ship is no longer moving in that direction.\n\nNow we want to have the spaceship fly up when we press the `up arrow` key. To do this, we'll take advantage of Kaboom's [`jump`](https://kaboomjs.com/doc#body) attribute (which is part of the [`body`](https://kaboomjs.com/doc#body) component) and repurpose it for flying up. Add the following code to the main scene:\n\n```javascript\nonKeyDown(\"up\", () => {\n  player.jump(100);\n});\n```\n\n## Adding Laser Guns","metadata":{"id":739}}],["740",{"pageContent":"```javascript\nonKeyDown(\"up\", () => {\n  player.jump(100);\n});\n```\n\n## Adding Laser Guns\n\nBecause the game takes place in outer space, the weapon of choice is a laser gun. We'll need to add functions to create the bullet when the player fires, and to control the direction of the bullets. We'll also need to add another key handler to check when the player presses a key to \"fire\", which is the space key in this game.\n\n```javascript\nconst BULLET_SPEED = 400;\n\nonKeyPress(\"space\", () => {\n  spawnBullet(player.pos);\n});\n\nfunction spawnBullet(bulletpos) {\n  if (current_direction == directions.LEFT) {\n    bulletpos = bulletpos.sub(10, 0);\n  } else if (current_direction == directions.RIGHT) {\n    bulletpos = bulletpos.add(10, 0);\n  }\n  add([\n    rect(6, 2),\n    pos(bulletpos),\n    origin(\"center\"),\n    color(255, 255, 255),\n    area(),\n    \"bullet\",\n    {\n      bulletSpeed:\n        current_direction == directions.LEFT ? -1 * BULLET_SPEED : BULLET_SPEED,\n    },\n  ]);\n\n  play(\"shoot\", {\n    volume: 0.2,\n    detune: rand(-1200, 1200),\n  });\n}\n```\n\nFirst, we add a constant `BULLET_SPEED` to define the speed at which the laser \"bullets\" fly across the screen. Then we use the [`onKeyPress`](https://kaboomjs.com#onKeyPress) event to trigger the shooting. Notice `onKeyPress` only calls the event handler once as the key is pressed, unlike the `onKeyDown` event we used for moving. This is because it's more fun if the player needs to bash the \"fire\" button as fast as possible to take down an enemy, rather than just having automatic weapons.","metadata":{"id":740}}],["741",{"pageContent":"The `onKeyPress` handler calls the `spawnBullet` function with the player's current position. This function handles creating a new laser shot in the correct direction. The first few lines of the method adjust the bullet's starting position a little to the left or right of the spaceship's position. This is because the position of the spaceship that gets passed to the function is the center of the spaceship (remember the `origin` component we added to it earlier). We adjust it a little so that the bullet looks like it is coming from the edge of the spaceship.\n\nThen we add a new bullet object to the game using the [`add`](https://kaboomjs.com/doc#add) function. We don't use a sprite for the bullet, but draw a [`rect`](https://kaboomjs.com/doc#rect), or rectangle, with our given color. We tag it `bullet` so we can refer to it later when detecting if it hit something. We also give it a custom property, `bulletSpeed`, which is the distance and direction we want the bullet to move on each frame.\n\nFinally, we add sound effects when the player shoots. The [`play`](https://kaboomjs.com/doc#play) function plays our \"shoot.wav\" file. We adjust the volume down a bit, so it fits in better with the overall sound mix. We use the `detune` parameter along with a random number generator, [`rand`](https://kaboomjs.com/doc#rand), to change the pitch of the sound each time it's played. This is so the sound doesn't become too repetitive and also because it sounds weird and \"spacey\".\n\nNow that we've set up the bullet, we need to make it move on each frame. To do this we can use the [`onUpdate`](https://kaboomjs.com/doc#onUpdate) event, using the `bullet` tag to identify the objects we want to update:\n\n```javascript\nonUpdate(\"bullet\", (b) => {\n  b.move(b.bulletSpeed, 0);\n  if (b.pos.x < 0 || b.pos.x > MAP_WIDTH) {\n    destroy(b);\n  }\n});\n```","metadata":{"id":741}}],["742",{"pageContent":"```javascript\nonUpdate(\"bullet\", (b) => {\n  b.move(b.bulletSpeed, 0);\n  if (b.pos.x < 0 || b.pos.x > MAP_WIDTH) {\n    destroy(b);\n  }\n});\n```\n\nWith each frame, the action event updates the objects with the matching tag, in this case `bullet`. We call [`move`](https://kaboomjs.com/doc#pos) on the bullet, using the custom value for `bulletSpeed` that we assigned to it on creation. We also check to see if the bullet has gone off the screen, and if it has, we [`destroy`](https://kaboomjs.com/doc#destroy) it.\n\nWe also need to destroy the bullet if it hits a platform. We can do this using the Kaboom [`onCollide`](https://kaboomjs.com/doc#onCollide) event. Add the following code:\n\n```javascript\nonCollide(\"bullet\", \"platform\", (bullet, platform) => {\n  destroy(bullet);\n});\n```\n\nRun the code now, and you should be able to shoot.\n\n![Laser firing](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/laser-firing.gif)\n\n## Adding Alien Space Bugs\n\nNow that we have a spacecraft, and it can shoot, we need something to shoot at. Let's add some hostile exploding alien space bugs. We'll want to have them coming in a relatively constant stream to keep the game challenging. We also want them coming in from different sides and angles to keep the player on their toes. We'll add a new function to control the creation of alien space bugs:\n\n```javascript\nconst ALIEN__BASE_SPEED = 100;\nconst ALIEN_SPEED_INC = 20;\n\nfunction spawnAlien() {\n  let alienDirection = choose([directions.LEFT, directions.RIGHT]);\n  let xpos = alienDirection == directions.LEFT ? 0 : MAP_WIDTH;\n\n  const points_speed_up = Math.floor(player.score / 1000);\n  const alien_speed = ALIEN__BASE_SPEED + points_speed_up * ALIEN_SPEED_INC;\n  const new_alien_interval = 0.8 - points_speed_up / 20;\n\n  add([\n    sprite(\"alien\"),\n    pos(xpos, rand(0, MAP_HEIGHT - 20)),\n    area(),\n    \"alien\",\n    {\n      speedX:\n        rand(alien_speed * 0.5, alien_speed * 1.5) *\n        (alienDirection == directions.LEFT ? 1 : -1),","metadata":{"id":742}}],["743",{"pageContent":"pos(xpos, rand(0, MAP_HEIGHT - 20)),\n    area(),\n    \"alien\",\n    {\n      speedX:\n        rand(alien_speed * 0.5, alien_speed * 1.5) *\n        (alienDirection == directions.LEFT ? 1 : -1),\n      speedY: rand(alien_speed * 0.1, alien_speed * 0.5) * choose([-1, 1]),\n    },\n  ]);\n\n  wait(new_alien_interval, spawnAlien);\n}\n\nspawnAlien();\n```\n\nWe create 2 parameters for the alien's speed: a base rate and an incremental rate. Each time the player gains another 1000 points, we'll add to the incremental rate.\n\n**Tip:** You can put these parameters and all the others we have defined at the top of the file, so that they are easy to find and adjust if you want to tweak the game parameters later.\n\nThen we define the `spawnAlien` function. To randomly choose the side of the screen the alien will fly in from, we use the Kaboom [`choose`](https://kaboomjs.com/doc#choose) function, which picks an element at random from an array. From the chosen direction, we can determine the alien's starting position on the `x axis` (horizontal plane).\n\nThen we go into the calculation to figure out the speed that the alien should move at. First, we check if we need to increase the alien's speed based on the player's score. We divide the player's score by 1000 (since the aliens' speed increases with every 1000 points the player earns). We get rid of decimals by using the [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor) function, which is built into JavaScript. The result is our `points_speed_up` value.\n\nNext we take the `ALIEN_BASE_SPEED` and add the incremental rate multiplied by our `points_speed_up` value.\n\nWe also calculate a new rate at which aliens are spawned, making the aliens not only faster at moving, but also faster at respawning.\n\nNow that we've calculated our basic parameters, we create a new alien using the [`add`](https://kaboomjs.com/doc#add) function again:\n\n- `sprite('alien')` creates the alien with the image `alien`.","metadata":{"id":743}}],["744",{"pageContent":"Now that we've calculated our basic parameters, we create a new alien using the [`add`](https://kaboomjs.com/doc#add) function again:\n\n- `sprite('alien')` creates the alien with the image `alien`.\n- `pos(xpos, rand(0, MAP_HEIGHT-20))` sets the starting position of the alien. We calculated the `x pos` from the randomly chosen direction. We also add a random `y` (vertical) position for the alien, between the top (position `0`) of the map, and the bottom (`MAP_HEIGHT`) of the map (screen co-ordinates start from the top left of the screen). We remove `20` pixels from the bottom bounds, to account for the ground.\n- We add the `\"alien\"` tag to the object, so we can identify and call it in other parts of the code.\n- We also add a custom object with the speed of this particular alien, broken into it's speed along the `x` and `y` axis. For the speed along the x-axis `speedX`, we add a random component so that not all aliens move at exactly the same speed. Then we multiply the speed by -1 or 1 depending on whether the alien is meant to be moving left or right across the screen.\n\nFinally, we use Kaboom's [`wait`](https://kaboomjs.com/doc#wait) function to wait a short amount of time before calling `spawnAlien` again to create a new alien. We also have a call to `spawnAlien` to get it started when the game starts.\n\n## Moving the Aliens\n\nTo move the aliens, we'll create a handler to attach to the `onUpdate` event, which fires for each alien object on every frame, like we did for the bullets:\n\n```javascript\nonUpdate(\"alien\", (alien) => {\n  alien.move(alien.speedX, alien.speedY);\n\n  if (alien.pos.y - alien.height > MAP_HEIGHT || alien.pos.y < 0) {\n    destroy(alien);\n  }\n  if (alien.pos.x < -1 * alien.width || alien.pos.x > MAP_WIDTH) {\n    destroy(alien);\n  }\n});\n```\n\nFirst, the function moves the alien by the amount we calculated earlier and saved to the alien's custom data.","metadata":{"id":744}}],["745",{"pageContent":"destroy(alien);\n  }\n});\n```\n\nFirst, the function moves the alien by the amount we calculated earlier and saved to the alien's custom data.\n\nThen the function checks to see if the alien has moved out of bounds of the map area. If it has, we destroy it, as it is no longer visible. Having too many active objects can decrease performance, so this step is important.\n\nRun the code now, you should see moving aliens.\n\n![Aliens](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/aliens.gif)\n\n## Shooting the Aliens\n\nNow that we have moving aliens, a moving spaceship, and laser bullets, let's add the code to deal with a laser bullet hitting an alien. Of course, we want this to have a cool explosion and sound effect to give good feedback to the player.\n\n```javascript\nonCollide(\"alien\", \"bullet\", (alien, bullet) => {\n  makeExplosion(alien.pos, 5, 5, 5);\n  destroy(alien);\n  destroy(bullet);\n  play(\"explosion\", {\n    volume: 0.2,\n    detune: rand(0, 1200),\n  });\n});\n```\n\nThis is similar to the code used before to check if a bullet has hit a platform. We [`destroy`](https://kaboomjs.com/doc#destroy) both the bullet and alien to remove them from the scene. Then we use the [`play`](https://kaboomjs.com/doc#playhttps://kaboomjs.com/doc#play) function to play the explosion sound effect. We set the volume so it fits in the mix, and we also put a random detune (pitch adjust) on the sound, to vary it and make it more interesting when a lot of aliens are being shot at.\n\nWe also call out to a function to create an explosion around the area where the alien bug used to be. This code is from the [\"shooter\" example on the Kaboom examples page](https://kaboomjs.com/demo#shooter) (which is a great game). It makes a series of bright white flashes around the explosion site, giving a cool cartoon or comic-book-like feel to the explosions. Add this code:\n\n```javascript\nfunction makeExplosion(p, n, rad, size) {\n  for (let i = 0; i < n; i++) {\n    wait(rand(n * 0.1), () => {\n      for (let i = 0; i < 2; i++) {","metadata":{"id":745}}],["746",{"pageContent":"```javascript\nfunction makeExplosion(p, n, rad, size) {\n  for (let i = 0; i < n; i++) {\n    wait(rand(n * 0.1), () => {\n      for (let i = 0; i < 2; i++) {\n        add([\n          pos(p.add(rand(vec2(-rad), vec2(rad)))),\n          rect(1, 1),\n          color(255, 255, 255),\n          origin(\"center\"),\n          scale(1 * size, 1 * size),\n          grow(rand(48, 72) * size),\n          lifespan(0.1),\n        ]);\n      }\n    });\n  }\n}\n\nfunction lifespan(time) {\n  let timer = 0;\n  return {\n    update() {\n      timer += dt();\n      if (timer >= time) {\n        destroy(this);\n      }\n    },\n  };\n}\n\nfunction grow(rate) {\n  return {\n    update() {\n      const n = rate * dt();\n      this.scale.x += n;\n      this.scale.y += n;\n    },\n  };\n}\n```\n\nThe `makeExplosion` function has four _arguments_ (inputs to the function). These are:\n\n- `p`, the center position to base the explosions around\n- `n`, the number of main flashes to make\n- `rad`, the radius or distance from `p` to make the flashes in\n- `size`, the size of each of the flashes\n\nThe function creates a [`for loop`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) to loop for `n` times (the number of main flashes we want to make). It uses the Kaboom [`wait`](https://kaboomjs.com/doc#wait) function to leave a little bit of time (0.1) seconds between each main flash.","metadata":{"id":746}}],["747",{"pageContent":"Another `for loop` loops twice to create 2 sub flashes, using the Kaboom [`add`](https://kaboomjs.com/doc#add) function to add a [`rectangle`](https://kaboomjs.com/doc#rect) shape for each flash, and setting the color to bright white (color components in Kaboom go from 0-1). This rectangle starts out at 1 pixel in each dimension. Then the [`scale`](https://kaboomjs.com/doc#scale) component is added to increase the size of the flash to the `size` passed in to the function - we'll use this later when we \"grow\" the explosion. The [`origin`](https://kaboomjs.com/doc#origin) component is used to set the origin of the rectangle to it's center - this will be used when we \"grow\" the flash to give the impression that it is starting from a small point and exploding. We set the origin as the center so that scale is calculated from this position, giving it a more natural feel.\n\nTo make the flashes appear around the position `p` that we specified, the [`pos`](https://kaboomjs.com/doc#pos) component is adjusted by a random amount, ranging from `-rad` to `rad`, the radius we specified (in other words, the blast area).\n\nThen there are references to two custom components - `lifespan` and `grow`. Kaboom allows us to define our own components to give objects any behaviour or attributes we want. All we need to do is create a function that returns an object with a method called `update`, which is then called for each frame of the object the component is added to.","metadata":{"id":747}}],["748",{"pageContent":"Let's first look at the custom component `grow`. This is used to create the effect of the flash expanding outwards, like a firework explosion starting at a small point and getting larger until it disappears. In `grow`'s `update` function, the object is scaled up (available because we used the [`scale`](https://kaboomjs.com/doc#scale) component on the object) on each frame. This is calculated from the `rate` passed in - which is the size the object should grow per second, multiplied by the time difference from the last frame, using the Kaboom [`dt`](https://kaboomjs.com/doc#dt) function, which provides that time difference in seconds for us. The explosion flash will keep on growing in each frame, so we need a way to end the explosion before it covers the entire screen.\n\nThis brings us to the `lifespan` component. This is implemented to automatically [`destroy`](https://kaboomjs.com/doc#destroy) the object after a short time, to solve the ever-growing explosion problem. It works by having a `timer` variable, which is updated each frame with the difference in time from the last frame, using the Kaboom [`dt`](https://kaboomjs.com/doc#dt) function again. When the `timer` count is more than the `time` parameter passed into the component, the object is automatically [`destroyed`](https://kaboomjs.com/doc#destroy). This creates the impression of a quick explosion blast.\n\n![Shooting Aliens](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/shooting-aliens.gif)\n\n## Exploding the Alien Bugs on Contact\n\nWhen the alien bugs hit something solid, they should explode. To do this, we'll add the following code:\n\n```javascript\nonCollide(\"alien\", \"platform\", (alien, platform) => {\n  makeExplosion(alien.pos, 5, 3, 3);\n  destroy(alien);\n  play(\"explosion\", {\n    volume: 0.1,\n    detune: rand(-1200, 1200),\n  });\n});\n\nonCollide(\"alien\", \"ground\", (alien, ground) => {\n  makeExplosion(alien.pos, 5, 3, 3);\n  destroy(alien);\n  play(\"explosion\", {\n    volume: 0.1,\n    detune: rand(-1200, 1200),\n  });","metadata":{"id":748}}],["749",{"pageContent":"});\n});\n\nonCollide(\"alien\", \"ground\", (alien, ground) => {\n  makeExplosion(alien.pos, 5, 3, 3);\n  destroy(alien);\n  play(\"explosion\", {\n    volume: 0.1,\n    detune: rand(-1200, 1200),\n  });\n});\n```\n\nHere we have 2 collision handlers: one for aliens hitting a platform, and one for aliens hitting the ground. They both do the same thing. First, since we have a great explosion creating function, we use it gratuitously. Then we [`destroy`](https://kaboomjs.com/doc#destroy) the alien object to remove it from the scene. Finally, we play an explosion sound effect at a lower volume, as this explosion is not caused by the player and doesn't directly affect them. We also add the usual random [`detune`](https://kaboomjs.com/doc#play) function to modify the sound each time and keep it interesting.\n\n## Adding Score and Shield UI\n\nLet's add the UI to show the ship's shield health and the player's overall score.\n\nFirst, add text for the player's score:\n\n```javascript\nadd([\n  text(\"SCORE: \", { size: 8, font: \"sink\" }),\n  pos(100, 10),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nconst scoreText = add([\n  text(\"000000\", { size: 8, font: \"sink\" }),\n  pos(150, 10),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n```\n\nHere we add two new objects, rendered with the [`text`](https://kaboomjs.com/doc#text) component. The first is just the static label for the score. The second is the text placeholder for the actual score. Note that the [`layer`](https://kaboomjs.com/doc#layer) component is used in both cases to place the text on the UI layer we created at the start of the tutorial. We haven't had to specify the layer for all our other game objects, because we set the `obj` layer as the default to use when we defined the layers.\n\nNow that we have the UI components for showing the score, we need a function to update the score when it changes, and reflect it on the UI.\n\n```javascript\nfunction updateScore(points) {\n  player.score += points;\n  scoreText.text = player.score.toString().padStart(6, 0);\n  play(\"score\", {\n    volume: 0.5,","metadata":{"id":749}}],["750",{"pageContent":"```javascript\nfunction updateScore(points) {\n  player.score += points;\n  scoreText.text = player.score.toString().padStart(6, 0);\n  play(\"score\", {\n    volume: 0.5,\n    detune: rand(-1200, 1200),\n  });\n}\n```\n\nThis `updateScore` function takes as its argument the number of points to add to the score and adds them to the player's current score - remember we added `score` as a custom property when we created the player (spaceship) object.\n\nNext we update the `scoreText` UI element we created previously. The player's score is converted to a string using JavaScript's [`toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) method, which is part of every object in JavaScript. It is also modified with [`padStart`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart), which makes sure the resulting score string is exactly `6` digits long, using 0s to put in front of the string (`start`) if the number is smaller than 6 digits long. This makes nice placeholders for the score, and gives a cue to the users as to the maximum score they could reach. Finally, we play a little sound to indicate that points have been earned. As before, we vary the pitch each time using [`detune`](https://kaboomjs.com/doc#play) to keep the sound fresh.\n\nTo increment the score when the alien bugs get hit by a bullet, update the `onCollide` event we added earlier for a bullet and alien bug as follows:\n\n```javascript\nonCollide(\"alien\", \"bullet\", (alien, bullet) => {\n  makeExplosion(alien.pos, 5, 5, 5);\n  destroy(alien);\n  destroy(bullet);\n  play(\"explosion\", {\n    volume: 0.2,\n    detune: rand(0, 1200),\n  });\n  updateScore(10); // new line\n});\n```\n\nThe next UI element to add is the ship's shield health. This would be great as a kind of health-bar-style display, that starts out green and turns red when the shield is low. The game should end when the shield is fully depleted, as the spaceship is then totally destroyed.\n\n```javascript\nadd([","metadata":{"id":750}}],["751",{"pageContent":"```javascript\nadd([\n  text(\"SHIELD: \", { size: 8, font: \"sink\" }),\n  pos(300, 10),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nconst shieldHolder = add([\n  rect(52, 12),\n  pos(350, 10),\n  color(100, 100, 100),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nconst shieldHolderInside = add([\n  rect(50, 10),\n  pos(350, 10),\n  color(0, 0, 0),\n  origin(\"center\"),\n  layer(\"ui\"),\n]);\n\nconst shieldBar = add([\n  rect(50, 10),\n  pos(325, 5),\n  color(0, 255, 0),\n  layer(\"ui\"),\n]);\n```\n\nFirst, we add a text label so that players know what the bar represents. To create the shield bar UI, we use 3 elements :\n\n- A border, or `shieldHolder`, to outline the bar.\n- A black inner block to make the holder look like a thin line, `shieldHolderInside`.\n- The `shieldBar` itself, which will get shorter as the shield is damaged.\n\nNow we need a function to call when we want to update the shield's health:\n\n```javascript\nfunction updatePlayerShield(shieldPoints) {\n  player.shield += shieldPoints;\n  player.shield = Math.max(player.shield, 0);\n  player.shield = Math.min(player.shield, 100);\n\n  shieldBar.width = 50 * (player.shield / 100);\n\n  if (player.shield < 20) shieldBar.color = rgb(255, 0, 0);\n  else if (player.shield < 50) shieldBar.color = rgb(255, 127, 0);\n  else shieldBar.color = rgb(0, 255, 0);\n\n  if (player.shield <= 0) {\n    destroy(player);\n    for (let i = 0; i < 500; i++) {\n      wait(0.01 * i, () => {\n        makeExplosion(vec2(rand(0, MAP_WIDTH), rand(0, MAP_HEIGHT)), 5, 10, 10);\n        play(\"explosion\", {\n          detune: rand(-1200, 1200),\n        });\n      });\n    }\n    wait(2, () => {\n      go(\"endGame\");\n    });\n  }\n}\n```\n\nThis function has an argument for the number of `shieldPoints` to update the shield by and adjusts the custom `shield` property on the UI layer. It also clamps the minimum and maximum amount the shield can be to between 0 and 100.\n\nThe function sets the width of the `shieldBar` (its dimension along the x axis) to the percentage of the shield available (`player.shield / 100`), multiplied by the full width of the bar, `50`.","metadata":{"id":751}}],["752",{"pageContent":"The function sets the width of the `shieldBar` (its dimension along the x axis) to the percentage of the shield available (`player.shield / 100`), multiplied by the full width of the bar, `50`.\n\nThen the function updates the color of the bar depending on the health of the shield:\n\n- Less than 20% health, shield bar is red;\n- Less than 50% but more than 20% health, shield bar is orange;\n- The shield bar is set to green for all other health values, in other words, when health is over 50%.\n\nThe final step in the shield health function is to check if the shield health is depleted, and end the game if it is.\n\nWhen the game ends, we destroy the spaceship to remove it from the scene. Now we have another opportunity to create some more explosions using the `makeExplosion` function we added earlier. This time we can go really big! To make a big impact, we create a `for` loop to set off 500 explosions all over the screen for seriously dramatic effect. We use the Kaboom [`wait`](https://kaboomjs.com/doc#wait) function to have a small delay between each explosion so that they don't all go off at once. Then we make each explosion happen at random positions on the map, passing in other parameters to the `makeExplosion` function to set the blast radius, number of sub-explosions and general size. We also play the `explosion` sound effect using Kaboom's [`play`](https://kaboomjs.com/doc#play) function. This time we don't adjust the volume down, as we want the sound to be as dramatic as possible. We detune it randomly again to create a true cacophony and sense of mayhem.\n\nAfter setting off all those sound effects and visual fireworks, we [`wait`](https://kaboomjs.com/doc#wait) for 2 seconds for everything to settle down, and then use the Kaboom function [`go`](https://kaboomjs.com/doc#go) to switch to a new scene, `endGame`, and wait for the player to play again. Add the code below to create the `endGame` scene, at the bottom of `main.js` below the line `go(\"main\")`:\n\n```javascript","metadata":{"id":752}}],["753",{"pageContent":"```javascript\nscene(\"endGame\", () => {\n  const MAP_WIDTH = 440;\n  const MAP_HEIGHT = 275;\n\n  add([\n    text(\"GAME OVER \", { size: 40, font: \"sink\" }),\n    pos(MAP_WIDTH / 2, MAP_HEIGHT / 3),\n    origin(\"center\"),\n    layer(\"ui\"),\n  ]);\n\n  onKeyRelease(\"enter\", () => {\n    go(\"main\");\n  });\n});\n```\n\nThis scene [`adds`](https://kaboomjs.com/doc#add) a large \"GAME OVER\" text over the screen until the player presses and releases the `enter` key. Then the [`onKeyRelease`](https://kaboomjs.com#onKeyRelease) event returns the player to the main scene, and uses [`go`](https://kaboomjs.com/doc#go) to switch scenes and restart the game. Because this is a new scene, in a new scope, we need to add the `MAP_WIDTH` and `MAP_HEIGHT` constants again.\n\n## Allowing the Alien Bugs to Attack\n\nNow that we have mechanisms for updating points and shield health, we can add the code dealing with alien bugs hitting the spaceship to the main scene:\n\n```javascript\nconst ALIEN_SHIELD_DAMAGE = -15;\n\nonCollide(\"alien\", \"player\", (alien, player) => {\n  shake(20);\n  makeExplosion(alien.pos, 8, 8, 8);\n  destroy(alien);\n  play(\"explosion\", {\n    detune: -1200,\n    volume: 0.5,\n  });\n  updatePlayerShield(ALIEN_SHIELD_DAMAGE);\n});\n```\n\nThis is a big event - it's the way the ship shield gets damaged and it can be fatal - so we want to add a bit more dramatic effect. Kaboom can create a cool screen-shaking effect, as if the player has been hit, which we can invoke by calling [`shake`](https://kaboomjs.com/doc#shake) with a number representing how dramatic the shake should be. Then we add some visual effect with the `makeExplosion` function. We also destroy the alien and [`play`](https://kaboomjs.com/doc#play) the `explosion` effect again, this time a bit louder as the alien exploding has directly affected the player. We also detune the effect to the lowest pitch we can, to make it \"feel\" more direct, particularly if the player has a sub-woofer.","metadata":{"id":753}}],["754",{"pageContent":"Then we call the `updatePlayerShield` function we defined previously, with a constant that defines by how much a shield is damaged per hit. You can move the constant to the top of the main scene file to keep it neat if you want.\n\n## Raining Gems\n\nIt's time to add the element that gives the game its purpose: gems the player can collect to earn points. Add this function to the main scene to create a gem:\n\n```javascript\nfunction spawnGem() {\n  let xpos = rand(BLOCK_SIZE, MAP_WIDTH - BLOCK_SIZE);\n  add([sprite(\"gem\"), pos(xpos, BLOCK_SIZE), area(), body(), \"gem\"]);\n}\n\nonUpdate(\"gem\", (gem) => {\n  if (gem.pos.y > MAP_HEIGHT) {\n    destroy(gem);\n    spawnGem();\n  }\n});\n\nspawnGem();\n```\n\nOn this weird planet in outer space, the gems rain from the sky, which is the top of the map for our purposes. We calculate a random position, `xpos`, along the `x` axis for the gem to appear on by calling the Kaboom [`rand`](https://kaboomjs.com/doc#rand) function. We don't want the gems to fall right at the edge of the screen, as they will be cut off and the spaceship won't be able to get to them because of the `boundary` elements we added all around the screen. So we limit the random `xpos` to one `BLOCK_SIZE` from each edge.\n\nNow we [`add`](https://kaboomjs.com/doc#add) the gem sprite to the scene. The `pos` component is set to the `xpos` we calculated, with the `y` component set to one `BLOCK_SIZE` from the top of the screen. This is to avoid the gem getting stuck on our upper `boundary`. We also give the gem the [`body`](https://kaboomjs.com/doc#body) component, which makes it subject to Kaboom gravity so that it falls down towards the ground. We give it the label `gem` so that we can refer to it later.","metadata":{"id":754}}],["755",{"pageContent":"Then we add the [`onUpdate`](https://kaboomjs.com/doc#onUpdate) event handler for the gem - we need to do this for all objects with a `body` component so that interactions with [`solid`](https://kaboomjs.com/doc#solid) objects are taken care of. Sometimes, if the frame rate gets too low (if there's a lot of action, or the computer's slow), some `body` and `solid` interaction maybe missed, and the [`object falls through the solid`](https://github.com/replit/kaboom/issues/86). This could cause gems to fall through the ground, out of reach of the player's spaceship. To account for this possibility, we check if the gem's `y` position is beyond the bounds of the map, and destroy it and spawn a new gem if it is.\n\nFinally, we call `spawnGem()` to start the gem raining process.\n\n## Collecting Gems\n\nNow that gems are raining down, we can add a handler to pick up when the player's spaceship moves over a gem. This is how the spaceship \"collects\" gems, and will earn the player points. Add the following [`onCollide`](https://kaboomjs.com/doc#onCollide) event handler:\n\n```javascript\nconst POINTS_PER_GEM = 100;\n\nplayer.onCollide(\"gem\", (gem) => {\n  destroy(gem);\n  updateScore(POINTS_PER_GEM);\n  wait(1, spawnGem);\n});\n```\n\nThis fires whenever the spaceship and a gem collides. We [`destroy`](https://kaboomjs.com/doc#destroy) the gem to remove it from the scene, and call the `updateScore` function we added earlier to update the player's points by the amount declared in the `POINTS_PER_GEM` constant. Then we [`wait`](https://kaboomjs.com/doc#wait) one second before another gem is spawned for the player to collect.\n\nRun the code now and start collecting gems.\n\n![Collecting gems](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/collecting-gems.gif)\n\n## Adding Background Music","metadata":{"id":755}}],["756",{"pageContent":"Run the code now and start collecting gems.\n\n![Collecting gems](https://docimg.replit.com/images/tutorials/24-space-shooter-kaboom/collecting-gems.gif)\n\n## Adding Background Music\n\nHaving sound effects is cool, but games generally need a soundtrack to tie all the sounds together. Kaboom allows us to play a sound file on loop as constant background music. Add this code to the bottom of `main.js` file to play the track:\n\n```javascript\nconst music = play(\"music\");\nmusic.loop();\n```\n\nThe music is a track called \"Battle of Pogs\" by \"Komiku\" from [\"Free music archive\"](https://freemusicarchive.org/music/Komiku/Captain_Glouglous_Incredible_Week_Soundtrack/pog), a good resource for music that you can legally use in your games.\n\n## Playing the Game\n\nCongratulations, you've finished making this Kaboom game! Try running and playing the game to see what score you can get. You can also experiment with adjusting the parameters to see how they change the gameplay.\n\n## Credits\n\nThe game art and sounds used in this tutorial are from the following sources:\n\n- Music : https://freemusicarchive.org/music/Komiku/Captain_Glouglous_Incredible_Week_Soundtrack/pog\n- Laser : https://freesound.org/people/sunnyflower/sounds/361471/\n- Explosion: https://freesound.org/people/tommccann/sounds/235968/\n- Point Beep : https://freesound.org/people/LittleRobotSoundFactory/sounds/270303/\n- Gem: https://opengameart.org/content/planetcute-gem-bluepng\n- Space Background: https://opengameart.org/content/space-background-8\n- Alien Bug: https://opengameart.org/content/8-bit-alien-assets\n\nThe spaceship was made by Ritza.\n\nThank you to all the creators for putting their assets up with a Creative Commons license and allowing us to use them.\n\n## Things to Try Next\n\nHere are a few things you can try to add to the game and polish it up:\n\n- Self healing on the shield. Perhaps add back 1 or 2 shield points every 10 seconds, so that players can go further if they dodge the aliens.\n- A better ending screen, with the player's score.","metadata":{"id":756}}],["757",{"pageContent":"- Self healing on the shield. Perhaps add back 1 or 2 shield points every 10 seconds, so that players can go further if they dodge the aliens.\n- A better ending screen, with the player's score.\n- An intro scene, explaining the game and the controls.\n- Different types of alien bugs. Perhaps a large \"boss\" bug that can also shoot back.\n\nYou can find the code for this tutorial in the repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Space-Shooter-new?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":757}}],["758",{"pageContent":"---\ntitle: Tic-tac-toe with Kaboom.js & WebSockets\n---\n\n# Building tic-tac-toe with WebSocket and Kaboom.js\n\nTic-tac-toe, or noughts and crosses, or Xs and Os, is a simple classic game for 2 players. It's usually played with paper and pen, but it also makes a good first game to write for networked multiplayer.\n\nIn this tutorial, we'll create a 2-player online tic-tac-toe game using a [Node.js](https://nodejs.org/en/) server. [Socket.IO](https://socket.io) will enable realtime gameplay across the internet. We'll use Kaboom.js to create the game interface.\n\n![Game play](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/gameplay.gif)\n\n## How do multiplayer games work?\n\nMultiplayer games have an architecture that typically looks something like this:\n\n![Game server architecture](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/architecture.png)\n\nPlayers (clients) connect to a _game server_ over the internet. The game runs on the game server, where all the game rules, scores and other data are processed. The players' computers render the graphics for the game, and send player commands (from the keyboard, mouse, gamepad, or other input device) back to the game server. The game server checks if these commands are valid, and then updates the _game state_. The game state is a representation of all the variables, players, data and information about the game. This game state is then transmitted back to all the players and the graphics are updated.\n\nA lot of communication needs to happen between a player's computer and the game server in online multiplayer games. This generally requires a 2-way, or _bidirectional_, link so that the game server can send data and notify players of updates to the game state. This link should ideally be quick too, so a more permanent connection is better.","metadata":{"id":758}}],["759",{"pageContent":"With the [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) protocol that websites usually use, a browser opens a connection to a server, then makes a request to the server, and the server sends back data, and closes the connection. There is no way for the server to initiate sending data to the browser. HTTP is also heavy on overhead, since it opens and closes a connection each time data is requested and sent.\n\n[WebSocket](https://en.wikipedia.org/wiki/WebSocket) is an advanced internet protocol that allows us to create a 2-way, persistent connection between a browser and a server. We'll use the [Socket.IO](https://socket.io) package to help us manage WebSocket connections in this project.\n\n## Creating a new project\n\nFor this project, we'll need to create 2 repls - 1 using Node.js for the game server, and 1 using Kaboom for the players. Head over to [Replit](https://replit.com) and create a two new repls:\n\n- To create the server project, choose \"Node.js\" as your project type. Give this repl a name, like \"tic-tac-toe-server\".\n  ![Server repl](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/server-new-repl.png)\n- To create the player project, choose \"Kaboom\" as your project type. Give this repl a name, like \"tic-tac-toe\".\n  ![New Player repl](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/player-new-repl.png)\n\nWe'll code in the server repl to start, and then switch between repls as we build the game.\n\n## Setting up Socket.IO on the server\n\nAdd the following code to the file called `index.js` in the server project to import Socket.IO:\n\n```js\nconst http = require(\"http\");\nconst sockets = require(\"socket.io\");\n\nconst server = http.createServer();\nconst io = sockets(server, {\n  cors: {\n    origin: \"https://tic-tac-toe--<YOUR-USER-NAME>.repl.co\",\n    methods: [\"GET\", \"POST\"],\n  },\n});\n\nserver.listen(3000, function () {\n  console.log(\"listening on 3000\");\n});\n```","metadata":{"id":759}}],["760",{"pageContent":"cors: {\n    origin: \"https://tic-tac-toe--<YOUR-USER-NAME>.repl.co\",\n    methods: [\"GET\", \"POST\"],\n  },\n});\n\nserver.listen(3000, function () {\n  console.log(\"listening on 3000\");\n});\n```\n\n*Note: Please refer to [these docs](/hosting/hosting-web-pages.md#end-of-dot-style-domains) to ensure that you are using the correct repl.co domain format.*\n\nIn the first 2 lines, we import the built-in node [`http`](https://nodejs.org/api/http.html) package and the [`socket.io`](https://socket.io) package. The `http` package enables us to run a simple HTTP server. The `socket.io` package extends that server to add [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API) functionality.\n\nTo create the HTTP server, we use the `http.createServer();` method. Then we set up Socket.IO by creating a new `io` object. We pass in the HTTP server object along with some configuration for [CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS). CORS stands for \"Cross Origin Resource Sharing\", and it's a system that tells the server which other sites are allowed to connect to it and access it. We set `origin` to allow our player repl to connect. Replace the `origin` value with the URL of the player project repl you set up earlier.\n\nIn the last 2 lines, we start the server up by calling its `listen` method, along with a port to listen on. We use 3000, as this is a standard for Node.js. If it starts successfully, we write a message to the console to let us know.\n\nWe'll add the rest of the server code above the `server.listen` line, as we only want to start the server up after all the other code is ready.\n\n## Tracking the game state\n\nNow that we have a server, lets think a bit about how we will represent, or model, the game. Our tic-tac-toe game will have a few different properties to track:\n\n- The status of the game: What is currently happening? Are we waiting for players to join, are the players playing, or is the game over?","metadata":{"id":760}}],["761",{"pageContent":"- The status of the game: What is currently happening? Are we waiting for players to join, are the players playing, or is the game over?\n- The current positions on the tic-tac-toe board. Is there a player in a grid block, or is it empty?\n- All the players. What are their names, and which symbol are they using, X or O?\n- The current player. Whose turn is it to go?\n- If the game ends in a win, who won it?\n\nFor the status of the game, we'll add an [enumeration](https://masteringjs.io/tutorials/fundamentals/enum) of the possible states we can expect. This makes it easier to track and use them as we go through the different phases of the game.\n\n```js\nconst Statuses = {\n  WAITING: \"waiting\",\n  PLAYING: \"playing\",\n  DRAW: \"draw\",\n  WIN: \"win\",\n};\n```\n\n- WAITING: We are waiting for all the players to join the game.\n- PLAYING: The players can make moves on the board.\n- DRAW: The game has ended in a draw.\n- WIN: A player has won the game.\n\nNow let's add a game state object to track everything:\n\n```js\nlet gameState = {\n  board: new Array(9).fill(null),\n  currentPlayer: null,\n  players: [],\n  result: {\n    status: Statuses.WAITING,\n  },\n};\n```\n\nFirst, we have a representation of the tic-tac-toe board as an array with 9 elements. This is how the array elements are mapped to the board:\n\n![Tic Tac Toe board mapped to array indices](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/board.png)\n\nEach number in the blocks represents the index at which the board position is represented in the array. Initially, we fill all the elements of the array with `null` to indicate that the block is open. When players make a move to occupy an open space, we'll add a reference to the player instead. That way we can keep track of which blocks are empty, and which are occupied by which player.\n\nNext, we have `currentPlayer`, which we will alternately set to each player when it's their turn to move.","metadata":{"id":761}}],["762",{"pageContent":"Next, we have `currentPlayer`, which we will alternately set to each player when it's their turn to move.\n\nThen there is an array called `players`, which will hold references to both of the players in the game. This will allow us to show the names of the players on screen, as well as generally keep track of the players.\n\nThe `result` field is updated after every move. This field will contain the status of the game (as we defined above). As it's represented as an object, it will also be able to hold extra fields. We'll use that functionality to add a reference to the winner of the game, if the game ends in a win.\n\n## Accepting connections\n\nWhen a player connects via WebSocket, Sockets.IO will fire a [`connection`](https://socket.io/docs/v4/server-instance/#connection) event. We can listen for this event and handle tracking the connection, as well as creating listeners for other custom events. There are a few [custom events](https://socket.io/docs/v4/emitting-events/) we can define here, that our players will emit:\n\n- `addPlayer`: We'll use this event for a player to request joining the game.\n- `action`: This is used when a player wants to make a move.\n- `rematch`: Used when a game is over, but the players want to play again.\n\nWe can also listen for the built-in [`disconnect`](https://socket.io/docs/v4/server-socket-instance/#disconnect) event, which will alert us if a player leaves the game (for example, by closing the browser window or if their internet connection is lost).\n\nLet's add the code that will hook up our listeners to the events:\n\n```js\nio.on(\"connection\", function (connection) {\n  connection.on(\"addPlayer\", addPlayer(connection.id));\n  connection.on(\"action\", action(connection.id));\n  connection.on(\"rematch\", rematch(connection.id));\n  connection.on(\"disconnect\", disconnect(connection.id));\n});\n```\n\nNext we'll implement each of these listener functions, starting with `addPlayer`.","metadata":{"id":762}}],["763",{"pageContent":"connection.on(\"rematch\", rematch(connection.id));\n  connection.on(\"disconnect\", disconnect(connection.id));\n});\n```\n\nNext we'll implement each of these listener functions, starting with `addPlayer`.\n\n**Side Note:** Normally in examples for custom listeners, you'll see the handler code added immediately with an anonymous function, like this:\n\n```js\nio.on(\"connection\", function (connection) {\n  connection.on(\"addPlayer\", (data) => {\n    // some code here\n  });\n\n  connection.on(\"action\", (data) => {\n    // some code here\n  });\n\n  // etc ...\n});\n```\n\nThis is convenient, especially when there are a couple of handlers, each with only a small amount of code. It's also handy because in each of the handler functions, you still have access to the `connection` object, which is not passed on each event. However, it can get a little messy and unwieldy if there are many event handlers, with more complex logic in each.\n\nWe're doing it differently so that we can separate the handlers into functions elsewhere in the code base. We do have one problem to solve though: if they are separate functions, how will they access the `connection` parameter in such a way that we can tell which player sent the command? With the concept of [_closures_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures), which are well-supported in Javascript, we can make functions that return another function. In this way, we can pass in the `connection.id` parameter to the first wrapping function, and it can return another function that takes the data arguments from the Socket.IO event caller. Because the second function is within the _closure_ of the first, it will have access to the `connection.id` parameter. The pattern looks like this:\n\n```js\nio.on(\"connection\", function (connection) {\n  connection.on(\"addPlayer\", addPlayer(connection.id));\n  connection.on(\"action\", action(connection.id));\n  // etc ...\n});\n\nfunction addPlayer(socketId) {\n  return (data) => {\n    // code here\n  };\n}\n\nfunction action(socketId) {\n  return (data) => {","metadata":{"id":763}}],["764",{"pageContent":"connection.on(\"action\", action(connection.id));\n  // etc ...\n});\n\nfunction addPlayer(socketId) {\n  return (data) => {\n    // code here\n  };\n}\n\nfunction action(socketId) {\n  return (data) => {\n    // code here\n  };\n}\n```\n\n## Handling new players\n\nAdd the following function to handle adding players:\n\n```js\nfunction addPlayer(socketId) {\n  return (data) => {\n    const numberOfPlayers = gameState.players.length;\n    if (numberOfPlayers >= 2) {\n      return;\n    }\n\n    let nextSymbol = \"X\";\n    if (numberOfPlayers === 1) {\n      if (gameState.players[0].symbol === \"X\") {\n        nextSymbol = \"O\";\n      }\n    }\n\n    const newPlayer = {\n      playerName: data.playerName,\n      id: socketId,\n      symbol: nextSymbol,\n    };\n\n    gameState.players.push(newPlayer);\n    if (gameState.players.length === 2) {\n      gameState.result.status = Statuses.PLAYING;\n      gameState.currentPlayer = newPlayer;\n    }\n    io.emit(\"gameState\", gameState);\n  };\n}\n```\n\nThis function does quite a bit. Let's go through the main features.\n\n- First it checks to see how many players are already in the game. If there are already 2 players, it returns early without changing anything. If this check passes, it goes on to add a new player. Note that even when there is no space in the game for a new player, we don't disconnect the player - they still get updates and can watch the match.\n- Next, the function figures out which symbol, _X_ or _O_, the new player should be. It will assign _X_ to the first player. If there is already a player, and the existing player's symbol is _X_, then it will assign _O_ to the new player. Note that there is a possible case where there is only one player, and their symbol is _O_. This would occur if there are 2 players, and the player with the _X_ symbol disconnects from the game, leaving only the player with the _O_ symbol. This is why we always check what symbol the existing player in the game has.","metadata":{"id":764}}],["765",{"pageContent":"- Then the function constructs a new player object with some identifying information, including the name that the player sends through, the `socketId` they connected on, and their symbol. When a new player requests to join, we expect them to send an object with a field `playerName` to tell us their handle.\n- Now we add the new player to the player array in our `gameState` object, so that they are part of the game.\n- We go on to check if we have 2 players, and start playing if we do. We begin by updating the status of the game to `PLAYING`, and set the `currentPlayer`, i.e. the player who is first to go, as the latest player to have joined.\n- Finally, we use the Socket.IO [`emit`](https://socket.io/docs/v4/emitting-events/) function to send the updated `gameState` to all connections. This will allow them to update the players' displays.\n\n## Handling player actions\n\nThe next handler takes care of the moves players make. We expect that the incoming data from the player will have a property called `gridIndex` to indicate which block on the board the player wants to mark. This should be a number that maps to the numbers for each block in the board, as in the picture earlier on.\n\n```js\nfunction action(socketId) {\n  return (data) => {\n    if (\n      gameState.result.status === Statuses.PLAYING &&\n      gameState.currentPlayer.id === socketId\n    ) {\n      const player = gameState.players.find((p) => p.id === socketId);\n      if (gameState.board[data.gridIndex] == null) {\n        gameState.board[data.gridIndex] = player;\n        gameState.currentPlayer = gameState.players.find((p) => p !== player);\n        checkForEndOfGame();\n      }\n    }\n    io.emit(\"gameState\", gameState);\n  };\n}\n```\n\nIn this function, we check a couple of things first:\n\n- The game status must be `PLAYING` - players can't make moves if the game is in any other state.\n- The player attempting to make the move must be the `currentPlayer`, i.e. the player whose turn it is to go.","metadata":{"id":765}}],["766",{"pageContent":"- The player attempting to make the move must be the `currentPlayer`, i.e. the player whose turn it is to go.\n\nIf these conditions are met, we find the player in the `gameState.players` array using the built-in [`find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) method on arrays, by looking for the player by their `socketId`.\n\nNow we can check if the board position (`gridIndex`) requested by the player is available. We check that the value for that position in the `gameState.board` array is `null`, and if it is, we assign the player to it.\n\nThe player has made a successful move, so we give the other player a turn. We switch the `gameState.currentPlayer` to the other player by using the array [`find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) method again, to get the player who _does not_ match the current player.\n\nWe also need to check if the move the player made changed the status of the game. Did that move make them win the game, or is it a draw, or is the game still in play? We call out to a function `checkForEndOfGame` to check for this. We'll implement this function a little later, after we're done with all the handlers.\n\nFinally, we send out the latest `gameState` to all the players (and spectators) to update the game UI.\n\n## Handling a rematch request\n\nLet's make it possible for a player to challenge their opponent to a rematch when the game has ended:\n\n```js\nfunction rematch(socketId) {\n  return (data) => {\n    if (gameState.players.findIndex((p) => p.id === socketId) < 0) return; // Don't let spectators rematch\n    if (\n      gameState.result.status === Statuses.WIN ||\n      gameState.result.status === Statuses.DRAW\n    ) {\n      resetGame();\n      io.emit(\"gameState\", gameState);\n    }\n  };\n}\n```","metadata":{"id":766}}],["767",{"pageContent":"if (\n      gameState.result.status === Statuses.WIN ||\n      gameState.result.status === Statuses.DRAW\n    ) {\n      resetGame();\n      io.emit(\"gameState\", gameState);\n    }\n  };\n}\n```\n\nThis function first checks if the connection sending the rematch request is actually one of the players, and not just a spectator. If we can't find a match for a player, we return immediately, making no changes.\n\nThen we check if the game is in one of the final states, either `WIN` or `DRAW`. If it is, we call out to a function `resetGame` to set up the game again. Finally, we send out the latest `gameState` to all the players.\n\nLet's implement the `resetGame` function:\n\n```js\nfunction resetGame() {\n  gameState.board = new Array(9).fill(null);\n\n  if (gameState.players.length === 2) {\n    gameState.result.status = Statuses.PLAYING;\n    const randPlayer = Math.floor(Math.random() * gameState.players.length);\n    gameState.currentPlayer = gameState.players[randPlayer];\n  } else {\n    gameState.result.status = Statuses.WAITING;\n    gameState.currentPlayer = null;\n  }\n}\n```\n\nLet's take a look at what we're doing here:\n\n- First, our function creates a new array for the `gameState` board. This effectively clears the board, setting all the positions back to `null`, or empty.\n- Then it checks that there are still 2 players connected. If there are, it sets the game status back to `PLAYING` and chooses at random which player's turn it is to go. We choose the first player randomly so that there isn't one player getting an advantage by going first every time.\n\nIf there is only one player remaining, we set the game status to `WAITING` instead, and listen for any new players who want to join. We also set the `currentPlayer` to null, as we will choose which player should go once the new player has joined.\n\n## Handling disconnects\n\nThe last handler we need to implement is if a connection to a player is lost. This could be because the player has exited the game (by closing the browser tab), or has other internet issues.\n\n```js","metadata":{"id":767}}],["768",{"pageContent":"The last handler we need to implement is if a connection to a player is lost. This could be because the player has exited the game (by closing the browser tab), or has other internet issues.\n\n```js\nfunction disconnect(socketId) {\n  return (reason) => {\n    gameState.players = gameState.players.filter((p) => p.id != socketId);\n    if (gameState.players !== 2) {\n      resetGame();\n      io.emit(\"gameState\", gameState);\n    }\n  };\n}\n```\n\nThis function uses the built-in array [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) function to remove the player that disconnected from the server. Since it's possible that the disconnect event isn't from a player but from a spectator, we check the number of players left after filtering the disconnecting socket from the player list. If there aren't 2 players remaining after filtering, we reset the game and send out the updated game state.\n\n## Checking for the end of the game\n\nNow we can get back to implementing the `checkForEndOfGame()` function we referenced in the `action` handler.\n\nWe're only interested in detecting 2 cases: A win or a draw.\n\nThere are just 8 patterns that determine if a player has won at tic-tac-toe. Let's map them to our board with its indexed blocks:\n\n![All possible win lines](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/allwins.png)\n\nWe can encode each of these winning patterns into an array of 3 numbers each. Then we can add each of those patterns to a larger array, like this:\n\n```js\nconst winPatterns = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n```\n\nNow that we have each winning pattern in an array, we can loop through each of them to see if there is a player that has positions that match any of the patterns.","metadata":{"id":768}}],["769",{"pageContent":"[0, 4, 8],\n  [2, 4, 6],\n];\n```\n\nNow that we have each winning pattern in an array, we can loop through each of them to see if there is a player that has positions that match any of the patterns.\n\nSince the players are also in an array in `gameState.players`, we can loop through that array, and check each player against the winning pattern array. If a player matches any of these patterns, we can change the game status to `WIN` and set that player as the winner in the results.\n\nHere is the code to do that:\n\n```js\nfunction checkForEndOfGame() {\n  // Check for a win\n  gameState.players.forEach((player) => {\n    winPatterns.forEach((seq) => {\n      if (\n        gameState.board[seq[0]] == player &&\n        gameState.board[seq[1]] == player &&\n        gameState.board[seq[2]] == player\n      ) {\n        gameState.result.status = Statuses.WIN;\n        gameState.result.winner = player;\n      }\n    });\n  });\n\n  // Check for a draw\n  if (gameState.result.status != Statuses.WIN) {\n    const emptyBlock = gameState.board.indexOf(null);\n    if (emptyBlock == -1) {\n      gameState.result.status = Statuses.DRAW;\n    }\n  }\n}\n```\n\nWe also check for a draw in this function. A draw is defined as when all the blocks are occupied (no more moves can be made), but no player has matched one of the win patterns. To check if there are no more empty blocks, we use the array method [`indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) to find any `null` values in `gameState.board` array. Remember that `null` means an empty block here. The `indexOf` method will return `-1` if it can't find any `null` values. In that case, we set the game status to `DRAW`, ending the game.\n\nNow we have all the functionality we need on the server, let's move on to building the Kaboom website the players will use to play the game.\n\n## Setting up Kaboom\n\nTo start, we need to set up Kaboom with the screen size and colors we want for the game window. Replace the code in `main.js` with the code below:\n\n```js","metadata":{"id":769}}],["770",{"pageContent":"## Setting up Kaboom\n\nTo start, we need to set up Kaboom with the screen size and colors we want for the game window. Replace the code in `main.js` with the code below:\n\n```js\nimport kaboom from \"kaboom\";\n\nkaboom({\n  background: [0, 0, 0],\n  width: 1000,\n  height: 600,\n});\n```\n\nThis creates a new Kaboom canvas with a black background.\n\n## Setting up Kaboom with Socket.IO\n\nNow we can add a reference to Socket.IO. Normally, in a plain HTML project, we could add a [`<script>`](https://www.w3schools.com/tags/tag_script.asp) tag and reference the Socket.IO [client script](https://socket.io/docs/v4/client-installation/#Installation), hosted automatically on our game server. However, here we will add the script programmatically. We can do this by accessing the [`document`](https://developer.mozilla.org/en-US/docs/Web/API/Document) object available in every browser, and insert a new element with our script. Add the following code to the `main.js` file below the code to initialise Kaboom.\n\n```js\nlet script = document.createElement(\"script\");\nscript.src =\n  \"https://tic-tac-toe-server--<YOUR_USER_NAME>.repl.co\" +\n  \"/socket.io/socket.io.js\";\ndocument.head.appendChild(script);\n```\n\nReplace the `<YOUR_USER_NAME>` part of the URL with your Replit username. This code inserts the new `<script>` tag into the [`<head>`](https://www.w3schools.com/tags/tag_head.asp) section of the underlying HTML page that Kaboom runs in.\n\nLet's move on to creating the relevant scenes for our game. Kaboom [\"scenes\"](https://kaboomjs.com/#scene) allow us to group logic and levels together. In this game we'll have 2 scenes:\n\n- A \"startGame\" scene that will prompt for the player's name.\n- A \"main\" scene, which will contain all the logic to play the tic-tac-toe game.\n\nLet's move on to the code to prompt the player to enter their name.\n\n```js\nscene(\"startGame\", () => {\n  const SCREEN_WIDTH = 1000;\n  const SCREEN_HEIGHT = 600;\n\n  add([\n    text(\"What's your name? \", { size: 32, font: \"sinko\" }),\n    pos(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 3),","metadata":{"id":770}}],["771",{"pageContent":"```js\nscene(\"startGame\", () => {\n  const SCREEN_WIDTH = 1000;\n  const SCREEN_HEIGHT = 600;\n\n  add([\n    text(\"What's your name? \", { size: 32, font: \"sinko\" }),\n    pos(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 3),\n    origin(\"center\"),\n  ]);\n\n  const nameField = add([\n    text(\"\", { size: 32, font: \"sinko\" }),\n    pos(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2),\n    origin(\"center\"),\n  ]);\n\n  charInput((ch) => {\n    nameField.text += ch;\n  });\n\n  keyRelease(\"enter\", () => {\n    go(\"main\", { playerName: nameField.text });\n  });\n});\n\ngo(\"startGame\");\n```\n\nTo keep the calculations for the UI layout simpler, we'll use a fixed size for the screen. That's where the 2 constants for the screen width and height come in.\n\nWe use the Kaboom [`add`](https://kaboomjs.com/doc#add) function to display the prompt \"What's your name?\" on the screen, using the [`text`](https://kaboomjs.com/doc#text) component. We choose a position halfway across the screen, `SCREEN_WIDTH / 2`, and about a third of the way down the screen, `SCREEN_HEIGHT / 3`. We add the [`origin`](https://kaboomjs.com/doc#origin) component, set to `center`, to indicate that the positions we set must be in the center of the text field.\n\nThen we add another object with an empty `\"\"` text component. This will display the characters the player types in. We position it exactly halfway down and across the screen. We also hold a reference to the object in the constant `nameField`.\n\nTo get the user's keyboard input, we use the Kaboom function [`charInput`](https://kaboomjs.com/doc#charInput). This function calls an event handler each time a key on the keyboard is pressed. We take that character and append it to the text in the `nameField` object. Now, when a player presses a key to enter their name, it will show up on the screen.","metadata":{"id":771}}],["772",{"pageContent":"Finally, we use the Kaboom function [`keyRelease`](https://kaboomjs.com/doc#keyRelease) to listen for when the player pushes the `enter` key. We'll take that as meaning they have finished entering their name and want to start the game. In the handler, we use the Kaboom [`go`](https://kaboomjs.com/doc#go) function to redirect to the main scene of the game.\n\n## Adding the game board\n\nNow we can add the UI elements for the game itself. Create the \"main\" scene in your Kaboom repl by adding the following code to draw the tic-tac-toe board:\n\n```js\nscene(\"main\", ({ playerName }) => {\n  // Board\n  add([rect(1, 400), pos(233, 100)]);\n\n  add([rect(1, 400), pos(366, 100)]);\n\n  add([rect(400, 1), pos(100, 233)]);\n\n  add([rect(400, 1), pos(100, 366)]);\n});\n```\n\nThis adds 4 rectangles with a width of 1 pixel and length of 400 pixels to the screen - each rectangle is more like a line. This is how we draw the lines that create the classic tic-tac-toe board shape. The first 2 rectangles are the vertical lines, and the second 2 are the horizontal lines. We place the board closer to the left side of the screen, instead of the center, to save space for game information to be displayed on the right hand side of the screen.\n\nIf you run the game, and enter your name, you should see the board layout like this:\n\n![board layout](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/boardLayout.png)\n\nNow we need to add a way to draw the _X_ and _O_ symbols in each block. To do this, we'll add objects with text components in each block of the board. First, we'll make an array containing the location and size of each block. Add the following code snippets within the \"main\" scene we created above:\n\n```js\nconst boardSquares = [\n  { index: 0, x: 100, y: 100, width: 133, height: 133 },\n  { index: 1, x: 233, y: 100, width: 133, height: 133 },\n  { index: 2, x: 366, y: 100, width: 133, height: 133 },\n  { index: 3, x: 100, y: 233, width: 133, height: 133 },\n  { index: 4, x: 233, y: 233, width: 133, height: 133 },","metadata":{"id":772}}],["773",{"pageContent":"{ index: 2, x: 366, y: 100, width: 133, height: 133 },\n  { index: 3, x: 100, y: 233, width: 133, height: 133 },\n  { index: 4, x: 233, y: 233, width: 133, height: 133 },\n  { index: 5, x: 366, y: 233, width: 133, height: 133 },\n  { index: 6, x: 100, y: 366, width: 133, height: 133 },\n  { index: 7, x: 233, y: 366, width: 133, height: 133 },\n  { index: 8, x: 366, y: 366, width: 133, height: 133 },\n];\n```\n\nWe can run through this array and create a text object that we can write to when we want to update the symbols on the board. Let's create a function to do that.\n\n```js\nfunction createTextBoxesForGrid() {\n  boardSquares.forEach((square) => {\n    let x = square.x + square.width * 0.5;\n    let y = square.y + square.height * 0.5;\n    square.textBox = add([text(\"\", 40), pos(x, y), origin(\"center\")]);\n  });\n}\n\ncreateTextBoxesForGrid();\n```\n\nThis function uses the array [`forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) method to loop through each \"square\" definition in the `boardSquares` array. We then find the center `x` and `y` of the square, and [`add`](https://kaboomjs.com/doc#add) a new text object to the screen, and also add it to the square definition on the field `textBox` so we can access it later to update it. We use the `origin` component to ensure the text is centered in the square.\n\nFinally, we call the function to create the text boxes.\n\n## Adding player names and game status\n\nNow let's add some areas for the player's names and for the current status of the game (whose turn it is to play, if someone has won, or if it's a draw).\n\n```js\n// Players and game status elements\nconst playerOneLabel = add([\n  text(\"\", { size: 20, font: \"sinko\" }),\n  pos(600, 100),\n]);\n\nconst playerTwoLabel = add([\n  text(\"\", { size: 20, font: \"sinko\" }),\n  pos(600, 150),\n]);\n\nconst statusLabel = add([\n  text(\"\", { size: 20, font: \"sinko\" }),\n  pos(600, 200),\n  color(0, 255, 0),\n]);\n```","metadata":{"id":773}}],["774",{"pageContent":"]);\n\nconst playerTwoLabel = add([\n  text(\"\", { size: 20, font: \"sinko\" }),\n  pos(600, 150),\n]);\n\nconst statusLabel = add([\n  text(\"\", { size: 20, font: \"sinko\" }),\n  pos(600, 200),\n  color(0, 255, 0),\n]);\n```\n\nHere we add 3 objects with [`text`](https://kaboomjs.com/doc#text) components. The first 2 are placeholders for the player names and symbols. The third one is for the game status. They are positioned to the right of the screen, and contain empty text to start. We'll change the contents as we receive new game states from the server. The last object has a `color` component to set the color of the text to green. This is to make the status message stand out from the rest of the text.\n\n## Connecting to the server\n\nTo connect to the game server, we need to initialize the Socket.IO library we dynamically added earlier. We need to provide the URL to the server repl, so copy that from the output window of the server repl:\n\n![Copying server url](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/server-url.png)\n\nNow add this code along with the server URL to the \"main\" scene in the player repl:\n\n```js\nvar socket = io(\"https://tic-tac-toe-server--<YOUR_USER_NAME>.repl.co\");\n\nsocket.on(\"connect\", function () {\n  socket.emit(\"addPlayer\", {\n    playerName: playerName,\n  });\n});\n```\n\nIn the first line, we initialize the [Socket.IO client library](https://socket.io/docs/v4/client-initialization/) to connect to the server. Then we add a listener to the [`connect`](https://socket.io/docs/v4/client-socket-instance/#Socket-connected) event. This lets us know when we have established a connection to the server.","metadata":{"id":774}}],["775",{"pageContent":"If we have a connection, we then [`emit`](https://socket.io/docs/v4/emitting-events/) an event to the server, with our custom event type `addPlayer`. We also add in the player name, which we passed to this scene from the `startGame` scene. Emitting the `addPlayer` event to the server will cause the `addPlayer` event handler to fire on the server side, adding the player to the game, and emitting back the game state.\n\n## Handling updated game state\n\nRemember that our server emits a `gameState` event whenever something changes in the game. We'll listen for that event, and update all the UI elements in an event handler.\n\nFirst, we need to add the definitions of each status as we have done on the server side, so that we can easily reference them in the code:\n\n```js\nconst Statuses = {\n  WAITING: \"waiting\",\n  PLAYING: \"playing\",\n  DRAW: \"draw\",\n  WIN: \"win\",\n};\n```\n\nNow we can add a listener and event handler:\n\n```js\nsocket.on(\"gameState\", function (state) {\n  for (let index = 0; index < state.board.length; index++) {\n    const player = state.board[index];\n    if (player != null) {\n      boardSquares[index].textBox.text = player.symbol;\n    } else {\n      boardSquares[index].textBox.text = \"\";\n    }\n  }\n\n  statusLabel.text = \"\";\n  switch (state.result.status) {\n    case Statuses.WAITING:\n      statusLabel.text = \"Waiting for players....\";\n      break;\n    case Statuses.PLAYING:\n      statusLabel.text = state.currentPlayer.playerName + \" to play\";\n      break;\n    case Statuses.DRAW:\n      statusLabel.text = \"Draw! \\nPress R for rematch\";\n      break;\n    case Statuses.WIN:\n      statusLabel.text =\n        state.result.winner.playerName + \" Wins! \\nPress R for rematch\";\n      break;\n    default:\n      break;\n  }\n\n  playerOneLabel.text = \"\";\n  playerTwoLabel.text = \"\";\n  if (state.players.length > 0) {\n    playerOneLabel.text =\n      state.players[0].symbol + \": \" + state.players[0].playerName;\n  }\n\n  if (state.players.length > 1) {\n    playerTwoLabel.text =\n      state.players[1].symbol + \": \" + state.players[1].playerName;\n  }\n});","metadata":{"id":775}}],["776",{"pageContent":"}\n\n  if (state.players.length > 1) {\n    playerTwoLabel.text =\n      state.players[1].symbol + \": \" + state.players[1].playerName;\n  }\n});\n```\n\nThis function looks quite long, but it's mainly just updating the text boxes we added.\n\nFirst, we loop through the board positions array that is passed from the server on the `state` payload, to check each block for a player positioned on it. If there is a player on a block, we write that player's symbol to the corresponding text box, found in the `boardSquares` array we created above. If there is no player in the block, i.e it's a `null` value, we write an empty string to the text block.\n\nThen we update the `statusLabel` to show what is currently happening in the game. We use a [`switch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) statement to create logic for each of the possibilities. We write a different message to the `statusLabel` text box depending on the status, drawing from data in the `gameState` object.\n\nNext we update the player name text boxes. First we reset them, in case one of the players has dropped out. Then we update the text boxes with the players' symbols and names. Note that we first check if there are the corresponding players in the array.\n\nNow that we're done with updating from the game state, let's try running the game again. Open the game window in a new tab so that requests to the repl server don't get blocked by the browser due to the CORS header 'Access-Control-Allow-Origin' not matching in the embedded window.\n\n![Open in new tab](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/open-in-new-tab.png)\n\nMake sure the server is also running, and enter your name. You should see something like this:\n\n![Waiting for another player](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/waiting.png)","metadata":{"id":776}}],["777",{"pageContent":"Make sure the server is also running, and enter your name. You should see something like this:\n\n![Waiting for another player](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/waiting.png)\n\nYou can connect to your game in another browser tab, and enter another name. Then you should see both names come up, and the status message change to allow a player to make a move. Of course, we haven't yet implemented the code to enable making a move from the UI, so let's do that now.\n\n## Handling player moves\n\nWe want a player to be able to click on a block to place their move. Kaboom has a function [`onMouseRelease`](https://kaboomjs.com/doc#onMouseRelease) that we can use to handle mouse click events. All we need then is the position the mouse cursor is at, and we can map that to one of the board positions using our `boardSquares` array to do the lookup. We'll use the Kaboom function [`mousePos`](https://kaboomjs.com/doc#mousePos) to get the coordinates of the mouse:\n\n```js\nonMouseRelease(() => {\n  const mpos = mousePos();\n  // find the square we clicked on\n  for (let index = 0; index < boardSquares.length; index++) {\n    const square = boardSquares[index];\n    if (\n      mpos.x > square.x &&\n      mpos.x < square.x + square.width &&\n      mpos.y > square.y &&\n      mpos.y < square.y + square.height\n    ) {\n      socket.emit(\"action\", {\n        gridIndex: square.index,\n      });\n      break;\n    }\n  }\n});\n```\n\nIf we find a 'hit' on one of the board squares, we emit our `action` event. We pass the index of the square that was clicked on as the payload data. The server listens for this event, and runs the logic we added for the `action` event on the server side. If the action changes the game state, the server will send back the new game state, and the UI elements update.","metadata":{"id":777}}],["778",{"pageContent":"The only other input we need to implement is to check if the player wants a rematch. To do that, we'll assign the `r` key as the rematch command. We can use the Kaboom function [`charInput`](https://kaboomjs.com/doc#charInput) to listen for key press events. We'll check if the key is `r`, or `R`, then emit the `rematch` event. We don't have any data to pass with that, so we'll just pass `null`.\n\n```js\ncharInput((ch) => {\n  if (ch === \"r\" || ch === \"R\") {\n    socket.emit(\"rematch\", null);\n  }\n});\n```\n\nNow you can run the game (and the server), and open the game in another tab, and you should be able to play tic-tac-toe against yourself! Send a link to the game to a friend, and see if they can join and play against you.\n\n![playing tic tac toe](https://docimg.replit.com/images/tutorials/27-tictactoe-kaboom/playing.png)\n\n## Next Steps\n\nNow that you know the basics of creating a multiplayer online game, try your hand at making some different games, like checkers or chess or go.\n\nHappy coding!\n\n## Tic-tac-toe repl\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/tic-tac-toe-new?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Tic-tac-toe server repl\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/tic-tac-toe-server-new?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":778}}],["779",{"pageContent":"---\ntitle: Conway's Game of Life with Kaboom.js\n---\n\n# Building Conway's Game of Life with Kaboom.js\n\nConway's Game of Life was invented back in 1970 by John Conway. He called it a Zero-Player Game, as it was played by the computer. We could call it a sim game as well, as we create the initial state of the game, and then let it evolve according to pre-defined rules.\n\nThe Game of Life is played on a grid of cells. Each cell has a state of being either alive or dead. A set of rules is applied on each generation to determine the next state of the cells. These rules are:\n\n1. If a cell is alive and has less than two live neighbors, it dies.\n1. If a cell is alive and has more than three live neighbors, it dies.\n1. If a cell is alive and has two or three live neighbors, it lives on to the next generation.\n1. If a cell is dead and has exactly three live neighbors, it becomes a live cell.\n\nJohn Conway spent about 18 months of his coffee breaks tweaking the rules for the game, to come up with the rule set that made the most interesting patterns and properties. He didn't build it for a computer initially. He first played it using a [Go board](<https://en.wikipedia.org/wiki/Go_(game)>), updating the game manually.\n\nThe interesting thing about Game of Life is that, despite its simple rules, it can create amazingly complex and interesting patterns, and even \"lifeforms\" and machines. It's pretty cool to set some patterns, and then watch how they evolve.\n\nIn this tutorial, we'll build the Game of Life using JavaScript and Kaboom.\n\n<video controls width=\"100%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/45-game-of-life/gameplay.mp4\" type=\"video/mp4\" >\n</video>\n\n## Getting started on Replit\n\nHead over to [Replit](https://replit.com/) and create a new repl, using \"Kaboom\" as the template. Name it something like \"Game of life\", and click \"Create Repl\".\n\n![Creating a new repl](https://docimg.replit.com/images/tutorials/45-game-of-life/create-repl.png)","metadata":{"id":779}}],["780",{"pageContent":"![Creating a new repl](https://docimg.replit.com/images/tutorials/45-game-of-life/create-repl.png)\n\nAfter the repl has booted up, you should see a `main.js` file under the \"Code\" section. This is where we'll start coding. It already has some code in it, but we'll replace that.\n\n## Setting up Kaboom\n\nWe need to initialize Kaboom. In the \"main\" code file, first delete all the example code. Now we can add reference to Kaboom, and initialize it:\n\n```javascript\nimport kaboom from \"kaboom\";\n\n// initialize context\nkaboom({\n  background: [0, 0, 0],\n  width: 1024,\n  height: 640,\n  scale: 1,\n  debug: true,\n});\n```\n\nWe initialize the Kaboom drawing context with a black background (`[0, 0, 0]`), a width of 1024 pixels, a height of 640 pixels, and a scale factor of `1`. We also set `debug` to `true`, so we can access Kaboom diagnostics and info as we are developing. You can bring up the Kaboom debug info in the simulation by pressing `F1`.\n\n## Designing the model\n\nGame of Life is played on a two-dimensional grid, or matrix. Each cell has a state of being either alive or dead. Let's think about how to model this in code.\n\nSince we only need to have two states per cell, we can use a Boolean value to represent the state of these four cells:\n\n![4 cells in a row](https://docimg.replit.com/images/tutorials/45-game-of-life/small-row.png)\n\n```javascript\nlet cell1 = false;\nlet cell2 = true;\nlet cell3 = false;\nlet cell4 = true;\n```\n\nDeclaring each cell gets tedious really fast, and it's also difficult to loop through the cells when we want to update the model.\n\nJavaScript has a concept of an [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array). This is a one-dimensional construct, like a list of values. We could use an array to model each row in the grid. Each element of the array would be a Boolean value, `true` if the cell is alive, and `false` if it is dead.\n\nSo, this row could be represented in a JavaScript array as:","metadata":{"id":780}}],["781",{"pageContent":"So, this row could be represented in a JavaScript array as:\n\n![a row of cells](https://docimg.replit.com/images/tutorials/45-game-of-life/grid-row.png)\n\n```javascript\nlet row1 = [false, true, true, true, false, true, false];\n```\n\nIf we wanted to represent this grid:\n\n![a grid of cells](https://docimg.replit.com/images/tutorials/45-game-of-life/grid.png)\n\nWe could create a new array for each row, like this:\n\n```javascript\nlet row1 = [true, true, true, false, true];\nlet row2 = [true, false, false, false, true];\nlet row3 = [false, true, false, true, false];\nlet row4 = [true, false, true, false, true];\n```\n\nThis is OK, but it would be nicer to have all the rows in a single construct, so we can easily manipulate and query it.\n\nOne solution is to use the array construct again. An array doesn't just need to be a list of single values, it can also be a list of arrays. So we can make an array for the grid, and each of its elements would be the row arrays:\n\n```javascript\nlet grid = [\n  [true, true, true, false, true],\n  [true, false, false, false, true],\n  [false, true, false, true, false],\n  [true, false, true, false, true],\n];\n```\n\nNow this makes it easier to query the grid and manipulate it. For example, if we wanted to find out the value of the cell at row 2, column 3, we could do this:\n\n```javascript\nlet value = grid[1][2];\n```\n\nWe use [1] and [2] instead of [2] and [3] because arrays are zero-indexed. This means the first row is at index 0, and the first column is at index 0, so the first cell (1) is actually referenced as grid[0][0]\n\nWe can use the same notation when setting a cell value:\n\n```javascript\ngrid[1][2] = true;\n```\n\n## Implementing the model\n\nNow that we've figured out how to model the grid, we can implement some functions to create and manipulate the grid.","metadata":{"id":781}}],["782",{"pageContent":"```javascript\ngrid[1][2] = true;\n```\n\n## Implementing the model\n\nNow that we've figured out how to model the grid, we can implement some functions to create and manipulate the grid.\n\nFirst, let's create a function to create a new grid. We'll call the grid a _matrix_ in the code, as this is the mathematical term for it. Therefore our function is called `createMatrix`. It uses a global constant `MATRIX_SIZE` to determine the number of rows and columns of the matrix, and returns an array of arrays of the specified size, with all cells set to dead, or `false`. Add the code below to the `main.js` file:\n\n```javascript\nconst MATRIX_SIZE = 64;\n\nfunction createMatrix() {\n  const matrix = new Array(MATRIX_SIZE);\n\n  for (var i = 0; i < matrix.length; i++) {\n    matrix[i] = new Array(MATRIX_SIZE).fill(false);\n  }\n  return matrix;\n}\n```\n\nNote that we use the array constructor by calling `new Array(MATRIX_SIZE)` to create each array. The first call to the constructor creates the \"outer\" array, and then we use a [for loop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) to repeatedly create the \"inner\", or row, arrays. To set the value of each cell in the row, we use the `fill` method on the row arrays. This method takes a single value, and sets all the values in the array to that value. We set all the values to `false`, or dead, to start.\n\nIn the Game of Life rules, there are multiple references to \"neighbor\" cells. Neighbors are any cells that touch a particular cell. For example, for the blue cell below, all the red cells are neighbors.\n\n![cell neighbors](https://docimg.replit.com/images/tutorials/45-game-of-life/neighbors.png)\n\nIn particular, the rules refer to the number of \"live\" neighbors a cell has. A handy function to have would be one that finds all the neighbors of a particular cell, and counts how many of them are alive.","metadata":{"id":782}}],["783",{"pageContent":"Notice how each neighbor cell is one row or column away from the cell we are looking at. So if we create a function that looks at each cell one position away from the target cell and counts how many of those cells are alive, we can use this to find the number of neighbors a cell has.\n\nRecall that we can reference any cell in our matrix structure using the notation `matrix[row_number][column_number]`. So, noting that every neighbor is one position away, we can add or subtract one from the row and column numbers to find the neighbors. A few examples:\n\n- The immediate left neighbor would be: `matrix[row_number][column_number - 1]`\n- The immediate right neighbor would be: `matrix[row_number][column_number + 1]`\n- The immediate top neighbor would be: `matrix[row_number - 1][column_number]`\n- The immediate bottom neighbor would be: `matrix[row_number + 1][column_number]`\n- The immediate top left neighbor would be: `matrix[row_number - 1][column_number - 1]`\n\nSo, if we have the target cell coordinates, `x` and `y`, we can use the following code to find the number of neighbors:\n\n```javascript\nfunction neighbors(matrix, x, y) {\n  let count = 0;\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      if (i === 0 && j === 0) {\n        // this is the cell itself, do nothing\n        continue;\n      }\n      let currentX = x + i;\n      let currentY = y + j;\n      if (\n        currentX < 0 ||\n        currentX >= MATRIX_SIZE ||\n        currentY < 0 ||\n        currentY >= MATRIX_SIZE\n      ) {\n        // this is an edge cell, do nothing\n        continue;\n      } else if (matrix[currentX][currentY] === true) {\n        // the neighbor is alive, count it\n        count++;\n      }\n    }\n  }\n  return count;\n}\n```","metadata":{"id":783}}],["784",{"pageContent":"continue;\n      } else if (matrix[currentX][currentY] === true) {\n        // the neighbor is alive, count it\n        count++;\n      }\n    }\n  }\n  return count;\n}\n```\n\nNotice that we use for loops to sweep from -1 to 1, which represents left to right and up to down. We use a conditional to check if the current cell is the target cell. We know it's the target cell if both of the sweep values are 0. If it is the target cell, we don't count it as a neighbor. We also check if the current cell is outside the grid (`<0 || >=sMATRIX_SIZE`), in which case we don't count it as a neighbor. Finally, if we have a valid neighbor cell, we check if it is alive, by testing if its value is `true`. If it is, we increment the count of \"living\" neighbors.\n\n## Implementing the rules\n\nNow that we have a representation, and a way to query the model for the number of neighbors a cell has, we can implement the rules of the Game of Life.\n\nRecall that the rules of the game of life are:\n\n1. If a cell is alive and has less than two live neighbors, it dies.\n1. If a cell is alive and has more than three live neighbors, it dies.\n1. If a cell is alive and has two or three live neighbors, it lives on to the next generation.\n1. If a cell is dead and has exactly three live neighbors, it becomes a live cell.\n\nThe rules are applied across all cells in the matrix with each _generation_. To avoid having a partially updated matrix, with cells in the next generation that are not yet updated, we can create a new, blank matrix. Then we can iterate over each cell in the current generation's matrix, apply the rules to each cell, and set the value of the cell in the next generation's matrix according to the result of the rules.\n\nLet's start with some pseudo-code to find the outline of this strategy:\n\n```javascript\n\ncreate nextMatrix\n\nfor each row in matrix\n  for each column in row\n    get alive neighbors of cell at matrix[row][column]\n    if cell is alive\n      if cell  has less than two live neighbors","metadata":{"id":784}}],["785",{"pageContent":"```javascript\n\ncreate nextMatrix\n\nfor each row in matrix\n  for each column in row\n    get alive neighbors of cell at matrix[row][column]\n    if cell is alive\n      if cell  has less than two live neighbors\n        set cell to dead in nextMatrix[row][column]\n      if cell has more than three live neighbors\n        set cell to dead in nextMatrix[row][column]\n      if cell has two or three live neighbors\n        set cell to alive in nextMatrix[row][column]\n    if cell is dead\n      if cell has exactly three live neighbors\n        set cell to alive in nextMatrix[row][column]\n\nreturn nextMatrix\n```\n\nTranslating to JavaScript, and using our matrix functions, we will write the following function:\n\n```javascript\nfunction nextGeneration(matrix) {\n  const nextMatrix = createMatrix();\n\n  for (var i = 0; i < matrix.length; i++) {\n    for (var j = 0; j < matrix[i].length; j++) {\n      const cellNeighbors = neighbors(matrix, i, j);\n\n      if (matrix[i][j] === true) {\n        if (cellNeighbors === 2 || cellNeighbors === 3) {\n          nextMatrix[i][j] = true;\n        } else {\n          nextMatrix[i][j] = false;\n        }\n      }\n\n      if (matrix[i][j] === false) {\n        if (cellNeighbors === 3) {\n          nextMatrix[i][j] = true;\n        } else {\n          nextMatrix[i][j] = false;\n        }\n      }\n    }\n  }\n  return nextMatrix;\n}\n```\n\n## Updating each generation\n\nWe have a model, and we have the rules. We now need a way to regularly update the model with the rules to create one generation of the simulation after the other.\n\nKaboom has two key events to help us with this:\n\n- [`onUpdate`](https://kaboomjs.com/#onUpdate)\n- [`onDraw`](https://kaboomjs.com/#onDraw)\n\nThese two event handlers are called on every frame of the game. The `onUpdate` event is called first, and the `onDraw` event second. Drawing to the screen can only happen in the `onDraw` event handler.\n\nThis allows us to create a new generation using `onUpdate`, and then draw this update to the screen using `onDraw`.","metadata":{"id":785}}],["786",{"pageContent":"This allows us to create a new generation using `onUpdate`, and then draw this update to the screen using `onDraw`.\n\nA new frame is typically created 60 times per second, normally expressed as 60 frames per second (FPS). This means that we can create a new generation every 16.67 milliseconds (1s/60fps = 16.67 milliseconds). At times, we might want to slow this down so that we can see the patterns evolving while we watch. To control the interval between each generation, we can measure the time between updates and only create a new generation if the time between updates is greater than a preset threshold.\n\nWith Kaboom, all drawing, controls, and event handlers must be contained within a [`scene`](https://kaboomjs.com/#scene). We only need one scene for our game. Let's create a scene called `game`, containing the core `onUpdate` function, and some of the variables the game will need:\n\n```javascript\nscene(\"game\", () => {\n  let pause = true;\n  let updateInterval = 0.5;\n  let generation = 0;\n  let timeFromLastUpdate = 0;\n  let matrix = createMatrix();\n\n  onUpdate(() => {\n    if (pause) return;\n    timeFromLastUpdate += dt();\n    if (timeFromLastUpdate < updateInterval) return;\n    timeFromLastUpdate = 0;\n\n    generation++;\n    matrix = nextGeneration(matrix);\n  });\n\n  onDraw(() => {\n    // todo: draw the world\n  });\n});\n\ngo(\"game\");\n```\n\nWe've created a new scene called \"game\" here. In the code for the scene, we have a few variables which control various parameters of the simulation:\n\n- `pause`, a Boolean which indicates if the simulation should be paused, that is, not updated.\n- `updateInterval`, the time in seconds to wait between each generation update.\n- `generation`, a counter to track how many generations have been run.\n- `timeFromLastUpdate`, an accumulator tracking the time in seconds since the last generation was updated.\n- `matrix`, the model of the current generation.","metadata":{"id":786}}],["787",{"pageContent":"- `timeFromLastUpdate`, an accumulator tracking the time in seconds since the last generation was updated.\n- `matrix`, the model of the current generation.\n\nFollowing these variables, we have a handler for the [`onUpdate`](https://kaboomjs.com/#onUpdate) event. Kaboom calls this handler up to 60 times per second.\n\nFirst up in our handler function, we check if the game is paused. If so, we return immediately without making any changes.\n\nThen we add the time from the last update handler call to our `timeFromLastUpdate` accumulator. Kaboom has a helpful function [`dt`](https://kaboomjs.com/#dt), which returns the time since the `onUpdate` method was last called. We then check this accumulated time against our set `updateInterval` time to see if we should update the game and create a new generation. If the accumulated time in `timeFromLastUpdate` is less than this `updateInterval`, we leave early again.\n\nIf enough time has elapsed from the last generation update and it is time to update to the next generation, we first reset the `timeFromLastUpdate` accumulator to `0`. Then we update our generation counter, and replace the current generation matrix with next generation calculated by the `nextGeneration` function we created earlier.\n\nWe have put a placeholder handler for the `onDraw` event for now. We'll get to that in the next section.\n\nTo start the whole game off, we use the [`go`](https://kaboomjs.com/#go) function, which switches between scenes.\n\n## Creating the UI\n\nWe now need to create a UI to visualize and interact with the game.\n\nSome things that would be useful are:\n\n- Visualizing the game\n- Setting or clearing a cell\n- Running and pausing the game\n- Setting the speed of the game\n- Resetting the game\n\n### Visualization","metadata":{"id":787}}],["788",{"pageContent":"Some things that would be useful are:\n\n- Visualizing the game\n- Setting or clearing a cell\n- Running and pausing the game\n- Setting the speed of the game\n- Resetting the game\n\n### Visualization\n\nTo visualize the game, we can use some of lower level Kaboom [`draw`](https://kaboomjs.com/#drawSprite) functions. These allow us to draw shapes directly to the canvas. The shapes are not rich game objects like those created through Kaboom's [`add`](https://kaboomjs.com/#add) function, they are merely bitmaps on the drawing canvas. For this game, we don't need the advanced capabilities of Kaboom game objects, like gravity, collision detection, moving, and so on. That would just slow down our renders.\n\nLet's start off by adding in labels for the game state, speed, and generation number. Add the following code to the `game` scene:\n\n```javascript\nconst pauseText = add([\n  text(\"Paused\", { size: 16, font: \"sink\" }),\n  pos(650, 40),\n  origin(\"left\"),\n  layer(\"ui\"),\n]);\n\nconst speedText = add([\n  text(\"dt: 50ms\", { size: 16, font: \"sink\" }),\n  pos(650, 60),\n  origin(\"left\"),\n  layer(\"ui\"),\n]);\n\nconst generationText = add([\n  text(\"Generation: 0\", { size: 16, font: \"sink\" }),\n  pos(650, 80),\n  origin(\"left\"),\n  layer(\"ui\"),\n]);\n```\n\nWe've added some default text in here - it will soon be updated to real values in code we will add to the `onDraw` handler:\n\n```javascript\nonDraw(() => {\n  speedText.text = `dt: ${(updateInterval * 100).toFixed(0)}ms`;\n  pauseText.text = pause ? \"Paused\" : \"Running\";\n  generationText.text = `Generation: ${generation}`;\n});\n```\n\nThis update to the `onDraw` handler sets the text of the text labels to the variable values at that frame. Notice we use the JavaScript [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) for strings. This enables us to insert calculation and code directly into the strings using the `${}` placeholder notation.","metadata":{"id":788}}],["789",{"pageContent":"Now let's draw each of the cells in the matrix. We'll create a helper function for this. Add the following code to the `game` scene:\n\n```javascript\nconst CELL_SIZE = 10;\n\nfunction drawCell(row, col) {\n  drawRect({\n    width: CELL_SIZE,\n    height: CELL_SIZE,\n    pos: vec2(row * CELL_SIZE, col * CELL_SIZE),\n    color: rgb(100, 149, 237),\n    fill: true,\n  });\n}\n```\n\nThis function draws the cell at the given `row` and `col` of our matrix model. The function `drawRect` is a Kaboom function that draws a rectangle to the canvas. We use the constant `CELL_SIZE` to determine the width and height of each cell in pixels. The position on the canvas is set by multiplying the row and height by the cell size, using the `vec2` structure. A [`vec2`](https://kaboomjs.com/#vec2) is Kaboom's two-dimensional vector. The color is set to a classic bluish color (Google \"cornflower blue\"). We use the `fill` property to instruct Kaboom to fill the whole rectangle with the color.\n\nWe need one other helper function to draw the grid over the cells, so we can more easily see individual cells. Add the following code to the `game` scene:\n\n```javascript\nfunction drawGridLines() {\n  for (var i = 0; i <= MATRIX_SIZE; i++) {\n    drawLine({\n      p1: vec2(i * CELL_SIZE, 0),\n      p2: vec2(i * CELL_SIZE, MATRIX_SIZE * CELL_SIZE),\n      width: 1,\n      color: rgb(218, 165, 32),\n    });\n\n    drawLine({\n      p1: vec2(0, i * CELL_SIZE),\n      p2: vec2(MATRIX_SIZE * CELL_SIZE, i * CELL_SIZE),\n      width: 1,\n      color: rgb(218, 165, 32),\n    });\n  }\n}\n```","metadata":{"id":789}}],["790",{"pageContent":"color: rgb(218, 165, 32),\n    });\n\n    drawLine({\n      p1: vec2(0, i * CELL_SIZE),\n      p2: vec2(MATRIX_SIZE * CELL_SIZE, i * CELL_SIZE),\n      width: 1,\n      color: rgb(218, 165, 32),\n    });\n  }\n}\n```\n\nThis uses the Kaboom [`drawLine`](https://kaboomjs.com/#drawLine) function to draw the grid lines. We set up a loop to draw `MATRIX_SIZE` number of lines vertically and horizontally. The first `drawLine` call draws the vertical lines, and the second the horizontal lines. The start and end points for each line,`p1` and `p2`, are expressed as two-dimensional vectors, [`vec2`](https://kaboomjs.com/#vec2). The `width` property sets the width of the line, and the `color` property sets the color of the line.\n\nNow we can place and draw a cell on the screen. Let's go back to the `onDraw` handler to loop through the matrix and call out to the `drawCell` and `drawGridLines` functions. Update the `onDraw` handler like this:\n\n```javascript\nonDraw(() => {\n  speedText.text = `dt: ${(updateInterval * 100).toFixed(0)}ms`;\n  pauseText.text = pause ? \"Paused\" : \"Running\";\n  generationText.text = `Generation: ${generation}`;\n\n  // run through the matrix and draw the cells that are alive\n  for (var x = 0; x < MATRIX_SIZE; x++) {\n    for (var y = 0; y < MATRIX_SIZE; y++) {\n      if (matrix[x][y] === true) {\n        drawCell(x, y);\n      }\n    }\n  }\n  drawGridLines();\n});\n```\n\nHere we add looping through all rows and columns to get each cell. If the cell value is `true` (the cell is alive), we draw it to the canvas. Then, once we are done with the cell, we draw the grid lines to help us see each individual cell.\n\n### Setting or clearing a cell","metadata":{"id":790}}],["791",{"pageContent":"### Setting or clearing a cell\n\nWe can draw the game, but we need some way to set the starting patterns. We can use the mouse to click on cells to set them as alive or dead. Kaboom has the function [`onMousePress`](https://kaboomjs.com/#onMousePress) that lets us attach a handler whenever the mouse buttons are clicked. We can also filter depending on if the left or right button is clicked. Add the following code to the `game` scene:\n\n```javascript\nonMousePress(\"left\", (pos) => {\n  const row = Math.floor(pos.x / CELL_SIZE);\n  const col = Math.floor(pos.y / CELL_SIZE);\n  if (row < 0 || col < 0 || row >= MATRIX_SIZE || col >= MATRIX_SIZE) return;\n  matrix[row][col] = true;\n});\n\nonMousePress(\"right\", (pos) => {\n  const row = Math.floor(pos.x / CELL_SIZE);\n  const col = Math.floor(pos.y / CELL_SIZE);\n  if (row < 0 || col < 0 || row >= MATRIX_SIZE || col >= MATRIX_SIZE) return;\n  matrix[row][col] = false;\n});\n```\n\nOur `onMousePress` function takes the mouse button to filter by as a first parameter. The second parameter is the event handler function. In the event handler, we convert the screen `pos` from pixels to rows and columns in our matrix by dividing the screen pixel position by the `CELL_SIZE` in pixels.\n\nWe do a check to make sure the row and column is not outside the bounds of the matrix, if the player clicked outside of the grid for example.\n\nThen, for the left click handler, we update the state of the clicked cell to `true`, or alive. For the right click handler, we update the state of the clicked cell to `false`, or dead.\n\nGreat, now we can set cells!\n\n### Running and pausing the game\n\nNow we can model the game, see it, and set states. Let's add a control to start and pause the simulation.\n\nWe can use Kaboom's [`onKeyPress`](https://kaboomjs.com/#onKeyPress) function to attach a handler whenever a key is pressed. Add the following code to the `game` scene:\n\n```javascript\nonKeyPress(\"space\", () => {\n  pause = !pause;\n});\n```","metadata":{"id":791}}],["792",{"pageContent":"```javascript\nonKeyPress(\"space\", () => {\n  pause = !pause;\n});\n```\n\nThis fires whenever the spacebar is pressed. It toggles the `pause` variable using the Boolean NOT `!` operator to the opposite of its current value. Recall the `pause` flag is used in the `onUpdate` handler we added earlier.\n\n### Setting the speed of the game\n\nWe might want to speed up or slow down the simulation. We'll use the up and down arrow keys to change the `updateInterval` value that is checked in the `onUpdate` handler to determine if it is time to create the next generation. Add the following code to the `game` scene:\n\n```javascript\nonKeyDown(\"down\", () => {\n  updateInterval += 0.01;\n});\n\nonKeyDown(\"up\", () => {\n  updateInterval -= 0.01;\n  updateInterval = Math.max(0.0, updateInterval);\n});\n```\n\nHere we either add or subtract 0.01 seconds to the interval. Note that in the `up` key handler, which makes the interval between updates shorter, therefore increasing the speed of the simulation, we make sure that our interval cannot go negative. A negative time interval would make no sense, unless we accidentally invent time travel.\n\n### Resetting the game\n\nThe last control we need to add in is one to completely reset the simulation, clearing out all cells if we want to start fresh. We'll listen for the `\"r\"` key being pressed. If the `\"r\"` is pressed, we'll create a new blank matrix, and reset the generation counter. Add the following to the `game` scene:\n\n```js\nonKeyPress(\"r\", () => {\n  matrix = createMatrix();\n  updateInterval = 0.5;\n  generation = 0;\n});\n```\n\n## Running the game\n\nNow that we've finished building the game, let's give it a go!\n\nWe'll start off with some basic patterns that oscillate between two or more states. Using the left mouse button, click on cells to fill them with the following starting patterns.\n\n![oscillating starting patterns](https://docimg.replit.com/images/tutorials/45-game-of-life/oscillating-start.png)\n\nAfter you enter them, press the space bar to start the simulation. You should see something like this:","metadata":{"id":792}}],["793",{"pageContent":"After you enter them, press the space bar to start the simulation. You should see something like this:\n\n![oscillators](https://docimg.replit.com/images/tutorials/45-game-of-life/oscillators.gif)\n\nTry using the up and down arrow keys to speed up or slow down the simulation.\n\nNow let's try some patterns that move and are a bit more lifelike. This one is called a glider:\n\n![glider starting pattern](https://docimg.replit.com/images/tutorials/45-game-of-life/glider-start.png)\n\nCreate it somewhere near the top left of your grid (you can press space to stop the previous simulation, and `r` to reset the game).\n\nAfter entering the glider pattern, press `space` to start the simulation. You should see it move across the screen like this:\n\n![glider moving](https://docimg.replit.com/images/tutorials/45-game-of-life/glider.gif)\n\nPretty cool! Let's try some spaceships now:\n\n![space ship starting pattern](https://docimg.replit.com/images/tutorials/45-game-of-life/spaceship-start.png)\n\nThis should start flying across the screen:\n\n![space ship flying](https://docimg.replit.com/images/tutorials/45-game-of-life/spaceship.gif)\n\nHere's a more random one. It's called \"die hard\", and goes through 130 generations with random patterns before dying out. Create it near the center of the grid, as it needs a bit of space:\n\n![die hard starting pattern](https://docimg.replit.com/images/tutorials/45-game-of-life/die-hard-start.png)\n\nIt looks a bit like a wild fireworks show when it runs:\n\n![die hard show](https://docimg.replit.com/images/tutorials/45-game-of-life/die-hard.gif)\n\nThere are also patterns that can create other patterns. These type of patterns are known as _guns_. Here is Gosper's glider gun, the first that was discovered. It creates gliders. Try this pattern out:\n\n![](https://docimg.replit.com/images/tutorials/45-game-of-life/glider-gun-start.png\"\nalt=\"glider gun starting pattern\"\nstyle={{ width: \"80%\" }}\n/>\n\nWhen you run it, you should see it emit gliders! Guns are some of the coolest patterns you can create.","metadata":{"id":793}}],["794",{"pageContent":"alt=\"glider gun starting pattern\"\nstyle={{ width: \"80%\" }}\n/>\n\nWhen you run it, you should see it emit gliders! Guns are some of the coolest patterns you can create.\n\n![glider gun](https://docimg.replit.com/images/tutorials/45-game-of-life/glider-gun.gif)\n\n## Next steps\n\nThere are many, many patterns that have been discovered for Conway's Game of Life, and many more still being discovered today. Perhaps you could discover some! Take at look the [Wikipedia article](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) for more info on Conway's Game of Life and some patterns. The Game of Life even has [its own wiki](https://conwaylife.com).\n\nAlso try Google searching for \"Conway Game of Life patterns\". There is a myriad of sites out there listing patterns to try.\n\nAn [interesting interview with John Conway](https://www.youtube.com/watch?v=R9Plq-D1gEk) was done a few years back. Sadly, John Conway died in 2020, but his game will last forever.\n\nYou can find the code for this tutorial here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Game-of-life?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":794}}],["795",{"pageContent":"---\ntitle: Kaboom editor\n---\n\n# Kaboom editor\n\n[Kaboom.js](https://kaboomjs.com) is a game development library that makes it fun and easy to build games!\n\nThis doc explains the tools provided by the Kaboom editor on Replit. To learn more about the Kaboom.js library, check out the docs, guides and examples on the [Kaboom website](https://kaboomjs.com/).\n\n## Scene Manager\n\nKaboom [\"scenes\"](https://kaboomjs.com/#scene) allow us to group logic and levels together. In Kaboom.js, you write each scene's content inside a scene block:\n\n```js\nscene(\"start\", () => {\n\tadd(...);\n\taction(...);\n\tkeyPress(...);\n});\n\nscene(\"game\", () => {\n\t// ...\n});\n```\n\n## Sprite Manager & Editor\n\nThere are several ways to add sprites to a Kaboom repl:\n\n1. Using the upload icon.\n\n![Upload icon](https://docimg.replit.com/images/tutorials/kaboom/upload-icon.png)\n\n2. Clicking on the files icon and then dragging and dropping the sprites onto the \"sprites\" folder.\n\n![Drag to upload](https://docimg.replit.com/images/tutorials/kaboom/upload-sprites.gif)\n\n3. Choosing a sprite from the Kaboom assets library.\n\n![Choose from assets library](https://docimg.replit.com/images/tutorials/kaboom/assets-lib.png)\n\n4. Clicking the '+' icon to create a new sprite using the sprite editor.\n\n![Create assets](https://docimg.replit.com/images/tutorials/kaboom/addsprite.png)\n\nOnce you have created a sprite you can load it into your game by opening your main code file, placing your cursor at the point in your file where you want the sprite to be loaded, and then selecting \"Insert load code.\"\n\n![Insert load code](https://docimg.replit.com/images/tutorials/kaboom/insert-load-code.gif)\n\nThis should insert a line of code that looks like this:\n\n```javascript\nloadPedit(\"Sample\", \"sprites/Sample.pedit\");\n```\n\nNotice the use of `loadPedit` instead of `loadSprite`. With this call in place you should be able to use the component `sprite(\"Sample\")` in your game.\n\n![Load created assets](https://docimg.replit.com/images/tutorials/kaboom/loadpedit.png)","metadata":{"id":795}}],["796",{"pageContent":"![Load created assets](https://docimg.replit.com/images/tutorials/kaboom/loadpedit.png)\n\n(Right now, the sprite editor is not optimized for big sized sprites.)\n\n## Sound Manager\n\nSound manager is currently just a place similar to sprite manager that lists your sounds. You can drag your sound files here or import them from the asset library and then load them into the game with `loadSound`. A built-in sound/music editor is in the works.\n\n![Load sounds](https://docimg.replit.com/images/tutorials/kaboom/sounds.png)\n\n## Debug\n\nPressing F1 in the game turns on Kaboom debugging.\n\n## Settings\n\nTo configure the game environment such as the size of the game canvas you initialise the [Kaboom context](https://kaboomjs.com/#kaboom) with a configuration object as below:\n\n```javascript\nkaboom({\n  background: [0, 0, 0],\n  width: 320,\n  height: 240,\n});\n```\n\nAs an example this creates a new Kaboom canvas with a black background and also sets the size of the view to 320x240 pixels.\n\nNew Kaboom repls default to the latest version. If a newer version comes out after you created the repl, you need to manually select it, unless if you're on the `dev` version, in which case you'll always be on the latest version and breaking changes are possible.","metadata":{"id":796}}],["797",{"pageContent":"---\ntitle: Physics playground with Kaboom.js\n---\n\n# Build a physics playground with Kaboom.js\n\nIn this tutorial, we will be building a simple physics playground with [Kaboom.js](https://kaboomjs.com/). This will be a 2D side-view platformer in which the player can use a [gravity gun](https://en.wikipedia.org/wiki/Gravity_gun) to pick up and shoot objects in the world, similar to games like _Half-Life 2_ and _Rochard_.\n\n![Game play](https://docimg.replit.com/images/tutorials/36-physics-playground/gameplay.gif)\n\nBy the end of this tutorial, you will:\n\n- Be familiar with advanced usage of the Kaboom JavaScript game development framework.\n- Be able to build a simple 2D physics engine.\n- Have the basis for a physics-based platformer, which you can extend into a full game.\n\n## Getting started\n\nLog into your [Replit](https://replit.com) account and create a new repl. Choose **Kaboom** as your project type. Give this repl a name, like \"gravity\".\n\n![Creating a new Repl](https://docimg.replit.com/images/tutorials/36-physics-playground/create-repl.png)\n\nKaboom repls are quite different from other kinds of repls you may have seen before: instead of dealing directly with files in folders, you'll be dealing with code, sounds and sprites, the latter of which you can draw directly in Replit's image editor.\n\n## Setting the scene\n\nWhen you first open your new Kaboom repl, you'll be greeted by a file containing the sample code below.\n\n```javascript\nimport kaboom from \"kaboom\";\n\n// initialize context\nkaboom();\n\n// load assets\nloadSprite(\"bean\", \"sprites/bean.png\");\n\n// add a character to screen\nadd([\n  // list of components\n  sprite(\"bean\"),\n  pos(80, 40),\n  area(),\n]);\n```\n\nThis code loads a sprite for Kaboom's mascot Bean, and places Bean near the top of the screen. Before we start coding, we'll remove the code for adding Bean, leaving the following lines:\n\n```javascript\nimport kaboom from \"kaboom\";\n\n// initialize context\nkaboom();\n```","metadata":{"id":797}}],["798",{"pageContent":"```javascript\nimport kaboom from \"kaboom\";\n\n// initialize context\nkaboom();\n```\n\nOur edited code initialises Kaboom and gives us a blank canvas to work with. We'll start by defining a level containing walls, movable crates, and the player object. Add the following code beneath `kaboom();`:\n\n```javascript\n// level\naddLevel(\n  [\n    \"========================\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=            @         =\",\n    \"=     ##               =\",\n    \"=     ==========       =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"=                      =\",\n    \"========================\",\n  ],\n  {\n    width: 32,\n    height: 32,\n    \"=\": () => [\n      // wall\n      rect(32, 32),\n      color(CYAN),\n      area(),\n      solid(),\n      \"wall\",\n    ],\n    \"#\": () => [\n      // crate\n      rect(32, 32),\n      color(RED),\n      z(1),\n      outline(1),\n      origin(\"center\"),\n      area(),\n      body(),\n      \"movable\",\n    ],\n    \"@\": () => [\n      // player\n      circle(32),\n      color(GREEN),\n      z(2),\n      outline(2),\n      area({ width: 64, height: 64 }),\n      body(),\n      origin(\"center\"),\n      {\n        speed: 120,\n        jumpspeed: 1000,\n      },\n      \"player\",\n    ],\n  }\n);\n```\n\nThis code uses Kaboom's [`addLevel()`](https://kaboomjs.com/#addLevel) function to visually construct a level. This function takes two arguments: an ASCII art representation of the level, and a JSON object defining the width and height of individual blocks and providing definitions for each of the objects used. Let's take a closer look at each of these definitions, starting with the wall object.\n\n```javascript\n    \"=\": () => [ // wall\n        rect(32, 32),\n        color(CYAN),\n        area(),\n        solid(),\n        \"wall\"\n    ],\n```","metadata":{"id":798}}],["799",{"pageContent":"```javascript\n    \"=\": () => [ // wall\n        rect(32, 32),\n        color(CYAN),\n        area(),\n        solid(),\n        \"wall\"\n    ],\n```\n\nA [game object definition](https://kaboomjs.com/#add) in Kaboom is a list of components and tags, and optionally custom attributes and functions. Components are a core part of Kaboom – they provide different functionality to game objects, from an object's appearance to functionality such as collision detection.\n\nThis wall object has four components:\n\n- [`rect()`](https://kaboomjs.com/#rect), which draws a rectangle to represent the object.\n- [`color()`](https://kaboomjs.com/#color), which gives the rectangle a color.\n- [`area()`](https://kaboomjs.com/#area), which provides collision detection for the object.\n- [`solid()`](https://kaboomjs.com/#solid), which will prevent other objects from moving past it.\n\nWe've given the object the tag \"wall\". Objects can have multiple tags, which can be used to define custom behavior, such as collision detection between objects with particular tags.\n\nNext, let's look at the crate definition:\n\n```javascript\n    \"#\": () => [ // crate\n        rect(32, 32),\n        color(RED),\n        z(1),\n        outline(1),\n        origin(\"center\"),\n        area(),\n        body(),\n        \"movable\"\n    ],\n```\n\nCompared to our wall, we've given our crate the following additional components:\n\n- [`z()`](https://kaboomjs.com/#z), which defines the crate's [z-order](https://en.wikipedia.org/wiki/Z-order), ensuring it will be drawn on top of walls.\n- [`outline()`](https://kaboomjs.com/#z), which will draw a single-pixel outline around the object.\n- [`origin()`](https://kaboomjs.com/#origin), which sets the sprite's origin to \"center\", so that we can move it around from its center, rather than the default top-left corner.\n- [`body()`](https://kaboomjs.com/#body), which makes our crate subject to gravity.\n\nWe've given it the tag \"movable\", a generic tag we can use for all objects that can be manipulated by the player's gravity gun.","metadata":{"id":799}}],["800",{"pageContent":"We've given it the tag \"movable\", a generic tag we can use for all objects that can be manipulated by the player's gravity gun.\n\nFinally, let's look at the player object:\n\n```javascript\n    \"@\": () => [ // player\n        circle(32),\n        color(GREEN),\n        z(2),\n        outline(2),\n        area({ width: 64, height: 64}),\n        body(),\n        origin(\"center\"),\n        {\n            speed: 120,\n            jumpspeed: 1000\n        },\n        \"player\"\n    ],\n```\n\nNote the following:\n\n- As we're using the [`circle`](https://kaboomjs.com/#circle) component to draw the player, we must specify a width and height for the `area()` component. All collision areas in Kaboom.js are rectangular (as of v2000.1.6).\n- We've added `speed` and `jumpspeed` custom variables to the player object, which we'll use to control its movement speed and jump height.\n\nRun your repl now, and you'll see your level, with player, crates and walls. As we've placed the player in mid-air, you should see them fall to the platform below, confirming the presence of gravity.\n\n![Level](https://docimg.replit.com/images/tutorials/36-physics-playground/level.png)\n\n## Moving the player\n\nLet's write some code to control the player. First, we need to retrieve a reference to the player using [`get()`](https://kaboomjs.com/#get):\n\n```javascript\n// player\nplayer = get(\"player\")[0];\n```\n\nNow we'll add code to move the player left and right. As we'll use the mouse to control the player's gravity gun, it makes ergonomic sense to control the player with the WASD keys rather than the arrow keys. Add the following code:\n\n```javascript\nonKeyDown(\"a\", () => {\n  player.move(-player.speed, 0);\n});\nonKeyDown(\"d\", () => {\n  player.move(player.speed, 0);\n});\n```\n\nHere we detect the [`onKeyDown`](https://kaboomjs.com/#onKeyDown) event for the `A` key to move the player to the left and `D` key to move the player to the right. The `move()` function automatically checks for collisions with solid objects, so the player will only move if there is space to do so.\n\n```javascript","metadata":{"id":800}}],["801",{"pageContent":"```javascript\nonKeyDown(\"w\", () => {\n  if (player.isGrounded()) {\n    player.jump(player.jumpspeed);\n  }\n});\n```\n\nThe `isGrounded()` and `jump()` functions are provided by the `body()` component, making basic platformer movement simple to implement in Kaboom.\n\nRerun your repl (or refresh your repl's webview) now, and you should be able to move left and right with A and D, and to jump with W. If the player jumps off the platform, they will fall out of view. We can fix this by having the game camera follow the player. Add the following code below your keyboard-handling code:\n\n```javascript\n// camera follow player\nplayer.onUpdate(() => {\n  camPos(player.pos);\n});\n```\n\nThis code will [run every frame](https://kaboomjs.com/#onUpdate) and keep the camera focused on the player as they move around. Refresh your in-repl browser and try it out.\n\n## Pulling objects with the gravity gun\n\nNow that we've got our generic platformer functionality implemented, it's time to add the gravity gun. The player will aim their gravity gun with the mouse. It will have a range, which we'll show as a line. Movable objects that fall into that range will have a thicker outline drawn around them. When the player holds down the right mouse button, objects in range will travel towards them, until they reach the edge of a secondary, \"holding\" range. Objects in the holding range will move with the player until the left mouse button is clicked, at which point they will be launched into the air. Alternatively, the player can click the right mouse button to drop the held object.\n\nIn the code above, we've implemented horizontal movement (walking) and vertical movement (jumping). Implementing our gravity gun will require us to implement movement at arbitrary angles. To this end, we will need to write a couple of helper functions. Go to the top of your file, and add the following code beneath the `kaboom();` line:\n\n```javascript\n// helper functions\nfunction angleBetween(p1, p2) {\n  return -Math.atan2(p2.y - p1.y, p2.x - p1.x);\n}","metadata":{"id":801}}],["802",{"pageContent":"```javascript\n// helper functions\nfunction angleBetween(p1, p2) {\n  return -Math.atan2(p2.y - p1.y, p2.x - p1.x);\n}\n\nfunction pointAt(distance, angle) {\n  return vec2(distance * Math.cos(angle), -distance * Math.sin(angle));\n}\n```\n\nThe first function, `angleBetween()`, uses JavaScript's [`Math.atan2()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2) to determine the angle two points make with the horizontal. The second function, `pointAt()`, uses sines and cosines to determine the point at a certain distance and angle.\n\nNext, we'll add two custom components:\n\n- `gravitygun()`, which will define attributes and functions for our player's gravity gun.\n- `physics()`, which will define attributes and functions for the movable objects the gravity gun will manipulate.\n\nAdd the following code for the `gravitygun()` component beneath your helper function definitions:\n\n```javascript\n// custom components\nfunction gravitygun(range, hold, firepower) {\n  return {\n    id: \"gravitygun\",\n    require: [\"pos\"],\n  };\n}\n```\n\nComponents are written as functions that return objects of a specific format. Each component should have an `id`, and a list of components it depends on attached to the `require` attribute. Beyond that, components can have arbitrary attributes, which will be assigned to their parent object, and special functions, which will be integrated into the game's [event loop](https://kaboomjs.com/#on).\n\nThe only dependency for our component is `pos()`, as it will not work on an object that doesn't have a position in the world. Function arguments will allow us to customize this component, in the form of specifying the gravity gun's range, hold distance, and firepower.\n\nLet's add some custom attributes to our component, to help us aim and fire the gravity gun. Expand your component code to match the following:\n\n```javascript\nfunction gravitygun(range, hold, firepower) {\n  return {\n    id: \"gravitygun\",\n    require: [\"pos\"],","metadata":{"id":802}}],["803",{"pageContent":"```javascript\nfunction gravitygun(range, hold, firepower) {\n  return {\n    id: \"gravitygun\",\n    require: [\"pos\"],\n    firepower: firepower, // new code from this line\n    range: range,\n    hold: hold,\n    aimAngle: angleBetween(this.pos, mouseWorldPos()),\n    rangeLine: {\n      p1: this.pos,\n      p2: this.pos,\n      color: BLACK,\n    },\n    holdLine: {\n      p1: this.pos,\n      p2: this.pos,\n      color: BLUE,\n    },\n  };\n}\n```\n\nIn the above code:\n\n- `firepower` is the amount of force to launch objects with.\n- `range` is the length of our gravity gun's pulling range.\n- `hold` is the distance from the player's center at which objects will be held once pulled in.\n- `aimAngle` is the angle of our gravity gun's aim, which will be the angle created with the horizontal.\n- `rangeLine` and `holdLine` are lines we will use to represent the gravity gun's range and hold.\n\nNow we need to add a `draw()` function to draw both lines, and an `update()` function to recalculate the gravity gun's aim angle and the position of both lines as the mouse cursor moves around. Alter your component code to include these functions at the bottom:\n\n```javascript\nfunction gravitygun(range, hold, firepower) {\n  return {\n    id: \"gravitygun\",\n    require: [\"pos\"],\n    firepower: firepower,\n    range: range,\n    hold: hold,\n    aimAngle: angleBetween(this.pos, mouseWorldPos()),\n    rangeLine: {\n      p1: this.pos,\n      p2: this.pos,\n      color: BLACK,\n    },\n    holdLine: {\n      p1: this.pos,\n      p2: this.pos,\n      color: BLUE,\n    },\n    draw() {\n      // new code from this line\n      drawLine(this.rangeLine);\n      drawLine(this.holdLine);\n    },\n    update() {\n      this.aimAngle = angleBetween(this.pos, mouseWorldPos());\n      this.rangeLine.p1 = this.pos;\n      this.rangeLine.p2 = this.pos.add(pointAt(this.range, this.aimAngle));\n      this.holdLine.p1 = this.pos;\n      this.holdLine.p2 = this.pos.add(pointAt(this.hold, this.aimAngle));\n    },\n  };\n}\n```","metadata":{"id":803}}],["804",{"pageContent":"this.rangeLine.p2 = this.pos.add(pointAt(this.range, this.aimAngle));\n      this.holdLine.p1 = this.pos;\n      this.holdLine.p2 = this.pos.add(pointAt(this.hold, this.aimAngle));\n    },\n  };\n}\n```\n\nOur gravity gun component is complete. Now we need to add the `physics()` component, for objects affected by the gravity gun. Add the following code just below the last code you added:\n\n```javascript\nfunction physics(mass) {\n  return {\n    id: \"physics\",\n    require: [\"area\", \"body\"],\n    mass: mass,\n    inRange: false,\n    inHold: false,\n    held: false,\n    dropping: false,\n    direction: 0,\n    speed: 0,\n    draw() {\n      if (this.inRange) {\n        drawRect({\n          width: this.width,\n          height: this.height,\n          pos: vec2(this.pos.x - this.width / 2, this.pos.y - this.height / 2),\n          opacity: 0,\n          outline: { color: BLACK, width: 4 },\n        });\n      }\n    },\n  };\n}\n```\n\nThis component requires both `area` and `body` – to be affected by the gravity gun, objects must have a collision area and be subject to regular gravity. We also give our physics objects a mass, direction and speed, and several variables to aid the gravity gun. Finally, we define a `draw()` function, which will draw a thick rectangle around the object when it is in gravity gun range.\n\nNow we need to add the `gravitygun()` component to the player object and the `physics()` component to the crate object. Find your level creation code and add the new component lines to the objects as below:\n\n```javascript\n    \"#\": () => [ // crate\n        rect(32, 32),\n        color(RED),\n        z(1),\n        outline(1),\n        origin(\"center\"),\n        area(),\n        body(),\n        physics(100), // <-- NEW LINE\n        \"movable\"\n    ],\n    \"@\": () => [\n        circle(32),\n        color(GREEN),\n        z(2),\n        outline(2),\n        area({ width: 64, height: 64}),\n        body(),\n        origin(\"center\"),\n        gravitygun(150, 55, 40), // <-- NEW LINE\n        {\n            speed: 120,\n            jumpspeed: 1000\n        },","metadata":{"id":804}}],["805",{"pageContent":"area({ width: 64, height: 64}),\n        body(),\n        origin(\"center\"),\n        gravitygun(150, 55, 40), // <-- NEW LINE\n        {\n            speed: 120,\n            jumpspeed: 1000\n        },\n        \"player\"\n    ],\n\n```\n\nWe now have everything in place to write the code that will allow us to pull objects with the gravity gun. We'll do this in an `onUpdate()` event callback for objects with the \"movable\" tag. Add the following code to the bottom of the `main.js` file:\n\n```javascript\n// gravity gun pull and hold\nonUpdate(\"movable\", (movable) => {\n  // test collisions\n  myRect = movable.worldArea();\n  movable.inRange = testRectLine(myRect, player.rangeLine);\n  movable.inHold = testRectLine(myRect, player.holdLine);\n});\n```\n\nFirst, we get the coordinates for the movable object's collision rectangle, using `worldArea()`, a function provided by the `area()` component. We then use the [`testRectLine()`](https://kaboomjs.com/#testRectLine) function to determine whether our player's range line or hold line intersects with this collision rectangle.\n\nNow let's have the gravity gun pull objects in range when the player holds down the right mouse button. Add the following code below the line where you assigned `movable.inHold` in the body of the `onUpdate` event callback:\n\n```javascript\n// gravity gun pull\nif (isMouseDown(\"right\")) {\n  if (movable.inHold) {\n    movable.held = true;\n  } else if (movable.inRange) {\n    movable.moveTo(player.holdLine.p2);\n  }\n}\n```\n\nIf the object is in holding range, we set `held` to true. If the object is in pulling range, we move it into holding range. We use the `moveTo()` function, provided by the `pos()` component, without a speed argument. This means the object will teleport to the specified position.\n\nNext, we'll handle holding objects once they've been pulled in. Add the following code beneath the code you added above:\n\n```javascript\n// gravity gun hold\nif (movable.held) {\n  movable.moveTo(player.holdLine.p2);\n}\n```","metadata":{"id":805}}],["806",{"pageContent":"```javascript\n// gravity gun hold\nif (movable.held) {\n  movable.moveTo(player.holdLine.p2);\n}\n```\n\nThis code will ensure that objects stay in the holding position when held, so the player will be able to move them around in an arc.\n\nFinally, we'll need to move our object after it's been launched. Add the following code below the lines you added above:\n\n```javascript\n// gravity gun launch\nmovable.moveBy(dir(movable.direction).scale(movable.speed));\nmovable.speed = Math.max(0, movable.speed - 1); //friction\n```\n\nWhen we launch an object, we'll give it a direction and a non-zero speed. We use `moveBy()`, provided by the `pos()` component, to move the object unless there are other solid objects in the way. To give the object a more natural movement arc, we will simulate friction by decreasing its speed every frame until it reaches zero.\n\nRun your repl now and try out the gravity gun. You should be able to pull crates into the holding position, and then move them around your head.\n\n![Gravity gun pull](https://docimg.replit.com/images/tutorials/36-physics-playground/gravity-gun-pull.png)\n\n### Fixing the wall-clipping bugs\n\nIf you play around with the game, you should notice a couple of wall clipping bugs. When holding an object, you can force it to teleport below the platform you're standing on by aiming them. Similarly, objects will teleport through platforms if you pull them from the other side.\n\n![Wall clip](https://docimg.replit.com/images/tutorials/36-physics-playground/wall-clip.png)\n\nIn both cases, this is because Kaboom's `moveTo()` function does not take solid objects into account, so we'll have to do that ourselves.\n\nWe'll fix the first bug by adding a new, collision-aware movement function to our `physics()` component. Find the component definition and append the function to the object it returns, just below the `draw()` function definition:\n\n```javascript\n        moveToNoCollide(dest) {\n            const diff = dest.sub(this.pos);\n            return this.moveBy(diff.unit().scale(diff.len()));","metadata":{"id":806}}],["807",{"pageContent":"```javascript\n        moveToNoCollide(dest) {\n            const diff = dest.sub(this.pos);\n            return this.moveBy(diff.unit().scale(diff.len()));\n        }\n```\n\nThis function calculates the movement vector needed to move from the current position to the destination, and then passes this vector to the collision-aware function `moveBy()`. Our `moveBy()` function will return a `Collision` object if it detects a collision while moving. We'll return this and use it to cancel the hold if certain conditions are met.\n\nFind the `if (movable.held)` block in your `onUpdate(\"movable\")` event callback and alter it to match the code below:\n\n```javascript\n// gravity gun hold\nif (movable.held) {\n  col = movable.moveToNoCollide(player.holdLine.p2);\n  if (col != null && col.target.solid) {\n    if (col.target.is(\"player\")) {\n      // disregard player collisions\n      movable.moveTo(player.holdLine.p2);\n    } else movable.held = false;\n  }\n}\n```\n\nHere we've replaced `moveTo()` with `moveToNoCollide()`, and we're doing some checks on the `collision` object returned. If the collision is with the player, we ignore it and move the object back to the hold position. Otherwise, we cancel the hold.\n\nRefresh your repl browser now and try to clip a held crate through the floor. You should be unsuccessful.\n\nTo fix the second clipping bug, we're going to need to detect solid objects between the movable object being pulled and the player's hold position. We'll write a new helper function to do this. Add the following code near the top of your file, just under the definition of `pointAt()`:\n\n```javascript\nfunction checkCollisionLine(line, tag) {\n  collision = get(tag).some((object) => {\n    return testRectLine(object.worldArea(), line);\n  });\n\n  return collision;\n}\n```","metadata":{"id":807}}],["808",{"pageContent":"```javascript\nfunction checkCollisionLine(line, tag) {\n  collision = get(tag).some((object) => {\n    return testRectLine(object.worldArea(), line);\n  });\n\n  return collision;\n}\n```\n\nThe `checkCollisionLine()` function tests whether an object with a given tag intersects with a line. We do this by [getting all objects with the tag](https://kaboomjs.com/#get) and testing each one until we find a collision. The [`some()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) method will stop executing after a single `true` is returned, so this isn't quite as inefficient as it could be, but it's still probably not the optimal way to do this. Nonetheless, it should work fine while our game is relatively small.\n\nTo use this function, find the `if (isMouseDown(\"right\"))` in your `onUpdate(\"movable\")` event callback and make the modifications shown:\n\n```javascript\n// gravity gun pull\nif (isMouseDown(\"right\")) {\n  colLine = {\n    // new object definition\n    p1: movable.pos,\n    p2: player.holdLine.p2,\n  };\n  if (movable.inHold) {\n    movable.held = true;\n  }\n  // expanded expression below\n  else if (movable.inRange && !checkCollisionLine(colLine, \"wall\")) {\n    movable.moveTo(player.holdLine.p2);\n  }\n}\n```\n\nTo prevent the player from pulling objects through walls, we check that the line between the object in range and the player's hold position is free of walls before moving it. Rerun your repl now, and you should be unable to clip objects through walls.\n\n## Dropping and launching objects with the gravity gun\n\nNow that we have a stable pulling and holding implementation, we need to be able to drop and launch objects. Add the following code at the bottom of your file:\n\n```javascript\n// gravity gun drop\nonMousePress(\"right\", () => {\n  holdList = get(\"movable\").filter((element) => {\n    return element.held;\n  });\n  if (holdList.length) {\n    selected = holdList[0];\n    selected.held = false;\n  }\n});\n```","metadata":{"id":808}}],["809",{"pageContent":"onMousePress(\"right\", () => {\n  holdList = get(\"movable\").filter((element) => {\n    return element.held;\n  });\n  if (holdList.length) {\n    selected = holdList[0];\n    selected.held = false;\n  }\n});\n```\n\nWhen the right mouse button is clicked, we retrieve all the \"movable\"-tagged objects and [filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) out the ones that aren't currently held. Only one object can be held at a time, so we select that object and release it.\n\nIf you restart your repl now, you may have trouble getting dropping to work. Because we use the right mouse button both for pulling and dropping, you need to be quite precise to avoid immediately grabbing objects after dropping them.\n\nLet's implement a dropping timeout for dropped objects to make this more user-friendly. Add the following lines below `selected.held = false`:\n\n```javascript\nselected.dropping = true;\nwait(0.2, () => {\n  selected.dropping = false;\n});\n```\n\nThis code uses a [`wait()`](https://kaboomjs.com/#wait) callback, which will execute after the given number of seconds.\n\nWe defined the `dropping` attribute as part of our `physics()` component, so now all we need to do is make our pull respect the timeout. Find the `if (isMouseDown(\"right\"))` line in your `onUpdate(\"movable\")` event callback and alter it to resemble the following:\n\n```javascript\n    // gravity gun pull\n    if (isMouseDown(\"right\") && !movable.dropping) {\n```\n\nNow you should be able to drop objects more easily.\n\nFinally, let's add some code to launch objects when the left mouse button is clicked. Enter the following code at the bottom of your file.\n\n```javascript\n// gravity gun launch\nonMousePress(\"left\", () => {\n  rangeList = get(\"movable\").filter((element) => {\n    return element.held;\n  });\n  if (rangeList.length) {\n    selected = rangeList[0]; // 1st for now\n    selected.held = false;\n    selected.direction = rad2deg(-player.aimAngle);\n    selected.speed = player.firepower;\n  }\n});\n```","metadata":{"id":809}}],["810",{"pageContent":"});\n  if (rangeList.length) {\n    selected = rangeList[0]; // 1st for now\n    selected.held = false;\n    selected.direction = rad2deg(-player.aimAngle);\n    selected.speed = player.firepower;\n  }\n});\n```\n\nThis code is largely similar to the dropping code, but instead of specifying a drop timeout, we give the previously held object a direction and a speed. The direction will be the player's `aimAngle`, which we need to [convert to degrees](https://kaboomjs.com/#rad2deg) for Kaboom. The speed will be the `firepower` value we defined in our `gravitygun()` module.\n\nRestart your repl and play around with picking up, dropping and launching crates. Some odd behavior you may notice is that objects launched straight will tend to slide along the ceiling for a while as they bleed off their speed. We can prevent this by adding the following code to kill a movable object's speed on collision with a wall:\n\n```javascript\nonCollide(\"movable\", \"wall\", (a, b) => {\n  a.speed = 0;\n});\n```\n\n## Object collisions\n\nOur physics playground wouldn't be complete without collisions between objects, so let's add some simple code to make objects push each other. Add the following collision handler to the bottom of your file:\n\n```javascript\n// physics object collisions\nonCollide(\"movable\", \"movable\", (a, b) => {\n  if (a.speed > b.speed) b.direction = a.direction;\n  else if (a.speed <= b.speed) a.direction = b.direction;\n  finalSpeed = a.speed + b.speed / (a.mass + b.mass);\n  a.speed = finalSpeed;\n  b.speed = finalSpeed;\n});\n```\n\nThis code will assign the direction of the fastest object to both objects, and determine the speed of both from an altered form of a [simple one-dimensional collision formula](https://www.dummies.com/article/academics-the-arts/science/physics/how-to-find-the-velocity-of-two-objects-after-collision-174261). Play around with the values and calculations and see what sort of behavior you prefer. Remember, it's more important for a game to be fun than for it to be realistic.\n\n## Next steps","metadata":{"id":810}}],["811",{"pageContent":"## Next steps\n\nWe've built a rudimentary physics-based platform engine. From here, there's a lot you can do to expand this into a full game. Consider the following ideas:\n\n- Add enemies to throw crates at.\n- Add more movable objects of different sizes and masses.\n- Add puzzles that can be solved by arranging crates in specific patterns, and launching them from specific angles.\n- Improve the physics simulation with 2D collisions, rotating objects, and objects with different behaviors, such as bouncing and shattering.\n\nYou can find our repl here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Gravity?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":811}}],["812",{"pageContent":"---\ntitle: 3D obstacle avoiding game with three.js\n---\n\n# Building a 3D obstacle avoiding game with three.js\n\n[Three.js](https://threejs.org/) is a general-purpose 3D library for browsers. You can use it to create 3D objects, animations, and games. Take a look at the three.js [examples page](https://threejs.org/examples) in the documentation to see what kind of things you can make.\n\nIn this tutorial, you will learn the basics of three.js and its game creation capabilities by making a simple obstacle avoiding 3D game. In the game, you will control a box that moves through a 3D course. The goal of the game is to avoid the obstacles and get to the end of the course.\n\n![Game play](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/gameplay.gif)\n\nWe will create the game in Replit, which is an online integrated development environment (IDE). This means that you can do this tutorial in the browser, and it will be easy to share your game online.\n\n## Creating a new project in Replit\n\nHead over to [Replit](https://replit.com/) and create a new repl. Choose **HTML, CSS, JS** as your project type. Give this repl a name, like \"3D obstacle avoiding game\".\n\n![creating a new Replit project](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/new_repl.png)\n\n## Importing three.js to the project\n\nOpen the `script.js` file in your repl. We'll import three.js by referencing it from a content distribution network (CDN) to get us up and running quickly. Add the following line to the `script.js` file to import three.js from the Skypack CDN:\n\n```javascript\nimport * as THREE from \"https://cdn.skypack.dev/three@0.140.2\";\n```","metadata":{"id":812}}],["813",{"pageContent":"```javascript\nimport * as THREE from \"https://cdn.skypack.dev/three@0.140.2\";\n```\n\nThe [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) keyword is used to import a [JavaScript `module`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules). It will not work as is – we need to indicate that this script file is a module. To make this work, change the default `script` tag in the `index.html` file to the following:\n\n```html\n<script type=\"module\" src=\"script.js\"></script>\n```\n\nThe `type=module` attribute allows us to use module features in our script.\n\nNow we are ready to use three.js in our project.\n\n## Creating a scene with the player box\n\nTo display 3D objects on the screen, we need three things: a scene, a camera, and a renderer. Then we will place 3D objects in the scene. Most objects also require lighting to be added to see them.\n\nLet's start by creating a scene and adding a camera. Add the following lines to the `script.js` file:\n\n```javascript\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(\n  70,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  200\n);\n```\n\nThis creates a scene. The scene determines what will be rendered and where it will be rendered. We will add objects, a camera, and lights to our scene.\n\nWe are using a perspective camera, which is the most commonly used camera type for 3D scenes. Perspective cameras use [perspective projection](<https://en.wikipedia.org/wiki/Perspective_(graphical)>), which mimics the way human eyes see. The further away objects are from the camera, the smaller they appear.\n\nThe four parameters of the `PerspectiveCamera` constructor function define the camera's viewing frustum, which is the field of view of our camera in the 3D world. The parameters are:\n\n1. **fov** - Field of view, the camera frustum vertical field of view, in degrees.\n2. **aspect** - Camera frustum aspect ratio.\n3. **near** - Camera frustum near plane, in world units.","metadata":{"id":813}}],["814",{"pageContent":"1. **fov** - Field of view, the camera frustum vertical field of view, in degrees.\n2. **aspect** - Camera frustum aspect ratio.\n3. **near** - Camera frustum near plane, in world units.\n4. **far** - Camera frustum far plane, in world units.\n\n![creating a new Replit project](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/perspective-camera-frustum.png)\n\nThe above image shows the camera's viewing frustum. The viewable objects are between the near and far plane. There are two objects in the frustum, a purple stick and an orange stick. The sticks are the same size. The dotted lines show how the sticks are projected onto the near plane, which shows how they will be seen. Their size on the near plane is different. The orange stick, which is further away from the camera, appears smaller. The units used are world units, it can be mapped to any defined unit but it is usually in meters.\n\nNext, we will position our camera in the 3D world and make it look at a specific point. The parameters are the x, y, and z points in the 3D world. Add the following lines of code to the `script.js` file:\n\n```javascript\ncamera.position.set(4, 4, -4);\ncamera.lookAt(0, 0, 2);\n```\n\nLet's add a renderer so that we can display the scene. We will attach it to a DOM element on our web page. Add the following lines of code:\n\n```javascript\nconst renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.render(scene, camera);\ndocument.body.appendChild(renderer.domElement);\n```","metadata":{"id":814}}],["815",{"pageContent":"const renderer = new THREE.WebGLRenderer({ antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.render(scene, camera);\ndocument.body.appendChild(renderer.domElement);\n```\n\nThis creates a new renderer that will display our scene using [WebGL](https://developer.mozilla.org/en-US/docs/Glossary/WebGL). WebGL (Web Graphics Library) is used for rendering complex graphics, such as 3D scenes, on the web. It does this by accessing the graphics card on the user's device. The `antialias` property is used to determine if anti-aliasing will be used, which is a method that smooths jagged edges on objects. This makes our 3D world look better. The size of the renderer is set to the browser width and height using the `setSize` method so that our scene will take up the entire browser window. We then call the renderer's `render` method to tell the renderer to draw the scene using our created scene and camera. We then add the renderer DOM element, which is a `<canvas>` element, to the HTML document. The renderer uses the `<canvas>` element to display the scene.\n\nNow let's create our first 3D object, the player box. This will be the box that we move around in the game. In three.js, we need three things to create an object:\n\n1. Geometry - An object contains the x, y, z points that make up a shape.\n\n2. Material - The surface of the geometry. Gives the geometry color and texture.\n\n3. Mesh - Geometry + material. This is what we will add to our scene.\n\nAdd the following lines above the `renderer` declaration:\n\n```javascript\nconst geometry = new THREE.BoxGeometry(1, 1, 1);\nconst material = new THREE.MeshBasicMaterial({ color: 0xe56956 });\nconst mesh = new THREE.Mesh(geometry, material);\n```\n\nThe `0x` in front of the color property value means that it is a hexadecimal value. Most materials require a light source to bounce off of them so that they can be seen. The `MeshBasicMaterial` does not.\n\nNow let's add the mesh to the scene:\n\n```javascript\nscene.add(mesh);\n```","metadata":{"id":815}}],["816",{"pageContent":"Now let's add the mesh to the scene:\n\n```javascript\nscene.add(mesh);\n```\n\nRun the code now by pushing the \"Run\" button at the top of the Replit window. You should see your first scene, an orange cube:\n\n![creating a new Replit project](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/player_box.png)\n\nThe `MeshBasicMaterial` does not look 3D. It would be better to have a material that light can interact with so that we can get some depth to our player box. Replace your material with the following material:\n\n```javascript\nconst material = new THREE.MeshLambertMaterial({ color: 0xe56956 });\n```\n\nThe `MeshLambertMaterial` is a relatively simple material that can reflect light. Your player box will not be visible now, we need to add a light source. We will add an ambient light and a directional light.\n\nAdd the following lines to the `script.js` file, above the `renderer`:\n\n```javascript\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\ndirectionalLight.position.set(10, 20, 0);\nscene.add(ambientLight, directionalLight);\n```\n\nWe add a white directional light that is set along the x-, y-, and z-axes so that it shines on the top and side of the box. The ambient light allows us to see the box better from all angles. The first parameter for the light constructor functions is the color, and the second parameter is the light intensity, which ranges from 0 to 1. You should be able to see your player box now. It will look more 3D, as each side has different lighting. You can use your browser dev tools to check the console logs if you encounter any errors.\n\nLet's also get rid of the window scrollbars. Add the following to the `style.css` file in the `body` selector:\n\n```css\noverflow: hidden;\nmargin: 0;\n```\n\nYour player box should now look like this:\n\n![Player box with light](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/player_box_light.png)","metadata":{"id":816}}],["817",{"pageContent":"```css\noverflow: hidden;\nmargin: 0;\n```\n\nYour player box should now look like this:\n\n![Player box with light](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/player_box_light.png)\n\nTry changing the material color, light intensity, and camera position to see what happens.\n\nBefore we get our player box moving, let's change our code so that it is nicely structured for the game logic that we will add. Add the following lines to the top of the `script.js` file:\n\n```javascript\nlet camera, scene, renderer, player;\nconst boxSideLength = 0.5;\n\ninit();\n```\n\nThe `camera`, `scene`, and `renderer` variables are global variables so that they are available throughout our script. They will be defined in functions we create. Remove the `const` keyword in front of their declarations that we already added.\n\nWe also initialize a `player` variable for our created box.\n\nThe `boxSideLength` variable is for the x, y and z lengths of our box. Most of our boxes will be squares.\n\nNow let's define the function called `init`. This function will be used to initialize the game, by rendering and setting up the scene and creating our objects. Define an `init` function and move the camera, light, and renderer code into it:\n\n```javascript\nfunction init() {\n  scene = new THREE.Scene();\n  camera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    200\n  );\n\n  camera.position.set(4, 4, -4);\n  camera.lookAt(0, 0, 2);\n\n  const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\n  directionalLight.position.set(10, 20, 0);\n  scene.add(ambientLight, directionalLight);\n\n  initializeBoxes();\n\n  renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.render(scene, camera);\n  document.body.appendChild(renderer.domElement);\n}\n```\n\nWe also call the `initializeBoxes` function, which we will soon define.","metadata":{"id":817}}],["818",{"pageContent":"renderer.render(scene, camera);\n  document.body.appendChild(renderer.domElement);\n}\n```\n\nWe also call the `initializeBoxes` function, which we will soon define.\n\nNow let's make a `createBox` function. We will use this function to create our player box, and later to create obstacles. Define the `createBox` function and move the code for creating your player box inside of it:\n\n```javascript\nfunction createBox(x, y, z) {\n  const geometry = new THREE.BoxGeometry(\n    boxSideLength,\n    boxSideLength,\n    boxSideLength\n  );\n  const material = new THREE.MeshLambertMaterial({ color: 0xe56956 });\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.position.set(x, y, z);\n  scene.add(mesh);\n}\n```\n\nThe `geometry` definition now uses the `boxSideLength` variable to set the lengths of the sides. There is one extra line of code here, the call to the `mesh.position.set` function. This will set the position of the created box in the 3D world based on the arguments passed to the function. This will be useful when we create randomly positioned obstacles.\n\nNow let's create an `initializeBoxes` function that will be used to create all of the boxes at the start of the game. Add the following lines of code:\n\n```javascript\nfunction initializeBoxes() {\n  player = createBox(0, 0, 0);\n}\n```\n\nAll this function currently does is create a player box that is positioned in the center of our 3D world. Its x, y, and z positions will be 0. If you run your repl code, you should still be able to see your box.\n\n## Animating the player box\n\nIn the final game, the player box moves continuously along the z-axis. We will make use of an animation loop to continuously move the player box and re-render the scene to see the movement. At the bottom of the `script.js` file, add the following lines:\n\n```javascript\nfunction animate() {\n  player.mesh.position.z += speed;\n  camera.position.z += speed;\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n```","metadata":{"id":818}}],["819",{"pageContent":"```javascript\nfunction animate() {\n  player.mesh.position.z += speed;\n  camera.position.z += speed;\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n```\n\nThe `animate` function will be called on every frame by using the `requestAnimationFrame` function, which is a web API that is used to create animations. It will call the `animate` function before each repaint of the screen by the browser. The number of function calls is usually 60 per second.\n\nFor each `animate` function call, we move the player box and the camera by changing their position along the z-axis. The camera will follow the player box. Let's add a global speed variable at the top of our `script.js` file so that we can easily change it later if we want to:\n\n```javascript\nlet speed = 0.1;\n```\n\nTo access the player box's `mesh` property, let's return the `mesh` property from the `createBox` function. Add the following to the end of the `createBox` function:\n\n```javascript\nreturn {\n  mesh,\n};\n```\n\nWe also need to call our `animate` function initially to get it started. In the `init` function, add the following line below `renderer.render(scene, camera)`:\n\n```javascript\nanimate();\n```\n\nOur player box will now be moving, but we won't be able to see the movement. We are going to add a [`GridHelper`](https://threejs.org/docs/index.html?q=grid#api/en/helpers/GridHelper) so that we can see the movement. A `GridHelper` is an object that defines a grid, which is a two-dimensional array of lines along the x- and y-axes. This will give our 3D world a 2D grid surface. In the `init` function, add the following lines below `initializeBoxes()`:\n\n```javascript\nconst gridHelper = new THREE.GridHelper(200, 200);\nscene.add(gridHelper);\n```\n\nYou will now be able to see your player box move through the 3D world.\n\n![Animated player box](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/animating-the-player-box.gif)","metadata":{"id":819}}],["820",{"pageContent":"You will now be able to see your player box move through the 3D world.\n\n![Animated player box](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/animating-the-player-box.gif)\n\nIf you wait long enough, the box will move off the grid. Let's restrict the movement of the box so that it can't move off the grid.\n\n## Creating a game course\n\nThe first thing we will do to prevent the player box from moving off the grid will be to add another box, the finishing line box. The finishing line box will be added at the boundary of the grid. Our game course will be from the center of the grid to the end of the grid, along the z-axis. Later, we will add collision detection to check if our player box has hit the finishing line box so that we can end the game before the player box leaves the grid.\n\nWe will create a new global variable called `courseLength` that will define the distance to the edge of the grid. Our player box starts moving from the center of the grid (x = 0, y = 0, z = 0) so our square grid's length should be double the course length. We will also restrict the movement of the box along the x- and y-axes. Add the following global variables to the top of the `script.js` file:\n\n```javascript\nconst courseLength = 100;\nconst gridHelperSize = courseLength * 2;\n\n// limit movement of player box on x and y-axis\nconst xBoundary = 4 - boxSideLength / 2;\nconst yBoundary = xBoundary / 4;\n```\n\nWe set the `courseLength` to `100` world units. We use the `gridHelperSize` to define the length of our square grid along the x- and z-axes. The `xBoundary` and `yBoundary` variables are used to limit the movement of our player box along the x- and y-axes.\n\nLet's update the `gridHelper` to use the `gridHelperSize` variable for its size and number of divisions parameters:\n\n```javascript\nconst gridHelper = new THREE.GridHelper(gridHelperSize, gridHelperSize);\n```\n\nNow we will add the finish line box. Add the following to the `initializeBoxes` function:\n\n```javascript\n// create finish line box","metadata":{"id":820}}],["821",{"pageContent":"```\n\nNow we will add the finish line box. Add the following to the `initializeBoxes` function:\n\n```javascript\n// create finish line box\nconst geometry = new THREE.BoxGeometry(\n  xBoundary * 2,\n  yBoundary * 2,\n  boxSideLength\n);\nconst material = new THREE.MeshLambertMaterial({ color: \"green\" });\nconst mesh = new THREE.Mesh(geometry, material);\nmesh.position.set(0, 0, courseLength);\nscene.add(mesh);\n```\n\nThis creates a green box that is positioned at the end of the grid. It marks the end of the game course. It's positioned at the end of the course where the z-axis value is equal to the course length. The size of the box along its x- and y-axes marks the x and y boundary. We will restrict the player box's movement so that it can't move past the finish line box. Its size along the x- and y-axes is double the boundary length, because it needs to mark the negative and positive axis boundaries.\n\nYou will now be able to see the finish line box at the end of the grid. To reach the end of the grid sooner, you can change the `speed` variable.\n\n![Game course finish line box](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/creating-a-game-course.png)\n\n## Controlling the player box\n\nLet's add some controls so that we can move our player box up, down, left, and right. Add the following lines to the bottom of the `script.js` file:\n\n```javascript\n// moving player box with arrow keys\nwindow.addEventListener(\"keydown\", (e) => {\n  const key = e.key;\n  if (key === \"ArrowLeft\") {\n    player.mesh.position.x += speed;\n  }\n  if (key === \"ArrowRight\") {\n    player.mesh.position.x -= speed;\n  }\n  if (key === \"ArrowUp\") {\n    player.mesh.position.y += speed;\n  }\n  if (key === \"ArrowDown\") {\n    player.mesh.position.y -= speed;\n  }\n});\n```","metadata":{"id":821}}],["822",{"pageContent":"player.mesh.position.x -= speed;\n  }\n  if (key === \"ArrowUp\") {\n    player.mesh.position.y += speed;\n  }\n  if (key === \"ArrowDown\") {\n    player.mesh.position.y -= speed;\n  }\n});\n```\n\nThis creates an event listener that listens for a key press event. The player box's mesh (geometry + material) position is increased or decreased along the x- or y-axis, depending on which arrow button is pressed. Run your repl now and you should be able to move your player box with the arrow keys. You will notice that you can move off the screen, and when you reach the edge of the grid, you can avoid hitting the finish line box. Let's restrict the movement of the player box so that it always hits the finish line box. Replace the event listener that you just added with the following code:\n\n```javascript\nwindow.addEventListener(\"keydown\", (e) => {\n  const key = e.key;\n  const currXPos = player.mesh.position.x;\n  const currYPos = player.mesh.position.y;\n  if (key === \"ArrowLeft\") {\n    if (currXPos > xBoundary) return;\n    player.mesh.position.x += speed;\n  }\n  if (key === \"ArrowRight\") {\n    if (currXPos < -xBoundary) return;\n    player.mesh.position.x -= speed;\n  }\n  if (key === \"ArrowUp\") {\n    if (currYPos > yBoundary) return;\n    player.mesh.position.y += speed;\n  }\n  if (key === \"ArrowDown\") {\n    if (currYPos < -yBoundary) return;\n    player.mesh.position.y -= speed;\n  }\n});\n```\n\nHere we add some extra lines of code to restrict the movement of the player box along the x- and y-axes by getting the current x and y position of the player box and then preventing movement if the position exceeds the current boundary values that we set using our global variables `xBoundary` and `yBoundary`.\n\nNote that if you increased the speed variable to reach the end of the course sooner, you may need to increase the width and height of the finish line box to ensure that the player box always hits it, as the player box will be able to move a bit more along the x- and y-axes.\n\n## Detecting collisions","metadata":{"id":822}}],["823",{"pageContent":"## Detecting collisions\n\nTo determine that we have reached the end of the course, we need to be able to detect collisions. Once the player box has collided with the finish line box, the game is over. Add the following global variables to the top of your `script.js` file:\n\n```javascript\nlet gameOver = false;\nconst numOfObstacles = 0;\nvar obstaclesBoundingBoxes = [];\n```\n\nThe `gameOver` flag variable will be used to determine when the game is over. This will occur once the finish line is reached, or if the player box collides with an obstacle (we will add obstacles later). The number of obstacles is currently zero. The `obstaclesBoundingBoxes` will store a set of x, y, and z positions of bounding boxes that describe the positions of all of our objects, excluding the player box. We will use these bounding boxes to detect collisions.\n\nIn the `initializeBoxes` function, add the following lines at the bottom:\n\n```javascript\nconst boundingBox = new THREE.Box3().setFromObject(mesh);\nobstaclesBoundingBoxes.push(boundingBox);\n```\n\nThis will create a bounding box for the finish line box `mesh` object. We add this to the `obstaclesBoundingBoxes` array. The [`Box3`](https://threejs.org/docs/index.html?q=box3#api/en/math/Box3) object represents a bounding box in 3D space. It describes a set of coordinates, it does not appear in our 3D world. We use the `setFromObject` method to calculate the bounding box of the finish line box, using the finish line box's `mesh`. Within the bounding box object, there is a `max` and `min` property that describes the upper and lower x, y, and z boundaries of the box. For example, the bounding box of the finish line box contains the following `max` and `min` properties:\n\n```json\nmax: {x: 3.75, y: 0.9375, z: 100.25}\nmin: {x: -3.75, y: -0.9375, z: 99.75}\n```\n\nNow let's create a function to detect collisions. Add the following function below the `createBox` function:\n\n```javascript\nfunction detectCollisions() {\n  const playerBox = new THREE.Box3().setFromObject(player.mesh);","metadata":{"id":823}}],["824",{"pageContent":"```javascript\nfunction detectCollisions() {\n  const playerBox = new THREE.Box3().setFromObject(player.mesh);\n  // Check each object to detect if there is a collision\n  for (let i = 0; i < numOfObstacles + 1; i++) {\n    // an object was hit\n    if (obstaclesBoundingBoxes[i].intersectsBox(playerBox)) {\n      gameOver = true;\n      alert(\"You win!\");\n      return;\n    }\n  }\n}\n```\n\nTo detect a collision, we first create a bounding box for the player box by creating a `Box3` object. We then loop through the `obstaclesBoundingBoxes` array and use the `intersectsBox` method to check for an intersection – a collision – between the `playerBox` and each obstacle. We currently don't have any obstacles, so we can only check for a collision with the finish line box. Given that we will always hit the finish line box, we set `gameOver` to `true` once it is hit. We will use an alert to let the player know that they have won when they reach the end of the course.\n\nWe need to call the `detectCollisions` function in the game loop `animate` function so that we constantly check for a collision. Change your `animate` function so that it is the same as the `animate` function below:\n\n```javascript\nfunction animate() {\n  if (gameOver) return;\n  player.mesh.position.z += speed;\n  camera.position.z += speed;\n\n  detectCollisions();\n\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\n```\n\nThe if statement at the start of the `animate` function prevents the function from running if the game is over.\n\nLet's also add `if (gameOver) return;` to the start of the \"keydown\" `window.addEventListener` callback function to disable the keyboard event if the game is over.\n\nYou will now get a \"You win!\" alert message once you reach the finish line box at the end of the grid.\n\n![Game course finish line box](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/detecting-collisions.png)\n\n## Creating obstacles","metadata":{"id":824}}],["825",{"pageContent":"![Game course finish line box](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/detecting-collisions.png)\n\n## Creating obstacles\n\nNow let's add some obstacles for the player box to avoid to make it a game. Set the `numOfObstacles` global variable to 50. We are going to write a `createObstacle` function to generate 50 randomly positioned obstacles. Add the following function below the `createBox` function:\n\n```javascript\nfunction createObstacle() {\n  const x = THREE.MathUtils.randFloatSpread(xBoundary * 2);\n  const y = THREE.MathUtils.randFloatSpread(yBoundary * 2);\n  const z = THREE.MathUtils.randFloat(10, courseLength - boxSideLength);\n  const obstacle = createBox(x, y, z);\n  const boundingBox = new THREE.Box3().setFromObject(obstacle.mesh);\n  obstaclesBoundingBoxes.push(boundingBox);\n}\n```","metadata":{"id":825}}],["826",{"pageContent":"const obstacle = createBox(x, y, z);\n  const boundingBox = new THREE.Box3().setFromObject(obstacle.mesh);\n  obstaclesBoundingBoxes.push(boundingBox);\n}\n```\n\nWe make use of some math utility functions of the three.js [`MathUtils`](https://threejs.org/docs/index.html?q=MathUtils#api/en/math/MathUtils) object to get random x, y, and z points along our course. These will be used to randomly position obstacles. We get random x and y points using our x and y boundaries. The `randFloatSpread` function takes in a range parameter and returns a random float in the interval [- range / 2, range / 2]. We get a random z value using the `randFloat` function. It takes in a low and high parameter and returns a random float in the interval [low, high]. This value is always positive, as our course is positioned on the positive side of the z-axis. The low value starts at 10, as we don't want to place obstacles right in front of or on the player box. The high value is the `courseLength`, so that the obstacles can be positioned all along our course. We subtract the `boxSideLength` to prevent the obstacles from being placed on the finish line box. We then pass these x, y, and z points to the `createBox` function to create an obstacle box. A bounding box is created for each created obstacle, and added to the `obstaclesBoundingBoxes` array so that we can detect collisions between our player box and the obstacles.\n\nWe need to call the `createObstacle` function to create the obstacles. In the `initializeBoxes` function, let's add a for loop to create the obstacles:\n\n```javascript\nfunction initializeBoxes() {\n  player = createBox(0, 0, 0);\n\n  for (let i = 0; i < numOfObstacles; i++) {\n    createObstacle();\n  }\n\n  ...\n\n}\n```\n\nThis will create 50 randomly positioned obstacles. Run your repl to see them:\n\n![Creating random obstacles](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/creating-random-obstacles.png)\n\nEach time you reload the page, the obstacles will be randomly positioned.","metadata":{"id":826}}],["827",{"pageContent":"Each time you reload the page, the obstacles will be randomly positioned.\n\n## Adding win-or-lose logic\n\nTry to collide with an obstacle, and you will see that the alert message is always \"You win!\". Let's fix that by adding some win-or-lose logic. In the `detectCollisions` function, replace the for loop with the following for loop:\n\n```javascript\nfor (let i = 0; i < numOfObstacles + 1; i++) {\n  // an object was hit\n  if (obstaclesBoundingBoxes[i].intersectsBox(playerBox)) {\n    gameOver = true;\n    if (i !== numOfObstacles) {\n      alert(\"You lose\");\n    } else {\n      // the last box is the finish line box\n      alert(\"You win!\");\n    }\n    return;\n  }\n}\n```\n\nThe last object bounding box in the `obstaclesBoundingBoxes` array is the finish line box. Knowing this, we can determine when the player box has reached the finish line without hitting an obstacle. If the player box intersects with the last item in the `obstaclesBoundingBoxes` array, you win. If the player box intersects with any other item, you lose.\n\nThe game is now playable. Try make it to the end of the obstacle course.\n\n## Adding restart\n\nThere is one big problem with our game: once the game is over we need to refresh the page to play again. That's not a very good user experience. Let's add a \"Play\" button that will show on page load and when the game is over. It will start the game and reset everything that needs to be reset at the start of a game.\n\nAdd the following to the `index.html` file inside of the `<body>` tag to create a button and a screen that covers the window behind the button:\n\n```html\n<div id=\"play-btn-screen\">\n  <div class=\"play-btn-container\">\n    <div>Use the up, down, left and right arrow keys to move</div>\n    <button id=\"play-btn\">Play</button>\n  </div>\n</div>\n```\n\nAdd the following to the `style.css` file:\n\n```css\n#play-btn-screen {\n  position: absolute;\n  min-width: 100%;\n  min-height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1;\n}\n\n.play-btn-container {\n  color: white;\n  text-align: center;\n}","metadata":{"id":827}}],["828",{"pageContent":"position: absolute;\n  min-width: 100%;\n  min-height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1;\n}\n\n.play-btn-container {\n  color: white;\n  text-align: center;\n}\n\n#play-btn {\n  background-color: red;\n  padding: 1rem 1.5rem;\n  margin: 0.5rem;\n}\n```\n\nThis will create a play button in the middle of the screen.\n\nNow let's make the button work. Add the following global variables to the top of the `script.js` file:\n\n```javascript\nconst playBtnScreen = document.getElementById(\"play-btn-screen\");\nconst playBtn = playBtnScreen.querySelector(\"#play-btn\");\nvar allObjs = [];\n```\n\nThis gets the play button screen (background cover behind the button) and play button element from the DOM and stores them in variables. The `allObjs` array will store all of the created objects. We need this array to clear the scene by removing all of the objects at the start of each game. We do this so that we can place new randomly positioned objects in the scene and not have objects in the scene from previous rounds.\n\nNext, add a new click event listener on the `playBtn`. Add the following to the bottom of the `script.js` file:\n\n```javascript\nplayBtn.addEventListener(\"click\", () => {\n  allObjs.forEach((obj) => scene.remove(obj));\n  camera.position.set(4, 4, -4);\n  camera.lookAt(0, 0, 2);\n  initializeBoxes();\n  gameOver = false;\n  animate();\n  playBtnScreen.style.visibility = \"hidden\";\n});\n```","metadata":{"id":828}}],["829",{"pageContent":"camera.position.set(4, 4, -4);\n  camera.lookAt(0, 0, 2);\n  initializeBoxes();\n  gameOver = false;\n  animate();\n  playBtnScreen.style.visibility = \"hidden\";\n});\n```\n\nThe play button is used to start and also re-start the game. The first thing we do when the play button is clicked is to remove all the objects in the scene using the `scene.remove` method. We then reset the camera position and call the `initializeBoxes` function, which creates and positions all of the objects. We set `gameOver` to false so that our `animate` function and `keydown` event listener will work. We then call the `animate` function to start the animation loop, and then we hide the play button screen, which hides the play button as well. We need to make a few more changes in our `script.js` file for the play button to work properly:\n\n- Delete the `animate()` function call in the `init` function. We now call it when the play button is clicked.\n\n- Add `allObjs.push(mesh);` in the `createBox` function above ` scene.add(mesh);`. This adds the created box mesh (object) to the `allObjs` array.\n\n- Add the following lines in the `detectCollisions` function below `gameOver = true;`:\n\n  ```javascript\n  playBtnScreen.style.visibility = \"visible\";\n  playBtn.focus();\n  ```\n\n  This will make our play button visible at the end of the game and focus the button so that you can easily restart the game by pressing the spacebar or enter key.\n\n- Add the following lines at the start of the `initializeBoxes` function:\n\n  ```javascript\n  // make empty at start of a game\n  allObjs = [];\n  obstaclesBoundingBoxes = [];\n  ```\n\n  This clears the `allObjs` array so that it only contains objects created in the current game. We also clear the `obstaclesBoundingBoxes` as we only want to detect collisions with objects in the current game.\n\n- Add `allObjs.push(mesh);` in the `initializeBoxes` function above `scene.add(mesh);`. This adds the finish line box to the `allObjs` array.\n\nOur game is almost complete, all we need to do now is make it mobile-friendly.","metadata":{"id":829}}],["830",{"pageContent":"Our game is almost complete, all we need to do now is make it mobile-friendly.\n\n## Making the game mobile friendly: Adding on-screen arrow buttons\n\nTo make the game mobile friendly, we will add up, down, left, and right buttons to the bottom of the screen.\n\nAdd the following to the `index.html` file inside the `<body>` tag, just above the `<script>` tag to create the buttons:\n\n```html\n<div id=\"keys\">\n  <div class=\"keys-container\">\n    <button id=\"up\">\n      <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n        <g transform=\"rotate(0, 5,5)\">\n          <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n        </g>\n      </svg>\n    </button>\n    <button id=\"left\">\n      <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n        <g transform=\"rotate(-90, 5,5)\">\n          <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n        </g>\n      </svg>\n    </button>\n    <button id=\"down\">\n      <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n        <g transform=\"rotate(180, 5,5)\">\n          <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n        </g>\n      </svg>\n    </button>\n    <button id=\"right\">\n      <svg width=\"30\" height=\"30\" viewBox=\"0 0 10 10\">\n        <g transform=\"rotate(90, 5,5)\">\n          <path d=\"M5,4 L7,6 L3,6 L5,4\" />\n        </g>\n      </svg>\n    </button>\n  </div>\n</div>\n```\n\nThe up, down, left, and right icons are created using SVGs.\n\nNow let's add some basic styling to our buttons. Add the following to the `style.css` file:\n\n```css\n#keys {\n  position: absolute;\n  min-width: 100%;\n  min-height: 100%;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n}\n\n.keys-container {\n  display: grid;\n  grid-template-columns: 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas:\n    \".    up   .\"\n    \"left down right\";\n  grid-gap: 10px;\n  padding-bottom: 3rem;\n}\n\n#keys button {\n  padding: 0.5rem;\n}\n\n#up {\n  grid-area: up;\n}\n\n#down {\n  grid-area: down;\n}\n\n#left {\n  grid-area: left;\n}\n\n#right {\n  grid-area: right;\n}\n```","metadata":{"id":830}}],["831",{"pageContent":"grid-gap: 10px;\n  padding-bottom: 3rem;\n}\n\n#keys button {\n  padding: 0.5rem;\n}\n\n#up {\n  grid-area: up;\n}\n\n#down {\n  grid-area: down;\n}\n\n#left {\n  grid-area: left;\n}\n\n#right {\n  grid-area: right;\n}\n```\n\nTo see the arrows, click the \"Open in a new tab\" button in the repl Output tab. This opens the link to the repl in a new tab. You can copy this link to view your repl on your phone or to share it with your friends.\n\n![Replit - open in new tab link](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/open_in_new_tab.png)\n\nYou should now be able to see the screen arrow buttons.\n\n![Screen arrow buttons](https://replit-docs-images.bardia.repl.co/images/tutorials/47-3dgamethreejs/screen_buttons.png)\n\nTry clicking a button before pressing \"Play\". You will notice that you can't click the arrow buttons. This is because the play button screen, which covers the whole screen, has a CSS `z-index` property of `1`. Once you click \"Play\", the play button screen CSS `visibility` property is set to hidden, and you will be able to press the arrow buttons.\n\nNow let's add some JavaScript click event listeners and some functions to make our arrow buttons work on desktop and mobile. Our code is going to look quite complex because we use some extra functions and `setTimeout` to allow the player box to continuously move when the arrow button is held down. This makes for a better user experience than having to continuously tap or click the button to move in one direction. Add the following global variable to the top of the `script.js` file:\n\n```javascript\nconst keyBtns = document.querySelectorAll(\".keys-container button\");\n```\n\nThis gets all the key buttons from the DOM and stores them in a variable.\n\nNow add the following to the bottom of the `script.js` file:\n\n```javascript\nlet timeoutID = 0;\n\nfunction moveLeft() {\n  const currXPos = player.mesh.position.x;\n  if (currXPos > xBoundary) return;\n  player.mesh.position.x += speed;\n  clearTimeout(timeoutID);\n  timeoutID = setTimeout(moveLeft, 50);\n}\n\nfunction moveRight() {","metadata":{"id":831}}],["832",{"pageContent":"const currXPos = player.mesh.position.x;\n  if (currXPos > xBoundary) return;\n  player.mesh.position.x += speed;\n  clearTimeout(timeoutID);\n  timeoutID = setTimeout(moveLeft, 50);\n}\n\nfunction moveRight() {\n  const currXPos = player.mesh.position.x;\n  if (currXPos < -xBoundary) return;\n  player.mesh.position.x -= speed;\n  clearTimeout(timeoutID);\n  timeoutID = setTimeout(moveRight, 50);\n}\n\nfunction moveUp() {\n  const currYPos = player.mesh.position.y;\n  if (currYPos > yBoundary) return;\n  player.mesh.position.y += speed;\n  clearTimeout(timeoutID);\n  timeoutID = setTimeout(moveUp, 50);\n}\n\nfunction moveDown() {\n  const currYPos = player.mesh.position.y;\n  if (currYPos < -yBoundary) return;\n  player.mesh.position.y -= speed;\n  clearTimeout(timeoutID);\n  timeoutID = setTimeout(moveDown, 50);\n}\n\nfunction handleKeyDown(e) {\n  if (gameOver) return;\n  const { id } = e.currentTarget;\n\n  if (id === \"left\") {\n    moveLeft();\n  }\n  if (id === \"right\") {\n    moveRight();\n  }\n  if (id === \"up\") {\n    moveUp();\n  }\n  if (id === \"down\") {\n    moveDown();\n  }\n}\n\n// moving box - mobile - using screen btns\nkeyBtns.forEach((keyBtn) => {\n  keyBtn.addEventListener(\"mousedown\", handleKeyDown);\n  keyBtn.addEventListener(\"touchstart\", handleKeyDown);\n  keyBtn.addEventListener(\"mouseup\", () => {\n    clearTimeout(timeoutID);\n    timeoutID = 0;\n  });\n\n  keyBtn.addEventListener(\"mouseleave\", () => {\n    clearTimeout(timeoutID);\n    timeoutID = 0;\n  });\n  keyBtn.addEventListener(\"touchend\", () => {\n    clearTimeout(timeoutID);\n    timeoutID = 0;\n  });\n  keyBtn.addEventListener(\"touchcancel\", () => {\n    clearTimeout(timeoutID);\n    timeoutID = 0;\n  });\n});\n```","metadata":{"id":832}}],["833",{"pageContent":"clearTimeout(timeoutID);\n    timeoutID = 0;\n  });\n  keyBtn.addEventListener(\"touchcancel\", () => {\n    clearTimeout(timeoutID);\n    timeoutID = 0;\n  });\n});\n```\n\nFor each key button, we add `\"mousedown\"` and `\"touchstart\"` event listeners. When the button is clicked or touched, the `handleKeyDown` function is called. This function determines which button was clicked or touched by checking the ID of the event's `currentTarget` property. Different functions are called depending on the ID of the button. For each function that handles the movement in a particular direction, we get the current position of the player box, check if it is within the set boundaries, and increase or decrease its position by the `speed` variable value. We then recursively call the function again after 50 ms using [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) so that the movement is continuous when the button is held down.\n\nThe `setTimeout` function returns a `timeoutID` that is a positive integer value. It identifies the timer created by the call to `setTimeout()`. This value is passed to [`clearTimeout()`](https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout) to cancel the timeout after each recursive function call so that we don't create unnecessary timeouts.\n\nFor each key button, we also add `\"mouseleave\"`, `\"touchend\"`, and `\"touchcancel\"` event listeners. These clear the timeouts when the button is not held down anymore.\n\n> A little cheat in the game: If you have a touchscreen laptop, pressing the arrow key on your keyboard and on the screen will make it move faster than normal!\n\nSave and run your project. Our game is complete!\n\n## Next steps\n\nWe learnt the basics of three.js and built a simple 3D game. There are many things that you can do to improve the game. Here are some you might want to try:\n\n- Replace the alert with a nicely styled modal.","metadata":{"id":833}}],["834",{"pageContent":"- Replace the alert with a nicely styled modal.\n- Style the objects, or import or create 3D models. See [rendering 3D scenes with three.js](/tutorials/3D-rendering-with-threejs) for more information.\n- Add a nicer surface instead of the grid.\n- Add a loading screen while the 3D scene is loading.\n- Make the game more challenging by increasing the speed the player box moves at as the game progresses, adding more obstacles, or by making the obstacles move.\n- Add a points system. Change the game logic so that you have to hit the boxes to get points.\n\n  - Store the points in local storage.\n\n- Add physics to the collisions using [cannon-es](https://github.com/pmndrs/cannon-es).\n- Or for a more advanced challenge: Make a bigger course, try making infinite movement within finite bounds so that you don't use too much of your computer's memory.\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/3D-obstacle-avoiding-game?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":834}}],["835",{"pageContent":"---\ntitle: 3D rendering with three.js\nslug: /tutorials/3D-rendering-with-threejs\n---\n\n# Rendering 3D scenes with three.js\n\nThree.js is a JavaScript library for rendering 3D worlds in web browsers. With three.js you can make a website using 3D elements and advanced animation, or even complex 3D games in JavaScript. To get a feeling for the kind of renders three.js is capable of, have a look at their [examples page](https://threejs.org/examples).\n\nUsing three.js with Replit requires a little extra setup, but your site will be online immediately, making it easy to share with your friends.\n\n## Creating a new project in Replit\n\nHead over to [Replit](https://replit.com) and create a new repl. Choose **HTML, CSS, JS** as your project type. Give this repl a name, like \"3D rendering\".\n\n![creating a new replit project](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/new-project.png)\n\n## Importing three.js to the project\n\nOpen the `script.js` file in your repl. We'll import three.js by referencing it from a content distribution network (CDN). There are other ways of using three.js in a project, but this one will get us up and running the quickest.\n\nAdd the following line to the script file to import three.js from the Skypack CDN:\n\n```javascript\nimport * as THREE from \"https://cdn.skypack.dev/three@0.136.0\";\n```\n\nYou'll notice that we're using the [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) keyword. This is a way of importing a new [JavaScript `module`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules) package. To make this work, we need to change the default `script` tag in the `index.html` file to the following:\n\n```html\n<script type=\"module\" src=\"script.js\"></script>\n```\n\nNotice we added the `type=module` attribute to the script tag, which allows us to use module features in our script.\n\nNow we are ready to use three.js in our project.\n\n## Creating a basic scene","metadata":{"id":835}}],["836",{"pageContent":"```\n\nNotice we added the `type=module` attribute to the script tag, which allows us to use module features in our script.\n\nNow we are ready to use three.js in our project.\n\n## Creating a basic scene\n\nTo start, we'll add some basic built-in 3D shapes to a scene. The main steps are:\n\n1. Create a renderer, and attach it to an element on the web page.\n2. Create a new `Scene` container to hold all our 3D objects. We'll pass this scene to the `renderer` whenever we want to draw it.\n3. Create the geometry, or points that make up the \"frame\" of the object we want to render.\n4. Create a material, which is color and texture, to cover the frame of the object.\n5. Add the geometry and material to a \"mesh\" object, which is a 3D object that can be rendered.\n6. Add the mesh to the scene.\n7. Add a camera to the scene, which determines what we see rendered.\n\nThat's quite a few steps, so let's start by creating a renderer. Add the following lines to the `script.js` file:\n\n```javascript\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n```\n\nThis sets up a new [`WebGL`](https://developer.mozilla.org/en-US/docs/Glossary/WebGL) renderer. WebGL is a browser technology that gives web developers access to the graphics cards in computers. The `setSize` method sets the size of the renderer output to the size of the browser window by using the width and height values from the [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window) object. This way our scene will take up the entire browser window.\n\nNext we'll create a new `Scene` container. Add the following line to the `script.js` file:\n\n```javascript\nconst scene = new THREE.Scene();\n```\n\nIts' time to create some 3D objects. We'll start with a cube. To create a cube, we'll need to create a `Geometry` object. Add the following line to the `script.js` file:\n\n```javascript\nconst boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n```","metadata":{"id":836}}],["837",{"pageContent":"```javascript\nconst boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n```\n\nThis gives us the geometry of a cube. The `BoxGeometry` constructor takes three arguments: the width, height, and depth of the cube. Three.js has more built-in geometries, so let's add another shape to the scene. This time we'll add a torus, or donut shape. They always look cool in 3D:\n\n```javascript\nconst torusGeometry = new THREE.TorusGeometry(10, 3, 16, 100);\n```\n\nWe've got the geometry, or points, of the 3D objects. Now we need to create a material to cover them with. You can think of the material as the skin of the object. Add the following line to the `script.js` file:\n\n```javascript\nconst material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n```\n\nThe MeshBasicMaterial is a simple material that covers the geometry with a solid color, in this case using the hexadecimal RGB code for pure green. You can also use a [`Texture`](https://threejs.org/docs/index.html#api/en/textures/Texture) to cover the geometry with a texture.\n\nThe next step is combining the geometries and the material to make a mesh. Add the following lines to the `script.js` file:\n\n```javascript\nconst cube = new THREE.Mesh(boxGeometry, material);\nconst torus = new THREE.Mesh(torusGeometry, material);\n```\n\nThese meshes are what we'll add to the scene. We'll add the cube first, then the torus.\n\n```javascript\nscene.add(cube);\nscene.add(torus);\n```\n\nA camera determines what we see rendered, depending on where it is placed and where it is aimed. Add the following line to the `script.js` file:\n\n```javascript\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\ncamera.position.z = 25;\n```\n\nWe've got all the pieces we need to start rendering the scene. Now we just need to tell the renderer to draw the scene. Add the following line to the `script.js` file:\n\n```javascript\nrenderer.render(scene, camera);\n```","metadata":{"id":837}}],["838",{"pageContent":"```javascript\nrenderer.render(scene, camera);\n```\n\nNow try running the code, by pushing the `Run` button at the top of the Replit window. You should see your first scene, a green cube and torus:\n\n![static-scene](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/static-scene.png)\n\nOur scene doesn't look very \"3D\" yet, but we'll get there soon.\n\n## Animating a scene\n\nAnimating a scene or moving the camera can create more of a 3D effect. Let's add a little animation to our scene by rotating the torus and cube. In the `script.js` file, replace `renderer.render(scene, camera);` with the following lines:\n\n```javascript\nfunction animate() {\n  torus.rotation.x += 0.01;\n  torus.rotation.y += 0.01;\n  cube.rotation.x += 0.01;\n  cube.rotation.y += 0.01;\n  renderer.render(scene, camera);\n  requestAnimationFrame(animate);\n}\nanimate();\n```\n\nThis creates a new function, `animate()`, that will be called on every frame. We rotate the torus and cube by 0.01 radians around the objects' x and y axes using the [`rotation`](https://threejs.org/docs/index.html?q=rotation#api/en/core/Object3D.rotation) property of each mesh. This is a handy method that saves us from calculating the rotation ourselves.\n\nAfter we rotate the objects, we call the `renderer.render(scene, camera);` method to draw the scene. This will cause the scene to be redrawn every frame, with the updated rotations.\n\nThe `requestAnimationFrame` function is a built-in browser API call that will fire the `animate()` function on the next frame. Each time `animate()` is called, `requestAnimationFrame` will call it again for the next frame. We call this function so that we can keep the animation running.\n\nTo kick off the animation for the first time, we call the `animate()` function ourselves. Thereafter, it will keep itself running.\n\nPress the \"Run\" button again and you should see the torus and cube rotating in the Replit window:\n\n![animated-scene](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/animated-scene.gif)","metadata":{"id":838}}],["839",{"pageContent":"Press the \"Run\" button again and you should see the torus and cube rotating in the Replit window:\n\n![animated-scene](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/animated-scene.gif)\n\nThat looks a lot more 3D now!\n\nTry changing up the material color and see what happens. You can also define different materials for the torus and cube, to make them look different.\n\n## Adding a model to the scene\n\nWe've created some basic 3D shapes programmatically. As you can imagine, building up a complex 3D world or character using this method would be very tedious. Fortunately, there are many 3D models available online, or perhaps you or a friend have played with making models in 3D animation applications like [Blender](https://www.blender.org). Three.js has a built-in loader to load these models into the scene.\n\nTo add the model loading functionality, we need to import it into our script. At the top of the `script.js` file, just below the existing `import` line, add the following:\n\n```javascript\nimport { GLTFLoader } from \"https://cdn.skypack.dev/three@0.136.0/examples/jsm/loaders/GLTFLoader.js\";\n```\n\nThis gives us the `GLTFLoader` class, which we'll use to load the model. \"glTF\" stands for Graphics Language Transmission Format, and is widely used as a way to import and export 3D models from various 3D applications. All we need to know is that we can import any model that is saved in this format into our three.js applications. If you search for \"free GLTF 3D models\" on the web, you'll find a lot of sites where creators upload their models. Many are free to use in your projects, and some you need to pay for. We'll look for some free ones to experiment with.\n\nLet's use this [model of soda cans](https://sketchfab.com/3d-models/soda-cans-4e0be610db9646929d8be84491f1a72f) to start. Download the model, choosing the `glTF` format. We've also included the model [here](https://tutorial-files.util.repl.co/3d-rendering-threejs/soda_cans.zip), so you can download it easily.","metadata":{"id":839}}],["840",{"pageContent":"Add the model to your repl by dragging the folder into the \"Files\" panel on the left.\n\n![add-model](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/add-model.gif)\n\nWe'll need to remove or comment out the previous code that drew the cube and torus. Remove the lines that create the cube and torus geometries, materials, and meshes, as well as the animation code. You should have only the following lines remaining:\n\n```javascript\nimport * as THREE from \"https://cdn.skypack.dev/three@0.136.0\";\nimport { GLTFLoader } from \"https://cdn.skypack.dev/three@0.136.0/examples/jsm/loaders/GLTFLoader.js\";\n\nconst renderer = new THREE.WebGLRenderer();\nrenderer.setSize(window.innerWidth, window.innerHeight);\ndocument.body.appendChild(renderer.domElement);\n\nconst scene = new THREE.Scene();\n\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  window.innerWidth / window.innerHeight,\n  0.1,\n  1000\n);\n```\n\nWe need to add a few extra steps when loading a model. First, we need to create a new `GLTFLoader` object. Add the following line to the `script.js` file, just below the `scene` variable line:\n\n```javascript\nconst loader = new GLTFLoader();\nconst fileName = \"./soda_cans/scene.gltf\";\nlet model;\n```\n\nHere we've created a new loader object, and we've created a variable `fileName` with the path to the soda can model we want to load. We also have a variable `model` that will hold the loaded model, which we can manipulate later.\n\nNow for the actual loading code. We'll use the `load` method of the loader. Add the following lines to the `script.js` file, below the code we've just added:\n\n```javascript\nloader.load(\n  fileName,\n  function (gltf) {\n    model = gltf.scene;\n    scene.add(model);\n  },\n  undefined,\n  function (e) {\n    console.error(e);\n  }\n);\n```\n\nThe `load` method takes a few parameters:\n\n- the path to the model,\n- a callback function that will be called when the model is loaded,\n- a loading progress callback function, and\n- an error callback function that will be called if there is an error loading the model.","metadata":{"id":840}}],["841",{"pageContent":"- a callback function that will be called when the model is loaded,\n- a loading progress callback function, and\n- an error callback function that will be called if there is an error loading the model.\n\nWe supply the `undefined` value for the progress callback, as we don't need it for this example, although it is a nice touch in a production application to give feedback to the user.\n\nThis alone won't always make a model visible on the screen. This is because a model may have no lighting, or the material may not be self-illuminating, or the model may be too large or too small to be visible from our default camera angle. To account for these possibilities, we'll include some helper functions to add lighting, adjust the model's position, and set the camera's position and angle.\n\nLet's start with adding some lighting. Add the following function to the `script.js` file:\n\n```javascript\nfunction addLight() {\n  const light = new THREE.DirectionalLight(0xffffff, 4);\n  light.position.set(0.5, 0, 0.866);\n  camera.add(light);\n}\n```\n\nThis function will add a directional light with a white color to the scene, at a position slightly offset from the camera. We attach the light to the camera so that it is always shining at whatever the camera is looking at.\n\nThe second helper function adjusts the positions of the model and the camera. Add the following function to the `script.js` file:\n\n```javascript\nfunction adjustModelAndCamera() {\n  const box = new THREE.Box3().setFromObject(model);\n  const size = box.getSize(new THREE.Vector3()).length();\n  const center = box.getCenter(new THREE.Vector3());\n\n  model.position.x += model.position.x - center.x;\n  model.position.y += model.position.y - center.y;\n  model.position.z += model.position.z - center.z;\n\n  camera.near = size / 100;\n  camera.far = size * 100;\n  camera.updateProjectionMatrix();\n\n  camera.position.copy(center);\n  camera.position.x += size / 0.2;\n  camera.position.y += size / 2;\n  camera.position.z += size / 100;\n  camera.lookAt(center);\n}\n```","metadata":{"id":841}}],["842",{"pageContent":"camera.updateProjectionMatrix();\n\n  camera.position.copy(center);\n  camera.position.x += size / 0.2;\n  camera.position.y += size / 2;\n  camera.position.z += size / 100;\n  camera.lookAt(center);\n}\n```\n\nThis function works by finding the bounding box of the model. The bounding box is the smallest box that can contain all the vertices of the model. We can then use this box to set the camera's near and far clipping planes, and also to adjust the position of the model and the camera. Clipping planes are used to determine what is visible in the camera's view. The near plane is the closest distance from the model that the camera can \"see\". The far plane is the furthest distance the camera can \"see\". This is used to determine what is visible in the camera's view. We use `camera.updateProjectionMatrix` to recalculate the camera's internal parameters.\n\nWe center the camera on the model, and then adjust the camera's position and angle to make sure the model is visible. We also point the camera to the center of the model using the `lookAt` method.\n\nNow let's call these new functions from the loader's callback function. We'll also render the scene after this setup. Update the `loader.load` callback function as follows:\n\n```javascript\nloader.load(\n  fileName,\n  function (gltf) {\n    model = gltf.scene;\n    scene.add(model);\n    addLight();\n    adjustModelAndCamera();\n    scene.add(camera);\n    renderer.render(scene, camera);\n  },\n  undefined,\n  function (e) {\n    console.error(e);\n  }\n);\n```\n\nYou'll notice that, along with calls to the new function, we added in an extra line `scene.add(camera)`. This is because we added the light to the camera to follow it around. A light is part of the scene, so we add the camera with the light attached to our scene.\n\nIf you run the code, you'll see that the model is now visible in the scene. However, it's a side-on view and a bit far away.\n\n![model-side-view](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/model-side-view.png)\n\n## Adding controls to the scene","metadata":{"id":842}}],["843",{"pageContent":"![model-side-view](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/model-side-view.png)\n\n## Adding controls to the scene\n\nTo be able to see and inspect the model better, we can add some mouse controls to the scene so that we can zoom in or rotate the model. Three.js has a built-in `OrbitControls` class that we can use.\n\nFirst, add the following import code to the top of the `script.js` file, along with the other import statements:\n\n```javascript\nimport { OrbitControls } from \"https://cdn.skypack.dev/three@0.136.0/examples/jsm/controls/OrbitControls.js\";\n```\n\nTo initiate the orbit controls, we'll need to add the following code to the `script.js` file, after the renderer and camera have been created:\n\n```javascript\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.screenSpacePanning = true;\n```\n\nThis creates a new controls object, and specifies what object it controls, the `camera`, and the DOM element the controls should listen to mouse inputs from. We also set the `screenSpacePanning` property to `true`, which allows us to pan the camera around the model.\n\nThe controls change the view of the model as we move around it, so we need to add a modified `animate` function to redraw the scene each frame. Add the following code to the `script.js` file:\n\n```javascript\nfunction animate() {\n  requestAnimationFrame(animate);\n  controls.update();\n  renderer.render(scene, camera);\n}\n```\n\nNow replace the `renderer.render(scene, camera);` line in the `loader.load` callback function with the following call to the `animate` function to start it off;\n\n```javascript\nanimate();\n```\n\nSave and run the project. Now you can try using the mouse to rotate the model and zoom in and out.\n\n![model-orbit-controls](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/model-orbit-controls.gif)\n\n## Next Steps","metadata":{"id":843}}],["844",{"pageContent":"![model-orbit-controls](https://docimg.replit.com/images/tutorials/38-3drendering-threejs/model-orbit-controls.gif)\n\n## Next Steps\n\nNow that you know how to build a simple 3D scene using three.js, you might like to explore three.js and 3D rendering a little more. Head over to the [three.js documentation](https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene) to learn more about the tool and see other examples of what you can do with it. You can also download and try [Blender](https://www.blender.org/) to create your own 3D models.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/3D-rendering?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":844}}],["845",{"pageContent":"# Classic Basic on Replit\n\n- Simple syntax based on Classic Basic\n- A 50x50 pixel display for graphics and games\n- A console for input/output\n\n[Start here](https://replit.com/new/basic).\n\n![basic environment](https://docimg.replit.com/images/basic.png)\n\n## Syntax\n\nEvery line starts with a command, or a line number followed by a command.\n\n```\nPRINT \"Hello world\"\n```\n\nLine numbers are optional and allow us to do control flow like subroutines and goto statements (more on this later).\n\n```\n10 PRINT \"hello\"\nGOTO 10\n```\n\nEach basic command has its own syntax.\n\n## Commands\n\n### REM\n\n`REM` allows us to add comments to our programs. Comments are for you or other people to read. Computers ignore them.\n\nExample: `REM this is a comment`\n\n### PRINT\n\n`PRINT` puts variables, strings, or numbers on the console. The console is the input/output area of Basic, where the program shows you useful information and asks you for input.\n\n### LET (optional)\n\n`LET` lets us declare variables. Variables are single letters that hold values. Values could be either strings or numbers. Note that `LET` is optional and can be left out of an assignment expression.\n\nExample using a number:\n\n```\n10 LET X = 10\n20 PRINT X\n```\n\nExample using a string:\n\n```\n10 LET X = \"hello\"\n20 PRINT X\n```\n\nExample without `LET`:\n\n```\n10 X = \"hello\"\n20 PRINT X\n```\n\n### ARRAY\n\n`ARRAY` lets us declare an array. Arrays can be thought of as lists of values.\n\nExample:\n\n```\n10 ARRAY a\n20 a[0] = \"car\"\n30 a[1] = \"bus\"\n40 a[2] = \"bike\"\n50 print a\n```\n\nIf we want to create a multi-dimensional array, which is an array of arrays, we can declare the array with a dimension:\n\n```\n10 ARRAY a, 2\n\n15 REM the first array is ground transportation\n20 a[0][0] = \"car\"\n30 a[0][1] = \"bus\"\n40 a[0][2] = \"bike\"\n\n45 REM the second array aerial transportation\n50 a[1][0] = \"plane\"\n60 a[1][1] = \"helicopter\"\n70 a[1][2] = \"jetpack\"\n\n80 print a\n```\n\n### INPUT\n\n`INPUT` lets you communicate with the program by typing into the console. Whatever you typed will be stored into a variable that you can then use in your program.\n\nExample:\n\n```","metadata":{"id":845}}],["846",{"pageContent":"80 print a\n```\n\n### INPUT\n\n`INPUT` lets you communicate with the program by typing into the console. Whatever you typed will be stored into a variable that you can then use in your program.\n\nExample:\n\n```\n10 INPUT \"type your name: \"; A\n20 PRINT \"Hello \" + A\n```\n\n### END\n\n`END` ends the program.\n\nExample:\n\n```\n10 END\n20 PRINT \"We never reach this statement\"\n```\n\n### GOTO\n\n`GOTO` advises which line number is executed next. Normally, lines are executed from the lowest to the highest number, but `GOTO` allows us to jump to a specific line.\n\nExample:\n\n```\n10 GOTO 30\n20 PRINT \"This line never executes\"\n30 PRINT \"Jumped here from 10\"\n```\n\n`GOTO` can be used to create a loop. Loops are when programs repeatedly execute a set of lines.\n\nThe following examples prints \"hello\" forever:\n\n```\n10 PRINT \"hello\"\n20 GOTO 10\n```\n\n### IF...THEN\n\n`IF...THEN` is like `GOTO` in that it influences the execution of the program, but it's different in that it all happens on the same line. If the mathematical or relational test is true, we execute the command that comes after `THEN`. If it's untrue, we simply proceed to the next line.\n\n```\n10 IF X > Y THEN PRINT \"X is larger than Y\"\n```\n\n### IF...THEN...ELSE\n\nThis is the same as `IF...THEN` except we execute the command following the `ELSE` command.\n\n```\n10 IF X > 0 THEN PRINT \"X is positive\" ELSE PRINT \"X is negative\"\n```\n\n### FOR...TO...STEP...NEXT\n\nIt's often useful to repeatedly execute a number of lines. This is called \"looping\", and `FOR` statements allow us to create loops between ranges of numbers.\n\nFor example, we can print numbers from 1 to 10:\n\n```\n10 FOR I = 1 TO 10\n20 PRINT I\n30 NEXT I\n```\n\nOutput:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\nBut what if we only want to print even numbers between 1 and 10? This is where `STEP` comes in. `STEPS` tells the computer how much to add to the variable (in this case `I`) with each loop.\n\n```\n10 FOR I = 2 TO 30 STEP 2\n20 PRINT I\n30 NEXT I\n```\n\nOutput:\n\n```\n2\n4\n6\n8\n10\n```\n\nRemember to call `NEXT` with the variable name after the last line of the loop.\n\n### GOSUB...RETURN","metadata":{"id":846}}],["847",{"pageContent":"```\n10 FOR I = 2 TO 30 STEP 2\n20 PRINT I\n30 NEXT I\n```\n\nOutput:\n\n```\n2\n4\n6\n8\n10\n```\n\nRemember to call `NEXT` with the variable name after the last line of the loop.\n\n### GOSUB...RETURN\n\nA subroutine is a group of statements that you wish to use repeatedly in a program. They're similar to loops in that they can be executed repeatedly, but you have to use `GOSUB` to call (move the program to) the subroutine's first line number. After the subroutine finishes executing, you can use `RETURN` to go back to where you used `GOSUB`.\n\nExample:\n\n```\n10 GOSUB 40\n20 PRINT \"This is the end of the program\"\n30 END\n40 PRINT \"This is the start of the subroutine\"\n50 PRINT \"We can easily call it as many times\"\n60 PRINT \"as we'd like\"\n70 RETURN\n```\n\n### PLOT\n\n`PLOT` lights a pixel with x, y coordinates on the display with a certain color.\n\nExample:\n\n```\n10 PLOT 0, 0, \"red\"\n```\n\nColors can be any of the [these colors](https://www.w3schools.com/cssref/css_colors.asp).\n\n### DISPLAY\n\n`DISPLAY` changes the display size (rows, columns) and lets us turn off pixel borders.\n\nExample:\n\n```\nDISPLAY 100, 100, FALSE\n```\n\n`DISPLAY` will affect the values of the constants `ROWS` and `COLUMNS`.\n\nExample:\n\n```\nDISPLAY 50, 100, FALSE\nPRINT ROWS\nPRINT COLUMNS\n```\n\nOUTPUT:\n\n```\n50\n100\n```\n\n### DRAW\n\n`DRAW` is like `PLOT` except it lights up multiple pixels on the display. It takes a two-dimensional array of colors.\n\nExample:\n\n```\n10 ARRAY a, 2\n20 a[0][0] = \"red\"\n30 a[25][25] = \"yellow\"\n40 DRAW a\n```\n\n### TEXT\n\n`TEXT` draws text on the display at an x, y coordinate. Optional text size and color parameters can be passed in.\n\nExample:\n\n```\n10 TEXT 0, 0, \"hello world\", 25, \"red\"\n```\n\nColors can be any of the [these colors](https://www.w3schools.com/cssref/css_colors.asp).\n\n### PAUSE\n\n`PAUSE` pauses the program for a number of milliseconds. Milliseconds are 1/1000th of a second.\n\nExample:\n\n```\n10 PRINT \"pause for a second\"\n20 PAUSE 1000\n30 PRINT \"end\"\n```\n\n### CLS\n\n`CLS` clears the console and the display.\n\nExample:\n\n```\n10 CLS\n```\n\n### CLT\n\n`CLT` clears the console.\n\nExample:\n\n```\n10 CLT\n```\n\n### CLC\n\n`CLC` clears the display.\n\nExample:\n\n```","metadata":{"id":847}}],["848",{"pageContent":"20 PAUSE 1000\n30 PRINT \"end\"\n```\n\n### CLS\n\n`CLS` clears the console and the display.\n\nExample:\n\n```\n10 CLS\n```\n\n### CLT\n\n`CLT` clears the console.\n\nExample:\n\n```\n10 CLT\n```\n\n### CLC\n\n`CLC` clears the display.\n\nExample:\n\n```\n10 CLC\n```\n\n### SOUND\n\n`SOUND` lets us play a frequency for a duration in seconds.\n\nExample:\n\n```\n10 SOUND 400, 4\n```\n\nDuration is optional and will default to 1 second.\n\n### PLAY\n\n`PLAY` lets us play a note in an octave for a duration in seconds.\n\nExample:\n\n```\n10 PLAY \"C\", 4, 5\n```\n\n- Octave is optional and will default to `2`\n- Duration is optional and will default to `1`\n- Notes can be one of: `C C# D D# E F F# G G# A A# B`\n\n## Functions\n\nYou can think of functions as built-in subroutines you can call. It's important to differentiate between functions and commands. Lines should start with commands, while functions can be used as part of other commands but not on their own.\n\n### ABS\n\n`ABS` returns the absolute value of a number. The sign of the number will always be positive after this function is executed.\n\n```\n10 PRINT ABS(-11)\n20 PRINT ABS(11)\n```\n\nOutput:\n\n```\n11\n11\n```\n\n### COS\n\n`COS` returns the trigonometric cosine of a number.\n\nExample:\n\n```\n10 PRINT COS(1)\n```\n\nOutput:\n\n```\n0.5403023058681398\n```\n\n### SIN\n\n`SIN` returns the trigonometric sine of a number.\n\nExample:\n\n```\n10 PRINT SIN(1)\n```\n\nOutput:\n\n```\n0.8414709848078965\n```\n\n### TAN\n\n`TAN` returns the trigonometric tangent of a number.\n\nExample:\n\n```\n10 PRINT TAN(1)\n```\n\nOutput:\n\n```\n1.5574077246549023\n```\n\n### ATAN\n\n`ATAN` returns the trigonometric arctangent of a number.\n\nExample:\n\n```\n10 PRINT ATAN(1)\n```\n\nOutput:\n\n```\n0.7853981633974483\n```\n\n### EXP\n\n`EXP` returns Euler's number (e) raised to the power of a number.\n\nExample:\n\n```\n10 PRINT EXP(2)\n```\n\nOutput:\n\n```\n7.38905609893065\n```\n\n### INT\n\n`INT` returns the lowest closest integer of a number.\n\nExample:\n\n```\n10 PRINT INT(2.6)\n```\n\nOutput:\n\n```\n2\n```\n\nAlias: `FLOOR`\n\n### ROUND\n\n`ROUND` rounds a number to the closest integer.\n\nExample:\n\n```\n10 PRINT ROUND(2.6)\n```\n\nOutput:\n\n```\n3\n```\n\n### LOG\n\n`LOG` returns the natural logarithm of a number.\n\nExample:\n\n```\n10 PRINT LOG(5)\n```\n\nOutput:\n\n```\n1.6094379124341003\n```\n\n### SGN","metadata":{"id":848}}],["849",{"pageContent":"Example:\n\n```\n10 PRINT ROUND(2.6)\n```\n\nOutput:\n\n```\n3\n```\n\n### LOG\n\n`LOG` returns the natural logarithm of a number.\n\nExample:\n\n```\n10 PRINT LOG(5)\n```\n\nOutput:\n\n```\n1.6094379124341003\n```\n\n### SGN\n\n`SGN` returns the sign of a number. The sign is +1 if the number is positive, 0 if the number is 0, and -1 if the number is negative.\n\nExample:\n\n```\n10 PRINT SGN(-23)\n```\n\nOutput:\n\n```\n-1\n```\n\n### SQR\n\n`SQR` returns the square root of a number.\n\nExample:\n\n```\n10 PRINT SQR(25)\n```\n\nOutput:\n\n```\n5\n```\n\n### VAL\n\n`VAL` converts a string to a number, and `0` if it cannot be converted.\n\nExample:\n\n```\n10 PRINT VAL(\"33\")\n```\n\nOutput:\n\n```\n33\n```\n\n### RND\n\n`RND` returns a random number between 0 and 1.\n\nExample:\n\n```\n10 PRINT RND()\n```\n\nOutput:\n\n```\n0.54232\n```\n\nIf a number is placed between the parenthesis, then the command will return a random number between 1 and that number.\n\nExample:\n\n```\n10 PRINT RND(10)\n```\n\nOutput:\n\n```\n7\n```\n\n### ASC\n\n`ASC` returns the ASCII representation of a letter.\n\nExample:\n\n```\n10 PRINT \"s\"\n```\n\nOutput:\n\n```\n115\n```\n\n### LEFT\n\n`LEFT` returns the first `n` number of letters from a string.\n\nExample:\n\n```\n10 PRINT LEFT(\"basic\", 2)\n```\n\nOutput:\n\n```\nba\n```\n\n### MID\n\n`MID` returns a substring as defined by a starting and ending position in the string.\n\nExample:\n\n```\n10 PRINT MID(\"basic\", 1, 2)\n```\n\nOutput\n\n```\nas\n```\n\n### RIGHT\n\n`RIGHT` returns the last `n` number of letters from a string.\n\nExample:\n\n```\n10 PRINT RIGHT(\"basic\", 2)\n```\n\nOutput:\n\n```\nic\n```\n\n### CHR\n\n`CHR` returns the ASCII letter from a number.\n\nExample:\n\n```\n10 PRINT CHR(115)\n```\n\nOutput:\n\n```\ns\n```\n\nAliases: `STR`\n\n### LEN\n\n`LEN` returns the length of a string.\n\nExample:\n\n```\n10 PRINT LEN(\"basic\")\n```\n\nOutput:\n\n```\n5\n```\n\n### SPC\n\n`SPC` returns a number of spaces.\n\nExample:\n\n```\n10 PRINT \"hello\" + SPC(5) + \"world\"\n```\n\nOutput:\n\n```\nhello     world\n```\n\n### UPPERCASE\n\n`UPPERCASE` returns the uppercase string.\n\nExample:\n\n```\n10 PRINT UPPERCASE(\"basic\")\n```\n\nOutput:\n\n```\nBASIC\n```\n\n### LOWERCASE\n\n`LOWERCASE` returns the lowercase string.\n\nExample:\n\n```\n10 PRINT LOWERCASE(\"BASIC\")\n```\n\nOutput:\n\n```\nbasic\n```\n\n### COLOR\n\n`COLOR` returns the color of a pixel at x, y coordinates.\n\nExample:\n\n```\n10 PLOT 1,1,\"red\"\n20 PRINT COLOR(1, 1)\n```\n\nOutput:\n\n```","metadata":{"id":849}}],["850",{"pageContent":"Example:\n\n```\n10 PRINT LOWERCASE(\"BASIC\")\n```\n\nOutput:\n\n```\nbasic\n```\n\n### COLOR\n\n`COLOR` returns the color of a pixel at x, y coordinates.\n\nExample:\n\n```\n10 PLOT 1,1,\"red\"\n20 PRINT COLOR(1, 1)\n```\n\nOutput:\n\n```\nred\n```\n\n### GETCHAR\n\n`GETCHAR` returns a single character of user input. The program maintains a first-in-first-out queue of user inputs. If there are no user inputs in the queue, it will return an empty string `\"\"`.\n\nExample:\n\n```\n10 LET I = GETCHAR()\n20 IF I = \"\" THEN PRINT \"no input\" else PRINT \"input: \" + I\n```\n\n### GETCLICK\n\n`GETCLICK` returns an array of x, y coordinates of user mouse clicks. The program maintains a queue of clicks. If there are no user clicks in the queue, it will return an empty string `\"\"`.\n\nExample:\n\n```\nPRINT GETCLICK()\n```\n\n### TIME\n\n`TIME` returns the current milliseconds elapsed since the UNIX epoch.\n\nExample:\n\n```\n10 PRINT TIME()\n```\n\nOutput:\n\n```\n1587345235623\n```","metadata":{"id":850}}],["851",{"pageContent":"---\ntitle: Creative coding with Replit\n---\n\n# Creative coding with Replit\n\nIf you're into creating graphics, 3D worlds, games, sounds, and other more creative things, Replit has a number of tools and environments to help you. One of the benefits of coding with Replit is that you can switch between different programming paradigms and try them out without having to set it all up yourself.\n\n## What is creative coding?\n\nFor this article, we'll consider a tool to be a creative coding one if its main purpose is to create graphics, visual models, games, or sounds. Plain HTML or JavaScript can be used for this type of thing, but we're looking for tools and languages that are a bit more specialised.\n\nHere's a list of tools we'll be taking a look at for the more creative side of Replit:\n\n- Python `turtle`\n- p5.js\n- Kaboom\n- Pygame\n- Pyxel\n- GLSL\n\n### Python `turtle`\n\nTurtle graphics is a classic of the genre. First created way back in the 1960s, the idea is that there is a small turtle robot on the screen, holding some pens. You give the turtle commands to move around and tell it when to put the pen down and what color pen to use. This way you can make line or vector drawings on the screen. The turtle idea comes from a type of actual robot used for education.\n\nReplit has support for Python `turtle`, which is the current incarnation of the turtle graphics idea. Choose the \"Python (with Turtle)\" template when creating a new repl to use it.\n\n![turtle-template](https://docimg.replit.com/images/tutorials/34-creative-coding/turtle-template.png)\n\nPython `turtle` uses commands like `forward(10)`, `back(10)`, `left(50)`, `right(30)` `pendown()` and `penup()` to control the turtle. The methods `forward` and `back` take the distance the turtle should move as their arguments, while `left` and `right` take the angle in degrees to turn the turtle on the spot (the turtle is very nimble!). You can use `pendown` and `penup` to tell the turtle to draw or not draw while moving.","metadata":{"id":851}}],["852",{"pageContent":"When you create a new Python (with Turtle) template, you'll notice a small program is included as an example to show you the basics. When you run this program, it will draw a square with each side a different color.\n\n![turtle square](https://docimg.replit.com/images/tutorials/34-creative-coding/turtle-square.gif)\n\nAlthough `turtle` has a small set of simple commands, it can be used to make some impressive-looking graphics. This is because you can use loops and calculations and all the other programming constructs available in Python to control the turtle.\n\nTry this `turtle` program for example:\n\n[https://replit.com/@ritza/python-turtle](https://replit.com/@ritza/python-turtle)\n\n```python\nimport turtle\n\nt = turtle.Turtle()\nt.speed(0)\n\nsides = 3;\ncolors = ['red', 'yellow', 'orange']\n\nfor x in range(360):\n    t.pencolor(colors[x % sides])\n    t.forward(x * 3 / sides + x)\n    t.left(360 / sides + 1)\n    t.width(x * sides / 200)\n\n```\n\nThis code generates a spiral by drawing a slightly rotated and increasingly larger triangle for each of the 360 degrees specified in the main loop. This short little script produces a cool-looking output:\n\n![turtle spiral](https://docimg.replit.com/images/tutorials/34-creative-coding/turtle-spiral.png)\n\nTry changing up the `sides` parameter to draw different shapes, and play with the color combos to come up with new artworks.\n\n### p5.js\n\n[p5.js](https://p5js.org) is a JavaScript graphics and animation library developed specifically for artists and designers - and generally people who have not been exposed to programming before. It's based on the [Processing](https://processing.org) software project, and brings the Processing concept to web browsers, making it easy to share your \"sketches\", which is the p5.js name for programs.","metadata":{"id":852}}],["853",{"pageContent":"Replit has two templates for p5.js - one for pure JavaScript, and another that interprets Python code, but still uses the underlying p5.js JavaScript library. You can use the Python version if you are more familiar with Python syntax than JavaScript syntax.\n\n![p5 templates](https://docimg.replit.com/images/tutorials/34-creative-coding/p5-templates.png)\n\nIf you create a repl using one of the templates, you'll see it includes some sample code. Running it will draw random color circles on the screen wherever the mouse pointer is.\n\n![p5 sample sketch output](https://docimg.replit.com/images/tutorials/34-creative-coding/p5-circles.gif)\n\np5.js has two main functions in every sketch: `setup()`, which is run once when the sketch is executed, and `draw()`, which is run every frame.\n\nIn the `setup` function, you generally set up the window size and other such parameters. In the `draw` function, you can use [p5.js functions](https://p5js.org) to draw your scene. p5.js has functions for everything from drawing a simple line to rendering 3D models.\n\nHere is another sketch you can try (note that this is in JavaScript, so it will only work in the p5.js JavaScript template):\n\n[https://replit.com/@ritza/p5-javascript](https://replit.com/@ritza/p5-javascript)\n\n```js\nfunction setup() {\n  createCanvas(500, 500);\n  background(\"honeydew\");\n}\n\nfunction draw() {\n  noStroke();\n  fill(\"cyan\");\n  circle(450, 200, 100);\n  fill(\"pink\");\n  triangle(250, 75, 300, 300, 200, 275);\n  fill(\"lavender\");\n  square(250, 300, 200);\n}\n```\n\nIn this sketch, we draw a few shapes in various colors on the screen, in a kind of 80s geometric art style:\n\n![p5 shapes examples](https://docimg.replit.com/images/tutorials/34-creative-coding/p5-shapes.png)\n\nThe [p5.js website](https://p5js.org/get-started/) has a guide to getting started, plus a lot of references and examples to experiment with.\n\n### Kaboom","metadata":{"id":853}}],["854",{"pageContent":"The [p5.js website](https://p5js.org/get-started/) has a guide to getting started, plus a lot of references and examples to experiment with.\n\n### Kaboom\n\nKaboom.js is Replit's own homegrown JavaScript game framework, launched in 2021. It's geared towards making 2D games, particularly platform games, although it has enough flexibility to create games in other formats too. Because it is a JavaScript library, it can be used to develop web games, making it easy to share and distribute your creations with the world.\n\nReplit has two official templates for Kaboom:\n\n- A specialized Kaboom template, with an integrated sprite editor and gallery, as well as pre-defined folders for assets. This is perfect for getting started with Kaboom and making games in general, as you don't need to worry about folder structures or sourcing graphics.\n- A 'light' template that is a simple web template with just the Kaboom package referenced. This is for coders with a little more experience, as the intent is to give you more control and flexibility\n\n![Kaboom templates](https://docimg.replit.com/images/tutorials/34-creative-coding/kaboom-templates.png)\n\nOne of the great features of Kaboom is the simple way you can define level maps, drawing them with text characters, and then mapping the text characters to game elements:\n\n```js\nconst level = [\n  \"                          $\",\n  \"                          $\",\n  \"                          $\",\n  \"                          $\",\n  \"                          $\",\n  \"           $$         =   $\",\n  \"  %      ====         =   $\",\n  \"                      =   $\",\n  \"                      =    \",\n  \"       ^^      = >    =   @\",\n  \"===========================\",\n];\n```\n\nAnother interesting aspect of Kaboom is that it makes heavy use of [composition](https://en.wikipedia.org/wiki/Composition_over_inheritance). This allows you to create characters with complex behaviour by combining multiple simple components:\n\n```js\n    \"c\": () => [\n      sprite(\"coin\"),\n      area(),\n      solid(),","metadata":{"id":854}}],["855",{"pageContent":"```js\n    \"c\": () => [\n      sprite(\"coin\"),\n      area(),\n      solid(),\n      cleanup(),\n      lifespan(0.4, { fade: 0.01 }),\n      origin(\"bot\")\n    ]\n```\n\nKaboom has a fast-growing resource and user base. The official [Kaboom site](https://kaboomjs.com) documents each feature, and also has some specific examples. There is also a site with complete tutorials for building different types of games at [Make JavaScript Games](https://makejsgames.com).\n\n### Pygame\n\nPygame is a well-established library (from 2000!) for making games. It has functionality to draw shapes and images to the screen, get user input, play sounds, and more. Because it has been around for so long, there are plenty of examples and tutorials for it on the web.\n\nReplit has a specialised Python template for Pygame. Choose this template for creating Pygame games:\n\n![Pygame template](https://docimg.replit.com/images/tutorials/34-creative-coding/pygame-template.png)\n\nTry out this code in a Pygame repl:\n\n[https://replit.com/@ritza/pygame-example](https://replit.com/@ritza/pygame-example)\n\n```python\nimport pygame\n\npygame.init()\nbounds = (300,300)\nwindow = pygame.display.set_mode(bounds)\npygame.display.set_caption(\"box\")\n\ncolor = (0,255,0)\nx = 100\ny = 100\n\nwhile True:\n  pygame.time.delay(100)\n  for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n      run = False\n\n  keys = pygame.key.get_pressed()\n  if keys[pygame.K_LEFT]:\n    x = x - 1\n  elif keys[pygame.K_RIGHT]:\n    x = x + 1\n  elif keys[pygame.K_UP]:\n    y = y - 1\n  elif keys[pygame.K_DOWN]:\n    y = y + 1\n\n  window.fill((0,0,0))\n  pygame.draw.rect(window, color, (x, y, 10, 10))\n  pygame.display.update()\n\n```\n\nThis code initializes a new `pygame` instance and creates a window to display the output in. Then it has a main game loop, which listens for keyboard arrow key presses, and moves a small block around the screen based on the keys pressed.\n\nCheck out some of our tutorials for Pygame :\n\n- [A 2D platform game](/tutorials/python/2d-platform-game)","metadata":{"id":855}}],["856",{"pageContent":"Check out some of our tutorials for Pygame :\n\n- [A 2D platform game](/tutorials/python/2d-platform-game)\n- [A Juggling game](/tutorials/python/building-a-game-with-pygame)\n- [Snake](/tutorials/python/build-snake-with-pygame)\n\n### Pyxel\n\n[Pyxel](https://github.com/kitao/pyxel) is specialised for making retro-type games, inspired by console games from the 80s and early 90s. You can only display 16 colors, and no more than 4 sound samples can be played at once, just like on the earlier Nintendo, Sega, and other classic games systems. If you're into pixel art, this is the game engine for you.\n\nChoose the 'Pyxel' template on Replit to create a new Pyxel environment.\n\n![pyxel template](https://docimg.replit.com/images/tutorials/34-creative-coding/pyxel-template.png)\n\nTry this code in a Pyxel repl to draw rectangles of random size and color, changing every two frames:\n\n[https://replit.com/@ritza/pyxel-example](https://replit.com/@ritza/pyxel-example)\n\n```python\nimport pyxel\nimport random\n\nclass App:\n\n  def __init__(self):\n    pyxel.init(160, 120, caption=\"Pyxel Squares!\")\n    pyxel.run(self.update, self.draw)\n\n  def update(self):\n    if pyxel.btnp(pyxel.KEY_Q):\n        pyxel.quit()\n\n  def draw(self):\n    if (pyxel.frame_count % 2 == 0):\n      pyxel.cls(0)\n      pyxel.rect(random.randint(0,160), random.randint(0,120), 20, 20, random.randint(0,15))\n\nApp()\n```\n\n![Changing rectangles in pyxel](https://docimg.replit.com/images/tutorials/34-creative-coding/pyxel-rect.gif)\n\nTake a look in the [examples folder](https://github.com/kitao/pyxel/tree/main/pyxel/examples) on the Pyxel GitHub project to see more ways to use Pyxel.\n\n### GLSL","metadata":{"id":856}}],["857",{"pageContent":"Take a look in the [examples folder](https://github.com/kitao/pyxel/tree/main/pyxel/examples) on the Pyxel GitHub project to see more ways to use Pyxel.\n\n### GLSL\n\nOn the more advanced end of the spectrum, Replit supports GLSL projects. GLSL (OpenGL Shading Language) is a C-style language for creating graphics shaders. Shaders are programs that (usually) run on graphics cards as part of a graphics rendering pipeline. There are many types of shaders - the two most common are vertex shaders and fragment (or pixel) shaders. Vertex shaders compute the position of objects in the graphics world, and pixel shaders compute the color that each pixel should be. This previously required writing code for specific graphics hardware, but GLSL is a high-level language that can run on many different graphics hardware makes.\n\nGLSL gives you control over the graphics rendering pipeline, enabling you to create very advanced graphics. GLSL has many features to handle vector and matrix manipulations, as these are core to graphics processing.\n\nChoose the \"GLSL\" template to create a new GLSL repl:\n\n![GLSL template](https://docimg.replit.com/images/tutorials/34-creative-coding/glsl-template.png)\n\nThe template has a sample fragment shader in the file `shader.glsl` as well as some web code to setup a [WebGL](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API) resource to apply the shader to. Running the sample will show some pretty gradients on the screen that vary with time and as you move the mouse over it.\n\n![GLSL sample code](https://docimg.replit.com/images/tutorials/34-creative-coding/glsl-effect.gif)\n\nTry this code out in the shader file to make a kind of moving \"plaid\" effect:\n\n[https://replit.com/@ritza/glsl-example](https://replit.com/@ritza/glsl-example)\n\n```c\nprecision mediump float;\nvarying vec2 a_pos;\nuniform float u_time;\n\nvoid main(void) {\n\n    gl_FragColor = vec4(\n      a_pos.x * sin(u_time * a_pos.x),\n      a_pos.y * sin(u_time * a_pos.y),\n      a_pos.x * a_pos.y * sin(u_time),\n      1.0);\n}\n```","metadata":{"id":857}}],["858",{"pageContent":"uniform float u_time;\n\nvoid main(void) {\n\n    gl_FragColor = vec4(\n      a_pos.x * sin(u_time * a_pos.x),\n      a_pos.y * sin(u_time * a_pos.y),\n      a_pos.x * a_pos.y * sin(u_time),\n      1.0);\n}\n```\n\nHere we set `gl_FragColor`, which is the color for a specific pixel on the screen. A pixel color in GLSL is represented using a `vec4` data type, which is a vector of four values, representing red, green, blue, and alpha. In this shader, we vary the pixel color depending on it's co-ordinate `a_pos`, and the current frame time `u_time`.\n\nIf you'd like to dive deeper into the world of advanced graphics and shaders, you can visit Learn OpenGL's [Getting Started: Shaders](https://learnopengl.com/Getting-started/Shaders) resource.\n\n## Wrap up\n\nThat wraps up this list of the official creative coding language templates on Replit. Of course, Replit is flexible enough that you can import and use whatever framework or library you want in your projects, so you are not limited to the tools we've looked at here. Replit is also adding more languages and templates everyday, so be sure to watch out for new additions!","metadata":{"id":858}}],["859",{"pageContent":"# Running Rails on Replit\n\nRunning a Ruby on Rails application on Replit is usually quite easy and this guide hopes to hold your hand through the process.\n\n## Starting from Scratch\n\nIf you are starting from scratch, it is recommended that you use the existing Ruby on Rails template.\n\n## Starting from an existing Github Repository\n\nIf you already have a Rails application stored in a Github repository, and you want to clone the repository into Replit there are a few things that you need to do.\n\nFrom the main menu, start by creating a Repl and importing your repository from Github.\n\nAfter you hit Import from Github, and the repository has been cloned, you will have the option to select a run command. If Replit detects your imported repository as a Rails application, it will automatically supply you the appropriate run command. If not, for rails applications, you will want to put the following as the run command:\n\n```\nbundle exec rails server --binding=0.0.0.0\n```\n\nThe app needs to be bound to `0.0.0.0` instead of `localhost` to be able to run on Replit.\n\nThe command is prefaced with `bundle exec` so that it runs in the context of the installed gems. Any Rails commands that you run must be prefaced with `bundle exec`.\n\nOnce the run command is set, you will likely also need to install all the existing necessary packages by running the following command in the shell:\n\n```\nbundle install\n```\n\nOnce that is done, you should be free to try running the application by hitting the run button.\n\nHowever, to fully utilize Replit's features, you will have to make two more changes.\n\nFirst, you will have to allow `*.repl.co` hosts by adding the following line to `config/environments/development.rb`.\n\n```\n# Allow hosting on *.repl.co hosts\nconfig.hosts << /.*\\.repl.co/\n```\n\n![allow replit hosts](https://docimg.replit.com/images/misc/rails-env-dev-host.png)\n\nThen, allow the app to be iframed on `replit.com` by adding the following lines to `config/application.rb`.\n\n```\n# Allow app to be iframed on replit.com","metadata":{"id":859}}],["860",{"pageContent":"Then, allow the app to be iframed on `replit.com` by adding the following lines to `config/application.rb`.\n\n```\n# Allow app to be iframed on replit.com\nconfig.action_dispatch.default_headers = {\n  'X-Frame-Options' => 'ALLOWFROM replit.com'\n}\n```\n\n![allow app to be iframed on replit.com](https://docimg.replit.com/images/misc/rails-config-app.png)\n\nNow, when you run your app, a window should pop up displaying your application.\n\n![rails popup window](https://docimg.replit.com/images/misc/rails-window.png)\n\n## Running Commands\n\n**All commands must be prefaced by `bundle exec`.** This is so that the command runs in the context of the installed gems environment. The console pane will give you output from the server but you can run arbitrary command from the shell without stopping the server.\n\n## FAQ\n\n### Could not find 'bundler' required by your 'Gemfile.lock'\n\nThis probably means that the version of the bundler that your lock file requires is not the one we currently have on Replit. You can either install the appropriate version of the bundler or you can simply delete the `Gemfile.lock` and then run `bundle install` to reinstall the correct version of necessary packages and also recreate the lock file.","metadata":{"id":860}}],["861",{"pageContent":"---\nsidebar_position: 46\n---\n\n# Building a Discord bot with Node.js and Replit\n\nIn this tutorial, we'll use [Replit](https://replit.com) and Node.js to build a Discord chatbot. The bot will be able to join a Discord server and respond to messages.\n\nIf you prefer Python, here's a [Python Discord bot tutorial](/tutorials/python/discord-role-bot).\n\nYou'll find it easier to follow along if you have some JavaScript knowledge and you should have used Discord or a similar app such as Skype or Telegram before. We won't be covering the very basics of Node.js, but we will explain each line of code in detail, so if you have any experience with programming, you should be able to follow along.\n\n## Overview and requirements\n\nWe'll be doing all of our coding through the Replit web IDE, and we'll host our bot with Replit too, so you won't need to install any additional software on your machine. For this tutorial you will need to create a [Discord](https://discordapp.com/) account (if you already have one, you can skip this).\n\nWe will cover:\n\n- Creating an application and a bot user in your Discord account.\n- Creating a server on Discord.\n- Adding our bot to our Discord server.\n\nLet's get through these admin steps first and then we can get to the fun part of coding our bot.\n\n### Creating a bot in Discord and getting a token\n\nYou can sign up for a free account over at [Discord](https://discordapp.com/register), and you can download one of their desktop or mobile applications from [the Discord homepage](https://discordapp.com/). You can also use Discord in the browser.\n\nOnce you have an account, you'll want to create a Discord application. Visit [the Discord developer's page](https://discordapp.com/developers/applications/) and press the \"New application\" button, as in the image below.\n\n![Creating a new Discord application](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/new-discord-app.png)\n\nFill out a name for your bot and select \"Create\".","metadata":{"id":861}}],["862",{"pageContent":"![Creating a new Discord application](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/new-discord-app.png)\n\nFill out a name for your bot and select \"Create\".\n\nThe first thing to do on the next page is to note your Application ID, which you'll need to add the bot to the server. You can come back later and get it from this page, or copy it somewhere so you can find it when you need it.\n\n![Record your Client ID](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/app-id.png)\n\nYou can also rename the application and provide a description for your bot, then press \"Save Changes\".\n\nYou have now created a Discord application. The next step is to add a bot to this application, so head over to the \"Bot\" tab using the menu on the left and press the \"Add Bot\" button, as shown below. Click \"Yes, do it\" when Discord asks if you're sure about bringing a new bot to life.\n\n![Adding a bot to our Discord Application](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/add-bot.png)\n\nThe last thing we'll need from our bot is a token. Anyone who has the bot's token can prove that they own the bot, so you'll need to be careful not to share this with anyone. You can get the token by pressing \"Reset Token\", and then copy it to your clipboard by pressing \"Copy\".\n\n![Generating a token for our Discord bot](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/get-token.png)\n\n![Copying a token for our Discord bot](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/copy-token.png)\n\nTake note of your token or copy it to your clipboard, as we'll need to add it to our code soon.\n\n### Creating a Discord server","metadata":{"id":862}}],["863",{"pageContent":"Take note of your token or copy it to your clipboard, as we'll need to add it to our code soon.\n\n### Creating a Discord server\n\nIf you don't have a Discord server to add your bot to, you can create one by either opening the desktop Discord application that you downloaded earlier or returning to the Discord home page in your browser. Press the \"+\" icon, as shown below, to create a server.\n\n![Creating a Discord server](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/create-server.png)\n\nPress \"Create a server\" in the screen that follows, and then give your server a name. Once the server is up and running, you can chat with yourself, or invite some friends to chat with you. Soon we'll invite our bot to chat with us as well.\n\n### Adding your Discord bot to your Discord server\n\nOur Discord bot is still just a shell at this stage as we haven't written any code to allow it to do anything, but let's go ahead and add the bot to our Discord server anyway. To add a bot to your server, you'll need the Application ID from the \"General Information\" page that we looked at before when we created our ReplBotApplication (ie. the application ID, not the secret bot token).\n\nCreate a URL that looks as follows, but using your application ID instead of mine at the end (the link calls the application ID \"client_id\"):\n\nhttps://discordapp.com/api/oauth2/authorize?scope=bot&client_id=746269162917331028\n\nVisit the URL that you created in your web browser and you'll see a page similar to the following where you can choose which server to add your bot to.\n\n![Authorizing our bot to join our server](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/add-bot-to-server.png)\n\nSelect the server we created in the step before this and hit the \"Authorize\" button. After completing the captcha, you should get an in-app Discord notification telling you that your bot has joined your server.\n\nNow we can get to the fun part of building a brain for our bot!","metadata":{"id":863}}],["864",{"pageContent":"Now we can get to the fun part of building a brain for our bot!\n\n## Creating a repl and installing our Discord dependencies\n\nThe first thing we need to do is create a Node.js repl to write the code for our Discord bot. Over at [Replit](https://replit.com), create a new repl, choosing \"Node.js\" as your language.\n\n![Create a new repl](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/new-repl.png)\n\nWe don't need to reinvent the wheel as there is already a great Node wrapper for the Discord bot API called [discord.js](https://discord.js.org/). Normally we would install this third-party library through [npm](https://www.npmjs.com/), but because we're using Replit, we can skip the installation. Our repl will automatically pull in all dependencies.\n\nIn the default `index.js` file that is included with your new repl, add the following line of code:\n\n```javascript\nconst Discord = require(\"discord.js\");\n```\n\nPress the \"Run\" button and you should see Replit installing the Discord library in the output pane on the right, as in the image below.\n\n![Installing Discord.js in our Repl](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/install-discord-js.png)\n\nOur bot is nearly ready to go - but we still need to plug in our secret token. This will authorize our code to control our bot.\n\n## Setting up authorization for our bot\n\nBy default, Replit code is public. This is great as it encourages collaboration and learning, but we need to be careful not to share our secret bot token (which gives anyone who has access to it full control of our bot).","metadata":{"id":864}}],["865",{"pageContent":"To get around the problem of needing to give our _code_ access to the token while allowing others to access our code but _not_ our token, we'll be using [environment variables](https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps). Replit allows us to set secret environment variables through the \"Secrets (Environment variables)\" menu option.\n\nOpen the \"Secrets\" menu option. There you will be able to set environment variables for your repl. Set the key as the name of your environment variable to `DISCORD_BOT_SECRET`. Set the value as your bot's secret token (note that this is the second token that we got while setting up the bot -- different from the Application ID that we used to add our bot to our server). It should look something like:\n\n![Set Secrets Key Value](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/replit-secrets.png)\n\nLet's make a Discord bot that repeats everything we say but in reverse. We can do this in just a few lines of code. In your `index.js` file, add the following:\n\n```javascript\nconst Discord = require(\"discord.js\");\nconst client = new Discord.Client({\n  intents: [\"GUILDS\", \"GUILD_MESSAGES\"],\n});\n\nconst token = process.env[\"DISCORD_BOT_SECRET\"];\n\nclient.on(\"ready\", () => {\n  console.log(\"I'm in\");\n  console.log(client.user.username);\n});\n\nclient.on(\"messageCreate\", (msg) => {\n  if (msg.author.id != client.user.id) {\n    msg.channel.send(msg.content.split(\"\").reverse().join(\"\"));\n  }\n});\n\nclient.login(token);\n```\n\nLet's tear this apart line by line to see what it does.\n\n- **Line 1** is the line we added earlier. This line tells Replit to install the third party library and brings it into this file so that we can use it.\n- In **line 2**, we create a Discord `Client`. We'll use this client to send commands to the Discord _server_ to control our bot and send it commands.","metadata":{"id":865}}],["866",{"pageContent":"- In **line 2**, we create a Discord `Client`. We'll use this client to send commands to the Discord _server_ to control our bot and send it commands.\n- In **line 3-8**, we provide the `intents` of our `Client`, these are provided to designate which events our bot will be able to receive.\n- In **line 9**, we retrieve our secret token from the environment variables (which Replit sets from the \"Secrets\" menu).\n- In **line 11**, we define an `event` for our client, which defines how our bot should react to the `ready` event. The Discord bot is going to run _asynchronously_, which might be a bit confusing if you're used to running standard synchronous code. We won't go into asynchronous coding in-depth here, but if you're interested in what this is and why it's used, there's a good guide over at [RisingStack](https://blog.risingstack.com/node-hero-async-programming-in-node-js/). In short, instead of running the code in our file from top to bottom, we'll be running pieces of code in response to specific events.\n- In **lines 12-14**, we define how our bot should respond to the `ready` event, which is fired when our bot successfully joins a server. We instruct our bot to output some information server-side (i.e. it will be displayed in our repl's output, but not sent as a message through to Discord). We'll print a simple \"I'm in\" message to see that the bot is there and print our bot's username (if you're running multiple bots, this will make it easier to work out who's doing what).","metadata":{"id":866}}],["867",{"pageContent":"- **Lines 16-20** are similar, but instead of responding to a `ready` event, we tell our bot how to handle new messages. **Line 17** says we only want to respond to messages that aren't from us (otherwise our bot will keep responding to himself -- you can remove this line to see why that's a problem), and **line 18** says we'll send a new message to the same channel we received a message in (`msg.channel`) and the content we'll send will be the same message that we received, but backwards. To reverse a string, we split it into its individual characters, reverse the resulting array, and then join it all back into a string again.\n\nThe last line fires up our bot and uses the token we loaded earlier to log into Discord.\n\nPress the \"Run\" button again and you should see your bot reporting a successful channel join in the repl output.\n\n![Repl output showing channel join](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/bot-join.png)\n\nOpen Discord, and from within the server we created earlier, you will be able to send a message (by typing into the box highlighted below) and see your bot respond!\n\n![Send a message to your bot](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/message-repl-bot.png)\n\nThe bot responds each time, reversing the text we enter.\n\n![Our bot can talk!](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/repl-bot-response.png)\n\n## Keeping our bot alive\n\nYour bot can now respond to messages, but only for as long as your repl is running. If you close your browser tab or shut down your computer, your bot will stop and no longer respond to messages on Discord.\n\nReplit will keep your code running after you close the browser tab only if you are running a web server. Our bot doesn't require an explicit web server to run, but we can create a server and run it in the background just to keep our repl alive.","metadata":{"id":867}}],["868",{"pageContent":"Create a new file in your project called `keep_alive.js` and add the following code:\n\n```javascript\nvar http = require(\"http\");\n\nhttp\n  .createServer(function (req, res) {\n    res.write(\"I'm alive\");\n    res.end();\n  })\n  .listen(8080);\n```\n\nWe won't go over this in detail as it's not central to our bot, but here we start a web server that will return \"I'm alive\" if anyone visits it.\n\nIn our `index.js` file, we need to add a `require` statement for this server at the top. Add the following line near the top of `index.js`:\n\n```javascript\nconst keep_alive = require(\"./keep_alive.js\");\n```\n\nAfter doing this and hitting the green \"Run\" button again, you should see some changes to your repl. For one, you'll see a new pane in the top right that shows the web output from your server. We can see that visiting our repl now returns a basic web page showing the \"I'm alive\" string that we told our web server to return by default.\n\n![Running a Node server in the background](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/keep-alive.png)","metadata":{"id":868}}],["869",{"pageContent":"![Running a Node server in the background](https://replit-docs-images.bardia.repl.co/images/tutorials/basic-discord-bot-nodejs/keep-alive.png)\n\nNow your bot will stay alive even after closing your browser or shutting down your development machine. Replit will still clean up your server and kill your bot after about one hour of inactivity, so if you don't use your bot for a while, you'll have to log into your repl and start the bot up again. Alternatively, you can set up a third-party (free!) service like [Uptime Robot](https://uptimerobot.com/). Uptime Robot pings your site every five minutes to make sure it's still working -- usually to notify you of unexpected downtime, but in this case the constant pings have the side effect of keeping our repl alive as it will never go more than an hour without receiving any activity. Note that you need to select the \"HTTP\" option instead of the \"Ping\" option when setting up Uptime Robot, as Replit requires regular HTTP requests to keep your chatbot alive, or you can use a [Deployment](/hosting/deployments/about-deployments) repl to keep it running 24/7.\n\n## Forking and extending our basic bot\n\nThis is not a very useful bot as-is, but the possibilities are only limited by your creativity now! You can have your bot receive input from a user, process the input, and respond in any way you choose. In fact, with the basic input and output that we've demonstrated, we have most of the components of any modern computer, all of which are based on the [Von Neumann architecture](https://en.wikipedia.org/wiki/Von_Neumann_architecture) (we could easily add the missing memory by having our bot write to a file, or with a bit more effort link in a [SQLite database](https://www.sqlite.org/index.html) for persistent storage).","metadata":{"id":869}}],["870",{"pageContent":"If you followed along with this tutorial, you'll have your own basic repl bot to play around with and extend. If you were only reading, you can easily fork my bot at [https://replit.com/@ritza/discord-bot-node-1](https://replit.com/@ritza/discord-bot-node-1) and extend it however you like (you'll need to add your own token and reset the secrets still). Happy hacking!\n\nIf you're stuck for ideas, you could try link up your Discord bot to the [Twitch API](https://dev.twitch.tv/) to get notified when your favorite streamers are online, or build a [text adventure](https://en.wikipedia.org/wiki/Interactive_fiction).\n\n## Further Reading:\n\nIf you are interested, here's another Discord bot tutorial:\n\n- [Role assignment bot with Python](/tutorials/python/discord-role-bot)\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/discord-bot-node-1?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":870}}],["871",{"pageContent":"---\ntitle: CRM app with Node.js, Replit, and MongoDB\n---\n\n# Building a CRM app with Node.js, Replit, and MongoDB\n\nIn this tutorial, we'll use Node.js on Replit and a MongoDB database to build a basic [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) (Create, Read, Update, Delete) [CRM](https://en.wikipedia.org/wiki/Customer_relationship_management) (Customer Relationship Management) application. A CRM lets you store information about customers to help you track the status of every customer relationship. The application will be able to store and edit customer details, as well as keep notes about them.\n\nThis tutorial won't be covering the basics of Node.js, but each line of code will be explained in detail.\n\n## Setting up\n\nAll the code for our application will be written and hosted on Replit, so you won't need to install any additional software on your computer.\n\nIf you don't already have a [Replit](https://replit.com/signup) account, create one now.\n\nNext, head over to [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) and hit the \"Try free\" button. You should then sign up, clicking the \"Get started free\" button to complete the process.\n\nMongoDB Atlas is a fully managed Database-as-a-Service. It provides a document database (often referred to as NoSQL), as opposed to a more traditional relational database like PostgreSQL.\n\n## Creating a cluster\n\nOnce you've signed up with MongoDB Atlas, under \"Shared Clusters\", press the \"Create a Cluster\" button.\n\nSelect a provider and a region. For the purposes of this tutorial, we'll choose \"Google Cloud Platform\" as the provider and \"Iowa (us-central1)\" as the region, although it should work regardless of the provider and region.\n\n![Cluster Region](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/mongo-setup.png)\n\nGive your cluster a name. Note that once you've created your cluster, you won't be able to change the name. Click \"Create Cluster\".","metadata":{"id":871}}],["872",{"pageContent":"Give your cluster a name. Note that once you've created your cluster, you won't be able to change the name. Click \"Create Cluster\".\n\n![Cluster Name](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/cluster-name.png)\n\nAfter a bit of time, your cluster will be created. Once it's available, click on “Database Access” under the Security heading in the left-hand column and then click \"Add New Database User\". You need a database user to store and retrieve data. Enter a username and password for the user and make a note of those details - you'll need them later. Select “Read and write to any database” as the user privilege. Hit \"Add User\" to complete this step.\n\n![Adding a New Database User](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/add-db-user.png)\n\nNext, you need to allow network access to the database. Click on \"Network Access\" in the left-hand column, and “Add IP Address”. Because we won't have a static IP from Replit, we're just going to allow access from anywhere - don't worry, the database is still secured with the username and password you created earlier. In the pop-up, click \"Allow Access From Anywhere\" and then \"Confirm\".\n\n![Allow Access From Anywhere](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/whitelist-entry.png)\n\nNow select \"Database\" under \"Deployment\" in the left-hand column. Click on \"Connect\" and select “Connect Your Application”. This will change the pop-up view. Copy the \"Connection String\" as you will need it shortly to connect to your database from Replit. It will look something like this: `mongodb+srv://<username>:<password>@cluster0-zrtwi.gcp.mongodb.net/test?retryWrites=true&w=majority`\n\n![Retrieve Your Connection String](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/db-connect-string.png)\n\n## Creating a repl and connecting to the database","metadata":{"id":872}}],["873",{"pageContent":"![Retrieve Your Connection String](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/db-connect-string.png)\n\n## Creating a repl and connecting to the database\n\nNow we need a Node.js repl to write the code necessary to connect to our shiny new database. Navigate to Replit and create a new repl, selecting \"Node.js\" as the language.\n\nA great thing about Replit is that it makes projects public by default. This makes it easy to share and it's great for collaboration and learning, but we have to be careful not to make our database credentials available on the open internet.\n\nTo solve this problem, we'll use Replit's `environment variables`, as we have done in previous tutorials. Replit allows us to set secret environment variables through the \"Secrets (Environment variables)\" menu option.\n\nOpen the \"Secrets\" menu option. There you will be able to set environment variables for your repl. Set the key as the name of your environment variable to `MONGO_USERNAME`. Set the value as your database username, then click \"Add new secret\". Then create a new key called `MONGO_PASSWORD` with its value set to your database password, and click \"Add new secret\". It should look something like:\n\n![Set Secrets Key Value](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/replit-secrets.png)\n\n- **Replace** `username` and `password` with your database username and password.\n\nNow that we have credentials set up for the database, we can move on to connecting to it in our code.\n\nMongoDB is kind enough to provide a client that we can use. To test out our database connection, we're going to insert some customer data into our database. In your `index.js` file (created automatically and found under the Files pane), add the following code:\n\n```javascript\nconst MongoClient = require(\"mongodb\").MongoClient;\nconst mongo_username = process.env[\"MONGO_USERNAME\"];\nconst mongo_password = process.env[\"MONGO_PASSWORD\"];","metadata":{"id":873}}],["874",{"pageContent":"```javascript\nconst MongoClient = require(\"mongodb\").MongoClient;\nconst mongo_username = process.env[\"MONGO_USERNAME\"];\nconst mongo_password = process.env[\"MONGO_PASSWORD\"];\n\nconst uri = `mongodb+srv://${mongo_username}:${mongo_password}@cluster0-zrtwi.gcp.mongodb.net/crmdb?retryWrites=true&w=majority`;\nconst client = new MongoClient(uri, { useNewUrlParser: true });\n```\n\nLet's break this down to see what is going on:\n\n- **Line 1** adds the dependency for the MongoDB Client. Replit makes things easy by installing all the dependencies for us, so we don't have to use something like npm to do it manually.\n- In **Line 2 & 3**, we retrieve our MongoDB username and password from the environment variables that we set up earlier.\n- **Line 5** has a few very important details that we need to get right:\n  - Replace the section between the `@` and the next `/` with the same section of your connection string from MongoDB that we copied earlier. You may notice the `${mongo_username}` and `${mongo_password}` before and after the colon near the beginning of the string. These are called template literals. Template literals allow us to put variables in a string, which Node.js will then replace with the actual values of the variables.\n  - Note `crmdb` after the `/` and before the `?`. This will be the name of the database that we will be using. MongoDB creates the database for us if it doesn't exist. You can change this to whatever you want to name the database, but remember what you changed it to for future sections of this tutorial.\n- **Line 6** creates the client that we will use to connect to the database.\n\n## Making a user interface to insert customer data\n\nWe're going to make an HTML form that will capture the customer data and send it to our Replit code, which will then insert it into our database.","metadata":{"id":874}}],["875",{"pageContent":"## Making a user interface to insert customer data\n\nWe're going to make an HTML form that will capture the customer data and send it to our Replit code, which will then insert it into our database.\n\nIn order to actually present and handle an HTML form, we need a way to process HTTP GET and POST requests. The easiest way to do this is to use a web application framework. A web application framework is designed to support the development of web applications - it gives you a standard way to build your application and lets you get to building your application fast without having to do the boilerplate code.\n\nA really simple, fast, and flexible Node.js web application framework is [Express](https://expressjs.com/), which provides a robust set of features for the development of web applications.\n\nThe first thing we need to do is add the dependencies we need. Right at the top of your `index.js` file (above the MongoDB code), add the following lines:\n\n```javascript\nlet express = require(\"express\");\nlet app = express();\nlet bodyParser = require(\"body-parser\");\nlet http = require(\"http\").Server(app);\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n```\n\nLet's break this down.\n\n- **Line 1** adds the dependency for Express. Replit will take care of installing it for us.\n- **Line 2** creates a new Express app that will handle incoming requests.\n- **Line 3** adds a dependency for `'body-parser'`. This is needed for the Express server to be able to handle the data that the form will send, and give it to us in a useful format to use in the code.\n- **Line 4** adds a dependency for a basic HTTP server.\n- **Line 6 & 7** tell the Express app which parsers to use on incoming data. This is needed to handle form data.\n\nNext, we need to add a way for the Express app to handle an incoming request and give it to us in the form we need. Add the following lines of code below the code you added above:\n\n```javascript\napp.get(\"/\", function (req, res) {\n  res.sendFile(\"/index.html\", { root: \".\" });","metadata":{"id":875}}],["876",{"pageContent":"```javascript\napp.get(\"/\", function (req, res) {\n  res.sendFile(\"/index.html\", { root: \".\" });\n});\n\napp.get(\"/create\", function (req, res) {\n  res.sendFile(\"/create.html\", { root: \".\" });\n});\n```\n\n- `app.get` tells Express that we want it to handle a GET request.\n- `'/'` tells Express that it should respond to GET requests sent to the root URL. A root URL looks something like `https://crm.hawkiesza.repl.co` - note that there are no slashes after the URL.\n- `'/create'` tells Express that it should respond to GET requests sent to the `/create` endpoint after the root URL, i.e. `https://crm.hawkiesza.repl.co/create`.\n- `res.sendFile` tells Express to send the given file as a response.\n\nBefore the server will start receiving requests and sending responses, we need to tell it to run. Add the following code below the previous line:\n\n```javascript\napp.set(\"port\", process.env.PORT || 5000);\nhttp.listen(app.get(\"port\"), function () {\n  console.log(\"listening on port\", app.get(\"port\"));\n});\n```\n\n- **Line 1** tells Express to set the port number to either a number defined as an environment variable, or 5000 if no definition was made.\n- **Line 2-4** tells the server to start listening for requests.\n\nNow we have an Express server listening for requests, but we haven't yet built the form that it needs to send back if it receives a request.\n\nMake a new file called `index.html` and paste the following code into it:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n    <form action=\"/create\" method=\"GET\">\n      <input type=\"submit\" value=\"Create\" />\n    </form>\n  </body>\n</html>\n```\n\nThis is a straightforward bit of HTML that puts a single button on the page. When this button is clicked, it sends a GET request to `/create`, which the server will then respond to according to the code that we wrote above - in our case, it will send back the `create.html` file which we will define now.\n\nMake a new file called `create.html` and paste the following into it:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>","metadata":{"id":876}}],["877",{"pageContent":"Make a new file called `create.html` and paste the following into it:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n    <h2>Customer details</h2>\n\n    <form action=\"/create\" method=\"POST\">\n      <label for=\"name\">Customer name *</label><br />\n      <input\n        type=\"text\"\n        id=\"name\"\n        name=\"name\"\n        class=\"textInput\"\n        placeholder=\"John Smith\"\n        required\n      />\n      <br />\n      <label for=\"address\">Customer address *</label><br />\n      <input\n        type=\"text\"\n        name=\"address\"\n        class=\"textInput\"\n        placeholder=\"42 Wallaby Way, Sydney\"\n        required\n      />\n      <br />\n      <label for=\"telephone\">Customer telephone *</label><br />\n      <input\n        type=\"text\"\n        name=\"telephone\"\n        class=\"textInput\"\n        placeholder=\"+275554202\"\n        required\n      />\n      <br />\n      <label for=\"note\">Customer note</label><br />\n      <input\n        type=\"text\"\n        name=\"note\"\n        class=\"textInput\"\n        placeholder=\"Needs a new pair of shoes\"\n      />\n      <br /><br />\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  </body>\n</html>\n```\n\nWe won't go in-depth into the above HTML. It is a very basic form with four fields (name, address, telephone, note) and a submit button, which creates an interface that will look like the one below.\n\n![Customer Details](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/customer-details.png)\n\nWhen the user presses the submit button, a POST request is made to `/create` with the data in the form - we still have to handle this request in our code as we're currently only handling a GET request to `/`.","metadata":{"id":877}}],["878",{"pageContent":"If you click the \"Run\" button now, a new window should appear on the right that displays the \"Create\" button we defined just now in `index.html`. To see the form, you can also navigate to `https://<repl_name>.<your_username>.repl.co`, replacing <repl_name> with whatever you named your repl (but with no underscores or spaces) and <your_username> with your repl username. You will be able to see this URL in the repl itself.\n\n![Run Your Application](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/first-run.png)\n\nIf you select \"Create\" and then fill in the form and hit submit, you'll get a response that says `Cannot POST /create`. This is because we haven't added the code that handles the form POST request, so let's do that.\n\n![*Cannot POST/create*](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/cannot-post.png)\n\nAdd the following code into your `index.js` file, below the `app.get` entry that we made above:\n\n```javascript\napp.post(\"/create\", function (req, res, next) {\n  client.connect((err) => {\n    const customers = client.db(\"crmdb\").collection(\"customers\");\n\n    let customer = {\n      name: req.body.name,\n      address: req.body.address,\n      telephone: req.body.telephone,\n      note: req.body.note,\n    };\n    customers.insertOne(customer, function (err, res) {\n      if (err) throw err;\n      console.log(\"1 customer inserted\");\n    });\n  });\n  res.send(\"Customer created\");\n});\n```\n\n- **Line 1** defines a new route that listens for an HTTP POST request at `/create`.\n- **Line 2** connects to the database. This happens asynchronously, so we define a callback function that will be called once the connection is made.\n- **Line 3** creates a new collection of customers. Collections in MongoDB are similar to tables in SQL.","metadata":{"id":878}}],["879",{"pageContent":"- **Line 3** creates a new collection of customers. Collections in MongoDB are similar to tables in SQL.\n- **Line 5** defines customer data that will be inserted into the collection. This is taken from the incoming request. The form data is parsed using the parsers that we defined earlier and is then placed in the `req.body` variable for us to use in the code.\n- **Line 6** inserts the customer data into the collection. This also happens asynchronously, and so we define another callback function that will get an error if an error occurred, or the response if everything happened successfully.\n- **Line 7** throws an error if the above insert had a problem.\n- **Line 8** gives us some feedback that the insert happened successfully.\n\nIf you run the repl now (you may need to refresh it) and submit the filled-in form, you'll get a message back that says \"Customer created\". If you look in your cluster in MongoDB and select the \"Collections\" button, you'll see a document has been created with the details that we submitted in the form.\n\n![Customer Created](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/customer-created.png)\n\n## Updating and deleting database entries\n\nAs a final step in this tutorial, we want to be able to update and delete database documents in our collection. To make things simpler, we're going to make a new HTML page where we can request a document and then update or delete it.\n\nFirst, let's make the routes to our new page. In your `index.js`, add the following code below the rest of your routing code (i.e. before the MongoDB code):\n\n```javascript\napp.get(\"/get\", function (req, res) {\n  res.sendFile(\"/get.html\", { root: \".\" });\n});\n\napp.get(\"/get-client\", function (req, res) {\n  client.connect((err) => {\n    client\n      .db(\"crmdb\")\n      .collection(\"customers\")\n      .findOne({ name: req.query.name }, function (err, result) {\n        if (err) throw err;\n        res.render(\"update\", {\n          oldname: result.name,","metadata":{"id":879}}],["880",{"pageContent":".collection(\"customers\")\n      .findOne({ name: req.query.name }, function (err, result) {\n        if (err) throw err;\n        res.render(\"update\", {\n          oldname: result.name,\n          oldaddress: result.address,\n          oldtelephone: result.telephone,\n          oldnote: result.note,\n          name: result.name,\n          address: result.address,\n          telephone: result.telephone,\n          note: result.note,\n        });\n      });\n  });\n});\n```\n\n- **Line 1-3** tells Express to respond to incoming GET requests on `/get` by sending the `get.html` file which we will define below.\n- **Line 5-12** tells Express to respond to incoming GET requests on `/get-client`.\n  - **Line 7** makes a call to the database to fetch a customer by name. If there is more than one customer with the same name, then the first one found will be returned.\n  - **Line 9** tells Express to render the `update` template, replacing variables with the given values as it goes. Important to note here is that we are also replacing values in the hidden form fields we created earlier with the current values of the customer details. This is to ensure that we update or delete the correct customer.\n\nIn your `index.html` file, add the following code after the `</form>` tag:\n\n```html\n<br />\n<form action=\"/get\" method=\"GET\">\n  <input type=\"submit\" value=\"Update/Delete\" />\n</form>\n```\n\nThis adds a new button that will make a GET request to `/get`, which will then return `get.html`.\n\n![Index](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/buttons.png)\n\nMake a new file called `get.html` with the following contents:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n    <form action=\"/get-client\" method=\"GET\">\n      <label for=\"name\">Customer name *</label><br />\n      <input\n        type=\"text\"\n        id=\"name\"\n        name=\"name\"\n        class=\"textInput\"\n        placeholder=\"John Smith\"\n        required\n      />\n      <input type=\"submit\" value=\"Get customer\" />\n    </form>\n  </body>\n</html>\n```","metadata":{"id":880}}],["881",{"pageContent":"id=\"name\"\n        name=\"name\"\n        class=\"textInput\"\n        placeholder=\"John Smith\"\n        required\n      />\n      <input type=\"submit\" value=\"Get customer\" />\n    </form>\n  </body>\n</html>\n```\n\nThis makes a simple form with an input for the customer's name and a button.\n\n![Get Customer](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/get-customer.png)\n\nClicking this button will make a GET request to `/get-client`, which will respond with the client details, and we will be able to update or delete them.\n\nTo see the customer details on a form after requesting them, we need a templating engine to render them onto the HTML page and send the rendered page back to us. With a templating engine, you define a template - a page with variables in it - and then give it the values you want to fill into the variables. In our case, we're going to request the customer details from the database and tell the templating engine to render them onto the page.\n\nWe're going to use a templating engine called [Pug](https://pugjs.org/api/getting-started.html). Pug is a simple templating engine that integrates fully with Express. The syntax that Pug uses is very similar to HTML. One important difference in the syntax is that spacing is very important as it determines your parent/child hierarchy.\n\nFirst, we need to tell Express which templating engine to use and where to find our templates. Put the following line above your route definitions (i.e. after the other `app.use` lines in `index.js`):\n\n```javascript\napp.engine(\"pug\", require(\"pug\").__express);\napp.set(\"views\", \".\");\napp.set(\"view engine\", \"pug\");\n```\n\nNow create a new file called `update.pug` with the following content:\n\n```html\nhtml body p #{message} h2= 'Customer details' form(method='POST'\naction='/update') input(type='hidden' id='oldname' name='oldname' value=oldname)\ninput(type='hidden' id='oldaddress' name='oldaddress' value=oldaddress)\ninput(type='hidden' id='oldtelephone' name='oldtelephone' value=oldtelephone)","metadata":{"id":881}}],["882",{"pageContent":"input(type='hidden' id='oldaddress' name='oldaddress' value=oldaddress)\ninput(type='hidden' id='oldtelephone' name='oldtelephone' value=oldtelephone)\ninput(type='hidden' id='oldnote' name='oldnote' value=oldnote) label(for='name')\nCustomer name: br input(type='text', placeholder='John Smith' name='name'\nvalue=name) br label(for='address') Customer address: br input(type='text',\nplaceholder='42 Wallaby Way, Sydney' name='address' value=address) br\nlabel(for='telephone') Customer telephone: br input(type='text',\nplaceholder='+275554202' name='telephone' value=telephone) br label(for='note')\nCustomer note: br input(type='text', placeholder='Likes unicorns' name='note'\nvalue=note) br button(type='submit' formaction=\"/update\") Update\nbutton(type='submit' formaction=\"/delete\") Delete\n```\n\nThis is very similar to the HTML form we created previously for `create.html`, however this is written in the Pug templating language. We're creating a hidden element to store the \"old\" name, telephone, address, and note of the customer - this is for when we want to do an update.\n\nUsing the old details to update the customer is an easy solution, but not the best solution as it makes the query cumbersome and slow. If you add extra fields into your database, you would have to remember to update your query as well, otherwise it could lead to updating or deleting the wrong customer if they have the same information. A better but more complicated way is to use the unique ID of the database document, as that will only ever refer to one customer.\n\nWe have also put in placeholder variables for name, address, telephone, and note, and we have given the form two buttons with different actions.","metadata":{"id":882}}],["883",{"pageContent":"We have also put in placeholder variables for name, address, telephone, and note, and we have given the form two buttons with different actions.\n\nIf you now run the code, you will have an index page with two buttons. Pressing the \"Update/Delete\" button will take you to a new page that asks for a customer name. If you fill in the customer name and press \"Get customer\", a page will load with the customer's details and two buttons below, \"Update\" and \"Delete\". Make sure you enter a customer name you have entered before.\n\n![Update-Delete](https://replit-docs-images.bardia.repl.co/images/tutorials/crm-app-mongodb-nodejs/customer-details-final.png)\n\nOur next step is to add the \"Update\" and \"Delete\" functionality. Add the following code below your routes in `index.js`:\n\n```javascript\napp.post(\"/update\", function (req, res) {\n  client.connect((err) => {\n    if (err) throw err;\n    let query = {\n      name: req.body.oldname,\n      address: req.body.oldaddress,\n      telephone: req.body.oldtelephone,\n      note: req.body.oldnote,\n    };\n    let newvalues = {\n      $set: {\n        name: req.body.name,\n        address: req.body.address,\n        telephone: req.body.telephone,\n        note: req.body.note,\n      },\n    };\n    client\n      .db(\"crmdb\")\n      .collection(\"customers\")\n      .updateOne(query, newvalues, function (err, result) {\n        if (err) throw err;\n        console.log(\"1 document updated\");\n        res.render(\"update\", {\n          message: \"Customer updated!\",\n          oldname: req.body.name,\n          oldaddress: req.body.address,\n          oldtelephone: req.body.telephone,\n          oldnote: req.body.note,\n          name: req.body.name,\n          address: req.body.address,\n          telephone: req.body.telephone,\n          note: req.body.note,\n        });\n      });\n  });\n});\n\napp.post(\"/delete\", function (req, res) {\n  client.connect((err) => {\n    if (err) throw err;\n    let query = {\n      name: req.body.name,\n      address: req.body.address ? req.body.address : null,","metadata":{"id":883}}],["884",{"pageContent":"});\n});\n\napp.post(\"/delete\", function (req, res) {\n  client.connect((err) => {\n    if (err) throw err;\n    let query = {\n      name: req.body.name,\n      address: req.body.address ? req.body.address : null,\n      telephone: req.body.telephone ? req.body.telephone : null,\n      note: req.body.note ? req.body.note : null,\n    };\n    client\n      .db(\"crmdb\")\n      .collection(\"customers\")\n      .deleteOne(query, function (err, obj) {\n        if (err) throw err;\n        console.log(\"1 document deleted\");\n        res.send(`Customer ${req.body.name} deleted`);\n      });\n  });\n});\n```\n\nThis introduces two new POST handlers - one for `/update`, and one for `/delete`.\n\n- **Line 2** connects to our MongoDB database.\n- **Line 3** throws an error if there was a problem connecting to the database.\n- **Line 4** defines a query that we will use to find the document to update. In this case, we'll use the details of the customer _before_ it was updated. We saved this name earlier in a hidden field in the HTML. Trying to find the customer by its updated name obviously won't work, because it hasn't been updated yet. Also, note that we are setting some of the fields to null if they are empty. This is so that the database returns the correct document when we update or delete - if we search for a document that has no address with an address of '' (empty string), then our query won't return anything.\n- **Line 5** defines the new values that we want to update our customer with.\n- **Line 6** updates the customer with the new values using the query.\n- **Line 7** throws an error if there was a problem with the update.\n- **Line 8** logs that a document was updated.\n- **Line 9** re-renders the update page with a message saying that the customer was updated, and displays the new values.\n- **Line 15** connects to our MongoDB database.\n- **Line 16** throws an error if there was a problem connecting to the database.","metadata":{"id":884}}],["885",{"pageContent":"- **Line 15** connects to our MongoDB database.\n- **Line 16** throws an error if there was a problem connecting to the database.\n- **Line 17** defines a query that we will use to find the document to delete. In this case, we use all the details of the customer _before_ any changes were made on the form to make sure we delete the correct customer.\n- In **Line 18**, we connect to the database and delete the customer.\n- **Line 19** throws an error if there was a problem with the delete.\n- **Line 20** logs that a document was deleted.\n- **Line 21** sends a response to say that the customer was deleted.\n\n## Putting it all together\n\nIf you run your application now, you'll be able to create, update, and delete documents in a MongoDB database. This is a very basic CRUD application, with a very basic and unstyled UI, but it should give you the foundation to build much more sophisticated applications.\n\nSome ideas for this are:\n\n- You could add fields to the database to classify customers according to which stage they are in your sales [pipeline](https://www.bitrix24.com/glossary/what-is-pipeline-management-definition-crm.php) so that you can track if a customer is potentially stuck somewhere and contact them to re-engage.\n- You could integrate some basic marketing automation with a page allowing you to send an email or SMS to customers (though don't spam clients!).\n- You could also add fields to keep track of customer purchasing information so that you can see which products do well with which customers.\n\nIf you want to start from where this tutorial leaves off, fork the repl at [https://replit.com/@ritza/replcrm](https://replit.com/@ritza/replcrm). To get additional guidance, reach out to the [Replit community](https://ask.replit.com) for assistance.","metadata":{"id":885}}],["886",{"pageContent":"<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/replcrm?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":886}}],["887",{"pageContent":"---\ntitle: \"GraphQL Part 1: Setting up endpoints\"\n---\n\n# An introduction to GraphQL (part 1)\n\nIn this project, we will create a website that fetches data from a [GraphQL](https://graphql.org) endpoint. The endpoint exposes data related to an imagined podcast called _GraphQL FM_.\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-0.gif)\n\nYou can take a look at the final project at [https://replit.com/@ritza/GraphQL-FM](https://replit.com/@ritza/GraphQL-FM). You can also view it as a standalone page by pressing the `Open in a new tab` button (at the top right of the former link) or by going straight to [https://graphql-fm.ritza.repl.co](https://graphql-fm.ritza.repl.co/).\n\nWe will create the above example in two separate steps. Part 1 (this article) covers the basics of GraphQL and setting up our API. [Part 2](./graphql-project-part-2) will show how we can turn the data from the GraphQL API into a fully functional website. We will start with the following:\n\n- [Creating your own project with Replit](#creating-your-own-project-with-replit)\n- [Our GraphQL Goals For This Guide](#our-graphql-goals-for-this-guide)\n  - [What is GraphQL?](#what-is-graphql)\n  - [GraphQL as an alternative to REST](#graphql-as-an-alternative-to-rest)\n  - [\"Hello World\" in GraphQL](#hello-world-in-graphql)\n  - [Using a GraphQL Explorer](#using-a-graphql-explorer)\n- [Creating an API](#creating-an-api)\n  - [GraphQL as a Service](#graphql-as-a-service)\n  - [Adding GraphQL to JavaScript](#adding-graphql-to-javascript)\n  - [Custom GraphQL Function](#custom-graphql-function)\n  - [Defining an Information Architecture](#defining-an-information-architecture)\n  - [Loading the Data](#loading-the-data)\n\n## Creating your own project with Replit\n\nIf you haven't already, head to the [signup page](https://replit.com/signup) and create a Replit account. Once created, set up a new project by:\n\n1. Clicking on the `+ New repl` button.\n2. Choosing the \"HTML, CSS, JS\" language.","metadata":{"id":887}}],["888",{"pageContent":"1. Clicking on the `+ New repl` button.\n2. Choosing the \"HTML, CSS, JS\" language.\n3. Giving your repl a name: In our case, \"graphql-fm\".\n4. Clicking the `Create repl` button.\n\n![Creating a new Repl](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-1.png)\n\nBecause we selected \"HTML, CSS, JS\" as our language, Replit has created the basic files needed for our front-end project, which should be:\n\n- `index.html`\n- `style.css`\n- `script.js`\n\n## Our GraphQL Goals For This Guide\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-2.jpg)\n\nOur goals are to:\n\n- Gain familiarity with GraphQL as a concept.\n- Illustrate how we can use GraphQL in native JavaScript code without requiring any additional libraries or frameworks.\n\nThis means that even if you are already familiar with GraphQL but have only experienced it through libraries like [Apollo](https://www.apollographql.com) or [Relay](https://relay.dev), you will find value by learning how to make use of GraphQL by using the native JavaScript [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\n### What is GraphQL?\n\nYou might have seen definitions of GraphQL that look like this one:\n\n> _“I have seen the future, and it looks a lot like GraphQL. Mark my words: in 5 years, newly minted full-stack app developers won’t be debating RESTfulness anymore, because REST API design will be obsolete. […] It lets you model the resources and processes provided by a server as a domain-specific language (DSL). Clients can use it to send scripts written in your DSL to the server to process and respond to as a batch.”_\n>\n> — [Alan Johnson](https://artsy.github.io/author/alan/): [_Is GraphQL The Future?_](http://artsy.github.io/blog/2018/05/08/is-graphql-the-future/)","metadata":{"id":888}}],["889",{"pageContent":">\n> — [Alan Johnson](https://artsy.github.io/author/alan/): [_Is GraphQL The Future?_](http://artsy.github.io/blog/2018/05/08/is-graphql-the-future/)\n\nLet's take a look at what this actually means. Specifically, a \"[domain-specific language](https://en.wikipedia.org/wiki/Domain-specific_language)\" (DSL) is a programming language created to express a very specific and narrow type of digital information (a domain). While a [general-purpose language](https://en.wikipedia.org/wiki/General-purpose_programming_language) like [JavaScript](https://en.wikipedia.org/wiki/JavaScript) can be used to express a wide range of digital information, domain-specific languages tend to be more limited. However, it is precisely because of their narrow scope that DSLs can be easier to read and write when compared to general-purpose languages.\n\nBecause of this limited scope, DSLs are often embedded inside other languages as they often need to piggyback on the larger functionality provided by general-purpose languages. However, this does not mean that DSLs are tied to specific languages. For example, [SQL](https://en.wikipedia.org/wiki/SQL) (Structured Query Language) is another domain-specific language that is used to query database structures like [MySQL](https://www.mysql.com) or [Postgres](https://www.postgresql.org). Yet, SQL has the same exact syntax whether embedded inside JavaScript, [Python](<https://en.wikipedia.org/wiki/Python_(programming_language)>) or [PHP](https://en.wikipedia.org/wiki/PHP).\n\nAs an example, in JavaScript (via [Node](https://en.wikipedia.org/wiki/Node.js)) you might do the following:\n\n```js\nconst { createConnection } = require(\"mysql\");\n\nconst connection = createConnection({\n  host: \"localhost\",\n  user: \"yourusername\",\n  password: \"yourpassword\",\n  database: \"mydb\",\n});\n\nconnection.query(\"SELECT * FROM customers\");\n```\n\nWhereas in Python, you might do this:\n\n```python\nimport mysql.connector\n\ndb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",","metadata":{"id":889}}],["890",{"pageContent":"});\n\nconnection.query(\"SELECT * FROM customers\");\n```\n\nWhereas in Python, you might do this:\n\n```python\nimport mysql.connector\n\ndb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\ndb.cursor().execute(\"SELECT * FROM customers\")\n```\n\nYou will note that the SQL expression (`SELECT * FROM customers`) is the exact same regardless of the environment. Similarly, GraphQL allows us to express **specific data queries** independently of how (or where) we use them.\n\n### GraphQL as an alternative to REST\n\nGraphQL can be used to express almost any type of data request. As an example, the immensely popular [Gatsby React framework](https://www.gatsbyjs.com) uses GraphQL to query [frontmatter](https://jekyllrb.com/docs/front-matter) and [plain text](https://en.wikipedia.org/wiki/Plain_text) inside [Markdown](https://en.wikipedia.org/wiki/Markdown) files. Yet, in the majority of cases, GraphQL is used as an alternative to a traditional [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) (Representational State Transfer) approach.","metadata":{"id":890}}],["891",{"pageContent":"For a long time, REST was considered the de-facto standard for sending data between a browser and a server. Its popularity stems from the wide range of standardised operations it allows. These range from receiving data ([GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET)), sending data ([POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST)), merging two data structures ([PATCH](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH)) or even removing data ([DELETE](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE)). However, the primary drawback of REST is that it relies on the creation of fixed data endpoints. This means that a single request is only scoped to a specific, pre-defined set of data. [Chimezie Enyinnaya](https://blog.pusher.com/author/mezie/), a Nigerian content creator for [Pusher](https://pusher.com) (a service that manages remote [pub/sub](https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern) messaging), explains it as follows:\n\n> _“With REST, we might have a `/authors/:id` endpoint to fetch an author, then another `/authors/:id/posts` endpoint to fetch the post of that particular author. Lastly, we could have a `/authors/:id/posts/:id/comments` endpoint that fetches the comments on the posts. […] It is easy to fetch more than the data you need with REST, because each endpoint in a REST API has a fixed data structure which it is meant to return whenever it is hit.”_\n>\n> — [Chimezie Enyinnaya](https://blog.pusher.com/author/mezie/): _[REST versus GraphQL](https://blog.pusher.com/rest-versus-graphql/)_\n\nGraphQL was created as a solution to this problem. Facebook created it to provide a standardized syntax to write more expressive (and powerful) data queries within the Facebook mobile app when fetching remote data.\n\n### \"Hello World\" in GraphQL\n\nSo where does one start with GraphQL?","metadata":{"id":891}}],["892",{"pageContent":"### \"Hello World\" in GraphQL\n\nSo where does one start with GraphQL?\n\nThere are several GraphQL libraries that provide useful abstractions when working with GraphQL. The most popular are Apollo and Relay. While these provide a lot of helpful features, like [cache management](https://www.apollographql.com/docs/react/caching/cache-configuration/) and [normalization](https://www.apollographql.com/blog/demystifying-cache-normalization), they can be overwhelming to someone just starting with GraphQL. They also tend to be quite large and opinionated – meaning that they might be overkill for smaller, more flexible projects.\n\nGrahpQL is an open standard (similar to HTML). It is therefore not locked to any specific tool, library or platform. This means that we are able to use GraphQL directly with the [native JavaScript fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API), or even with a light-weight [AJAX](<https://en.wikipedia.org/wiki/Ajax_(programming)>) library like [Axios](https://www.npmjs.com/package/axios). In the example below, we will establish what the '[Hello World](https://en.wikipedia.org/wiki/%22Hello,_World!%22_program)' equivalent of GraphQL in JavaScript would be. In other words:\n\n### Using a GraphQL Explorer\n\nMost GraphQL endpoints come with some form of GraphQL explorer, the most popular being [GraphiQL](https://github.com/graphql/graphiql) and [GraphQL Playground](https://github.com/graphql/graphql-playground). As an example, let's start with a public GraphQL endpoint provided by the event management platform [Universe.com](https://www.universe.com/graphiql). Their endpoint allows developers to retrieve data associated with specific events in their database. We can use their explorer to create and test a super basic query.\n\nIf you go to [https://universe.com/graphiql](https://universe.com/graphiql), you should see the following:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-3.png)","metadata":{"id":892}}],["893",{"pageContent":"If you go to [https://universe.com/graphiql](https://universe.com/graphiql), you should see the following:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-3.png)\n\nThe left-hand (white) pane allows you to write specific queries, whereas the middle (grey) pane shows the response from the endpoint once you run the query. Lastly, the right-hand (white) pane contains the documentation generated by the endpoint (if it is hidden, click on the top-right button that says \"_< Docs_\"). The play button (the sideways triangle in the upper-left) executes the current query, whereas \"Prettify\" reformats your query according to best practice (in terms of layout). \"History\" allows you to see queries used previously in the explorer.\n\nWe can run the default starting query (at the time of writing) and we'll get a [JSON](https://en.wikipedia.org/wiki/JSON)-like response that looks something like this:\n\n```json\n{\n  \"data\": {\n    \"event\": {\n      \"title\": \"End of Unix Time\",\n      \"address\": \"Los Angeles, CA, USA\",\n      \"currency\": \"USD\",\n      \"host\": {\n        \"firstName\": \"Joshua\"\n      },\n      \"timeSlots\": {\n        \"totalCount\": 2,\n        \"nodes\": [\n          {\n            \"startAt\": \"2018-08-31T12:00:00\"\n          },\n          {\n            \"startAt\": \"2038-01-18T21:00:00\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\nLet's take a look at what just happened. We'll clear the left-hand pane and recreate the query step-by-step.\n\nWe can start by adding `query { }`. This indicates to the endpoint that we want to retrieve data from the server.\n\nPlace your cursor within the curly brackets and press the spacebar and enter keys at the same time. We should get a list of recommended queries (based on the structure of the data) as follows:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-4.png)","metadata":{"id":893}}],["894",{"pageContent":"![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-4.png)\n\nAs per our initial example, let's reselect `event`. This means that we want to retrieve information associated with a specific event. The event we are interested in has a unique ID of `5879ad8f6672e70036d58ba5`. We can pass this ID as an argument to the query (similar to how we would with JavaScript functions) as follows: `event(id: \"5879ad8f6672e70036d58ba5\") { }`.\n\nNow that we've identified the event that we want to query, we can instruct GraphQL to only retrieve the information that we're interested in. This prevents the response from returning the entire event data-structure (called [over-fetching](https://stackoverflow.com/questions/44564905/what-is-over-fetching-or-under-fetching) in REST). In order to illustrate the dynamic nature of GraphQL, we will be querying completely different data associated with the event as shown in the example below:\n\n```graphql\nquery {\n  event(id: \"5879ad8f6672e70036d58ba5\") {\n    active\n    address\n    url\n  }\n}\n```\n\nNotice that our initial example had **nested queries**. This is where the distinction between GraphQL and REST becomes central. Everything we've done up until this point very much adheres to the way we would think about a traditional REST request.\n\nREST requests function similar to a traditional JavaScript function, where we provide specific arguments and we get a pre-determined response based on the arguments. GraphQL works a bit differently. GraphQL queries are like little maps used to navigate and find all requested data in a single journey. This means that we can conceptualize a set of real-world instructions by means of the GraphQL syntax as follows:\n\n```jsx\ninstructions {\n  travel(type: \"drive\") {\n    mall {\n      travel(type: \"walk\") {\n        general_store {\n          food_isle {\n            bread\n            peanut_butter\n          }\n          stationary_isle {\n            pens (amount: 12)\n            paper\n          }\n        }\n        hardware_store {","metadata":{"id":894}}],["895",{"pageContent":"food_isle {\n            bread\n            peanut_butter\n          }\n          stationary_isle {\n            pens (amount: 12)\n            paper\n          }\n        }\n        hardware_store {\n          nails\n          hammer\n        }\n      }\n    }\n    post_office {\n      packages\n      mail\n    }\n  }\n}\n```\n\nSince GraphQL is a [graph-like structure](<https://en.wikipedia.org/wiki/Graph_(abstract_data_type)>), we can get information loosely related to our event without creating a completely new request. This is where GraphQL really shines when compared to REST! You can think of these as roads or pathways connecting different places. In other words, if you are in the mall (as per our example above), you can go directly to the `general_store_store` in that `mall` and then to the `hardware_store` afterwards. Furthermore, because the `mall` is connected to the `post_office` by a road, you can then drive to the `post_office` afterwards.\n\nDue to the map-like nature of queries, we can actually have a query that follows a circular route, ending up exactly where it started (there is no real practical reason for this, but it demonstrates the graph foundations of GraphQL).\n\n```graphql\nquery {\n  event(id: \"5879ad8f6672e70036d58ba5\") {\n    active\n    address\n    url\n\n    timeSlots {\n      nodes {\n        event {\n          active\n          address\n          url\n        }\n      }\n    }\n  }\n}\n```\n\n## Creating an API\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-6.jpg)\n\nCongratulations, you can now write basic GraphQL queries!","metadata":{"id":895}}],["896",{"pageContent":"}\n      }\n    }\n  }\n}\n```\n\n## Creating an API\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-6.jpg)\n\nCongratulations, you can now write basic GraphQL queries!\n\nNext, we'll want to create our own endpoint, since being restricted to data from [Universe.com](http://universe.com) is limiting. There are several server-side GraphQL frameworks. Some extremely popular examples are [express-graphql](https://www.npmjs.com/package/express-graphql) for Node (running [Express](https://expressjs.com/)) and [Graphene](https://graphene-python.org/) for Python servers. Alternatively, there are several all-in-one solutions like [Prisma](https://www.prisma.io/) or [Hasura](https://hasura.io/) that come with databases included.\n\n### GraphQL as a Service\n\nFor the sake of simplicity, we will be using a free [software as a service](https://en.wikipedia.org/wiki/Software_as_a_service) (SaaS) platform called [GraphCMS](https://graphcms.com/). This allows us to get a custom GraphQL endpoint up with minimal set up.\n\nTo follow along:\n\n1. Visit [https://graphcms.com](https://graphcms.com/) and sign up for a free account.\n2. Once your account has been created, create a new sample project by selecting the \"Podcast Starter\" template.\n3. Make sure that \"Include template content\" is selected, as this will populate our API with placeholder information.\n4. Add or edit content to the API using the GraphCMS project dashboard, but make sure that you don't change the schema since we will be relying on it to write our queries.\n\n_Note that GraphCMS allows you to create a new project completely from scratch, however for our purposes we only want to have a working endpoint with placeholder content. If you are interested in diving deeper into GraphCMS, you can consult their documentation at [https://graphcms.com/docs](https://graphcms.com/docs)._","metadata":{"id":896}}],["897",{"pageContent":"Once your project has been created, you can select the _\"Settings\"_ tab at the bottom-left corner, and navigate to \"API Access\". Make sure to copy the endpoint URL (at the top of the page) and save it somewhere where you will be able to access it later. We'll be directing all our GraphQL queries to this URL, so it is useful to have it at hand.\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-7.gif)\n\nNote that your API endpoint should look something like the following:\n\n```\nhttps://api-us-east-1.graphcms.com/v2/ckll20qnkffe101xr8m2a7m2h/master\n```\n\nHowever, in the next code examples, we'll use `<<<YOUR ENDPOINT HERE>>>` to prevent you from accidentally using an example endpoint if you are following along. If you navigate straight to your endpoint within your browser, you will be presented with a GraphiQL Explorer that allows you to test and try out queries for your specific endpoint:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-8.gif)\n\n### Adding GraphQL to JavaScript\n\nLet's take a query built within our API endpoint GraphiQL explorer and place it in our JavaScript file. This allows us to request the above data directly from our browser:\n\n_Note that the following example assumes familiarity with the native JavaScript [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). If this is the first time you are encountering it, learn [How to Use the JavaScript Fetch API to Get Data](https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-fetch-api-to-get-data)._\n\n```js\nconst QUERY = `\n  query {\n    episodes {\n      title\n    }\n  }\n`;\n\nconst FETCH_OPTIONS = {\n  method: \"POST\",\n  body: JSON.stringify({ query: QUERY }),\n};\n\nfetch(\"<<<YOUR ENDPOINT HERE>>>\", FETCH_OPTIONS)\n  .then((response) => response.json())\n  .then(console.log);\n```\n\nThe above should output something as follows to the browser console:\n\n```json\n{\n  \"data\": {\n    \"episodes\": [\n      {\n        \"title\": \"# Cras eu urna at ligula – tempus commodo\"\n      },","metadata":{"id":897}}],["898",{"pageContent":"```\n\nThe above should output something as follows to the browser console:\n\n```json\n{\n  \"data\": {\n    \"episodes\": [\n      {\n        \"title\": \"# Cras eu urna at ligula – tempus commodo\"\n      },\n      {\n        \"title\": \"# Phasellus feugiat – non massa eu tincidunt\"\n      },\n      {\n        \"title\": \"# Lorem ipsum dolor sit\"\n      }\n    ]\n  }\n}\n```\n\n### Custom GraphQL Function\n\nWe will be making several GraphQL queries from our website. For this purpose, it is helpful to create a basic abstraction (using a JavaScript function) that handles these requests in order to reduce boilerplate code. We can convert our JavaScript example above into a basic JavaScript function as follows:\n\n_Note that the following section assumes familiarity with the [async/await operators](https://en.wikipedia.org/wiki/Async/await) in JavaScript. If you are unfamiliar with them, have a look at the [following guide on the Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)._\n\n```jsx\nconst gqlQuery = async (query) => {\n  const REQUEST_OPTIONS = { method: \"POST\", body: JSON.stringify({ query }) };\n\n  const response = await fetch(\"<<<YOUR ENDPOINT HERE>>>\", REQUEST_OPTIONS);\n\n  if (!response || !response.ok) {\n    throw new Error(\"Query failed\");\n  }\n\n  const { data } = await response.json();\n  return data;\n};\n```\n\nThis allows us to pass a query to the function, which in return provides a response once the query resolves. We also include a check-in the function to determine whether the response succeeded (by checking if it returned a `200` status, by means of `response.ok`).\n\nThis means that we should be able to do the following:\n\n```jsx\nconst QUERY = `\n  query {\n    episodes {\n      title\n    }\n  }\n`;\n\ngqlQuery(QUERY).then(console.log);\n```\n\nThis works, but it always returns an array of **all** the episodes from our entire database. If we only want the two most recent episodes, we can do the following in our query:\n\n```graphql\nquery {\n  episodes(first: 2) {\n    title\n  }\n}\n```","metadata":{"id":898}}],["899",{"pageContent":"```graphql\nquery {\n  episodes(first: 2) {\n    title\n  }\n}\n```\n\nHowever, this isn't very flexible, since it means that we'll need to create an entire new query each time we want get a specific number of episodes. Luckily, GraphQL lets us pass variables as part of the query. For example, if we have a look in our GraphiQL explorer, we can do the following (you might need to click on \"QUERY VARIABLES\" in the bottom-left corner to open it up):\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-9.gif)\n\nYou'll see that we can pass variables as a JSON object, and then within the query we can declare the expected variables in brackets (`( )`) right after the `query` command. The variable names should always start with a dollar sign (`$`). In our case, we can specify that we are expecting `$count`. However, because GraphQL is [strongly typed language](https://en.wikipedia.org/wiki/Strong_and_weak_typing) we are required to declare what type of data `$count` will be. In this case, it will be an `Int` value. We then pass the value of `$count` directly to `episodes(first: $count)`. To replicate this within our JavaScript, we can add variables to our body as follows:\n\n_If you are not familiar with the concept of strongly typed languages, read [the following guide](https://flaviocopes.com/loosely-strongly-typed) by [Glavio Copes](https://flaviocopes.com/)._\n\n```jsx\nconst gqlQuery = async (query, variables) => {\n  const REQUEST_OPTIONS = {\n    method: \"POST\",\n    body: JSON.stringify({ query, variables }),\n  };\n\n  const response = await fetch(\"<<<YOUR ENDPOINT HERE>>>\", REQUEST_OPTIONS);\n\n  if (!response || !response.ok) {\n    throw new Error(\"Query failed\");\n  }\n\n  const { data } = await response.json();\n  return data;\n};\n```\n\nThis means that we'll be able to do the following (which will respectively log the first, first-two and first-three episodes to the console):\n\n```jsx\nconst QUERY = `\n  query ($count: Int) {\n    episodes(first: $count) {\n      title\n    }\n  }\n`;","metadata":{"id":899}}],["900",{"pageContent":"```jsx\nconst QUERY = `\n  query ($count: Int) {\n    episodes(first: $count) {\n      title\n    }\n  }\n`;\n\ngqlQuery(QUERY, { count: 1 }).then(console.log);\ngqlQuery(QUERY, { count: 2 }).then(console.log);\ngqlQuery(QUERY, { count: 3 }).then(console.log);\n```\n\n### Defining an Information Architecture\n\nWith our endpoint now set up, we need to start mapping out all the information we want to show on each page. In the world of user experience, we call this [information architecture](https://en.wikipedia.org/wiki/Information_architecture) mapping.\n\nAs an example, consider the following basic outline, which we'll use as a reference when requesting data from the endpoint:\n\n```markdown\n# GraphQL FM Website\n\n## Episodes Page (Default Landing Page)\n\n- The first episode (for hero banner)\n\n  - Unique ID (This will be used as the URL when viewing the episode)\n  - Episode name\n  - Cover image URL\n  - Audio\n    - File URL\n    - File type (for example `.mp3`, `.wav`, etc.)\n\n- Previous episodes (all episodes after the first one)\n  - Unique ID (This will be used as the URL when viewing the episode)\n  - Published date\n  - Episode name\n  - Cover image URL\n\n## Single Episode Page\n\n- Previous episode ID (if applicable)\n- Next episode ID (if applicable)\n\n  - Current episode\n  - Episode number\n  - Published date\n  - Episode name\n  - Cover image URL\n  - Show notes\n  - List of topics associated with episode\n  - Audio\n    - File URL\n    - File type (for example `.mp3`, `.wav`, etc.)\n  - List of guests\n    - Name of each guest\n    - Photo URL of each guest\n  - List of episode sponsors\n    - Name of sponsoring company\n    - Website URL of sponsoring company\n\n## Guests Page\n\n- List of guests\n  - Name of each guest\n  - Photo URL of each guest\n  - List of episodes that appeared on\n    - Unique ID (This will be used as the URL when viewing the episode)\n    - Date that each episode was published\n    - Episode name for each episode\n    - Cover image URL for each episode\n\n## Topics Page\n\n- A list of all topics\n  - The name of each topic","metadata":{"id":900}}],["901",{"pageContent":"- Date that each episode was published\n    - Episode name for each episode\n    - Cover image URL for each episode\n\n## Topics Page\n\n- A list of all topics\n  - The name of each topic\n  - All episodes associated with a specific topic\n    - Unique ID if the episode (This will be used as the URL when viewing the episode)\n    - The date that each episode was published\n    - The name of each episode\n    - The cover image URL of each episode\n\n## Resources Page\n\n- A list of all resources\n  - The filename of each individual resource\n  - The file type (for example `.mp3`, `.wav`, etc.) of each resource\n  - The URL where each individual resource can be downloaded\n\n## Sponsors Page\n\n- A list of all sponsors\n  - The company name associated with each sponsorship\n  - All the episodes that a specific company is sponsoring\n    - Unique ID if the episode (This will be used as the URL when viewing the episode)\n    - The date that each episode was published\n    - The name of each episode\n    - The cover image URL of each episode\n```\n\n### Loading the Data\n\nWhile creating our information architecture, one thing immediately stands out: there are some specific data co-configurations that are called multiple times. Luckily, the GraphQL standardization allows for something called [fragments](https://graphql.org/learn/queries/#fragments). Fragments helps keep our queries DRY (a programming acronym for [Don't Repeat Yourself](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)). The most common co-configuration seems to be the data required to show a preview of a specific episode.\n\nWe can wrap this in a GraphQL fragment as follows (very similar to how we would create a query itself in JavaScript):\n\n```js\nconst EPISODE_PREVIEW_FRAGMENT = `\n  fragment EpisodePreview on Episode {\n    id\n    date: publishedAt\n    title\n    image {\n      url\n    }\n  }\n`;\n```","metadata":{"id":901}}],["902",{"pageContent":"```js\nconst EPISODE_PREVIEW_FRAGMENT = `\n  fragment EpisodePreview on Episode {\n    id\n    date: publishedAt\n    title\n    image {\n      url\n    }\n  }\n`;\n```\n\nWe can then use it in a specific query as follows (by using JavaScript [string interpolation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#expression_interpolation)):\n\n```js\nconst GUESTS_PAGE_QUERY = `\n  query {\n   peoples {\n    fullName\n    photo {\n      url\n    }\n    episodes: appearedOn {\n      ...EpisodePreview\n    }\n  }\n }\n\n  ${EPISODE_PREVIEW_FRAGMENT}\n```\n\nIt is common practice to place fragments **after** the query expression instead of declaring them before the query, because the query should first and foremost be expressive. We should rather include fragments as footnotes for reference. Using our information architecture and the fragment declared above, we can replace all the content in our JavaScript file with the following:\n\n```js\nconst EPISODE_PREVIEW_FRAGMENT = `\n  fragment EpisodePreview on Episode {\n      id\n      date: publishedAt\n      title\n      image {\n        url\n      }\n  }\n`;\n\nconst EPISODES_PAGE_QUERY = `\n\tquery {\n    first: episodes(first: 1) {\n      id\n      title\n      image {\n        url\n      }\n      audio: audioFile {\n        url\n        mime: mimeType\n      }\n    }\n\n    previous: episodes(skip: 1) {\n      ...EpisodePreview,\n    }\n  }\n  \n  ${EPISODE_PREVIEW_FRAGMENT}\n`;\n\nconst SINGLE_EPISODE_PAGE_QUERY = `\n  query($id: ID) {\n    episode(where: { id: $id }) {\n      number: episodeNumber\n      date: publishedAt\n      title\n      description\n      notes: showNotes\n      audio: audioFile {\n        url\n        mime: mimeType\n      }\n      image {\n        url\n      }\n      guests {\n        fullName\n        photo {\n          url\n        }\n      }\n      tags {\n        name\n      }\n      sponsors {\n        company {\n          name\n          website\n        }\n      }\n    }\n  }\n`;\n\nconst SINGLE_EPISODE_NEIGHBORS_QUERY = `\n  query($previous: Int, $next: Int) {\n    previous: episode(where: { episodeNumber: $previous }) { id }","metadata":{"id":902}}],["903",{"pageContent":"name\n          website\n        }\n      }\n    }\n  }\n`;\n\nconst SINGLE_EPISODE_NEIGHBORS_QUERY = `\n  query($previous: Int, $next: Int) {\n    previous: episode(where: { episodeNumber: $previous }) { id }\n    next: episode(where: { episodeNumber: $next }) { id }\n  }\n`;\n\nconst GUESTS_PAGE_QUERY = `\n  query {\n   peoples {\n    fullName\n    photo {\n      url\n    }\n    episodes: appearedOn {\n      ...EpisodePreview\n    }\n  }\n }\n \n ${EPISODE_PREVIEW_FRAGMENT}\n`;\n\nconst TOPICS_PAGE_QUERY = `\n  query {\n    tags {\n      name\n      episodes {\n        ...EpisodePreview\n      }\n    }\n  }\n  \n  ${EPISODE_PREVIEW_FRAGMENT}\n`;\n\nconst RESOURCES_PAGE_QUERY = `\n  query {\n     assets {\n      fileName\n      mimeType\n      url\n    }\n  }\n  \n  ${EPISODE_PREVIEW_FRAGMENT}\n`;\n\nconst SPONSORS_PAGE_QUERY = `\n  query {\n    sponsorships {\n      company {\n        name\n      }\n      episodes {\n        ...EpisodePreview\n      }\n    }\n  }\n  \n  ${EPISODE_PREVIEW_FRAGMENT}\n`;\n\nconst gqlQuery = async (query, variables) => {\n  const response = await fetch(\n    \"https://api-us-east-1.graphcms.com/v2/ckll20qnkffe101xr8m2a7m2h/master\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({ query, variables }),\n    }\n  );\n\n  if (!response || !response.ok) {\n    throw new Error(\"Query failed\");\n  }\n\n  const { data } = await response.json();\n  return data;\n};\n\nconst getData = async () => {\n  const episodes = await gqlQuery(EPISODES_PAGE_QUERY);\n  const guests = await gqlQuery(GUESTS_PAGE_QUERY);\n  const topics = await gqlQuery(TOPICS_PAGE_QUERY);\n  const sponsors = await gqlQuery(SPONSORS_PAGE_QUERY);\n\n  const [{ id }] = episodes.first;\n  const singleEpisode = await gqlQuery(SINGLE_EPISODE_PAGE_QUERY, { id });\n\n  const { number } = singleEpisode.episode;\n\n  const singleEpisodeNeighbhors = await gqlQuery(\n    SINGLE_EPISODE_NEIGHBORS_QUERY,\n    { previous: number + 1, next: number - 1 }\n  );\n\n  console.log({\n    episodes,\n    guests,\n    topics,\n    sponsors,\n    singleEpisode,\n    singleEpisodeNeighbhors,\n  });\n};\n\ngetData();\n```","metadata":{"id":903}}],["904",{"pageContent":"{ previous: number + 1, next: number - 1 }\n  );\n\n  console.log({\n    episodes,\n    guests,\n    topics,\n    sponsors,\n    singleEpisode,\n    singleEpisodeNeighbhors,\n  });\n};\n\ngetData();\n```\n\nIf you run the above, you'll get one big object in your browser console. This object contains all the data that we'll be using in our website:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-10.png)\n\nHaving the data in our browser console is not enough. We need to do some additional work in order to structure it in HTML and CSS, to be consumed directly by users. In [part 2](./graphql-project-part-2), we'll walk through doing this, turning our data into a fully functional website.","metadata":{"id":904}}],["905",{"pageContent":"---\ntitle: \"GraphQL Part 2: Creating a web application\"\n---\n\n# GraphQL project: part 2\n\n[Part 1](./graphql-project-part-1) of this project showed us how to set up the initial GraphQL endpoint and create our queries. The remaining step is to transform the data into a fully functional website.\n\nWe will do this by completing the following steps:\n\n- [Understanding the App Shell Model](#understanding-the-app-shell)\n- [Adding Some Global Configurations](#adding-some-global-configurations)\n  - [Adding routing](#adding-routing)\n  - [Adding styling](#adding-styling)\n  - [Making our web app responsive](#making-our-web-app-responsive)\n- [Creating Reusable Blocks](#creating-reusable-blocks)\n  - [Adding a hero image](#adding-a-hero-image)\n  - [Adding a grid of cards](#adding-a-grid-of-cards)\n  - [Adding some details](#adding-some-details)\n  - [Adding a divider to separate sections](#adding-a-divider-to-separate-sections)\n  - [Adding a loader](#adding-a-loader)\n- [Adding Some Final Touches](#adding-some-final-touches)\n  - [Doing date conversion](#doing-date-conversion)\n  - [Adding reusable block functions](#adding-reusable-block-functions)\n  - [Adding page-level functions](#adding-page-level-functions)\n\n## Understanding the App Shell Model\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-11.png)\n\nWe'll structure our website based on the [App Shell Model](https://developers.google.com/web/fundamentals/architecture/app-shell). This approach is useful for [single-page applications](https://en.wikipedia.org/wiki/Single-page_application), websites or applications that rely almost exclusively on JavaScript for their logic and routing. By using an app shell pattern, we ensure that users never see a blank screen as they move between different states and pages. [Addy Osmani](https://addyosmani.com/), a well known senior engineer at [Google](http://google.com/), describes an app shell as follows:","metadata":{"id":905}}],["906",{"pageContent":"> _\"Put another way, the app shell is similar to the bundle of code that you’d publish to an app store when building a native app. It is the skeleton of your UI and the core components necessary to get your app off the ground, but likely does not contain the data. [...] An application shell architecture makes the most sense for apps and sites with relatively unchanging navigation but changing content.\"_\n\n— Addy Osmani: [_The App Shell Model_](https://developers.google.com/web/fundamentals/architecture/app-shell)\n\n## Adding Some Global Configurations\n\nBefore diving into our app shell architecture, we'll add some site-wide configurations. We can keep the structure of our `index.html` file mostly unchanged, except for a few changes:\n\n- Change the default `<title>` value.\n- Add the \"Roboto\" Google Font via a `<link>` tag.\n- Add the \"Markdown It\" JavaScript library via a `<script>` tag.\n- Add a `<main>` element that has an ID attribute of `\"app\"` .\n\nThis means that our HTML should look like this:\n\n```html\n<!DOCTYPE html>\n\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>GraphQL FM</title>\n    <link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <link\n      href=\"//fonts.googleapis.com/css2?family=Roboto:wght@400;900&amp;display=swap\"\n      rel=\"stylesheet\"\n    />\n  </head>\n\n  <body>\n    <main id=\"app\"></main>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/markdown-it/12.0.4/markdown-it.min.js\"></script>\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\nNow we add the following CSS to our `style.css` file:\n\n```css\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0 0 20rem 0;\n\n  overflow-x: hidden;\n  overflow-y: scroll;\n\n  background: #262626;\n  color: white;\n  font-family: \"Roboto\", sans-serif;\n  text-rendering: optimizeLegibility;\n}\n```\n\nWith this code, we are:\n\n- Overriding the default browser margins and padding applied to the `<body>` element.\n- Using overflow properties to prevent content from overflowing horizontally.","metadata":{"id":906}}],["907",{"pageContent":"}\n```\n\nWith this code, we are:\n\n- Overriding the default browser margins and padding applied to the `<body>` element.\n- Using overflow properties to prevent content from overflowing horizontally.\n- Forcing a scroll bar, regardless of whether vertical content overflows. This prevents interface elements from jumping around as the scroll bar appears and disappears.\n- Adding some background and foreground colours.\n\n### Adding routing\n\nAt the end of [part 1](./graphql-project-part-1), we loaded all our data at once. While this was helpful to validate that we can retrieve the data required, it doesn't provide the best user experience. We'll split the loading of data into specific pages or views as required.\n\nRouting is usually done by means of URL paths that correspond to specific HTML files located on a server. Alternatively, the server can also intercept [HTTP requests](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) and send back generated HTML to the browser. In our case, we want all routing to happen directly in the browser without sending new HTTP requests as pages change.\n\nTo accomplish this, we'll use [hash routing](https://itnext.io/why-using-hash-based-urls-in-your-react-spa-will-save-you-more-time-than-you-think-a21e2c560879). By placing a hash (`#` ) in our URL, we convert everything (including any URL paths) after the hash into a single string. Hashing functionality was originally added to URLs in order to have links scroll to specific positions on pages. For example, you can go directly to this section in the guide by following the [#adding-routing](#adding-routing) link. Hashes are also super useful for emulating traditional routing in single-page applications. Nowadays, it is included under the hood in several routing libraries like [React Router](https://reactrouter.com/) and the official [Vue Router](https://router.vuejs.org/).","metadata":{"id":907}}],["908",{"pageContent":"Before creating our routing function, let's first find and store our `<main>` HTML node using the `\"app\"` ID. This element will serve as the content area of our website (the area that is wrapped by the app shell and changes when the route changes).\n\n```js\nconst appNode = document.querySelector(\"#app\");\n```\n\nThen we need to create a JavaScript object that maps the relationship between specific routes and the functions that create their HTML. For now, we will simply display the name of the page on the screen. Our map will end up looking something like this:\n\n```js\nconst routesMap = {\n  episodes: () => \"<div>episodes</div>\",\n  topics: () => \"<div>topics</div>\",\n  guests: () => \"<div>guests</div>\",\n  resources: () => \"<div>resources</div>\",\n  sponsors: () => \"<div>sponsors</div>\",\n  id: (id) => `<div>single episode: ${id}</div>`,\n};\n```\n\nThen we get to the real task at hand; the routing function itself (called `handleRouting`):\n\n1. Extract the URL hash directly from the `window.location` object.\n2. Use a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) to remove the trailing characters at the start and the end of the hash string. For example, if we have `#/id/21w67g2fi/` it will be converted into ``id/21w67g2fi`.\n3. Split the value into an array based on all forward-slash characters (`/`). This means that our example would be split into `['id', '21w67g2fi']`.","metadata":{"id":908}}],["909",{"pageContent":"3. Split the value into an array based on all forward-slash characters (`/`). This means that our example would be split into `['id', '21w67g2fi']`.\n\nOnce we've [destructured](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) the page name (the first \"folder\" in the path) and the optional trailing id value (the second \"folder\" in the path), we then retrieve the function that corresponds to that page. We proceed by calling it and passing an id value (if present). If no page value is supplied, the episodes page will be shown (which serves as the homepage and general fallback page). Furthermore, if you have a hash with no ID – for example, `#/guests` – then `null` will simply be passed to the specific route function as the ID.\n\nAfter the above, our function should look something like this:\n\n```js\nconst handleRouting = async () => {\n  const { hash } = window.location;\n  const [page, id] = hash.replace(/^#\\//, \"\").replace(/\\/$/, \"\").split(\"/\");\n\n  const routeFn = ROUTES_MAP[page || \"episodes\"];\n  appNode.innerText = routeFn(id || null);\n};\n```\n\nBut our JavaScript doesn't do anything just yet. We need to manually call the routing function once the website loads. We also need to configure an event listener to fire the `handleRouting` function each time the URL hash changes. This will look like:\n\n```js\nhandleRouting();\nwindow.addEventListener(\"hashchange\", handleRouting);\n```\n\nWith the above functionality set up, we now need some way to trigger the page changes. We can add a simple header with links as below. Note that the header is part of the app shell and therefore goes above the `<main id=\"app\"></main>` element:\n\n```html\n<header>\n  <nav>\n    <ul>\n      <li>\n        <a href=\"#/episodes\">Episodes</a>\n      </li>\n\n      <li>\n        <a href=\"#/topics\">Topics</a>\n      </li>\n\n      <li>\n        <a href=\"#/guests\">Guests</a>\n      </li>\n\n      <li>\n        <a href=\"#/resources\">Resources</a>\n      </li>\n\n      <li>\n        <a href=\"#/sponsors\">Sponsors</a>\n      </li>","metadata":{"id":909}}],["910",{"pageContent":"</li>\n\n      <li>\n        <a href=\"#/guests\">Guests</a>\n      </li>\n\n      <li>\n        <a href=\"#/resources\">Resources</a>\n      </li>\n\n      <li>\n        <a href=\"#/sponsors\">Sponsors</a>\n      </li>\n    </ul>\n  </nav>\n</header>\n\n<main id=\"app\"></main>\n```\n\nWhen running your code, you will see the following:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-12.gif)\n\nNote how the name of the route is both shown inside the `<main id=\"app\"></main>` element and updated in the URL as a user navigates to a new hash-based route.\n\n### Adding styling\n\nWhile the above works, it isn't the most pleasing user experience. To this end, let's add some basic CSS class names.\n\nI'm using the [BEM naming convention](https://en.bem.info/methodology/naming-convention/) in my HTML class names. If you are unfamiliar with BEM and want to learn more, visit the BEM documentation at [https://bem.info](https://bem.info/). For now, all you need to know about BEM is that it provides us with a systematic way of naming our CSS classes to manage them more easily. Within a static web project, BEM might be a bit overkill, but whenever you are working with an considerable amount of interactivity, BEM really helps to keep your CSS organized.\n\n```html\n<header class=\"header\">\n  <div class=\"header__content\">\n    <h1 class=\"header__logo\">\n\n    <a class=\"header__link\" href=\"#\">\n        <span class=\"header__large\">GraphQL</span>\n      <span>FM</span></h1>\n    </a>\n\n    <nav class=\"header__menu\" id=\"menu\">\n      <a class=\"header__button header__button_disabled\" href=\"#/episodes\">\n        Episodes\n      </a>\n\n      <a class=\"header__button header__button_disabled\" href=\"#/topics\">\n        Topics\n      </a>\n\n      <a class=\"header__button header__button_disabled\" href=\"#/guests\">\n        Guests\n      </a>\n\n      <a class=\"header__button header__button_disabled\" href=\"#/resources\">\n        Resources\n      </a>\n\n      <a class=\"header__button header__button_disabled\" href=\"#/sponsors\">\n        Sponsors\n      </a>\n    </nav>\n  </div>","metadata":{"id":910}}],["911",{"pageContent":"Resources\n      </a>\n\n      <a class=\"header__button header__button_disabled\" href=\"#/sponsors\">\n        Sponsors\n      </a>\n    </nav>\n  </div>\n</header>\n\n<main id=\"app\"></main>\n```\n\nWe can then apply the following CSS styling to our `style.css` file:\n\n```css\n.header {\n  background: white;\n  position: relative;\n}\n\n.header__logo {\n  font-size: 1.5rem;\n  font-weight: 900;\n  font-style: italic;\n  user-select: none;\n}\n\n.header__link {\n  text-decoration: none;\n  color: #c0a;\n}\n\n.header__link:hover {\n  color: #95067d;\n}\n\n.header__content {\n  max-width: 1200px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  padding: 0 1rem;\n  justify-content: space-between;\n}\n\n.header__menu {\n  background: white;\n  top: 100%;\n  left: 0;\n  display: flex;\n  justify-content: flex-end;\n  z-index: 1;\n  transform-origin: top;\n}\n\n.header__large {\n  font-size: 3rem;\n  letter-spacing: -2px;\n}\n\n.header__button {\n  text-align: center;\n  transition: background 0.3s;\n  background: none;\n  border: none;\n  font-size: 1rem;\n  padding: 2.5rem 1rem;\n  margin: 0;\n  font-family: \"Roboto\", sans-serif;\n  text-rendering: optimizeLegibility;\n  color: black;\n  text-decoration: none;\n  display: block;\n  width: 100%;\n}\n\n.header__button_disabled {\n  opacity: 0.25;\n  cursor: default;\n}\n\n.header__button:not(.header__button_disabled):hover {\n  background: #eee;\n  cursor: pointer;\n}\n```\n\nThe above should provide us with a nicely designed app shell:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-13.png)\n\n### Making our web app responsive\n\nAs you resize your browser, you might notice that the above isn't fully responsive.\n\nUnfortunately, accommodating the above on mobile viewports will be a bit challenging due to restricted space. Luckily, we can add a \"Navigate\" button between the logo and the menu items. This button will open and close a vertically aligned list of pages when clicked, and will hide the list when clicked again. This is called [progressive disclosure](https://en.wikipedia.org/wiki/Progressive_disclosure) within the world of user experience.","metadata":{"id":911}}],["912",{"pageContent":"```html\n<button class=\"header__navigate\" id=\"navigate\">Navigate</button>\n```\n\nLet's adjust some of our existing CSS in order to make it a bit more usable on mobile:\n\n```css\n.header__logo {\n  font-size: 1.5rem;\n  font-weight: 900;\n  font-style: italic;\n  user-select: none;\n  display: none;\n}\n\n.header__content {\n  max-width: 1200px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  padding: 0 1rem;\n  justify-content: center;\n}\n\n.header__menu {\n  background: white;\n  position: absolute;\n  top: 100%;\n  left: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  width: 100%;\n  transition: transform 0.3s;\n  transform: scaleY(0);\n  z-index: 1;\n  transform-origin: top;\n  border-top: 1px solid #ccc;\n}\n\n.header__menu_active {\n  transform: scaleY(1);\n}\n```\n\nWe'll also need to add some additional CSS for the HTML elements we just added. Further, we must add some media queries in order to transition between the above full-screen functionality and the mobile approach. Also note that we are using pseudo-elements to control the arrow in the button:\n\n```css\n.header__navigate {\n  display: flex;\n  align-items: center;\n  background: #c0a;\n  color: white;\n  font-weight: 900;\n  font-family: \"Roboto\", sans-serif;\n  text-rendering: optimizeLegibility;\n  padding: 1rem 1.5rem;\n  border: none;\n  font-size: 1rem;\n  border-radius: 32px;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  cursor: pointer;\n  margin: 1rem;\n}\n\n.header__navigate::after {\n  content: \"\";\n  margin-left: 1rem;\n  display: block;\n  width: 0;\n  height: 0;\n  border: 0.5rem solid transparent;\n  border-top-color: white;\n  transition: transform 0.3s;\n  transform: rotate(0deg) translateY(0.25rem);\n}\n\n.header__navigate_active::after {\n  transform: rotate(180deg) translateY(0.4rem);\n}\n\n@media (min-width: 500px) {\n  .header__logo {\n    display: block;\n  }\n}\n\n@media (min-width: 500px) {\n  .header__content {\n    justify-content: space-between;\n  }\n}\n\n@media (min-width: 900px) {\n  .header__menu {\n    border-top: none;\n    transform: scaleY(1);\n    flex-direction: row;\n    position: static;","metadata":{"id":912}}],["913",{"pageContent":".header__content {\n    justify-content: space-between;\n  }\n}\n\n@media (min-width: 900px) {\n  .header__menu {\n    border-top: none;\n    transform: scaleY(1);\n    flex-direction: row;\n    position: static;\n    width: auto;\n  }\n}\n\n@media (min-width: 900px) {\n  .header__navigate {\n    display: none;\n  }\n}\n```\n\nBy adding the above, our app shell will now work as follows on different screen sizes:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-14.gif)\n\nWe're now controlling our routing exclusively through JavaScript instead of the default browser behaviour of loading a new HTML file. This means we need to toggle the CSS styling that indicates what page you are viewing. We'll do this using JavaScript in our routing function as follows:\n\n```js\nconst appNode = document.querySelector(\"#app\");\nconst navigateNode = document.querySelector(\"#navigate\");\nconst menuApp = document.querySelector(\"#menu\");\n\nlet navigating = false;\n\nconst toggleNavigate = (state) => {\n  navigateNode.classList.toggle(\"header__navigate_active\");\n  menuApp.classList.toggle(\"header__menu_active\");\n  navigate = state === undefined ? !navigate : state;\n};\n\nconst handleRouting = async () => {\n  const { hash } = window.location;\n  appNode.innerHTML = \"Loading...\";\n\n  const [page, id] = hash.replace(/^#\\//, \"\").replace(/\\/$/, \"\").split(\"/\");\n\n  menuApp.querySelectorAll(\"a\").forEach((node) => {\n    const value = node.innerText.toLowerCase();\n\n    if (value === page || (!hash && value === \"episodes\")) {\n      node.classList.add(\"header__button_disabled\");\n    } else {\n      node.classList.remove(\"header__button_disabled\");\n    }\n  });\n\n  const routesMap = {\n    episodes: () => \"<div>episodes</div>\",\n    topics: () => \"<div>topics</div>\",\n    guests: () => \"<div>guests</div>\",\n    resources: () => \"<div>resources</div>\",\n    sponsors: () => \"<div>sponsors</div>\",\n    id: (id) => `<div>single episode: ${id}</div>`,\n  };\n\n  const routeFn = routesMap[page || \"episodes\"];\n  appNode.innerHTML = await routeFn(id || null);","metadata":{"id":913}}],["914",{"pageContent":"sponsors: () => \"<div>sponsors</div>\",\n    id: (id) => `<div>single episode: ${id}</div>`,\n  };\n\n  const routeFn = routesMap[page || \"episodes\"];\n  appNode.innerHTML = await routeFn(id || null);\n\n  if (menuApp.classList.contains(\"header__menu_active\")) {\n    toggleNavigate(false);\n  }\n};\n\nnavigateNode.addEventListener(\"click\", toggleNavigate);\n```\n\nThe above retrieves all HTML elements with the class of `header__button` and then loops over them, converting their text value to lowercase and comparing it against the current route. If it matches the current route, then it is disabled since you can't go to the current page if you are already on it. However, this also serves as a (commonly used) visual cue to which page you are on at the moment. Furthermore, if the user is on mobile and the navigation list is open, then it is automatically closed upon loading the new page. Lastly, we are also adding a event listener to toggle the menu on mobile when a user clicks the navigate button.\n\n## Creating Reusable Blocks\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-15.png)\n\nNow that we have a working app shell, it's time to create the actual page content. A common approach is to create basic reusable HTML blocks to render your interface. This keeps our code[DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself). Luckily, BEM already provides us with a mental model to scope areas of HTML and CSS to specific reusable blocks.\n\nBy consulting the information architecture we created in [part 1](./graphql-project-part-1), we can split our interface into the following reusable blocks:\n\n- A hero section at the top of each page that contains either a title or the latest episode.\n- A grid of card-like components that can be used to present a list of items as independent units.\n- A details section that contains extra textual information about a specific subject.\n- A divider component that we'll be using to divide different sections.\n\n### Adding a hero image","metadata":{"id":914}}],["915",{"pageContent":"- A details section that contains extra textual information about a specific subject.\n- A divider component that we'll be using to divide different sections.\n\n### Adding a hero image\n\nLet's start with the top-most block on our pages, often called a [hero](https://en.wikipedia.org/wiki/Hero_image) in web and print design. Starting out, we can create a simple implementation that merely displays the name of a page. We will also add an image in order to create a strong visual anchor.\n\nWe can add the following HTML:\n\n```html\n<div class=\"hero\">\n  <div class=\"hero__content\">\n    <img\n      class=\"hero__image\"\n      src=\"https://images.unsplash.com/photo-1581368135153-a506cf13b1e1\"\n    />\n    <h2 class=\"hero__title\">Example Title</h2>\n  </div>\n</div>\n```\n\nWith the following CSS:\n\n```css\n.hero {\n  position: relative;\n}\n\n.hero__image {\n  z-index: -1;\n  position: absolute;\n  object-fit: cover;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0.2;\n}\n\n.hero__content {\n  padding: 8rem 0rem;\n  text-align: center;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n.hero__title {\n  font-size: 3rem;\n  color: white;\n  font-weight: 900;\n  letter-spacing: 1px;\n  margin: 0;\n}\n```\n\nWe are using `postion: relative` and `z-index: -1` to position the image underneath the hero component. While you are able to achieve the same result by using `background-image`, we want to earmark the image as semantically meaningful. This means that accessibility devices and search engines will recognize the above as an image.\n\nThe above should now look like this.\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-16.png)\n\nHowever, we want to include another variant of our hero block (to be used on the homepage and on single episode pages). This variant will embed a specific audio file and call to actions as required. To do this, we can modify our hero HTML code from above as follows:\n\n```html\n<div class=\"hero\">\n  <img\n    class=\"hero__image\"\n    src=\"https://images.unsplash.com/photo-1581368135153-a506cf13b1e1\"\n  />","metadata":{"id":915}}],["916",{"pageContent":"```html\n<div class=\"hero\">\n  <img\n    class=\"hero__image\"\n    src=\"https://images.unsplash.com/photo-1581368135153-a506cf13b1e1\"\n  />\n  <div class=\"hero__content\">\n    <h2 class=\"hero__subtitle\">Example Title</h2>\n    <div class=\"hero__title\">Audio Title</div>\n\n    <audio class=\"hero__player\" controls=\"controls\">\n      <source src=\"#\" type=\"audio/mp3\" />\n    </audio>\n\n    <div class=\"hero__buttons-area\">\n      <a class=\"hero__button\" href=\"#\">Click me!</a>\n    </div>\n  </div>\n</div>\n```\n\nWe also need to add the following CSS to our `style.css` file:\n\n```css\n.hero__subtitle {\n  opacity: 0.5;\n  font-size: 1rem;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  color: white;\n  font-weight: 400;\n  margin: 0;\n}\n\n.hero__player {\n  margin: 2rem 0 3rem;\n  width: 100%;\n}\n\n.hero__buttons-area {\n  display: flex;\n  justify-content: center;\n}\n\n.hero__button {\n  text-decoration: none;\n  background: #c0a;\n  color: white;\n  font-weight: 900;\n  font-family: \"Roboto\", sans-serif;\n  text-rendering: optimizeLegibility;\n  padding: 1rem 1.5rem;\n  border: none;\n  font-size: 1rem;\n  border-radius: 32px;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  transition: transform 0.3s, background 0.3s;\n  transform: scale(1);\n}\n\n.hero__button_disabled {\n  opacity: 0.25;\n  background: grey;\n}\n\n.hero__button:not(.hero__button_disabled):hover {\n  background: #95067d;\n  cursor: pointer;\n  transform: scale(1.1);\n}\n```\n\nBy making the above changes, we are able to use the hero as follows as well:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-17.png)\n\n### Adding a grid of cards\n\nNext, we'll look at ways of displaying items on the screen in a grid-like format. We will create a basic column-like structure. The key goal here is that the number of columns should change depending on the size of the screen:\n\n```html\n<ul class=\"cards\">\n  <li class=\"cards__wrap\">This is a Card</li>\n  <li class=\"cards__wrap\">This is a Card</li>\n  <li class=\"cards__wrap\">This is a Card</li>\n  <li class=\"cards__wrap\">This is a Card</li>\n</ul>\n```","metadata":{"id":916}}],["917",{"pageContent":"<li class=\"cards__wrap\">This is a Card</li>\n  <li class=\"cards__wrap\">This is a Card</li>\n  <li class=\"cards__wrap\">This is a Card</li>\n  <li class=\"cards__wrap\">This is a Card</li>\n</ul>\n```\n\nBy adding the following CSS, we can set our grid to alternate between a single column, two or even three columns (depending on the available space):\n\n```css\n.cards {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 auto;\n  padding: 0;\n  max-width: 1200px;\n  list-style: none;\n  align-items: center;\n}\n\n.cards__wrap {\n  padding: 1rem;\n  width: 100%;\n}\n\n@media (min-width: 40rem) {\n  .cards__wrap {\n    width: 50%;\n  }\n}\n\n@media (min-width: 60rem) {\n  .cards__wrap {\n    width: 33.33333333333333%;\n  }\n}\n```\n\nAfter adding the above, we should see the following behavior in our HTML:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-18.png)\n\nHowever, we still need to populate the columns with card components. We can create a single card with the code below. This element will then be repeated within the grid cells:\n\n```html\n<section class=\"cards__item\">\n  <img\n    class=\"cards__image\"\n    src=\"https://images.unsplash.com/photo-1581368135153-a506cf13b1e1\"\n  />\n\n  <div class=\"cards__content\">\n    <span class=\"card__subtitle\">Example Subtitle</span>\n    <h3 class=\"cards__title\">Example Title</h3>\n    <a class=\"cards__button\" href=\"#\">Click me!</a>\n  </div>\n</section>\n```\n\nLet's add the following styling for our card components:\n\n```css\n.cards__item {\n  color: rgba(0, 0, 0, 0.87);\n  background: white;\n  border-radius: 6px;\n  overflow: hidden;\n}\n\n.cards__content {\n  padding: 1rem;\n}\n\n.cards__image {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n\n.cards__subtitle {\n  color: rgba(0, 0, 0, 0.54);\n  font-size: 0.75rem;\n  text-transform: uppercase;\n  line-height: 1;\n  margin: 0.25rem 0;\n}\n\n.cards__title {\n  font-size: 1.5rem;\n  margin: 0.25rem 0;\n  line-height: 1;\n  word-break: break-all;\n}\n\n.cards__button {\n  text-decoration: none;\n  cursor: pointer;\n  display: inline-block;\n  padding: 1rem 1.5rem;\n  font-size: 1rem;\n  margin: 2rem 0 1rem;","metadata":{"id":917}}],["918",{"pageContent":"line-height: 1;\n  word-break: break-all;\n}\n\n.cards__button {\n  text-decoration: none;\n  cursor: pointer;\n  display: inline-block;\n  padding: 1rem 1.5rem;\n  font-size: 1rem;\n  margin: 2rem 0 1rem;\n  border: 1px #c0a solid;\n  text-transform: uppercase;\n  color: #c0a;\n  background: none;\n  border-radius: 32px;\n  font-weight: 900;\n  font-family: \"Roboto\", sans-serif;\n  text-rendering: optimizeLegibility;\n  transition: transform 0.3s, background 0.3s;\n  transform: scale(1);\n}\n\n.cards__button:hover {\n  background: #cc00aa24;\n  transform: scale(1.1);\n}\n```\n\nThe above should create a single card element as follows:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-19.png)\n\n### Adding some details\n\nA lot of the content returned from our endpoint will be in [markdown format](https://en.wikipedia.org/wiki/Markdown). We've included the [Markdown It](https://github.com/markdown-it/markdown-it) library in our HTML app shell. However, we are pushing up against the limits of the BEM methodology here (which is not uncommon) because we aren't able to assign CSS class names directly to the HTML elements created by Markdown It.\n\nTo that end, we will wrap all the element tag selectors (which is not allowed by BEM), inside a block called \"details\". We'll do it as follows:\n\n```css\n.details {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 auto;\n  padding: 0 1rem;\n  max-width: 1200px;\n  list-style: none;\n  color: white;\n  flex-direction: column;\n}\n\n.details a {\n  color: white;\n}\n\n.details a:hover {\n  margin: -0.5rem -0.25rem;\n  padding: 0.5rem 0.25rem;\n  background: rgba(255, 255, 255, 0.2);\n  border-radius: 6px;\n}\n\n.details ul {\n  padding-left: 1rem;\n}\n\n.details li {\n  line-height: 1.75;\n}\n```\n\nWe can then add the following HTML in order to test the above approach:\n\n```html\n<div class=\"details\">\n  <div class=\"details__description\">\n    <p>Hello World!</p>\n    <a href=\"#\">Click me!</a>\n\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n    </ul>\n  </div>\n</div>\n```\n\nThis should render the following within our interface:","metadata":{"id":918}}],["919",{"pageContent":"<p>Hello World!</p>\n    <a href=\"#\">Click me!</a>\n\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n    </ul>\n  </div>\n</div>\n```\n\nThis should render the following within our interface:\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-21.png)\n\n### Adding a divider to separate sections\n\nNext, we'll add an HTML block that allows us to separate different sections on a page.\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-22.png)\n\n```js\n<div class=\"divider\">\n  <div class=\"diver__content\">\n    <h2 class=\"divider__title\">Example Title</h2>\n    <img\n      class=\"divider__image\"\n      src=\"https://images.unsplash.com/photo-1581368135153-a506cf13b1e1\"\n    />\n  </div>\n</div>\n```\n\n```css\n.divider {\n  color: white;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 6rem 1rem 0.5rem;\n}\n\n.diver__content {\n  justify-content: space-between;\n  align-items: flex-end;\n  border-bottom: 1px grey solid;\n  display: flex;\n  padding-bottom: 0.5rem;\n}\n\n.divider__title {\n  margin: 0;\n}\n\n.divider__image {\n  margin-top: 1rem;\n  border-radius: 50%;\n  width: 10rem;\n  height: 10rem;\n  object-fit: cover;\n}\n```\n\n### Adding a loader\n\nLastly, we'll want to display some type of animated loader to users when data is being loaded from the endpoint.\n\n```html\n<span class=\"loader\"></span>\n```\n\n```css\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.loader {\n  animation: spin 0.6s linear 0s infinite;\n  display: block;\n  border: 6px solid grey;\n  border-top: 6px solid white;\n  border-radius: 50%;\n  width: 8rem;\n  height: 8rem;\n  margin: 8rem auto;\n}\n```\n\n![](https://docimg.replit.com/images/tutorials/graphql-project/graphql-project-23.png)\n\nUp to now, we've been showing users a \"Loading...\" piece of text. To have our website start off as loading we need to add the loader into our `<main>` element in the HTML. We also want to replace the current app node with a loader when a user changes the current page. You can achieve this with:\n\n```js","metadata":{"id":919}}],["920",{"pageContent":"```js\nappNode.innerHTML = '<span class=\"loader\"></span>';\n```\n\n## Adding Some Final Touches\n\nMost of the preparatory work is done and we can get down to actually linking our GraphQL endpoint to our routes. We will do this by creating a date-specific conversion utility function and then creating functions that return our reusable HTML blocks (based on data passed to the function). Lastly, we will tie all of the above together by creating an asynchronous function for each route.\n\n### Doing date conversion\n\nAll date-specific data is stored on GraphCMS as [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) strings. This means that we need to run the following function on dates in order to convert them into a more human readable format (for example: \"20 October 2015\"):\n\n```js\nconst MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nconst convertToPrettyDate = (dateString) => {\n  const dateObj = new Date(dateString);\n  const day = dateObj.getDate();\n  const month = MONTHS[dateObj.getMonth() - 1];\n  const year = dateObj.getFullYear();\n\n  return `${day} ${month} ${year}`;\n};\n```\n\n### Adding reusable block functions\n\nGiven that we've already created all our lower-level reusable HTML blocks, we can create the following four functions that create them programmatically:\n\n```js\nconst createHeroBlock = (props) => {\n  const { imageUrl, title, subtitle, file, mime, buttons = [] } = props;\n\n  if (!imageUrl || !title) {\n    throw new Error('No \"imageUrl\" and/or \"title\" values supplied');\n  }\n\n  const audioHtml = !(file || mime)\n    ? \"\"\n    : `\n    <audio class=\"hero__player\" controls=\"controls\"> \n      <source src=\"${encodeURI(file)}\" type=\"${mime}\"/>\n    </audio>\n  `;\n\n  const subtitleHtml = !subtitle\n    ? \"\"\n    : `\n    <span class=\"hero__subtitle\">\n      ${subtitle}\n    </span>\n  `;\n\n  const buttonsHtml =\n    buttons.length < 1\n      ? \"\"\n      : `\n    <div class=\"hero__buttons-area\">\n      ${buttons\n        .map(","metadata":{"id":920}}],["921",{"pageContent":": `\n    <span class=\"hero__subtitle\">\n      ${subtitle}\n    </span>\n  `;\n\n  const buttonsHtml =\n    buttons.length < 1\n      ? \"\"\n      : `\n    <div class=\"hero__buttons-area\">\n      ${buttons\n        .map(\n          ({ label, link = \"\", disabled }) => `\n            <${disabled ? \"span\" : \"a\"} \n              class=\"hero__button ${disabled ? \"hero__button_disabled\" : \"\"}\" \n              href=\"${encodeURI(link)}\"\n            >\n              ${label}\n            </${disabled ? \"span\" : \"a\"}>\n          `\n        )\n        .join(\"\")}\n    </div>\n  `;\n\n  return `\n    <div class=\"hero\">\n      <img \n        class=\"hero__image\" \n        src=\"${encodeURI(imageUrl)}\"\n      >\n\n      <div class=\"hero__content\">\n        ${subtitleHtml}\n        <h2 class=\"hero__title\">${title.replace(/\\# /i, \"\")}</h2>\n        ${audioHtml}\n        ${buttonsHtml}\n      </div>\n    </div>\n  `;\n};\n\nconst createCardsGridBlock = (props) => {\n  const { cards } = props;\n\n  if (!cards || cards.length < 1) {\n    throw new Error(\"No cards supplied\");\n  }\n\n  return `\n    <ul class=\"cards\">\n      ${cards\n        .map(({ title, subtitle, imageUrl, linkLabel, linkUrl }) => {\n          if (!title) {\n            throw new Error('No \"title\" value supplied');\n          }\n\n          const linkHtml = !(linkLabel || linkUrl)\n            ? \"\"\n            : `<a class=\"cards__button\" href=\"${linkUrl}\">${linkLabel}</a>`;\n\n          const subtitleHtml = !subtitle\n            ? \"\"\n            : `<span class=\"cards__subtitle\">${subtitle}</span>`;\n\n          const imageHtml = !imageUrl\n            ? \"\"\n            : `<img class=\"cards__image\" src=\"${imageUrl}\">`;\n\n          return `\n            <li class=\"cards__wrap\">\n              <section class=\"cards__item\">\n                 ${imageHtml}\n                <div class=\"cards__content\">\n                   ${subtitleHtml}\n                  <h3 class=\"cards__title\">${title}</h3>\n                  ${linkHtml}\n                </div>\n              </section>\n            </li>\n          `;\n        })\n        .join(\"\")}\n    </ul>\n  `;\n};","metadata":{"id":921}}],["922",{"pageContent":"${linkHtml}\n                </div>\n              </section>\n            </li>\n          `;\n        })\n        .join(\"\")}\n    </ul>\n  `;\n};\n\nconst createDetailsBlock = (props) => {\n  const { markdown, list = [] } = props;\n\n  if (list.length > 0) {\n    return `\n        <ul class=\"details\">\n          ${list.map((item) => `<li>${item}<li>`).join(\"\")}\n        </ul>\n    `;\n  }\n\n  return `\n      <div class=\"details\">\n        ${markdownit({ html: true }).render(markdown)}\n      </div>\n  `;\n};\n\nconst createDividerBlock = (props) => {\n  const { title, imageUrl } = props;\n\n  const imageHtml = !imageUrl\n    ? \"\"\n    : `<img class=\"divider__image\" src=\"${imageUrl}\"/>`;\n\n  return `\n    <div class=\"divider\">\n      <div class=\"diver__content\"> \n        <h2 class=\"divider__title\">${title}</h2>\n        ${imageHtml}\n      </div>\n    </div>\n  `;\n};\n```\n\n### Adding page-level functions\n\nWith all our HTML block functions in place, we can start co-configuring them into specific pages and pass all required data straight from each page's GraphQL response into the respective HTML blocks.\n\n```js\nconst createEpisodesPage = async () => {\n  const {\n    first: [latest],\n    previous,\n  } = await gqlQuery(EPISODES_PAGE_QUERY);\n\n  const dividerHtml = createDividerBlock({ title: \"Previous Episodes\" });\n\n  const heroHtml = createHeroBlock({\n    imageUrl: latest.image.url,\n    title: latest.title.replace(/\\# /i, \"\"),\n    subtitle: \"Latest Episode\",\n    file: latest.audio.url,\n    mime: latest.audio.mime,\n    buttons: [\n      {\n        link: `#/id/${latest.id}`,\n        label: \"View Episode\",\n      },\n    ],\n  });\n\n  const cardsHtml = createCardsGridBlock({\n    cards: previous.map((item) => ({\n      title: item.title.replace(/\\# /i, \"\"),\n      subtitle: convertToPrettyDate(item.date),\n      imageUrl: item.image.url,\n      linkLabel: \"View Episode\",\n      linkUrl: `#/id/${item.id}`,\n    })),\n  });\n\n  return `\n    ${heroHtml}\n    ${dividerHtml}\n    ${cardsHtml}\n  `;\n};\n\nconst createGuestsPage = async () => {\n  const { peoples } = await gqlQuery(GUESTS_PAGE_QUERY);","metadata":{"id":922}}],["923",{"pageContent":"})),\n  });\n\n  return `\n    ${heroHtml}\n    ${dividerHtml}\n    ${cardsHtml}\n  `;\n};\n\nconst createGuestsPage = async () => {\n  const { peoples } = await gqlQuery(GUESTS_PAGE_QUERY);\n\n  const heroHtml = createHeroBlock({\n    title: \"Guests\",\n    imageUrl: \"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\",\n  });\n\n  const guestHtml = peoples\n    .filter(({ episodes: { length } }) => length > 0)\n    .map(({ fullName, episodes, photo: { url: imgageUrl } }) => {\n      const dividerHtml = createDividerBlock({ title: fullName, imgageUrl });\n\n      const cardHtml = createCardsGridBlock({\n        cards: episodes.map((item) => ({\n          title: item.title.replace(/\\# /i, \"\"),\n          subtitle: convertToPrettyDate(item.date),\n          imageUrl: item.image.url,\n          linkLabel: \"View Episode\",\n          linkUrl: `#/id/${item.id}`,\n        })),\n      });\n\n      return `\n        ${dividerHtml}\n        ${cardHtml}\n      `;\n    })\n    .join(\"\");\n\n  return `\n    ${heroHtml}\n    ${guestHtml}\n  `;\n};\n\nconst createTopicsPage = async () => {\n  const { tags } = await gqlQuery(TOPICS_PAGE_QUERY);\n\n  const heroHtml = createHeroBlock({\n    title: \"Topics\",\n    imageUrl: \"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\",\n  });\n\n  const topicsHtml = tags\n    .map(({ name, episodes }) => {\n      const dividerHtml = createDividerBlock({ title: name });\n\n      const cardsHtml = createCardsGridBlock({\n        cards: episodes.map((item) => ({\n          title: item.title.replace(/\\# /i, \"\"),\n          imageUrl: item.image.url,\n          subtitle: convertToPrettyDate(item.date),\n          linkLabel: \"View Episode\",\n          linkUrl: `#/id/${item.id}`,\n        })),\n      });\n\n      return `\n        ${dividerHtml}\n        ${cardsHtml}\n      `;\n    })\n    .join(\"\");\n\n  return `\n    ${heroHtml}\n    ${topicsHtml}\n  `;\n};\n\nconst createResourcesPage = async () => {\n  const { assets } = await gqlQuery(RESOURCES_PAGE_QUERY);\n  const dividerHtml = createDividerBlock({ title: \"Files\" });\n\n  const heroHtml = createHeroBlock({\n    title: \"Resources\",","metadata":{"id":923}}],["924",{"pageContent":"const { assets } = await gqlQuery(RESOURCES_PAGE_QUERY);\n  const dividerHtml = createDividerBlock({ title: \"Files\" });\n\n  const heroHtml = createHeroBlock({\n    title: \"Resources\",\n    imageUrl: \"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\",\n  });\n\n  const cardsHtml = createCardsGridBlock({\n    cards: assets.map((item) => ({\n      title: item.fileName,\n      subtitle: item.mimeType,\n      linkLabel: \"View File\",\n      linkUrl: item.url,\n    })),\n  });\n\n  return `\n    ${heroHtml}\n    ${dividerHtml}\n    ${cardsHtml}\n  `;\n};\n\nconst createSponsorsPage = async () => {\n  const { sponsorships } = await gqlQuery(SPONSORS_PAGE_QUERY);\n\n  const heroHtml = createHeroBlock({\n    title: \"Sponsors\",\n    imageUrl: \"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\",\n  });\n\n  const sponsorsHtml = sponsorships\n    .map(({ company: { name }, episodes }) => {\n      const dividerHtml = createDividerBlock({ title: name });\n\n      const cardsHtml = createCardsGridBlock({\n        cards: episodes.map((item) => ({\n          title: item.title.replace(/\\# /i, \"\"),\n          imageUrl: item.image.url,\n          subtitle: convertToPrettyDate(item.date),\n          linkLabel: \"View Episode\",\n          linkUrl: `#/id/${item.id}`,\n        })),\n      });\n\n      return `\n          ${dividerHtml}\n          ${cardsHtml}\n      `;\n    })\n    .join(\"\");\n\n  return `\n      ${heroHtml}\n      ${sponsorsHtml}\n    `;\n};\n\nconst createSingleEpisodePage = async (value) => {\n  const {\n    episode: {\n      title,\n      date,\n      description,\n      number,\n      notes,\n      guests = [],\n      tags = [],\n      sponsors = [],\n      audio: { url, mime },\n      image: { url: imageUrl },\n    },\n  } = await gqlQuery(SINGLE_EPISODE_PAGE_QUERY, { id: value });\n\n  const { previous, next } = await gqlQuery(SINGLE_EPISODE_NEIGHBORS_QUERY, {\n    previous: number + 1,\n    next: number - 1,\n  });\n\n  const heroHtml = createHeroBlock({\n    imageUrl: imageUrl,\n    title: title.replace(/\\# /i, \"\"),\n    subtitle: convertToPrettyDate(date),\n    file: url,\n    mime: mime,","metadata":{"id":924}}],["925",{"pageContent":"next: number - 1,\n  });\n\n  const heroHtml = createHeroBlock({\n    imageUrl: imageUrl,\n    title: title.replace(/\\# /i, \"\"),\n    subtitle: convertToPrettyDate(date),\n    file: url,\n    mime: mime,\n    buttons: [previous, next].map((button, index) => ({\n      label: index === 0 ? \"◄ Previous Episode\" : \" Next Episode ►\",\n      link: !button ? \"\" : `#/id/${button.id}`,\n      disabled: !button,\n    })),\n  });\n\n  const guestHtml =\n    guests.length < 1\n      ? \"\"\n      : createCardsGridBlock({\n          cards: guests.map((item) => ({\n            title: item.fullName,\n            imageUrl: item.photo.url,\n          })),\n        });\n\n  const descriptionHtml = !description\n    ? \"\"\n    : `\n      ${createDividerBlock({ title: \"Description\" })}\n      ${createDetailsBlock({ markdown: markdownit().render(description) })}\n     `;\n\n  const topicsHtml =\n    tags.length < 1\n      ? \"\"\n      : `\n        ${createDividerBlock({ title: \"Topics\" })}\n        ${createDetailsBlock({ list: tags.map(({ name }) => name) })}\n      `;\n\n  const sponsorsHtml =\n    sponsors.length < 1\n      ? \"\"\n      : `\n        ${createDividerBlock({ title: \"Sponsors\" })}\n        ${createDetailsBlock({\n          list: sponsors.map(({ company }) => company.name),\n        })}\n      `;\n\n  const notesHtml = !description\n    ? \"\"\n    : `\n      ${createDividerBlock({ title: \"Show Notes\" })}\n      ${createDetailsBlock({ markdown: markdownit().render(notes) })}\n    `;\n\n  return `\n    ${heroHtml}\n    ${descriptionHtml}\n    ${createDividerBlock({ title: \"Guests\" })}\n    ${guestHtml}\n    ${topicsHtml}\n    ${sponsorsHtml}\n    ${notesHtml}\n    `;\n};\n```\n\n## Where Next?\n\nWe've touched on many GraphQL concepts in this tutorial. However, we've barely scratched the surface. For a deeper understanding of GraphQL, consult the [official GraphQL documentation](https://graphql.org/learn/) or follow along to the completely free [How To GraphQL Resources](https://www.howtographql.com).","metadata":{"id":925}}],["926",{"pageContent":"If you followed along, you can keep adding features to your version. If you want to start from ours, you can find it below.\n\n<iframe height=\"800px\" width=\"100%\" src=\"https://replit.com/@ritza/GraphQL-FM?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":926}}],["927",{"pageContent":"---\ntitle: Online store checkout with Stripe\n---\n\n# Build Your Online Store's Checkout Process with Stripe on Replit\n\nAre you looking for an integrated solution for your site’s checkout process, without having to resort to plugins? Here’s a step-by-step approach to integrating Stripe with [Replit](https://replit.com)!\n\nIn this tutorial, we'll create an online store (which sells bricks) and integrate it with Stripe's checkout process. Both the frontend and stripe checkout server will be hosted on [Replit](https://replit.com). In part 1, we will start our Replit Stripe server. In part 2, we will set up our repl frontend. Finally, in part 3, we will tie it all together.\n\n![Checkout process](https://docimg.replit.com/images/tutorials/20-online-checkout/checkout_functionality.gif)\n\n## Requirements\n\nTo follow along in this tutorial, you will need:\n\n- A [Replit account](https://replit.com/signup).\n- A [Stripe account](https://stripe.com/).\n\n## Part 1: Start Your Replit Stripe Server\n\nSign in to Replit and create a new repl by clicking the \"+\" button in the top right.\nChoose Node.js as your language and name it whatever makes sense to you.\n\n![Picking a repl](https://docimg.replit.com/images/tutorials/20-online-checkout/1.png)\n\nNext, pick the Express server template as a starting point. It’ll provide the framework to integrate with Stripe from a server.\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\nconst port = 3000;\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World!\");\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\nGiving it a run generates the following:\n\n![Running the repl](https://docimg.replit.com/images/tutorials/20-online-checkout/2.png)\n\nTerrific! We’re already “hosting” our server with [Replit](https://replit.com).\n\nNext, we need to install the Stripe SDK. We can do this by running:\n\n`npm install --save stripe ` in your repl shell.","metadata":{"id":927}}],["928",{"pageContent":"Terrific! We’re already “hosting” our server with [Replit](https://replit.com).\n\nNext, we need to install the Stripe SDK. We can do this by running:\n\n`npm install --save stripe ` in your repl shell.\n\nNext, log into Stripe and head on over to the [integration walkthrough](https://stripe.com/docs/checkout/integration-builder).\n\nNow copy-paste the walkthrough code into `index.js`:\n\n```javascript\nconst stripe = require(\"stripe\")(\n  \"sk_test_51IKlwdAhJUZ4ZUqHFBRpOTbbNVakSMbHbouhVH89YPszHcOftinFd6Vi5oOOaY1HZ1PDNmOfiKEEdR03vOqeaHWU00TnpDSj8N\"\n);\nconst express = require(\"express\");\nconst app = express();\napp.use(express.static(\".\"));\nconst YOUR_DOMAIN = \"http://localhost:4242\";\napp.post(\"/create-checkout-session\", async (req, res) => {\n  const session = await stripe.checkout.sessions.create({\n    payment_method_types: [\"card\"],\n    line_items: [\n      {\n        price_data: {\n          currency: \"usd\",\n          product_data: {\n            name: \"Stubborn Attachments\",\n            images: [\"https://i.imgur.com/EHyR2nP.png\"],\n          },\n          unit_amount: 2000,\n        },\n        quantity: 1,\n      },\n    ],\n    mode: \"payment\",\n    success_url: `${YOUR_DOMAIN}/success.html`,\n    cancel_url: `${YOUR_DOMAIN}/cancel.html`,\n  });\n  res.json({ id: session.id });\n});\napp.listen(4242, () => console.log(\"Running on port 4242\"));\n```\n\n### A brief explanation:\n\nThis is the shell of the endpoint we'll be sending a `POST` request to, from the frontend:\n\n```javascript\napp.post(\"/create-checkout-session\", async (req, res) => {\n  //.......\n});\n```\n\nInside this request, we'll create the Checkout Session with Stripe, and return the Session id, which the frontend will use to redirect to Stripe's checkout page:\n\n```javascript\nconst session = await stripe.checkout.sessions.create({\n  //......\n});\nres.json({ id: session.id });\n```\n\nWe'll go over the contents of this request in **Part 3** of this tutorial.\n\nYou may have noticed that the integration builder has hardcoded our API key. This isn’t great.","metadata":{"id":928}}],["929",{"pageContent":"res.json({ id: session.id });\n```\n\nWe'll go over the contents of this request in **Part 3** of this tutorial.\n\nYou may have noticed that the integration builder has hardcoded our API key. This isn’t great.\n\nLuckily, Replit supports environment variables, and these are stored under secrets on the repl. [Check out the Replit .env tutorial here](/programming-ide/workspace-features/secrets).\n\nTo create an environment variable for the API key, click on the lock icon on the left side panel of the repl. Set the key as `STRIPE_KEY` and enter the value for your Stripe key. It will be something like:\n\n```bash\nsk_test_51IKlwdAhJUZ4ZUqHFBRpOTbbNVakSMbHbouhVH89YPszHcOftinFd6Vi5oOOaY1HZ1PDNmOfiKEEdR03vOqeaHWU00TnpDSj8N\n```\n\n![Our .env](https://docimg.replit.com/images/tutorials/20-online-checkout/5.png)\n\nWe can then reference the environment variable in code using `process.env.STRIPE_KEY`. Change this line:\n\n```javascript\nconst stripe = require(\"stripe\")(\n  \"sk_test_51IKlwdAhJUZ4ZUqHFBRpOTbbNVakSMbHbouhVH89YPszHcOftinFd6Vi5oOOaY1HZ1PDNmOfiKEEdR03vOqeaHWU00TnpDSj8N\"\n);\n```\n\nto:\n\n```javascript\nconst stripe = require(\"stripe\")(process.env.STRIPE_KEY);\n```\n\nBefore we continue, there are a couple of extra config elements we'll need to enable to make sure our frontend and server-side can communicate. These are:\n\n**1**. Adding body parsing\n\nThis will allow us to pass the request body from the frontend to the server-side. Just add the following lines after `const app = express();`\n\n```javascript\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n```\n\n**2**. Enabling CORS\n\nThis will allow us to accept body content on the server-side. We need to add the CORS dependency. Import the package by typing the following in the repl shell:\n\n```bash\nnpm install --save cors\n```\n\nNow import `cors` at the top of `index.js`:\n\n```javascript\nconst cors = require(\"cors\");\n```\n\nNext, add the following line after the two lines we added in step **1**.\n\n```javascript\napp.use(cors());\n```\n\nThe full code now looks like this:\n\n```javascript","metadata":{"id":929}}],["930",{"pageContent":"```javascript\nconst cors = require(\"cors\");\n```\n\nNext, add the following line after the two lines we added in step **1**.\n\n```javascript\napp.use(cors());\n```\n\nThe full code now looks like this:\n\n```javascript\nconst stripe = require(\"stripe\")(process.env.STRIPE_KEY);\nconst express = require(\"express\");\nconst cors = require(\"cors\");\n\nconst app = express();\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(cors());\n\nconst YOUR_DOMAIN = \"http://localhost:4242\";\napp.post(\"/create-checkout-session\", async (req, res) => {\n  const session = await stripe.checkout.sessions.create({\n    payment_method_types: [\"card\"],\n    line_items: [\n      {\n        price_data: {\n          currency: \"usd\",\n          product_data: {\n            name: \"Stubborn Attachments\",\n            images: [\"https://i.imgur.com/EHyR2nP.png\"],\n          },\n          unit_amount: 2000,\n        },\n        quantity: 1,\n      },\n    ],\n    mode: \"payment\",\n    success_url: `${YOUR_DOMAIN}/success.html`,\n    cancel_url: `${YOUR_DOMAIN}/cancel.html`,\n  });\n  res.json({ id: session.id });\n});\napp.listen(4242, () => console.log(\"Running on port 4242\"));\n```\n\nYou’ll notice the Stripe code requires a `YOUR_DOMAIN` variable, that’s currently set to https://localhost:4242. In order to link this up with our site, we need to create one. Continue to **Part 2** – Buying bricks with a repl frontend!\n\n## Part 2: Buying Bricks With a Repl Frontend\n\nIn this section, we will make a site that’ll act as the online store where we can buy our bricks. We will connect the site to our Stripe integration we created in **Part 1**.\n\nTo do this, we’ll start off with a new repl, using the “HTML,CSS, JS” option and call it \"BrickSite\".\n\n![Creating a new repl](https://docimg.replit.com/images/tutorials/20-online-checkout/new-frontend.png)","metadata":{"id":930}}],["931",{"pageContent":"![Creating a new repl](https://docimg.replit.com/images/tutorials/20-online-checkout/new-frontend.png)\n\nWe’ll create a one-page application with minimal functionality: a static list of bricks that a user can buy. Each brick has a price, a name, a description and an image. A \"Buy this brick\" button will allow the user to purchase a brick.\n\n### 1. Making BrickSite\n\nOur first step is to add the Bulma styling library. It’s a great way to style BrickSite with little effort. We’ll include the CDN by replacing the default `rel=”stylesheet”` with the Bulma CDN.\n\n_Nifty-tip!_ Searching “bulma” in the packages tab in our Replit IDE means we can insert it automatically. See here:\n\n![Auto adding Bulma](https://docimg.replit.com/images/tutorials/20-online-checkout/adding_bulma.gif)\n\nThis inserts the following into our `index.html`:\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\"></script>\n```\n\nChange this to the code below and paste it in the `<head>` tag:\n\n```html\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\"\n/>\n```\n\nNow, we want to create a list of bricks a user can buy. Each brick has its own name, description, predefined styles, price and image. We paste this in our `script.js`:\n\n```javascript\nconst BRICKS = [\n  {\n    name: \"Brickson Brick\",\n    desc: \"this is a plain brick\",\n    style: \"is-info\",\n    cost: 1,\n    images: [\n      \"https://www.kulucrete.co.za/website/wp-content/uploads/2016/11/smooth-brick.jpg\",\n    ],\n  },\n  {\n    name: \"Bricketty Brick\",\n    desc: \"this is a cooler brick\",\n    style: \"is-warning\",\n    cost: 5,\n    images: [\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJc_W56qiCUiHHECVkar1jKQSrTniYAaqL_g&usqp=CAU\",\n    ],\n  },\n  {\n    name: \"MyBrickerty McBrickson\",\n    desc: \"this is the best brick\",\n    style: \"is-success\",\n    cost: 100,\n    images: [\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6LWKwpEFAfNXgPT6Ot5xdjHbqoKYa6ktG0g&usqp=CAU\",\n    ],\n  },\n];\n```","metadata":{"id":931}}],["932",{"pageContent":"style: \"is-success\",\n    cost: 100,\n    images: [\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6LWKwpEFAfNXgPT6Ot5xdjHbqoKYa6ktG0g&usqp=CAU\",\n    ],\n  },\n];\n```\n\nIn order to display these bricks, we want to add some basic HTML that we can dynamically add content to on render. We define the following `<body>` after the closing `</head>` tag and within the `<html>` tags of our `index.html`:\n\n```html\n<body>\n  <div class=\"section\">\n    <div class=\"container\">\n      <div class=\"title\">My Site to Buy Bricks</div>\n      <div id=\"bricks\" class=\"tile is-ancestor\"></div>\n    </div>\n  </div>\n  <script src=\"script.js\"></script>\n</body>\n```\n\nWe'll be dynamically adding our array of bricks to the `id=bricks` div tag.\n\nThe full code for `index.html` is:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>BrickSite</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\"\n    />\n  </head>\n  <body>\n    <div class=\"section\">\n      <div class=\"container\">\n        <div class=\"title\">My Site to Buy Bricks</div>\n        <div id=\"bricks\" class=\"tile is-ancestor\"></div>\n      </div>\n    </div>\n    <script src=\"script.js\"></script>\n  </body>\n</html>\n```\n\nNow, going back to our `script.js`, we want to add dynamic vanilla JS elements to the content on the page. For every brick in the `BRICKS` array, we'll create a div element, add its own name, styling, content and button, and then add it to the DOM.\n\nWe add the following content in order:\n\nFor each brick in our predefined list:\n\n```javascript\nfor (var i = 0; i < BRICKS.length; i++) {\n\n```\n\nAdd a new `div` to the DOM and give it some styling (predefined by Bulma, so we don't need to do the css ourselves):\n\n```javascript\nlet newBrick = document.createElement(\"div\");\nnewBrick.className = \"tile is-parent\";\n```","metadata":{"id":932}}],["933",{"pageContent":"```javascript\nlet newBrick = document.createElement(\"div\");\nnewBrick.className = \"tile is-parent\";\n```\n\nAdd an `article` element on the document and give it some styling. Each brick has its own style defined in the `BRICKS` array, so use this in the class definitions:\n\n```javascript\nlet newBrickArticle = document.createElement(\"article\");\nnewBrickArticle.className = \"tile is-child notification \" + BRICKS[i].style;\n```\n\nCreate a new `p` element on the document, give it title styling and make the text (`innerHTML`) the name of the brick:\n\n```javascript\nlet newBrickTitle = document.createElement(\"p\");\nnewBrickTitle.className = \"title\";\nnewBrickTitle.innerHTML = BRICKS[i].name;\n```\n\nDo the same with the brick's description:\n\n```javascript\nlet newBrickDesc = document.createElement(\"p\");\nnewBrickDesc.className = \"subtitle\";\nnewBrickDesc.innerHTML = BRICKS[i].desc;\n```\n\nAnd show the brick's price by adding a new `div` with the price in a little description:\n\n```javascript\nlet newBrickCost = document.createElement(\"div\");\nnewBrickCost.className = \"box\";\nnewBrickCost.innerHTML = \"This brick costs: $\" + BRICKS[i].cost;\n```\n\nLastly, add the `a` element for purchasing the brick with some styling and text. Also, give it an id that's the number of the brick, so we know what content to pass to the method when the button is clicked. We'll create the `onclick` method and functionality for this a little later:\n\n```javascript\nlet newBrickButton = document.createElement(\"a\");\nnewBrickButton.id = i;\nnewBrickButton.className = \"button is-dark\";\nnewBrickButton.innerHTML = \"Buy this brick\";\n```\n\nNow add the new title, description, cost and button elements to the `article` element:\n\n```javascript\nnewBrickArticle.appendChild(newBrickTitle);\nnewBrickArticle.appendChild(newBrickDesc);\nnewBrickArticle.appendChild(newBrickCost);\nnewBrickArticle.appendChild(newBrickButton);\n```\n\nAnd, finally, add the `article` to the parent brick `div` and append it as a child to the `div` we defined as `id=\"bricks\"` in our `index.html`; and close the for loop:","metadata":{"id":933}}],["934",{"pageContent":"```\n\nAnd, finally, add the `article` to the parent brick `div` and append it as a child to the `div` we defined as `id=\"bricks\"` in our `index.html`; and close the for loop:\n\n```javascript\n newBrick.appendChild(newBrickArticle);\n document.getElementById(\"bricks\").appendChild(newBrick);\n}\n```\n\nAltogether, our `script.js` now looks like:\n\n```javascript\nconst BRICKS = [\n  {\n    name: \"Brickson Brick\",\n    desc: \"this is a plain brick\",\n    style: \"is-info\",\n    cost: 1,\n    images: [\n      \"https://www.kulucrete.co.za/website/wp-content/uploads/2016/11/smooth-brick.jpg\",\n    ],\n  },\n  {\n    name: \"Bricketty Brick\",\n    desc: \"this is a cooler brick\",\n    style: \"is-warning\",\n    cost: 5,\n    images: [\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJc_W56qiCUiHHECVkar1jKQSrTniYAaqL_g&usqp=CAU\",\n    ],\n  },\n  {\n    name: \"MyBrickerty McBrickson\",\n    desc: \"this is the best brick\",\n    style: \"is-success\",\n    cost: 100,\n    images: [\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6LWKwpEFAfNXgPT6Ot5xdjHbqoKYa6ktG0g&usqp=CAU\",\n    ],\n  },\n];\n\nfor (var i = 0; i < BRICKS.length; i++) {\n  let newBrick = document.createElement(\"div\");\n  newBrick.className = \"tile is-parent\";\n\n  let newBrickArticle = document.createElement(\"article\");\n  newBrickArticle.className = \"tile is-child notification \" + BRICKS[i].style;\n\n  let newBrickTitle = document.createElement(\"p\");\n  newBrickTitle.className = \"title\";\n  newBrickTitle.innerHTML = BRICKS[i].name;\n\n  let newBrickDesc = document.createElement(\"p\");\n  newBrickDesc.className = \"subtitle\";\n  newBrickDesc.innerHTML = BRICKS[i].desc;\n\n  let newBrickCost = document.createElement(\"div\");\n  newBrickCost.className = \"box\";\n  newBrickCost.innerHTML = \"This brick costs: $\" + BRICKS[i].cost;\n\n  let newBrickButton = document.createElement(\"a\");\n  newBrickButton.id = i;\n  newBrickButton.className = \"button is-dark\";\n  newBrickButton.innerHTML = \"Buy this brick\";\n\n  newBrickArticle.appendChild(newBrickTitle);\n  newBrickArticle.appendChild(newBrickDesc);","metadata":{"id":934}}],["935",{"pageContent":"newBrickButton.className = \"button is-dark\";\n  newBrickButton.innerHTML = \"Buy this brick\";\n\n  newBrickArticle.appendChild(newBrickTitle);\n  newBrickArticle.appendChild(newBrickDesc);\n  newBrickArticle.appendChild(newBrickCost);\n  newBrickArticle.appendChild(newBrickButton);\n\n  newBrick.appendChild(newBrickArticle);\n  document.getElementById(\"bricks\").appendChild(newBrick);\n}\n```\n\nReferring back to the server's endpoint code that we got from the Stripe walkthrough, you will notice it requires both a `success.html` and a `cancel.html`. Let’s make new files for these in the root of our repl.\n\nPlace the code below in the `success.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n <head>\n   <meta charset=\"utf-8\">\n   <meta name=\"viewport\" content=\"width=device-width\">\n   <title>MySite - Success</title>\n   <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\" />\n </head>\n <body>\n   <div class=\"section\">\n     <div class =\"container\">\n       <article class=\"message is-large is-success\">\n         <div class=\"message-header\">\n           <p>Congratulations!</p>\n         </div>\n         <div class=\"message-body\">\n           You have purchased a brick. We hope you build great big things with your brick and come back to buy more bricks from us. May the bricks be ever in your favour and the bricklaying be bountiful and swift.\n         </div>\n       </article>\n   <script src=\"script.js\"></script>\n </body>\n</html>\n```\n\nWe can test this page by adding the file name as the button's href inside the `script.js`:\n\n```javascript\nnewBrickButton.href = \"success.html\";\n```\n\nHere’s how the success page will look - `success.html`:\n\n![Success page](https://docimg.replit.com/images/tutorials/20-online-checkout/9.png)\n\nPlace the code below in the `cancel.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n <head>\n   <meta charset=\"utf-8\">\n   <meta name=\"viewport\" content=\"width=device-width\">\n   <title>MySite- Cancel</title>","metadata":{"id":935}}],["936",{"pageContent":"Place the code below in the `cancel.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n <head>\n   <meta charset=\"utf-8\">\n   <meta name=\"viewport\" content=\"width=device-width\">\n   <title>MySite- Cancel</title>\n   <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\" />\n </head>\n <body>\n   <div class=\"section\">\n     <div class =\"container\">\n       <article class=\"message is-large is-danger\">\n         <div class=\"message-header\">\n           <p>Failed!</p>\n         </div>\n         <div class=\"message-body\">\n           You have failed to purchase a brick. Please come back and try again when you are ready to purchase a brick.\n         </div>\n       </article>\n   <script src=\"script.js\"></script>\n </body>\n</html>\n```\n\nWe can test this page by adding the file name as the button's href inside the `script.js`:\n\n```javascript\nnewBrickButton.href = \"cancel.html\";\n```\n\nAnd here’s how the cancel page will look:\n\n![Failure page](https://docimg.replit.com/images/tutorials/20-online-checkout/10.png)\n\nAlright, now that we have the groundwork on the frontend, this brings us to **Part 3** – connecting the parts!\n\n## Part 3: Connecting the Parts\n\nGoing back to our server repl, we’ll notice the `YOUR_DOMAIN` constant. Set that with the value of your repl “frontend” URL.\n\ne.g. My frontend URL is: `https://bricksite-stripe-checkout.ritza.repl.co` as you can see below:\n\n![URL](https://docimg.replit.com/images/tutorials/20-online-checkout/11.png)\n\nReplace `YOUR_DOMAIN` with the frontend URL:\n\n```javascript\nconst YOUR_DOMAIN = \"https://bricksite-stripe-checkout.ritza.repl.co\";\n```\n\nNow, within the `create-checkout-session` post request, we need to do a couple of things. The first is to define the payment methods available:\n\n```javascript\n   payment_method_types: ['card'],\n```\n\nNext is to define the `line_items`. We want to add our own content here that would get passed from the frontend Replit, so we define the product inventory information based on what is sent through to the frontend:\n\n```javascript","metadata":{"id":936}}],["937",{"pageContent":"```javascript\n  line_items: [\n    {\n      name: req.body.name,\n      images: req.body.images,\n      description: req.body.desc,\n      amount: req.body.price,\n      currency: 'usd',\n      quantity: 1,\n    },\n  ],\n```\n\nNext, we need to define the mode. There are three options supported by Stripe: `payment`, `subscription` or `setup`. One-time purchases use the `payment` mode.\n\n```javascript\nmode: \"payment\";\n```\n\nLastly, we need to define the success and cancel pages; the same pages we created earlier on the frontend.\n\n```javascript\n  success_url: `${YOUR_DOMAIN}/success.html`,\n  cancel_url: `${YOUR_DOMAIN}/cancel.html`,\n```\n\nAltogether, the `index.js` of the server-side repl now looks as follows (I've also added a `console.log` line inside our request so that we can confirm the incoming request body):\n\n```javascript\nconst express = require(\"express\");\nconst stripe = require(\"stripe\")(process.env.STRIPE_KEY);\nvar cors = require(\"cors\");\n\nconst app = express();\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\napp.use(cors());\n\nconst YOUR_DOMAIN = \"https://bricksite-stripe-checkout.ritza.repl.co\";\n\napp.post(\"/create-checkout-session\", async (req, res) => {\n  console.log(\"REQUEST\", req.body);\n\n  const session = await stripe.checkout.sessions.create({\n    payment_method_types: [\"card\"],\n    line_items: [\n      {\n        name: req.body.name,\n        images: req.body.images,\n        description: req.body.desc,\n        amount: req.body.price,\n        currency: \"usd\",\n        quantity: 1,\n      },\n    ],\n    mode: \"payment\",\n    success_url: `${YOUR_DOMAIN}/success.html`,\n    cancel_url: `${YOUR_DOMAIN}/cancel.html`,\n  });\n  res.json({ id: session.id });\n});\n\napp.listen(4242, () => console.log(\"Running on port 4242\"));\n```\n\n### Back to BrickSite\n\nFirst, we need to add Stripe as a CDN dependency to our site. To do this, paste the following code between the `<head> ... </head>` tags of your `index.js`.\n\n```html\n<script src=\"https://js.stripe.com/v3/\"></script>\n```","metadata":{"id":937}}],["938",{"pageContent":"```html\n<script src=\"https://js.stripe.com/v3/\"></script>\n```\n\nNow, going back to `script.js`, we want to define a new instance of Stripe with your publishable API key (you will find this in the Load Stripe.js section of the [Integration Builder walkthrough](https://stripe.com/docs/checkout/integration-builder)):\n\n```javascript\nvar stripe = Stripe(YOUR_API_KEY);\n```\n\nNext, we want to create `onclick` event listeners to our button definitions so that we can initiate the purchase when the button is clicked.\n\nUnderneath the button definitions in `script.js`, add the following:\n\n```javascript\nnewBrickButton.onclick = buttonClick;\n```\n\nNow, at the bottom of the page, we want to define the function `buttonClick` as the function that will execute when the button is clicked.\n\n```javascript\nasync function buttonClick(event) {}\n```\n\nInside `buttonClick`, we paste in the prebuilt checkout page’s HTML script content from the \"Fetch a Checkout Session\" section of the [Integration builder walkthrough](https://stripe.com/docs/checkout/integration-builder):\n\n```javascript\nasync function buttonClick(event) {\n  fetch(\"/create-checkout-session\", {\n    method: \"POST\",\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (session) {\n      return stripe.redirectToCheckout({ sessionId: session.id });\n    })\n    .then(function (result) {\n      // If redirectToCheckout fails due to a browser or network\n      // error, you should display the localized error message to your\n      // customer using error.message.\n      if (result.error) {\n        alert(result.error.message);\n      }\n    })\n    .catch(function (error) {\n      console.error(\"Error:\", error);\n    });\n}\n```\n\nThis way, each button will trigger a call to our server endpoint `/create-checkout-session` when clicked.\n\nWe need to add a couple more things to allow fetch to function:\n\nAt the very top of the `buttonClick` method, add the following to enable registering the window event of 'clicking':\n\n```javascript\nevent = event || window.event;","metadata":{"id":938}}],["939",{"pageContent":"At the very top of the `buttonClick` method, add the following to enable registering the window event of 'clicking':\n\n```javascript\nevent = event || window.event;\nvar target = event.target || event.srcElement;\n```\n\nNext we want to reference the brick that we clicked on. Each brick has an `id` that we can reference it by, that corresponds with its index in the `BRICKS` array. We get and parse the id as follows:\n\n```javascript\nvar id = target.id;\nlet i = parseInt(id);\n```\n\nAt the moment, the code is dispatching a POST request to `/create-checkout-session`, which isn't exactly right. We want it to be to `SERVER_URL/create-checkout-session`. Let's create a constant that's the URL and change the request destination as follows:\n\n```javascript\nconst API_URL = \"https://stripe-checkout-server.ritza.repl.co\";\n\nreturn fetch(API_URL + \"/create-checkout-session\", {\n  ...\n```\n\nInside the `fetch` request declaration and underneath `method: \"POST\"`, we want to add the following to enable CORS and allow json content to be sent:\n\n```javascript\nmode: 'cors',\nheaders: {\n  'Content-Type': 'application/json'\n},\n```\n\nUnderneath this, we now want to send our body content. This will allow us to send the brick details to Stripe on the server-side, so that it can display it on the checkout page:\n\n```javascript\nbody: JSON.stringify({\n  name: BRICKS[i].name,\n  images: BRICKS[i].images,\n  desc: BRICKS[i].desc,\n  price: BRICKS[i].cost * 100,\n});\n```\n\n(We need to multiply the price by 100 because Stripe uses cents definition for pricing, so `price: 100` equals $1.)\n\nAltogether, the content of `script.js` now looks like:\n\n```javascript\nconst BRICKS = [\n  {\n    name: \"Brickson Brick\",\n    desc: \"this is a plain brick\",\n    style: \"is-info\",\n    cost: 1,\n    images: [\n      \"https://www.kulucrete.co.za/website/wp-content/uploads/2016/11/smooth-brick.jpg\",\n    ],\n  },\n  {\n    name: \"Bricketty Brick\",\n    desc: \"this is a cooler brick\",\n    style: \"is-warning\",\n    cost: 5,\n    images: [","metadata":{"id":939}}],["940",{"pageContent":"],\n  },\n  {\n    name: \"Bricketty Brick\",\n    desc: \"this is a cooler brick\",\n    style: \"is-warning\",\n    cost: 5,\n    images: [\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJc_W56qiCUiHHECVkar1jKQSrTniYAaqL_g&usqp=CAU\",\n    ],\n  },\n  {\n    name: \"MyBrickerty McBrickson\",\n    desc: \"this is the best brick\",\n    style: \"is-success\",\n    cost: 100,\n    images: [\n      \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6LWKwpEFAfNXgPT6Ot5xdjHbqoKYa6ktG0g&usqp=CAU\",\n    ],\n  },\n];\n\nvar stripe = Stripe(\n  \"pk_test_51IKlwdAhJUZ4ZUqHO9ukmofCvmpp4ttlqsSpupeTYwiDJTYOVnh2n0xNYhYzP9Tkw3ddNXGe5LZliOGu3f8sxX6N001zb0122M\"\n);\n\nfor (var i = 0; i < BRICKS.length; i++) {\n  let newBrick = document.createElement(\"div\");\n  newBrick.className = \"tile is-parent\";\n\n  let newBrickArticle = document.createElement(\"article\");\n  newBrickArticle.className = \"tile is-child notification \" + BRICKS[i].style;\n\n  let newBrickTitle = document.createElement(\"p\");\n  newBrickTitle.className = \"title\";\n  newBrickTitle.innerHTML = BRICKS[i].name;\n\n  let newBrickDesc = document.createElement(\"p\");\n  newBrickDesc.className = \"subtitle\";\n  newBrickDesc.innerHTML = BRICKS[i].desc;\n\n  let newBrickCost = document.createElement(\"div\");\n  newBrickCost.className = \"box\";\n  newBrickCost.innerHTML = \"This brick costs: $\" + BRICKS[i].cost;\n\n  let newBrickButton = document.createElement(\"a\");\n  newBrickButton.id = i;\n  newBrickButton.className = \"button is-dark\";\n  newBrickButton.innerHTML = \"Buy this brick\";\n  newBrickButton.onclick = buttonClick;\n\n  newBrickArticle.appendChild(newBrickTitle);\n  newBrickArticle.appendChild(newBrickDesc);\n  newBrickArticle.appendChild(newBrickCost);\n  newBrickArticle.appendChild(newBrickButton);\n\n  newBrick.appendChild(newBrickArticle);\n  document.getElementById(\"bricks\").appendChild(newBrick);\n}\n\nasync function buttonClick(event) {\n  event = event || window.event;\n  var target = event.target || event.srcElement;\n\n  var id = target.id;\n  let i = parseInt(id);","metadata":{"id":940}}],["941",{"pageContent":"}\n\nasync function buttonClick(event) {\n  event = event || window.event;\n  var target = event.target || event.srcElement;\n\n  var id = target.id;\n  let i = parseInt(id);\n\n  const API_URL = \"https://stripe-checkout-server.ritza.repl.co\";\n\n  return fetch(API_URL + \"/create-checkout-session\", {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      name: BRICKS[i].name,\n      images: BRICKS[i].images,\n      desc: BRICKS[i].desc,\n      price: BRICKS[i].cost * 100,\n    }),\n  })\n    .then(function (response) {\n      return response.json();\n    })\n    .then(function (session) {\n      return stripe.redirectToCheckout({ sessionId: session.id });\n    })\n    .then(function (result) {\n      // If redirectToCheckout fails due to a browser or network\n      // error, you should display the localized error message to your\n      // customer using error.message.\n      if (result.error) {\n        alert(result.error.message);\n      }\n    })\n    .catch(function (error) {\n      console.error(\"Error:\", error);\n    });\n}\n```\n\n## Let's Get Testing!\n\nTo test, make sure the server-side is running. You can confirm this by making sure you see the \"Stop\" button at the top:\n\n![New tab icon](https://docimg.replit.com/images/tutorials/20-online-checkout/18.png)\n\nNow go back to the frontend, and press \"Run\" there too. Unlike the server-side, it won't continue to say \"Stop\", but it is running. Now we are ready to attempt to buy a brick by clicking on a brick's \"Buy this brick\" button.\n\n### Debugging\n\nOn running the request, you may get the error:\n\n```bash\nUnhandledPromiseRejectionWarning: Error: In order to use Checkout, you must set an account or business name at https://dashboard.stripe.com/account.\n```\n\nTo fix this, follow the link and add a company name on your Stripe dashboard.","metadata":{"id":941}}],["942",{"pageContent":"```\n\nTo fix this, follow the link and add a company name on your Stripe dashboard.\n\nYou may also get the error, \"Does not have permission to redirect\" after clicking on \"Buy this brick\" using the Replit browser preview mode. In order to avoid this, open the frontend in a new tab by clicking on the \"Open in new tab\" icon:\n\n![New tab icon](https://docimg.replit.com/images/tutorials/20-online-checkout/14.png)\n\n### Buying a Brick\n\nClicking on \"Buy this brick\" on any of the bricks redirects to the Stripe session checkout page thanks to our server-side creating the session and sending the session id back to the frontend. I've chosen to buy a Bricketty Brick:\n\n![Checkout page](https://docimg.replit.com/images/tutorials/20-online-checkout/16.png)\n\nNow test the purchase process by entering the Stripe test payment card details:\n\n```\nCard number: 4242 4242 4242 4242\n```\n\nEmail address, expiry date, CVV and name on card can be anything. Pressing \"Pay $5.00\" should redirect to our `success.html` page:\n\n![Success](https://docimg.replit.com/images/tutorials/20-online-checkout/17.png)\n\nWe've successfully made a purchase with Stripe!\n\n## Stripe Server\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/stripe-checkout-server?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## BrickSite\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/bricksite-stripe-checkout?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":942}}],["943",{"pageContent":"---\ntitle: Predictive text engine\n---\n\n# Building a Predictive Text Engine with Node.js\n\nHave you ever wondered how your phone knows what to suggest in the autocomplete box when you are texting? Or how Gmail suggests phrases to you in the middle of typing an email? Predictive text can be a helpful tool for typing quickly.\n\nIn this tutorial, we'll make a predictive text engine that learns by example. Newer text prediction engines, like [GPT3](https://en.wikipedia.org/wiki/GPT-3), use neural networks, but we'll use more standard coding for this project.\n\n![Example sentence construction](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/test_run.gif)\n\n## Overview and Requirements\n\nWe'll use the [Replit](https://replit.com/) web IDE for developing and running our text engine.\n\nLet's think about the requirements, and come up with some potential solutions. For autocomplete, we normally type in a few words, and then the computer or phone suggests the next few words we are likely to use. The question is basically: _Given an initial phrase, what are some likely next words?_\n\nLet's try to create a solution from that problem statement. What if we make a list of initial phrases, mapped to a list of likely next words? Then, if we type in a phrase, we can look it up in our list and pick out a word that is likely to follow. If we represented it in a JavaScript object, it could have a structure that looks something like this:\n\n```\n{\n\t\"intial phrase 1\": [\"list\", \"of\", \"possible\", \"next\", \"words\"],\n\t\"intial phrase 2\": [\"next\", \"likely\", \"words\"],\n\t.\n\t.\n\t.\n}\n```\n\nNow, let's take that concept and see what it would look like with some real initial phrases, and the likely words that follow:\n\n```\n{\n    \"once upon a\" : [\"time\", \"star\", \"hill\", \"twice\"],\n    \"the fact that\" : [\"you\", \"I\",\"they\", \"he\", \"she\", \"it\", \"people\"],\n    .\n    .\n    .\n}\n\n```","metadata":{"id":943}}],["944",{"pageContent":"```\n{\n    \"once upon a\" : [\"time\", \"star\", \"hill\", \"twice\"],\n    \"the fact that\" : [\"you\", \"I\",\"they\", \"he\", \"she\", \"it\", \"people\"],\n    .\n    .\n    .\n}\n\n```\n\nThis looks good, but each likely word is not equally likely to occur after the initial phrase. For example, we could imagine the initial phrase _\"once upon a\"_ is more likely to have _\"time\"_ as the following word than the other possibilities.\n\nWe can account for this by adding a probability, or _weight_ for each of the likely words. Instead of an array for our likely words, we can have another object containing the word and its weight. That could look something like:\n\n```\n{\n    \"once upon a\" : {\"time\": 90, \"star\": 5 , \"hill\": 4, \"twice\": 1},\n    \"the fact that\" : {\"you\": 20, \"I\": 20, \"they\": 5, \"he\":10 , \"she\": 10, \"it\": 15, \"people\":20}\n}\n\n```\n\nNow when we look for a possible next word for a given phrase, we can choose the one with a larger weight more often, so it is closer to the word distribution in real language.\n\nThis looks like it could work! Next, we need to figure out how to populate this data structure from some example text. Using example text, we can \"train\" our engine.\n\nHere are the main tasks we'll need to figure out and code:\n\n- Get training text, read it in, and split it into initial phrases, and the words that can come next.\n- Populate our data structure with this data.\n- Make a function that uses the populated data structure, along with an initial phrase, to generate possible choices for the next word.\n\n## Creating a New Project\n\n1. Head over to [Replit](https://replit.com/) and log in. If you don't have an account already, [create one now](https://replit.com/signup).\n2. Create a new repl and choose **Node.js** as your language.\n3. Give this repl a name, like \"text-autocomplete\".\n\n![create new node.js repl with name text-autocomplete](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/new-repl.png)\n\nYou should see a new `index.js` file, where we can start adding our code.\n\n## Finding Training Text","metadata":{"id":944}}],["945",{"pageContent":"You should see a new `index.js` file, where we can start adding our code.\n\n## Finding Training Text\n\nTo train our engine on what words to predict after an initial phrase, we need to first find some training text. Normally, your phone or Gmail would use your previous texts or emails as its training text. We're going to try something a little different, and see if our text engine can learn from reading books. Free books are easily available online at places like [Project Gutenberg](http://www.gutenberg.org). Head to the site and download three or four books in plain text (marked Plain Text UTF-8). A good place to start is on the [Top Downloaded Page](http://www.gutenberg.org/browse/scores/top).\n\nWe should now have a fair amount of text for our engine to learn from. Our autocomplete will choose words in the style of the books used, rather than in our own natural style like Gmail would, but this could be quite interesting. You can get your texts written the way your favorite author would write them!\n\nFor this example tutorial, we'll be using [The War of the Worlds by H.G Wells](http://www.gutenberg.org/ebooks/36), [Great Expectations by Charles Dickens](http://www.gutenberg.org/ebooks/1400), and the [Autobiography of Benjamin Franklin](http://www.gutenberg.org/ebooks/20203).\n\nWe've downloaded the _plain text_ version of these books, but there is a lot of extra text like table of contents, references, and usage licences that won't be useful for our purposes. Delete these parts from the downloaded books, keeping as many full sentences as possible.\n\nWhen you're done, copy the text files to your repl by dragging and dropping them onto the file list panel:\n\n![add books to project](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/drag-books-repl.gif)\n\nGreat, now we have something for our engine to learn from.\n\n## Reading in the Books","metadata":{"id":945}}],["946",{"pageContent":"![add books to project](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/drag-books-repl.gif)\n\nGreat, now we have something for our engine to learn from.\n\n## Reading in the Books\n\nWe need to add a reference to the filesystem library to access the books. In the `index.js` file in your new repl, add a reference to `fs`, which is Node's built-in filesystem module.\n\n```javascript\nconst fs = require(\"fs\");\n```\n\nNow, let's create a function that will take a list of files to read in, and return each individual word in an array, so we can more easily access and manipulate them. Add the new function, with a parameter for a list of files to read, and the code to read each file into a string variable:\n\n```javascript\nfunction readFilesIntoWordArray(filenames) {\n  let data = \"\";\n  filenames.forEach((file) => {\n    data = data + \" \" + fs.readFileSync(file, \"utf8\");\n  });\n}\n```\n\nNow we've got all the book data into a single string. We need to split this up into separate words, or _[tokens](https://nlp.stanford.edu/IR-book/html/htmledition/tokenization-1.html)_. We'll consider punctuation as separate tokens as well. We'll need to clean up the data a little before we can do this; this includes removing new lines between sentences (as they have no real semantic meaning for this purpose), and separating out the punctuation from the words.\n\nTo do this, let's expand our function with the following code:\n\n```javascript\n// remove newlines\ndata = data.replace(/\\r?\\n|\\r/g, \" \");\n\n// Put spaces around each special character / punctuation,\n// so that when we split on spaces, they come out as their own tokens,\n// disconected from surrounding words\nconst replacements = [\n  \",\",\n  \".\",\n  \":\",\n  \"!\",\n  \"?\",\n  '\"',\n  \"“\",\n  \"”\",\n  \";\",\n  \"(\",\n  \")\",\n  \"-\",\n  \"_\",\n];\nreplacements.forEach((value) => {\n  data = data.replace(RegExp(\"\\\\\" + value, \"g\"), \" \" + value + \" \");\n});\n```","metadata":{"id":946}}],["947",{"pageContent":"\",\",\n  \".\",\n  \":\",\n  \"!\",\n  \"?\",\n  '\"',\n  \"“\",\n  \"”\",\n  \";\",\n  \"(\",\n  \")\",\n  \"-\",\n  \"_\",\n];\nreplacements.forEach((value) => {\n  data = data.replace(RegExp(\"\\\\\" + value, \"g\"), \" \" + value + \" \");\n});\n```\n\nThe line `data = data.replace(/\\r?\\n|\\r/g, \" \");` uses a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) to look for the newline markers [`\\r\\n` (on windows) and `\\n`](https://devhints.io/regexp) on Unix, Linux and macOS.\n\nThe next few lines define all the punctuation we expect in our sources. Then, it searches the books for each punctuation mark, and replaces it with a leading space. For example, a question mark at the end of a sentence _\"Is this working?\"_ would be modified to _\"Is this working ? \"_.\n\nWith our punctuation neatly separated from each word, we must now look for the spaces between things to split our text into tokens. Let's add that code to our function, with the following few lines:\n\n```javascript\n// Split on spaces to get each word by itself, indexed.\nvar word_array = data.split(\" \");\n\n// remove all pure whitespace entries\nword_array = word_array.filter((word) => word.trim().length != 0);\nreturn word_array;\n```\n\nThis uses the [string split function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) to split all the sentences into individual words, by looking for the spaces `' '` between them. Then we do a little cleanup to remove any resulting entries that are just pure whitespace.\n\nGreat! Now our function will take in a list of books, and convert each word or punctuation mark into an element in an array, like this:\n\n```javascript\n[\n  \"No\",\n  \"one\",\n  \"would\",\n  \"have\",\n  \"believed\",\n  \"in\",\n  \"the\",\n  \"last\",\n  \"years\",\n  \"of\",\n  \"the\",\n  \"nineteenth\",\n  \"century\",\n  \"that\",\n  \"this\",\n  \"world\",\n  \"was\",\n  \"being\",\n  \"watched\",\n  \"keenly\",\n  \"and\",\n  \"closely\",\n  \"by\",\n  \"intelligences\",\n  \"greater\",\n  \"than\",\n  \"man\",\n  \"’\",\n  \"s\",\n  \"and\",\n  \"yet\",\n  \"as\",\n  \"mortal\",\n  \"as\",\n  \"his\",\n  \"own\",\n  \";\",\n];\n```","metadata":{"id":947}}],["948",{"pageContent":"\"was\",\n  \"being\",\n  \"watched\",\n  \"keenly\",\n  \"and\",\n  \"closely\",\n  \"by\",\n  \"intelligences\",\n  \"greater\",\n  \"than\",\n  \"man\",\n  \"’\",\n  \"s\",\n  \"and\",\n  \"yet\",\n  \"as\",\n  \"mortal\",\n  \"as\",\n  \"his\",\n  \"own\",\n  \";\",\n];\n```\n\n## Creating the Data Structure\n\nNow that we have all the books tokenized in an array, let's see how we can populate our proposed data structure with them. We'll create another function to deal with this, called `buildMap`. Add this to the `index.js` file:\n\n```javascript\nfunction buildMap(tokens, depth) {}\n```\n\nThe parameter `tokens` accepts, as an argument, the output of the file parsing function we created above. `depth` refers to how many tokens long the initial phrases should be.\n\nNow, let's think a bit about the algorithm we'll need to devise to extract the initial phrases, and the words that are likely to follow from our tokens. We need to go through the tokens, at `depth` amount at a time, in a kind of sliding window fashion to extract the initial phrases. You could visualize it like this:\n\n![sliding window over text](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/build-map.gif)\n\nWe'll look in our structure to see if that phrase is already there – if not, we'll add it. Next we'll look at the word immediately after the phrase, and check if it is in the list of likely words for that phrase. If it is already there, increment its weight. If it's not already there, add it and set its weight to 1.\n\nIn pseudo-code, this could be expressed as:\n\n```\nfor each entry in the tokens\n\tcreate a phrase from the current token and the next depth-1 number of tokens\n\t\tif the phrase doesn't already exist in the map\n\t\t\tadd the phrase to the map\n\n\t\tget the next token after the phrase (current token + depth index) as likely word\n\t\t\tif the word does not exist in the phrase word list\n\t\t\t\tadd word\n\t\t\tincrement word weight\n\n```\n\nCool, let's add this as code to the function `buildMap`. It should look like this:\n\n```javascript\nlet map = {};\n\n// for each entry in the tokens","metadata":{"id":948}}],["949",{"pageContent":"add word\n\t\t\tincrement word weight\n\n```\n\nCool, let's add this as code to the function `buildMap`. It should look like this:\n\n```javascript\nlet map = {};\n\n// for each entry in the tokens\nfor (let index = 0; index < tokens.length - depth; index++) {\n  //create a phrase from the current token and the next depth-1 number of tokens\n  let phrase = \"\";\n  for (let depthIndex = 0; depthIndex < depth; depthIndex++) {\n    const curr_word = tokens[depthIndex + index];\n    phrase = phrase + \" \" + curr_word;\n  }\n  // Get rid of any extra space we added in when constructing the phrase from tokens\n  phrase = phrase.trimStart();\n\n  //if the phrase doesn't already exist in the map\n  //    add the phrase to the map, and add a blank\n  if (!map[phrase]) {\n    map[phrase] = {};\n  }\n\n  // Gets the next word after the phrase\n  let next_word = tokens[index + depth];\n\n  // See if the next word exists in the phrase word list\n  // If it doesn't already exist in the possible next word list, add it in, and set weight to 1\n  // if it does exist, just increment the weight\n  let next_word_list = map[phrase];\n  if (!next_word_list[next_word]) {\n    next_word_list[next_word] = 1;\n  } else {\n    next_word_list[next_word]++;\n  }\n}\n\nreturn map;\n```\n\nIn **line 1**, we create an empty object using the [literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer) to hold our data structure, which is a map between phrases and words that follow.\n\nIn **line 4**, we setup a for loop to run through each token. Notice that we only run up to the token's array length less the phrase depth. This is because we need to take into account that we have to get a word _after_ the last phrase, so we must stop getting phrases before the end of the token array.\n\nThe rest of the code implements our pseudo code. The comments match the place in the pseudo code that the real code implements.\n\nNow we have a way to build up our data structure using our training text.\n\n## Completing a Phrase","metadata":{"id":949}}],["950",{"pageContent":"Now we have a way to build up our data structure using our training text.\n\n## Completing a Phrase\n\nLet's use our data structure, along with an initial phrase, to pick out a suggestion/completion. There are two parts to this task:\n\n1. Find the matching phrase, and likely next words in our map.\n2. Pick one of the likely words to follow the phrase.\n\nTo find the matching phrase and retrieve the likely word list, we can use the indexer functionality of JavaScript. Let's create a method to hold this logic. As inputs, we'll need the phrase to autocomplete, along with a populated map.\n\n```javascript\nfunction suggest_word(start_phrase, word_map) {\n  let word_list = word_map[start_phrase];\n}\n```\n\nWe now have the function definition, and we have retrieved the word list for the given phrase. We need to pick one of words from the list to return. Remember that we gave each word a weighting, which is related to how frequently that word appears after the phrase from our learning text. We need to find a way to choose a word from the list randomly, but still respecting the frequency distribution, or weights.\n\nOne way to think of this is to lay each of the possible choices out on a line, with the space or length of each choice proportional to its weight.\n\n![weighted choice representation](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/weighted-words.png)\n\nThen we can choose a random point on the line. Whatever word block that random choice lands in, is the word we choose. This way, we are more likely to land on a word with a larger weight, because it takes up more of the line. So we can still choose randomly (i.e. not always return the same word), but still respect the word frequency distribution of natural language.","metadata":{"id":950}}],["951",{"pageContent":"We may understand the principle, but how do we do this in code? When we lay out all the words end to end, sized by their weights, we are creating a line with length equal to the sum of all the word weights. Then, when we choose a random point on the line, it is equivalent to choosing a random number between 0 and the sum of all the weights. To find the word \"under\" the point, we can run through our word list again, and \"add\" each word weight until we match our randomly chosen number. This type of algorithm is known as a _weighted random choice_ algorithm, and there are many ways to implement it.\n\nThis sounds like a job for another function. Let's create a function that takes in a weighted word list, and implements the algorithm above:\n\n```javascript\nfunction choose_word_weighted(word_list) {\n  // Get an array of all the words in the word list object,\n  // so we can run through each and get their weights\n  var keys = Object.keys(word_list);\n\n  // Get the sum of all the weights\n  let sum_of_weights = 0;\n  keys.forEach((key) => {\n    sum_of_weights += word_list[key];\n  });\n\n  // Math.random() returns a number from 0 to 1,\n  // so we scale it up the sum of the weights\n  let random = Math.random() * sum_of_weights;\n\n  // Go through the words one by one, and subtract its weight from\n  // our random number. When we reach 0 or below,\n  // that is the word we choose\n  let curr_word = \"\";\n  keys.every((word) => {\n    curr_word = word;\n    random -= word_list[word];\n    return random > 0;\n  });\n\n  return curr_word;\n}\n```\n\nThe first code line `var keys = Object.keys(word_list);` uses a built-in JavaScript function from the base [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) to get all the keys (the words in our likely list), and [return them as an array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys). This allows us to use this array to iterate over, and query our word list object word by word for each weight.","metadata":{"id":951}}],["952",{"pageContent":"You'll notice in the last part of the function, we subtract word weights from our random point. This is equivalent to adding word weights until we reach the random number. It just saves us another variable. You'll also notice that we use `keys.every()` instead of the more usual `keys.forEach`. This is because (despite its name), `every` allows us to break out early from the loop when we find the word that is under our random point, whereas `forEach` does not allow a break early.\n\nNow we can choose a word with weighted randomness. Let's complete our `suggest_word` function we started. We just need to call our `choose_word_weighted` function, so let's update it:\n\n```javascript\nfunction suggest_word(start_phrase, word_map) {\n  let word_list = word_map[start_phrase];\n  let suggested_word = choose_word_weighted(word_list);\n  return suggested_word;\n}\n```\n\n## Putting it All Together\n\nWe've made all the parts. Now let's put it all together and see how it works. We need to:\n\n1. Read all the books in.\n2. Build the map.\n3. Test a phrase to complete.\n\nWe also need to set a `depth`, or the number of words in our initial phrases that we want to predict off of. Aim for two or three; any more than that and the phrases become very unique and we may not have enough data to have seen all of those combinations.\n\nOur completed code, with the above added in, should look like this:\n\n```javascript\nconst fs = require(\"fs\");\n\nconst depth = 3;\nlet all_words = readFilesIntoWordArray([\n  \"hgwells.txt\",\n  \"franklin.txt\",\n  \"dickens.txt\",\n]);\nlet map = buildMap(all_words, depth);\n\nlet initial_phrase = \"and then I\";\nlet output = suggest_word(initial_phrase, map);\nconsole.log(initial_phrase + \": \" + output);\n\nfunction suggest_word(start_phrase, word_map) {\n  let word_list = word_map[start_phrase];\n  let suggested_word = choose_word_weighted(word_list);\n  return suggested_word;\n}\n\nfunction choose_word(word_list) {\n  var keys = Object.keys(word_list);\n  var word = keys[(keys.length * Math.random()) << 0];\n  return word;\n}","metadata":{"id":952}}],["953",{"pageContent":"return suggested_word;\n}\n\nfunction choose_word(word_list) {\n  var keys = Object.keys(word_list);\n  var word = keys[(keys.length * Math.random()) << 0];\n  return word;\n}\n\nfunction choose_word_weighted(word_list) {\n  // Get an array of all the words in the word list object,\n  // so we can run through each and get their weights\n  var keys = Object.keys(word_list);\n\n  // Get the sum of all the weights\n  let sum_of_weights = 0;\n  keys.forEach((key) => {\n    sum_of_weights += word_list[key];\n  });\n\n  // Math.random() returns a number from 0 to 1,\n  // so we scale it up the sum of the weights\n  let random = Math.random() * sum_of_weights;\n\n  // Go through every word, and subtract its weight from\n  // our random number. When we reach 0 or below,\n  // that is the word we choose\n  let curr_word = \"\";\n  keys.every((word) => {\n    curr_word = word;\n    random -= word_list[word];\n    return random > 0;\n  });\n\n  return curr_word;\n}\n\n/*\n   Runs through the list, gets the next n-1 words, and maps it to the n+1 word\n*/\nfunction buildMap(tokens, depth) {\n  let map = {};\n\n  // for each entry in the tokens\n  for (let index = 0; index < tokens.length - depth; index++) {\n    //create a phrase from the current token and the next depth-1 number of tokens\n    let phrase = \"\";\n    for (let depthIndex = 0; depthIndex < depth; depthIndex++) {\n      const curr_word = tokens[depthIndex + index];\n      phrase = phrase + \" \" + curr_word;\n    }\n    // Get rid of any extra space we added in when constructing the phrase from tokens\n    phrase = phrase.trimStart();\n\n    //if the phrase doesn't already exist in the map\n    //    add the phrase to the map, and add a blank\n    if (!map[phrase]) {\n      map[phrase] = {};\n    }\n\n    // Gets the next word after the phrase\n    let next_word = tokens[index + depth];\n\n    // See if the next word exists in the phrase word list\n    // If it doesn't already exist in the possible next word list, add it in, and set weight to 1\n    // if it does exist, just increment the weight\n    let next_word_list = map[phrase];","metadata":{"id":953}}],["954",{"pageContent":"// If it doesn't already exist in the possible next word list, add it in, and set weight to 1\n    // if it does exist, just increment the weight\n    let next_word_list = map[phrase];\n    if (!next_word_list[next_word]) {\n      next_word_list[next_word] = 1;\n    } else {\n      next_word_list[next_word]++;\n    }\n  }\n\n  return map;\n}\n\nfunction readFilesIntoWordArray(filenames) {\n  let data = \"\";\n  filenames.forEach((file) => {\n    data = data + \" \" + fs.readFileSync(file, \"utf8\");\n  });\n\n  // remove newlines\n  data = data.replace(/\\r?\\n|\\r/g, \" \");\n\n  // Put spaces around each special character/punctuation,\n  // so that when we split on spaces, they come out as their own tokens,\n  // disconected from surrounding words\n  const replacements = [\n    \",\",\n    \".\",\n    \":\",\n    \"!\",\n    \"?\",\n    '\"',\n    \"“\",\n    \"”\",\n    \";\",\n    \"(\",\n    \")\",\n    \"-\",\n    \"_\",\n  ];\n  replacements.forEach((value) => {\n    data = data.replace(RegExp(\"\\\\\" + value, \"g\"), \" \" + value + \" \");\n  });\n\n  // Split on spaces to get each word by itself, indexed.\n  var word_array = data.split(\" \");\n\n  // remove all pure whitespace entries\n  word_array = word_array.filter((word) => word.trim().length != 0);\n  return word_array;\n}\n```\n\nRun the project by clicking the big **RUN >** button at the top centre of the repl, and see what you get back. Here is an example:\n\n![example autocomplete](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/autocomplete-example.png)\n\n## Can We Do More?\n\nThis is pretty good for an engine, which we could integrate into a text/chat app, word processor, or another project. But can we do something else right now just for fun?\n\nWhat if we keep feeding the last `depth` number of words in the phrase back into the autocomplete, to see if it can come up with a complete sentence? You might have been this game on social media where you are asked to start a comment with \"I want\" and then keep selecting autocomplete words to come up with a nonsense or comical sentence.","metadata":{"id":954}}],["955",{"pageContent":"Let's create a new function, `create_sentence` that does this:\n\n```javascript\n// Creates a new sequence of words, of max length, given a starting phrase\nfunction create_sentence(start_phrase, word_map, sentence_length, depth) {\n  let sentence = \"\";\n  for (let word_count = 0; word_count < sentence_length; word_count++) {\n    let next_word = choose_word_weighted(word_map[start_phrase]);\n    sentence = sentence + next_word + \" \";\n    tokenized_phrase = start_phrase.split(\" \");\n    start_phrase = \"\";\n    for (let i = 1; i < depth; i++) {\n      start_phrase = start_phrase + tokenized_phrase[i] + \" \";\n    }\n    start_phrase = start_phrase + next_word;\n  }\n  return sentence;\n}\n```\n\nAs for the `suggest_word` function, we have parameters for the `start_phrase` and for the populated `word_map`. Then there is also an input for `sentence_length`, which is basically how many rounds to run the autocomplete. We also pass in `depth`, so that this function knows how many words it must use as an initial phrase for each autocomplete round.\n\nThe function then sets up a loop to run the autocomplete for `sentence_length` times. It starts off the same as the `suggest_word` function by calling `choose_weighted_word` to get the next word for the given phrase. Then it concatenates that word to a `sentence` string.\n\nThe next few lines then split up the initial phrase into individual tokens, takes the last `depth-1` words/tokens, and appends the newly chosen word to the end to make a new initial phrase of `depth` length. Then the cycle starts again, until we have generated a bit of text which is `sentence_length` long.\n\nThis is going to give some interesting results! Add the function above to your code, and then modify the initial code to call it:\n\n```javascript\nlet initial_phrase = \"and then I\";\nlet sentence = create_sentence(initial_phrase, map, 50, depth);\nconsole.log(initial_phrase + \": \" + sentence);\n```\n\nThis is an example output.","metadata":{"id":955}}],["956",{"pageContent":"```javascript\nlet initial_phrase = \"and then I\";\nlet sentence = create_sentence(initial_phrase, map, 50, depth);\nconsole.log(initial_phrase + \": \" + sentence);\n```\n\nThis is an example output.\n\n![sentence generation output](https://docimg.replit.com/images/tutorials/17-predictive-text-engine/sentence-example.png)\n\nIt seems like real language, but it's still completely nonsensical and a fun way to generate random stories. Try with varying parameters – initial phrases, sentence length and parameters.\n\n## Other Engine Applications\n\nWe can use our engine for other projects. The engine or model we created is known as a type of [Markov Chain](https://en.wikipedia.org/wiki/Markov_chain). A Markov chain is used as a model when we have an environmental 'state', which can transition to other states through a variety of actions. We call something 'Markovian' when the probability of each action, or event, can be sufficiently modelled by only knowing the current state, and not taking into account previous states, or history.\n\nIn our case, a state is a phrase of a certain length, and the action is the likely word to pick, leading to a new 'state' or phrase.\n\nOther things that can be modelled quite well with Markov chains include games like Tic-Tac-Toe, or Chess, where the current state is easy to define, and there is a finite list of possible actions for each state (although in Chess, this can get rather large).\n\n## Things to Try Next\n\nThere are some ways to improve this engine:\n\n- If it hasn't seen a particular initial phrase, the code will crash. It would be good to add a check to see if the phrase doesn't exist. It could then return an error code or an empty suggestion, rather than crashing.\n- It could be cool to make the engine interactive. Try adding a console interface like [readline module](https://nodejs.org/api/readline.html) to prompt for a phrase/input and show the output, allowing you to try multiple phrases in one session.","metadata":{"id":956}}],["957",{"pageContent":"- Try save the populated map to a data store, so it doesn't have to be re-trained every time you run the program. This would allow you to continually add new books and language examples, making the engine even better. There is a [Replit database](/category/databases) you can use for this.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/text-autocomplete?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":957}}],["958",{"pageContent":"---\ntitle: Chat app using Node.js\n---\n\n# Building a Replit to Replit Chat App Using Node.js\n\nIn this tutorial, we'll make a chat app with a difference. Instead of the usual web client to server chat architecture, we'll have a chat app directly running from your repl's console window in Replit.\n\nWe'll use Socket.io to implement websockets in our app. We're helped by the fact that the [Socket.io-client code can be run in Node.js](https://socket.io/docs/v3/client-installation/index.html), not only in a browser!\n\n![Example of the chat app functionality](https://docimg.replit.com/images/tutorials/15-replit-chat/friends_chat.gif)\n\n## Overview and Requirements\n\nWe'll use the [Replit](https://replit.com) web IDE for developing and running our chat app. We will end up with one Replit project that runs the chat server, and as many client Replit projects as you want to chat between. You'll need a Replit account for this tutorial, so [create an account](https://replit.com/signup) if you haven't already.\n\nIn this tutorial, we will:\n\n- Create the chat server using [Express](http://expressjs.com) and [Socket.io](https://socket.io).\n- Create a chat client using the [Socket.io-client](https://socket.io/docs/v3/client-installation/index.html).\n- Use the [readline module](https://nodejs.org/api/readline.html) in Node.js to create the user interface to chat from your repl's console window.\n\n## Create a Chat Server\n\n1. Log into [Replit](https://replit.com) and create a new repl.\n2. Choose **Node.js** as your language.\n3. Name your repl something like \"repl-chat-server\".\n\n![create new server Replit instance](https://docimg.replit.com/images/tutorials/15-replit-chat/new-server-project.png)\n\n### Add a web framework\n\nWe need to start with a web framework that will be able to route incoming requests from chat clients. We'll use [Express](http://expressjs.com), a popular Node.js web framework. In the default `index.js` file, add a reference to expressjs and create a new express app:\n\n```javascript","metadata":{"id":958}}],["959",{"pageContent":"```javascript\nconst express = require(\"express\");\nconst app = express();\n```\n\n[Replit](https://replit.com) has a super useful package feature which means we don't need to manually install packages. They will be installed automatically when we reference them in the code, as we've done for Express.\n\n### Add a web server\n\nNow that we have a web framework to route our requests, we need to create a web server to listen for requests and handle the HTTP protocol. We will use the built in [node HTTP module](https://nodejs.org/api/http.html) for this.\n\nAdd a reference to HTTP, and create a new server with the express framework we created above:\n\n```javascript\nconst http = require(\"http\");\nconst server = http.Server(app);\n```\n\n### Extend the server with Socket.io\n\nTo make the chat responsive in realtime, we are going to extend our web server with websockets. Websockets are used to create a long-lived connection between clients and servers. This means we don't have the overhead of creating a new connection to the server each time we want to send and receive messages. Talk about efficient!\n\nAdd the following code to extend your server to support websockets:\n\n```javascript\nconst sockets = require(\"socket.io\");\nio = sockets(server);\n```\n\n### Listen for new connections and messages\n\nNow that we've got all our infrastructure, we can set up how we want to handle new connections and messages. Socket.io has many [events](https://socket.io/docs/v3/emitting-events/) that we can create and listen for. We'll be using the new `connection` event and a custom `message` event. Add the following code to handle new connection events and incoming messages from clients:\n\n```javascript\nio.on(\"connection\", function (connection) {\n  connection.on(\"message\", function (data) {\n    console.log(\"new message: \" + data);\n    io.emit(\"broadcast\", data);\n  });\n});\n```\n\nThis code handles a new connection event on **line 1**. It grabs this connection, and waits for a new message to be sent by the client on **line 2**.","metadata":{"id":959}}],["960",{"pageContent":"io.emit(\"broadcast\", data);\n  });\n});\n```\n\nThis code handles a new connection event on **line 1**. It grabs this connection, and waits for a new message to be sent by the client on **line 2**.\n\nOnce it has a new message, it writes it to the local server console on **line 3**. This is really just for our own debugging and interest. In a production application, perhaps we would save the message logs for later browsing.\n\n**Line 4** is where we send out, or _emit_, the incoming message to all connected clients, so they can see the message.\n\n### Start up and test the server\n\nFinally, we need to start up our chat server to listen for connections. Add this code to start the server:\n\n```javascript\nserver.listen(3000, function () {\n  console.log(\"listening on port 3000\");\n});\n```\n\nTo test the server, click the big \"Run\" button at the top of your repl. You should see it installing packages, output the connection, and finally write _listening on port 3000_.\n\n![Running the chat server](https://docimg.replit.com/images/tutorials/15-replit-chat/server_run.png)\n\n### Complete server code\n\nThe server code is done! Your completed code should look like this:\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\n\nconst http = require(\"http\");\nconst server = http.Server(app);\n\nconst sockets = require(\"socket.io\");\nio = sockets(server);\n\nio.on(\"connection\", function (connection) {\n  connection.on(\"message\", function (data) {\n    console.log(\"new message: \" + data);\n    io.emit(\"broadcast\", data);\n  });\n});\n\nserver.listen(3000, function () {\n  console.log(\"listening on 3000\");\n});\n```\n\n## Building the Chat Client\n\nCreate a _new_ repl with **Node.js** as the chosen language. Give this repl a name, like \"repl-chat-client\".\n\n![create new client Replit instance](https://docimg.replit.com/images/tutorials/15-replit-chat/new-client-project.png)\n\n### Add the Socket client and readline modules","metadata":{"id":960}}],["961",{"pageContent":"![create new client Replit instance](https://docimg.replit.com/images/tutorials/15-replit-chat/new-client-project.png)\n\n### Add the Socket client and readline modules\n\nAdd the [Socket.io-client](https://socket.io/docs/v3/client-installation/index.html) and [readline module](https://nodejs.org/api/readline.html) to the **index.js** file:\n\n```javascript\nconst io = require(\"socket.io-client\");\nconst readline = require(\"readline\");\n```\n\n### Create a new connection to the chat server\n\nAdd a connection to your chat server repl by adding the line:\n\n```javascript\nvar socket = io(\"https://repl-chat-server.<your username>.repl.co\");\n```\n\nReplace `<your username>` in the line above with your actual Replit username.\n\n### Setup a console interface\n\nBecause we are creating this chat app purely in the repl console, we need to be able to read and write messages from the console. To help us do this, we'll use the [readline module](https://nodejs.org/api/readline.html). Create the interface by adding this code:\n\n```javascript\nconst chat_interface = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n```\n\nThe line `input: process.stdin` means that we will be getting user input from the Standard Input, which commonly means the console. Likewise, `output: process.stdout` means we will output messages to the Standard Output, i.e. the console.\n\n### User and message variables\n\nTo remember the user's chat handle (username) and the message they want to send, we'll set up two variables. Add this to your code:\n\n```javascript\nvar chat_handle = \"\";\nvar message_to_send = \"\";\n```\n\n### Handle Socket events\n\nWe are interested in two main events:\n\n1. When we successfully connect to the chat server.\n2. When the server broadcasts messages to us.\n\nAdd this code to connect to these events:\n\n```javascript\nsocket.on(\"connect\", function () {\n  get_chat_handle();\n  socket.on(\"broadcast\", display_message);\n});\n```\n\nYou'll notice this code calls two methods: `get_chat_handle` and `display_message`. We'll define these next.","metadata":{"id":961}}],["962",{"pageContent":"get_chat_handle();\n  socket.on(\"broadcast\", display_message);\n});\n```\n\nYou'll notice this code calls two methods: `get_chat_handle` and `display_message`. We'll define these next.\n\n### Getting the user chat handle\n\nOnce we're successfully connected to the server, we'll want to introduce the user. Add this function to your code:\n\n```javascript\n// Gets the user's name, so we can introduce and prepend each message with their name\nfunction get_chat_handle() {\n  chat_interface.question(\n    `Hello! What's your chat handle? `,\n    function (answer) {\n      chat_handle = answer;\n      socket.emit(\"message\", chat_handle + \" has entered the chat\");\n      chat();\n    }\n  );\n}\n```\n\nThis uses the interface we set up earlier to ask a question to the user: _\"What's your chat handle?\"_. When we get the answer, we store it in the variable `chat_handle` that we added earlier. We then send this to the server using `socket.emit(\"message\")`. The server will get the message, and then broadcast it to all the other chat clients.\n\nFinally, we call the `chat()` function, which we will set up next.\n\n### Waiting and sending user messages\n\nNow we'll implement the `chat()` function, which waits for a user's message and sends it to the server. Add this function to your code:\n\n```javascript\n// Waits for a new message to send\nfunction chat() {\n  chat_interface.question(chat_handle + \": \", function (message) {\n    message_to_send = chat_handle + \": \" + message;\n    socket.emit(\"message\", message_to_send);\n    chat();\n  });\n}\n```\n\nThis code adds a prompt to the console with the user's `chat_handle`, and waits for them to enter a message. This is done through the `chat_interface.question` method. When they enter a message, we prepend it with the user's chat handle and save it to the variable `message_to_send` that we added earlier. Then we send this combined user chat handle and message to the server using `socket.emit`. Finally, we call our `chat()` function again, to set up a prompt and wait for the next message.","metadata":{"id":962}}],["963",{"pageContent":"### Showing messages from other users\n\nOur last function writes out messages that we receive from the server. We get these messages in this code we added earlier: `socket.on('broadcast', display_message);`\n\nThis code listened for any broadcast message, and then called the function `display_message`. We'll implement this function now.\n\nAdd the `display_message` function to your code:\n\n```javascript\n// Handles an incoming message, and checks to see that it is not the one we sent.\n// Shows it on the console if it is from another user.\nfunction display_message(message) {\n  if (message_to_send != message) {\n    console.log(\"\\n\" + message);\n    chat();\n  }\n}\n```\n\nAs noted in the comment above the function declaration, this function first compares the incoming message to the last message the user sent, stored in the `message_to_send` variable. If the incoming message matches, the function ignores it and doesn't write it out. It would look pretty weird if a user sent a message, and then had it sent right back to them!\n\nIf it doesn't match (i.e it is a message from another user), then we write it to the console with a newline `\\n` preceding it. Then we wait for our user to send a reply by calling our `chat()` function again.\n\n### Complete client code\n\nWe are done with the chat client code! The completed code should look like this:\n\n```javascript\nconst io = require(\"socket.io-client\");\nconst readline = require(\"readline\");\n\nvar socket = io(\"https://repl-chat-server.<your username>.repl.co\");\n\nconst chat_interface = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nvar chat_handle = \"\";\nvar message_to_send = \"\";\n\nsocket.on(\"connect\", function () {\n  get_chat_handle();\n  socket.on(\"broadcast\", display_message);\n});\n\n// Gets the user's name, so we can introduce and append each message with their name\nfunction get_chat_handle() {\n  chat_interface.question(\n    `Hello! What's your chat handle? `,\n    function (answer) {\n      chat_handle = answer;","metadata":{"id":963}}],["964",{"pageContent":"function get_chat_handle() {\n  chat_interface.question(\n    `Hello! What's your chat handle? `,\n    function (answer) {\n      chat_handle = answer;\n      socket.emit(\"message\", chat_handle + \" has entered the chat\");\n      chat();\n    }\n  );\n}\n\n// Waits for a new message to send\nfunction chat() {\n  chat_interface.question(chat_handle + \": \", function (message) {\n    message_to_send = chat_handle + \": \" + message;\n    socket.emit(\"message\", message_to_send);\n    chat();\n  });\n}\n\n// Handles an incoming message, and checks to see that it is not the one we sent.\n// Shows it on the console if it is from another user.\nfunction display_message(message) {\n  if (message_to_send != message) {\n    console.log(\"\\n\" + message);\n    chat();\n  }\n}\n```\n\nRemember to replace `<your username>` in the Socket connection with your actual username on Replit!\n\n### Running the client app\n\nNow you can click the \"Run\" button at the top of the chat client repl to test the client app. You should see it installing packages, output the connection, and finally ask _Hello! What's your chat handle?_.\n\nThis assumes you are still running the chat server we created earlier.\n\nIf you type in a message to your client, you should see it logged on the server. The image below shows the repl console of the client on the left, and the repl console of the server on the right.\n\n![testing client and server together, showing output](https://docimg.replit.com/images/tutorials/15-replit-chat/client_server_run.gif)\n\n## Chatting With a Friend\n\nNow that we've built a server and a client, we can chat with a buddy. Get a friend to copy the client code and run it in their own [Replit](https://replit.com) account so that they can chat with you. Alternatively, share a link with them to your chat client repl.\n\nRun the chat server app. Then run your client app, and your friend's client app.","metadata":{"id":964}}],["965",{"pageContent":"Run the chat server app. Then run your client app, and your friend's client app.\n\nYou should see the client apps prompt for your usernames. After you send them, they'll be shown on both clients and in the server logs. Now you can message each other from the repl console! Once you're comfortable that it works with a friend, you can invite others to join, too.\n\n![Example chat with a friend](https://docimg.replit.com/images/tutorials/15-replit-chat/friends_chat.gif)\n\n## Make it Your Own\n\nIf you followed along, you'll already have your own version of the chat server and chat client repl to extend. If not, start from ours. Fork the chat server or chat client from the repls embedded below.\n\n### Chat server\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/repl-chat-server?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n### Chat client\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/repl-chat-client?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Things to Try Next\n\nYou can try some interesting things to spice up your chat app.\n\n- Try using different colors on the message outputs – one for the user, and another for their chat friends. There are many modules available for this, one of them being [colors](https://www.npmjs.com/package/colors).\n- Try logging the server messages to the [Replit database](/hosting/databases/replit-database), so that you can restore previous chats.","metadata":{"id":965}}],["966",{"pageContent":"---\ntitle: Overview\nsidebar_position: 4\n---\n\n# Welcome to _Code with Replit_\n\nIn this series of tutorials, you'll go from beginner to expert in coding with Replit. While these lessons are designed to be taken in order, they each make sense on their own too, so feel free to jump in wherever looks the most interesting to you.\n\n**Part 1 - beginner tutorials - Replit features**\n\nThe first part of the series teaches you to use specific Replit features. You'll learn how to use Replit for everything from solving basic maths problems to building production-grade software, integrating with other tools like GitHub.\n\n**Part 2 - intermediate tutorials - building fun and useful projects**\n\nIn the second part of the series, you'll work through a set of projects, including chatbots, games, and more. We are constantly expanding these, so feel free to let us know if there are any topics you want to see included.\n\n### Video introduction\n\nIf you prefer video, here's a quick start walkthrough, or read the text tutorials below.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D4f7_lPwXtE\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Part 1: beginner tutorials - Replit features\n\nIn this section of the course, you'll learn the basics of Replit. But that doesn't mean you won't build some fun stuff along the way.\n\n#### [Introduction to Replit and using the IDE](/programming-ide/introduction-to-the-workspace)\n\nLearn the basics of the Replit IDE. Why use an online IDE and what are all those different panes? Build a simple program to solve your maths homework.\n\n#### [Managing dependencies with Replit](/programming-ide/installing-packages)","metadata":{"id":966}}],["967",{"pageContent":"#### [Managing dependencies with Replit](/programming-ide/installing-packages)\n\nNo one is an island, and if you build software you'll build it on top of existing modules that others have written. Here we show you how to work with other people's code in a variety of ways: in many cases all you need to do is [import antigravity and fly away](https://xkcd.com/353/).\n\n#### [Data science: plotting and graphing](/tutorials/python/data-science-and-visualisation-with-repl-it)\n\nData is only useful if it can be easily understood. Plots, charts, and graphs are the easiest way to know what's happening in the world around you. And did you know that data science is [the sexiest job of the 21st century](https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century)? Follow along to plot every city in the USA and find out if richer people live longer.\n\n#### [Pair programming and using multiplayer](/programming-ide/workspace-features/multiplayer)\n\nDid we mention that no one is an island? Coders don't have to work alone. You can invite your friends to code along with you, a technique used by beginners and experts alike. Learn how to code collaboratively, as if you were using a Google Doc.\n\n#### [Running projects from GitHub](/category/using-git-on-replit)\n\nMost open-source software lives on GitHub and it's easy to take advantage of all of this free software by pulling code from GitHub to Replit and running it with one click. Some software needs to be configured in specific ways so you'll also learn how to modify what happens when you press that big green \"run\" button.\n\n#### [Building a game with PyGame](/tutorials/python/building-a-game-with-pygame)\n\nDo you want to develop games? Of course, you can do that with Replit too. We'll build a 2D juggling game using PyGame in this lesson and you'll learn more about graphics programming at the same time: sprites, physics, and more.\n\n#### [Can you keep a secret? What about from time travellers?](/programming-ide/workspace-features/secrets)","metadata":{"id":967}}],["968",{"pageContent":"#### [Can you keep a secret? What about from time travellers?](/programming-ide/workspace-features/secrets)\n\nHave you been hacked? It's only a matter of time if you haven't. Learn how to keep your secrets safe, even when coding in public spaces. Pro tip: if you accidentally paste a password into your code and then remove it, others might still find it in your history, so you'll learn how to navigate that too.\n\n#### [Creating a name-splitting application using test driven development](/tutorials/python/test-driven-development)\n\nBuild a system to split users' names into first name and last name. We'll follow test-driven-development best-practices along the way so you can be sure your code does what you think it does.\n\n#### [Become an elite hacker with productivity hacks](/programming-ide/keyboard-shortcuts)\n\nHave you seen the Matrix? Learn to be the Neo of coding by getting more than one cursor, using keyboard shortcuts, and all of the other productivity features that Replit offers. You'll be soon producing more code in less time.\n\n#### [Keeping your data in check with the Replit database](/tutorials/python/using-the-replit-database)\n\nNow that you are starting to build larger and more complicated applications, it is time to start using databases to keep your data clean and secure.\n\n#### [Repl audio - control (or create) your music with code](/tutorials/audio)\n\nFind, download, play, and control the volume of your music, all in code. If that's not enough, create your own music too.\n\nThis is the part where you realize that the possibilities are endless while you learn how to control your music with code.\n\n## Part 2 - Build your own projects\n\n#### [Steganography - hiding messages in images](/tutorials/python/steganography)\n\nShare secret messages with your friends by hiding them inside images with steganography, Python and Replit.\n\n#### [2D platform game with PyGame and Replit](/tutorials/python/2d-platform-game)","metadata":{"id":968}}],["969",{"pageContent":"Share secret messages with your friends by hiding them inside images with steganography, Python and Replit.\n\n#### [2D platform game with PyGame and Replit](/tutorials/python/2d-platform-game)\n\nBuild a fun 2D platform game while learning all about Python game development. It's easily expandable with endless possibilities so let your imagination run wild!\n\n#### [Building a Chat App with Node.js and Replit](/tutorials/nodejs/repl-chat)\n\nBuild a Replit-to-Replit chat app - one server will coordinate between multiple clients so you can chat old-school style (in the terminal) with your friends.\n\n#### [Build a static site generator in Python](/tutorials/python/static-site-generator)\n\nBuild your own static site generator to build a custom blog from scratch.\n\n#### [Build a predictive text engine](/tutorials/nodejs/predictive-text-engine)\n\nBuild an autocomplete bot that can generate its own sentences.\n\n#### [Telegram Notes Bot](/tutorials/python/telegram-bot)\n\nTake notes on Telegram and have a bot automatically publish them to a web application.\n\n#### [Build a Snake Game with PyGame](/tutorials/python/build-snake-with-pygame)\n\nRevisit PyGame again to build the classic Snake game.\n\n#### [Build Your Online Store's Checkout Process with Stripe](/tutorials/nodejs/online-store-checkout-process)\n\nBuild an online store and integrate Stripe's checkout process.\n\n#### [Build a Snake Game with Kaboom.js](/tutorials/kaboom/build-snake-with-kaboom)\n\nBuild the classic Snake game while learning all about Kaboom.js game development.\n\n#### [Build a Personal Stock Market dashboard](/tutorials/python/personal-stock-market-dashboard)\n\nBuild a single-page web dashboard for tracking your stock portfolio.\n\n#### [Building Asteroids Game with Kaboom.js](/tutorials/kaboom/build-asteroids-with-kaboom)\n\nRevisit Kaboom.js again to build the classic Asteroids game.\n\n#### [Build a Space Shooter Game with Kaboom.js](/tutorials/kaboom/build-space-shooter-with-kaboom)","metadata":{"id":969}}],["970",{"pageContent":"Revisit Kaboom.js again to build the classic Asteroids game.\n\n#### [Build a Space Shooter Game with Kaboom.js](/tutorials/kaboom/build-space-shooter-with-kaboom)\n\nContinue to learn about Kaboom.js by building a Space Shooter game with a platformer feel.\n\n#### [Building a pseudo-3D game with Kaboom.js](/tutorials/kaboom/build-3d-game-with-kaboom)\n\nLearn how to leverage early game design techniques to build a pseudo-3D game in a 2D game engine like Kaboom.js.\n\n#### [Generate PDF reports from spreadsheet data](/tutorials/python/pdf-report-generator-from-spreadsheet)\n\nBuild a web application that takes in data from spreadsheets and use it to create slick PDF reports.\n\n#### [Building tic-tac-toe with WebSocket and Kaboom.js](/tutorials/kaboom/build-tictactoe-with-websockets-kaboom)\n\nBuild a 2-player online tic-tac-toe game using a [Node.js](https://nodejs.org/en/) server, [Socket.IO](https://socket.io) for real time gameplay across the internet and Kaboom.js as the game engine.\n\n#### [Build a team technical challenge website with `replit.web`](/tutorials/python/technical-challenge-site)\n\nLearn how to use the `replit.web` framework to build a leaderboard website for an online technical challenge in the vein of [Advent of Code](https://adventofcode.com/) or [Hackasat](https://www.hackasat.com/).\n\n#### [Build a paid content site with `replit.web` and Stripe](/tutorials/python/paid-content-site)\n\nRevisit the `replit.web` framework and combine it with Stripe to build a digital content storefront.\n\n#### [Building with Nix on Replit](/tutorials/python/build-with-nix)\n\nLearn how to leverage the power of Nix on Replit, to run third-party programs, build a production-grade web stack, with a database and support for multiple web servers or to write programs in a language not officially supported on Replit.\n\n#### [Build an email news digest app with Nix, Python and Celery](/tutorials/python/build-news-digest-app-with-nix)","metadata":{"id":970}}],["971",{"pageContent":"#### [Build an email news digest app with Nix, Python and Celery](/tutorials/python/build-news-digest-app-with-nix)\n\nRevisit Nix on Replit to build a multi component app that allows users to subscribe to [RSS](https://en.wikipedia.org/wiki/RSS) and [Atom](<https://en.wikipedia.org/wiki/Atom_(Web_standard)>) feeds and receive scheduled emails with news updates.\n\n#### [Building a _Mario_-like side-scroller with Kaboom.js](/tutorials/kaboom/build-mario-with-kaboom)\n\nLearn more on the capabilities of the Kaboom game engine by building a _Mario_-like side-scroller game.\n\n#### [Build an escrow contract on the Ethereum blockchain with Solidity and Replit](/tutorials/web3/escrow-contract-with-solidity)\n\nLearn more on developing Ethereum smart contracts using the Solidity programming language on Replit and deploying the contracts to a blockchain.\n\n#### [Creative coding with Replit](/tutorials/misc/creative-coding)\n\nExplore the tools provided by Replit for creating graphics, 3D worlds, games, sounds, and other more creative things.\n\n#### [Build Flappy Bird with Kaboom](/tutorials/kaboom/build-flappy-bird-with-kaboom)\n\nRevisit the Kaboom game engine on Replit by building a Flappy Bird game.\n\n#### [Build a physics playground with Kaboom](/tutorials/kaboom/physics-playground-with-kaboom)\n\nExplore the advanced usage of the Kaboom game development framework by building a 2D Physics engine.\n\n#### [Build a block-breaking game with Kaboom](/tutorials/kaboom/build-breakout-with-kaboom)\n\nRevisit the Kaboom game engine on Replit by building a block-breaking game similar to classics like Atari's _Breakout_ and Taito's _Arkanoid_.\n\n#### [Rendering 3D scenes with three.js](/tutorials/3D-rendering-with-threejs)\n\nLearn how to render 3D scenes with three.js to make websites using 3D elements and advanced animations, or even complex 3D games.\n\n#### [Two-Player Wordle Clone Python Rich](/tutorials/python/two-player-wordle-clone-python-rich)","metadata":{"id":971}}],["972",{"pageContent":"#### [Two-Player Wordle Clone Python Rich](/tutorials/python/two-player-wordle-clone-python-rich)\n\nBuild a command line variant of the popular Wordle game for two players, similar to hangman.\n\n#### [Host Your Startup's Blog On Replit With Hugo and Nix](/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix)\n\nSee how to host a basic Blog on Replit, using Hugo as a static site generator.\n\n#### [Build Space Invaders With Kaboom](/tutorials/kaboom/build-space-invaders-with-kaboom)\n\nBuild the classic game Space Invaders, using Kaboom.\n\n#### [Build A Robot Nft](/tutorials/web3/build-a-robot-nft)\n\nCreate your first artwork NFTs on the Replit test net.\n\n#### [Build A Robot Nft P2](/tutorials/web3/build-a-robot-nft-p2)\n\nDeploy the NFTs that you created in part 1.\n\n#### [Build Smart Contract Oracle](/tutorials/web3/build-smart-contract-oracle)\n\nLearn about advanced smart-contract features like oracles and build your own on the Replit test net.\n\n#### [Game Of Life Kaboom](/tutorials/kaboom/game-of-life-kaboom)\n\nBuild Game of Life with Kaboom - a 'game' that shows off how powerful simple procedural programming can be.\n\n#### [Discord Role Bot](/tutorials/python/discord-role-bot)\n\nBuild an advanced Discord bot that can assign roles to people in your community.\n\n#### [3D Obstacle Avoiding Game With Three.js](/tutorials/misc/3D-game-with-three.js)\n\nBuild a 3D game with ThreeJS where you have to avoid the oncoming obstacles.\n\n## Other tutorials\n\nHere are some other tutorials hosted on the [blog](https://blog.replit.com) and third-party sites.\n\n#### [Setting Up Your Own Mastodon Instance with Replit](https://blog.replit.com/setting%20up%20a%20mastodon)\n\nLearn how to install and host a fullstack application on Replit as you follow along this tutorial to host Mastodon an open-source social networking software on Replit.\n\n#### [Deploying a Django application on replit](https://blog.replit.com/deploying-django)\n\nLearn how to deploy a Django application on Replit.","metadata":{"id":972}}],["973",{"pageContent":"#### [Deploying a Django application on replit](https://blog.replit.com/deploying-django)\n\nLearn how to deploy a Django application on Replit.\n\n#### [Using Replit and Google Sheets to Make a Simple Google Forms Alternative](https://blog.replit.com/Using%20Replit%20and%20Google%20Sheets%20to%20Make%20a%20Simple%20Google%20Forms%20Alternative)\n\nLearn how to create a Python web application that lets you build dynamic forms to display different sections given specific conditions.\n\n#### [Getting Started with Rust on Replit](https://blog.replit.com/getting-started-with-rust-on-replit)\n\nBuild a guessing game whilst learning how to use Rust on Replit.\n\n#### [Getting Started with the SpaceTraders API on Replit](https://blog.replit.com/getting-started-with-the-spacetraders-API-on-replit)\n\nLearn how to use Replit to play SpaceTraders an online multiplayer game where you buy a spaceship, explore space, and set up trades.\n\n#### [Beginner web scraping with Python and Replit](https://ritza.co/showcase/repl.it/beginner-web-scraping-with-python-and-repl-it)\n\nLearn more about what web scraping is, how websites are built, and how to automatically scrape data from websites.\n\n#### [Building news word clouds using Python and Replit](https://ritza.co/showcase/repl.it/building-news-word-clouds-using-python-and-repl-it)\n\nExtending the beginner's web scraping tutorial, you'll build a more advanced scraper that extracts the plain text from news articles, stripping away the 'boilerplate' content, such as text in sidebars.\n\n#### [Building a Discord Bot with Python and Replit](https://ritza.co/showcase/repl.it/building-a-discord-bot-with-python-and-repl-it)\n\nBuild an echo bot using the Discord API. Your bot will always respond with exactly what you send it, but you can customize it afterward to do something more useful.\n\n#### [Building a Discord bot with Node.js and Replit](https://ritza.co/showcase/repl.it/building-a-discord-bot-with-node-and-repl-it)","metadata":{"id":973}}],["974",{"pageContent":"#### [Building a Discord bot with Node.js and Replit](https://ritza.co/showcase/repl.it/building-a-discord-bot-with-node-and-repl-it)\n\nA NodeJS version of the Discord bot tutorial above. Even if you prefer Python, it's good to go through this one too to get experience with other languages.\n\n#### [Creating and hosting a basic web application with Django and Replit](https://ritza.co/showcase/repl.it/creating-and-hosting-a-basic-django-application-with-django-and-repl-it)\n\nBuild a django web application and host it with Replit. You'll use geolocation a weather API to show the user their local weather forecast.\n\n#### [Building a CRM app with NodeJS, Replit, and MongoDB](https://ritza.co/showcase/repl.it/building-a-crm-app-with-nodejs-repl-it-and-mongo-db)\n\nAnother web application, but using NodeJS instead of Django. This is a different application where you'll build a basic app to manage customer information.\n\n#### [Introduction to Machine Learning with Python and Replit](https://ritza.co/showcase/repl.it/introduction-to-machine-learning-with-python-and-repl-it)\n\nBuild a machine-learning based text classifier. We skip the maths but show how you can use machine learning libraries to implement useful solutions without in-depth theoretical knowledge.\n\n#### [Quicksort tutorial: Python implementation with line by line explanation](https://ritza.co/showcase/repl.it/quicksort-tutorial-python-implementation-with-line-by-line-explanation)\n\nWhether you're applying for jobs or just like algorithms, it's useful to understand how sorting works. In real projects, most of the time you'll just call `.sort()`, but here you'll build a sorter from scratch and understand how it works.\n\n#### [Spotify API project 1: Simple online mixtape](https://mixtape-tutorial.datadesigns.repl.co/)\n\nDuring this hands-on tutorial you'll learn how to use Python to:\n\n- collect data from web-based APIs\n- create a data-driven web application","metadata":{"id":974}}],["975",{"pageContent":"During this hands-on tutorial you'll learn how to use Python to:\n\n- collect data from web-based APIs\n- create a data-driven web application\n\nYou'll be working with the [Spotify API](https://developer.spotify.com/documentation/web-api/) to complete your own web app, using the [MixTape template](https://mixtape.datadesigns.repl.co/) and [Replit database](/misc/database). Here's a [completed example](https://mixtape-example.datadesigns.repl.co/).\n\n#### [Spotify API project 2: Song seeder and analytics web app](https://seeder-tutorial.datadesigns.repl.co/)\n\nThis tutorial follows on from the [MixTape tutorial](https://mixtape-tutorial.datadesigns.repl.co/)\n\n- Object-oriented programming (creating classes and methods)\n- Processing, aggregating and analysing data using `pandas`\n- Data visualisation using `chartify` (a package based on `bokeh`)\n\nHere's an example of the [finished app](https://seeder.datadesigns.repl.co/).","metadata":{"id":975}}],["976",{"pageContent":"---\ntitle: 2D Platform Game with PyGame\n---\n\n# Build a 2D Platform Game with PyGame and Replit\n\nIn a [previous tutorial](/tutorials/python/building-a-game-with-pygame) we introduced graphical game development with PyGame, covering how to develop a 2D game with animated sprites and user interaction. In this tutorial, we'll go a step further and create a 2D platformer, where you can have an alien walk and jump around a room full of boxes. The previous PyGame tutorial is not a prerequisite for trying this one.\n\nWe're going to focus on basic animation and movement to create a solid base from which you can continue on to build an entire platform game, complete with enemies, power-ups and multiple levels.\n\n## Getting Started\n\nCreate a new repl and select \"PyGame\" from the language dropdown.\n\n![](https://docimg.replit.com/images/tutorials/14-2d-platform-game/14-01-new-pygame-repl.png)\n\nYou'll see \"Python3 with PyGame\" displayed in the default console and a separate pane in the Replit IDE where you will be able to see and interact with the game you will create.\n\nBefore we start writing code, we're going to need a few sprites, which we've made available [here](https://tutorial-files.util.repl.co/2d-platform-game/2d-platform-game-sprites.zip). Extract this ZIP file and add the files inside to your repl using the `upload file` function. You can select multiple files to upload at once. Your repl's file pane should now look like this:\n\n![](https://docimg.replit.com/images/tutorials/14-2d-platform-game/14-02-repl-files.png)\n\nIn this tutorial, we will be gradually building up the `main.py` file, adding code in different parts of the file as we go along. Each code snippets will contain some existing code to give you an idea of where in the file the new additions should be placed. The line `# ...` will be used to represent existing code that has been left out for brevity.\n\n### Setting up the scaffolding\n\nWe will start with the following code in `main.py`, which draws a black screen:\n\n```python\nimport pygame","metadata":{"id":976}}],["977",{"pageContent":"### Setting up the scaffolding\n\nWe will start with the following code in `main.py`, which draws a black screen:\n\n```python\nimport pygame\n\nWIDTH = 400\nHEIGHT = 300\nBACKGROUND = (0, 0, 0)\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    clock = pygame.time.Clock()\n\n    while True:\n        screen.fill(BACKGROUND)\n        pygame.display.flip()\n\n        clock.tick(60)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nAt the top of the file, we import `pygame`. Following that, we set the width and height of the screen in pixels, and the background color. This last value is an [RGB](https://www.google.com/search?q=rgb+color+picker) tuple, and will make our background black. To use a white background instead, we would write `(255, 255, 255)`.\n\nThen, in the `main` method, we initiate PyGame, create both the screen and the clock, and start the **game loop**, which is this code:\n\n```python\n    while True:\n        screen.fill(BACKGROUND)\n        pygame.display.flip()\n\n        clock.tick(60)\n```\n\nThe game loop is where everything happens. Because our game runs in real time, our code needs to constantly poll for the user's keystrokes and mouse movements, and constantly redraw the screen in response to those keystrokes and mouse movements, and to other [events](https://www.pygame.org/docs/ref/event.html) in the game. We achieve this with an infinite while loop. PyGame uses the final `clock.tick(60)` line in this loop to adjust the game's framerate in line with how long each iteration of the loop takes, in order to keep the game running smoothly.\n\nNow let's draw something on this black screen. Our game is going to have two sprites: an alien, which will be the player, and a box. To avoid code duplication, let's create a `Sprite` parent class before we create either of those. This class will inherit from the `pygame.sprite.Sprite` class, which gives us useful methods for collision detection – this will become important later on.\n\n```python\nclass Sprite(pygame.sprite.Sprite):","metadata":{"id":977}}],["978",{"pageContent":"```python\nclass Sprite(pygame.sprite.Sprite):\n    def __init__(self, image, startx, starty):\n        super().__init__()\n\n        self.image = pygame.image.load(image)\n        self.rect = self.image.get_rect()\n\n        self.rect.center = [startx, starty]\n\n    def update(self):\n        pass\n\n    def draw(self, screen):\n        screen.blit(self.image, self.rect)\n\ndef main():\n```\n\nAs this class will be the parent for all other objects in our game, we're keeping it quite simple. It has three methods:\n\n- `__init__`, which will create the sprite with a given image and a [PyGame rectangle](https://www.pygame.org/docs/ref/rect.html) based on that image. This rectangle will initially be placed at the position specified by `startx` and `starty`. The sprite's rectangle is what PyGame will use for sprite movement and collision detection.\n- `update`, which we'll use in child classes to handle events, such as key presses, gravity and collisions.\n- `draw`, which we use to draw the sprite. We do this by [blitting](https://en.wikipedia.org/wiki/Bit_blit) it onto the screen.\n\nNow we can create our `Player` and `Box` objects as child classes of `Sprite`:\n\n```python\nclass Sprite(pygame.sprite.Sprite):\n    # ...\nclass Player(Sprite):\n    def __init__(self, startx, starty):\n        super().__init__(\"p1_front.png\", startx, starty)\n\nclass Box(Sprite):\n    def __init__(self, startx, starty):\n        super().__init__(\"boxAlt.png\", startx, starty)\n\ndef main():\n```\n\nWe'll add more code to the player later, but first let's draw these sprites on the screen.\n\n### Drawing the sprites\n\nLet's go back to our `main` function and create our sprites. We'll start with the player:\n\n```python\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    clock = pygame.time.Clock()\n\n    player = Player(100, 200)\n```\n\nThen we need to put boxes under the player's feet. As we will be placing multiple sprites, we'll create a PyGame [sprite group](https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.Group) to put them in.\n\n```python","metadata":{"id":978}}],["979",{"pageContent":"```python\n    player = Player(100, 200)\n\n    boxes = pygame.sprite.Group()\n```\n\nOur box sprites are 70 pixels wide, and we need to span over the screen width of 400 pixels. We can do this in a `for` loop using Python's [`range`](https://docs.python.org/3/library/functions.html#func-range):\n\n```python\n    player = Player(100, 200)\n\n    boxes = pygame.sprite.Group()\n    for bx in range(0,400,70):\n        boxes.add(Box(bx,300))\n\n```\n\nNow we need to go back to the game loop and add some code to make things happen. First, we'll have PyGame put new events on the event queue, and then we'll call the player's `update` function. This function will handle the [events](https://www.pygame.org/docs/ref/event.html) generated by `pygame.event.pump()`.\n\n```python\n    while True:\n        pygame.event.pump()\n        player.update()\n        # ...\n```\n\nFor a more complex game, we would want to loop through a number of sprites and call each one's `update` method, but for now just doing this with the player is sufficient. Our boxes won't have any dynamic behavior, so there's no need to call their `update` methods.\n\nIn contrast to `update`, we need all our sprites to draw themselves. After drawing the background, we'll add a call to the player's draw method. To draw the boxes, we can call PyGame's [`Group.draw`](https://www.pygame.org/docs/ref/sprite.html#pygame.sprite.Group.draw) on our `boxes` group.\n\n```python\n    while True:\n        pygame.event.pump()\n        player.update()\n\n        # Draw loop\n        screen.fill(BACKGROUND)\n        player.draw(screen)\n        boxes.draw(screen)\n        pygame.display.flip()\n\n        clock.tick(60)\n```\n\nOur game loop is now set up to update and draw every sprite in the game in each cycle of the game loop. If you run the game now, you should see both the player and the line of boxes on the screen.\n\n![](https://docimg.replit.com/images/tutorials/14-2d-platform-game/14-03-platform-game-1.png)\n\nNext, we're going to add some user interaction.\n\n## Making the Player Walk","metadata":{"id":979}}],["980",{"pageContent":"![](https://docimg.replit.com/images/tutorials/14-2d-platform-game/14-03-platform-game-1.png)\n\nNext, we're going to add some user interaction.\n\n## Making the Player Walk\n\nLet's return to the `Player` object and make it mobile. We'll move the player using `pygame.Rect.move_ip`, which moves a given rectangle by a given vector. This will be wrapped in a `move` method, to simplify our code. Create this method now:\n\n```python\nclass Player(Sprite):\n    # ...\n    def move(self, x, y):\n        self.rect.move_ip([x,y])\n```\n\nNow that we have a way to move the player, it's time to add an `update` method so that this movement can be triggered by key presses. Add an empty `update` method now:\n\n```python\nclass Player(Sprite):\n    def __init__(self, startx, starty):\n        super().__init__(\"p1_front.png\", startx, starty)\n\n    def update(self):\n        pass\n\n    def move(self, x, y):\n        self.rect.move_ip([x,y])\n```\n\nPyGame provides a couple of different ways to check the state of the keyboard. By default, its event queue collects `KEY_DOWN` and `KEY_UP` events when particular keys are pressed and released. Using a `KEY_DOWN` event to move the player seems like the logical thing to do, but because the event is only triggered in same update loop in which the key is first pressed, this would force us to rapidly tap an arrow key to keep moving in a single direction.\n\nWe need a way to move the player whenever an arrow key is held down, not just after it's pressed. So instead of relying on events, we will query the current status of all keyboard keys with `pygame.key.get_pressed()`:\n\n```python\n    def update(self):\n        # check keys\n        key = pygame.key.get_pressed()\n```\n\nThis method returns a tuple of 0s and 1s showing the pressed status of each key on the keyboard. We can thus detect whether the left or right arrow key is currently pressed by indexing the tuple with PyGame's [keyboard constants](https://www.pygame.org/docs/ref/key.html), like so:\n\n```python\n    def update(self):\n        # check keys","metadata":{"id":980}}],["981",{"pageContent":"```python\n    def update(self):\n        # check keys\n        key = pygame.key.get_pressed()\n        if key[pygame.K_LEFT]:\n            self.move(-1,0)\n        elif key[pygame.K_RIGHT]:\n            self.move(1,0)\n```\n\nRun the game. You should now be able to move the player left and right, albeit very slowly. Let's speed things up and reduce our code's reliance on magic numbers at the same time by giving the player a `speed` variable.\n\n```python\nclass Player(Sprite):\n    def __init__(self, startx, starty):\n        super().__init__(\"p1_front.png\", startx, starty)\n\n        self.speed = 4\n\n    def update(self):\n        # check keys\n        key = pygame.key.get_pressed()\n        if key[pygame.K_LEFT]:\n            self.move(-self.speed,0)\n        elif key[pygame.K_RIGHT]:\n            self.move(self.speed,0)\n```\n\nRight now the player glides from side to side, but we have already uploaded images for a [walk cycle](https://en.wikipedia.org/wiki/Walk_cycle) animation, so let's implement that now. First, we'll add some image loading code to our player's `__init__` method:\n\n```python\n    def __init__(self, startx, starty):\n        super().__init__(\"p1_front.png\", startx, starty)\n        self.stand_image = self.image\n\n        self.walk_cycle = [pygame.image.load(f\"p1_walk{i:0>2}.png\") for i in range(1,12)]\n        self.animation_index = 0\n        self.facing_left = False\n\n        self.speed = 4\n```\n\nIn this code, we first designate our initial alien image as `stand_image`. This will allow us to use it for the player when he's standing still. We then load our walking images into a list called `walk_cycle`, using Python's [string formatting](https://docs.python.org/3/library/string.html#string-formatting) to get the correct filename format (`p1_walk01.png` -> `p1_walk11.png`). We then create `self.animation_index`, which will record which frame of the walk cycle the player is on, and `self.facing_left` which will help us to flip the right-facing walking images when the player is walking left.","metadata":{"id":981}}],["982",{"pageContent":"Now let's implement the actual animation. Create a new method called `walk_animation`:\n\n```python\nclass Player(Sprite):\n    # ...\n    def walk_animation(self):\n        self.image = self.walk_cycle[self.animation_index]\n        if self.facing_left:\n            self.image = pygame.transform.flip(self.image, True, False)\n\n        if self.animation_index < len(self.walk_cycle)-1:\n            self.animation_index += 1\n        else:\n            self.animation_index = 0\n```\n\nHere we're setting the player's current image to the frame of the walk cycle we're currently on. If the player is facing left, we use `pygame.transform.flip` to horizontally flip his sprite (the last two arguments are for horizontal and vertical flipping, respectively). Then we animate the player by incrementing the `animation_index`, unless the animation is in its penultimate frame, in which case we return to the start of the animation.\n\nLet's add this to our `update` method now:\n\n```python\n    def update(self):\n        # ...\n        # check keys\n        key = pygame.key.get_pressed()\n        if key[pygame.K_LEFT]:\n            self.facing_left = True\n            self.walk_animation()\n            self.move(-self.speed,0)\n        elif key[pygame.K_RIGHT]:\n            self.facing_left = False\n            self.walk_animation()\n            self.move(self.speed,0)\n        else:\n            self.image = self.stand_image\n```\n\nIf we're moving left or right, we set `self.facing_left` appropriately and call `self.walk_animation`. Otherwise, we set the player's image to `self.stand_image`.\n\nRun the game now to see the player's walk cycle in motion. After that, it's time to make him jump.\n\n## Making the Player Jump\n\nFor our player to be able to jump, we need to implement four things:\n\n1. Upward motion triggered by the up arrow key.\n2. Gravity, to bring the player back down after reaching the top of his jump.\n3. Collision detection, so the player doesn't fall through the ground.\n4. A jumping animation.\n\n### Triggering the jump","metadata":{"id":982}}],["983",{"pageContent":"2. Gravity, to bring the player back down after reaching the top of his jump.\n3. Collision detection, so the player doesn't fall through the ground.\n4. A jumping animation.\n\n### Triggering the jump\n\nTo simply make the player move up, we can just add another `elif`, like so:\n\n```python\n    def update(self):\n        # ...\n        if key[pygame.K_LEFT]:\n            self.facing_left = True\n            self.walk_animation()\n            self.move(-self.speed,0)\n        elif key[pygame.K_RIGHT]:\n            self.facing_left = False\n            self.walk_animation()\n            self.move(self.speed,0)\n        elif key[pygame.K_UP]:\n            self.move(0,-self.speed)\n        else:\n            self.image = self.stand_image\n```\n\nIf you try the game now, you should notice a couple of problems with this approach. Besides the lack of gravity, we can only jump straight up, and must release the left and right arrow keys before we may do so. Much of the gameplay in platformers is reliant on the player's ability to jump to the left or right, so this won't do. To fix this, we'll change our last `elif` to a separate `if` statement:\n\n```python\n        if key[pygame.K_LEFT]:\n            self.facing_left = True\n            self.walk_animation()\n            self.move(-self.speed,0)\n        elif key[pygame.K_RIGHT]:\n            self.facing_left = False\n            self.walk_animation()\n            self.move(self.speed,0)\n        else:\n            self.image = self.stand_image\n\n        if key[pygame.K_UP]:\n            self.move(0,-self.speed)\n```\n\nWe also probably want to be able to jump at a different speed to our walking pace, so let's define another variable and use it.\n\n```python\n    def __init__(self, startx, starty):\n        # ...\n        self.speed = 4\n        self.jumpspeed = 20\n\n    def update(self):\n        # ...\n        if key[pygame.K_UP]:\n            self.move(0,-self.jumpspeed)\n```\n\nThat's better, but now we really need some gravity!\n\n### Adding gravity","metadata":{"id":983}}],["984",{"pageContent":"def update(self):\n        # ...\n        if key[pygame.K_UP]:\n            self.move(0,-self.jumpspeed)\n```\n\nThat's better, but now we really need some gravity!\n\n### Adding gravity\n\nUp until now, we've had only a single operation manipulating our horizontal or vertical speed per update loop. With the addition of gravity, this will change, so we need to restructure our code to calculate our net horizontal and vertical movement before calling `move`. Let's change the `update` function like so:\n\n```python\n    def update(self):\n        hsp = 0 # horizontal speed\n        vsp = 0 # vertical speed\n\n        # check keys\n        key = pygame.key.get_pressed()\n        if key[pygame.K_LEFT]:\n            self.facing_left = True\n            self.walk_animation()\n            hsp = -self.speed\n        elif key[pygame.K_RIGHT]:\n            self.facing_left = False\n            self.walk_animation()\n            hsp = self.speed\n        else:\n            self.image = self.stand_image\n\n        if key[pygame.K_UP]:\n            vsp = -self.jumpspeed\n\n        # movement\n        self.move(hsp,vsp)\n```\n\nWe've added two variables, `hsp` and `vsp`, to represent our horizontal speed and vertical speed. Instead of calling `move` when each key is pressed, we work with these variables throughout the `update` method and then pass their final values into a single `move` call at the end.\n\nBut wait! It makes sense for horizontal speed to be set to 0 at the start of every update loop, because it is directly controlled by the player's key presses. When the left arrow is held down, the player moves left at a speed of 4 pixels per loop; when the left arrow is released, the player instantly stops. Vertical speed will be less controllable – while pressing the up arrow will initiate a jump, releasing it should not stop the player in mid-air. Therefore, vertical speed must persist between loops.\n\nWe can accomplish this by moving the `vsp` definition into `__init__` and making it an instance variable.\n\n```python","metadata":{"id":984}}],["985",{"pageContent":"We can accomplish this by moving the `vsp` definition into `__init__` and making it an instance variable.\n\n```python\n    def __init__(self, startx, starty)\n        # ...\n        self.vsp = 0 # vertical speed\n\n    def update(self):\n        hsp = 0 # horizontal speed\n        # ...\n        if key[pygame.K_UP]:\n            self.vsp = -self.jumpspeed\n\n        # movement\n        self.move(hsp,self.vsp)\n```\n\nNow we can implement gravity. We'll do this by adding a small constant to the player's vertical speed (`vsp`) until it reaches [terminal velocity](https://en.wikipedia.org/wiki/Terminal_velocity).\n\n```python\n\n    def __init__(self, startx, starty)\n        # ...\n        self.gravity = 1\n\n    def update(self):\n        # ...\n        if key[pygame.K_UP]:\n            self.vsp = -self.jumpspeed\n\n        # gravity\n        if self.vsp < 10: # 9.8 rounded up\n            self.vsp += self.gravity\n\n        # movement\n        self.move(hsp,self.vsp)\n```\n\nStart up the game now, and the player will fall straight down, through the ground and off the screen. Gravity's working, but we need somewhere for the player to land.\n\n### Adding collision detection\n\nCollision detection is a key element of most graphical games. In PyGame, the bulk of collision detection involves checking whether rectangles intersect with each other. Luckily, PyGame provides a number of useful built-ins for doing this, so we won't have to think too much about the internal workings of collisions.\n\nLet's add some collision detection now, near the top of our `update` method. We'll create a variable called `onground` and set it to the result of `pygame.sprite.spritecollideany()`.\n\n```python\n    def update(self):\n        hsp = 0 # horizontal speed\n        onground = pygame.sprite.spritecollideany(self, boxes)\n```","metadata":{"id":985}}],["986",{"pageContent":"```python\n    def update(self):\n        hsp = 0 # horizontal speed\n        onground = pygame.sprite.spritecollideany(self, boxes)\n```\n\nThis PyGame method takes two arguments: a single sprite and a group of sprites. It returns whether the sprite given as the first argument, i.e. the player, has a collision with any of the sprites in the group given as the second argument, i.e. the boxes. So we'll know that the player is on a box when it returns `True`.\n\nWe can pass the `boxes` group into the player's `update` method by making a couple of code changes:\n\n```python\n    def update(self, boxes):\n        hsp = 0 # horizontal speed\n        onground = pygame.sprite.spritecollideany(self, boxes)\n        # ...\n\ndef main():\n    # ...\n    while True:\n        pygame.event.pump()\n        player.update(boxes)\n```\n\nNow that we can tell whether the player is on the ground, we can prevent jumping in mid-air by adding a condition to our jump code:\n\n```python\n    def update(self, boxes):\n        # ...\n        if key[pygame.K_UP] and onground:\n            self.vsp = -self.jumpspeed\n```\n\nTo stop the player from falling through the ground, we'll add the following code to our gravity implementation:\n\n```python\n    def update(self, boxes):\n        # ...\n        # gravity\n        if self.vsp < 10 and not onground: # 9.8: rounded up\n            self.vsp += self.gravity\n\n        # stop falling when the ground is reached\n        if self.vsp > 0 and onground:\n            self.vsp = 0\n```\n\n### Adding a jumping animation\n\nLastly, we'll use our last alien image (`p1_jump.png`) to give our player a jumping animation. First create `self.jump_image` in `__init__`:\n\n```python\n    def __init__(self, startx, starty):\n        super().__init__(\"p1_front.png\", startx, starty)\n        self.stand_image = self.image\n        self.jump_image = pygame.image.load(\"p1_jump.png\")\n        # ...\n```\n\nThen create the following `Player` method:\n\n```python\n    def jump_animation(self):\n        self.image = self.jump_image\n        if self.facing_left:","metadata":{"id":986}}],["987",{"pageContent":"# ...\n```\n\nThen create the following `Player` method:\n\n```python\n    def jump_animation(self):\n        self.image = self.jump_image\n        if self.facing_left:\n            self.image = pygame.transform.flip(self.image, True, False)\n```\n\nOur jump animation only has one frame, so the code is much simpler than what we used for our walking animation. To trigger this method when the player is in the air, alter the gravity implementation like so:\n\n```python\n    def update(self, boxes):\n        # ...\n        # gravity\n        if self.vsp < 10 and not onground: # 9.8 rounded up\n            self.jump_animation()\n            self.vsp += self.gravity\n```\n\nRun the game, and you should be able to run and jump! Be careful not to fall off the edge.\n\n## Refining the Game\n\nAt this point, we have our game working on a basic level, but it could use some refinements. First, the jumping is quite unresponsive to user input: pressing the up arrow for any length of time results in the same size jump. Second, our collision detection will only prevent the player from falling through the floor, not walking through walls or jumping through the ceiling.\n\nWe're going to iterate on our code to fix both of these shortcomings.\n\n### Making jumps variable\n\nIt would be nice if the player could control the height of their jump by holding the jump key down for different lengths of time. This is fairly simple to implement – we just need a way to reduce the speed of a jump if the player releases the jump key while the player is still moving up. Add the following code to the player's `__init__` method.\n\n```python\nclass Player(Sprite):\n    def __init__(self, startx, starty):\n        # ...\n        self.min_jumpspeed = 3\n        self.prev_key = pygame.key.get_pressed()\n```\n\nHere we've added a `prev_key` instance variable that will track the state of the keyboard in the previous update loop, and a `min_jumpspeed` variable, which will be the smallest jump we'll allow the player to do, by just tapping the jump key.","metadata":{"id":987}}],["988",{"pageContent":"Now let's add variable jumping to the `update` method, between the code that handles the up arrow key and the code that handles gravity:\n\n```python\n    def update(self, boxes)\n        # ...\n        if key[pygame.K_UP] and onground:\n            self.vsp = -self.jumpspeed\n\n        # variable height jumping\n        if self.prev_key[pygame.K_UP] and not key[pygame.K_UP]:\n            if self.vsp < -self.min_jumpspeed:\n                self.vsp = -self.min_jumpspeed\n\n        self.prev_key = key\n\n        # gravity\n        if self.vsp < 10: # 9.8 rounded up\n            self.vsp += self.gravity\n```\n\nThe `if` statement we've just added will evaluate to `True` if the up arrow key was pressed in the previous loop but is not longer pressed, i.e. it has been released. When that happens, we cut off the player's jump by reducing its speed to the `min_jumpspeed`. We then set `self.prev_key` to the current keyboard state in preparation for the next loop.\n\nTry the game now, and you should notice a different height of jump when lightly tap the up arrow key versus when you hold it down. Play around with the value of `min_jumpspeed` and see what difference it makes.\n\n### Refining collision detection\n\nAs mentioned above, the only collision detection we've implemented applies to the ground beneath the player's feet, so he will be able to walk through walls and jump through ceilings. See this for yourself by adding some boxes above and next to the player in the `main` method.\n\n```python\ndef main():\n    # ...\n    boxes = pygame.sprite.group()\n    for bx in range(0,400,70):\n        boxes.add(Box(bx,300))\n\n    boxes.add(Box(330,230))\n    boxes.add(Box(100,70))\n```\n\n![](https://docimg.replit.com/images/tutorials/14-2d-platform-game/14-04-platform-game-2.png)\n\nAnother issue that you may have already noticed is that the player sinks into the ground after some jumps – this results from the imprecision of our collision detection.","metadata":{"id":988}}],["989",{"pageContent":"Another issue that you may have already noticed is that the player sinks into the ground after some jumps – this results from the imprecision of our collision detection.\n\nWe're going to fix these problems by making a subtle change to how we deal with collisions with boxes. Rather than deciding that we're on the ground when the player sprite is in collision with a box, we'll check whether the player is 1 pixel above a collision with a box. We'll then apply the same principle for left, right and up, stopping the player just before a collision.\n\nFirst, let's give the player a `check_collision` method to make these checks:\n\n```python\nclass Player(Sprite):\n    # ...\n    def check_collision(self, x, y, boxes):\n        self.rect.move_ip([x,y])\n        collide = pygame.sprite.spritecollideany(self, boxes)\n        self.rect.move_ip([-x,-y])\n        return collide\n```\n\nHere, we're moving the player by a specified amount, checking for a collision, and then moving the player back. This back and forth movement happens before the player is drawn to the screen, so the user won't notice anything.\n\nLet's change our `onground` check to use this method:\n\n```python\n    def update(self, boxes):\n        hsp = 0\n        onground = self.check_collision(0, 1, boxes)\n```\n\nRun the game now, and you may be able to notice a very slight difference in how the player stands on the ground from before.\n\nThis doesn't yet solve our horizontal and upward collisions problems, though. For that, we'll need to implement our new `check_collision` method directly into the player's `move` method. The first thing we'll need to do is prepare the `x` and `y` parameters for additional processing:\n\n```python\n    def move(self, x, y):\n        dx = x\n        dy = y\n        self.rect.move_ip([dx,dy])\n```","metadata":{"id":989}}],["990",{"pageContent":"```python\n    def move(self, x, y):\n        dx = x\n        dy = y\n        self.rect.move_ip([dx,dy])\n```\n\nThen we're going to check for collisions, so we need to start passing `boxes` into `move`. We're going to do this for `x` and `y` separately, starting with `y`. We'll check for a collision after moving `dy` pixels vertically, decrementing `dy` until we no longer collide with a box:\n\n```python\n    def update(self, boxes):\n        # ...\n        # movement\n        self.move(hsp, self.vsp, boxes)\n\n    def move(self, x, y, boxes):\n        dx = x\n        dy = y\n\n        while self.check_collision(0, dy, boxes):\n            dy -= 1\n\n        self.rect.move_ip([dx,dy])\n```\n\nBut wait! This code will only work as intended if we're moving down and `dy` is positive. If `dy` is negative, this will just move us further into a collision, not away from it. To fix this, we'll need to import `numpy` at the top of our file, so we can use `numpy.sign`.\n\n```python\nimport pygame, numpy\n# ...\n```\n\n`numpy.sign` takes an integer and returns 1 if it's positive, -1 if it's negative, and 0 if it's 0. This is exactly the functionality we need!\n\n```python\n    def move(self, x, y, boxes):\n        dx = x\n        dy = y\n\n        while self.check_collision(0, dy, boxes):\n            dy -= numpy.sign(dy)\n\n        self.rect.move_ip([dx,dy])\n```\n\nNow do the same for `dx`. As we've already figured out the appropriate `dy` for our movement, we'll include that in the collision check.\n\n```python\n    def move(self, x, y, boxes):\n        dx = x\n        dy = y\n\n        while self.check_collision(0, dy, boxes):\n            dy -= numpy.sign(dy)\n\n        while self.check_collision(dx, dy, boxes):\n            dx -= numpy.sign(dx)\n\n        self.rect.move_ip([dx,dy])\n```\n\nRun the game. The player should now stop when he runs into a wall or jumps into a ceiling.\n![](https://docimg.replit.com/images/tutorials/14-2d-platform-game/14-05-platform-game-final.png)\n\n## Where Next?","metadata":{"id":990}}],["991",{"pageContent":"![](https://docimg.replit.com/images/tutorials/14-2d-platform-game/14-05-platform-game-final.png)\n\n## Where Next?\n\nIf you'd like to continue working on this game, you can find a large number of matching art assets [here](https://www.kenney.nl/assets/platformer-art-pixel-redux). Try implementing some of these features:\n\n- More jump refinements, such as [jump grace time and input buffering](https://www.gamasutra.com/blogs/LisaBrown/20171005/307063/GameMaker_Platformer_Jumping_Tips.php).\n- Moving platforms.\n- Slopes.\n- Water and swimming mechanics.\n- Hazards like spike pits and enemies who are also subject to gravity.\n- [Double jumping](https://en.wikipedia.org/wiki/Glossary_of_video_game_terms#Double_jump).\n\nYou can find our game repl below:\n\n<iframe height=\"800px\" width=\"100%\" src=\"https://replit.com/@ritza/2D-platform-game?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":991}}],["992",{"pageContent":"---\ntitle: \"Audio: create a media player\"\n---\n\n# Replit Audio\n\n![](https://docimg.replit.com/images/tutorials/12-audio/12-01-audio-heading.png)\n\nMost people control their music players manually, pressing the pause button to pause a track or hitting a volume up control to raise the volume. With Replit, you can automate your media experience using code.\n\nIn this tutorial, we'll build a media player that can play audio files programmatically, allowing the user to pause playback, change the track, change the volume, or get looping information by giving text commands.\n\nWe'll also outline how this could be integrated into other applications, such as a chatbot, but we'll leave the implementation of that as an exercise for the reader.\n\n## Understanding how audio works on Replit\n\nIn Unix systems, including the ones that Replit is built on, [everything is a file](https://en.wikipedia.org/wiki/Everything_is_a_file). You might think of file types like PDFs, text files, image files or audio files, but in fact even things like printers are often \"seen\" as files by the underlying operating system.\n\nReplit uses a special file at `/tmp/audio` to control media output. There are more details on how to manipulate this file directly in the [audio docs](/tutorials/replit/playing-audio-replit), but Replit also provides a higher level Python library that gives us some higher level functions like \"play_audio\". We'll be using the library in this tutorial.\n\n## Getting a free audio file from the Free Music Archive\n\nYou can use your own mp3 files if you prefer, but as most music is under copy protection, we'll use a file from the [Free Music Arhive](https://freemusicarchive.org/search) for demo purposes.\n\nLet's grab the URL of a file we want so that we can use code to download it to our Replit project.\n\nSearch for a song that you like, right-click on the download link and press \"copy link location\", as shown below.","metadata":{"id":992}}],["993",{"pageContent":"Search for a song that you like, right-click on the download link and press \"copy link location\", as shown below.\n\n![**Image 2:** *Downloading an audio track*](https://docimg.replit.com/images/tutorials/12-audio/12-02-FMA-get-link.png)\n\n## Downloading audio files to our project\n\nOur first goal is to download the song and play it.\n\nCreate a new Python repl called `audio` and add the following code to the `main.py` file.\n\n```python\nimport requests\n\nurl = \" https://files.freemusicarchive.org/storage-freemusicarchive-org/music/Oddio_Overplay/MIT_Concert_Choir/Carmina_Burana/MIT_Concert_Choir_-_01_-_O_Fortuna.mp3\"\n\nr = requests.get(url)\nwith open(\"o_fortuna.mp3\", \"wb\") as f:\n    f.write(r.content)\n```\n\nChange the URL to the one you chose and `o_fortuna.mp3` to something more appropriate if you chose a different song.\n\nThis downloads the song, opens up a binary file, and writes the contents of the download to the file. You should see the new file pop up in the files tab on the left after you run this code.\n\n![**Image 3:** *Viewing the downloaded audio file in your files tab.*](https://docimg.replit.com/images/tutorials/12-audio/12-03-download-song.png)\n\nInstead of downloading the audio file using `requests` as shown above, you can also press the `add file` button in your repl and upload an audio file from your local machine.\n\n## Playing the audio file using Python\n\nNow that we have the file we can play it by importing the `audio` module and calling the `play_file` method. Replace the code in `main.py` with the following:\n\n```python\nfrom replit import audio\nimport time\n\naudio.play_file(\"o_fortuna.mp3\")\ntime.sleep(10)\n```\n\nNote that your repl usually dies the moment there is no more code to execute, and playing audio doesn't keep it alive. For now, we are sleeping for 10 seconds which keeps the repl alive and the audio playing. If you run this, you should hear the first 10 seconds of the track before it cuts out.","metadata":{"id":993}}],["994",{"pageContent":"It's not ideal to keep the execution loop locked up in a `sleep()` call as we can't interact with our program so we can't control the playback in any way.\n\nTo keep the music playing until the user presses a key, change the last line to:\n\n```python\nchoice = input(\"Press enter to stop the music. \")\n```\n\nNow the program is blocked waiting for user input and the music will keep playing until the user enters something.\n\nLet's add some more useful controls.\n\n## Allowing the user to pause, change volume, or get information about the currently playing track\n\nThe controls we add next are based around:\n\n- `source.volume`: an attribute that we can add to or subtract from to increase or decrease the volume\n- `source.paused`: an attribute we can change to True or False to pause or unpause the track\n- `source.set_loop()`: a method we can call to specify how many times a track should loop before ending\n\nWe can also display useful information about the current status of our media player by looking at:\n\n- `source.loops_remaining`: an attribute to see how many more time a track will loop\n- `source.get_remaining()`: a method to see the remaining playtime for the current track.\n\nWe'll allow the user to see the current information but for simplicity we'll only update this on each input, so our display will often display 'out of date' information.\n\n### Creating the prompt menu\n\nRemove the code in `main.py` and replace it with the following.\n\n```python\nimport time\nfrom os import system\nfrom replit import audio\n\nmain_message = \"\"\"\n+: volume up\n-: volume down\nk: add loop\nj: remove loop\n<space>: play/pause\n\"\"\"\n```\n\nHere we add one more import for `system` which we'll use to clear the screen so that the user doesn't see old information. We then define a string that will prompt the user with their options.\n\n### Creating the `show_status()` method\n\nLet's add a method that will show the user the current status of our media player. It will take `source` as an input, which is what the `play_media()` method that we already used returns.\n\n```python","metadata":{"id":994}}],["995",{"pageContent":"Let's add a method that will show the user the current status of our media player. It will take `source` as an input, which is what the `play_media()` method that we already used returns.\n\n```python\ndef show_status(source):\n    time.sleep(0.2)\n    system(\"clear\")\n    vbar = '|' * int(source.volume * 20)\n    vperc = int(source.volume * 100)\n    pp = \"⏸️\" if source.paused else \"▶️\"\n\n    print(f\"Volume: {vbar}  {vperc}% \\n\")\n    print(f\"Looping {source.loops_remaining} time(s)\")\n    print(f\"Time remaining: {source.get_remaining()}\")\n    print(f\"Playing: {pp}\")\n    print(main_message)\n```\n\nNote that we add a `time.sleep()` at the top of this function. Because changing the status involves writing to the `/tmp/audio` file we discussed before and reading the status involves reading from this file, we want to wait a short while to ensure we don't read stale information before showing it to the user.\n\nOtherwise our function clears the screen, prints out a text-based volume bar along with the current volume percentage, and shows other information such as whether the track is currently playing or paused, how many loops are left, and how much time is left before the track finishes.\n\nFinally, we need a loop to constantly prompt the user for the next command which will also keep our repl alive and continue playing the track while we are waiting for user input. Add the following `main()` function to `main.py` and call it:\n\n```python\ndef main():\n    source = audio.play_file(\"o_fortuna.mp3\")\n    time.sleep(1)\n    show_status(source)\n\n    while True:\n        choice = input(\"Enter command: \")\n        if choice == '+':\n            source.volume += 0.1\n        elif choice == '-':\n            source.volume -= 0.1\n        elif choice == \"k\":\n            source.set_loop(source.loops_remaining + 1)\n        elif choice == \"j\":\n            source.set_loop(source.loops_remaining - 1)\n        elif choice == \" \":\n            source.paused = not source.paused\n        show_status(source)\n\nmain()\n```","metadata":{"id":995}}],["996",{"pageContent":"elif choice == \"j\":\n            source.set_loop(source.loops_remaining - 1)\n        elif choice == \" \":\n            source.paused = not source.paused\n        show_status(source)\n\nmain()\n```\n\nOnce again, you should replace the \"o_fortuna\" string if you downloaded or uploaded a different audio file.\n\nIf you run the repl now you should hear you track play and you can control it by inputting the various commands.\n\n![**Image 4:** *A preview of our audio status dashboard.*](https://docimg.replit.com/images/tutorials/12-audio/12-04-play-song.png)\n\n## Playing individual tones\n\nInstead of playing audio from files, you can also play specific tones or notes with the `play_tone()` method. This method takes three arguments:\n\n- duration: how long the tone should play for\n- pitch: the frequency of the tone (how high or low it sounds)\n- wave form: the fundamental [wave form](https://www.perfectcircuit.com/signal/difference-between-waveforms) that the tone is built on.\n\nIf you've ever played a musical instrument, you'll probably have come across notes referred to by the letters A-G. With digital audio, you'll specify the pitch in hertz (Hz). \"Middle C\" on a piano is usually 262 Hz and the A above this is 440 Hz.\n\nLet's write a program to play \"Twinkle Twinkle Little Star\". Create a new Python repl and add the following code to `main.py`.\n\n```python\nimport time\nfrom replit import audio\n\ndef play_note(note, duration):\n    note_to_freq = {\n        \"C\": 262, \"D\": 294, \"E\": 330, \"F\": 349, \"G\": 392, \"A\": 440\n    }\n    audio.play_tone(duration, note_to_freq[note], 0)\n    time.sleep(duration)\n\nplay_note(\"C\", 2)\n```\n\nAbove we set up a convenience function to play specific notes for a specific duration. It includes a dictionary mapping the names of notes to their frequencies. We've only done one octave and no sharps or flats, but you can easily extend this to add the other notes.","metadata":{"id":996}}],["997",{"pageContent":"It then plays the tone of the note passed in for the specified duration. We sleep for that duration too, as otherwise the next note will be played before the previous note is finished. We also pass a `0` to `play_tone` which specifies the default sine waveform. You can change it to `1`, `2`, or `3` for triangle, saw, or square, which you can [read about in more detail](https://www.perfectcircuit.com/signal/difference-between-waveforms).\n\nTest that you can play a single note as expected. Now you can play the first part of \"Twinkle Twinkle Little Star\" by defining all of the notes and durations, and then looping through them, calling `play_note` on each in turn.\n\n```python\nnotes = [\"C\", \"C\", \"G\", \"G\", \"A\", \"A\", \"G\", \"F\", \"F\", \"E\", \"E\", \"D\", \"D\", \"C\"]\ndurations = [2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4]\n\nfor i in range(len(notes)):\n    play_note(notes[i], durations[i])\n```\n\nWe can also control the volume of each tone by passing a `volume` argument to `play_tone()`. As for audio files, this is a float where `1` represents 100% volume. If we wanted to implement a _decrescendo_ (gradual decrease in volume), we could modify our code to look as follows:\n\n```python\ndef play_note(note, duration, volume=1):\n    note_to_freq = {\n        \"C\": 262, \"D\": 294, \"E\": 330, \"F\": 349, \"G\": 392, \"A\": 440\n    }\n    audio.play_tone(duration, note_to_freq[note], 0, volume=volume)\n    time.sleep(duration)\n\n\nnotes = [\"C\", \"C\", \"G\", \"G\", \"A\", \"A\", \"G\", \"F\", \"F\", \"E\", \"E\", \"D\", \"D\", \"C\"]\ndurations = [2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4]\n\nvolume = 1\nfor i in range(len(notes)):\n    volume -= 0.05\n    play_note(notes[i], durations[i], volume=volume)\n```","metadata":{"id":997}}],["998",{"pageContent":"durations = [2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4]\n\nvolume = 1\nfor i in range(len(notes)):\n    volume -= 0.05\n    play_note(notes[i], durations[i], volume=volume)\n```\n\nHere we added a `volume` argument to our `play_note()` function so that we can pass it along to `play_tone()`. Each time around the loop we reduce the volume by 5%. Play it again and you should hear the song slowly fade out (if you add more than 20 notes, the volume will hit 0 so you'll have to reduce the step or increase the volume at some point to stop the song going silent).\n\n## Make it your own\n\nIf you followed along you'll have your own version to extend, otherwise you can fork the media player repl below.\n\n_Note: Playing audio from the embedded repl below is not supported. To test out this repl, click \"open in Replit\" at the top right of the embed window. The repl will open in a new window with a pop-up asking you to confirm audio activation._\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@GarethDwyer1/cwr-12-audio-player?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nThe \"Twinkle Twinkle Little Star\" repl can be found at [https://replit.com/@GarethDwyer1/cwr-12-audio-twinkle-twinkle](https://replit.com/@GarethDwyer1/cwr-12-audio-twinkle-twinkle).\n\n## Where next","metadata":{"id":998}}],["999",{"pageContent":"The \"Twinkle Twinkle Little Star\" repl can be found at [https://replit.com/@GarethDwyer1/cwr-12-audio-twinkle-twinkle](https://replit.com/@GarethDwyer1/cwr-12-audio-twinkle-twinkle).\n\n## Where next\n\nControlling your audio files through a text-based interface might feel like a downgrade from using a GUI media player, but you can use these concepts to integrate audio controls into your other applications. For example, you could create a [Discord chatbot](https://ritza.co/showcase/repl.it/building-a-discord-bot-with-python-and-repl-it.html) that plays different tracks and automatically pauses or reduces the volume of your music when you join a Discord voice channel. Or you could integrate audio tracks into a web application or game (e.g. playing a victory or defeat sound at a specific volume given certain conditions).\n\nOnce you can control something using code, the possibilities are pretty broad, so use your imagination!","metadata":{"id":999}}],["1000",{"pageContent":"---\nsidebar_position: 45\n---\n\n# Building a Discord bot with Python and Replit\n\nIn this tutorial, we'll use [Replit](https://replit.com) and Python to build a Discord chatbot. If you're reading this tutorial, you probably have at least heard of Discord and likely have an existing account. If not, Discord is a VoIP and chat application that is designed to replace Skype for gamers. The bot we create in this tutorial will be able to join a Discord server and respond to messages sent by people.\n\nIf you prefer JavaScript, you can find [a translation of this tutorial using Node.js](https://www.codementor.io/@garethdwyer/building-a-discord-bot-with-node-js-and-repl-it-mm46r1u8y) instead of Python.\n\nYou'll find it easier to follow along if you have some Python knowledge and have used Discord or a similar app such as Skype or Telegram before. We won't be covering the very basics of Python, but we will explain each line of code in detail, so if you have any experience with programming, you should be able to follow along.\n\n## Overview and requirements\n\nWe'll be doing all of our coding through the Replit web IDE and hosting our bot with Replit as well, so you won't need to install any additional software on your machine. For this tutorial you will need to create a [Discord](https://discord.com) account (if you already have one, you can skip this). There are instructions for how to do this in the next section.\n\nIn this tutorial, we will be covering:\n\n- Creating an application and a bot user in your Discord account.\n- Creating a server on Discord.\n- Adding our bot to our Discord server.\n\nLet's get through these admin steps first and then we can get to the fun part of coding our bot.\n\n### Creating a bot in Discord and getting a token\n\nYou can sign up for a free account over at [Discord](https://discord.com/register), and can download one of their desktop or mobile applications from the [Discord homepage](https://discord.com). You can also use Discord in the browser.","metadata":{"id":1000}}],["1001",{"pageContent":"Once you have an account, you'll want to create a Discord application. Visit the [Discord Developer Portal](http://discordapp.com/developers/applications) and press the \"New application\" button, as in the image below.\n\n![Creating a new Discord application](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/new-discord-app.png)\n\nFill out a name for your bot and select \"Create\".\n\nThe first thing to do on the next page is to note your Client ID, which you'll need to add the bot to the server. You can come back later and get it from this page, or copy it somewhere where you can easily find it later.\n\n![Record your Client ID](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/appid.png)\n\nYou can also rename the application and provide a description for your bot at this point and press \"Save Changes\".\n\nYou have now created a Discord application. The next step is to add a bot to this application, so head over to the \"Bot\" tab using the menu on the left and press the \"Add Bot\" button, as indicated below. Click \"Yes, do it\" when Discord asks if you're sure about bringing a new bot to life.\n\n![Adding a bot to our Discord Application](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/addbot.png)\n\nThe last thing we'll need from our bot is a Token. Anyone who has the bot's token can prove that they own the bot, so you'll need to be careful not to share this with anyone. You can get the token by pressing \"Reset Token\", and then copy it to your clipboard it by pressing \"Copy\".\n\n![Generating a token for our Discord bot](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/token.png)\n\nTake note of your token or copy it to your clipboard, as we'll need to add it to our code soon.\n\n#### Privileged Gateway Intents","metadata":{"id":1001}}],["1002",{"pageContent":"Take note of your token or copy it to your clipboard, as we'll need to add it to our code soon.\n\n#### Privileged Gateway Intents\n\nIn order for your bot to receive events such as `on_message`, you will need to enable the `SERVER MEMBERS INTENT` in your bot's settings. You can do this by going to the `Bot` tab in your application settings and enabling the `SERVER MEMBERS INTENT` switch.\n\n![Enabling the SERVER MEMBERS INTENT](https://docimg.replit.com/images/tutorials/discord-bot/privileged-intents.png)\n\nRead more about privileged gateway intents [here](https://discordpy.readthedocs.io/en/latest/intents.html).\n\n### Creating a Discord server\n\nIf you don't have a Discord server to add your bot to, you can create one by either opening the desktop Discord application that you downloaded earlier or returning to the Discord home page in your browser. Press the \"+\" icon indicated by the exclamation mark, as shown below, to create a server.\n\n![Creating a Discord server](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/create-server.png)\n\nPress \"Create a server\" in the screen that follows, and then give your server a name. Once the server is up and running, you can chat with yourself, or invite some friends to chat with you. Soon we'll invite our bot to chat with us as well.\n\n### Adding your Discord bot to your Discord server\n\nOur Discord bot is still just a shell at this stage as we haven't written any code to allow him to do anything, but let's go ahead and add him to our Discord server anyway. To add a bot to your server, you'll need the Client ID from the \"General Information\" page that we looked at before when we created our ReplBotApplication (ie. the client ID, not the secret bot Token).\n\nCreate a URL that looks as follows, but using your Client ID instead of mine at the end:\n\nhttps://discordapp.com/api/oauth2/authorize?scope=bot&client_id=746269162917331028","metadata":{"id":1002}}],["1003",{"pageContent":"Create a URL that looks as follows, but using your Client ID instead of mine at the end:\n\nhttps://discordapp.com/api/oauth2/authorize?scope=bot&client_id=746269162917331028\n\nVisit the URL that you created, in your web browser and you'll see a page similar to the following where you can choose which server to add your bot to.\n\n![Authorizing our bot to join our server](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/bottoserver.png)\n\nSelect the server we created in the step before this and hit the \"authorize\" button. After completing the captcha, you should get an in-app Discord notification telling you that your bot has joined your server.\n\nNow we can get to the fun part of building a brain for our bot!\n\n## Creating a Repl and installing our Discord dependencies\n\nThe first thing we need to do is create a Python Repl to write the code for our Discord bot. Over at [Replit](https://replit.com), create a new Repl, choosing \"Python\" as your language.\n\n![New REPL](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/new-repl.png)\n\nWe don't need to reinvent the wheel, as there is already a great Python wrapper for the Discord bot API over on [GitHub](https://github.com/Rapptz/discord.py), which makes it a lot faster to get set up with a basic Python discord bot. To use the library, we can simply write `import discord` at the top of `main.py`. Replit will handle installing this dependency when you press the \"run\" button.\n\n![Import discord](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/import.png)\n\nOur bot is nearly ready to go -- but we still need to plug in our secret token. This will authorize our code to control our bot.\n\n## Setting up authorization for our bot\n\nBy default, Replit code is public. This is great as it encourages collaboration and learning, but we need to be careful not to share our secret bot token (which gives anyone who has access to it full control of our bot).","metadata":{"id":1003}}],["1004",{"pageContent":"To get around the problem of needing to give our _code_ access to the token while allowing others to access our code but _not_ our token, we'll be using [environment variables](https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps). Replit allows us to set secret environment variables through the \"Secrets (Environment variables)\" menu option.\n\n![Secrets Menu Option](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/secrets-menu.png)\n\nOpen the \"Secrets\" menu option, there you will be able to set environment variables for your Repl. Set the key as the name of your environment variable to `DISCORD_BOT_SECRET`. Set the value as your bot's secret token (note that this is the second token that we got while setting up the bot -- different from the Client ID that we used to add our bot to our server). It should look something like:.\n\n![Set Secrets Key Value](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/secrets.png)\n\nYou'll need to:\n\n- **Replace** the token (in the value section) with the token that Discord gave you when creating your own bot.\n- Click \"Add new secret\" to create your environment variable.\n- Run the code again. Sometimes you'll need to refresh the whole page to make sure that your environment variables are successfully loaded.\n\nLet's make a Discord bot that repeats everything we say but in reverse. We can do this in only a few lines of code. In your `main.py` file, add the following:\n\n```python\nimport os\nimport discord\n\ndiscord.Client(intents=discord.Intents.all())\n\n@client.event\nasync def on_ready():\n    print(\"I'm in\")\n    print(client.user)\n\n@client.event\nasync def on_message(message):\n    if message.author != client.user:\n        await message.channel.send(message.content[::-1])\n\nmy_secret = os.environ['DISCORD_BOT_SECRET']\nclient.run(my_secret)\n```\n\nLet's tear this apart line by line to see what it does.","metadata":{"id":1004}}],["1005",{"pageContent":"await message.channel.send(message.content[::-1])\n\nmy_secret = os.environ['DISCORD_BOT_SECRET']\nclient.run(my_secret)\n```\n\nLet's tear this apart line by line to see what it does.\n\n- **Lines 1-2** import the discord library that we installed earlier and the built-in operating system library, which we'll need to access our bot's secret token.\n- In **line 4**, we create a Discord `Client`. This is a Python object that we'll use to send various commands to Discord's servers.\n- In **line 6**, we say we are defining an `event` for our client. This line is a Python decorator, which will take the function directly below it and modify it in some way. The Discord bot is going to run _asynchronously_, which might be a bit confusing if you're used to running standard Python. We won't go into asynchronous Python in depth here, but if you're interested in what this is and why it's used, there's a good guide over at [FreeCodeCamp](https://medium.com/free-code-camp/a-guide-to-asynchronous-programming-in-python-with-asyncio-232e2afa44f6). In short, instead of running the code in our file from top to bottom, we'll be running pieces of code in response to specific events.\n- In **lines 7-9** we define what kind of event we want to respond to, and what the response should be. In this case, we're saying that in response to the `on_ready` event (when our bot joins a server successfully), we should output some information server-side (i.e. this will be displayed in our Repl's output, but not sent as a message through to Discord). We'll print a simple `I'm in` message to see that the bot is there and print our bot's user id (if you're running multiple bots, this will make it easier to work out who's doing what).","metadata":{"id":1005}}],["1006",{"pageContent":"- **Lines 11-14** are similar, but instead of responding to an `on_ready` event, we tell our bot how to handle new messages. **Line 13** says we only want to respond to messages that aren't from us (otherwise our bot will keep responding to himself -- you can remove this line to see why that's a problem), and **line 14** says we'll send a new message to the same channel where we received a message (`message.channel`) and the content we'll send will be the same message that we received, but backwards (`message.content[::-1]` - `::-1` is a slightly odd but useful Python idiom to reverse a string or list).\n\nThe last two lines get our secret token from the environment variables that we set up earlier and then tell our bot to start up.\n\nPress the \"Run\" button again and you should see your bot reporting a successful channel join in the Repl output.\n\n![Seeing our bot join our server](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/botjoin.png)\n\nOpen Discord, and from within the server we created earlier, select your ReplBotApplication from the pane on the right-hand side of the screen.\n\n![The Repl bot is active](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/selectbot.png)\n\nOnce you have selected this, you will be able to send a message (by typing into the box highlighted below) and see your bot respond!\n\n![Send a message to your bot](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/messagebox.png)\n\nThe bot responds each time, reversing the text we enter.\n\n![Our bot can talk](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/chat.png)\n\n## Keeping our bot alive\n\nYour bot can now respond to messages, but only for as long as your Repl is running. If you close your browser tab or shut down your computer, your bot will stop and no longer respond to messages on Discord.","metadata":{"id":1006}}],["1007",{"pageContent":"Replit will keep your code running after you close the browser tab only if you are running a web server and you have a [Deployment](/hosting/deployments/about-deployments) framework.\n\nCreate a new file in your project called `keep_alive.py` and add the following code:\n\n```python\nfrom flask import Flask\nfrom threading import Thread\n\napp = Flask('')\n\n@app.route('/')\ndef home():\n    return \"I'm alive\"\n\ndef run():\n  app.run(host='0.0.0.0',port=8080)\n\ndef keep_alive():\n    t = Thread(target=run)\n    t.start()\n```\n\nWe won't go over this in detail as it's not central to our bot, but here we start a web server that will return \"I'm alive\" if anyone visits it, and we'll provide a method to start this in a new thread (leaving the main thread for our Repl bot).\n\nIn our `main.py` file, we need to add an import for this server at the top. Add the following line near the top of `main.py`.\n\n```python\nfrom keep_alive import keep_alive\n```\n\nIn `main.py` we need to start up the web server just before you start up the bot. Add this line of code to `main.py`, just before the line with `my_secret = os.environ['DISCORD_BOT_SECRET']`:\n\n```python\nkeep_alive()\n```\n\nAfter doing this and hitting the green \"Run\" button again, you should see some changes to your Repl. For one, you'll see a new pane in the top right which shows the web output from your server. We can see that visiting our Repl now returns a basic web page showing the \"I'm alive\" string that we told our web server to return by default. In the bottom-right pane, you can also see some additional output from Flask starting up and running continuously, listening for requests.\n\n![Output from our Flask server](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/keepalive.png)","metadata":{"id":1007}}],["1008",{"pageContent":"![Output from our Flask server](https://docimg.replit.com/images/tutorials/basic-discord-bot-python/keepalive.png)\n\nNow your bot will stay alive even after closing your browser or shutting down your development machine. Repl will still clean up your server and kill your bot after about one hour of inactivity, so if you don't use your bot for a while, you'll have to log into Repl and start the bot up again or use a [Deployments](/hosting/deployments/about-deployments) repl to keep it running 24/7.\n\n## Forking and extending our basic bot\n\nThis is not a very useful bot as is, but the possibilities are only limited by your creativity now! You can have your bot receive input from a user, process the input, and respond in any way you choose. In fact, with the basic input and output that we've demonstrated, we have most of the components of any modern computer, all of which are based on the [Von Neumann architecture](https://en.wikipedia.org/wiki/Von_Neumann_architecture) (we could easily add the missing memory by having our bot write to a file, or with a bit more effort by linking an [SQLite database](https://www.sqlite.org/index.html) for persistent storage).\n\nIf you followed along with this tutorial, you'll have your own basic Repl bot to play around with and extend. If you were simply reading, you can easily fork this bot at [https://replit.com/@ritza/discord-bot](https://replit.com/@ritza/discord-bot) and extend it how you want. Happy hacking!\n\nIf you're stuck for ideas, why not link up your Discord bot to the [Twitch API](https://dev.twitch.tv/) to get notified when your favourite streamers are online, or build a [text adventure](https://en.wikipedia.org/wiki/Interactive_fiction).","metadata":{"id":1008}}],["1009",{"pageContent":"You can also check out this [tutorial](https://www.codementor.io/@garethdwyer/building-a-discord-bot-with-node-js-and-repl-it-mm46r1u8y), where we build exactly the same bot but using Node.js instead of Python. Even if you prefer Python, it's often a good idea to build the same project in two languages so that you can better appreciate the differences and similarities.\n\n## Further Reading:\n\nIf you are interested, here are some more Discord bot tutorials:\n\n- [Role assignment bot with Python](/tutorials/python/discord-role-bot)\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/discord-bot?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1009}}],["1010",{"pageContent":"---\ntitle: Card game with pygame\n---\n\n# Building a card game with pygame\n\nCard games are a great way to learn how to program. We get to build a model of the game, game logic, and a visual interface.\n\n![Playing SnaPy](https://replit-docs-images.bardia.repl.co/images/tutorials/card-game-pygame/gameplay.gif)\n\nA classic card game is Snap. The rules are pretty simple, which makes it great for building a first card game. We can spend more time on the modelling and visualization, which can be used on other card games too.\n\n## The game rules\n\nTo simplify this tutorial, we'll limit our game to 2 players. Here's the rules for our 2 player game:\n\n- The deck is shuffled, and dealt evenly between the two players.\n- Each player takes turns drawing a card and places it face up on top of the last card drawn.\n- If the card placed is a match (by value) of the previous card, the first player to call \"Snap!\" wins the entire pile of cards. These cards are added to their hand.\n- If a player calls \"Snap!\" and the card placed is not a match (i.e. falsely calls \"Snap!\"), then the other player takes the pile of cards.\n- The first player to run out of cards loses, and the other player wins.\n\n## Creating a new project\n\nLet's head over to [Replit](https://replit.com) and create a new repl. Choose **Pygame** as the template to create a repl from. Now, give this repl a name, like \"SnaPy\".\n\n![Creating a new repl](https://replit-docs-images.bardia.repl.co/images/tutorials/card-game-pygame/new-repl.png)\n\nAfter the repl has booted up, you should see a `main.py` file. We'll use this file for the main game loop, but we'll create other files for the game models and logic.\n\nFor our Snap game, we'll need some images of cards to display. Create a folder called `images` in the file explorer of your repl.\n\nNow download [these card images](https://tutorial-files.util.repl.co/card-game-pygame/snapy-resources.zip) to your computer. Unzip the file, and drag and drop the images it contains to the `images` folder in your repl.","metadata":{"id":1010}}],["1011",{"pageContent":"## Getting started with pygame\n\nA popular game framework in Python is [pygame](https://www.pygame.org/). It has functionality to draw shapes and images to the screen, get user input, play sounds and more. We'll use some of the basic functionality in this game to see how it works.\n\nWe can import it into our project by adding the following line to our `main.py` file:\n\n```python\nimport pygame\n```\n\nTo get the pygame framework started, we need to add some initialization code:\n\n```python\npygame.init()\nbounds = (1024, 768)\nwindow = pygame.display.set_mode(bounds)\npygame.display.set_caption(\"SnaPy\")\n```\n\n- **Line 1** starts up the pygame system, by [initializing](https://www.pygame.org/docs/ref/pygame.html?highlight=init#pygame.init) its modules (for example, the font, sound and graphics code).\n- **Line 2** creates a new tuple called `bounds`. This tuple contains the dimensions of the window that we'll run our Snap game in.\n- **Line 3** creates a new window for us to display our game in.\n- **Line 4** gives the window a caption, or title. This can be whatever you'd like to call the game.\n\nIf you run the project, using the \"Run\" button at the top center of the Repl, you should see a small blank window come up. That means everything is initialized and working so far. Not much, but it's our blank canvas to get started with!\n\n## Designing the game model\n\nPython is an object-oriented language. With object-oriented programming, we identify different parts and entities of the game and model them as classes and objects. Let's draw the game, and see what parts we need to model.\n\n![Game objects](https://replit-docs-images.bardia.repl.co/images/tutorials/card-game-pygame/game-objects.png)\n\nFrom the above image, we can see that we can model the following:\n\n- Individual cards\n- A deck of cards, which is a collection of all the cards\n- Players, with their hand of cards and name\n- A pile of cards, which is a collection of cards that are face up on the table","metadata":{"id":1011}}],["1012",{"pageContent":"- Individual cards\n- A deck of cards, which is a collection of all the cards\n- Players, with their hand of cards and name\n- A pile of cards, which is a collection of cards that are face up on the table\n\nNote that this is one way to group the game parts, but it is not the only way. There are many ways to identify individual objects, and a big factor is how granular you need to be, and how responsibilities are assigned. This is part art, part experience and part computer science. Often we start with a model design, and then refine it over time as we learn more about the game and the dynamics of the model.\n\nWe'll also need logic to control the rules and the state of the game. Often this part of the program is known as the \"game engine\". We'll model this as a class as well.\n\nHere is a diagram of all the classes we'll build.\n\n![Class model](https://replit-docs-images.bardia.repl.co/images/tutorials/card-game-pygame/class-model.png)\n\nThe classes have some of the key properties and methods that they will need.\n\n## Building the game model\n\nLet's start by building the Card class. This class will represent a single card.\n\nCreate a new file called `models.py` in Replit. Inside this file we can define the Card class.\n\nAt the top of the file, add in some package imports:\n\n- `Enum` for enumerations (which we'll use for defining the card suits).\n- `pygame`, to load up the card images.\n- `random`, to use when we shuffle the deck.\n\n```python\nfrom enum import Enum\nimport pygame\nimport random\n```\n\nNow let's add in the suits we'll need for the cards. We'll use the [Enum](https://docs.python.org/3/library/enum.html) class to define the different suits.\n\n```python\nclass Suits(Enum):\n  CLUB = 0\n  SPADE = 1\n  HEART = 2\n  DIAMOND = 3\n```\n\nAlright, the boilerplate is out of the way. Now, lets define the Card class.\n\n```python\nclass Card:\n  suit = None\n  value = None\n  image = None\n\n  def __init__(self, suit, value):\n    self.suit = suit\n    self.value = value","metadata":{"id":1012}}],["1013",{"pageContent":"```python\nclass Card:\n  suit = None\n  value = None\n  image = None\n\n  def __init__(self, suit, value):\n    self.suit = suit\n    self.value = value\n    self.image = pygame.image.load('images/' + self.suit.name + '-' + str(self.value) + '.svg')\n```\n\nFrom this small class, we can see the various parts of a Python class. The first line is the class definition. The next 3 lines are the class properties (variables that are controlled by objects made from the class). Then we have the `__init__` method, which is called the constructor method. This is where we initialize the class. In this case, we'll initialize the suit and value properties for the card. We'll also load the image for the card using Pygame's [`image.load`](https://www.pygame.org/docs/ref/image.html?highlight=load#pygame.image.load) function, with the filepath constructed from the suit and value. This implies that all the card images are all actually named according to the suit and value.\n\nNow that we have suits and cards, let's create a Deck of cards.\n\n```python\nclass Deck:\n  cards = None\n\n  def __init__(self):\n    self.cards = []\n    for suit in Suits:\n      for value in range(1,14):\n        self.cards.append(Card(suit, value))\n\n  def shuffle(self):\n    random.shuffle(self.cards)\n\n  def deal(self):\n    return self.cards.pop()\n\n  def length(self):\n    return len(self.cards)\n```\n\nThe Deck class is a collection of cards. It has a list of `cards`, and a few methods to manipulate the list.\n\nThe constructor, `__init__` initializes the `cards` list, and populates it with all the cards in a deck, using 2 `for` loops. The first loop iterates over the `Suits` enum, and the second loop iterates over the values 1 through 13, which is all the cards in a deck.","metadata":{"id":1013}}],["1014",{"pageContent":"Every deck of cards needs to be shuffled before it is used, so we've defined a `shuffle` method. Python's [random](https://docs.python.org/3/library/random.html) module has a very handy `shuffle` function built in that we can use. `shuffle` takes a list and rearranges the contents of that list in place (i.e. it doesn't return a new list).\n\nThen we have the `deal` method, which removes the last card from the list and returns it. We'll use this to deal the cards to the players.\n\nWe have a `length` method that we'll use to determine if there are any cards left in the deck. This will be useful when dealing out cards to know when to stop.\n\nThe Deck class is now complete.\n\nLet's move to the `Pile` class. This class models the pile of cards face up on the table, that each player adds to when playing.\n\n```python\nclass Pile:\n  cards = None\n\n  def __init__(self):\n    self.cards = []\n\n  def add(self, card):\n    self.cards.append(card)\n\n  def peek(self):\n    if (len(self.cards) > 0):\n      return self.cards[-1]\n    else:\n      return None\n\n  def popAll(self):\n    return self.cards\n\n  def clear(self):\n    self.cards = []\n\n  def isSnap(self):\n    if (len(self.cards) > 1):\n      return (self.cards[-1].value == self.cards[-2].value)\n    return False\n```\n\nThe `Pile` class has one main property: a list of cards, which is initialized in the constructor.\n\nThe `add` method is used when a player plays a card, i.e. adds it to the pile.\n\nThe `peek` method returns the top card of the pile, while still keeping it on the pile. We'll use this to draw the top card, as it is face up. If there are no cards on the pile, indicated by the length of the card array being 0, we'll return `None`.\n\nWhen a player wins, they get all the cards on the pile. The `popAll` method handles this by returning the list of cards. Then we can call the `clear` method to remove all the cards from the pile.","metadata":{"id":1014}}],["1015",{"pageContent":"When a player wins, they get all the cards on the pile. The `popAll` method handles this by returning the list of cards. Then we can call the `clear` method to remove all the cards from the pile.\n\nIf a player calls \"Snap!\", we need to check if the top two cards are the same value. We'll use the `isSnap` method to check this. Python has a handy feature of negative indices. This means an index of `-1` returns the last element in the list, `-2` returns the second last, and so on. This allows us to easily get the last 2 cards added to the pile, and check if they are the same value. Note that in the rules of Snap, only the value is important - the suit is not used.\n\nThe last of the models is the `Player` class.\n\n```python\nclass Player:\n  hand = None\n  flipKey = None\n  snapKey = None\n  name = None\n\n  def __init__(self, name, flipKey, snapKey):\n    self.hand = []\n    self.flipKey = flipKey\n    self.snapKey = snapKey\n    self.name = name\n\n  def draw(self, deck):\n    self.hand.append(deck.deal())\n\n  def play(self):\n    return self.hand.pop(0)\n```\n\nThe `Player` class has a few properties. The `hand` property is a list of cards that the player has.\n\nThe `flipKey` and `snapKey` properties are the keys assigned to player that they use to flip and snap cards.\n\nThe `name` property is the name of the player.\n\nThe `draw` method is used to draw a card from the `deck` passed in the arguments. The `draw` method calls the `deal` method on the `deck`, and adds the card to the `hand` list.\n\nThe `play` method [`pop`](https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types)s a card off the hand list, used when the player plays a card.\n\n## Building the game engine\n\nOk, time to build the game engine that will coordinate the interactions between the models we created.\n\nMake a new file called `engine.py`. Let's start by adding the libraries we'll need.\n\n```python\nfrom enum import Enum\nimport pygame\nfrom models import *\n```","metadata":{"id":1015}}],["1016",{"pageContent":"Make a new file called `engine.py`. Let's start by adding the libraries we'll need.\n\n```python\nfrom enum import Enum\nimport pygame\nfrom models import *\n```\n\nBesides the `Enum` and `pygame` libraries, we import everything, `*`, from our `models.py` file. This way we can use all the classes that we defined in models.\n\nA common element in game engines is keeping track of the state of the game. We'll define a `GameState` enumeration to keep track of the state of the game.\n\n```python\nclass GameState(Enum):\n  PLAYING = 0\n  SNAPPING = 1\n  ENDED = 2\n```\n\nWe only have 3 states, or phases, of the game that we will track. The first is `PLAYING`, which is the main phase of the game, where the players take turns putting down cards. The second is `SNAPPING`. This is the state the game is in when a player calls \"Snap!\". In this state, we check if the snap is valid, and also wait until the players are ready to resume playing. The third is `ENDED`, which is the phase where the game is over, i.e. one player has no more cards to play.\n\nNow, let's start with the engine itself. First, let's add the definition, properties and constructor:\n\n```python\nclass SnapEngine:\n  deck = None\n  player1 = None\n  player2 = None\n  pile = None\n  state = None\n  currentPlayer = None\n  result = None\n\n  def __init__(self):\n    self.deck = Deck()\n    self.deck.shuffle()\n    self.player1 = Player(\"Player 1\", pygame.K_q, pygame.K_w)\n    self.player2 = Player(\"Player 2\", pygame.K_o,pygame.K_p)\n    self.pile = Pile()\n    self.deal()\n    self.currentPlayer = self.player1\n    self.state = GameState.PLAYING\n```\n\nIn the properties, we define the `deck` of cards, `players`, `pile` of cards, and the `state` of the game. We also have a `currentPlayer` property, which keeps track of the player whose turn it is. The `result` property is used to communicate the outcome of a round, or the entire game.\n\nThe constructor initializes objects and stores them in the properties. Note that we assign default names and keys to the players.","metadata":{"id":1016}}],["1017",{"pageContent":"The constructor initializes objects and stores them in the properties. Note that we assign default names and keys to the players.\n\nWe also call a method we have yet to define, `deal`, to deal the cards to the players.\n\nWe start off the game by setting the `state` to `PLAYING`, and the `currentPlayer` to `player1`.\n\nLet's add some more methods and logic to the engine. To start, the `deal` method:\n\n```python\n  def deal(self):\n    half = self.deck.length() // 2\n    for i in range(0, half):\n      self.player1.draw(self.deck)\n      self.player2.draw(self.deck)\n```\n\nThe deal method is in charge of making sure each player gets half the deck of cards. There are a few ways to do this - this code takes a bit of a literal translation of dealing, by dealing one card to each player alternately. In practice, we'll use a for loop to do this, and in the loop we'll call the `draw` method on each of the `player`s to draw a card.\n\nSince each round of the `for` loop takes a card for each player, 2 cards per loop, we only need to loop for half the number of cards in the deck.\n\nTo find the middle of the deck, we get the length of the deck, and divide it by 2. Note that we use the `//` integer division operator to get back an integer after division, as the meaning of the middle is the index of the middle card. A number with decimals wouldn't make any sense here.\n\nNext, we can add a helper method to switch the current player. We'll use this after each player plays a card to indicate that it's the next player's turn.\n\n```python\n  def switchPlayer(self):\n    if self.currentPlayer == self.player1:\n      self.currentPlayer = self.player2\n    else:\n      self.currentPlayer = self.player1\n```\n\nHere we check which player is the current player and switch `currentPlayer` to the other player.","metadata":{"id":1017}}],["1018",{"pageContent":"self.currentPlayer = self.player2\n    else:\n      self.currentPlayer = self.player1\n```\n\nHere we check which player is the current player and switch `currentPlayer` to the other player.\n\nThe last helper method we need on the engine is one that handles a player winning a round (by calling \"Snap!\" correctly, or the other player falsely calling \"Snap!\"). This method will change the state of the game. It will also add all the cards on the pile to the winner's hand. Then it will clear out the pile so the next round can start:\n\n```python\n  def winRound(self, player):\n    self.state = GameState.SNAPPING\n    player.hand.extend(self.pile.popAll())\n    self.pile.clear()\n```\n\nNow we get to the main logic of the engine. This method will be called from our main game loop, which we will define later. Let's start with the method definition and some basic checks. Then we'll add the logic in sections. Start by adding this method to the engine:\n\n```python\n  def play(self, key):\n    if key == None:\n      return\n\n    if self.state == GameState.ENDED:\n      return\n```\n\nWe'll call this main logic method `play`. It takes whatever key is currently pressed, and processes the logic for that. The first thing we check is if a key has actually been pressed. If it hasn't, we return, as there is nothing to update with the game state.\n\nThe next check to make is if the game is over. If it is, we return, as again, there is nothing to do. If you want to improve the game, you could listen for a key press to restart the game.\n\nNow let's add some of the logic. The first thing is to check if the current player has pressed the key to play, or flip a card onto the pile. If they have pressed their `flipKey`, we call their play method and add the returned card to the pile. Then we switch turn to the next player, by calling our `switchPlayer` method.\n\n```python\n    if key == self.currentPlayer.flipKey:\n      self.pile.add(self.currentPlayer.play())\n      self.switchPlayer()\n```","metadata":{"id":1018}}],["1019",{"pageContent":"```python\n    if key == self.currentPlayer.flipKey:\n      self.pile.add(self.currentPlayer.play())\n      self.switchPlayer()\n```\n\nNext, let's check if any of the players have called \"Snap!\". We'll need to keep track of a few things: who called \"Snap!\", who didn't call \"Snap!\", and if there is a valid snap condition on the pile. Add this logic to the `play` method:\n\n```python\n    snapCaller = None\n    nonSnapCaller = None\n    isSnap = self.pile.isSnap()\n\n    if (key == self.player1.snapKey):\n      snapCaller = self.player1\n      nonSnapCaller = self.player2\n    elif (key == self.player2.snapKey):\n      snapCaller = self.player2\n      nonSnapCaller = self.player1\n```\n\nHere we create two variables, `snapCaller` and `nonSnapCaller`, which keep track of the player who called \"Snap!\" and the player who didn't call \"Snap!\". We also create a variable `isSnap` to keep track of whether there is a valid snap condition on the pile. Then we check if either of the players has called \"Snap!\". If they have, then we set the `snapCaller` and `nonSnapCaller` variables as applicable.\n\nWe now know if \"Snap!\" has been called and which player called it. Let's add the logic to see if the player that called \"Snap!\" wins or loses. Add this logic to the `play` method:\n\n```python\n    if isSnap and snapCaller:\n      self.winRound(snapCaller)\n      self.result = {\n        \"winner\": snapCaller,\n        \"isSnap\": True,\n        \"snapCaller\": snapCaller\n      }\n      self.winRound(snapCaller)\n    elif not isSnap and snapCaller:\n      self.result = {\n        \"winner\": nonSnapCaller,\n        \"isSnap\": False,\n        \"snapCaller\": snapCaller\n      }\n      self.winRound(nonSnapCaller)\n```\n\nWe have two cases: one for a valid snap, and one for an invalid snap.","metadata":{"id":1019}}],["1020",{"pageContent":"\"isSnap\": False,\n        \"snapCaller\": snapCaller\n      }\n      self.winRound(nonSnapCaller)\n```\n\nWe have two cases: one for a valid snap, and one for an invalid snap.\n\nIf the pile is a valid snap, we call the `winRound` method on the player who called \"Snap!\". Then we set the `result` property to a dictionary with the winner, whether it was a valid snap, and the player who called \"Snap!\". This will be used for information when we make the game user interface (UI).\n\nLikewise, for an invalid snap, we call the `winRound` method on the player who didn't call \"Snap!\". Then we set the `result` property to a dictionary with the winner as the `nonSnapCaller`.\n\nIn both cases, we call the `winRound` method with whichever player won the cards. Recall in the `winRound` method we assign the pile to the player's hand. Then we clear the pile, and set the `gameState` to `SNAPPING`.\n\nWe've got just one last thing to check: if any player has run out of cards. If they have, then it means the other player wins. Add this logic to the `play` method:\n\n```python\n    if len(self.player1.hand) == 0:\n      self.result = {\n        \"winner\": self.player2,\n      }\n      self.state = GameState.ENDED\n    elif len(self.player2.hand) == 0:\n      self.result = {\n        \"winner\": self.player1,\n      }\n      self.state = GameState.ENDED\n\n```\n\nIf one of the players has run out of cards, then we set the `result` property to a dictionary with the winner as the other player. Then we set the `state` property to `GameState.ENDED`.\n\n## Setting up the game loop\n\nWe've built the model and the logic in the engine to play a game of Snap. Now we need to define the game loop to run the game.\n\nOpen up the `main.py` file again. We'll start by adding references to the models and engine, so that we can access them when building the UI. Add the following imports right under the `import pygame` line:\n\n```python\nfrom models import *\nfrom engine import *\n```","metadata":{"id":1020}}],["1021",{"pageContent":"```python\nfrom models import *\nfrom engine import *\n```\n\nWe'll start by creating a new game engine object. Add this to the `main.py` file, underneath the Pygame initialization code:\n\n```python\ngameEngine = SnapEngine()\n```\n\nNow the game loop. The game loop's job is to listen for user input, call the engine's `play` method to process that input, and update the UI with the result. Add this to the `main.py` file:\n\n```python\nrun = True\nwhile run:\n  key = None;\n  for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n      run = False\n    if event.type == pygame.KEYDOWN:\n      key = event.key\n\n  gameEngine.play(key)\n  renderGame(window)\n  pygame.display.update()\n\n  if gameEngine.state == GameState.SNAPPING:\n    pygame.time.delay(3000)\n    gameEngine.state = GameState.PLAYING\n```\n\nWe start off by defining a variable `run`. Then we use this as a condition for a `while` loop. As long as `run` is true, the loop will continuously run the code inside.\n\nIn Pygame, we listen for events on the event queue. We use the `pygame.event.get()` method to get all the events that have happened since the last time we checked. We then iterate through the events, checking if any of them is a `QUIT` event. If they are, we set `run` to false, and break out of the loop to end the program. A `QUIT` event is sent if the user clicks the close button on the window.\n\nIf any of the events is a `KEYDOWN` event, we set the `key` variable to the key that was pressed.\n\nThen we call out to the game engine to process the key that was pressed.\n\nOnce that is done, we can update the UI. We call the `renderGame` method, which we'll get to next.\n\nAfter the UI has been updated, we call the `pygame.display.update()` method to draw it to the screen.","metadata":{"id":1021}}],["1022",{"pageContent":"Once that is done, we can update the UI. We call the `renderGame` method, which we'll get to next.\n\nAfter the UI has been updated, we call the `pygame.display.update()` method to draw it to the screen.\n\nThe final check is to see if the game is in the `SNAPPING` state. If it is, we wait 3 seconds before switching back to the `PLAYING` state. This is so that there is enough time for the players to pause and see what happened. Remember the game loop will go around very quickly, so the delay will help them to see any messages we display in the `renderGame` method.\n\n## Rendering the game\n\nThe last main task is to render the game through a UI. This is where we'll use Pygame to draw the game to the screen.\n\nIn the game loop, we call the `renderGame` method. This method takes a `window` parameter, which is the Pygame window we created in the `main.py` file. The window is the graphics surface that we will draw to. The `renderGame` method will look at the state and result of the `gameEngine`, as well as the players, and draw the appropriate UI to the window.\n\nLet's implement that method now. We'll start by clearing the window, and drawing some fixed UI elements. Add the following code to the `main.py` file, above the game loop.\n\n```python\ncardBack = pygame.image.load('images/BACK.png')\ncardBack = pygame.transform.scale(cardBack, (int(238*0.8), int(332*0.8)))\n\ndef renderGame(window):\n  window.fill((15,0,169))\n  font = pygame.font.SysFont('comicsans',60, True)\n\n  window.blit(cardBack, (100, 200))\n  window.blit(cardBack, (700, 200))\n\n  text = font.render(str(len(gameEngine.player1.hand)) + \" cards\", True, (255,255,255))\n  window.blit(text, (100, 500))\n\n  text = font.render(str(len(gameEngine.player2.hand)) + \" cards\", True, (255,255,255))\n  window.blit(text, (700, 500))\n\n  topCard = gameEngine.pile.peek()\n  if (topCard != None):\n    window.blit(topCard.image, (400, 200))\n```","metadata":{"id":1022}}],["1023",{"pageContent":"window.blit(text, (700, 500))\n\n  topCard = gameEngine.pile.peek()\n  if (topCard != None):\n    window.blit(topCard.image, (400, 200))\n```\n\nFirstly we load an image of the back of a card outside the function. We do this to avoid loading it each time the screen is rendered - this way it is only loaded once. We will use this image to represent the cards in the players' hands, which are face down. pygame's `transform.scale` function is used to scale the image to `0.8` the size of the regular card size. This is just to indicate visually that they are in the background to the main part of the UI, which will be the card at top of the pile.\n\nInside the `renderGame` function, we first clear the window. We use the `fill` method to fill the window with a color, `(15,0,169)` in RGB (Red Green Blue) color notation, which is a dark blue color.\n\nThen we choose a font to use. We use the `SysFont` method to load a font from the system. We pass in the font name, the font size, and a boolean value indicating whether the font should be bold.\n\nNext is to draw the card backs representing the players' hands. We use the [`blit`](https://www.pygame.org/docs/ref/surface.html?highlight=blit#pygame.Surface.blit) method to draw the card back to the window. We pass in the card back image we loaded outside the function, and the screen coordinates we want to draw it at. We draw two card backs, one for each player, one on the far left of the screen, and the other on the far right. We'll draw the pile between these two hands.\n\nTo indicate the current score of the game, we render text showing the number of cards each player currently holds. First, we construct a text object using the font's [`render`](https://www.pygame.org/docs/ref/font.html?highlight=font.sysfont#pygame.font.SysFont) method. We pass in the text we want to render (which is the player's card count and the word 'cards'), and the color we want to use. We then draw the text to the screen by blitting it to the window.","metadata":{"id":1023}}],["1024",{"pageContent":"The last part of the code draws the card at the top of the pile. We use the `peek` method we implemented on the `Pile` class to get the top card. If there is no top card, we don't draw anything. Recall that for each card, we loaded its image in the constructor. This means we can get the image object from the `image` property on the card, without loading it here. Once again we blit the card image to the screen, this time passing in coordinates between the two hands.\n\nThe next part of the UI to draw is some indication of the current state of the game, and whose turn it is. We'll use the `state` property of the `gameEngine` to determine what to draw. We'll use `if` statements to draw the appropriate UI, based on the game state. There are three states to consider:\n\n- **PLAYING** The game is in progress, and we are waiting for the current player to flip a card, or either player to call \"Snap!\". In this case, we render the current player's name and a message to indicate that it is their turn to flip. This message is written in white `(255,255,255)` near the top left of the window.\n- **SNAPPING** A player has called snap. In this case, the message rendered depends on if the snap was valid or not. We can get this information from the `result` property of the `gameEngine`.\n- **ENDING** The game is over. In this case, we render the winner's name, and a message to indicate that they won.\n\nAdd this code to the `renderGame` function, to implement the above logic:\n\n```python\n  if gameEngine.state == GameState.PLAYING:\n    text = font.render(gameEngine.currentPlayer.name + \" to flip\", True, (255,255,255))\n    window.blit(text, (20,50))\n\n  if gameEngine.state == GameState.SNAPPING:\n    result = gameEngine.result\n    if result[\"isSnap\"] == True:\n      message = \"Winning Snap! by \" + result[\"winner\"].name\n    else:\n      message = \"False Snap! by \" + result[\"snapCaller\"].name + \". \" + result[\"winner\"].name + \" wins!\"\n    text = font.render(message, True, (255,255,255))\n    window.blit(text, (20,50))","metadata":{"id":1024}}],["1025",{"pageContent":"else:\n      message = \"False Snap! by \" + result[\"snapCaller\"].name + \". \" + result[\"winner\"].name + \" wins!\"\n    text = font.render(message, True, (255,255,255))\n    window.blit(text, (20,50))\n\n  if gameEngine.state == GameState.ENDED:\n    result = gameEngine.result\n    message = \"Game Over! \" + result[\"winner\"].name + \" wins!\"\n    text = font.render(message, True, (255,255,255))\n    window.blit(text, (20,50))\n```\n\n## Running the game\n\nNow that we have implemented the game, we can give it a test run. Click the big green \"Run\" button at the top of your repl. You should see the game start up, prompting \"Player 1\" to flip a card.\n\n![Playing SnaPy](https://replit-docs-images.bardia.repl.co/images/tutorials/card-game-pygame/gameplay.gif)\n\nPlayer 1's keys are `q` to flip a card, and `w` to call snap.\nPlayer 2's keys are `o` to flip a card, and `p` to call snap.\n\nCall over a friend and see who's the quickest finger on calling \"Snap!\".\n\n## Next steps\n\nCongratulations! You've implemented a card game. You can use the ideas and principles from this tutorial to implement a card game of your own.\n\nSome ideas to add features to this game are:\n\n- Add a timer to the game, so that the player has a limited amount of time to flip a card.\n- Add some sound effects, using the Pygame [`mixer`](https://www.pygame.org/docs/ref/mixer.html) module.\n- Add a key to restart the game after it ends. Currently, at the end of the game, the players would need to close the window and start the game to play again.\n- Try with different cards. For example, you could use a simplified card set, perhaps themed on something you love, like Pokemons, dinosaurs, cars, celebrities, etc.\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/SnaPy?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1025}}],["1026",{"pageContent":"---\ntitle: Email news digest app with Nix & Python\n---\n\n# Build an email news digest app with Nix, Python and Celery\n\nIn this tutorial, we'll build an application that sends regular emails to its users. Users will be able to subscribe to [RSS](https://en.wikipedia.org/wiki/RSS) and [Atom](<https://en.wikipedia.org/wiki/Atom_(Web_standard)>) feeds, and will receive a daily email with links to the newest stories in each one, at a specified time.\n\nAs this application will require a number of different components, we're going to build it using the power of Nix repls. By the end of this tutorial, you'll be able to:\n\n- Use Nix on Replit to set up a database, webserver, message broker and background task handlers.\n- Use Python Celery to schedule and run tasks in the background.\n- Use Mailgun to send automated emails.\n- Build a dynamic Python application with multiple discrete parts.\n\n## Getting started\n\nTo get started, sign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Nix repl.\n\n![Create a nix repl](https://docimg.replit.com/images/tutorials/31-news-digest-app/create-nix-repl.png)\n\n## Installing dependencies\n\nWe'll start by using Nix to install the packages and libraries we'll need to build our application. These are:\n\n1. **Python 3.9**, the programming language we'll write our application in.\n2. **Flask**, Python's most popular micro web framework, which we'll use to power our web application.\n3. **MongoDB**, the NoSQL database we'll use to store persistent data for our application.\n4. **PyMongo**, a library for working with MongoDB in Python.\n5. **Celery**, a Python task queuing system. We'll use this to send regular emails to users.\n6. **Redis**, a data store and message broker used by Celery to track tasks.\n7. Python's Redis library.\n8. Python's Requests library, which we'll use to interact with an external API to send emails.\n9. Python's feedparser library, which we'll use to parse news feeds.","metadata":{"id":1026}}],["1027",{"pageContent":"7. Python's Redis library.\n8. Python's Requests library, which we'll use to interact with an external API to send emails.\n9. Python's feedparser library, which we'll use to parse news feeds.\n10. Python's dateutil library, which we'll use to parse timestamps in news feeds.\n\nTo install these dependencies, open `replit.nix` and edit it to include the following:\n\n```nix\n{ pkgs }: {\n\tdeps = [\n        pkgs.cowsay\n        pkgs.python39\n        pkgs.python39Packages.flask\n        pkgs.mongodb\n        pkgs.python39Packages.pymongo\n        pkgs.python39Packages.celery\n        pkgs.redis\n        pkgs.python39Packages.redis\n        pkgs.python39Packages.requests\n        pkgs.python39Packages.feedparser\n        pkgs.python39Packages.dateutil\n\t];\n}\n```\n\nRun your repl now to install all the packages. Once the Nix environment is finished loading, you should see a welcome message from `cowsay`.\n\nNow edit your repl's `.replit` file to run a script called `start.sh`:\n\n```bash\nrun = \"sh start.sh\"\n```\n\nNext we need to create `start.sh` in the repl's files tab:\n\n![Start script](https://docimg.replit.com/images/tutorials/31-news-digest-app/new-file.png)\n\nAnd add the following bash code to `start.sh`:\n\n```bash\n#!/bin/sh\n\n# Clean up\npkill mongo\npkill redis\npkill python\npkill start.sh\nrm data/mongod.lock\nmongod --dbpath data --repair\n\n# Run Mongo with local paths\nmongod --fork --bind_ip=\"127.0.0.1\" --dbpath=./data --logpath=./log/mongod.log\n\n# Run redis\nredis-server --daemonize yes --bind 127.0.0.1\n```\n\nThe first section of this script will kill all the running processes so they can be restarted. While it may not be strictly necessary to stop and restart MongoDB or Redis every time you run your repl, doing so means we can reconfigure them should we need to, and prevents us from having to check whether they're stopped or started, independent of our other code.\n\nThe second section of the script starts MongoDB with the following configuration options:","metadata":{"id":1027}}],["1028",{"pageContent":"The second section of the script starts MongoDB with the following configuration options:\n\n- `--fork`: This runs MongoDB in a background process, allowing the script to continue executing without shutting it down.\n- `--bind_ip=\"127.0.0.1\"`: Listen on the local loopback address only, preventing external access to our database.\n- `--dbpath=./data` and `--logpath=./log/mongod.log`: Use local directories for storage. This is important for getting programs to work in Nix repls, as we discussed in [our previous tutorial on building with Nix](/tutorials/python/build-with-nix).\n\nThe third section starts Redis. We use the `--bind` flag to listen on the local loopback address only, similar to how we used it for MongoDB, and `--daemonize yes` runs it as a background process (similar to MongoDB's `--fork`).\n\nBefore we run our repl, we'll need to create our MongoDB data and logging directories, `data` and `log`. Create these directories now in your repl's filepane.\n\n![Mongo directories](https://docimg.replit.com/images/tutorials/31-news-digest-app/mongodirs.png)\n\nOnce that's done, you can run your repl, and it will start MongoDB and Redis. You can interact with MongoDB by running `mongo` in your repl's shell, and with Redis by running `redis-cli`. If you're interested, you can find an introduction to these clients at the links below:\n\n- [Working with the `mongo` Shell](https://docs.mongodb.com/v4.4/mongo/#working-with-the-mongo-shell)\n- [`redis-cli`, the Redis command line interface](https://redis.io/topics/rediscli)\n\n![Running mongo and redis cli](https://docimg.replit.com/images/tutorials/31-news-digest-app/mongo-and-redis-cli.png)\n\nThese datastores will be empty for now.\n\n**Important note**: Sometimes, when stopping and starting your repl, you may see the following error message:\n\n```bash\nERROR: child process failed, exited with error number 100\n```\n\nThis means that MongoDB has failed to start. If you see this, restart your repl, and MongoDB should start up successfully.\n\n## Scraping RSS and Atom feeds","metadata":{"id":1028}}],["1029",{"pageContent":"```\n\nThis means that MongoDB has failed to start. If you see this, restart your repl, and MongoDB should start up successfully.\n\n## Scraping RSS and Atom feeds\n\nWe're going to build the feed scraper first. If you've completed any of our previous web-scraping tutorials, you might expect to do this by parsing raw XML with [Beautiful Soup](https://beautiful-soup-4.readthedocs.io/en/latest/). While this would be possible, we would need to account for a large number of differences in feed formats and other gotchas specific to parsing RSS and Atom feeds. Instead, we'll use the [feedparser](https://pypi.org/project/feedparser/) library, which has already solved most of these problems.\n\nCreate a directory named `lib`, and inside that directory, a Python file named `scraper.py`. Add the following code to it:\n\n```python\nimport feedparser, pytz, time\nfrom datetime import datetime, timedelta\nfrom dateutil import parser\n\ndef get_title(feed_url):\n    pass\n\ndef get_items(feed_url, since=timedelta(days=1)):\n    pass\n```\n\nHere we import the libraries we'll need for web scraping, XML parsing, and time handling. We also define two functions:\n\n- `get_title`: This will return the name of the website, for a given feed track (e.g. \"Hacker News\" for https://news.ycombinator.com/rss).\n- `get_items`: This will return the feed's items – depending on the feed, these can be articles, videos, podcast episodes, or other content. The `since` parameter will allow us to only fetch recent content, and we'll use one day as the default cutoff.\n\nEdit the `get_title` function with the following:\n\n```python\ndef get_title(feed_url):\n    feed = feedparser.parse(feed_url)\n\n    return feed[\"feed\"][\"title\"]\n```\n\nAdd the following line to the bottom of `scraper.py` to test it out:\n\n```python\nprint(get_title(\"https://news.ycombinator.com/rss\"))\n```","metadata":{"id":1029}}],["1030",{"pageContent":"return feed[\"feed\"][\"title\"]\n```\n\nAdd the following line to the bottom of `scraper.py` to test it out:\n\n```python\nprint(get_title(\"https://news.ycombinator.com/rss\"))\n```\n\nInstead of rewriting our `start.sh` script to run this Python file, we can just run `python lib/scraper.py` in our repl's shell tab, as shown below. If it's working correctly, we should see \"Hacker News\" as the script's output.\n\n![Scrapper cript test](https://docimg.replit.com/images/tutorials/31-news-digest-app/script-test.png)\n\nNow we need to write the second function. Add the following code to the `get_items` function definition:\n\n```python\ndef get_items(feed_url, since=timedelta(days=1)):\n    feed = feedparser.parse(feed_url)\n\n    items = []\n    for entry in feed.entries:\n        title = entry.title\n        link = entry.link\n        if \"published\" in entry:\n            published = parser.parse(entry.published)\n        elif \"pubDate\" in entry:\n            published = parser.parse(entry.pubDate)\n```\n\nHere we extract each item's title, link, and publishing timestamp. Atom feeds use the `published` element and RSS feeds use the `pubDate` element, so we look for both. We use [`parser`](https://dateutil.readthedocs.io/en/stable/parser.html) to convert the timestamp from a string to a `datetime` object. The `parse` function is able to convert a large number of different formats, which saves us from writing a lot of extra code.\n\nWe need to evaluate the age of the content and package it in a dictionary so we can return it from our function. Add the following code to the bottom of the `get_items` function:\n\n```python\n# evaluating content age\n        if (since and published > (pytz.utc.localize(datetime.today()) - since)) or not since:\n            item = {\n                \"title\": title,\n                \"link\": link,\n                \"published\": published\n            }\n            items.append(item)\n\n    return items\n```","metadata":{"id":1030}}],["1031",{"pageContent":"item = {\n                \"title\": title,\n                \"link\": link,\n                \"published\": published\n            }\n            items.append(item)\n\n    return items\n```\n\nWe get the current time with `datetime.today()`, convert it to the UTC timezone, and then subtract our `since` `timedelta` object. Because of the way we've constructed this `if` statement, if we pass in `since=None` when calling `get_items`, we'll get all feed items irrespective of their publish date.\n\nFinally, we construct a dictionary of our item's data and add it to the `items` list, which we return at the bottom of the function, outside the `for` loop.\n\nAdd the following lines to the bottom of `scraper.py` and run the script in your repl's shell again. We use [`time.sleep`](https://docs.python.org/3/library/time.html#time.sleep) to avoid being rate-limited for fetching the same file twice in quick succession.\n\n```python\ntime.sleep(1)\nprint(get_items(\"https://news.ycombinator.com/rss\"))\n```\n\nYou should see a large number of results in your terminal. Play around with values of `since` and see what difference it makes.\n\nOnce you're done, remove the `print` statements from the bottom of the file. We've now built our feed scraper, which we'll use as a library in our main application.\n\n## Setting up Mailgun\n\nNow that we can retrieve content for our email digests, we need a way of sending emails. To avoid having to set up our own email server, we'll use the [Mailgun](https://www.mailgun.com/) API to actually send emails. Sign up for a free account now, and verify your email and phone number.\n\nOnce your account is created and verified, you'll need an API key and domain from Mailgun.\n\nTo find your domain, navigate to **Sending → Domains**. You should see a single domain name, starting with \"sandbox\". Click on that and copy the full domain name (it looks like: `sandboxlongstringoflettersandnumbers.mailgun.org`).\n\n![Mailgun domain](https://docimg.replit.com/images/tutorials/31-news-digest-app/mailgun-domain.gif)","metadata":{"id":1031}}],["1032",{"pageContent":"![Mailgun domain](https://docimg.replit.com/images/tutorials/31-news-digest-app/mailgun-domain.gif)\n\nTo find your API key, navigate to **Settings → API Keys**. Click on the view icon next to **Private API key** and copy the revealed string somewhere safe.\n\n![Mailgun api key](https://docimg.replit.com/images/tutorials/31-news-digest-app/mailgun-apikey.png)\n\nBack in your repl, create two environment variables, `MAILGUN_DOMAIN` and `MAILGUN_APIKEY`, and provide the strings you copied from Mailgun as values for each.\n\n![Add environment variable](https://docimg.replit.com/images/tutorials/31-news-digest-app/add-env-var.png)\n\nRun your repl now to set these environment variables. Then create a file named `lib/tasks.py`, and populate it with the code below.\n\n```python\nimport requests, os\n\n# Mailgun config\nMAILGUN_APIKEY = os.environ[\"MAILGUN_APIKEY\"]\nMAILGUN_DOMAIN = os.environ[\"MAILGUN_DOMAIN\"]\n\ndef send_test_email(to_address):\n    res = requests.post(\n        f\"https://api.mailgun.net/v3/{MAILGUN_DOMAIN}/messages\",\n        auth=(\"api\", MAILGUN_APIKEY),\n        data={\"from\": f\"News Digest <digest@{MAILGUN_DOMAIN}>\",\n              \"to\": [to_address],\n              \"subject\": \"Testing Mailgun\",\n              \"text\": \"Hello world!\"})\n\n    print(res)\n\nsend_test_email(\"YOUR-EMAIL-ADDRESS-HERE\")\n```\n\nHere we use Python Requests to interact with the [Mailgun API](https://documentation.mailgun.com/en/latest/api-sending.html). Note the inclusion of our domain and API key.\n\nTo test that Mailgun is working, replace `YOUR-EMAIL-ADDRESS-HERE` with your email address, and then run `python lib/tasks.py` in your repl's shell. You should receive a test mail within a few minutes, but as we're using a free sandbox domain, it may end up in your spam folder.","metadata":{"id":1032}}],["1033",{"pageContent":"Without further verification on Mailgun, we can only send up to 100 emails per hour, and a free account limits us to 5,000 emails per month. Additionally, Mailgun's sandbox domains can only be used to send emails to specific, whitelisted addresses. The address you created your account with will work, but if you want to send emails to other addresses, you'll have to add them to the domain's authorized recipients, which can be done from the page you got the full domain name from. Keep these limitations in mind as you build and test this application.\n\n![Recipients](https://docimg.replit.com/images/tutorials/31-news-digest-app/recipients.png)\n\nAfter you've received your test email, you can delete or comment out the function call in the final line of `lib/tasks.py`.\n\n## Interacting with MongoDB\n\nAs we will have two different components of our application interacting with our Mongo database – our email-sending code in `lib/tasks.py` and the web application code we will put in `main.py` – we're going to put our database connection code in another file, which can be imported by both. Create `lib/db.py` now and add the following code to it:\n\n```python\nimport pymongo\n\ndef connect_to_db():\n    client = pymongo.MongoClient()\n    return client.digest\n```\n\nWe will call `connect_to_db()` whenever we need to interact with the database. Because of how MongoDB works, a new database called \"digest\" will be created the first time we connect. Much of the benefit MongoDB provides over traditional SQL databases is that you don't have to define schemas before storing data.\n\nMongo databases are made up of _collections_, which contain _documents_. You can think of the collections as lists and the documents as dictionaries. When we read and write data to and from MongoDB, we will be working with lists of dictionaries.\n\n## Creating the web application\n\nNow that we've got a working webscraper, email sender and database interface, it's time to start building our web application.","metadata":{"id":1033}}],["1034",{"pageContent":"## Creating the web application\n\nNow that we've got a working webscraper, email sender and database interface, it's time to start building our web application.\n\nCreate a file named `main.py` in your repl's filepane and add the following import code to it:\n\n```python\nfrom flask import Flask, request, render_template, session, flash, redirect, url_for\nfrom functools import wraps\nimport os, pymongo, time\n\nimport lib.scraper as scraper\nimport lib.tasks as tasks\nfrom lib.db import connect_to_db\n```\n\nWe've imported everything we'll need from Flask and other Python modules, as well as our three local files from `lib`: `scraper.py`, `tasks.py` and `db.py`. Next, add the following code to initialize the application and connect to the database:\n\n```python\napp = Flask(__name__)\n\napp.config['SECRET_KEY'] = os.environ['SECRET_KEY']\n\ndb = connect_to_db()\n```\n\nOur secret key will be a long, random string, stored in an environment variable. You can generate one in your repl's Python console with the following two lines of code:\n\n```python\nimport random, string\n''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(20))\n```\n\n![Random string](https://docimg.replit.com/images/tutorials/31-news-digest-app/randomstring.png)\n\nIn your repl's \"Secrets\" tab, add a new key named `SECRET_KEY` and enter the random string you just generated as its value.\n\n![Repl secret key](https://docimg.replit.com/images/tutorials/31-news-digest-app/repl-secrets.png)\n\nNext, we will create the `context` helper function. This function will provide the current user's data from our database to our application frontend. Add the following code to the bottom of `main.py`:\n\n```python\ndef context():\n    email = session[\"email\"] if \"email\" in session else None\n\n    cursor = db.subscriptions.find({ \"email\": email })\n    subscriptions = [subscription for subscription in cursor]\n\n    return {\n        \"user_email\": email,\n        \"user_subscriptions\": subscriptions\n    }\n```","metadata":{"id":1034}}],["1035",{"pageContent":"subscriptions = [subscription for subscription in cursor]\n\n    return {\n        \"user_email\": email,\n        \"user_subscriptions\": subscriptions\n    }\n```\n\nWhen we build our user login, we will store the current user's email address in Flask's [`session` object](https://flask.palletsprojects.com/en/2.0.x/quickstart/#sessions), which corresponds to a [cookie](https://en.wikipedia.org/wiki/HTTP_cookie) that will be cryptographically signed with the secret key we defined above. Without this, users would be able to impersonate each other by changing their cookie data.\n\nWe query our MongoDB database by calling [`db.<name of collection>.find()`](https://docs.mongodb.com/manual/reference/method/db.collection.find/). If we call `find()` without any arguments, all items in our collection will be returned. If we call `find()` with an argument, as we've done above, it will return results with keys and values that match our argument. The `find()` method returns a [`Cursor`](https://pymongo.readthedocs.io/en/stable/api/pymongo/cursor.html) object, which we can extract the results of our query from.\n\nNext, we need to create an authentication [function decorator](https://realpython.com/primer-on-python-decorators/), which will restrict parts of our application to logged-in users. Add the following code below the definition of the `context` function:\n\n```python\n# Authentication decorator\ndef authenticated(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if \"email\" not in session:\n            flash(\"Permission denied.\", \"warning\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n```","metadata":{"id":1035}}],["1036",{"pageContent":"if \"email\" not in session:\n            flash(\"Permission denied.\", \"warning\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n```\n\nThe code in the second function may look a bit strange if you haven't written your own decorators before. Here's how it works: `authenticated` is the name of our decorator. You can think of decorators as functions that take other functions as arguments. (The two code snippets below are for illustration and not part of our program.) Therefore, if we write the following:\n\n```python\n@authenticated\ndef authenticated_function():\n    return f\"Hello logged-in user!\"\n\nauthenticated_function()\n```\n\nIt will be roughly equivalent to:\n\n```python\ndef authenticated_function():\n    return f\"Hello logged-in user!\"\n\nauthenticated(authenticated_function)\n```\n\nSo whenever `authenticated_function` gets called, the code we've defined in `decorated_function` will execute before anything we define in `authenticated_function`. This means we don't have to include the same authentication checking code in every piece of authenticated functionality. As per the code, if a non-logged-in user attempts to access restricted functionality, our app will flash a warning message and redirect them to the home page.\n\nNext, we'll add code to serve our home page and start our application:\n\n```python\n# Routes\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\", **context())\n\napp.run(host='0.0.0.0', port=8080)\n```\n\nThis code will serve a [Jinja](https://jinja.palletsprojects.com/en/3.0.x/templates/) template, which we will create now in a separate file. In your repl's filepane, create a directory named `templates`, and inside that directory, a file named `index.html`. Add the following code to `index.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>News Digest</title>\n  </head>\n  <body>\n    {% with messages = get_flashed_messages() %} {% if messages %}\n    <ul class=\"flashes\">\n      {% for message in messages %}","metadata":{"id":1036}}],["1037",{"pageContent":"<html>\n  <head>\n    <title>News Digest</title>\n  </head>\n  <body>\n    {% with messages = get_flashed_messages() %} {% if messages %}\n    <ul class=\"flashes\">\n      {% for message in messages %}\n      <li>{{ message }}</li>\n      {% endfor %}\n    </ul>\n    {% endif %} {% endwith %} {% if user_email == None %}\n    <p>Please enter your email to sign up/log in:</p>\n    <form action=\"/login\" method=\"post\">\n      <input type=\"text\" name=\"email\" />\n      <input type=\"submit\" value=\"Login\" />\n    </form>\n    {% else %}\n    <p>Logged in as {{ user_email }}.</p>\n    <h1>Subscriptions</h1>\n    <ul>\n      {% for subscription in user_subscriptions %}\n      <li>\n        <a href=\"{{ subscription.url }}\">{{ subscription.title }}</a>\n        <form action=\"/unsubscribe\" method=\"post\" style=\"display: inline\">\n          <input type=\"hidden\" name=\"feed_url\" value=\"{{subscription.url}}\" />\n          <input type=\"submit\" value=\"Unsubscribe\" />\n        </form>\n      </li>\n      {% endfor %}\n    </ul>\n\n    <p>Add a new subscription:</p>\n    <form action=\"/subscribe\" method=\"post\">\n      <input type=\"text\" name=\"feed_url\" />\n      <input type=\"submit\" value=\"Subscribe\" />\n    </form>\n\n    <p>Send digest to your email now:</p>\n    <form action=\"/send-digest\" method=\"post\">\n      <input type=\"submit\" value=\"Send digest\" />\n    </form>\n\n    <p>Choose a time to send your daily digest (must be UTC):</p>\n    <form action=\"/schedule-digest\" method=\"post\">\n      <input type=\"time\" name=\"digest_time\" />\n      <input type=\"submit\" value=\"Schedule digest\" />\n    </form>\n    {% endif %}\n  </body>\n</html>\n```\n\nAs this will be our application's only page, it contains a lot of functionality. From top to bottom:\n\n- We've included code to display [flashed messages](https://flask.palletsprojects.com/en/2.0.x/patterns/flashing/) at the top of the page. This allows us to show users the results of their actions without creating additional pages.\n- If the current user is not logged in, we display a login form.\n- If the current user is logged in, we display:","metadata":{"id":1037}}],["1038",{"pageContent":"- If the current user is not logged in, we display a login form.\n- If the current user is logged in, we display:\n  - A list of their current subscriptions, with an unsubscribe button next to each one.\n  - A form for adding new subscriptions.\n  - A button to send an email digest immediately.\n  - A form for sending email digests at a specific time each day.\n\nTo start our application when our repl runs, we must add an additional line to the bottom of `start.sh`:\n\n```bash\n# Run Flask app\npython main.py\n```\n\nOnce that's done, run your repl. You should see a login form.\n\n![Start script](https://docimg.replit.com/images/tutorials/31-news-digest-app/login-form.png)\n\n## Adding user login\n\nWe will implement user login by sending a single-use login link to the email address provided in the login form. This provides a number of benefits:\n\n- We can use the code we've already written for sending emails.\n- We don't need to implement user registration separately.\n- We can avoid worrying about user passwords.\n\nTo send login emails asynchronously, we'll set up a Celery task.\n\nIn `main.py`, add the following code for the `/login` route below the definition of `index`:\n\n```python\n# Login\n@app.route(\"/login\", methods=['POST'])\ndef login():\n    email = request.form['email']\n    tasks.send_login_email.delay(email)\n    flash(\"Check your email for a magic login link!\")\n\n    return redirect(url_for(\"index\"))\n```\n\nIn this function, we get the user's email, and pass it to a function we will define in `lib/tasks.py`. As this function will be a [Celery task](https://docs.celeryproject.org/en/stable/userguide/tasks.html) rather than a conventional function, we must call it with `.delay()`, a function in [Celery's task-calling API](https://docs.celeryproject.org/en/stable/userguide/calling.html).\n\nLet's implement this task now. Open `lib/tasks.py` and modify it as follows:\n\n```python\nimport requests, os\nimport random, string # NEW IMPORTS\nfrom celery import Celery # NEW IMPORT\nfrom celery.schedules import crontab # NEW IMPORT","metadata":{"id":1038}}],["1039",{"pageContent":"```python\nimport requests, os\nimport random, string # NEW IMPORTS\nfrom celery import Celery # NEW IMPORT\nfrom celery.schedules import crontab # NEW IMPORT\nfrom datetime import datetime # NEW IMPORT\n\nimport lib.scraper as scraper # NEW IMPORT\nfrom lib.db import connect_to_db # NEW IMPORT\n\n# NEW LINE BELOW\nREPL_URL = f\"https://{os.environ['REPL_SLUG']}--{os.environ['REPL_OWNER']}.repl.co\"\n\n# NEW LINES BELOW\n# Celery configuration\nCELERY_BROKER_URL = \"redis://127.0.0.1:6379/0\"\nCELERY_BACKEND_URL = \"redis://127.0.0.1:6379/0\"\n\ncelery = Celery(\"tasks\", broker=CELERY_BROKER_URL, backed=CELERY_BACKEND_URL)\n\ncelery.conf.enable_utc = True\n\n# Mailgun config\nMAILGUN_APIKEY = os.environ[\"MAILGUN_APIKEY\"]\nMAILGUN_DOMAIN = os.environ[\"MAILGUN_DOMAIN\"]\n\n# NEW FUNCTION DECORATOR\n@celery.task\ndef send_test_email(to_address):\n    res = requests.post(\n        f\"https://api.mailgun.net/v3/{MAILGUN_DOMAIN}/messages\",\n        auth=(\"api\", MAILGUN_APIKEY),\n        data={\"from\": f\"News Digest <digest@{MAILGUN_DOMAIN}>\",\n              \"to\": [to_address],\n              \"subject\": \"Testing Mailgun\",\n              \"text\": \"Hello world!\"})\n\n    print(res)\n\n# COMMENT OUT THE TESTING LINE\n# send_test_email(\"YOUR-EMAIL-ADDRESS-HERE\")\n```\n\n*Note: Please refer to [these docs](/hosting/hosting-web-pages.md#end-of-dot-style-domains) to ensure that you are using the correct repl.co domain format.*\n\nWe've added the following:\n\n- Additional imports for Celery and our other local files.\n- A `REPL_URL` variable containing our repl's URL, which we construct using environment variables defined in every repl.\n- Instantiation of a Celery object, configured to use Redis as a [message broker and data backend](https://docs.celeryproject.org/en/stable/getting-started/backends-and-brokers/index.html), and the UTC timezone.\n- A function decorator which converts our `send_test_email` function into a Celery task.\n\nNext, we'll define a function to generate unique IDs for our login links. Add the following code below the `send_test_email` function definition:\n\n```python","metadata":{"id":1039}}],["1040",{"pageContent":"Next, we'll define a function to generate unique IDs for our login links. Add the following code below the `send_test_email` function definition:\n\n```python\ndef generate_login_id():\n    return ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(30))\n```\n\nThis code is largely similar to the code we used to generate our secret key.\n\nNext, we'll create the task we called in `main.py`: `send_login_email`. Add the following code below the definition of `generate_login_id`:\n\n```python\n@celery.task\ndef send_login_email(to_address):\n\n    # Generate ID\n    login_id = generate_login_id()\n\n    # Set up email\n    login_url = f\"{REPL_URL}/confirm-login/{login_id}\"\n\n    text = f\"\"\"\n    Click this link to log in:\n\n    {login_url}\n    \"\"\"\n\n    html = f\"\"\"\n    <p>Click this link to log in:</p>\n\n    <p><a href={login_url}>{login_url}</a></p>\n    \"\"\"\n\n    # Send email\n    res = requests.post(\n        f\"https://api.mailgun.net/v3/{MAILGUN_DOMAIN}/messages\",\n        auth=(\"api\", MAILGUN_APIKEY),\n        data={\"from\": f\"News Digest <digest@{MAILGUN_DOMAIN}>\",\n              \"to\": [to_address],\n              \"subject\": \"News Digest Login Link\",\n              \"text\": text,\n              \"html\": html })\n\n    # Add to user_sessions collection if email sent successfully\n    if res.ok:\n        db = connect_to_db()\n        db.user_sessions.insert_one({\"login_id\": login_id, \"email\": to_address})\n\n        print(f\"Sent login email to {to_address}\")\n    else:\n        print(\"Failed to send login email.\")\n```\n\nThis code will generate a login ID, construct an email containing a `/confirm-login` link containing that ID, and then send the email. If the email is sent successfully, it will add a document to our MongoDB containing the email address and login ID.\n\nNow we can return to `main.py` and create the `/confirm-login` route. Add the following code below the `login` function definition:\n\n```python\n@app.route(\"/confirm-login/<login_id>\")\ndef confirm_login(login_id):","metadata":{"id":1040}}],["1041",{"pageContent":"```python\n@app.route(\"/confirm-login/<login_id>\")\ndef confirm_login(login_id):\n    login = db.user_sessions.find_one({\"login_id\": login_id})\n\n    if login:\n        session[\"email\"] = login[\"email\"]\n        db.user_sessions.delete_one({\"login_id\": login_id}) # prevent reuse\n    else:\n        flash(\"Invalid or expired login link.\")\n\n    return redirect(url_for(\"index\"))\n```\n\nWhen a user clicks the login link in their email, they will be directed to this route. If a matching login ID is found in the database, they will be logged in, and the login ID will be deleted so it can't be reused.\n\nWe've implemented all of the code we need for user login. The last thing we need to do to get it working is to configure our repl to start a [Celery worker](https://docs.celeryproject.org/en/stable/userguide/workers.html). When we invoke a task with `.delay()`, this worker will execute the task.\n\nIn `start.sh`, add the following between the line that starts Redis and the line that starts our web application:\n\n```python\n# Run Celery worker\ncelery -A lib.tasks.celery worker -P processes --loglevel=info &\n```\n\nThis will start a Celery worker, configured with the following flags:\n\n- `-A lib.tasks.celery`: This tells Celery to run tasks associated with the `celery` object in `tasks.py`.\n- `-P processes`: This tells Celery to start new processes for individual tasks.\n- `--loglevel=info`: This ensures we'll have detailed Celery logs to help us debug problems.\n\nWe use `&` to run the worker in the background – this is a part of Bash's syntax rather than a program-specific backgrounding flag like we used for MongoDB and Redis.\n\nRun your repl now, and you should see the worker start up with the rest of our application's components. Once the web application is started, open it in a new tab. Then try logging in with your email address – remember to check your spam box for your login email.\n\n![Open in new window](https://docimg.replit.com/images/tutorials/31-news-digest-app/open-new-window.png)","metadata":{"id":1041}}],["1042",{"pageContent":"![Open in new window](https://docimg.replit.com/images/tutorials/31-news-digest-app/open-new-window.png)\n\nIf everything's working correctly, you should see a page like this after clicking your login link:\n\n![Logged in view](https://docimg.replit.com/images/tutorials/31-news-digest-app/logged-in.png)\n\n## Adding and removing subscriptions\n\nNow that we can log in, let's add the routes that handle subscribing to and unsubscribing from news feeds. These routes will only be available to logged-in users, so we'll use our `authenticated` decorator on them. Add the following code below the `confirm_login` function definition in `main.py`:\n\n```python\n# Subscriptions\n@authenticated\n@app.route(\"/subscribe\", methods=['POST'])\ndef subscribe(): # new feed\n    feed_url = request.form[\"feed_url\"]\n\n    # Test feed\n    try:\n        items = scraper.get_items(feed_url, None)\n    except Exception as e:\n        print(e)\n        flash(\"Invalid feed URL.\")\n        return redirect(url_for(\"index\"))\n\n    if items == []:\n        flash(\"Invalid feed URL\")\n        return redirect(url_for(\"index\"))\n\n    # Get feed title\n    time.sleep(1)\n    feed_title = scraper.get_title(feed_url)\n```\n\nThis code will validate feed URLs by attempting to fetch their contents. Note that we are passing `None` as the argument for `since` in `scraper.get_items` – this will fetch the whole feed, not just the last day's content. If it fails for any reason, or returns an empty list, an error message will be shown to the user and the subscription will not be added.\n\nOnce we're sure that the feed is valid, we sleep for one second and then fetch the title. The sleep is necessary to prevent rate-limiting by some websites.\n\nNow that we've validated the feed and have its title, we can add it to our MongoDB. Add the following code to the bottom of the function:\n\n```python\n    # Add subscription to Mongodb\n    try:\n        db.subscriptions.insert_one({\"email\": session[\"email\"], \"url\": feed_url, \"title\": feed_title})\n    except pymongo.errors.DuplicateKeyError:","metadata":{"id":1042}}],["1043",{"pageContent":"```python\n    # Add subscription to Mongodb\n    try:\n        db.subscriptions.insert_one({\"email\": session[\"email\"], \"url\": feed_url, \"title\": feed_title})\n    except pymongo.errors.DuplicateKeyError:\n        flash(\"You're already subscribed to that feed.\")\n        return redirect(url_for(\"index\"))\n    except Exception:\n        flash(\"An unknown error occured.\")\n        return redirect(url_for(\"index\"))\n\n    # Create unique index if it doesn't exist\n    db.subscriptions.create_index([(\"email\", 1), (\"url\", 1)], unique=True)\n\n    flash(\"Feed added!\")\n    return redirect(url_for(\"index\"))\n```\n\nHere, we populate a new document with our subscription details and insert it into our \"subscriptions\" collection. To prevent duplicate subscriptions, we use [`create_index`](https://pymongo.readthedocs.io/en/stable/api/pymongo/collection.html#pymongo.collection.Collection.create_index) to create a [unique compound index](https://docs.mongodb.com/manual/core/index-unique/) on the \"email\" and \"url\" fields. As `create_index` will only create an index that doesn't already exist, we can safely call it on every invocation of this function.\n\nNext, we'll create the code for unsubscribing from feeds. Add the following function definition below the one above:\n\n```python\n@authenticated\n@app.route(\"/unsubscribe\", methods=['POST'])\ndef unsubscribe(): # remove feed\n\n    feed_url = request.form[\"feed_url\"]\n    deleted = db.subscriptions.delete_one({\"email\": session[\"email\"], \"url\": feed_url})\n\n    flash(\"Unsubscribed!\")\n    return redirect(url_for(\"index\"))\n```\n\nRun your repl, and try subscribing and unsubscribing from some feeds. You can use the following URLs to test:\n\n- Hacker News feed: https://news.ycombinator.com/rss\n- /r/replit on Reddit feed: https://www.reddit.com/r/replit.rss\n\n![Subscriptions](https://docimg.replit.com/images/tutorials/31-news-digest-app/subscriptions.png)\n\n## Sending digests","metadata":{"id":1043}}],["1044",{"pageContent":"- /r/replit on Reddit feed: https://www.reddit.com/r/replit.rss\n\n![Subscriptions](https://docimg.replit.com/images/tutorials/31-news-digest-app/subscriptions.png)\n\n## Sending digests\n\nOnce you've added some subscriptions, we can implement the `/send-digest` route. Add the following code below the definition of `unsubscribe` in `main.py`:\n\n```python\n# Digest\n@authenticated\n@app.route(\"/send-digest\", methods=['POST'])\ndef send_digest():\n\n    tasks.send_digest_email.delay(session[\"email\"])\n\n    flash(\"Digest email sent! Check your inbox.\")\n    return redirect(url_for(\"index\"))\n```\n\nThen, in `tasks.py`, add the following new Celery task:\n\n```python\n@celery.task\ndef send_digest_email(to_address):\n\n    # Get subscriptions from Mongodb\n    db = connect_to_db()\n    cursor = db.subscriptions.find({\"email\": to_address})\n    subscriptions = [subscription for subscription in cursor]\n\n    # Scrape RSS feeds\n    items = {}\n    for subscription in subscriptions:\n        items[subscription[\"title\"]] = scraper.get_items(subscription[\"url\"])\n```\n\nFirst, we connect to the MongoDB and find all subscriptions created by the user we're sending to. We then construct a dictionary of scraped items for each feed URL.\n\nOnce that's done, it's time to create the email content. Add the following code to the bottom of `send_digest_email` function:\n\n```python\n    # Build email digest\n    today_date = datetime.today().strftime(\"%d %B %Y\")\n\n    html = f\"<h1>Daily Digest for {today_date}</h1>\"\n\n    for site_title, feed_items in items.items():\n        if not feed_items: # empty list\n            continue\n\n        section = f\"<h2>{site_title}</h2>\"\n        section += \"<ul>\"\n\n        for item in feed_items:\n            section += f\"<li><a href={item['link']}>{item['title']}</a></li>\"\n\n        section += \"</ul>\"\n        html += section\n\n```","metadata":{"id":1044}}],["1045",{"pageContent":"section += \"<ul>\"\n\n        for item in feed_items:\n            section += f\"<li><a href={item['link']}>{item['title']}</a></li>\"\n\n        section += \"</ul>\"\n        html += section\n\n```\n\nIn this code, we construct an HTML email with a heading and bullet list of linked items for each feed. If any of our feeds have no items for the last day, we leave them out of the digest. We use [`strftime`](https://www.programiz.com/python-programming/datetime/strftime) to format today's date in a human-readable manner.\n\nAfter that, we can send the email. Add the following code to the bottom of the function:\n\n```python\n    # Send email\n    res = requests.post(\n        f\"https://api.mailgun.net/v3/{MAILGUN_DOMAIN}/messages\",\n        auth=(\"api\", MAILGUN_APIKEY),\n        data={\"from\": f\"News Digest <digest@{MAILGUN_DOMAIN}>\",\n              \"to\": [to_address],\n              \"subject\": f\"News Digest for {today_date}\",\n              \"text\": html,\n              \"html\": html })\n\n    if res.ok:\n        print(f\"Sent digest email to {to_address}\")\n    else:\n        print(\"Failed to send digest email.\")\n```\n\nRun your repl, and click on the **Send digest** button. You should receive an email digest with today's items from each of your subscriptions within a few minutes. Remember to check your spam!\n\n![Digest email](https://docimg.replit.com/images/tutorials/31-news-digest-app/digest-email.png)\n\n## Scheduling digests\n\nThe last thing we need to implement is scheduled digests, to allow our application to send users a digest every day at a specified time.\n\nIn `main.py`, add the following code below the `send_digest` function definition:\n\n```python\n@authenticated\n@app.route(\"/schedule-digest\", methods=['POST'])\ndef schedule_digest():\n\n    # Get time from form\n    hour, minute = request.form[\"digest_time\"].split(\":\")\n\n    tasks.schedule_digest(session[\"email\"], int(hour), int(minute))\n\n    flash(f\"Your digest will be sent daily at {hour}:{minute} UTC\")\n    return redirect(url_for(\"index\"))\n```","metadata":{"id":1045}}],["1046",{"pageContent":"tasks.schedule_digest(session[\"email\"], int(hour), int(minute))\n\n    flash(f\"Your digest will be sent daily at {hour}:{minute} UTC\")\n    return redirect(url_for(\"index\"))\n```\n\nThis function retrieves the requested digest time from the user and calls `tasks.schedule_digest`. As `schedule_digest` will be a regular function that schedules a task rather than a task itself, we can call it directly.\n\nCelery supports scheduling tasks through its [beat functionality](https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#using-custom-scheduler-classes). This will require us to run an additional Celery process, which will be a beat rather than a worker.\n\nBy default, Celery does not support dynamic addition and alteration of scheduled tasks, which we need in order to allow users to set and change their digest schedules arbitrarily. So we'll need a [custom scheduler](https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#using-custom-scheduler-classes) that supports this.\n\nMany custom Celery scheduler packages are [available on PyPI](https://pypi.org/search/?q=celery+beat&o=), but as of October 2021, none of these packages have been added to Nixpkgs. Therefore, we'll need to create a custom derivation for the scheduler we choose. Let's do that in `replit.nix` now. Open the file, and add the `let ... in` block below:\n\n```nix\n{ pkgs }:\nlet\n    redisbeat = pkgs.python39Packages.buildPythonPackage rec {\n        pname = \"redisbeat\";\n        version = \"1.2.4\";\n\n        src = pkgs.python39Packages.fetchPypi {\n            inherit pname version;\n            sha256 = \"0b800c6c20168780442b575d583d82d83d7e9326831ffe35f763289ebcd8b4f6\";\n        };\n\n        propagatedBuildInputs = with pkgs.python39Packages; [\n            jsonpickle\n            celery\n            redis\n        ];\n\n        postPatch = ''\n            sed -i \"s/jsonpickle==1.2/jsonpickle/\" setup.py\n        '';\n    };\nin\n{\n\tdeps = [\n\t\tpkgs.python39\n        pkgs.python39Packages.flask\n        pkgs.python39Packages.celery","metadata":{"id":1046}}],["1047",{"pageContent":"postPatch = ''\n            sed -i \"s/jsonpickle==1.2/jsonpickle/\" setup.py\n        '';\n    };\nin\n{\n\tdeps = [\n\t\tpkgs.python39\n        pkgs.python39Packages.flask\n        pkgs.python39Packages.celery\n        pkgs.python39Packages.pymongo\n        pkgs.python39Packages.requests\n        pkgs.python39Packages.redis\n        pkgs.python39Packages.feedparser\n        pkgs.python39Packages.dateutil\n        pkgs.mongodb\n        pkgs.redis\n        redisbeat # <-- ALSO ADD THIS LINE\n\t];\n}\n```\n\nWe've chosen to use [`redisbeat`](https://github.com/liuliqiang/redisbeat), as it is small, simple and uses Redis as a backend. We construct a custom derivation for it using the `buildPythonPackage` function, to which we pass the following information:\n\n- The package's `name` and `version`.\n- `src`: Where to find the package's source code (in this case, from PyPI, but we could also use GitHub, or a generic URL).\n- `propagatedBuildInputs`: The package's dependencies (all of which are available from Nixpkgs).\n- `postPatch`: Actions to take before installing the package. For this package, we remove the version specification for dependency `jsonpickle` in `setup.py`. This will force `redisbeat` to use the latest version of `jsonpickle`, which is available from Nixpkgs and, as a bonus, does not contain [this critical vulnerability](https://nvd.nist.gov/vuln/detail/CVE-2020-22083).\n\nYou can learn more about using Python with Nixpkgs in [this section of the official documentation](https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/python.section.md).\n\nTo actually install `redisbeat`, we must also add it to our `deps` list. Once you've done that, run your repl. Building custom Nix derivations like this one often takes some time, so you may have to wait a while before your repl finishes loading the Nix environment.\n\nWhile we wait, let's import `redisbeat` in `lib/tasks.py` and create our `schedule_digest` function. Add the following code to the bottom of `lib/tasks.py`:\n\n```python","metadata":{"id":1047}}],["1048",{"pageContent":"While we wait, let's import `redisbeat` in `lib/tasks.py` and create our `schedule_digest` function. Add the following code to the bottom of `lib/tasks.py`:\n\n```python\nfrom redisbeat.scheduler import RedisScheduler\n\nscheduler = RedisScheduler(app=celery)\n\ndef schedule_digest(email, hour, minute):\n\n    scheduler.add(**{\n        \"name\": \"digest-\" + email,\n        \"task\": \"lib.tasks.send_digest_email\",\n        \"kwargs\": {\"to_address\": email },\n        \"schedule\": crontab(minute=minute, hour=hour)\n    })\n```\n\nThis code uses `redisbeat`'s `RedisScheduler` to schedule the execution of our `send_digest_email` task. Note that we've used the task's full path, with `lib` included: this is necessary when scheduling.\n\nWe've used Celery's [crontab](https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html#crontab-schedules) schedule type, which is highly suited to managing tasks that run at a certain time each day.\n\nIf a task with the same name already exists in the schedule, `scheduler.add` will update it rather than adding a new task. This means our users can change their digest time at will.\n\nNow that our code is in place, we can add a new Celery beat process to `start.sh`. Add the following line just after the line that starts the Celery worker:\n\n```bash\ncelery -A lib.tasks.celery beat -S redisbeat.RedisScheduler --loglevel=debug &\n```\n\nNow run your repl. You can test this functionality out now by scheduling your digest about ten minutes in the future. If you want to receive regular digests, you will need to enable [Deployments](/hosting/deployments/about-deployments) in your repl. Also, remember that all times must be specified in the UTC timezone.\n\n## Where next?\n\nWe've built a useful multi-component application, but its functionality is fairly rudimentary. If you'd like to keep working on this project, here are some ideas for next steps:\n\n- Set up a custom domain with Mailgun to help keep your digest emails out of spam.","metadata":{"id":1048}}],["1049",{"pageContent":"- Set up a custom domain with Mailgun to help keep your digest emails out of spam.\n- Feed scraper optimization. Currently, we fetch the whole feed twice when adding a new subscription and have to sleep to avoid rate-limiting. The scraper could be optimized to fetch feed contents only once.\n- Intelligent digest caching. If multiple users subscribe to the same feed and schedule their digests for the same time, we will unnecessarily fetch the same content for each one.\n- Multiple digests per user. Users could configure different digests with different contents at different times.\n- Allow users to schedule digests in their local timezones.\n- Styling of both website and email content with CSS.\n- A production WSGI and web server to improve the web application's performance, like we used in our [previous tutorial on building with Nix](/tutorials/python/build-with-nix).\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/RSSdigest?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1049}}],["1050",{"pageContent":"---\ntitle: Snake game with PyGame\n---\n\n# Build the Snake Game with Pygame\n\n![](https://docimg.replit.com/images/tutorials/19-snake-pygame/snake-game-cover.jpg)\n\nSnake was an incredibly popular game, mostly remembered from the 1990s era cell phones. For many people, it was the only game on their phone at that time. In the most basic form, it's a super simple game, but still strangely entertaining. It's also a great game to learn the basics of game making from.\n\nIn this tutorial, we'll implement the most basic form of Snake in [pygame](https://www.pygame.org/)\n\n![snake game functionality](https://docimg.replit.com/images/tutorials/19-snake-pygame/snake-game.gif)\n\n## Overview and Requirements\n\nWe'll use the [Replit](https://replit.com) web IDE for creating our version of Snake.\n\nLet's think a bit about what we need to do. Snake in its basic form is a series of blocks representing a snake moving around a grid, with the player controlling the direction. It also has simple rules – when the snake touches the sides of the screen, it dies. If the snake crosses itself, it also dies. If the snake eats some food (a different type of block), it grows by 1 block. The food then re-appears at another random place on the screen.\n\nA few components we will need to build are:\n\n- A way to draw the blocks and move them on the screen.\n- A way to get steering directions from the player to the snake.\n- A way to determine if the snake has gone out of bounds of the screen.\n- A way to determine if the snake has crossed over itself (or bitten itself, as another analogy).\n- A way to randomly place the food on the screen.\n- A way to determine if the snake has eaten, or touched, the food.\n- A way to grow the snake.\n\nThat's a lot to think about! Let's get started and create a project in [Replit](https://replit.com).\n\n## Creating a New Project\n\nHead over to [Replit](https://replit.com) and create a new repl. Choose **Python** as your language. Now, give this repl a name, like \"snake-pygame\".","metadata":{"id":1050}}],["1051",{"pageContent":"## Creating a New Project\n\nHead over to [Replit](https://replit.com) and create a new repl. Choose **Python** as your language. Now, give this repl a name, like \"snake-pygame\".\n\n![creating an repl](https://docimg.replit.com/images/tutorials/19-snake-pygame/new_repl.png)\n\nAfter the repl has booted up, you should see a `main.py` file. This is where we'll start coding.\n\n## Getting Started with Pygame\n\nA commonly used game framework in Python is [pygame](https://www.pygame.org/). It has functionality to draw shapes and images to the screen, get user input, play sounds and more. We'll use some of the basic functionality when we build this game, to see how it works.\n\nWe can import it into our project by adding the following line to our `main.py` file:\n\n```python\nimport pygame\n```\n\nTo get the pygame framework started, we need to add some initialization code:\n\n```python\npygame.init()\nbounds = (300,300)\nwindow = pygame.display.set_mode(bounds)\npygame.display.set_caption(\"Snake\")\n```\n\n**Line 1** of this code starts up the pygame system, by [initializing](https://www.pygame.org/docs/ref/pygame.html?highlight=init#pygame.init) its modules (for example, the font, sound or graphics code).\n**Line 2** creates a new tuple called `bounds`. This tuple contains the dimensions of the window that we'll run our snake game in.\n**Line 3** creates a new window for us to display our game in.\n**Line 4** gives the window a caption, or title. This can be whatever you'd like to call the game.\n\nIf you run the project, using the \"**Run >**\" button at the top center of the repl, you should see a small blank window come up. That means everything is initialized and working so far.\n\n## Creating the Snake Class\n\nNow that we have the basic framework, let's create a class to model our snake. This class will have the following responsibilities:\n\n1. Keeping track of where the snake is.\n1. Keeping track of the length of the snake.\n1. Allowing the snake to grow.\n1. Checking for collisions with the window boundaries.","metadata":{"id":1051}}],["1052",{"pageContent":"1. Keeping track of where the snake is.\n1. Keeping track of the length of the snake.\n1. Allowing the snake to grow.\n1. Checking for collisions with the window boundaries.\n1. Checking if the snake has crossed over ('bitten') itself\n1. Keeping track of the direction the snake is moving in.\n\nLet's start by creating a new file called `snake.py`. Add the following code:\n\n```python\nfrom enum import Enum\n\nclass Direction(Enum):\n  UP = 0\n  DOWN = 1\n  LEFT = 2\n  RIGHT = 3\n\nclass Snake:\n  length = None\n  direction = None\n  body = None\n  block_size = None\n  color = (0,0,255)\n  bounds = None\n\n  def __init__(self, block_size, bounds):\n    self.block_size = block_size\n    self.bounds = bounds\n    self.respawn()\n\n  def respawn(self):\n    self.length = 3\n    self.body = [(20,20),(20,40),(20,60)]\n    self.direction = Direction.DOWN\n```\n\nThe first class in this file is an [enumeration](https://docs.python.org/3/library/enum.html), which is a nice way to group together a set of related constants. We use this to define the allowable directions the snake can move in, and make code that checks and changes directions easy to read and change, compared to just using numbers or strings to define the directions.\n\nThen we define the `Snake` class itself. The first few lines are setting up some variables – this is not strictly necessary in Python, but it does make it easier to keep track of the variables, or properties, in our class.","metadata":{"id":1052}}],["1053",{"pageContent":"Then, we have the initializer method on the line starting with `def __init__`. When we create an instance of our `Snake` class, we pass in the `block_size`, which must be an integer with size of each block that makes up our grid. This is used for the size of each segment of the snake, as well as for positioning and moving the snake on the board. We also pass in `bounds`, which is a tuple of integers with the width and height of the playable area (the same size as the screen area). This is so we can check if the snake has moved out of bounds. In the initializer method, we assign these initializer inputs to our internal variables, so that we can use them in other methods later on. Then we call our internal `respawn` method which contains the default setup for the snake's length, initial body segment definitions, and starting direction. We'll also call `respawn` whenever the snake crashes or dies in other ways, to reset the game.\n\nLet's look a bit at the `body` variable. It is a Python list, containing tuples (or pairs) of co-ordinates. Each of these co-ordinates describes the top left _x_ and _y_ screen positions of a body segment, or block. We will add (append) to this list as the snake grows. We also use this list when drawing the snake.\n\n## Drawing the Snake\n\nNow that we have the basics of the `Snake` class and its initialization code up and running, let's add in a method to draw the snake to the screen. Add this to the `Snake` class:\n\n```python\n  def draw(self, game, window):\n    for segment in self.body:\n      game.draw.rect(window, self.color, (segment[0],segment[1],self.block_size, self.block_size))\n```","metadata":{"id":1053}}],["1054",{"pageContent":"```python\n  def draw(self, game, window):\n    for segment in self.body:\n      game.draw.rect(window, self.color, (segment[0],segment[1],self.block_size, self.block_size))\n```\n\nThis method takes in a pygame instance, `game`, and a window (or surface in general pygame terminology) to draw on. It then loops through each of the tuples in the `body` property, and uses the [pygame built in method `draw.rect`](https://www.pygame.org/docs/ref/draw.html?highlight=rect#pygame.draw.rect) to draw a rectangle for each block, or snake segment in the body list. We also use our `block_size` parameter to set the width and height of the rectangle drawn.\n\nLet's try out what we have so far. We'll just see a static few blocks on the screen, but it's a good test to see if everything is on the right track. To get it working, let's import and create a new `Snake` object, and set up the first part of our game loop in `main.py`.\n\nAdd the code to import the classes in the `snake.py` file at the top of the `main.py` file, just under the `import pygame` line:\n\n```python\nfrom snake import *\n```\n\nNow we add the following code just under the line `pygame.display.set_caption(\"Snake\")`:\n\n```python\nblock_size = 20\nsnake = Snake(block_size, bounds)\n```\n\nThis code sets up our `block_size` for our grid to a default of 20 pixels. Then we create a new instance of our `Snake` class, with the block size, and the bounds that we used to set our window size to, and that's what the snake will use to check if it hits the edge of the window.\n\nNow let's set up our [game loop](https://en.wikipedia.org/wiki/Video_game_programming#Game_structure). A game loop is the central co-ordination code of most games. It handles reading in user input, updating player status (e.g., position, score etc.), checks for interactions and collisions, and handles drawing.\n\nAdd the following to the `main.py` file to set up our game loop:\n\n```python\nrun = True\nwhile run:\n  pygame.time.delay(100)\n\n  for event in pygame.event.get():\n    if event.type == pygame.QUIT:","metadata":{"id":1054}}],["1055",{"pageContent":"Add the following to the `main.py` file to set up our game loop:\n\n```python\nrun = True\nwhile run:\n  pygame.time.delay(100)\n\n  for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n      run = False\n\n  window.fill((0,0,0))\n  snake.draw(pygame, window)\n  pygame.display.flip()\n```\n\nThis code sets up a loop that keeps repeating every 100ms until a quit signal is received from the window. This is triggered by a player clicking the \"Close Window\" button at the top of the window. Pygame has the concept of an [event queue](https://www.pygame.org/docs/ref/event.html#pygame.event.get) to which it writes various events that have been triggered. We can read this event queue each time we loop in our game loop and check to see if any of the events was a `QUIT` signal. Then we can set the condition for the loop to run to `False` and the next time the loop cycles round, our `while` condition will no longer be true, and the game will exit.\n\nOur loop also clears the window on each round in preparation for drawing the updated game state. You can see that on the line ` window.fill((0,0,0))`. This fills the whole window with black, specified in the RGB color tuple `(0,0,0)`. Now that we have a clean slate, we can call the `draw` method on our snake object. We pass in the pygame and Window objects, so that the Snake can draw to them. When we render our food, we will call it after this line.\n\nLastly, we do the final render to the screen by calling `pygame.display.flip()`. This takes all our updates and \"flips\" them from the window buffer to the screen.\n\nTo test that the game loop and drawing is working, run the program by clicking the large \"**Run >**\" button at the top of the repl. At the top right section of the repl, you should see a black window with a few blocks representing a snake on it.\n\n![test loop and render](https://docimg.replit.com/images/tutorials/19-snake-pygame/test-loop.png)\n\n## Moving the Snake","metadata":{"id":1055}}],["1056",{"pageContent":"![test loop and render](https://docimg.replit.com/images/tutorials/19-snake-pygame/test-loop.png)\n\n## Moving the Snake\n\nOur next step is to get the snake to move on the screen. A way to do this is to check which direction the snake is heading, and add a block in front of the snake in that direction. Then we'll need to remove a block at the tail end of the snake.\n\nTo do this, add this method to the `Snake` class in the `snake.py` file:\n\n```python\n  def move(self):\n    curr_head = self.body[-1]\n    if self.direction == Direction.DOWN:\n      next_head = (curr_head[0], curr_head[1] + self.block_size)\n      self.body.append(next_head)\n    elif self.direction == Direction.UP:\n      next_head = (curr_head[0], curr_head[1] - self.block_size)\n      self.body.append(next_head)\n    elif self.direction == Direction.RIGHT:\n      next_head = (curr_head[0] + self.block_size, curr_head[1])\n      self.body.append(next_head)\n    elif self.direction == Direction.LEFT:\n      next_head = (curr_head[0] - self.block_size, curr_head[1])\n      self.body.append(next_head)\n\n    if self.length < len(self.body):\n      self.body.pop(0)\n```\n\nThis method gets the \"head\" of the snake, which is the last element of our `body` list. Python has a handy feature of negative indices. This means an index of `-1` returns the last element in the list, `-2` returns the second last, and so on. This allows us to easily get the last element, or the front of the snake in our body list, by using the code `curr_head = self.body[-1]`.\n\nAfter we get the head of the snake, we check which direction the snake is heading in. If it is going up or down, we append a new block by copying the x co-ordinate of the current head, and adding or subtracting (depending on if the snake is going up or down) one grid `block_size` to the y co-ordinate. Similarly, if the snake is heading left or right, we append a new block to the `body` list, using the y co-ordinate of the current head, but modifying the x co-ordinate by one `block_size`.","metadata":{"id":1056}}],["1057",{"pageContent":"Once that is done, we remove a block at the tail end of the snake, using the code `self.body.pop(0)`. We have a condition before that though: `if self.length < len(self.body)`. This is important for when we get to the snake eating, or growing. Every time the snake eats, we will increment the `length` property of the snake. Then, we can use that `length` property to determine if we should actually remove the tail segment from the snake when it moves.\n\nNow let's add a call to this `move` method in our game loop. In the `main.py` file, modify the game loop to call this method:\n\n```python\nrun = True\nwhile run:\n  pygame.time.delay(100)\n\n  for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n      run = False\n\n  snake.move()\n  window.fill((0,0,0))\n  snake.draw(pygame, window)\n  pygame.display.update()\n```\n\nNotice that we've added the line `snake.move()`. This will call our `move` method that we added to our snake on every loop. This will create the impression of the snake moving smoothly on the screen. Test it out by clicking the \"**Run >**\" button at the top center of the repl. The snake should start at the top left of the window and move down the screen, until it disappears out of the window bounds.\n\n![snake moving test](https://docimg.replit.com/images/tutorials/19-snake-pygame/snake-move-test.gif)\n\n## Steering the Snake\n\nWe've got the snake moving! Our next task is to get the player's input to steer the snake. We'll start by adding the following method to the `Snake` class in the `snake.py` file:\n\n```python\n  def steer(self, direction):\n    if self.direction == Direction.DOWN and direction != Direction.UP:\n      self.direction = direction\n    elif self.direction == Direction.UP and direction != Direction.DOWN:\n      self.direction = direction\n    elif self.direction == Direction.LEFT and direction != Direction.RIGHT:\n      self.direction = direction\n    elif self.direction == Direction.RIGHT and direction != Direction.LEFT:\n      self.direction = direction\n```","metadata":{"id":1057}}],["1058",{"pageContent":"self.direction = direction\n    elif self.direction == Direction.RIGHT and direction != Direction.LEFT:\n      self.direction = direction\n```\n\nThis method works by accepting an argument `direction`, which must be one of our `Direction` enumeration values we defined earlier. We then do a check for each possible direction to ensure that the new direction input is not the complete opposite direction to which the snake is currently moving – this is because we don't want to allow reversing the snake in our game. If the input direction is a legal move, we update the snake's `direction` property. Recall from our `move` method, this property is used to determine how to update the snake's `body` list property, to create the snake's movement.\n\nNow that we can update the snake's direction through a steering command, we need to get the player's input. Pygame has a useful method [`key.get_pressed()`](https://www.pygame.org/docs/ref/key.html?highlight=key.get_pressed#pygame.key.get_pressed), which returns a list containing a boolean element for each key on the keyboard. This allows us to find which key the player is pushing by looking up the value at the correct index in this keys list. Luckily, we don't need to memorize the correct index for every key, as pygame has readable names defined as constants we can use. For example, to find out if the 'Up Arrow' is being pressed, we can call `keys = pygame.key.get_pressed()` to get the status list for all keys. Then we can look for the 'Up Arrow' key's state by looking at the entry for that key, with the code `keys[pygame.K_UP]`. If the key is being pressed, it will have a `True` value; if not pressed its value will be `False`.\n\nLet's add code to our game loop to check if the \"Up\", \"Down\", \"Left\" or \"Right\" arrow keys are being pressed. Then, depending on the key pressed, we can call our `steer` method with the updated direction command. Add the following code above the `snake.move()` line in the game loop, in the `main.py` file:\n\n```python","metadata":{"id":1058}}],["1059",{"pageContent":"```python\n  keys = pygame.key.get_pressed()\n  if keys[pygame.K_LEFT]:\n    snake.steer(Direction.LEFT)\n  elif keys[pygame.K_RIGHT]:\n    snake.steer(Direction.RIGHT)\n  elif keys[pygame.K_UP]:\n    snake.steer(Direction.UP)\n  elif keys[pygame.K_DOWN]:\n    snake.steer(Direction.DOWN)\n```\n\nLet's test this. Click the \"**Run >**\" button at the top center of the repl. For Pygame to receive keyboard input, you'll need to click into the game window first quickly, as the game is starting up. You should now be able to use the cursor keys to steer the snake around the screen! We don't have bounds checking yet, so the snake can disappear off the edge of the window.\n\n![snake steering test](https://docimg.replit.com/images/tutorials/19-snake-pygame/snake-steer-test.gif)\n\n## Adding Food\n\nWe have a snake, it moves, and a player can steer it. Let's add some food that the snake can eat, which will cause it to grow longer.\n\nWe'll create the food in a similar way we created the snake. Create a new file called `food.py`. In this file, we'll create a `Food` class, to manage the position and drawing of food on the grid.\n\nIn the game of snake, once a food block is eaten, another one appears at a random location on the grid. This means we'll need a random number generator to determine the location of the food. Python has a module for this called `random`. This has a function called `randint` which we can use to find a random position on the screen to place the food. We'll start by adding a reference to the `random` module in the `food.py` file. Then we'll add the `Food` class.\n\n```python\nimport random\n\nclass Food:\n    block_size = None\n    color = (0,255,0)\n    x = 0;\n    y = 0;\n    bounds = None\n\n    def __init__(self, block_size, bounds):\n        self.block_size = block_size\n        self.bounds = bounds\n\n    def draw(self, game, window):\n        game.draw.rect(window, self.color, (self.x, self.y, self.block_size, self.block_size))\n\n    def respawn(self):\n        blocks_in_x = (self.bounds[0])/self.block_size;","metadata":{"id":1059}}],["1060",{"pageContent":"game.draw.rect(window, self.color, (self.x, self.y, self.block_size, self.block_size))\n\n    def respawn(self):\n        blocks_in_x = (self.bounds[0])/self.block_size;\n        blocks_in_y = (self.bounds[1])/self.block_size;\n        self.x = random.randint(0, blocks_in_x - 1) * self.block_size\n        self.y = random.randint(0, blocks_in_y - 1) * self.block_size\n```\n\nNotice the commonality with the `Snake` class. They both have a `draw` method and a `respawn` method. Generally in games, most objects will have this functionality.\n\nThe `Food` class has similar properties to the `Snake` class, too. It has a `block_size`, referring to the size of each block on our virtual grid. It has a `color` tuple, which we'll use when drawing the food. It also has a record of the `bounds` of the window, so that we don't draw the food outside the visible window. However, since the food is only made up of 1 block, we don't need a `body` array like the snake class. We can keep track of its position with x and y co-ordinate variables.\n\nThe `draw` method is a simplified version of the one in the snake class. This is because we only need to draw 1 block.\n\nThe `respawn` method is interesting. We need to align our food with our virtual grid, defined by the `block_size`. However, if we simply called `random.randint` to find an x and y position for the food, it might land up halfway through a block on the grid. This will make it strange to try aim at with the snake, as the snake will not be aligned with the food.","metadata":{"id":1060}}],["1061",{"pageContent":"To keep things aligned, we need to take our information of the size of the window, encapsulated in our `bounds` property, and our knowledge of the `block_size` of our grid to figure out the dimension of the window in terms of blocks. So for example, if our window size, or `bounds` is 300x300 pixels, and our `block_size` is 20px, then there are 300px/20px = 15 blocks in each dimension. We can then choose a random position in terms of block dimensions, i.e choose a number from 1-15, in which to place the food. To get the actual x and y screen co-ordinates to draw the block, we can just multiply our block number by the `block_size`.\n\nIn the first 2 lines of the `respawn` method, we find the number of blocks in each dimension, as described above. Then the next 2 lines find a random block, and translate that block to x and y co-ordinates. You may notice that instead of finding a random number between 1 and the number of blocks in a dimension, we find one between 0 and the number of blocks minus 1. This is because the window x and y start at 0, not 1, so we need to shift the range over by 1 to compensate.\n\nWe have a `Food` class, so we can create an instance of it and add it to our game loop.\n\nFirst we need to add a reference to the `food.py` file, and import the `Food` class. In the `main.py` file, just below the `import pygame` line, add the following:\n\n```python\nfrom food import Food\n```\n\nIn the `main.py` file, after the line `snake = Snake(block_size, bounds)`, and just before the game loop, create a new `Food` object by adding the line:\n\n```python\nfood = Food(block_size,bounds)\n```\n\nIn the game loop in `main.py`, just after the line `snake.draw(pygame, window)`, we can add a line to draw the food. Add the following line:\n\n```python\nfood.draw(pygame, window)\n```\n\nGreat! Let's test up to this point by clicking the \"**Run >**\" button again. You should now see the snake, as well as a green block representing the food.","metadata":{"id":1061}}],["1062",{"pageContent":"```python\nfood.draw(pygame, window)\n```\n\nGreat! Let's test up to this point by clicking the \"**Run >**\" button again. You should now see the snake, as well as a green block representing the food.\n\n![Food drawing test](https://docimg.replit.com/images/tutorials/19-snake-pygame/food-draw-test.gif)\n\n## Adding Collision Detection for Food\n\nYou'll notice that the snake can go right over the food, and nothing happens. A core concept in games is [collision detection](https://en.wikipedia.org/wiki/Collision_detection). As we are using a strict grid system, we can use a simplified version of collision detection. We'll use this to determine if the snake has moved over, or collided with, a food object. Then we can increase the snake's length, and respawn the food again.\n\nWe'll give the responsibility for checking collisions to the `Snake` class. In the `snake.py` file, add the following two methods to the `Snake` class:\n\n```python\n  def eat(self):\n    self.length += 1\n\n  # sees if the head of the snake is over the food\n  def check_for_food(self, food):\n    head = self.body[-1]\n    if head[0] == food.x and head[1] == food.y:\n      self.eat()\n      food.respawn()\n```\n\nThe first method, `eat`, increases the allowable length of the snake. Remember that the `length` property is used in the `move` method to determine if a tail segment needs to be removed.\n\nThen we have the `check_for_food` method. This accepts a `food` object as an argument. In this function, we get the front most block of the snake, or `head` by accessing the last element in the `body` list. Recall that we can use a negative index to access the last element. Then, because we are using a strict grid system for our game layout, we only need to check if the x and y co-ordinates of the snake head are equal to the x and y co-ordinates of the food object. If they are, we call the `eat` method to increase the length of the snake. We also call `respawn` on the food to make it disappear from its current location, and reappear at a different location.","metadata":{"id":1062}}],["1063",{"pageContent":"In the game loop in the `main.py` file, add the following code, just after the `snake.move()` line:\n\n```python\nsnake.check_for_food(food)\n```\n\nThis adds a call to our food collision detection method on each loop of the game, just after the snake has moved into a new block.\n\nWe can test this again, and see if our snake now grows when we eat some food. Click the \"**Run >**\" button again to test.\n\n![Snake eat test](https://docimg.replit.com/images/tutorials/19-snake-pygame/snake-eat-test.gif)\n\n## Tail and Bound Collision Detection\n\nWe now need to add collision detection if the snake crosses over itself. This is a deadly move, and one of the ways to reach \"Game Over\" in Snake. Similarly to checking if the snake has eaten food, we can add a method to the `Snake` class in the `snake.py` file to check if the snake has crossed over, or bitten itself:\n\n```python\n  def check_tail_collision(self):\n    head = self.body[-1]\n    has_eaten_tail = False\n\n    for i in range(len(self.body) - 1):\n      segment = self.body[i]\n      if head[0] == segment[0] and head[1] == segment[1]:\n        has_eaten_tail = True\n\n    return has_eaten_tail\n```\n\nThis method gets the `head` of the snake, as before in our `check_for_food` method. Then we set a flag variable to determine if the snake has eaten its tail, and initialize it to `False`.\n\nThe next part of the method runs through all the segments that make up the `body` of the snake, excluding the last element of the `body` list, as this element represents the head of the snake. Then we test the x and y co-ordinates of the `head` and the current segment. If they match, it means the head of the snake is over a body segment, so we can set our flag `has_eaten_tail` to true.\n\nAfter all segments are tested, we return the value of the `has_eaten_tail` flag.\n\nThe last detection we need to add is if the snake moves outside the bounds of the window. We can add the following method to the `Snake` class to do that:\n\n```python\n  def check_bounds(self):\n    head = self.body[-1]","metadata":{"id":1063}}],["1064",{"pageContent":"```python\n  def check_bounds(self):\n    head = self.body[-1]\n    if head[0] >= self.bounds[0]:\n      return True\n    if head[1] >= self.bounds[1]:\n      return True\n\n    if head[0] < 0:\n        return True\n    if head[1] < 0:\n        return True\n\n    return False\n```\n\nThis code once again retrieves the `head` block of the snake from the end of the `body` list. Then it checks each dimension against the bounds of the window. If it's outside any of these bounds, the method returns `True`. If the snake's head is still within bounds, it returns `False`.\n\n## Adding the \"Game Over\" Screen\n\nNow that we can detect game-ending collisions, we can add code to the game loop to call these methods, and handle the end of the game. When the game ends, we should show a \"Game Over\" message to the player for a second or two. Then we can reset the snake and the food to give the player another chance.\n\nTo add the \"Game Over\" message, we can make use of pygame's [font module](https://www.pygame.org/docs/ref/font.html?highlight=font#module-pygame.font). The basic steps for using a font to draw text to the screen are:\n\n1. Create a new font object, specifying the font type, size and **bold**/_italic_ options, using the constructor method [`font.SysFont`](https://www.pygame.org/docs/ref/font.html?highlight=font.sysfont#pygame.font.SysFont).\n1. Render the desired text to a surface using the [`render`](https://www.pygame.org/docs/ref/font.html?highlight=font.sysfont#pygame.font.SysFont) method on the font object created above.\n1. [`blit`](https://www.pygame.org/docs/ref/surface.html?highlight=blit#pygame.Surface.blit) the rendered text onto the main window surface.\n1. Update the window display to show this.\n\nTo implement the above steps, create a new `font` object by adding the following code under the line `food = Food(block_size,bounds)` in the `main.py` file:\n\n```python\nfont = pygame.font.SysFont('comicsans',60, True)\n```","metadata":{"id":1064}}],["1065",{"pageContent":"```python\nfont = pygame.font.SysFont('comicsans',60, True)\n```\n\nIn the game loop, we need to call the collision checking methods we added to the snake class earlier. If a collision is detected, we can render our \"Game Over\" message, pause, and reset the game. Add the following code under the line `snake.check_for_food(food)` in the game loop in the `main.py` file:\n\n```python\n  if snake.check_bounds() == True or snake.check_tail_collision() == True:\n    text = font.render('Game Over', True, (255,255,255))\n    window.blit(text, (20,120))\n    pygame.display.update()\n    pygame.time.delay(1000)\n    snake.respawn()\n    food.respawn()\n```\n\nThis code calls our bounds check and tail collision methods. If either of them come back `True`, we render a new \"Game Over\" message using the font steps above, and `blit` it to our main window. Then we delay for 1000ms (or 1 second), and then respawn both the snake and food objects for a new game.\n\nCongratulations! The basic Snake game is now complete. Click the \"**Run >**\" button at the top of the repl to try it out. When the snake crashes into itself, or goes off the edge of the window, the game will end and reset to a new one.\n\n![game over!](https://docimg.replit.com/images/tutorials/19-snake-pygame/game-over.gif)\n\n## Things to Try Next\n\nThere are endless features that could be added to this game. Some ideas are:\n\n- Create a 2-player version.\n- Add obstacles for the snake.\n- Incrementally speed up the game as it goes on, to make it harder.\n- Add better graphics, utilizing the pygame [image](https://www.pygame.org/docs/ref/image.html?highlight=image#module-pygame.image) modules to load \"sprites\" and textures for the game.\n- Add sound effects and music using pygame's [sound functions](https://www.pygame.org/docs/ref/mixer.html?highlight=sound#pygame.mixer.Sound).","metadata":{"id":1065}}],["1066",{"pageContent":"- Add sound effects and music using pygame's [sound functions](https://www.pygame.org/docs/ref/mixer.html?highlight=sound#pygame.mixer.Sound).\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/snake-pygame?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1066}}],["1067",{"pageContent":"# Building with Nix on Replit\n\nAs of May 2021, Replit [supports all programming languages through the power of Nix](https://blog.replit.com/nix). But Nix can do a whole lot more than just enable us to use new languages. In this article, we'll cover several different use-cases for Nix on Replit, including:\n\n- Setting up a production-grade web stack, with a database and support for multiple web servers.\n- Running third-party programs in Replit.\n- Playing DOOM in a repl.\n\n### What is Nix?\n\nNix is a tool designed for managing packages and system configurations. It has some similarities to package managers you may have used in the past, such as Homebrew on macOS, APT on Debian-based Linux distributions, Python's pip, or Node.js's NPM. If you haven't used a package manager before, it's basically an app store.\n\nWhen you install a package with a traditional package manager – say you want to install a browser like Firefox – it will download some files, unpack them in various places on your system, and run some configuration scripts. It will also install all of the additional programs and libraries Firefox needs to run. Many of these will have dependencies themselves, and so it will install those too. Ultimately, installing a single package can require many more installations and result in widespread changes to your system.\n\nSometimes, packages will be incompatible with each other, due to relying on different versions of the same dependency. For example, App #1 depends on `libxyz 1.4` and App #2 depends on `libxyz 1.5`. Installing App #2 upgrades `libxyz` and breaks App #1. Downgrading `libxyz` fixes App #1 but breaks App #2.\n\nThis is called [dependency hell](https://en.wikipedia.org/wiki/Dependency_hell), and it's one of the problems Nix was designed to solve. Whereas a standard package manager might install [Vim](https://www.vim.org/) to `/usr/bin/vim`, nix will install it to a directory that looks like this:\n\n```\n/nix/store/<hash>-vim-<version>\n```","metadata":{"id":1067}}],["1068",{"pageContent":"```\n/nix/store/<hash>-vim-<version>\n```\n\nThe directory name has three components: the package name, the version, and a hash of all the package information, such as configuration options. Two packages on two different systems with the same hash will be identical, but two packages with the same name and version but different hashes will have slight differences. Because of this, we can install multiple versions of the same package, neatly solving our App #1 and App #2 dependency hell.\n\nWhereas a package manager like APT might scatter the contents of an installed program across `/bin`, `/etc`, `/usr`, and other directories that require special privileges to write to, Nix keeps everything in `/nix/store`. This lets us securely install packages as a non-privileged user.\n\nPackages in Nix are built using _derivations_, which you can think of as build scripts. All derivations are written in the Nix language, a functional programming language, similar to Haskell or F#. If you haven't used a functional language before, the most fundamental thing to understand is that there isn't any persistent state, i.e. you can't define variables outside of functions. Functional languages are composed of functions that take some input and produce some output. Every time a function is executed with a given input, it will return the same output. This requires a different approach to traditional imperative programming languages but enhances predictability and reproducibility of output, two very good qualities for a build system.\n\nTo learn more about Nix, check out the following resources:\n\n- [Nix Pills](https://nixos.org/guides/nix-pills/): A guided introduction to Nix, split into self-contained chapters, or \"pills\".\n- [Nixology](https://www.youtube.com/playlist?list=PLRGI9KQ3_HP_OFRG6R-p4iFgMSK1t5BHs): A series of videos introducing Nix.\n- [Nix Package Manager Guide](https://nixos.org/manual/nix/stable/): The official Nix Package Manager manual.","metadata":{"id":1068}}],["1069",{"pageContent":"- [Nix Package Manager Guide](https://nixos.org/manual/nix/stable/): The official Nix Package Manager manual.\n- [A tour of Nix](https://nixcloud.io/tour): An overview of the Nix language.\n- [nix.dev](https://nix.dev): Getting started tutorials\n\n### How can we use Nix on Replit?\n\nEvery repl you create is backed by a [Docker](https://www.docker.com/) container. Anything you do from your repl, from running code to executing commands in the shell, will happen in the context of the `runner` user in this container. For reasons of security, this user does not have root privileges, and therefore cannot install packages using a traditional package manager like APT. But the `runner` in a Nix repl can install packages with Nix.\n\nThis opens up an enormous array of possibilities. In previous tutorials, we've focused on using repls to run custom code in various languages. The Replit Database makes it possible to create applications with persistent storage, but Nix allows us to use a standard DBMS like MySQL or Postgres. We can also install webservers and even graphical programs like Inkscape and LibreOffice.\n\nEssentially, Nix turns our repl into a fully fledged server. In the next few sections, we'll cover some of the things we can do as a result.\n\n## Deploying a production web stack on Replit with Nix\n\nThe first thing we'll build with Nix is a production web stack with the following components:\n\n- Python Flask as the application server.\n- Waitress as the [Web Server Gateway Interface](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface).\n- NGINX as the web server.\n- Postgres as the SQL database.\n\n### Why Waitress?\n\nIf you've built anything with Python and Flask, such as one of our previous tutorials, you will have used Flask's development server to interact with your application. While this server is great for development and debugging, it's optimised for a single user and gets quite slow if more than one person tries to use it.","metadata":{"id":1069}}],["1070",{"pageContent":"![Flask development server](https://docimg.replit.com/images/tutorials/30-build-with-nix/dev-server.png)\n\nWe can improve the speed of our Flask apps by using a production-grade [WSGI](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface) server in place of Flask's default, such as [Gunicorn](https://gunicorn.org/) or [Waitress](https://pypi.org/project/waitress/).\n\n### Why NGINX?\n\nWhat if we want to host more than just a Flask app? Let's consider an e-commerce site at `www.example.com`. The main store application is powered by Flask, but our marketing department would like to start a blog at `www.example.com/blog`. We could build blogging functionality into our e-commerce site, but it would be much quicker and easier to use a separate application, such as [Wordpress](https://wordpress.org/) or [Ghost](https://ghost.org/).\n\nThis is where a fully featured web server, such as NGINX or Apache, comes in. These web servers can be configured to serve several different applications and content directories at different locations on one or more domains. They're also much faster at serving static content than even a production-grade WSGI server, so even single-app deployments benefit from using them.\n\n### Why Postgres?\n\nWe've used Replit's Database for persistent storage in several previous tutorials. While it's easy to use in supported languages like Python, it doesn't have the power and flexibility of a mainstream SQL database, and we can't continue using it if we ever move our code out of Replit. Postgres is a popular SQL database used by many, from small startups to tech giants like Apple, Reddit and Spotify. We can use it too if we install it on Nix.\n\n### Repl overview\n\nWe've made a Nix repl containing the production web stack available here: [https://replit.com/@ritza/nix-template](https://replit.com/@ritza/nix-template)\n\nOpen it now, or fork it to your profile, and we'll go over how it works. Ensure that the repl's config files are showing.","metadata":{"id":1070}}],["1071",{"pageContent":"Open it now, or fork it to your profile, and we'll go over how it works. Ensure that the repl's config files are showing.\n\n![Show configuration](https://docimg.replit.com/images/tutorials/30-build-with-nix/\nshow-hidden-files.png)\n\nThe first file we'll look at is `replit.nix`. This is the base Nix file that tells our repl what packages to install. In the [default Nix repl](https://replit.com/@ritza/nix), it looks like this:\n\n```nix\n{ pkgs }: {\n    deps = [\n        pkgs.cowsay\n    ];\n}\n\n```\n\nThe first line, `{ pkgs }:`, defines an anonymous function that takes a single argument, `pkgs`. When we run our repl, this function will be called and its contents executed. In this case, its contents is a list of packages to install, one item long. Therefore, all this function does is install `cowsay`, a program that prints an ASCII cow.\n\n![Cowsay](https://docimg.replit.com/images/tutorials/30-build-with-nix/cowsay.png)\n\nBy contrast, the `replit.nix` file in our production web stack repl is more complicated. It looks like this:\n\n```nix\n{ pkgs }:\nlet\n\n    nginxModified = pkgs.nginx.overrideAttrs (oldAttrs: rec {\n        configureFlags = oldAttrs.configureFlags ++ [\n            \"--http-client-body-temp-path=/home/runner/REPL-NAME-HERE/cache/client_body\"\n            \"--http-proxy-temp-path=/home/runner/REPL-NAME-HERE/cache/proxy\"\n            \"--http-fastcgi-temp-path=/home/runner/REPL-NAME-HERE/cache/fastcgi\"\n            \"--http-uwsgi-temp-path=/home/runner/REPL-NAME-HERE/cache/uwsgi\"\n            \"--http-scgi-temp-path=/home/runner/REPL-NAME-HERE/cache/scgi\"\n         ];\n    });\n\nin {\n    deps = [\n        nginxModified\n        pkgs.python39\n        pkgs.python39Packages.flask\n        pkgs.python39Packages.waitress\n        pkgs.postgresql\n        pkgs.python39Packages.psycopg2\n    ];\n\n}\n```\n\nYou should recognise some similarities between this code and the default `replit.nix`. We're still defining an anonymous function that takes `pkgs`, but now we're installing more than one package.","metadata":{"id":1071}}],["1072",{"pageContent":"}\n```\n\nYou should recognise some similarities between this code and the default `replit.nix`. We're still defining an anonymous function that takes `pkgs`, but now we're installing more than one package.\n\nAll of the packages in `deps` are straight from Nix's package repository, except for `nginxModified`. We need to make some modifications to `nginx` to get it to run in our repl. Nix's language and system configuration abilities make this much simpler to do than if we were using a different package manager that didn't support recompiling packages.\n\nNix's `let ... in { ... }` control structure is used when we want to define local variables used in a given function. We define the variables after `let` and then use them after `in`. Let's take a closer look at the definition of `nginxModified`:\n\n```nix\n    nginxModified = pkgs.nginx.overrideAttrs (oldAttrs: rec {\n        configureFlags = oldAttrs.configureFlags ++ [\n            \"--http-client-body-temp-path=/home/runner/REPL-NAME-HERE/cache/client_body\"\n            \"--http-proxy-temp-path=/home/runner/REPL-NAME-HERE/cache/proxy\"\n            \"--http-fastcgi-temp-path=/home/runner/REPL-NAME-HERE/cache/fastcgi\"\n            \"--http-uwsgi-temp-path=/home/runner/REPL-NAME-HERE/cache/uwsgi\"\n            \"--http-scgi-temp-path=/home/runner/REPL-NAME-HERE/cache/scgi\"\n         ];\n    });\n```\n\nHere we're taking `pkgs.nginx` and calling [`overrideAttrs`](https://nixos.org/manual/nixpkgs/stable/#sec-pkg-overrideAttrs) to change the configuration flags that are set when compiling NGINX. We need to add a few flags that change the paths NGINX uses to paths that are accessible in our repl. Note that we've created all the directories in the expected locations.\n\n[The derivation that runs when we install `pkgs.nginx` can be found here](https://github.com/NixOS/nixpkgs/blob/master/pkgs/servers/http/nginx/generic.nix). Our version will do the same things, but with a few extra items in `configureFlags`.","metadata":{"id":1072}}],["1073",{"pageContent":"That's it for `replit.nix`. Now let's take a look at `.replit`. This file defines what command will get executed when we click the \"Run\" button, and what custom environment variables will be available to our repl.\n\n```bash\nrun = \"sh start.sh\"\n\n[env]\nPGDATA = \"/home/runner/${REPL_SLUG}/data\"\n```\n\nWe'll execute the shell script `start.sh` when we press \"Run\", and we have defined `PGDATA`, an environment variable Postgres uses to locate its data directory. Let's look at `start.sh` next:\n\n```sh\n# start Postgres\npg_ctl stop\n\ninitdb\ncp postgresql.conf.tpl data/postgresql.conf\n\nsocker_dir=\"\\/home\\/runner\\/${REPL_SLUG}\\/postgres\"\n\nsed -i \"s/replace_unix_dir/${socker_dir}/\" data/postgresql.conf\n\npg_ctl -l /home/runner/${REPL_SLUG}/postgresql.log start\n\ncreatedb -h 127.0.0.1\npsql -h 127.0.0.1 -c \"create database appdb;\"\n\n# start nginx\npkill nginx\n\nnginx -e /home/runner/$REPL_SLUG/logs/error.log -c /home/runner/$REPL_SLUG/nginx.conf\n\n# start Flask app\npython main.py\n```\n\nIn order, we start Postgres, then NGINX, and then our Python Flask application.\n\nOur Postgres code first stops any existing instances of Postgres, then calls `initdb`, which will create a new database at the directory specified in `$PGDATA` if none exists. We then copy our Postgres configuration file into our data directory and use `sed` to fill in its `unix_socket_directories` value, another directory we need to change to get things working in a repl.\n\nThe file `postgressql.conf.tpl` is long and mostly unimportant. The only part of that file that will be relevant for basic use is the following lines under the heading \"Connection Settings\":\n\n```\n# - Connection Settings -\n\nlisten_addresses = '127.0.0.1'      # what IP address(es) to listen on;\n                    # comma-separated list of addresses;\n                    # defaults to 'localhost'; use '*' for all\n                    # (change requires restart)\nport = 5432             # (change requires restart)\n```","metadata":{"id":1073}}],["1074",{"pageContent":"# defaults to 'localhost'; use '*' for all\n                    # (change requires restart)\nport = 5432             # (change requires restart)\n```\n\nThese lines set the database to listen on the [local loopback](https://en.wikipedia.org/wiki/Localhost#Loopback) on TCP port 5432. This will allow other programs in our repl to connect to it over the network, without having it exposed to the internet or other repls. This is relevant for the next few lines of our script:\n\n```sh\npg_ctl -l /home/runner/${REPL_SLUG}/postgresql.log start\n\ncreatedb -h 127.0.0.1\npsql -h 127.0.0.1 -c \"create database appdb;\"\n```\n\nThe first line starts our database, and the last two create a Postgres instance usable by `runner` and within that, a database named `appdb`. Both of these lines will fail on subsequent runs of `start.sh` (if the database has already been created), so we don't need to worry about overwriting our database every time we run our repl.\n\nThe code for starting NGINX is simpler:\n\n```sh\n# start nginx\npkill nginx\n\nnginx -e /home/runner/$REPL_SLUG/logs/error.log -c /home/runner/$REPL_SLUG/nginx.conf\n```\n\nFirst, we kill any existing `nginx` processes, and then we start NGINX, telling it to write errors to `logs/error.log` and use the configuration file `nginx.conf`. Like `postgresql.conf`, this configuration file is mostly unimportant for basic use. The following changes have been made from Nix's default NGINX configuration file:\n\n1. The option `pid` specifies a repl-accessible PID file location:\n   ```\n   pid        /home/runner/REPL-NAME-HERE/logs/nginx.pid;\n   ```\n2. The option `access_log` in the `http` block specifies a repl-accessible access log file location:\n   ```\n   access_log  /home/runner/REPL-NAME-HERE/logs/access.log;\n   ```\n3. The `server` block has been changed to host our Python server, as detailed below.\n\n   ```\n       server {\n           listen       8080;\n           server_name  localhost;\n\n           #charset koi8-r;\n\n           #access_log  logs/host.access.log  main;","metadata":{"id":1074}}],["1075",{"pageContent":"```\n       server {\n           listen       8080;\n           server_name  localhost;\n\n           #charset koi8-r;\n\n           #access_log  logs/host.access.log  main;\n\n           location / {\n               proxy_pass   http://127.0.0.1:8181;\n           }\n\n           #error_page  404              /404.html;\n\n           # redirect server error pages to the static page /50x.html\n           #\n           error_page   500 502 503 504  /50x.html;\n           location = /50x.html {\n               root   html;\n           }\n\n       }\n   ```\n\nIn NGINX, `server` blocks are what you use to set up websites on individual domains. Each domain (e.g. `example.com`) or subdomain (e.g. `blog.example.com`) will have its own server block. To create a `server` block that will define what our repl hosts, we use the following NGINX directives:\n\n```\n    listen  8080;\n    server_name  localhost;\n```\n\nHere we've set NGINX up to run our server on TCP port 8080, as per [Replit's hosting guidelines](/hosting/deployments/about-deployments). Within our `server` block, we can have one or more `location` blocks. These tell NGINX what content to host at different URLs. We can use the `proxy_pass` directive to serve the contents of another webserver running in our repl, or the `root` directive to serve static files. You can learn more about configuring NGINX in the official [NGINX Beginner's Guide](http://nginx.org/en/docs/beginners_guide.html).\n\nThe last thing we do in `start.sh` is start up our Python Flask server:\n\n```sh\n# start Flask app\npython main.py\n```\n\nThe code for `main.py` should look familiar if you've used Flask before:\n\n```python\nfrom flask import Flask\nfrom waitress import serve\nimport psycopg2\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n\n    connection = psycopg2.connect(\n        host=\"127.0.0.1\",\n        database=\"appdb\")\n\n    cursor = connection.cursor()\n    cursor.execute('SELECT version()')\n    db_version = cursor.fetchone()\n    cursor.close()\n\n    return f\"Hello from Python! PostgreSQL database version: {db_version}\"","metadata":{"id":1075}}],["1076",{"pageContent":"cursor = connection.cursor()\n    cursor.execute('SELECT version()')\n    db_version = cursor.fetchone()\n    cursor.close()\n\n    return f\"Hello from Python! PostgreSQL database version: {db_version}\"\n\n#app.run(host='127.0.0.1', port=8181) # dev server\nserve(app, host='127.0.0.1', port=8181, url_scheme='https') # production server\n```\n\nIn this code, we've created a Flask application that connects to our Postgres database and is served on the local loopback address at TCP port 8181 by the Waitress WSGI server.\n\nIf you run the repl now, you'll see a page showing version information about our PostgreSQL database.\n\nFrom this base, you can build and configure a production-ready web application. Try the following ideas:\n\n- Implement the code from one of our previous Flask-based tutorials, such as [this PDF report generator](/tutorials/python/pdf-report-generator-from-spreadsheet). See if you can adapt the content to use Postgres rather than the Replit Database.\n- Implement your own Flask web application, using Postgres as a database.\n- Add a second application listening on a different loopback port and available from a different URL. This could be your own Python or Node.js project, or a deployment of open-source software such as Ghost or Wordpress.\n\n## A few other things you can do with Nix and Replit\n\nWe started with a complex example to give you an idea of the power and potential of Nix, but there are a few other things you can do with it that don't require the same amount of set up.\n\n### Jupyter Notebook\n\nYou can run a [Jupyter Notebook](https://jupyter.org/) in a Nix repl. Add `pkgs.jupyter` to the deps list in `replit.nix`, set `run` in `.replit` to `sh start.sh`, and create a `start.sh` script with the following contents:\n\n```sh\nmkdir data\njupyter notebook --ip 0.0.0.0 --port 8080 --notebook-dir /home/runner/$REPL_SLUG/data\n```","metadata":{"id":1076}}],["1077",{"pageContent":"```sh\nmkdir data\njupyter notebook --ip 0.0.0.0 --port 8080 --notebook-dir /home/runner/$REPL_SLUG/data\n```\n\nNotebooks are web-based interactive development environments that allow you to mix runnable code, text notes, mathematical equations, and charts and graphs. They're often used by data scientists.\n\n[https://replit.com/@ritza/nix-jupyter](https://replit.com/@ritza/nix-jupyter)\n\n![Jupyter notebook](https://docimg.replit.com/images/tutorials/30-build-with-nix/jupyter-notebook.png)\n\n### VSCode Server\n\nYou can run a Visual Studio Code Server, which will allow you to use a personal, customised version of the popular text editor from anywhere, simply by navigating to your repl's URL.\n\n[https://replit.com/@ritza/nix-vscode-server](https://replit.com/@ritza/nix-vscode-server)\n\n![VS Code server](https://docimg.replit.com/images/tutorials/30-build-with-nix/vscode-server.png)\n\n### Alternative web stacks\n\nInstead of NGINX, you could use [Apache](https://httpd.apache.org/), and instead of Postgres, you could try [MySQL](https://www.mysql.com/) or even a [NoSQL](https://en.wikipedia.org/wiki/NoSQL) database like [MongoDB](https://www.mongodb.com/). And of course, you can use just about any mainstream programming language to write your web application code instead of Python, such as JavaScript, Ruby or Java.\n\n### Other programming languages\n\nYou can set up and use a programming language that is not officially supported by Replit, such as [Racket](https://racket-lang.org/) (`nixpkgs.racket`), [Prolog](https://www.swi-prolog.org/) (`nixpkgs.swiProlog`), or even [COBOL](https://en.wikipedia.org/wiki/COBOL) (`nixpkgs.gnu-cobol`).\n\n[https://replit.com/@ritza/nix-cobol](https://replit.com/@ritza/nix-cobol)\n\n### DOSBox\n\nWe can get the popular MS-DOS emulator [DOSBox](https://www.dosbox.com/) working in a Nix repl by just installing the right package and running it. From there, we can run any DOS program and use it in our repl's VNC window.","metadata":{"id":1077}}],["1078",{"pageContent":"[https://replit.com/@ritza/nix-dosbox](https://replit.com/@ritza/nix-dosbox)\n\nHere's DOOM in a repl:\n\n![Doom](https://docimg.replit.com/images/tutorials/30-build-with-nix/doom.png)\n\nOther DOS programs you can try:\n\n- [Liero](https://www.liero.be/), a keyboard-sharing worm fighting game.\n- WordStar 4.0, the word processor George RR Martin uses to write the _Game of Thrones_ book series.\n\n## General tips for building with Nix repls\n\nAs we've seen above, Nix allows us to use repls for more than just writing and testing code, but some packages require a fair amount of configuration to get working. Here are a few general tips for getting packages working in Nix repls:\n\n- First, search for the package you want on the [Nix package search website](https://search.nixos.org/packages) and add it to `deps` in `replit.nix`. If you don't see any errors in the console after running your repl, it probably worked. Some packages need to be manually started by specifying a run command in `.replit`, while others will start automatically.\n- Most of the installation errors you'll encounter will relate to file paths that don't exist in your repl, or that you don't have permission to access. These can generally be fixed if you can configure your package to look for those files in your repl's file list instead, which is hosted on disk at `/home/runner/REPL-NAME-HERE/`. Depending on the package, you may be able to do this with a custom configuration file, like we did with Postgres, or you may need to alter the way Nix installs it, as we did with NGINX.\n- You can view files and directories that aren't visible in your repl's filepane from the shell, using standard Unix commands like `ls`, `cd` and `cat`. This includes files and directories in the Nix store, at `/nix/store`. This will often be useful for debugging.\n- You can view a list of running processes with the shell command `ps aux`, and terminate them with `pkill <process-name>`.","metadata":{"id":1078}}],["1079",{"pageContent":"- You can view a list of running processes with the shell command `ps aux`, and terminate them with `pkill <process-name>`.\n- Loading the Nix environment will sometimes take a long time, especially if you have custom derivations.\n- If you're setting up a web server, refer to [our guidance on deploying HTTP servers](/hosting/deployments/about-deployments).\n\nAs a final reminder, make sure to abide by Replit's [Terms of Service](https://replit.com/site/terms) when using Nix repls, and avoid installing packages that use excessive system resources (such as cryptocurrency miners) or are intentionally malicious.","metadata":{"id":1079}}],["1080",{"pageContent":"---\ntitle: Juggling with PyGame\n---\n\n# Building a game with PyGame and Replit\n\n![](https://docimg.replit.com/images/tutorials/07-pygame/07-01-heading.png)\n\nSo far, we've mainly seen how to write text-based programs, or those with a basic web front end. In this tutorial, we'll instead build a 2D game using PyGame. You'll use animated sprites and learn how to:\n\n- Make these sprites move\n- Recognise when a sprite is clicked with the mouse.\n\nThe basic premise of the game is as follows. You're a juggler, learning to juggle. Balls will fall down from the top of the screen, and you'll need to click them to 'throw' them up again. After several successful throws without dropping any balls, more balls will be added to make the game harder.\n\n## Creating a PyGame repl\n\nAlthough [PyGame](https://en.wikipedia.org/wiki/Pygame) is a standard Python library, Replit provides it installed as a separate language. Create a new repl and select PyGame from the language dropdown.\n\n![**Image 2:** *Choosing PyGame from the `Create New Repl` screen.*](https://docimg.replit.com/images/tutorials/07-pygame/07-02-new-pygame-repl.png)\n\nYou'll see \"Python3 with PyGame\" displayed in the default console and a separate pane in the Replit IDE where you will be able to see and interact with the game you will create.\n\nThe first thing we need is a so-called \"sprite\", which is a basic image file that we will use in our game. Download the tennis ball file available [here](https://tutorial-files.util.repl.co/build-pygame/small_tennis.png) and save it to your local machine.\n\nNow upload it to your repl using the `upload file` button and you should be able to see a preview of the image by clicking on it in the files pane.\n\n![**Image 3:** *Viewing our sprite after uploading it.*](https://docimg.replit.com/images/tutorials/07-pygame/07-03-upload-png-sprite.png)\n\n## Displaying the sprite using PyGame","metadata":{"id":1080}}],["1081",{"pageContent":"![**Image 3:** *Viewing our sprite after uploading it.*](https://docimg.replit.com/images/tutorials/07-pygame/07-03-upload-png-sprite.png)\n\n## Displaying the sprite using PyGame\n\nOur first goal is to display the tennis ball in a game environment using PyGame. To do this, go back to the `main.py` file and add the following code.\n\n```python\nimport pygame\n\nWIDTH = 800\nHEIGHT = 600\nBACKGROUND = (0, 0, 0)\n\nclass Ball:\n    def __init__(self):\n        self.image = pygame.image.load(\"small_tennis.png\")\n        self.rect = self.image.get_rect()\n\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    clock = pygame.time.Clock()\n    ball = Ball()\n\n    while True:\n        screen.fill(BACKGROUND)\n        screen.blit(ball.image, ball.rect)\n        pygame.display.flip()\n        clock.tick(60)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis code looks a bit more complicated than it needs to be because in addition to drawing the ball to the screen, it also sets up a game loop. While basic 2D games appear to move objects around the screen, they usually actually simulate this effect by redrawing the entire screen many times per second. To account for this we need to run our logic in a `while True:` loop.\n\nWe start by importing PyGame and setting up some global variables: the size of our screen and the background color (black). We then define our `Ball`, setting up an object that knows where to find the image for the ball and how to get the default coordinates of where the image should be drawn.\n\nWe then set up PyGame by calling `init()` and starting the screen as well as a clock. The clock is necessary because each loop might take a different amount of time, based on how much logic needs to run to calculate the new screen. PyGame has built-in logic to calculate how much time elapses between calls to `clock.tick()` to draw frames faster or slower as necessary to keep the game experience smooth.","metadata":{"id":1081}}],["1082",{"pageContent":"We start the game loop and call `blit` on our ball. [Blitting](https://en.wikipedia.org/wiki/Bit_blit) refers to moving all of the pixels from our sprite file (the tennis ball) to our game environment. The `flip()` function updates our screen and the `tick(60)` call means that our game will redraw the screen around 60 times per second.\n\nIf you run this code, you should see the ball pop up in the top right pane, as shown below.\n\n![**Image 4:** *Drawing the tennis ball in our PyGame environment.*](https://docimg.replit.com/images/tutorials/07-pygame/07-04-insert-run-ball.png)\n\n## Making our tennis ball move with each frame\n\nAlthough PyGame has a lot of built-in logic for handling common game operations, you still need to get your hands dirty with calculating some of the basic movements. For every loop, we need to tell our game the new X and Y coordinates to draw the ball. As we want our ball to move at a constant speed, we'll move the X and Y coordinates each loop.\n\nAdd two methods to your `Ball` class: `update` and `move`, and add a speed attribute. The new code for your `Ball` class should look as follows.\n\n```python\nclass Ball:\n    def __init__(self):\n        self.image = pygame.image.load(\"small_tennis.png\")\n        self.speed = [0, 1]\n        self.rect = self.image.get_rect()\n\n    def update(self):\n        self.move()\n\n    def move(self):\n        self.rect = self.rect.move(self.speed)\n```\n\nNow modify your game loop to include a call to the new `update()` method. The loop should look as follows.\n\n```python\n    while True:\n        screen.fill(BACKGROUND)\n        screen.blit(ball.image, ball.rect)\n        ball.update()\n        pygame.display.flip()\n        clock.tick(60)\n```\n\nThe `(0, 1)` tuple causes the ball to move its Y coordinate by 1 each loop and keep a constant X coordinate. This has the effect of making the ball drop slowly down the screen. Run your code again to check that this works.","metadata":{"id":1082}}],["1083",{"pageContent":"![**Image 5:** *The ball falling at a constant rate.*](https://docimg.replit.com/images/tutorials/07-pygame/07-05-GIF-falling-ball.gif)\n\nWhen the ball gets to the bottom of the screen, it'll just keep falling but that's OK for now. Let's see how we can add click detection.\n\n## Processing events: Detecting mouse clicks\n\nPyGame records all \"events\", including mouse clicks, and makes these available through `pygame.event.get:()`. We need to check what events happened in each game loop and see if any of them were important.\n\nIf the user clicks on an empty space, that will still be recorded but we will simply ignore it. If the user clicks on a falling ball, we want it to change direction.\n\nAt the start of the loop, right after the line that reads `while True`, add the following lines of code.\n\n```python\n        for event in pygame.event.get():\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if ball.rect.collidepoint(pygame.mouse.get_pos()):\n                    ball.speed = [0,-1]\n```\n\nWith this code, we loop through all events and check for left click (`MOUSEBUTTONDOWN`) events. If we find one, we check if the click happened on top of the ball (using `collidepoint()` which checks for overlapping coordinates), and in this case we reverse the direction of the ball (still no x-axis or horizontal movement, but we make the ball move negatively on the y-axis, which is up.)\n\nIf you run this code again, you should now be able to click on the ball (let it fall for a while first) and see it change direction until it goes off the top of the screen.\n\n## Making the ball bounce off the edges and move randomly\n\nTo simulate juggling, we want the ball to bounce of the \"roof\" (top edge of the screen) and \"walls\" (left and right edge). If the ball touches the \"floor\" (bottom edge) we want to kill it and remove it from the game as a dropped ball.","metadata":{"id":1083}}],["1084",{"pageContent":"To achieve this, we'll add logic to our `update()` method (this is why we kept it separate from our `move()` method before). Add two lines of code to `update()` to make it look as follows.\n\n```python\n    def update(self):\n        if self.rect.top < 0:\n            self.speed = [0, 1]\n        self.move()\n```\n\nThis checks to see if the top of the ball is above the top of the screen. If it is, we set the speed back to `(0, 1)` (moving down).\n\n![**Image 6:** *Now we can bounce the ball off the ceiling.*](https://docimg.replit.com/images/tutorials/07-pygame/07-06-GIF-bounce-off-roof.gif)\n\nSo far, we have restricted the ball to moving vertically, but we can apply the same principles and move it horizontally or diagonally too. Let's also add some randomness into the mix so that it's less predictable (and harder for the player to press). The ball will randomly change its horizontal movement when it bounces off the ceiling and each time we throw it.\n\nImport the `random` module at the top of your file and use the `random.randrange()` function to specify the range of acceptable horizontal movement. Also modify the `update()` function to detect if the ball is falling off the left or right edges and reverse its horizontal movement in this case.\n\nFinally, modify the collision detection section to add randomness there too.\n\nYour full code should now look as follows.\n\n```python\nimport pygame\nimport random\n\nWIDTH = 800\nHEIGHT = 600\nBACKGROUND = (0, 0, 0)\n\nclass Ball:\n    def __init__(self):\n        self.image = pygame.image.load(\"small_tennis.png\")\n        self.speed = [random.uniform(-4,4), 2]\n        self.rect = self.image.get_rect()\n\n    def update(self):\n        if self.rect.top < 0:\n            self.speed[1] = -self.speed[1]\n            self.speed[0] = random.uniform(-4, 4)\n        elif self.rect.left < 0 or self.rect.right > WIDTH:\n            self.speed[0] = -self.speed[0]\n        self.move()\n\n    def move(self):\n        self.rect = self.rect.move(self.speed)\n\ndef main():\n    clock = pygame.time.Clock()\n    ball = Ball()","metadata":{"id":1084}}],["1085",{"pageContent":"self.speed[0] = -self.speed[0]\n        self.move()\n\n    def move(self):\n        self.rect = self.rect.move(self.speed)\n\ndef main():\n    clock = pygame.time.Clock()\n    ball = Ball()\n    pygame.init()\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                if ball.rect.collidepoint(pygame.mouse.get_pos()):\n                    ball.speed[0] = random.uniform(-4, 4)\n                    ball.speed[1] = -2\n        screen.fill(BACKGROUND)\n        screen.blit(ball.image, ball.rect)\n        ball.update()\n        pygame.display.flip()\n        clock.tick(60)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nIf you run your code again, you should be able to juggle the ball around by clicking on it and watch it randomly bounce off the ceiling and walls.\n\n## Adding more balls\n\nJuggling with one ball is no fun, so let's add some more. Because we used Object Oriented Programming (OOP), we can create more balls by instantiating more `Ball()` objects. We'll need to keep track of these so we'll add them to an array. For each iteration of the game loop, we'll need to update the position of each ball, so we'll need one more loop to account for this.\n\nWe also want to start keeping track of which of our balls is \"alive\" (that is, hasn't hit the ground), so add an attribute for this to the `Ball` class too, in the `__init__` function.\n\n```python\n        self.alive = True\n```\n\nIn the `main()` function, directly before the `while True:` line, add the following code.\n\n```python\n    ball1 = Ball()\n    ball2 = Ball()\n    ball3 = Ball()\n\n    balls = [ball1, ball2, ball3]\n```\n\nNow remove the `ball=Ball()`, `ball.update()` and `screen.blit(...)` lines and replace them with a loop that updates all of the balls and removes the dead ones (even though we haven't written the logic yet to stop the balls from ever being alive.)\n\n```python\n        for i, ball in enumerate(balls):\n            if ball.alive:","metadata":{"id":1085}}],["1086",{"pageContent":"```python\n        for i, ball in enumerate(balls):\n            if ball.alive:\n                screen.blit(ball.image, ball.rect)\n                ball.update()\n                if not ball.alive:\n                    del balls[i]\n```\n\nYou'll also need to account for multiple balls in the the event detection loop. For each event, loop through all of the balls and check if the mouse click collided with any of them.\n\nAt this point, the full `main()` function should look as follows.\n\n```python\ndef main():\n    clock = pygame.time.Clock()\n    pygame.init()\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n\n    ball1 = Ball()\n    ball2 = Ball()\n    ball3 = Ball()\n\n    balls = [ball1, ball2, ball3]\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.MOUSEBUTTONDOWN:\n                for ball in balls:\n                    if ball.rect.collidepoint(pygame.mouse.get_pos()):\n                        ball.speed[0] = random.randrange(-4, 4)\n                        ball.speed[1] = -2\n                        break\n        screen.fill(BACKGROUND)\n        for i, ball in enumerate(balls):\n            if ball.alive:\n                screen.blit(ball.image, ball.rect)\n                ball.update()\n                if not ball.alive:\n                    del balls[i]\n        pygame.display.flip()\n        clock.tick(60)\n```\n\nTo kill balls when they fall through the floor, we can add another check to the `update()` function as follows.\n\n```python\n        elif self.rect.bottom > HEIGHT:\n            self.alive = False\n```\n\nRun the code again and you should be able to juggle three balls. See how long you can keep them in the air.\n\n![**Image 7:** *Juggling three balls.*](https://docimg.replit.com/images/tutorials/07-pygame/07-07-GIF-three-balls.gif)\n\nIf you want a harder version, add a counter to keep track of how many successful throws the player has achieved and add a new ball for every three successful throws.","metadata":{"id":1086}}],["1087",{"pageContent":"If you want a harder version, add a counter to keep track of how many successful throws the player has achieved and add a new ball for every three successful throws.\n\n![**Image 8:** *Adding more balls.*](https://docimg.replit.com/images/tutorials/07-pygame/07-08-multiple-balls.png)\n\nNow the game is to see how many balls you can juggle with. If it's too easy, modify the speeds and angles of the balls.\n\n## Make it your own\n\nIf you followed along, you'll already have your own version of the repl to extend. If not, start from ours. Fork it from the embed below.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@GarethDwyer1/cwr-07-juggling-with-pygame?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Where next?\n\nYou've learned how to make 2D games using PyGame. If you want to make more games but are stuck for ideas, check out [PyGame's extensive collection of examples](https://www.pygame.org/docs/ref/examples.html).\n\nYou could also extend the juggling game more. For example, make the balls accelerate as they fall, or increase the speed of all balls over time.","metadata":{"id":1087}}],["1088",{"pageContent":"# Creating interactive Python plots with matplotlib\n\nAlthough the console only supports text output, Replit allows you to\ncreate plots and charts using matplotlib (and other libraries). Here, we will show you the basics of generating plots using Python3 and matplotlib.\n\nIn order to use matplotlib, you must first [install the package](/programming-ide/installing-packages), or simply import the package and we will auto-install it for you:\n\n```python\nimport matplotlib.pyplot as plt\n```\n\nThen, write the code to generate the plot as normal. In this example,\nwe'll keep it simple:\n\n```python\nplt.plot([1,2,3])\n```\n\nNow that we have a plot, use `plt.show()` to open a new window with the plot.\n\n```python\nplt.show()\n```\n\nRunning the code should then generate a new pane with your generated plot. Changing the plot and rerunning will update the graph in the display pane.\n\nYou can see the above example here:\n[here](https://replit.com/@amasad/docs-matplotlib).\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@amasad/docs-matplotlib?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1088}}],["1089",{"pageContent":"---\ntitle: Data science\n---\n\n# Data science with Replit: Plots and graphs\n\nSo far, all the programs we have looked at have been entirely **text based**. They have taken text input and produced text output, on the console or saved to files.\n\nWhile text is flexible and powerful, sometimes a picture is worth a thousand words. Especially when analysing data, you'll often want to produce plots and graphs. There are three main ways of achieving this using Replit.\n\n1. Creating a front-end only project and using only JavaScript, HTML and CSS.\n2. Creating a full web application with something like [Flask](https://flask.palletsprojects.com/), analysing the data in Python and passing the results to a front end to be visualised.\n3. Using Python code only, creating windows using [X](https://en.wikipedia.org/wiki/X_Window_System) and rendering the plots in there.\n\nOption 1 is great if you're OK with your users having access to all of your data, you like doing data manipulation in JavaScript, and your data set is small enough to load into a web browser. Option 2 is often the most powerful, but can be overkill if you just want a few basic plots.\n\nHere, we'll demonstrate how to do option 3, using Python and [`Matplotlib`](https://matplotlib.org/).\n\n## Installing `Matplotlib` and creating a basic line plot\n\n`Matplotlib` is a third-party library for doing all kinds of plots and graphs in Python. We can install it by using Replit's \"magic import\" functionality. `Matplotlib` is a large and powerful library with a lot of functionality, but we only need `pyplot` for now: the module for plotting.\n\nCreate a new Python repl and add the following code.\n\n```python\nfrom matplotlib import pyplot as plt\n\nplt.plot([1,2,3,4,5,6], [6,3,6,1,2,3])\nplt.show()\n```","metadata":{"id":1089}}],["1090",{"pageContent":"Create a new Python repl and add the following code.\n\n```python\nfrom matplotlib import pyplot as plt\n\nplt.plot([1,2,3,4,5,6], [6,3,6,1,2,3])\nplt.show()\n```\n\nThere are many traditions in the Python data science world about how to import libraries. Many of the libraries have long names and get imported as easier-to-type shortcuts. You'll see that nearly all examples import `pyplot` as the shorter `plt` before using it, as we are doing above. We can then generate a basic line plot by passing two arrays to `plt.plot()` for X and Y values. In this example, the first point that we plot is `(1,6)` (the first value from each array). We then add all of the plotted points joined into a line graph.\n\nReplit knows that it needs an `X` server to display this plot (triggered when you call `plt.show()`), so after running this code a new graphical window will appear showing the plot.\n\n![**Image 1:** *We can plot a basic line plot by passing in the X and Y values*](https://docimg.replit.com/images/tutorials/04-data-science/04-01-matplotlib.png)\n\nThe `X` server is very limited compared to a full operating system GUI. Beneath the plot, you'll see some controls to pan and zoom around the image, but if you try to use them you'll see that the experience is not that smooth.\n\nLine plots are cool, but we can do more. Let's plot a real data set.\n\n## Making a scatter plot of US cities by state\n\nScatter plots are often used to plot 2D data, to look for correlations and other patterns. However, they can also loosely be used to plot geographical X-Y coordinates (in reality, the field of plotting geographical points is [far more complicated](https://www.gislounge.com/what-is-gis/)). We'll use a subset from the [city data from simplemaps](https://simplemaps.com/data/us-cities) to generate our next plot. Each row of the data set represents one city in the USA, and gives us its latitude, longitude, and two-letter state code.\n\nTo download the data and plot it, replace the code in your `main.py` file with the following.","metadata":{"id":1090}}],["1091",{"pageContent":"To download the data and plot it, replace the code in your `main.py` file with the following.\n\n```python\nfrom matplotlib import pyplot as plt\nimport requests\nimport random\n\ndata_url = \"https://raw.githubusercontent.com/sixhobbits/ritza/master/data/us-cities.txt\"\n\nr = requests.get(data_url)\n\nwith open(\"us-cities.txt\", \"w\") as f:\n    f.write(r.text)\n\nlats = []\nlons = []\ncolors = []\nstate_colors = {}\n\n# matplotlib uses single letter shortcuts for common colors\n# blue, green, red, cyan, magenta, yellow, black\nall_colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']\n\nwith open(\"us-cities.txt\") as f:\n    for i, line in enumerate(f):\n        state, lat, lon = line.split()\n        lats.append(float(lat))\n        lons.append(float(lon))\n\n        # we assign each state a random colour, but once we've picked\n        # a colour we always use it for all cities in that state.\n        if state not in state_colors:\n            state_colors[state] = random.choice(all_colors)\n        colors.append(state_colors[state])\nplt.scatter(lons, lats, c=colors)\nplt.show()\n```\n\nIf you run this, you'll notice it takes a little bit longer than the six point plot we created before, as it now has to plot nearly 30 000 data points. Once it's done, you should see something similar to the following (though, as the colours were chosen randomly, yours might look different).\n\n![**Image 2:** *All the cities in the US plotted by state as a scatterplot*](https://docimg.replit.com/images/tutorials/04-data-science/04-02-scatter-us-cities.png)\n\nYou'll also notice that while it's recognisable as the US, the proportions are not right. Mapping a 3D sphere to a 2D plane is surprisingly difficult and there are many different ways of doing it.\n\n## More advanced plotting with `seaborn` and `pandas`\n\nPlotting X-Y points is a good start, but in most cases you'll want to do a little bit more. [`seaborn`](https://seaborn.pydata.org/) is a plotting library built on top of `Matplotlib` that makes it easier to create good-looking visualisations.","metadata":{"id":1091}}],["1092",{"pageContent":"Let's do another scatter plot based on GDP and life expectancy data to see if people live longer in richer countries.\n\nReplace the code in `main.py` with the following. Remember how we mentioned earlier that data scientists have traditions about how to import certain libraries? Here you see a few more of these \"short names\". We'll use `seaborn` for plotting but import it as `sns`, [`pandas`](https://pandas.pydata.org/) for reading the CSV file but import it as `pd` and [`NumPy`](https://numpy.org/) for calculating the correlation but import it as `np`.\n\n```python\nimport requests\nimport seaborn as sns\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\ndata_url = \"https://raw.githubusercontent.com/ritza-co/datasets/master/gdp_data.csv\"\n\nr = requests.get(data_url)\n\nwith open(\"gdp-life.txt\", \"w\") as f:\n    f.write(r.text)\n\ndf = pd.read_csv(\"gdp-life.txt\")\nprint(df.head())\n\nprint(\"___\")\nprint(\"The correlation is: \", np.corrcoef(df['gdpPercap'], df['lifeExp'])[0,1])\nprint(\"___\")\n\nsns.lmplot(\n    \"gdpPercap\",\"lifeExp\", df\n).set_axis_labels(\"GDP per capita\", \"Life expectancy\")\n\nplt.title(\"Countries with a higher GDP have higher life expectancy\")\nplt.tight_layout()\nplt.show()\n```\n\nIf you run this, you'll see it plots each country in a similar way to our previous scatter plot, but also adds a line showing the correlation.\n\nIn the output pane below you can also see that the correlation coefficient between the two variables is 0.67 which is a fairly strong positive correlation.\n\n![**Image 3:** *Using `seaborn` to create a scatter plot with a best fit line to see correlation*](https://docimg.replit.com/images/tutorials/04-data-science/04-03-plot-with-pandas.png)\n\nData science and data visualisation are huge topics, and there are dozens of Python libraries that can be used to plot data. For a good overview of all of them and their strengths and weaknesses, you should watch [Jake Vanderplas's talk](https://www.youtube.com/watch?v=FytuB8nFHPQ).\n\n## Saving plots to PNG files","metadata":{"id":1092}}],["1093",{"pageContent":"## Saving plots to PNG files\n\nWhile visualising data right after you analyse it is often useful, sometimes you need to save the figures to embed into reports. You can save your graphs by calling `plt.savefig()`. Change the last line (`plt.show()`) to\n\n```python\nplt.savefig(\"GDPlife.png\")\n```\n\nRerun the code. Instead of seeing the plot appear in the right-hand pane, you'll see a new file in the files pane. Clicking on it will show you the PNG file in the editing pane.\n\n![**Image 4:** *Saving a PNG file for later use*](https://docimg.replit.com/images/tutorials/04-data-science/04-04-plot-save-png.png)\n\n## Make it your own\n\nIf you followed along, you'll already have your own version of the repl to extend. If not, start from ours. Fork it from the embed below.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/data-visualisation?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Where next?\n\nYou've learned how to make some basic plots using Python and Replit. There are millions of freely available data sets on the internet, waiting for people to explore them. You can find many of these using [Google's Dataset Search](https://datasetsearch.research.google.com/) service. Pick a topic that you're interested in and try to find out more about it through data visualisations.\n\nNext up, we'll explore the multiplayer functionality of Replit in more detail so that you can code collaboratively with friends or colleagues.","metadata":{"id":1093}}],["1094",{"pageContent":"---\nsidebar_position: 47\ntitle: Discord meme maker bot with Python\n---\n\n# Creating a Discord meme-maker bot with Python\n\nIn this tutorial, we'll create a [Discord](https://discord.com) bot that adds captions to images, allowing server members to create memes. Users will call the bot using a command and supply it with an image file and a caption. The bot will reply with a new image file that includes the caption.\n\nBy the end of this tutorial, you will:\n\n- Use [discord.py](https://discordpy.readthedocs.io/en/stable/) to create a bot that can be added to any Discord server.\n- Understand the basics of image processing and dealing with files in memory using Python.\n- Know how to host Discord bots on Replit!\n\n## Getting started\n\nSign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Python repl.\n\n![Creating a new repl](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/create-repl.png)\n\n## Creating a Discord application\n\nOpen another browser tab and visit the [Discord Developer Portal](http://discordapp.com/developers/applications). Log in with your Discord account, or create one if you haven't already. Keep your repl open – we'll return to it soon.\n\nOnce you're logged in, create a new application. Give it a name, like \"ImageCaptioner\".\n\n![Discord creating an app](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/discord-create-app.png)\n\nDiscord applications can interact with Discord in several different ways, not all of which require bots, so creating one is optional. That said, we'll need one for this project. Let's create a bot.\n\n1. Click on **Bot** in the menu on the left-hand side of the page.\n2. Click **Add Bot**.\n3. Give your bot a username (such as \"ImageCaptionBot\").\n4. Click **Reset Token** and then **Yes, do it!**.\n5. Copy the token that appears just under your bot's username.","metadata":{"id":1094}}],["1095",{"pageContent":"2. Click **Add Bot**.\n3. Give your bot a username (such as \"ImageCaptionBot\").\n4. Click **Reset Token** and then **Yes, do it!**.\n5. Copy the token that appears just under your bot's username.\n\n![Creating a discord bot](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/discord-create-bot.png)\n\nThe token you just copied is required for the code in our repl to interface with Discord's API. Return to your repl and open the Secrets tab in the left sidebar. Create a new secret with `DISCORD_TOKEN` as its key and the token you copied as its value.\n\n![Secret token](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/secret-token.png)\n\nOnce, you've done that, return to the Discord developer panel. We need to finish setting up our bot.\n\nFirst, disable the Public Bot option – the functionality we're building for this bot will be highly specific to our server, so we don't want anyone else to try to add it to their server. What's more, bots on 100 or more servers have to go through a special verification and approval process, and we don't want to worry about that.\n\n![Disable public bot](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/public-bot.png)\n\nSecond, we need to configure access to privileged [Gateway Intents](https://discord.com/developers/docs/topics/gateway#gateway-intents). Depending on a bot's functionality, it will require access to different events and sources of data. Events involving users' actions and the content of their messages are considered more sensitive and need to be explicitly enabled.\n\nFor this bot to work, we'll need the \"Message Content Intent\", which will allow our bot to see the content of users' messages. Toggle it to the on position and save changes when prompted.\n\n![Priviledged bot intents](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/bot-intents.png)","metadata":{"id":1095}}],["1096",{"pageContent":"![Priviledged bot intents](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/bot-intents.png)\n\nNow that we've created our application and its bot, we need to add it to a server. We'll walk you through creating a test server for this tutorial, but you can also use any server you've created in the past, as long as the other members won't get too annoyed about it becoming a bot testing ground. You can't use a server that you're just a normal user on, as adding bots requires special privileges.\n\nOpen [Discord.com](http://discord.com) in your browser. You should already be logged in. Then click on the **+** icon in the leftmost panel to create a new server. Alternatively, open an existing server you own.\n\nIn a separate tab, return to the [Discord Developer Portal](https://discord.com/developers/applications) and open your application. Then follow these steps to add your bot to your server:\n\n1. Click on **OAuth2** in the left sidebar.\n2. In the menu that appears under **OAuth2**, select **URL Generator**.\n3. Under **Scopes**, mark the checkbox labelled _bot_.\n4. Under **Bot Permissions**, mark the checkboxes labelled _Read Messages/View Channels_, _Send Messages_, and _Attach Files_.\n   ![Bot permissions](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/bot-permissions.png)\n\n5. Scroll down and copy the URL under **Generated URL**.\n6. Paste the URL in your browser's navigation bar and hit Enter.\n7. On the page that appears, select your server from the drop-down box and click **Continue**.\n8. When prompted about permissions, click **Authorize**, and complete the CAPTCHA.\n   ![Bot connect](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/bot-connect.png)\n\n9. Return to your Discord server. You should see that your bot has just joined.\n\nNow that we've done the preparatory work, it's time to write some code. Return to your repl for the next section.\n\n## Writing the Discord bot code","metadata":{"id":1096}}],["1097",{"pageContent":"Now that we've done the preparatory work, it's time to write some code. Return to your repl for the next section.\n\n## Writing the Discord bot code\n\nWe'll be using [Discord.py](https://discordpy.readthedocs.io/en/stable/) to interface with Discord's API using Python. Add the following code scaffold to `main.py` in your repl:\n\n```python\nimport os, discord\nfrom discord.ext import commands\n\nDISCORD_TOKEN = os.getenv(\"DISCORD_TOKEN\")\n\nbot = commands.Bot(command_prefix=\"!\")\n\n@bot.event\nasync def on_ready():\n    print(f\"{bot.user} has connected to Discord!\")\n\nbot.run(DISCORD_TOKEN)\n```\n\nFirst, we import some Python libraries we'll need, including Discord.py and its [commands extension](https://discordpy.readthedocs.io/en/stable/ext/commands/commands.html). We then retrieve the value of the `DISCORD_TOKEN` environment variable, which we set in our repl's secrets tab above. Following that, we instantiate a [`Bot` object](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Bot). We'll use this object to listen for Discord events and respond to them. For the most part, we'll be responding to _commands_ - messages from users which start with `!` (the `command_prefix` we specified when creating our `Bot` object).\n\nHowever, the first event we're interested in is not a command. The [`on_ready()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.on_ready) event will trigger when our bot logs on to Discord (the `@bot.event` [decorator](https://realpython.com/primer-on-python-decorators/) ensures this). All this event will do is print a message to our repl's console, telling us that the bot has connected.","metadata":{"id":1097}}],["1098",{"pageContent":"Note that we've prepended `async` to the function definition – this makes our `on_ready()` function into a [coroutine](https://docs.python.org/3/library/asyncio-task.html). Coroutines are largely similar to functions, but may not execute immediately, and must be invoked with the `await` keyword. Using coroutines makes our program [asynchronous](https://realpython.com/async-io-python/#the-10000-foot-view-of-async-io), which means it can continue executing code while waiting for the results of a long-running function, usually one that depends on input or output. If you've used JavaScript before, you'll recognize this style of programming.\n\nThe final line in our file starts the bot, providing `DISCORD_TOKEN` to authenticate it. Run your repl now to see it in action. Once it's started, return to your Discord server. You should see that your bot user is now online.\n\n![Online bot](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/online-bot.png)\n\n## Receiving user input\n\nThe Discord.py commands extension allows us to define command handlers using the `@bot.command` decorator. Without this, we'd have to manually parse the content of all user messages to determine whether a command had been issued, as was necessary for our [role assignment bot tutorial](/tutorials/python/discord-role-bot)`:\n\n```python\n@bot.command(name=\"caption\", brief=\"Add a caption to an image.\", help=\"\"\"Add a caption to an attached image. Example:\n\n!caption \"Hello world!\" <attached image>\n\nSupported image types: PNG, JPEG, WebP\n             \"\"\")\nasync def caption(ctx, caption_text):\n    pass\n```\n\nThe `@bot.command` decorator will ensure that our function is invoked when a user types a message starting with `!caption`. We also use it to define some help text – the commands extension provides a default `!help` command, and each command we define can have two types of explanatory text:","metadata":{"id":1098}}],["1099",{"pageContent":"- `brief`: A short description of the command that will show alongside other defined commands when the user types `!help`.\n- `help`: A longer description of the command that will show when the user types `!help name_of_command`.\n\nOur `caption` function takes two parameters:\n\n- `ctx`: This is the _invocation context_, a special object containing information such as the user who called the command, the server it was called in, and the files attached to the calling message, if any. All commands must take this parameter.\n- `caption_text`: This will be a string containing the caption the user wants to add to their image.\n\nWe'll start the body of the function with some user-friendly error handling. Replace `pass` with the function body shown below:\n\n```python\nasync def caption(ctx, caption_text):\n    # Must have caption text\n    if not caption_text:\n        await ctx.message.reply(\"Please include some caption text after the `!caption` command. For example `!caption \\\"Hello world!\\\"\")\n        return\n```\n\nIf the user forgets to include a caption in their command, they'll receive a [reply](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) informing them of this omission.\n\nNext, we'll make sure they've attached a file to their command message with the following code:\n\n```python\n    # Must have a file attached\n    if ctx.message.attachments:\n        image_url = ctx.message.attachments[0].url\n    else:\n        await ctx.message.reply(\"Please attach an image for me to caption.\")\n        return\n```\n\nIf no file is attached, `ctx.message.attachments` will be an empty list and we'll send an error message to the user and abort the function. Otherwise, we'll store the URL of the first file attached to the message in `image_url` and continue execution. It's possible to attach multiple files to a single Discord message, but for this bot, we're going to ignore all but the first one.","metadata":{"id":1099}}],["1100",{"pageContent":"Next, we need to check whether the attached file is an image. We'll do this by determining the file's [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using Python's built-in `mimetypes` library. Add the following line to the top of your `main.py` file:\n\n```python\nimport mimetypes\n```\n\nWe now need to specify which MIME types we'll support. According to our help text, images for captioning should be PNGs, JPEGs, or WebPs. These are the most common non-animating image types on the web, so we shouldn't need to support any more for the moment. Add the following code below the definition of `DISCORD_TOKEN`:\n\n```python\nSUPPORTED_MIMETYPES = [\"image/jpeg\", \"image/png\", \"image/webp\"]\n```\n\nReturn to the `caption()` function. Add the following code below the block of code that checks whether a file is attached to the user's message:\n\n```python\n    # File must be an image\n    if mimetypes.guess_type(image_url)[0] not in SUPPORTED_MIMETYPES:\n        await ctx.message.reply(\"Sorry, the file you attached is not a supported image format. Please upload a PNG, JPEG or WebP image.\")\n        return\n```\n\nThe [`mimetypes.guess_type`](https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_type) function will determine what kind of file we're dealing with from its URL. If we don't find its filetype in our list of supported types, we'll send an error message to the user and cease execution.\n\nNow that we've dealt with the most likely error cases, it's time to handle a correctly formatted `!caption` command. First, we need to fetch the image file – we have a URL for it, so we can use Python's [requests](https://pypi.org/project/requests/) library for this. Add the following line to the top of your `main.py` file:\n\n```python\nimport requests\n```\n\nThen return to the bottom of the `caption` function and add the following code:\n\n```python\n    # Fetch image file\n    response = requests.get(image_url)\n\n    # Store image file name","metadata":{"id":1100}}],["1101",{"pageContent":"import requests\n```\n\nThen return to the bottom of the `caption` function and add the following code:\n\n```python\n    # Fetch image file\n    response = requests.get(image_url)\n\n    # Store image file name\n    image_filename = ctx.message.attachments[0].filename\n```\n\nWe use a [GET request](https://requests.readthedocs.io/en/latest/api/#requests.get) to retrieve the user's image and store its filename in another variable.\n\nIt would be convenient if we could deal with this image completely in memory, without saving it to a file. We can do this by treating the image as a binary stream, provided by Python's built-in [`io`](https://docs.python.org/3/library/io.html) library. Add the following line to the top of `main.py`:\n\n```python\nfrom io import BytesIO\n```\n\nReturn to the bottom of the `caption` function and add the following:\n\n```python\n    # Caption image\n    final_image = caption_image(BytesIO(response.content), caption_text)\n```\n\n[`BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO) will convert the image from HTTP response content into a binary stream, which is similar to the file object returned by [`open()`](https://docs.python.org/3/library/functions.html#open). This allows us to work with the image as though it were a file without ever saving it to disk.\n\nWe'll write the `caption_image()` function in the next section. It takes an image and a caption and returns an image with the caption applied. Once we've got that implemented, we'll return to this function and send the finished image back to the user.\n\n## Captioning images\n\nThe code we're going to write in this section is quite different from the Discord API code above, so we'll put it in a separate file. That way, we can easily reuse it for other applications – for example, we might also want to write a Telegram bot, a command-line application, or even a small website that adds captions to images. By separating our code, we can implement any of these later on without having to change or even think about the image captioning logic.","metadata":{"id":1101}}],["1102",{"pageContent":"Create a new file named `caption.py` and populate it with the code below:\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont\nfrom io import BytesIO\n\ndef caption_image(image_file, caption, font=\"impact.ttf\"):\n    img = Image.open(image_file)\n```\n\nWe're using the [Pillow](https://pypi.org/project/Pillow/) library for image processing. This library is imported as PIL because it's a fork of [an earlier, discontinued project of that name](https://en.wikipedia.org/wiki/Python_Imaging_Library). This library has [a wealth of image manipulation features](https://pillow.readthedocs.io/), one of which is adding text to images.\n\nTo install Pillow, open `pyproject.toml` and add it to `[tool.poetry.dependencies]` as shown below:\n\n```toml\n[tool.poetry.dependencies]\npython = \">=3.8.0,<3.9\"\nnumpy = \"^1.22.2\"\nreplit = \"^3.2.4\"\ndiscord = \"^1.7.3\"\npillow = \"^9.1.1\" # <-- new line\n```\n\nStop and run your repl to update its dependencies and install the new package. Normally we would let Replit do this for us, but later in this section, we're going to test `caption.py` without linking it to the Discord code in `main.py`, so Replit won't have a chance to detect and install our new package on its own.\n\nReturn to `caption.py`. Below our imports, we define the `caption_image()` function used in `main.py`. In addition to the image file and caption parameters, we'll add the ability to optionally specify a font, defaulting to Impact, a popular font for making memes. Download the [font file now](https://tutorial-files.util.repl.co/discord-meme-maker-bot/captionbot-resources.zip) and upload it to your repl.\n\n![Upload impact font](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/impact-font.gif)","metadata":{"id":1102}}],["1103",{"pageContent":"![Upload impact font](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/impact-font.gif)\n\nWe start the `caption_image()` function by [creating an `Image` object](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.open) from the file provided as an argument. Next, we'll need to convert our `Image` into an [`ImageDraw`](https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html) so that we can add text to it. We'll do that with the following line of code, inserted below the definition of `img`:\n\n```python\n    draw = ImageDraw.Draw(img)\n```\n\nNext, we need to load our font:\n\n```python\n    font_size = int(img.width/16)\n    font = ImageFont.truetype(\"impact.ttf\", font_size)\n```\n\nWe use [`ImageFont.truetype()`](https://pillow.readthedocs.io/en/stable/reference/ImageFont.html#PIL.ImageFont.truetype) to load a TrueType font from a file. We specify the font size in the second argument. Users will be able to upload different-sized images, so rather than hardcoding a specific font size, we've expressed the size in terms of the image's width, allowing it to scale appropriately. Feel free to experiment with this value.\n\nNow that we've got our image and font, we can start drawing. Extend your function as follows:\n\n```python\n    caption_w, caption_h = draw.textsize(caption, font=font)\n\n    draw.text(((img.width-caption_w)/2, (img.height-caption_h)/8), # position\n              caption, # text\n              (255,255,255), # color\n              font=font, # font\n              stroke_width=2, # text outline width\n              stroke_fill=(0,0,0)) # text outline color\n```\n\nThe [`ImageDraw.textsize()`](https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html#PIL.ImageDraw.ImageDraw.textsize) method returns the height and width of a given string in a given font. We need this information to place our caption in the upper center of the image.","metadata":{"id":1103}}],["1104",{"pageContent":"The [`ImageDraw.text()`](https://pillow.readthedocs.io/en/stable/reference/ImageDraw.html#PIL.ImageDraw.ImageDraw.text) method actually draws our text. We provide it with our text and the necessary positioning and coloring information. To avoid situations where text blends in with the background, we make our text white with a black outline. Again, feel free to experiment with different colors, outlines and positions.\n\nOur work here is done, and all that remains is to return the image. But before we do that, let's test this code out on its own. Add the following line to the bottom of your function to [save the image to a file](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.save):\n\n```python\n    img.save(\"output.png\")\n```\n\nFind an image you'd like to add a caption to. If you don't have one on hand, [use this picture of a robot](https://tutorial-files.util.repl.co/discord-meme-maker-bot/captionbot-resources.zip). Upload your chosen image to your repl.\n\nAt the bottom of `caption.py`, outside of the definition of `caption_image()`, add the following line:\n\n```python\ncaption_image(\"replbot.png\", \"Hello world!\")\n```\n\nChange the image file to your file's name and the caption to whatever you want. Then, in your repl's shell, type `python caption.py` and press Enter. A file named `output.png` should appear in your repl's file pane. Click on it to see the results of the code we've just written. Our version looks like this:\n\n![Captioned image](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/replbot-captioned.png)\n\n## Returning captioned images\n\nNow we'll tie everything together. Once you're happy with the text size and colors of your captions, delete the `caption_image()` function invocation from the bottom of `caption.py` and replace the line that reads `img.save(\"output.png\")` with the following:\n\n```python\n    with BytesIO() as img_bytes:\n        img.save(img_bytes, format=img.format)\n        content = img_bytes.getvalue()","metadata":{"id":1104}}],["1105",{"pageContent":"```python\n    with BytesIO() as img_bytes:\n        img.save(img_bytes, format=img.format)\n        content = img_bytes.getvalue()\n\n    return content\n```\n\nInstead of saving our image to a file, we save it to a binary stream object, much like we did when fetching the original image from Discord. We keep the image format the same as the original using Pillow's [`Image.format`](https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.format) attribute. We then convert our `BytesIO` stream into a `bytes` object with [`.getvalue()`](https://docs.python.org/3/library/io.html#io.BytesIO.getvalue) and return it to the caller.\n\nOpen `main.py` and import `caption_image()` from `caption.py` with the following line near the top of the file, below your other imports:\n\n```python\nfrom caption import caption_image\n```\n\nReturn to the bottom of the `caption()` function definition. Add the following code below the definition of `final_image`:\n\n```python\n    # Send reply\n    await ctx.message.reply(file=discord.File(BytesIO(final_image), filename=f\"captioned-{image_filename}\"))\n```\n\nThis code will reply to the user with a message containing the image we created above.\n\nStop and run your repl, and then switch to your Discord server. Enter a message such as `!caption \"Hello world!\"` and attach an image to it. You should receive a reply something like this:\n\n![Image caption in discord](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/caption-in-discord.png)\n\n## Text wrapping\n\nOur bot works reasonably well for short captions, but anything longer than about five words goes off the edges of the image.\n\n![Caption text wrapping](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/nowrap.png)\n\nWe can fix this by splitting caption text into multiple lines. We'll use Python's [textwrap](https://docs.python.org/3/library/textwrap.html) library to do this. Open `caption.py` and add the following line to the top of the file:\n\n```python\nimport textwrap\n```","metadata":{"id":1105}}],["1106",{"pageContent":"```python\nimport textwrap\n```\n\nThen add the new line shown below to the `caption_image()` function.\n\n```python\n    font_size = int(img.width/16)\n    font = ImageFont.truetype(\"impact.ttf\", font_size)\n\n    # NEW LINE BELOW\n    caption = textwrap.fill(text=caption, width=img.width/(font_size/2))\n    # NEW LINE ABOVE\n\n    caption_w, caption_h = draw.textsize(caption, font=font)\n\n    draw.text(((img.width-caption_w)/2, (img.height-caption_h)/8), # position\n              caption, # text\n              (255,255,255), # color\n              font=font, # font\n              stroke_width=2, # text outline width\n              stroke_fill=(0,0,0)) # text outline color\n```\n\nHere, [`textwrap.fill()`](https://docs.python.org/3/library/textwrap.html#textwrap.fill) will return a new version of our caption string with newline characters (`\\n`) inserted in appropriate places to ensure that each line of the text contains no more than `width` characters. It will do this without splitting words over multiple lines.\n\nWe use the following calculation to get `width`:\n\n```\nimg.width / (font_size / 2)\n```\n\nThis is the width of the image divided by half the font size. Most of the characters in the Impact font are taller than they are wide, so dividing the font size by two gives us reasonably good results for most text. It should also work for other fonts that aren't extremely wide. Try experimenting with different maximum line lengths.\n\n![Wrapped text](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-meme-maker-bot/wrapped.png)\n\nRerun your repl now and return to Discord to try out some different long captions.\n\n## Where next?\n\nOur image captioning bot is functional but quite rudimentary. If you'd like to continue working on it, here are some ideas you might want to try:\n\n- More font and text color options. You could implement these as additional bot commands.\n- The ability to add two captions to an image, on both the top and bottom.","metadata":{"id":1106}}],["1107",{"pageContent":"- More font and text color options. You could implement these as additional bot commands.\n- The ability to add two captions to an image, on both the top and bottom.\n- A different interface for your image captioning code, such as a Telegram bot or a simple website.\n- Pillow provides a number of [filters](https://pillow.readthedocs.io/en/stable/reference/ImageFilter.html) that you could apply to images in addition to captioning them.\n- If you would like to make the text wrapping more robust for different fonts, you could try rewriting that part of `caption.py`. You might find [this gist](https://gist.github.com/turicas/1455973) and this [article](https://levelup.gitconnected.com/how-to-properly-calculate-text-size-in-pil-images-17a2cc6f51fd) helpful.\n\nDiscord bot code can be hosted on Replit permanently, but you'll need to use a [Deployment](/hosting/deployments/about-deployments) repl to keep it running 24/7.\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/ImageCaptionBot?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1107}}],["1108",{"pageContent":"---\ntitle: Discord role assignment bot with Python\n---\n\n# Creating a Discord role assignment bot with Python\n\n[Discord](https://discord.com/) is a free-to-use chat server application that was initially developed for gamers but is becoming increasingly widely used by many different communities. Anyone can use it to create a chat server for discussion over text as well as voice and video. In addition to hosting human members, these servers can also host special automated users, called bots, which are capable of a variety of fun and useful tasks: everything from playing music to helping human moderators.\n\nIn this tutorial, we'll create a welcome bot for our programming discussion Discord server. This bot will welcome users as they join and assign them roles and private channels based on their stated interests. By the end of this tutorial, you will:\n\n- Have familiarity with the process of creating a Discord bot application.\n- Be able to use [discord.py](https://discordpy.readthedocs.io/en/stable/) to develop useful bot logic.\n- Know how to host Discord bots on Replit!\n\n## Getting started\n\nSign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Python repl.\n\n![Creating a new repl](https://docimg.replit.com/images/tutorials/46-discord-role-bot/create-repl.png)\n\n## Creating a Discord application\n\nOpen another browser tab and visit the [Discord Developer Portal](http://discordapp.com/developers/applications). Log in with your Discord account, or create one if you haven't already. Keep your repl open – we'll return to it soon.\n\nOnce you're logged in, create a new application. Give it a name, like \"Welcomer\".\n\n![Creating a new Discord application](https://docimg.replit.com/images/tutorials/46-discord-role-bot/discord-create-app.png)","metadata":{"id":1108}}],["1109",{"pageContent":"![Creating a new Discord application](https://docimg.replit.com/images/tutorials/46-discord-role-bot/discord-create-app.png)\n\nDiscord applications can interact with Discord in several different ways, not all of which require bots, so creating one is optional. That said, we'll need one for this project. Let's create a bot.\n\n1. Click on **Bot** in the menu on the left-hand side of the page.\n2. Click **Add Bot**.\n3. Give your bot a username (such as \"WelcomeBot\").\n4. Click **Reset Token** and then **Yes, do it!**\n5. Copy the token that appears just under your bot's username.\n\n![Creating a Discord bot](https://docimg.replit.com/images/tutorials/46-discord-role-bot/discord-create-bot.png)\n\nThe token you just copied is required for the code in our repl to interface with Discord's API. Return to your repl and open the Secrets tab in the left sidebar. Create a new secret with `DISCORD_TOKEN` as its key and the token you copied as its value.\n\n![Secret token](https://docimg.replit.com/images/tutorials/46-discord-role-bot/secret-token.png)\n\nOnce, you've done that, return to the Discord developer panel. We need to finish setting up our bot.\n\nFirst, disable the Public Bot option – the functionality we're building for this bot will be highly specific to our server, so we don't want anyone else to try to add it to their server. What's more, bots on 100 or more servers have to go through a special verification and approval process, and we don't want to worry about that.\n\nSecond, we need to configure access to privileged [Gateway Intents](https://discord.com/developers/docs/topics/gateway#gateway-intents). Depending on a bot's functionality, it will require access to different events and sources of data. Events involving users' actions and the content of their messages are considered more sensitive and need to be explicitly enabled.","metadata":{"id":1109}}],["1110",{"pageContent":"For this bot to work, we'll need to be able to see when users join our server, and we'll need to see the contents of their messages. For the former, we'll need the Server Members Intent and for the latter, we'll need the Message Content Intent. Toggle both of these to the \"on\" position. Save changes when prompted.\n\n![Bot intents](https://docimg.replit.com/images/tutorials/46-discord-role-bot/bot-intents.png)\n\nNow that we've created our application and its bot, we need to add it to a server. We'll walk you through creating a test server for this tutorial, but you can also use any server you've created in the past, as long as the other members won't get too annoyed about it becoming a bot testing ground. You can't use a server that you're just a normal user on, as adding bots requires special privileges.\n\nOpen [Discord.com](http://discord.com) in your browser. You should already be logged in. Then click on the **+** icon in the leftmost panel to create a new server. Alternatively, open an existing server you own.\n\n![New server](https://docimg.replit.com/images/tutorials/46-discord-role-bot/new-server.png)\n\nIn a separate tab, return to the [Discord Dev Portal](https://discord.com/developers/applications) and open your application. Follow these steps to add your bot to your server:\n\n1. Click on **OAuth2** in the left sidebar.\n2. In the menu that appears under **OAuth2**, select **URL Generator**.\n3. Under **Scopes**, mark the checkbox labelled _bot_.\n4. Under **Bot Permissions**, mark the checkbox labelled _Administrator_.\n   ![Bot permissions](https://docimg.replit.com/images/tutorials/46-discord-role-bot/bot-permissions.png)\n\n5. Scroll down and copy the URL under **Generated URL**.\n   ![Generated url](https://docimg.replit.com/images/tutorials/46-discord-role-bot/generated-url.png)\n\n6. Paste the URL in your browser's navigation bar and hit Enter.\n7. On the page that appears, select your server from the drop-down box and click **Continue**.","metadata":{"id":1110}}],["1111",{"pageContent":"6. Paste the URL in your browser's navigation bar and hit Enter.\n7. On the page that appears, select your server from the drop-down box and click **Continue**.\n8. When prompted about permissions, click **Authorize**, and complete the CAPTCHA.\n   ![Bot connect](https://docimg.replit.com/images/tutorials/46-discord-role-bot/bot-connect.png)\n\n9. Return to your Discord server. You should see that your bot has just joined.\n\nNow that we've done the preparatory work, it's time to write some code. Return to your repl for the next section.\n\n## Writing the Discord bot code\n\nWe'll be using [discord.py](https://discordpy.readthedocs.io/en/stable/) to interface with Discord's API using Python. Add the following code scaffold to `main.py` in your repl:\n\n```python\nimport os, re, discord\nfrom discord.ext import commands\n\nDISCORD_TOKEN = os.getenv(\"DISCORD_TOKEN\")\n\nbot = commands.Bot(command_prefix=\"!\")\n\n@bot.event\nasync def on_ready():\n    print(f\"{bot.user} has connected to Discord!\")\n\nbot.run(DISCORD_TOKEN)\n```\n\nFirst, we import the Python libraries we'll need, including discord.py and its [commands extension](https://discordpy.readthedocs.io/en/stable/ext/commands/commands.html). Next we retrieve the value of the `DISCORD_TOKEN` environment variable, which we set in our repl's secrets tab above. Then we instantiate a [`Bot` object](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Bot). We'll use this object to listen for Discord events and respond to them.\n\nThe first event we're interested in is [`on_ready()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.on_ready), which will trigger when our bot logs onto Discord (the `@bot.event` [decorator](https://realpython.com/primer-on-python-decorators/) ensures this). All this event will do is print a message to our repl's console, telling us that the bot has connected.","metadata":{"id":1111}}],["1112",{"pageContent":"Note that we've prepended `async` to the function definition – this makes our `on_ready()` function into a [coroutine](https://docs.python.org/3/library/asyncio-task.html). Coroutines are largely similar to functions, but may not execute immediately, and must be invoked with the `await` keyword. Using coroutines makes our program [asynchronous](https://realpython.com/async-io-python/#the-10000-foot-view-of-async-io), which means it can continue executing code while waiting for the results of a long-running function, usually one that depends on input or output. If you've used JavaScript before, you'll recognize this style of programming.\n\nThe final line in our file starts the bot, providing `DISCORD_TOKEN` to authenticate it. Run your repl now to see it in action. Once it's started, return to your Discord server. You should see that your bot user is now online.\n\n![Online bot](https://docimg.replit.com/images/tutorials/46-discord-role-bot/online-bot.png)\n\n## Creating server roles\n\nBefore we write our bot's main logic, we need to create some roles for it to assign. Our Discord server is for programming discussion, so we'll create roles for a few different programming languages: Python, JavaScript, Rust, Go, and C++. For the sake of simplicity, we'll use all-lowercase for our role names. Feel free to add other languages.\n\nYou can add roles by doing the following:\n\n1. Right-click on your server's icon in the leftmost panel.\n2. From the menu that appears, select **Server Settings**, and then **Roles**.\n3. Click **Create Role**.\n   ![Create role](https://docimg.replit.com/images/tutorials/46-discord-role-bot/create-role.png)\n\n4. Enter a role name (for example, \"python\") and choose a color.\n5. Click **Back**.\n6. Repeat steps 3–5 until all the roles are created.\n\nYour role list should now look something like this:\n\n![Roles list](https://docimg.replit.com/images/tutorials/46-discord-role-bot/roles-list.png)","metadata":{"id":1112}}],["1113",{"pageContent":"6. Repeat steps 3–5 until all the roles are created.\n\nYour role list should now look something like this:\n\n![Roles list](https://docimg.replit.com/images/tutorials/46-discord-role-bot/roles-list.png)\n\nThe order in which roles are listed is the [role hierarchy](https://support.discord.com/hc/en-us/articles/214836687-Role-Management-101). Users who have permission to manage roles will only be able to manage roles lower than their highest role on this list. Ensure that the WelcomeBot role is at the top, or it won't be able to assign users to any of the other roles, even with Administrator privileges.\n\nAt present, all these roles will do is change the color of users' names and the list they appear in on the right sidebar. To make them a bit more meaningful, we can create some private channels. Only users with a given role will be able to use these channels.\n\nTo add private channels for your server's roles, do the following:\n\n1. Click on the **+** next to **Text Channels**.\n2. Type a channel name (e.g. \"python\") under **Channel Name**.\n3. Enable the **Private Channel** toggle.\n4. Click **Create Channel**.\n5. Select the role that matches your channel's name.\n6. Repeat for all roles.\n\n![Create channel](https://docimg.replit.com/images/tutorials/46-discord-role-bot/create-channel.gif)\n\nAs the server owner, you'll be able to see these channels regardless of your assigned roles, but normal members will not.\n\n## Messaging users\n\nNow that our roles are configured, let's write some bot logic. We'll start with a function to DM users with a welcome message. Return to your repl and enter the following code just below the line where you defined `bot`:\n\n```python\nasync def dm_about_roles(member):\n    print(f\"DMing {member.name}...\")\n\n    await member.send(\n        f\"\"\"Hi {member.name}, welcome to {member.guild.name}!\n\nWhich of these languages do you use:\n\n* Python (🐍)\n* JavaScript (🕸️)\n* Rust (🦀)\n* Go (🐹)\n* C++ (🐉)","metadata":{"id":1113}}],["1114",{"pageContent":"await member.send(\n        f\"\"\"Hi {member.name}, welcome to {member.guild.name}!\n\nWhich of these languages do you use:\n\n* Python (🐍)\n* JavaScript (🕸️)\n* Rust (🦀)\n* Go (🐹)\n* C++ (🐉)\n\nReply to this message with one or more of the language names or emojis above so I can assign you the right roles on our server.\n\"\"\"\n    )\n```\n\nThis simple function takes a [`member`](https://discordpy.readthedocs.io/en/stable/api.html#member) object and sends it a private message. Note the use of `await` when running the coroutine [`member.send()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Member.send).\n\nWe need to run this function when one of two things happens: a new member joins the server, or an existing member types the command `!roles` in a channel. The second one will allow us to test the bot without constantly leaving and rejoining the server, and let users change their minds about what programming languages they want to discuss.\n\nTo handle the first event, add this code below the definition of `on_ready`:\n\n```python\n@bot.event\nasync def on_member_join(member):\n    await dm_about_roles(member)\n```\n\nThe [`on_member_join()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.on_member_join) callback supplies a `member` object we can use to call `dm_about_roles()`.\n\nFor the second event, we'll need a bit more code. While we could use discord.py's [bot commands framework](https://discordpy.readthedocs.io/en/stable/ext/commands/commands.html) to handle our `!roles` command, we will also need to deal with general message content later on, and doing both in different functions doesn't work well. So instead, we'll put everything to do with message contents in a single [`on_message()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.on_message) event. If our bot were just responding to commands, using [`@bot.command`](https://discordpy.readthedocs.io/en/stable/ext/commands/commands.html) handlers would be preferable.","metadata":{"id":1114}}],["1115",{"pageContent":"Add the following code below the definition of `on_member_join()`:\n\n```python\n@bot.event\nasync def on_message(message):\n    print(\"Saw a message...\")\n\n    if message.author == bot.user:\n        return # prevent responding to self\n\n    # Respond to commands\n    if message.content.startswith(\"!roles\"):\n        await dm_about_roles(message.author)\n```\n\nFirst, we print a message to the repl console to note that we've seen a message. We then check if the message's author is the bot itself. If it is, we terminate the function, to avoid infinite loops. Following that, we check if the message's content starts with `!roles`, and if so we invoke `dm_amount_roles()`, passing in the message's author.\n\nStop and rerun your repl now. If you receive a CloudFlare error, type `kill 1` in your repl's shell and try again. Once your repl's running, return to your Discord server and type \"!roles\" into the general chat. You should receive a DM from your bot.\n\n![Bot direct message](https://docimg.replit.com/images/tutorials/46-discord-role-bot/bot-dm.png)\n\n## Assigning roles from replies\n\nOur bot can DM users, but it won't do anything when users reply to it. Before we can add that logic, we need to implement a small hack to allow our bot to take actions on our server based on the contents of direct messages.\n\nThe Discord bot framework is designed with the assumption that bots are generic and will be added to many different servers. Bots do not have a home server, and there's no easy way for them to trace a process flow that moves from a server to private messages like the one we're building here. Therefore, our bot won't automatically know which server to use for role assignment when that user replies to its DM.","metadata":{"id":1115}}],["1116",{"pageContent":"We could work out which server to use through the user's [`mutual_guilds`](https://discordpy.readthedocs.io/en/stable/api.html#discord.User.mutual_guilds) property, but it is not always reliable due to caching. Note that Discord servers were previously known as \"guilds\" and this terminology persists in areas of the API.\n\nAs we don't plan to add this bot to more than one server at a time, we'll solve the problem by hardcoding the server ID in our bot logic. But first, we need to retrieve our server's ID. The easiest way to do this is to add another command to our bot's vocabulary. Expand the `if` statement at the bottom of `on_message()` to include the following `elif`:\n\n```python\n    elif message.content.startswith(\"!serverid\"):\n        await message.channel.send(message.channel.guild.id)\n```\n\nRerun your repl and return to your Discord server. Type \"!serverid\" into the chat, and you should get a reply from your bot containing a long string of digits. Copy that string to your clipboard.\n\nGo to the top of `main.py`. Underneath `DISCORD_TOKEN`, add the following line:\n\n```python\nSERVER_ID =\n```\n\nPaste the contents of your clipboard after the equals sign. Now we can retrieve our server's ID from this variable.\n\nOnce that's done, return to the definition of `on_message()`. We're going to add another `if` statement to deal with the contents of user replies in DMs. Edit the function body so that it matches the below:\n\n```python\n@bot.event\nasync def on_message(message):\n    print(\"Saw a message...\")\n\n    if message.author == bot.user:\n        return # prevent responding to self\n\n    # NEW CODE BELOW\n    # Assign roles from DM\n    if isinstance(message.channel, discord.channel.DMChannel):\n        await assign_roles(message)\n        return\n    # NEW CODE ABOVE\n\n    # Respond to commands\n    if message.content.startswith(\"!roles\"):\n        await dm_about_roles(message.author)\n    elif message.content.startswith(\"!serverid\"):\n        await message.channel.send(message.channel.guild.id)\n```","metadata":{"id":1116}}],["1117",{"pageContent":"if message.content.startswith(\"!roles\"):\n        await dm_about_roles(message.author)\n    elif message.content.startswith(\"!serverid\"):\n        await message.channel.send(message.channel.guild.id)\n```\n\nThis new `if` statement will check whether the message that triggered the event was in a DM channel, and if so, will run `assign_roles()` and then exit. Now we need to define `assign_roles()`. Add the following code above the definition of `on_message()`:\n\n```python\nasync def assign_roles(message):\n    print(\"Assigning roles...\")\n\n    languages = set(re.findall(\"python|javascript|rust|go|c\\+\\+\", message.content, re.IGNORECASE))\n```\n\nWe can find the languages mentioned in the user replies using [regular expressions](https://docs.python.org/3/library/re.html): [`re.findall()`](https://docs.python.org/3/library/re.html) will return a list of strings that match our expression. This way, whether the user replies with \"Please add me to the Python and Go groups\" or just \"python go\", we'll be able to assign them the right role.\n\nWe convert the list into a [set](https://realpython.com/python-sets/) in order to remove duplicates.\n\nThe next thing we need to do is deal with emoji responses. Add the following code to the bottom of the `assign_roles()` function:\n\n```python\n    language_emojis = set(re.findall(\"\\U0001F40D|\\U0001F578|\\U0001F980|\\U0001F439|\\U0001F409\", message.content))\n    # https://unicode.org/emoji/charts/full-emoji-list.html\n\n    # Convert emojis to names\n    for emoji in language_emojis:\n        {\n            \"\\U0001F40D\": lambda: languages.add(\"python\"),\n            \"\\U0001F578\": lambda: languages.add(\"javascript\"),\n            \"\\U0001F980\": lambda: languages.add(\"rust\"),\n            \"\\U0001F439\": lambda: languages.add(\"go\"),\n            \"\\U0001F409\": lambda: languages.add(\"c++\")\n        }[emoji]()\n```","metadata":{"id":1117}}],["1118",{"pageContent":"\"\\U0001F980\": lambda: languages.add(\"rust\"),\n            \"\\U0001F439\": lambda: languages.add(\"go\"),\n            \"\\U0001F409\": lambda: languages.add(\"c++\")\n        }[emoji]()\n```\n\nIn the first line, we do the same regex matching we did with the language names, but using emoji Unicode values instead of standard text. You can find [a list of emojis with their codes on Unicode.org](https://unicode.org/emoji/charts/full-emoji-list.html). Note that the `+` in this list's code should be replaced with `000` in your Python code: for example, `U+1F40D` becomes `U0001F40D`.\n\nOnce we've got our set of emoji matches in `language_emojis`, we loop through it and use a dictionary to add the correct name to our `languages` set. This dictionary has strings as values and lambda functions as keys. Finally, `[emoji]()` will select the lambda function for the provided key and execute it, adding a value to `languages`. This is similar to the [switch-case](https://en.wikipedia.org/wiki/Switch_statement) syntax you may have seen in other programming languages.\n\nWe now have a full list of languages our users may wish to discuss. Add the following code below the `for` loop:\n\n```python\n    if languages:\n        server = bot.get_guild(SERVER_ID)\n\n        roles = [discord.utils.get(server.roles, name=language.lower()) for language in languages]\n\n        member = await server.fetch_member(message.author.id)\n```\n\nThis code first checks that the `languages` set contains values. If so, we use [`get_guild()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Client.get_guild) to retrieve a `Guild` object corresponding to our server's ID (remember, guild means server).","metadata":{"id":1118}}],["1119",{"pageContent":"We then use a [list comprehension](https://realpython.com/list-comprehension-python/) and discord.py's [`get()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.utils.get) function to construct a list of all the roles corresponding to languages in our list. Note that we've used the `lower()` to ensure all of our strings are in lowercase.\n\nFinally, we retrieve the `member` object corresponding to the user who sent us the message and our server.\n\nWe now have everything we need to assign roles. Add the following code to the bottom of the `if` statement, within the body of the `if` statement:\n\n```python\n        try:\n            await member.add_roles(*roles, reason=\"Roles assigned by WelcomeBot.\")\n        except Exception as e:\n            print(e)\n            await message.channel.send(\"Error assigning roles.\")\n        else:\n            await message.channel.send(f\"\"\"You've been assigned the following role{\"s\" if len(languages) > 1 else \"\"} on {server.name}: { ', '.join(languages) }.\"\"\")\n```\n\nThe `member` object's `add_roles()` method takes an arbitrary number of `role` objects as positional arguments. We [unpack](https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists) our `languages` set into separate arguments using the `*` operator, and provide a string for the named argument `reason`.\n\nOur operation is wrapped in a [try-except-else](https://realpython.com/python-exceptions/#the-try-and-except-block-handling-exceptions) block. If adding roles fails, we'll print the resulting error to our repl's console and send a generic error message to the user. If it succeeds, we'll send a message to the user informing them of their new roles, making extensive use of [string interpolation](https://peps.python.org/pep-0498/).\n\nFinally, we need to deal with the case where no languages were found in the user's message. Add an `else:` block onto the bottom of the `if languages:` block as below:\n\n```python\n    else:","metadata":{"id":1119}}],["1120",{"pageContent":"Finally, we need to deal with the case where no languages were found in the user's message. Add an `else:` block onto the bottom of the `if languages:` block as below:\n\n```python\n    else:\n        await message.channel.send(\"No supported languages were found in your message.\")\n```\n\nRerun your repl and return to your Discord server. Open the DM channel with your bot and try sending it one or more language names or emojis. You should receive the expected roles. You can check this by clicking on your name in the right-hand panel on your Discord server – your roles will be listed in the box that appears.\n\n![Assigned roles](https://docimg.replit.com/images/tutorials/46-discord-role-bot/roles.png)\n\n## Removing roles\n\nOur code currently does not allow users to remove roles from themselves. While we could do this manually as the server owner, we've built this bot to avoid having to do that sort of thing, so let's expand our code to allow for role removal.\n\nTo keep things simple, we'll remove any roles mentioned by the user which they already have. So if a user with the \"python\" role writes \"c++ python\", we'll add the \"c++\" role and remove the \"python\" role.\n\nLet's make some changes. Find the `if languages:` block in your `assign_roles()` function and change the code above `try:` to match the below:\n\n```python\n    if languages:\n        server = bot.get_guild(SERVER_ID)\n\n        # <-- RENAMED VARIABLE + LIST CHANGED TO SET\n        new_roles = set([discord.utils.get(server.roles, name=language.lower()) for language in languages])\n\n        member = await server.fetch_member(message.author.id)\n\n        # NEW CODE BELOW\n        current_roles = set(member.roles)\n\n```\n\nWe replace the list of roles with a set of new roles. We also create a set of roles the user current holds. Given these two sets, we can figure out which roles to add and which to remove using [set operations](https://realpython.com/python-sets/#operating-on-a-set). Add the following code below the definition of `current_roles`:\n\n```python","metadata":{"id":1120}}],["1121",{"pageContent":"```python\n        roles_to_add = new_roles.difference(current_roles)\n        roles_to_remove = new_roles.intersection(current_roles)\n```\n\nThe roles to add will be roles that are in `new_roles` but not in `current_roles`, i.e. the _difference_ of the sets. The roles to remove will be roles that are in both sets, i.e. their _intersection_.\n\nNow we need to replace the try-except-else block with the code below:\n\n```python\n        try:\n            await member.add_roles(*roles_to_add, reason=\"Roles assigned by WelcomeBot.\")\n            await member.remove_roles(*roles_to_remove, reason=\"Roles revoked by WelcomeBot.\")\n        except Exception as e:\n            print(e)\n            await message.channel.send(\"Error assigning/removing roles.\")\n        else:\n            if roles_to_add:\n                    await message.channel.send(f\"You've been assigned the following role{'s' if len(roles_to_add) > 1 else ''} on {server.name}: { ', '.join([role.name for role in roles_to_add]) }\")\n\n            if roles_to_remove:\n                await message.channel.send(f\"You've lost the following role{'s' if len(roles_to_remove) > 1 else ''} on {server.name}: { ', '.join([role.name for role in roles_to_remove]) }\")\n```\n\nThis code follows the same general logic as our original block, but can remove roles as well as add them.\n\nFinally, we need to update the bot's original DM to reflect this new functionality. Find the `dm_about_roles()` function and amend it as follows:\n\n```python\nasync def dm_about_roles(member):\n    print(f\"DMing {member.name}...\")\n\n    await member.send(\n        f\"\"\"Hi {member.name}, welcome to {member.guild.name}!\n\nWhich of these languages do you use:\n\n* Python (🐍)\n* JavaScript (🕸️)\n* Rust (🦀)\n* Go (🐹)\n* C++ (🐉)\n\nReply to this message with one or more of the language names or emojis above so I can assign you the right roles on our server.\n\nReply with the name or emoji of a language you're currently using and want to stop and I'll remove that role for you.\n\"\"\"\n    )\n```","metadata":{"id":1121}}],["1122",{"pageContent":"Reply with the name or emoji of a language you're currently using and want to stop and I'll remove that role for you.\n\"\"\"\n    )\n```\n\nRerun your repl and test it out. You should be able to add and remove roles from yourself. Try inviting some of your friends to your Discord server, and have them use the bot as well. They should receive DMs as soon as they join.\n\n![Welcome message](https://docimg.replit.com/images/tutorials/46-discord-role-bot/welcome.png)\n![Bot role message](https://docimg.replit.com/images/tutorials/46-discord-role-bot/bot-role-message.png)\n\n## Where next?\n\nWe've created a simple Discord server welcome bot. There's a lot of scope for additional functionality. Here are some ideas for expansion:\n\n- Include more complex logic for role assignment. For example, you could have some roles that require users to have been members of the server for a certain amount of time.\n- Have your bot automatically assign additional user roles based on behavior. For example, you could give a role to users who react to messages with the most emojis.\n- Add additional commands. For example, you might want to have a command that searches Stack Overflow, allowing members to ask programming questions from the chat.\n\nDiscord bot code can be hosted on Replit permanently, but you'll need to use a [Deployment](/hosting/deployments/about-deployments) repl to keep it running 24/7.\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/DiscordWelcomeBot?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1122}}],["1123",{"pageContent":"---\nsidebar_position: 48\ntitle: Discord RPG bot with Python\n---\n\n# Create a Discord RPG bot with Python\n\nIn this tutorial, we'll create a text-based RPG that users of a [Discord](https://discord.com) server can play by entering special commands. Users will be able to create characters, fight enemies, and earn experience and gold, which they can use to develop their skills and buy powerful items.\n\nBy the end of this tutorial, you will have:\n\n- Used [discord.py](https://discordpy.readthedocs.io/en/stable/) to create an RPG that can be added to any Discord server, and which can be expanded as you see fit.\n- Used Replit Database to store information about the game world through serialization.\n- Created a custom Discord message embed.\n- Hosted your own Discord bot on Replit!\n\n## Getting started\n\nSign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Python repl.\n\n![Create repl](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/create-repl.png)\n\n## Game design\n\nBefore we dive into writing code, it's worth taking a moment to think about how our game is going to work and what options we're going to give our players. Our game will be text-based and played on a Discord server. Players will take actions by issuing commands to a Discord bot, and the bot will respond with the results of those actions.\n\nPlayers will start the game by creating a character, whom they can name. This character will have the following:\n\n- Hitpoints to determine how much damage they can take.\n- Attack and defense skills to determine how they fare in battle.\n- A level and experience points.\n- Mana for casting spells.\n- An inventory for collecting items.\n- Gold for purchasing items.","metadata":{"id":1123}}],["1124",{"pageContent":"- Attack and defense skills to determine how they fare in battle.\n- A level and experience points.\n- Mana for casting spells.\n- An inventory for collecting items.\n- Gold for purchasing items.\n\nCharacters will gain experience and gold for fighting and defeating enemies. They will be able to seek out enemies and battle them. In battle mode, they will be able to fight, use an item, or flee if it doesn't look like they're going to win. Battles will continue until one participant runs out of hitpoints, or until the player's character flees.\n\nAt the end of a successful battle, characters will gain experience points and gold, based on the strength of the defeated enemy. If a character is defeated in battle, they will die and the player will have to create a new character.\n\nAt certain thresholds of experience points, characters will level up. Every time a player levels up their character, they will be able to choose to increase the character's hitpoints, attack, defense, or mana.\n\nWhile we've included gold, mana, and an inventory in our design, the implementation of these aspects will be left as an exercise for the reader. For this tutorial, we'll focus on implementing battling enemies and leveling up.\n\nTo facilitate the above, our game will need two modes:\n\n- Adventure mode, in which players can hunt for enemies and level up.\n- Battle mode, in which players can fight enemies.\n\nWe will also need a few commands for players to take game actions:\n\n- `!create <name>`: Create a new character with the name provided.\n- `!status`: Display the character's current hitpoints, level, carried items, and other information.\n- `!die`: Destroy the current character.\n- `!hunt`: (In adventure mode) seek out an enemy to fight.\n- `!fight`: (In battle mode) attack an enemy.\n- `!flee`: (In battle mode) flee from a battle.\n- `!levelup <stat>`: (In adventure mode) advance to the next level if enough XP is available, increasing the provided stat (hitpoints, attack, defense, mana).\n\n## Game classes","metadata":{"id":1124}}],["1125",{"pageContent":"- `!levelup <stat>`: (In adventure mode) advance to the next level if enough XP is available, increasing the provided stat (hitpoints, attack, defense, mana).\n\n## Game classes\n\nBefore we start on the Discord code, let's create some classes to represent the characters, enemies, modes, and items in our game. In your repl, create a new file named `game.py` and add the following import code to it:\n\n```python\nfrom replit import db\nimport enum, random, sys\nfrom copy import deepcopy\n```\n\n![Game file](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/gamedotpy.png)\n\nWe're pulling in the [Python library](https://replit-py.readthedocs.io/en/latest/db_tutorial.html) for [Replit Database](/hosting/database-faq), a persistent key-value store attached to every repl. If you haven't used this before, think of it as a Python dictionary with contents that persist between restarts of your repl. We'll be using it to store the state of our game and its characters as they fight enemies and level up.\n\nAdditionally, we're importing the Python built-in libraries [`enum`](https://docs.python.org/3/library/enum.html), [`random`](https://docs.python.org/3/library/random.html), [`sys`](https://docs.python.org/3/library/sys.html), and [`deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy) from [`copy`](https://docs.python.org/3/library/copy.html). These will provide a number of helpful utilities we'll use while building our game.\n\nFirst off, we'll use [`enum.IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum) to enumerate our game modes. Add the following code below your imports:\n\n```python\n# Game modes\nclass GameMode(enum.IntEnum):\n    ADVENTURE = 1\n    BATTLE = 2\n```","metadata":{"id":1125}}],["1126",{"pageContent":"```python\n# Game modes\nclass GameMode(enum.IntEnum):\n    ADVENTURE = 1\n    BATTLE = 2\n```\n\nWhenever we refer to a game mode in our code, we'll be able to write `GameMode.ADVENTURE` or `GameMode.BATTLE`, rather than the meaningless numbers `1` or `2`, but our code and database will see these game modes as `1` and `2`. This saves us from having to remember which game mode is which and will make our code clearer.\n\nNext, we'll create classes for living creatures, such as players' characters and the enemies they fight. As these will all share several properties and behaviors, such as hitpoints and the ability to fight, we'll use inheritance to save ourselves some repetition. Our class hierarchy will look like this (but with a few more enemy types):\n\n```\n       ,-----.\n       |Actor|\n       |-----|\n       `-----'\n         / \\\n        /   \\\n,---------.  ,-----.\n|Character|  |Enemy|\n|---------|  |-----|\n`---------'  `-----'\n              /    \\\n      ,--------.   ,------.\n      |GiantRat|   |Dragon|\n      |--------|   |------|\n      `--------'   `------'\n```\n\nLet's start by implementing our parent class, `Actor`. This class will define all of the attributes that characters and enemies have in common and implement a `fight()` method. Add the following code at the bottom of `game.py`:\n\n```python\n# Living creatures\nclass Actor:\n\n    def __init__(self, name, hp, max_hp, attack, defense, xp, gold):\n        self.name = name\n        self.hp = hp\n        self.max_hp = max_hp\n        self.attack = attack\n        self.defense = defense\n        self.xp = xp\n        self.gold = gold\n\n    def fight(self, other):\n        defense = min(other.defense, 19) # cap defense value\n        chance_to_hit = random.randint(0, 20-defense)\n        if chance_to_hit:\n            damage = self.attack\n        else:\n            damage = 0\n\n        other.hp -= damage\n\n        return (self.attack, other.hp <= 0) #(damage, fatal)\n```","metadata":{"id":1126}}],["1127",{"pageContent":"if chance_to_hit:\n            damage = self.attack\n        else:\n            damage = 0\n\n        other.hp -= damage\n\n        return (self.attack, other.hp <= 0) #(damage, fatal)\n```\n\nOur `__init__()` method defines several variables per our game design specification above. Note that we've defined both `hp` and `max_hp`: these should be the same value when we first create a character or enemy class, but will diverge for characters and enemies we read from the database. Once we get into the game logic, we will be recreating instances of these classes from the database constantly.\n\nAlso note that `self.xp` will represent something slightly different in characters and enemies: For characters, it will be the cumulative experience points earned, whereas for enemies it will be the amount of XP rewarded to characters when the enemy is defeated. A more complex design might instead enable enemies to gain experience points and level up like player characters.\n\nThe `fight()` method takes `other`, an instance of a class that inherits from `Actor`. The attack is simulated by first calculating the chance to hit based on the opponent's `defense` attribute. If `chance_to_hit` is 0, the attack will miss. The likelihood of a miss happening increases in probability as the `defense` value increases. For example, an attack will have a 95% chance of succeeding against an enemy with a `defense` of 1, but only a 50% chance of succeeding against an enemy with `defense` of 19. We use Python's built-in `min()` function to cap the value of `defense` at 19, to avoid creating a completely invulnerable character.\n\nThe damage done on a successful hit is determined by the `Actor`'s `attack` attribute. The function returns a tuple of the amount of damage dealt by the attack and whether it was the fatal blow.\n\nOur `Actor` class is complete for now. Let's create a `Character` class that inherits from it and will represent players. Add the following code to the bottom of the `game.py` file:\n\n```python","metadata":{"id":1127}}],["1128",{"pageContent":"Our `Actor` class is complete for now. Let's create a `Character` class that inherits from it and will represent players. Add the following code to the bottom of the `game.py` file:\n\n```python\nclass Character(Actor):\n\n    level_cap = 10\n\n    def __init__(self, name, hp, max_hp, attack, defense, mana, level, xp, gold, inventory, mode, battling, user_id):\n        super().__init__(name, hp, max_hp, attack, defense, xp, gold)\n        self.mana = mana\n        self.level = level\n\n        self.inventory = inventory\n\n        self.mode = mode\n        self.battling = battling\n        self.user_id = user_id\n```\n\nOur `Character` class has all the same attributes as `Actor`, plus some additional ones:\n\n- `mana` represents the character's capacity for casting spells.\n- `level` is the character's level. This will start at 1 and increase with every 10 XP the player earns.\n- `inventory` is a list of items carried by the character.\n- `mode` is the game mode we defined an enum for above. Two characters will be in different modes depending on their actions.\n- `battling` is a variable we'll use to store the enemy object that the character is currently fighting. This will be `None` outside of battle mode.\n- `user_id` is the Discord user ID of the user who created this character.\n\nAlso, note the [class variable](https://www.digitalocean.com/community/tutorials/understanding-class-and-instance-variables-in-python-3) `level_cap`: this will be the highest possible value of `level`.\n\nWe'll come back to the `Character` class and use it to implement gameplay actions later, but first let's define the enemy classes, starting with `Enemy`.\n\n```python\nclass Enemy(Actor):\n\n    def __init__(self, name, max_hp, attack, defense, xp, gold):\n        super().__init__(name, max_hp, max_hp, attack, defense, xp, gold)\n```","metadata":{"id":1128}}],["1129",{"pageContent":"```python\nclass Enemy(Actor):\n\n    def __init__(self, name, max_hp, attack, defense, xp, gold):\n        super().__init__(name, max_hp, max_hp, attack, defense, xp, gold)\n```\n\nFor now, this is a straightforward subclass of `Actor` that uses the same value for `hp` and `max_hp` but doesn't define anything extra. We'll specify the actual stats of individual enemy types in the `Enemy` subclasses, of which we'll define ten. Copy-paste the code below at the bottom of `game.py` to implement those classes:\n\n```python\nclass GiantRat(Enemy):\n    min_level = 1\n    def __init__(self):\n        super().__init__(\"🐀 Giant Rat\", 2, 1, 1, 1, 1) # HP, attack, defense, XP, gold\n\nclass GiantSpider(Enemy):\n    min_level = 1\n    def __init__(self):\n        super().__init__(\"🕷️ Giant Spider\", 3, 2, 1, 1, 2) # HP, attack, defense, XP, gold\n\nclass Bat(Enemy):\n    min_level = 1\n    def __init__(self):\n        super().__init__(\"🦇 Bat\", 4, 2, 1, 2, 1) # HP, attack, defense, XP, gold\n\nclass Crocodile(Enemy):\n    min_level = 2\n    def __init__(self):\n        super().__init__(\"🐊 Crocodile\", 5, 3, 1, 2, 2) # HP, attack, defense, XP, gold\n\nclass Wolf(Enemy):\n    min_level = 2\n    def __init__(self):\n        super().__init__(\"🐺 Wolf\", 6, 3, 2, 2, 2) # HP, attack, defense, XP, gold\n\nclass Poodle(Enemy):\n    min_level = 3\n    def __init__(self):\n        super().__init__(\"🐩 Poodle\", 7, 4, 1, 3, 3) # HP, attack, defense, XP, gold\n\nclass Snake(Enemy):\n    min_level = 3\n    def __init__(self):\n        super().__init__(\"🐍 Snake\", 8, 4, 2, 3, 3) # HP, attack, defense, XP, gold\n\nclass Lion(Enemy):\n    min_level = 4\n    def __init__(self):\n        super().__init__(\"🦁 Lion\", 9, 5, 1, 4, 4) # HP, attack, defense, XP, gold\n\nclass Dragon(Enemy):\n    min_level = 5\n    def __init__(self):\n        super().__init__(\"🐉 Dragon\", 10, 6, 2, 5, 5) # HP, attack, defense, XP, gold\n```","metadata":{"id":1129}}],["1130",{"pageContent":"class Dragon(Enemy):\n    min_level = 5\n    def __init__(self):\n        super().__init__(\"🐉 Dragon\", 10, 6, 2, 5, 5) # HP, attack, defense, XP, gold\n```\n\nIn addition to providing names and hardcoded HP, attack, defense, XP, and gold values, we've implemented `min_level` as a class variable. This specifies the minimum level the player must be to face this enemy. By implementing this, we avoid having low-level players die instantly against too-powerful enemies and ensure that new enemies will show up as the player levels up, creating a sense of progression. Feel free to change any of these enemies, or add your own.\n\n## Saving and loading from the database\n\nWe've now defined our player and enemy classes, though they don't do much. But before we implement any actual gameplay, we need a way to ensure that our characters and enemies maintain their state from one moment to the next. Presently, any `Actor` instances we create will disappear as soon as our repl finishes running or is stopped. We need to use our repl's database to ensure that players can keep the characters they create and that changes such as losing and gaining HP and leveling up will persist.\n\nThe most important objects in our game are the instances of `Character`. These objects store character stats, inventory, and even game mode and the enemy currently being fought. So as long as we can save and load the state of individual characters from our database, our game world will feel permanent. For now, we don't need to worry about storing anything else.\n\nReturn to the definition of `Character` and add the following `save_to_db()` method below the `__init__()` method:\n\n```python\nclass Character(Actor):\n\n    # ...\n\n    def save_to_db(self):\n        character_dict = deepcopy(vars(self))\n        if self.battling != None:\n            character_dict[\"battling\"] = deepcopy(vars(self.battling))\n\n        db[\"characters\"][self.user_id] = character_dict\n```","metadata":{"id":1130}}],["1131",{"pageContent":"if self.battling != None:\n            character_dict[\"battling\"] = deepcopy(vars(self.battling))\n\n        db[\"characters\"][self.user_id] = character_dict\n```\n\nAt the top of `game.py`, we imported `db` from the `replit` Python library – this object provides an interface to our repl's database. The `db` object is designed to be used like a dictionary, so we can create keys and values as we would with any other dictionary. Our database layout will look like this:\n\n```\n{\n    \"characters\": {\n        \"123456789012345678\": {\n            \"name\": \"Bob the Dwarf\"\n            \"hp\": 10,\n            ...\n        },\n        \"823486788042375673\": {\n            \"name\": \"Eric the Human\"\n            \"hp\": 8,\n            ...\n        },\n        ...\n    }\n}\n```\n\nThe [`vars()` function](https://docs.python.org/3/library/functions.html#vars) is a Python built-in that returns the value of `__dict__` for any class, module, or instance we pass to it. For most instances, this will be a dictionary containing that instance's attributes. In the case of our `Character` object, the dictionary will contain all of the attributes we defined in `__init__`. We use [`deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy) to make a full copy of this dictionary.\n\nAny attributes that contain strings, numbers, boolean values, or even lists or dictionaries can be easily and meaningfully stored in our repl's database. Attributes that reference instances of our custom classes cannot be usefully stored, as the referenced instance may not exist the next time the data is loaded. The `deepcopy()` operation alone does not solve this problem. Thus, we need to store the object referenced by `battling` as a dictionary of its attributes using `vars()`, just like we did for the `Character` instance.","metadata":{"id":1131}}],["1132",{"pageContent":"However, we have a slight problem: While we can store the attributes of the enemy, this way we're not storing its class. There are a few ways we could resolve this issue – the easiest one is to store the instance's class name as an attribute. Go to your `Enemy` class's `__init__()` method and add the following line:\n\n```python\nclass Enemy(Actor):\n\n    def __init__(self, name, max_hp, attack, defense, xp, gold):\n        super().__init__(name, max_hp, max_hp, attack, defense, xp, gold)\n        # NEW LINE BELOW\n        self.enemy = self.__class__.__name__\n```\n\nThis new line will store the name of the class as a string, which we can write to the database.\n\nWe've now written all the code we'll need to save player characters to the database. Now we need a way to load them back into the game. Fortunately, we already have most of what we need to do this in our `Character.__init__()` method. A line of code like the following will initialize a new `Character` with details from our database:\n\n```python\nCharacter(**db[\"characters\"][\"123456789012345678\"])\n```\n\nThe only problem here is that the value of `battling` will be a dictionary rather than a subclass of `Enemy`. We can fix this by making some changes to `Character.__init__()`. Find the method and replace the line `self.battling = battling` with the new code below:\n\n```python\nclass Character(Actor):\n\n    level_cap = 10\n\n    def __init__(self, name, hp, max_hp, attack, defense, mana, level, xp, gold, inventory, mode, battling, user_id):\n        super().__init__(name, hp, max_hp, attack, defense, xp, gold)\n        self.mana = mana\n        self.level = level\n\n        self.inventory = inventory\n\n        self.mode = mode\n        # NEW CODE BELOW THIS LINE\n        if battling != None:\n            enemy_class = str_to_class(battling[\"enemy\"])\n            self.battling = enemy_class()\n            self.battling.rehydrate(**battling)\n        else:\n            self.battling = None\n        # NEW CODE ABOVE THIS LINE\n\n        self.user_id = user_id\n```","metadata":{"id":1132}}],["1133",{"pageContent":"self.battling = enemy_class()\n            self.battling.rehydrate(**battling)\n        else:\n            self.battling = None\n        # NEW CODE ABOVE THIS LINE\n\n        self.user_id = user_id\n```\n\nThis code converts the value of the `enemy` attribute we created above from a string into a class, initializes a copy of that class, and then calls `rehydrate`, unpacking the `battling` dictionary as its arguments. We'll write both the `str_to_class` function and the `Enemy.rehydrate()` method shortly.\n\nThe `str_to_class` function will take a `string` and return the `class` with its name.\n\nThe `rehydrate` method will set all attributes of the instance to those provided. While we could do this with the `__init__()` method as we did with `Character`, this would force us to specify all our attribute values every time we initialize any subclass of `Enemy`, defeating the point of having subclasses in the first place.\n\nNavigate to the top of `game.py` and create the `str_to_class` function just below your imports, as below:\n\n```python\n# Helper functions\ndef str_to_class(classname):\n    return getattr(sys.modules[__name__], classname)\n```\n\nThis function uses the useful Python built-in [`getattr`](https://docs.python.org/3/library/functions.html#getattr) to retrieve the class corresponding to the string provided as `classname`. Note that this function will only work for the classes we define.\n\nNext, return to your `Enemy` class and create the `rehydrate()` method just below the `__init__()` method.\n\n```python\nclass Enemy(Actor):\n\n    def __init__(self, name, max_hp, attack, defense, xp, gold):\n        super().__init__(name, max_hp, max_hp, attack, defense, xp, gold)\n        self.enemy = self.__class__.__name__\n\n    # NEW METHOD\n    def rehydrate(self, name, hp, max_hp, attack, defense, xp, gold, enemy):\n        self.name = name\n        self.hp = hp\n        self.max_hp = max_hp\n        self.attack = attack\n        self.defense = defense\n        self.xp = xp\n        self.gold = gold\n```","metadata":{"id":1133}}],["1134",{"pageContent":"self.name = name\n        self.hp = hp\n        self.max_hp = max_hp\n        self.attack = attack\n        self.defense = defense\n        self.xp = xp\n        self.gold = gold\n```\n\nNote that we're accepting `enemy` as an argument without using it. This is to prevent errors when unpacking the `battling` dictionary.\n\nWe will now be able to save characters to the database by calling `save_to_db()` and load characters from the database by passing a database entry to `Character()`. As our characters store information about the enemies they're fighting, this is all we need for a persistent game world.\n\n## Game actions\n\nLet's implement the player actions from our design specification. We'll start with hunting, the action that enables characters to seek out enemies to fight. Add the following code to the class definition of `Character`:\n\n```python\n    def hunt(self):\n        # Generate random enemy to fight\n        while True:\n            enemy_type = random.choice(Enemy.__subclasses__())\n\n            if enemy_type.min_level <= self.level:\n                break\n\n        enemy = enemy_type()\n\n        # Enter battle mode\n        self.mode = GameMode.BATTLE\n        self.battling = enemy\n\n        # Save changes to DB after state change\n        self.save_to_db()\n\n        return enemy\n```\n\nFirst, we use [`random.choice()`](https://docs.python.org/3/library/random.html#random.choice) to choose one of the subclasses of `Enemy` at random. This random selection will be repeated until we chose an enemy with a minimum level less than or equal to our player character's level.\n\nOnce the enemy is chosen, we initialize an instance of it, switch the game mode, and save a reference to it in `battling`. We then update the player object in the database and return the enemy object.\n\nWe will need to call `save_to_db()` at the end of every method that changes the character's state. This includes the `fight()` method defined in `Actor`. Add the following method to the `Character` class to accomplish this:\n\n```python","metadata":{"id":1134}}],["1135",{"pageContent":"```python\n   def fight(self, enemy):\n        outcome = super().fight(enemy)\n\n        # Save changes to DB after state change\n        self.save_to_db()\n\n        return outcome\n```\n\nThis method will call `Actor.fight()`, store its result, update the database, and then return the result.\n\nNext, we'll define a `flee()` method for escaping from a battle the player character is unlikely to win. Add the following method at the bottom of `Character`:\n\n```python\n    def flee(self, enemy):\n        if random.randint(0,1+self.defense): # flee unscathed\n            damage = 0\n        else: # take damage\n            damage = enemy.attack/2\n            self.hp -= damage\n\n        # Exit battle mode\n        self.battling = None\n        self.mode = GameMode.ADVENTURE\n\n        # Save to DB after state change\n        self.save_to_db()\n\n        return (damage, self.hp <= 0) #(damage, killed)\n```\n\nTo add some uncertainty to the flee action, as well as an additional use for the defense stat, we've implemented a random chance that the player will take a small amount of damage on fleeing. We then empty `battling`, change the game mode, save the state, and return a tuple of the action outcome, similar to the one returned in `Actor.fight()`.\n\nNext, we'll need a method to call after an enemy is defeated, to give the player character their gold and XP. Add the following method definition:\n\n```python\n    def defeat(self, enemy):\n        if self.level < self.level_cap: # no more XP after hitting level cap\n            self.xp += enemy.xp\n\n        self.gold += enemy.gold # loot enemy\n\n        # Exit battle mode\n        self.battling = None\n        self.mode = GameMode.ADVENTURE\n\n        # Check if ready to level up after earning XP\n        ready, _ = self.ready_to_level_up()\n\n        # Save to DB after state change\n        self.save_to_db()\n\n        return (enemy.xp, enemy.gold, ready)\n```","metadata":{"id":1135}}],["1136",{"pageContent":"ready, _ = self.ready_to_level_up()\n\n        # Save to DB after state change\n        self.save_to_db()\n\n        return (enemy.xp, enemy.gold, ready)\n```\n\nIf the player's level is below the cap, we add the enemy's XP onto their own. We then add the enemy's gold to their coin-purse, exit battle mode, and check if they've gained enough XP to level up (using a method we'll implement later). Finally, we save the character's state to the database and return a tuple of the results of this action.\n\nLet's define `ready_to_level_up()` next:\n\n```python\n    def ready_to_level_up(self):\n        if self.level == self.level_cap: # zero values if we've ready the level cap\n            return (False, 0)\n\n        xp_needed = (self.level)*10\n        return (self.xp >= xp_needed, xp_needed-self.xp) #(ready, XP needed)\n```\n\nThis method merely checks whether the current XP is greater than or equal to ten times the character's level. Characters will need 10 XP to advance to level 2, 20 XP to advance to level 3, etc. The method returns a tuple containing a Boolean that indicates whether the character is ready to level up and the amount of XP still needed. As it does not change the character's state, we do not need a call to `save_to_db`.\n\nNow that we're increasing the player's XP and checking whether they're ready to level up, we need a method to level them up. Add the following method:\n\n```python\n    def level_up(self, increase):\n        ready, _ = self.ready_to_level_up()\n        if not ready:\n            return (False, self.level) # (not leveled up, current level)\n\n        self.level += 1 # increase level\n        setattr(self, increase, getattr(self, increase)+1) # increase chosen stat\n\n        self.hp = self.max_hp #refill HP\n\n        # Save to DB after state change\n        self.save_to_db()\n\n        return (True, self.level) # (leveled up, new level)\n```","metadata":{"id":1136}}],["1137",{"pageContent":"self.hp = self.max_hp #refill HP\n\n        # Save to DB after state change\n        self.save_to_db()\n\n        return (True, self.level) # (leveled up, new level)\n```\n\nAfter ensuring that the player is ready to level up, we increase their level and use Python built-ins [`setattr`](https://docs.python.org/3/library/functions.html#setattr) and [`getattr`](https://docs.python.org/3/library/functions.html#getattr) to increment one of the character's stats. We reset their HP to the max value, save the state, and finally return the outcome of the action (a tuple indicating whether leveling up succeeded and what the character's new level is).\n\nThe last method we need is `die()`, which will be called when a character is defeated in battle. We could handle player death in a few different ways, but for the sake of simplicity, we'll just delete the character from the database.\n\n```python\n    def die(self, player_id):\n        if self.user_id in db[\"characters\"].keys():\n            del db[\"characters\"][self.user_id]\n```\n\nThat's a wrap for our game's logic. Next, we'll integrate with Discord and make our game playable.\n\n## Creating a Discord application\n\nDiscord will serve as the display layer for our game, allowing players to issue commands and see the results of those commands.\n\nOpen another browser tab and visit the [Discord Developer Portal](http://discordapp.com/developers/applications). Log in with your Discord account, or create one if you haven't already. Keep your repl open – we'll return to it soon.\n\nOnce you're logged in, create a new application. Give it a name like \"MyRPG\".\n\n![Discord create app](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/discord-create-app.png)\n\nDiscord applications can interact with Discord in several different ways, not all of which require bots, so creating one is optional. That said, we'll need one for this project. Let's create a bot.\n\n1. Click on **Bot** in the menu on the left-hand side of the page.\n2. Click **Add Bot**.","metadata":{"id":1137}}],["1138",{"pageContent":"1. Click on **Bot** in the menu on the left-hand side of the page.\n2. Click **Add Bot**.\n3. Give your bot a username (such as \"RPGBot\").\n4. Click **Reset Token** and then **Yes, do it!**.\n5. Copy the token that appears just under your bot's username.\n\n![Discord create bot](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/discord-create-bot.png)\n\nThe token you just copied is required for the code in our repl to interface with Discord's API. Return to your repl and open the Secrets tab in the left sidebar. Create a new secret with `DISCORD_TOKEN` as its key and the token you copied as its value.\n\n![Secret token](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/secret-token.png)\n\nOnce you've done that, return to the Discord developer panel. We need to finish setting up our bot.\n\nYou can leave the **Public Bot** option enabled or disable it, depending on whether you'd like other people to be able to find and install your bot on their server. Keep in mind that bots on 100 or more servers have to go through a special verification and approval process.\n\n![Public Bot option](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/public-bot.png)\n\nNext, we need to configure access to privileged [Gateway Intents](https://discord.com/developers/docs/topics/gateway#gateway-intents). Depending on a bot's functionality, it will require access to different events and sources of data. Events involving users' actions and the content of their messages are considered more sensitive and need to be explicitly enabled.\n\nFor this bot to work, we'll need the **Message Content Intent**, which will allow our bot to see the content of users' messages. Toggle it to the on position and save changes when prompted.\n\n![Bot intents](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/bot-intents.png)","metadata":{"id":1138}}],["1139",{"pageContent":"![Bot intents](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/bot-intents.png)\n\nNow that we've created our application and its bot, we need to add it to a server. We'll walk you through creating a test server for this tutorial, but you can also use any server you've created in the past, as long as the other members won't get too annoyed about it becoming a bot testing ground. You can't use a server that you're just a normal user on, as adding bots requires special privileges.\n\nOpen [Discord](http://discord.com) in your browser. You should already be logged in. Then click on the **+** icon in the leftmost panel to create a new server. Alternatively, open an existing server you own.\n\nIn a separate tab, return to the [Discord Dev Portal](https://discord.com/developers/applications) and open your application. Then follow these steps to add your bot to your server:\n\n1. Click on **OAuth2** in the left sidebar.\n2. In the menu that appears under **OAuth2**, select **URL Generator**.\n3. Under **Scopes**, mark the checkbox labelled _bot_.\n4. Under **Bot Permissions**, mark the checkboxes labelled _Read Messages/View Channels_ and _Send Messages_.\n   ![Bot permissions](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/bot-permissions.png)\n\n5. Scroll down and copy the URL under **Generated URL**.\n6. Paste the URL in your browser's navigation bar and hit enter.\n7. On the page that appears, select your server from the drop-down box and click **Continue**.\n8. When prompted about permissions, click **Authorize**, and complete the CAPTCHA.\n   ![Bot connect](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/bot-connect.png)\n\n9. Return to your Discord server. You should see that your bot has just joined.\n\nNow that we've done the preparatory work, it's time to write some code. Return to your repl for the next section.\n\n## Writing the Discord bot code","metadata":{"id":1139}}],["1140",{"pageContent":"Now that we've done the preparatory work, it's time to write some code. Return to your repl for the next section.\n\n## Writing the Discord bot code\n\nWe'll be using [discord.py](https://discordpy.readthedocs.io/en/stable/) to interface with Discord's API using Python. Open `main.py` in your repl and add the following code:\n\n```python\nimport os, discord\nfrom discord.ext import commands\n\nfrom replit import db\nfrom game import *\n\nDISCORD_TOKEN = os.getenv(\"DISCORD_TOKEN\")\n\nbot = commands.Bot(command_prefix=\"!\")\n\n@bot.event\nasync def on_ready():\n    print(f\"{bot.user} has connected to Discord!\")\n\nbot.run(DISCORD_TOKEN)\n```\n\nFirst, we import the Python libraries we'll need, including discord.py and its [commands extension](https://discordpy.readthedocs.io/en/stable/ext/commands/commands.html), as well as our database and the contents of `game.py`.\n\nWe then retrieve the value of the `DISCORD_TOKEN` environment variable, which we set in our repl's Secrets tab above. Following that, we instantiate a [`Bot` object](https://discordpy.readthedocs.io/en/stable/ext/commands/api.html#discord.ext.commands.Bot). We'll use this object to listen for Discord events and respond to them. For the most part, we'll be responding to _commands_: messages from users which start with `!` (the `command_prefix` we specified when creating our `Bot` object).\n\nHowever, the first event we're interested in is not a command. The [`on_ready()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.on_ready) event will trigger when our bot logs onto Discord (the `@bot.event` [decorator](https://realpython.com/primer-on-python-decorators/) ensures this). All this event will do is print a message to our repl's console, telling us that the bot has connected.","metadata":{"id":1140}}],["1141",{"pageContent":"Note that we've prepended `async` to the function definition – this makes our `on_ready()` function into a [coroutine](https://docs.python.org/3/library/asyncio-task.html). Coroutines are largely similar to functions, but may not execute immediately, and must be invoked with the `await` keyword. Using coroutines makes our program [asynchronous](https://realpython.com/async-io-python/#the-10000-foot-view-of-async-io), which means it can continue executing code while waiting for the results of a long-running function, usually one that depends on input or output. If you've used JavaScript before, you'll recognize this style of programming.\n\nThe final line in our file starts the bot, providing `DISCORD_TOKEN` to authenticate it. Run your repl now to see it in action. Once it's started, return to your Discord server. You should see that your bot user is now online.\n\n![Online bot](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/online-bot.png)\n\n## Handling user commands\n\nNow we can start writing the handlers for our game's actions, such as `!create`, `!hunt`, and `!fight`.\n\nThe discord.py commands extension allows us to define command handlers using the `@bot.command` decorator. Without this, we'd have to manually parse the content of all user messages to determine whether a command has been issued, as was necessary for our [role assignment bot tutorial](/tutorials/python/discord-role-bot).\n\n### Character creation\n\nFirst, we'll implement our character creation command, `!create`. Add the following code to `main.py` below the definition of `on_ready()`:\n\n```python\n# Commands\n@bot.command(name=\"create\", help=\"Create a character.\")\nasync def create(ctx, name=None):\n    user_id = ctx.message.author.id\n\n    # if no name is specified, use the creator's nickname\n    if not name:\n        name = ctx.message.author.name\n\n```","metadata":{"id":1141}}],["1142",{"pageContent":"async def create(ctx, name=None):\n    user_id = ctx.message.author.id\n\n    # if no name is specified, use the creator's nickname\n    if not name:\n        name = ctx.message.author.name\n\n```\n\nThe `@bot.command` decorator will ensure that our function is invoked when a user types a message starting with `!create`. We also use it to define some help text – the commands extension provides a default `!help` command, and each command we define can have two types of explanatory text:\n\n- `brief`: A short description of the command that will show alongside other defined commands when the user types `!help`.\n- `help`: A longer description of the command that will show when the user types `!help name_of_command`.\n\nIn the absence of `brief`, the `help` text will be used in both cases, though it may be truncated for the output of `!help`.\n\nOur `create` function takes two parameters:\n\n- `ctx`: This is the _invocation context_, a special object containing information such as the user who called the command, the server it was called in, and the files attached to the calling message if any. All commands must take this parameter.\n- `name`: This will be the name for the character we're creating and is an optional parameter.\n\nThe function body retrieves the Discord user ID of the user who issued the `!create` command. It then checks whether a `name` parameter was provided. If not, it sets `name` to the name of the user.\n\nNext, we'll create an instance of `Character` with some starter stats and save it to our repl's database. Add the following code to the body of `create`:\n\n```python\n    # create characters dictionary if it does not exist\n    if \"characters\" not in db.keys():\n        db[\"characters\"] = {}\n\n    # only create a new character if the user does not already have one\n    if user_id not in db[\"characters\"] or not db[\"characters\"][user_id]:\n        character = Character(**{\n            \"name\": name,\n            \"hp\": 16,\n            \"max_hp\": 16,\n            \"attack\": 2,\n            \"defense\": 1,","metadata":{"id":1142}}],["1143",{"pageContent":"character = Character(**{\n            \"name\": name,\n            \"hp\": 16,\n            \"max_hp\": 16,\n            \"attack\": 2,\n            \"defense\": 1,\n            \"mana\": 0,\n            \"level\": 1,\n            \"xp\": 0,\n            \"gold\": 0,\n            \"inventory\": [],\n            \"mode\": GameMode.ADVENTURE,\n            \"battling\": None,\n            \"user_id\": user_id\n        })\n        character.save_to_db()\n        await ctx.message.reply(f\"New level 1 character created: {name}. Enter `!status` to see your stats.\")\n    else:\n        await ctx.message.reply(\"You have already created your character.\")\n```\n\nAfter creating and saving a new character, or failing to do so, this code sends a [reply](https://support.discord.com/hc/en-us/articles/360057382374-Replies-FAQ) to the message that invoked it. As our game logic primarily resides in the `game.py` file, constructing these commands will largely be a matter of constructing and sending replies informing the player of what's happened in the game world.\n\n### Character status\n\nNext, we'll implement the `!status` command, which players will use to view their character's current statistics, inventory, and game mode. To convey this information compactly and attractively, we'll use an [embed](https://python.plainenglish.io/send-an-embed-with-a-discord-bot-in-python-61d34c711046) rather than a plain Discord message.\n\nEmbeds are usually used to provide link previews, but can also be constructed from scratch, providing a powerful tool for bots to display richly formatted information of any kind. This is what our embed will look like:\n\n![Status embed](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/status-embed.png)\n\nAdd the following function below the definition `create()`:\n\n```python\n@bot.command(name=\"status\", help=\"Get information about your character.\")\nasync def status(ctx):\n    character = load_character(ctx.message.author.id)\n\n    embed = status_embed(ctx, character)\n    await ctx.message.reply(embed=embed)\n```","metadata":{"id":1143}}],["1144",{"pageContent":"async def status(ctx):\n    character = load_character(ctx.message.author.id)\n\n    embed = status_embed(ctx, character)\n    await ctx.message.reply(embed=embed)\n```\n\nThis function retrieves the player's character from the database, passes it and the current context to a function that will construct and return an embed, and then replies with the embed. We'll implement the two methods we've used just above the definition of `on_ready()`. Go there now.\n\nFirst, `load_character()`, which reads from the database and creates an instance of `Character` using the results:\n\n```python\n# Helper functions\ndef load_character(user_id):\n    return Character(**db[\"characters\"][str(user_id)])\n```\n\nSecond, `status_embed()`:\n\n```python\nMODE_COLOR = {\n    GameMode.BATTLE: 0xDC143C,\n    GameMode.ADVENTURE: 0x005EB8,\n}\ndef status_embed(ctx, character):\n\n    # Current mode\n    if character.mode == GameMode.BATTLE:\n        mode_text = f\"Currently battling a {character.battling.name}.\"\n    elif character.mode == GameMode.ADVENTURE:\n        mode_text = \"Currently adventuring.\"\n\n    # Create embed with description as current mode\n    embed = discord.Embed(title=f\"{character.name} status\", description=mode_text, color=MODE_COLOR[character.mode])\n    embed.set_author(name=ctx.author.display_name, icon_url=ctx.author.avatar_url)\n```\n\nJust above the function definition, we've created a dictionary that maps game modes to colors. We'll use this to change the color of the vertical bar on the left side of the embed.\n\nIn the function itself, we first check the game mode. This will determine the embed's description text, a paragraph that appears just below the embed's title. Once that's done, we create the embed with [`discord.Embed`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Embed), setting the title, description, and color. We then use [`set_author()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Embed.set_author) to include the calling user's name and profile picture at the top of the embed.","metadata":{"id":1144}}],["1145",{"pageContent":"Next, we will construct the embed's [`fields`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Embed.fields). You can think of these as individual text boxes, which will be displayed below the description. We'll start with a stats field:\n\n```python\n    # Stats field\n    _, xp_needed = character.ready_to_level_up()\n\n    embed.add_field(name=\"Stats\", value=f\"\"\"\n**HP:**    {character.hp}/{character.max_hp}\n**ATTACK:**   {character.attack}\n**DEFENSE:**   {character.defense}\n**MANA:**  {character.mana}\n**LEVEL:** {character.level}\n**XP:**    {character.xp}/{character.xp+xp_needed}\n    \"\"\", inline=True)\n```\n\nWe've used [`add_field()`](https://discordpy.readthedocs.io/en/stable/api.html#discord.Embed.add_field) to create a field with the title \"Stats\" that contains a listing of all the player's important stats. Note the call to `character.ready_to_level_up()`, so that we can show the player how much XP they need to advance to the next level. We've also set `inline=True`, which allows us to display fields as columns.\n\nOur next column will show the player's inventory:\n\n```python\n    # Inventory field\n    inventory_text = f\"Gold: {character.gold}\\n\"\n    if character.inventory:\n        inventory_text += \"\\n\".join(character.inventory)\n\n    embed.add_field(name=\"Inventory\", value=inventory_text, inline=True)\n```\n\nThere's currently no logic in our game to put items into characters' inventories, but you should see characters' gold increase as they defeat enemies.\n\nFinally, we'll return the embed.\n\n```python\n    return embed\n```\n\nRun your repl now, and then switch tabs to your Discord server. Create a character with `!create` and view its status with `!status`.\n\n![Create character](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/create-character.png)\n\n### Battles\n\nNext, let's implement our battle commands, starting with `!hunt`. Add the following function definition below the body of `status()`:\n\n```python\n@bot.command(name=\"hunt\", help=\"Look for an enemy to fight.\")\nasync def hunt(ctx):","metadata":{"id":1145}}],["1146",{"pageContent":"```python\n@bot.command(name=\"hunt\", help=\"Look for an enemy to fight.\")\nasync def hunt(ctx):\n    character = load_character(ctx.message.author.id)\n\n    if character.mode != GameMode.ADVENTURE:\n        await ctx.message.reply(\"Can only call this command outside of battle!\")\n        return\n\n    enemy = character.hunt()\n\n    # Send reply\n    await ctx.message.reply(f\"You encounter a {enemy.name}. Do you `!fight` or `!flee`?\")\n```\n\nThis function is fairly simple: We load the character, ensure they're not currently in a battle, call `hunt()` to generate a random enemy, and reply to the player with a message about what they're fighting and which commands they can use.\n\nNext, we'll implement `!fight`:\n\n```python\n@bot.command(name=\"fight\", help=\"Fight the current enemy.\")\nasync def fight(ctx):\n    character = load_character(ctx.message.author.id)\n\n    if character.mode != GameMode.BATTLE:\n        await ctx.message.reply(\"Can only call this command in battle!\")\n        return\n\n    # Simulate battle\n    enemy = character.battling\n\n    # Character attacks\n    damage, killed = character.fight(enemy)\n    if damage:\n        await ctx.message.reply(f\"{character.name} attacks {enemy.name}, dealing {damage} damage!\")\n    else:\n        await ctx.message.reply(f\"{character.name} swings at {enemy.name}, but misses!\")\n```\n\nHere we load the character, ensure they're currently in battle mode, and then have them fight the enemy, returning a message about the damage inflicted. We also account for the small chance that they will inflict no damage.\n\nNext, we need to check if the enemy was killed by the attack. Add the following code to the bottom of the function:\n\n```python\n    # End battle in victory if enemy killed\n    if killed:\n        xp, gold, ready_to_level_up = character.defeat(enemy)\n\n        await ctx.message.reply(f\"{character.name} vanquished the {enemy.name}, earning {xp} XP and {gold} GOLD. HP: {character.hp}/{character.max_hp}.\")\n\n        if ready_to_level_up:","metadata":{"id":1146}}],["1147",{"pageContent":"await ctx.message.reply(f\"{character.name} vanquished the {enemy.name}, earning {xp} XP and {gold} GOLD. HP: {character.hp}/{character.max_hp}.\")\n\n        if ready_to_level_up:\n            await ctx.message.reply(f\"{character.name} has earned enough XP to advance to level {character.level+1}. Enter `!levelup` with the stat (HP, ATTACK, DEFENSE) you would like to increase. e.g. `!levelup hp` or `!levelup attack`.\")\n\n        return\n```\n\nHere we call `character.defeat()` to handle the enemy's death and return appropriate replies. Again, we've already written all the game logic, so all this code needs to do is display it to the player. Once we've sent the reply, we return from the function.\n\nAfter the player character attacks, we need to have the enemy fight back. Add the following code below the `if killed` block:\n\n```python\n    # Enemy attacks\n    damage, killed = enemy.fight(character)\n    if damage:\n        await ctx.message.reply(f\"{enemy.name} attacks {character.name}, dealing {damage} damage!\")\n    else:\n        await ctx.message.reply(f\"{enemy.name} tries to attack {character.name}, but misses!\")\n\n    character.save_to_db() #enemy.fight() does not save automatically\n```\n\nThis is almost identical to the player's attack code, but with `enemy.fight(character)` instead of `character.fight(enemy)`. But because `enemy.fight()` does not save to the database after changing the game state, we must do this manually.\n\nNext, we need some code to check whether the player character was killed in the attack. Add the following lines to your function:\n\n```python\n    # End battle in death if character killed\n    if killed:\n        character.die()\n\n        await ctx.message.reply(f\"{character.name} was defeated by a {enemy.name} and is no more. Rest in peace, brave adventurer.\")\n        return\n```\n\nHere we delete the character from the database, send a message of condolences, and return from the function.","metadata":{"id":1147}}],["1148",{"pageContent":"return\n```\n\nHere we delete the character from the database, send a message of condolences, and return from the function.\n\nThe last case we need to handle is the most common one, where neither the player nor their enemy has died. We'll deal with this by sending a final message to close out this round of fighting.\n\n```python\n    # No deaths, battle continues\n    await ctx.message.reply(f\"The battle rages on! Do you `!fight` or `!flee`?\")\n```\n\nThat's it for `!fight` – now we need `!flee`! Add the following function below the one you just finished:\n\n```python\n@bot.command(name=\"flee\", help=\"Flee the current enemy.\")\nasync def flee(ctx):\n    character = load_character(ctx.message.author.id)\n\n    if character.mode != GameMode.BATTLE:\n        await ctx.message.reply(\"Can only call this command in battle!\")\n        return\n\n    enemy = character.battling\n    damage, killed = character.flee(enemy)\n\n    if killed:\n        character.die()\n        await ctx.message.reply(f\"{character.name} was killed fleeing the {enemy.name}, and is no more. Rest in peace, brave adventurer.\")\n    elif damage:\n        await ctx.message.reply(f\"{character.name} flees the {enemy.name}, taking {damage} damage. HP: {character.hp}/{character.max_hp}\")\n    else:\n        await ctx.message.reply(f\"{character.name} flees the {enemy.name} with their life but not their dignity intact. HP: {character.hp}/{character.max_hp}\")\n```\n\nOnce again, this function loads the character, checks that the game mode is appropriate for the invoked command, and then invokes the appropriate method in `Character`. We finish off the function by providing for three possible outcomes of an attempt to flee: the character dies, the character flees taking damage, and the character flees unscathed.\n\nRerun your repl and try hunting, fighting, and fleeing.\n\n![Hunt and fight](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/hunt-and-fight.png)\n\n### Leveling up","metadata":{"id":1148}}],["1149",{"pageContent":"Rerun your repl and try hunting, fighting, and fleeing.\n\n![Hunt and fight](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/hunt-and-fight.png)\n\n### Leveling up\n\nNext, we need to implement `!levelup`. Add the following code below the definition of `!flee`:\n\n```python\n@bot.command(name=\"levelup\", help=\"Advance to the next level. Specify a stat to increase (HP, ATTACK, DEFENSE).\")\nasync def levelup(ctx, increase):\n    character = load_character(ctx.message.author.id)\n\n    if character.mode != GameMode.ADVENTURE:\n        await ctx.message.reply(\"Can only call this command outside of battle!\")\n        return\n\n    ready, xp_needed = character.ready_to_level_up()\n    if not ready:\n        await ctx.message.reply(f\"You need another {xp_needed} to advance to level {character.level+1}\")\n        return\n\n    if not increase:\n        await ctx.message.reply(\"Please specify a stat to increase (HP, ATTACK, DEFENSE)\")\n        return\n```\n\nThis function takes `increase`, which will be a string containing the stat to increase. After our standard character load and mode check, we do some error handling. First, we reject the command if the character does not have enough XP to level up, and then we reject the command if the player has not specified a stat to increase.\n\nNext, we need to parse the value of `increase`. Add the following code to your function:\n\n```python\n    increase = increase.lower()\n    if increase == \"hp\" or increase == \"hitpoints\" or increase == \"max_hp\" or increase == \"maxhp\":\n        increase = \"max_hp\"\n    elif increase == \"attack\" or increase == \"att\":\n        increase = \"attack\"\n    elif increase == \"defense\" or increase == \"def\" or increase == \"defence\":\n        increase = \"defense\"\n```\n\nWe're allowing players to increase their characters' HP, attack, or defense stats only. To make our game as user-friendly as possible, we accept a few different words for each of those stats.\n\nFinally, we call the character's `level_up()` method and report on its results:\n\n```python","metadata":{"id":1149}}],["1150",{"pageContent":"Finally, we call the character's `level_up()` method and report on its results:\n\n```python\n    success, new_level = character.level_up(increase)\n    if success:\n        await ctx.message.reply(f\"{character.name} advanced to level {new_level}, gaining 1 {increase.upper().replace('_', ' ')}.\")\n    else:\n        await ctx.message.reply(f\"{character.name} failed to level up.\")\n```\n\nRerun your repl and test this out. If you'd prefer to avoid grinding, edit your character creation code temporarily to increase the initial amount of XP.\n\n![Level up](https://replit-docs-images.bardia.repl.co/images/tutorials/discord-rpg-bot/levelup.png)\n\n### Character death\n\nThere's one more command in our design specification that we have not yet implemented: `!die`. Players will use this command if they want to start the game over with a new character. Add the following code to define it:\n\n```python\n@bot.command(name=\"die\", help=\"Destroy current character.\")\nasync def die(ctx):\n    character = load_character(ctx.message.author.id)\n\n    character.die()\n\n    await ctx.message.reply(f\"Character {character.name} is no more. Create a new one with `!create`.\")\n```\n\n### Character reset\n\nBefore we finish up, we're going to implement one last, special command: `!reset`. This command will delete a player's character and then immediately create a new character. Unlike the commands above, this will be a testing command, for use by the developer rather than players. Add the following code below the definition of `die()`:\n\n```python\n@bot.command(name=\"reset\", help=\"[DEV] Destroy and recreate current character.\")\nasync def reset(ctx):\n    user_id = str(ctx.message.author.id)\n\n    if user_id in db[\"characters\"].keys():\n        del db[\"characters\"][user_id]\n\n    await ctx.message.reply(f\"Character deleted.\")\n    await create(ctx)\n```","metadata":{"id":1150}}],["1151",{"pageContent":"user_id = str(ctx.message.author.id)\n\n    if user_id in db[\"characters\"].keys():\n        del db[\"characters\"][user_id]\n\n    await ctx.message.reply(f\"Character deleted.\")\n    await create(ctx)\n```\n\nUnlike in `die()`, we're deleting from the database directly rather than using `character.die()` method. This is useful because further development of the game might cause errors in `Character.__init__()`, rendering the `die()` method temporarily unusable.\n\n## Where next?\n\nWe've created a text-based RPG that can be played on a Discord server, but our game is pretty barebones. We could expand it in a few different ways:\n\n- Implement a magic system using the `mana` attribute.\n- Implement an economy in which characters can buy and sell items, such as health potions.\n- Flesh out the battle system, with multiple attack types, multiple enemies per battle, and the ability to use items that weaken enemies or temporarily strengthen characters.\n- Create a game world with different areas the player can travel to, containing different enemies.\n- Implement NPCs the player can talk to and receive quests from.\n- Enable player versus player combat.\n\nDiscord bot code can be hosted on Replit permanently, but you'll need to use a [Deployments](/hosting/deployments/about-deployments) repl to keep it running 24/7.\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/DiscordRPG?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1151}}],["1152",{"pageContent":"# Building an internal organization tool\n\nWhether you're a small startup without a dedicated internal tools team, or a team within a large company that struggles to get time from engineering, it's often useful to be able to whip up quick-and-dirty internal tools like dashboards, report generators, CRMs, or whatever else you need.\n\nHosting internal teams on Replit means that you can iterate as quickly as you need to. No more waiting to fit in with a sprint cycle, getting through QA, or getting delayed because of other teams' work. You edit code directly in production, so your changes are instantly deployed.\n\nIn this guide, we'll show you how to build a basic CRUD application using Flask and Pico.CSS (internal tools are often ugly, but they shouldn't be). Our template application will let you:\n\n- Put content behind an authentication wall. Only your team will be able to see it, and they'll be able to log in with their existing Replit account.\n- Create, read, update, and delete from a database. We'll build a simple task-tracking application, but you can adapt it to whatever you need.\n- Deploy it to a production environment directly from your editor and make it run 24/7.\n\nThe final application will look like this.\n\n![shared task demo](https://docimg.replit.com/images/teamsPro/internal-tools-flask-sqlite/shared-task-demo.png)\n\n## Building the Python backend\n\nOur Python backend will be a basic Flask web server. We'll have a single object (`Task`), and add functions to add new tasks, delete existing ones, or update them.\n\nCreate a new Python repl by visiting [https://repl.new/python](https://repl.new/python) and ensure that it belongs to your Teams Pro account. We'll set up access so only other members of your team can view the contents of the application.\n\n### Adding some CRUD and helper functions\n\nNearly all applications need to do four things. Create, Read, Update, and Delete data, or CRUD for short.","metadata":{"id":1152}}],["1153",{"pageContent":"### Adding some CRUD and helper functions\n\nNearly all applications need to do four things. Create, Read, Update, and Delete data, or CRUD for short.\n\nIn the `main.py` file, add the following code that initialises the Flask application, defines a `Task` object, and lets us perform CRUD operations on it.\n\n```python\nimport os\nfrom datetime import datetime\n\nfrom flask import Flask, request, render_template, redirect\nfrom flask_sqlalchemy import SQLAlchemy\n\nauthorized_teams = set([os.getenv(\"REPL_OWNER\")])\n\napp = Flask(__name__)\napp.static_folder = 'static'\n\nproject_dir = os.path.dirname(os.path.abspath(__file__))\n\ndatabase_file = \"sqlite:///{}\".format(os.path.join(project_dir, \"todo.db\"))\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_file\ndb = SQLAlchemy(app)\n\nclass Task(db.Model):\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    text = db.Column(db.Text)\n    done = db.Column(db.Boolean)\n    dateAdded = db.Column(db.DateTime, default=datetime.now())\n\ndef create_task(text):\n    task = Task(text=text)\n    db.session.add(task)\n    db.session.commit()\n    db.session.refresh(task)\n\ndef read_tasks():\n    return db.session.query(Task).all()\n\ndef update_task(task_id, text, done):\n    db.session.query(Task).filter_by(id=task_id).update({\n        \"text\": text,\n        \"done\": True if done == \"on\" else False\n    })\n    db.session.commit()\n\ndef delete_task(task_id):\n    db.session.query(Task).filter_by(id=task_id).delete()\n    db.session.commit()\n\ndef check_team_authorized(replit_user_teams, authorized_teams):\n    teams = set(replit_user_teams.split(\",\"))\n    user_authorized_teams = teams.intersection(authorized_teams)\n    return len(user_authorized_teams) > 0\n```","metadata":{"id":1153}}],["1154",{"pageContent":"teams = set(replit_user_teams.split(\",\"))\n    user_authorized_teams = teams.intersection(authorized_teams)\n    return len(user_authorized_teams) > 0\n```\n\nNote the line `authorized_teams = set([os.getenv(\"REPL_OWNER\")])` which gets the repl owner (that is, the team username that the repl belongs to). The `check_team_authorized` function compares all the teams that a user belongs to with this \"authorized teams\" list and only lets them in if there's a match, so you can also hardcode other teams in here if you need others to access your app.\n\n### Adding routes to our application\n\nWe want our users to be able to interact with different routes of our application.\n\n- `/`: the main page of our application will show the tasks and let users edit them or add new ones.\n- `/login`: if a user is not logged in, they'll be redirect to a \"Log in with Replit\" page.\n- `/edit/<taskid>`: users won't visit this direclty, but the app will post edit requests from the main page here.\n- `/delete/<taskid>`: similar to the above, if the user deletes a task, the request will be forwarded to this route.\n\nAdd the following code to the end of your `main.py` file:\n\n```python\n@app.route(\"/edit/<task_id>\", methods=[\"POST\"])\ndef edit_task(task_id):\n    update_task(task_id, text=request.form['text'], done=request.form['done'])\n    return redirect(\"/\")\n\n@app.route(\"/delete/<task_id>\", methods=['POST'])\ndef remove_task(task_id):\n    delete_task(task_id)\n    return redirect(\"/\")\n\n@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    user_id = request.headers['X-Replit-User-Id']\n    if user_id:\n        return redirect(\"/\")\n    return render_template(\"login.html\")\n\n@app.route(\"/\",  methods=[\"GET\", \"POST\"])\ndef index():\n    user_id=request.headers['X-Replit-User-Id']\n    if not user_id:\n        return redirect(\"/login\")\n\n    teams_header = request.headers['X-Replit-User-Teams']\n    user_in_team = check_team_authorized(teams_header, authorized_teams)\n    if not user_in_team:\n        return render_template(\"unauthorized.html\")","metadata":{"id":1154}}],["1155",{"pageContent":"user_in_team = check_team_authorized(teams_header, authorized_teams)\n    if not user_in_team:\n        return render_template(\"unauthorized.html\")\n    if request.method == \"POST\":\n        create_task(request.form['text'])\n    return render_template(\"index.html\",tasks=read_tasks(),\n                       user_id=request.headers['X-Replit-User-Id'],\n                       user_name=request.headers['X-Replit-User-Name'],\n                       user_roles=request.headers['X-Replit-User-Roles'])\n\nif __name__ == \"__main__\":\n    db.create_all()\n    app.run(host='0.0.0.0', debug=True)\n```\n\nThese routes call the matching CRUD functions we wrote earlier, passing in the data from the user where relevant. Note that we use the `X-Replit-User-ID` header to validate that the user is logged into Replit, and the `X-Replit-User-Teams` header to check which teams they belong to.\n\n### Adding the frontend\n\nWe'll have three pages in our application:\n\n- `index.html`: the main page that shows existing tasks and allows the user to interact with tasks.\n- `login.html`: a page to show the \"Log in with Replit\" button.\n- `unauthorized.html`: we'll show this to any user who is not part of our team but has logged in with a valid Replit account.\n\nCreate all three of these files in a folder named exactly `templates`. Flask looks in this folder specifically whenever you call the `render_template` function, so don't call it something else.\n\nIn the `index.html` file, add the following code:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/@picocss/pico@latest/css/pico.min.css\"\n    />\n    <link rel=\"stylesheet\" href=\"/static/style.css\" />\n    <script type=\"text/javascript\">\n      function redirect(link) {\n        window.location.href = link;\n      }\n    </script>\n    <title>todo app</title>\n  </head>\n  <body>\n    <header>Shared Task Tracking</header>\n\n    <main class=\"container\">","metadata":{"id":1155}}],["1156",{"pageContent":"function redirect(link) {\n        window.location.href = link;\n      }\n    </script>\n    <title>todo app</title>\n  </head>\n  <body>\n    <header>Shared Task Tracking</header>\n\n    <main class=\"container\">\n      <h1>Our tasks</h1>\n      <p>\n        Add tasks below. Your team can add new tasks, or edit or delete existing\n        ones. You all see the same tasks.\n      </p>\n      <form method=\"POST\" action=\"/\">\n        <div>\n          <input\n            type=\"text\"\n            name=\"text\"\n            class=\"form-control\"\n            placeholder=\"Add a new TODO item\"\n          />\n          <div>\n            <button type=\"submit\" value=\"update\">Create new</button>\n          </div>\n        </div>\n      </form>\n\n      <h2>Task List</h2>\n      {% for task in tasks %}\n\n      <form method=\"POST\" action=\"/edit/{{task.id}}\">\n        <div class=\"task\">\n          <div class=\"task-input\">\n            <input\n              type=\"text\"\n              title=\"{{task.dateAdded}}\"\n              value=\"{{task.text}}\"\n              name=\"text\"\n            />\n          </div>\n          <div class=\"update-btn\">\n            <button type=\"submit\" value=\"update\">Update</button>\n          </div>\n\n          <div class=\"update-btn\">\n            <button type=\"submit\" formaction=\"/delete/{{task.id}}\">x</button>\n          </div>\n        </div>\n      </form>\n\n      {% endfor %}\n    </main>\n  </body>\n</html>\n```\n\nNote how Flask uses Jinja templates, which lets us mix some Python-like functionality into our frontend, using tags such as `{% for task in tasks %}`. Our main loop goes through all the existing tasks and displays them. It adds update and delete buttons referencing each `task.id` so that these can be passed to the backend and our server-side code can perform the necessary operations on our database.\n\nIn `login.html` add:\n\n```html\n<!doctype html>\n<html lang=\"en\" >\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">","metadata":{"id":1156}}],["1157",{"pageContent":"In `login.html` add:\n\n```html\n<!doctype html>\n<html lang=\"en\" >\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/@picocss/pico@latest/css/pico.min.css\">\n     <link rel=\"stylesheet\" href=\"/static/style.css\">\n        <script  type = \"text/javascript\">\n      function redirect(link) {\n        window.location.href = link;\n     }\n    </script>\n    <title>shared tasks app</title>\n  </head>\n  <body>\n      \t<h1>Hello! Please log in.</h1>\n        <div>\n          <script authed=\"location.reload()\" src=\"https://auth.turbio.repl.co/script.js\"></script>\n  \t    </div>\n      </main>\n  </body>\n</html>\n```\n\nAnd in `unauthorized.html` add:\n\n```html\n<h1>Unauthorized</h1>\n\n<p>You signed in, but you're not authorized to access this page</p>\n```\n\nNote how we pull in the pico.css CSS framework in our template files. This means that the application already looks better than using plain HTML, but we'll add few lines of custom CSS to tweak the look a bit further.\n\nCreate a new folder called `static` and add a file inside it called `style.css`.\n\nAdd the following code to this new file:\n\n```css\n@media only screen and (prefers-color-scheme: dark) {\n  :root:not([data-theme=\"light\"]) {\n    --primary: #ffb300;\n    --primary-hover: #ffc107;\n    --primary-focus: rgba(255, 179, 0, 0.25);\n    --primary-inverse: rgba(0, 0, 0, 0.75);\n  }\n}\n\nheader {\n  color: white;\n  text-align: center;\n  font-size: 50px;\n  font-weight: bold;\n  text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0\n      #000;\n  background: #ffb300;\n}\n.task {\n  display: inline-flex;\n  padding: 10px;\n}\n\n.update-btn {\n  padding-left: 5px;\n}\n\n.task-input {\n  width: 600px;\n  display: inline-flex;\n}\n```\n\nThis will put the controls all on the same line as each task, and make the header bigger.\n\n## Finishing touches","metadata":{"id":1157}}],["1158",{"pageContent":"}\n\n.update-btn {\n  padding-left: 5px;\n}\n\n.task-input {\n  width: 600px;\n  display: inline-flex;\n}\n```\n\nThis will put the controls all on the same line as each task, and make the header bigger.\n\n## Finishing touches\n\nYour application should function at this point. Note that login with Replit doesn't always work as expected in a browser embedded in your IDE, so rather use the application in a dedicated tab.\n\nTo ensure that your team can always access your internal application, enable \"Always On\" mode by clicking on your repl's name and toggling the switch.\n\n![enable always on](https://docimg.replit.com/images/teamsPro/internal-tools-flask-sqlite/always-on.png)\n\n## Where next?\n\nNearly all applications are built on the four basic CRUD operations, so you can build any app you can imagine. If you hit the limits of Flask, you might also want to consider moving over to Django, a more \"batteries included\" web framework that comes with many additional features out the box.\n\nYou can find a repl with all of the code shown above at [https://replit.com/@ritza/internal-tools-flask-pico](https://replit.com/@ritza/internal-tools-flask-pico). Feel free to fork it over to your account and adapt it to your needs.","metadata":{"id":1158}}],["1159",{"pageContent":"---\ntitle: Paid content site with replit.web & Stripe\n---\n\n# Build a paid content site with `replit.web` and Stripe\n\nIn this tutorial, we'll combine `replit.web` and Stripe to build a digital content storefront. Anyone with a Replit account will be able to log into our website and purchase premium PDFs. Our site will also keep track of what each user has purchased, so they can build up a library.\n\nBy the end of this tutorial, you'll be able to:\n\n- Build a dynamic web application with `replit.web`.\n- Use [Stripe](https://stripe.com/) to sell digital content.\n\n![Paid content site functionality](https://docimg.replit.com/images/tutorials/29-paid-content-site/site-functionality.gif)\n\n## Getting started\n\nTo get started, create a Python repl.\n\n![Create python repl](https://docimg.replit.com/images/tutorials/29-paid-content-site/create-python-repl.png)\n\nOur application will have the following functionality:\n\n- Users can log in with their Replit accounts.\n- Users can purchase PDFs.\n- Users can view free PDFs and PDFs that they've previously purchased.\n- Administrators can upload new PDFs.\n\nWe've covered both `replit.web` and Stripe in previous tutorials, so some aspects of the following may be familiar if you've built [a brick shop](/tutorials/nodejs/online-store-checkout-process).\n\nWe'll start our app off with the following import statements in `main.py`:\n\n```python\nimport os, shutil\nimport stripe\nfrom flask import Flask, render_template, render_template_string, flash, redirect, url_for, request, jsonify\nfrom flask.helpers import send_from_directory\nfrom werkzeug.utils import secure_filename\nfrom replit import db, web\nfrom functools import wraps\n```\n\nHere we're importing most of what we'll need for our application:\n\n1. Python's `os` and `shutil` packages, which provide useful functions for working with files and directories.\n2. Stripe's Python library.\n3. Flask, our web framework and the heart of the application.\n4. A Flask helper function `send_from_directory`, which will allow us to send PDFs to users.","metadata":{"id":1159}}],["1160",{"pageContent":"2. Stripe's Python library.\n3. Flask, our web framework and the heart of the application.\n4. A Flask helper function `send_from_directory`, which will allow us to send PDFs to users.\n5. A function `secure_filename` from the Werkzeug WSGI (which Flask is built on) that we'll use when admins upload PDFs and other files.\n6. Replit's web framework and Replit DB integration, which we'll use for user authentication and persistent data storage.\n7. The `wraps` tool from Python's `functools`, which we'll use to make authorization decorators for restricting access to sensitive application functionality.\n\nNow that the imports are out of the way, let's start on our application scaffold. Add the following code to `main.py`:\n\n```python\napp = Flask(__name__,\n            static_folder='static',\n            static_url_path='')\n```\n\nThis code initializes our Flask application. We've added a `static_folder` and `static_url_path` so that we can serve static files directly from our repl's file pane without writing routing code for each file. This will be useful for things like images and stylesheets.\n\nAdd the following code to initialize your application's secret key:\n\n```python\n# Secret key\napp.config[\"SECRET_KEY\"] = os.environ[\"SECRET_KEY\"]\n```\n\nOur secret key will be a long, random string. You can generate one in your repl's Python console with the following two lines of code:\n\n```python\nimport random, string\n''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(20))\n```\n\n![Random string](https://docimg.replit.com/images/tutorials/29-paid-content-site/randomstring.png)\n\nRather than putting this value directly into our code, we'll retrieve it from an [environment variable](https://en.wikipedia.org/wiki/Environment_variable). This will keep it out of source control and is good practice for sensitive data.\n\nIn your repl's Secrets tab, add a new key named `SECRET_KEY` and enter the random string you just generated as its value.","metadata":{"id":1160}}],["1161",{"pageContent":"In your repl's Secrets tab, add a new key named `SECRET_KEY` and enter the random string you just generated as its value.\n\n![Repl secrets](https://docimg.replit.com/images/tutorials/29-paid-content-site/repl-secrets.png)\n\nOnce that's done, return to `main.py` and add the code below to initialize our Replit database:\n\n```python\n# Database setup\ndef db_init():\n    if \"content\" not in db.keys():\n        db[\"content\"] = {}\n\n    if \"orders\" not in db.keys():\n        db[\"orders\"] = {}\n\n    # Create directories\n    if not os.path.exists(\"static\"):\n        os.mkdir(\"static\")\n\n    if not os.path.exists(\"content\"):\n        os.mkdir(\"content\")\n\ndb_init()\n```\n\n[Replit's Database](/hosting/databases/replit-database) can be thought of and used as one big Python dictionary that we can access with `db`. Any values we store in `db` will persist between repl restarts.\n\nWe've written a function to initialize the database as we may want to do it again if we need to refresh our data during testing. Whenever we initialize our database, we will also create the `content` and `static` directories, which will contain user-uploaded files.\n\nNext we need to create our [UserStore](https://replit-py.readthedocs.io/en/latest/api.html) (a secondary database keyed by username), and list of admins:\n\n```python\nusers = web.UserStore()\n\nADMINS = [\"YOUR-REPLIT-USERNAME-HERE\"]\n```\n\nMake sure to replace the contents of the `ADMINS` list with your Replit username.\n\nFinally, let's make our root page. Add the following code, and then run your repl.\n\n```python\n# Main app\n@app.route(\"/\")\n@web.authenticated\ndef index():\n    return f\"Hello {web.auth.name}\"\n\nweb.run(app)\n```\n\nBecause we've added the `@web.authenticated` [function decorator](https://realpython.com/primer-on-python-decorators/) to our index page, it will only be available to logged-in users. You should see this now, as your app will show a login button. Click on that button, and authorize your application to use Replit authentication in the window that pops up.","metadata":{"id":1161}}],["1162",{"pageContent":"![Login button](https://docimg.replit.com/images/tutorials/29-paid-content-site/login-button.png)\n\nHaving done that, you should now see the greeting we implemented above. If you send your repl to a friend, they will also be able to log in and see their Replit username on the greeting message.\n\n## Content upload and other admin functionality\n\nBefore we do anything else with our site, we need to have some PDFs to sell. While we could manually upload our PDFs to our repl and write code to add each one to the database, it will make our site more user-friendly if we include an upload form for this purpose.\n\nThis upload form should only be accessible by admins, so we can enforce some level of quality control. We'll also create a route that allows admins to refresh the application database.\n\n### Access control\n\nAdd the following functions to `main.py`, just below the line where you've assigned `ADMINS`:\n\n```python\n# Helper functions\ndef is_admin(username):\n    return username in ADMINS\n\n# Auth decorators\ndef admin_only(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if not is_admin(web.auth.name):\n            flash(\"Permission denied.\", \"warning\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n```\n\nThe code in the second function may look a bit strange if you haven't written your own decorators before. Here's how it works: `admin_only` is the name of our decorator. You can think of decorators as functions that take other functions as arguments. (The two code snippets below are for illustration and not part of our program.) Therefore, if we write the following:\n\n```python\n@admin_only\ndef admin_function():\n    return f\"Hello admin\"\n\nadmin_function()\n```\n\nit will be roughly equivalent to:\n\n```python\ndef admin_function():\n    return f\"Hello admin\"\n\nadmin_only(admin_function)\n```","metadata":{"id":1162}}],["1163",{"pageContent":"@admin_only\ndef admin_function():\n    return f\"Hello admin\"\n\nadmin_function()\n```\n\nit will be roughly equivalent to:\n\n```python\ndef admin_function():\n    return f\"Hello admin\"\n\nadmin_only(admin_function)\n```\n\nSo whenever `admin_function` gets called, the code we've defined in `decorated_function` will execute before anything we define in `admin_function`. This means we don't have to include an `if not is_admin` check in every piece of admin functionality. As per the code, if a non-admin attempts to access restricted functionality, our app will [flash](https://flask.palletsprojects.com/en/2.0.x/patterns/flashing/) a warning message and redirect them to the home page.\n\nNow we can create the following admin routes below the definition of the `index` function:\n\n```python\n# Admin functionality\n@app.route('/admin/content-create', methods=[\"GET\", \"POST\"])\n@web.authenticated\n@admin_only\ndef content_create():\n    pass\n\n@app.route('/admin/db-flush')\n@web.authenticated\n@admin_only\ndef flush_db():\n    pass\n```\n\nNote that both of these functions are protected with the `@web.authenticated` and `@admin_only` decorators, restricting their use to logged-in admins.\n\nThe first function will let our admins create content, and the second will allow us to flush the database. While the second function will be useful during development, it's not something we'd want to use in a finished application, as our database will contain records of user payments.\n\n### Content creation form\n\nBefore we can fill in the code for content creation, we need to create the web form our admins will use. As the form creation code will include a lot of information and functionality and require several special imports, we're going to put it in its own file so we can keep a navigable codebase. In your repl's files pane, create `forms.py`.\n\n![Create forms.py file](https://docimg.replit.com/images/tutorials/29-paid-content-site/forms-py-in-file-pane.png)\n\nEnter the following `import` statements at the top of `forms.py`:\n\n```python\nfrom flask_wtf import FlaskForm","metadata":{"id":1163}}],["1164",{"pageContent":"Enter the following `import` statements at the top of `forms.py`:\n\n```python\nfrom flask_wtf import FlaskForm\nfrom flask_wtf.file import FileField, FileRequired, FileAllowed\nfrom wtforms import StringField, TextAreaField, SubmitField, FloatField, ValidationError\nfrom wtforms.validators import InputRequired, NumberRange, Length\nfrom replit import db\n```\n\nHere we're importing from [WTForms](https://wtforms.readthedocs.io/en/2.3.x/), an extensive library for building web forms, and [Flask WTF](https://flask-wtf.readthedocs.io/en/0.15.x/), a library which bridges WTForms and Flask. We're also importing our Replit database, which we'll need for uniqueness validations.\n\nThe structure of our forms is dictated by the structure of our database. In our `db_init` function, we defined two dictionaries, \"content\" and \"orders\". The former will contain entries for each of the PDFs we have for sale. These entries will contain the PDF's filename as well as general metadata. Thus, our \"content\" data structure will look something like this:\n\n```json\n{\n  \"content\": {\n    \"ID\": {\n      \"name\": \"NAME\",\n      \"description\": \"DESCRIPTION\",\n      \"file\": \"PDF_FILENAME\",\n      \"preview_image\": \"IMAGE_FILENAME\",\n      \"price\": 5\n    }\n  }\n}\n```\n\nThe ID value will be the content's name, all-lowercase, with spaces replaced by hyphens, so we can use it in our app's URLs. Let's create a function that turns names into IDs, in `forms.py`, just below our imports:\n\n```python\ndef name_to_id(name):\n    return name.lower().replace(\" \", \"-\")\n```\n\nNow we can create our form. With Flask WTF, we model a form as a class inheriting from FlaskForm. This class takes in the value of Flask's `request.form` and applies validations to the fields therein. Add the following class definition to the bottom of `forms.py`:\n\n```python\nclass ContentCreateForm(FlaskForm):\n    name = StringField(\n        \"Title\",\n        validators=[\n            InputRequired(),\n            Length(3)\n            ]\n    )\n\n    description = TextAreaField(\n        \"Description\",","metadata":{"id":1164}}],["1165",{"pageContent":"name = StringField(\n        \"Title\",\n        validators=[\n            InputRequired(),\n            Length(3)\n            ]\n    )\n\n    description = TextAreaField(\n        \"Description\",\n        validators=[InputRequired()]\n    )\n\n    file = FileField(\n        \"PDF file\",\n        validators=[\n            FileRequired(),\n            FileAllowed(['pdf'], \"PDFs only.\")\n        ]\n    )\n\n    image = FileField(\n        \"Preview image\",\n        validators=[\n            FileRequired(),\n            FileAllowed(['jpg', 'jpeg', 'png', 'svg'], \"Images only.\")\n        ]\n    )\n\n    price = FloatField(\n        \"Price in USD (0 = free)\",\n        validators=[\n            InputRequired(),\n            NumberRange(0)\n        ]\n    )\n\n    submit = SubmitField(\"Create content\")\n\n    def validate_name(form, field):\n        if name_to_id(field.data) in db[\"content\"].keys():\n            raise ValidationError(\"Content name already taken.\")\n```\n\nWhen admins create content, they'll specify a name, a description, and a price, as well as upload both the PDF and a preview image. We've used WTForm's validators to restrict the file types that can be uploaded for each. Should we decide to branch out from selling PDFs in the future, we can add additional file extensions to the `file` field's `FileAllowed` validator. We could also make individual fields optional by removing their `InputRequired()` or `FileRequired()` validators.\n\nThe final part of our form is a custom validator to reject new PDFs with IDs that match existing PDFs. Because we're validating on ID rather than name, admins won't be able to create PDFs with the same name but different capitalization (e.g. \"Sherlock Holmes\" and \"SHERLOCK HOLMES\").\n\nWe've finished creating our form class. Now we can return to `main.py` and import the class with the following `import` statement, which you can add just below the other imports at the top of the file.\n\n```python\nfrom forms import name_to_id, ContentCreateForm\n```","metadata":{"id":1165}}],["1166",{"pageContent":"```python\nfrom forms import name_to_id, ContentCreateForm\n```\n\nNote that we've also imported `name_to_id`, which we'll use when populating the database.\n\n### Admin routes\n\nWe can now use our form to implement our content creation route. Populate the `content_create` function with this code:\n\n```python\n# Admin functionality\n@app.route('/admin/content-create', methods=[\"GET\", \"POST\"])\n@web.authenticated\n@admin_only\ndef content_create():\n\n    form = ContentCreateForm()\n\n    if request.method == \"POST\" and form.validate():\n        content_name = form.name.data\n        content_id = name_to_id(content_name)\n        content_price = form.price.data\n\n        content_file = form.file.data\n        content_filename = secure_filename(content_file.filename)\n        content_file.save(os.path.join('content', content_filename))\n\n        image_file = form.image.data\n        image_filename = secure_filename(image_file.filename)\n        image_file.save(os.path.join('static', image_filename))\n\n        content_paywalled = content_price > 0\n\n        # Construct content dictionary\n        db[\"content\"][content_id] = {\n            \"name\": content_name,\n            \"description\": form.description.data,\n            \"filename\": content_filename,\n            \"preview_image\": image_filename,\n            \"paywalled\": content_paywalled,\n            \"price\": content_price,\n        }\n\n        flash(\"Content created!\")\n        return redirect(url_for('content', content_id=content_id))\n\n    return render_template(\"admin/content-create.html\",\n        form = form,\n        **context())\n```\n\nFirst, we create an instance of `ContentCreateForm`. This will automatically use the values in `request.form`, including the uploaded files. We then check whether the current request is an HTTP POST, and we call `validate()` on the form. Behind the scenes, this method will run all of our field validators, and return error messages to the user for fields that fail validation. It will only return `True` once all fields validate.","metadata":{"id":1166}}],["1167",{"pageContent":"Once we know we've got valid form input, we can save its data to our database. We construct our content's ID using the helper function from `forms.py`, store our content's price value, and then save our PDF and image files to the `content` and `static` directories. Saving images to `static` will allow Flask to serve them without us writing additional code. We'll need custom code for PDFs, however, as we need to ensure they're only accessible to paying customers.\n\nWe use the variable `content_paywalled` to determine whether this PDF should be available for free or behind a paywall.\n\nFinally, we save our content's details to the database and redirect the creator to the content page, which we'll build in the next section.\n\nAt the bottom of the function, we render our `content-create` page and tell it which form to use. This will happen regardless of whether the initiating request was a GET or a POST. We'll create the template and define the `context` function when we build the application front-end.\n\nNext, we need to create our database flushing functionality. Populate the `flush_db` function with the following code:\n\n```python\n@app.route('/admin/db-flush')\n@web.authenticated\n@admin_only\ndef flush_db():\n    # clear db\n    del db[\"content\"]\n    del db[\"orders\"]\n\n    # clear users\n    for _, user in users.items():\n        user[\"content_library\"] = []\n\n    # delete content and images\n    shutil.rmtree(\"content\")\n    shutil.rmtree(\"static\")\n\n    # reinit\n    db_init()\n\n    return redirect(url_for(\"index\"))\n```\n\nAfter deleting all database content and uploaded files, we call `db_init()` to start afresh. Keep in mind that this function should not be used if you're storing real user data unless you've made a backup.\n\n## Content viewing and paywalls\n\nNow that our site admins can upload PDFs, we need a way for users to view them. We'll start by creating another helper function, just below the definition of `is_admin`:\n\n```python\ndef owns_content(username, content_id):","metadata":{"id":1167}}],["1168",{"pageContent":"```python\ndef owns_content(username, content_id):\n    if \"content_library\" in users[username].keys() and users[username][\"content_library\"] is not None:\n        return content_id in users[username][\"content_library\"]\n```\n\nWe have to do several checks on our user's `content_library`, as it can be in a few different states – the key might not exist, or it might be set to None, or it might be a list. We'll use this function to determine which content has been purchased by a given user and thus avoid writing all these checks again.\n\nNow we need to create our application's content-viewing routes. We'll start by rewriting the `/` route so that it renders a template rather than a greeting string. This page will contain a list of PDFs. Change the code in `index` to the following:\n\n```python\n# Main app\n@app.route(\"/\")\n@web.authenticated\ndef index():\n    return render_template(\"index.html\",\n        **context())\n```\n\nThen we'll write a route that displays individual PDF metadata, by adding this function just below the definition of `index`:\n\n```python\n@app.route(\"/content/<content_id>\")\n@web.authenticated\ndef content(content_id):\n    return render_template(\"content.html\",\n        content_id=content_id,\n        **context())\n```\n\nThe `content_id` value will be the same ID that we're using in our database. This page will contain the content's name, preview image, description, and either a download link, or a purchase link, depending on whether the PDF is paywalled, and whether the current user has purchased it.\n\nLastly, we need a route that handles downloading actual PDFs. Add the following code just below the `content` function definition:\n\n```python\n@app.route(\"/content-file/<content_id>\")\n@web.authenticated\ndef content_file(content_id):\n\n    content = db[\"content\"][content_id]\n\n    if not content[\"paywalled\"] or owns_content(web.auth.name, content_id):\n        return send_from_directory(\"content\", path=content[\"filename\"])\n    else:\n        return \"Access denied.\"\n```","metadata":{"id":1168}}],["1169",{"pageContent":"if not content[\"paywalled\"] or owns_content(web.auth.name, content_id):\n        return send_from_directory(\"content\", path=content[\"filename\"])\n    else:\n        return \"Access denied.\"\n```\n\nIf the current user owns this PDF, or it's not paywalled, we use Flask's [`send_from_directory`](https://flask.palletsprojects.com/en/2.0.x/api/#flask.send_from_directory) to allow them to download it. Otherwise, we return an error message.\n\n## Creating the application frontend\n\nWe have most of our application back-end, so now let's create the front-end. We'll do this using HTML and [Jinja](https://jinja.palletsprojects.com/en/3.0.x/templates/), Flask's front-end templating language.\n\nFirst, let's create the following HTML files in a new directory called `templates`:\n\n```\ntemplates/\n    |__ admin/\n    |     |__  content-create.html\n    |__  _macros.html\n    |__  content.html\n    |__  index.html\n    |__  layout.html\n```\n\n![Folder structure](https://docimg.replit.com/images/tutorials/29-paid-content-site/folder-structure.png)\n\nOnce you've created these files, let's populate them, starting with `templates/layout.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Books and Manuscripts</title>\n  </head>\n  <body>\n    {% with messages = get_flashed_messages() %} {% if messages %}\n    <ul class=\"flashes\">\n      {% for message in messages %}\n      <li>{{ message }}</li>\n      {% endfor %}\n    </ul>\n    {% endif %} {% endwith %} {% if name != None %}\n    <p>Logged in as {{ username }}</p>\n    {% endif %} {% block body %}{% endblock %}\n  </body>\n</html>\n```\n\nWe'll use this file as the base of all our pages, so we don't need to repeat the same HTML. It contains features we want on every page, such as flashed messages, and an indication of who's currently logged in. All subsequent pages will inject content into the body block:\n\n```jinja\n{% block body %}{% endblock %}\n```\n\nNext, we need to populate another helper file, `templates/_macros.html`:\n\n```html\n{% macro render_field(field) %}\n<dt>{{ field.label }}</dt>\n<dd>","metadata":{"id":1169}}],["1170",{"pageContent":"```jinja\n{% block body %}{% endblock %}\n```\n\nNext, we need to populate another helper file, `templates/_macros.html`:\n\n```html\n{% macro render_field(field) %}\n<dt>{{ field.label }}</dt>\n<dd>\n  {{ field(**kwargs)|safe }} {% if field.errors %}\n  <ul class=\"errors\">\n    {% for error in field.errors %}\n    <li>{{ error }}</li>\n    {% endfor %}\n  </ul>\n  {% endif %}\n</dd>\n{% endmacro %}\n```\n\nThis file defines the [Jinja macro](https://jinja.palletsprojects.com/en/3.0.x/templates/#macros) `render_field`, which we'll use to provide our form fields with error-handling, provided by WTForms.\n\nWe'll use this macro in `templates/admin/content-create.html`, which we'll populate with the following code:\n\n```html\n{% extends \"layout.html\" %} {% block body %} {% from \"_macros.html\" import\nrender_field %}\n<h1>Upload content item</h1>\n<form\n  action=\"/admin/content-create\"\n  method=\"post\"\n  enctype=\"multipart/form-data\"\n>\n  {{ render_field(form.name) }} {{ render_field(form.description) }} {{\n  render_field(form.file) }} {{ render_field(form.image) }} {{\n  render_field(form.price) }} {{ form.csrf_token }} {{ form.submit }}\n</form>\n{% endblock %}\n```\n\nHere, `{% extends \"layout.html\" %}` tells our templating engine to use layout.html as a base template, and `{% block body %} ... {% endblock %}` defines the code to place inside layout.html's body block.\n\nOur `render_function` macro will be used to show our different form fields – some of these will be text input fields, while others will be file upload fields. Our form also has a hidden field specified by `{{ form.csrf_token }}`. This is a security feature WTForms provides to prevent [cross-site request forgery](https://owasp.org/www-community/attacks/csrf) vulnerabilities.\n\nLet's define our home page now, with a list of content items. Add the following code to `templates/index.html`:\n\n```html\n{% extends \"layout.html\" %} {% block body %}\n<h1>Marketplace</h1>\n<ul>\n  {% for id, content in content.items() %}\n  <li>\n    <a href=\"/content/{{ id }}\">{{ content.name }}</a>","metadata":{"id":1170}}],["1171",{"pageContent":"```html\n{% extends \"layout.html\" %} {% block body %}\n<h1>Marketplace</h1>\n<ul>\n  {% for id, content in content.items() %}\n  <li>\n    <a href=\"/content/{{ id }}\">{{ content.name }}</a>\n    {% if content.paywalled %} {% if id in my_library %} (PURCHASED) {% else %}\n    ({{ \"${:,.2f}\".format(content.price) }}) {% endif %} {% endif %}\n  </li>\n  {% endfor %} {% if admin %}\n  <li><a href=\"/admin/content-create\">NEW CONTENT...</a></li>\n  {% endif %}\n</ul>\n\n{% if admin %}\n<h1>Admin functions</h1>\n<ul>\n  <li><a href=\"/admin/db-flush\">Flush database</a></li>\n</ul>\n{% endif %} {% endblock %}\n```\n\nWe display each piece of content in a list. If an item is paywalled, we show its price if the current user hasn't already purchased it, or \"(PURCHASED)\" if they have.\n\nIn addition, we use `{% if admin %}` blocks to include links to admin functionality, such as content creation and database flushing, that will only display when an admin is logged in.\n\nThe last page we need to create is `templates/content.html`, which will display information about individual PDFs:\n\n```html\n{% extends \"layout.html\" %} {% block body %}\n<h1>{{ content[content_id].name }}</h1>\n<img src=\"/{{ content[content_id].preview_image }}\" style=\"max-width: 150px\" />\n<p>{{ content[content_id].description }}</p>\n{% if content_id in my_library or not content[content_id].paywalled %}\n<a href=\"/content-file/{{ content_id }}\">Download PDF</a>\n{% else %}\n<form action=\"/checkout/{{ content_id }}\" method=\"POST\">\n  <button type=\"submit\" id=\"checkout-button\">\n    Buy {{ content[content_id].name }} for {{\n    \"${:,.2f}\".format(content[content_id].price) }}\n  </button>\n</form>\n{% endif %} {% endblock %}\n```\n\nAs with the home page, we display different parts of the page depending on whether the content is paywalled, and whether the current user owns it. If the user must purchase the PDF, we include a single-button form that posts to `/checkout/<content_id>`, an application route we'll create in the next section.","metadata":{"id":1171}}],["1172",{"pageContent":"We've referred to a lot of different variables in our front-end templates. Flask's Jinja templating framework allows us to pass the variables we need into `render_template`, as we did when building the application backend. Our content creation page needed a form, and our content viewing pages needed an ID. In addition, we unpack the return value of a function named `context` to all of our rendered pages. Define this function now with our other helper functions in `main.py`, just below `owns_content`:\n\n```python\ndef context():\n    if \"content_library\" in users.current.keys() and users.current[\"content_library\"] is not None:\n        my_library = users.current[\"content_library\"]\n    else:\n        my_library = []\n\n    return {\n        \"username\": web.auth.name,\n        \"my_library\": my_library,\n        \"admin\": is_admin(web.auth.name),\n        \"content\": db[\"content\"]\n    }\n```\n\nThis will give every page most of the application's state, including the full content dictionary and the current user's library. If we find we need another piece of state later, we can add it to the `context` helper function, and it will be available to all our pages.\n\nRun your repl now and add some content. For best results, open the site in a new tab, rather than using it in your repl's browser.\n\n![Open in new window](https://docimg.replit.com/images/tutorials/29-paid-content-site/open-new-window.png)\n\nIf you add free PDFs, you'll be able to download them, but you won't be able to purchase paywalled PDFs yet.\n\n![Free pdf download](https://docimg.replit.com/images/tutorials/29-paid-content-site/free-pdf-download.png)\n\n## Integrating with Stripe\n\nOur application is fully functional for free PDFs. To have users pay for premium PDFs, we'll integrate [Stripe Checkout](https://stripe.com/en-gb-us/payments/checkout). This will save us the trouble and risk of developing our own payment gateway or storing users' card details.","metadata":{"id":1172}}],["1173",{"pageContent":"To use Stripe Checkout, you will need an activated Stripe account. Create one now at [https://stripe.com](https://stripe.com/) if you haven't already.\n\nOnce you've created a Stripe account, add the following code near the top of `main.py`, just below the `import` statements:\n\n```python\n# Stripe setup\nstripe.api_key = os.environ[\"STRIPE_KEY\"]\n\nDOMAIN = \"YOUR-REPL-URL-HERE\"\n```\n\nYou can find your Stripe API keys on [this page of the developer dashboard](https://dashboard.stripe.com/test/apikeys). Make sure that you're in test mode and copy the secret key to your clipboard. Then return to your repl and create an environment variable called `STRIPE_KEY` with the value you just copied from Stripe.\n\n![Stripe Key](https://docimg.replit.com/images/tutorials/29-paid-content-site/stripe-key.png)\n\nYou will also need to replace the value of `DOMAIN` with your repl's root URL. You can get this URL from the in-repl browser.\n\n![Repl URL](https://docimg.replit.com/images/tutorials/29-paid-content-site/repl-url.png)\n\n### Stripe Checkout\n\nStripe provides detailed technical documentation and code snippets in a variety of languages, so setting up basic integration is largely a matter of copying and adapting these code snippets to our needs. We'll start by creating the `/checkout/<content_id>` route. This will create a new Stripe [checkout session](https://stripe.com/docs/api/checkout/sessions) and redirect the user to a Stripe payment page. Add the following code below your `content_file` function definition:\n\n```python\n# Stripe integration\n@app.route(\"/checkout/<content_id>\", methods=[\"POST\"])\n@web.authenticated\ndef checkout(content_id):\n\n    # Proceed to checkout\n    try:\n        checkout_session = stripe.checkout.Session.create(\n            line_items=[\n                {\n                    \"price_data\": {\n                        \"currency\": \"usd\",\n                        \"product_data\": {\n                            \"name\": db[\"content\"][content_id][\"name\"],","metadata":{"id":1173}}],["1174",{"pageContent":"\"price_data\": {\n                        \"currency\": \"usd\",\n                        \"product_data\": {\n                            \"name\": db[\"content\"][content_id][\"name\"],\n                            \"images\": [DOMAIN + \"/\" + db[\"content\"][content_id][\"preview_image\"]]\n                        },\n                        'unit_amount': int(db[\"content\"][content_id][\"price\"]*100),\n                    },\n                    \"quantity\": 1\n                },\n            ],\n            payment_method_types=[\n              'card',\n            ],\n            mode='payment',\n            success_url=DOMAIN + '/success?session_id={CHECKOUT_SESSION_ID}',\n            cancel_url=DOMAIN + '/cancel'\n        )\n    except Exception as e:\n        return str(e)\n\n    # Record order\n    order_id = checkout_session.id\n    db[\"orders\"][order_id] = {\n        \"content_id\": content_id,\n        \"buyer\": web.auth.name\n    }\n\n    return redirect(checkout_session.url, code=303)\n```\n\nThis code is adapted from Stripe's [sample integration Python code](https://stripe.com/docs/checkout/integration-builder?server=python). It initiates a checkout from the pricing and product details we provide and redirects the user to Stripe's checkout website to pay. If payment is successful, it sends the user to a `success_url` on our site; otherwise, it sends to the user to a `cancel_url`. We'll define both of these shortly.\n\nWe've made two key changes to the sample code. First, we've included the details for our content item in `line_items`:\n\n```python\nline_items=[\n    {\n        \"price_data\": {\n            \"currency\": \"usd\",\n            \"product_data\": {\n                \"name\": db[\"content\"][content_id][\"name\"],\n                \"images\": [DOMAIN + \"/\" + db[\"content\"][content_id][\"preview_image\"]]\n            },\n            'unit_amount': int(db[\"content\"][content_id][\"price\"]*100),\n        },\n        \"quantity\": 1\n    },\n],\n```","metadata":{"id":1174}}],["1175",{"pageContent":"},\n            'unit_amount': int(db[\"content\"][content_id][\"price\"]*100),\n        },\n        \"quantity\": 1\n    },\n],\n```\n\nRather than defining individual products on Stripe's side, we're programmatically constructing our products at checkout time. This saves us from having to add our PDF metadata in two places. We provide our product's name, and the full URL of its preview image, so both can be shown on the Stripe Checkout page. As Stripe expects prices in cents, we multiply the price from our database by 100 before converting it to an integer.\n\nThe second change we've made to the sample code is to record the order details in our database. We need to do this so that we can fulfill the order once it's paid for.\n\n```python\n    # Record order\n    order_id = checkout_session.id\n    db[\"orders\"][order_id] = {\n        \"content_id\": content_id,\n        \"buyer\": web.auth.name\n    }\n```\n\nWe reuse Stripe's [Checkout Session](https://stripe.com/docs/api/checkout/sessions/object) object's `id` as our `order_id` so that we can link the two later.\n\nIf you run your repl now, you should be able to reach the Stripe checkout page for any paywalled content you've added. Don't try to pay for anything yet though, as we still need to build order fulfillment.\n\n![Paywall](https://docimg.replit.com/images/tutorials/29-paid-content-site/alice-paywall.png)\n![Checkout page](https://docimg.replit.com/images/tutorials/29-paid-content-site/checkout-page.png)\n\n### Stripe fulfillment\n\nAs we're selling digital goods, we can integrate fulfillment directly into our application by adding purchased content to the buyer's library as soon as payment has been made. We'll do this with a function called `fulfill_order`, which you can add just below the `checkout` function definition.\n\n```python\ndef fulfill_order(session):\n    # Get order details\n    content_id = db[\"orders\"][session.id][\"content_id\"]\n    buyer = db[\"orders\"][session.id][\"buyer\"]\n\n    # Add content to library","metadata":{"id":1175}}],["1176",{"pageContent":"```python\ndef fulfill_order(session):\n    # Get order details\n    content_id = db[\"orders\"][session.id][\"content_id\"]\n    buyer = db[\"orders\"][session.id][\"buyer\"]\n\n    # Add content to library\n    if session.payment_status == \"paid\" and not owns_content(buyer, content_id):\n        if users[buyer][\"content_library\"] is not None:\n            users[buyer][\"content_library\"].append(content_id)\n        else:\n            users[buyer][\"content_library\"] = [content_id]\n```\n\nThis function takes a Stripe Checkout Session object, retrieves the corresponding order from our database, and then adds the order's content to the buyer's library if a payment has been made, and the buyer does not already own the content.\n\nWe'll invoke this function from our `/success` route, which we'll define just below it.\n\n```python\n@app.route('/success', methods=['GET'])\n@web.authenticated\ndef success():\n\n    # Get payment info from Stripe\n    session = stripe.checkout.Session.retrieve(request.args.get('session_id'))\n\n    # Abort if user is not buyer\n    if web.auth.name != db[\"orders\"][session.id][\"buyer\"]:\n        return \"Access denied.\"\n\n    fulfill_order(session)\n\n    return render_template_string(f'<html><body><h1>Thanks for your order, {web.auth.name}!</h1><p>Your purchase has been added to your <a href=\"/\">library</a>.</p></body></html>')\n```\n\nHere we retrieve the session details from the `session_id` GET parameter Stripe passed to our app, ensure that the current user is also the order buyer, and call `fulfill_order`. We then render a simple success page. You can replace this with a full Jinja template if you want to make it a bit fancier.\n\nWe also need to define the `/cancel` route, used if the payment fails. This one is quite simple:\n\n```python\n@app.route('/cancel', methods=['GET'])\n@web.authenticated\ndef cancel():\n    return render_template_string(\"<html><body><h1>Order canceled.</h1></body></html>\")\n```","metadata":{"id":1176}}],["1177",{"pageContent":"```python\n@app.route('/cancel', methods=['GET'])\n@web.authenticated\ndef cancel():\n    return render_template_string(\"<html><body><h1>Order canceled.</h1></body></html>\")\n```\n\nIf you run your repl now, you should be able to purchase content. You can find test credit card numbers on the Stripe integration [testing](https://stripe.com/docs/testing) documentation page. You can use any future date as the expiry date and any CVV.\n\n![PDF purchased](https://docimg.replit.com/images/tutorials/29-paid-content-site/alice-purchased.gif)\n\n### Webhooks\n\nA potential problem with the way we're fulfilling orders is that a user might close the Stripe Checkout tab or lose internet connectivity after their payment has been confirmed, but before they're redirected to our `/success` route. If this happens, we'll have their money, but they won't have their PDF.\n\nFor this reason, Stripe provides an additional method for fulfilling orders, based on [webhooks](https://en.wikipedia.org/wiki/Webhook). A webhook is an HTTP route intended to be used by machines rather than people. Much like we've created routes for our admins to upload PDFs, and our users to buy PDFs, we'll now create a route for Stripe's bots to notify our application of completed payments.\n\nFirst, you'll need to create a webhook on your Stripe Dashboard. Visit the [Webhooks](https://dashboard.stripe.com/test/webhooks) page and click **Add endpoint**. You should then see a page like this:\n\n![Add webhook](https://docimg.replit.com/images/tutorials/29-paid-content-site/add-webhook.png)\n\nOn this page, do the following:\n\n1. For the **Endpoint URL** value, enter your repl's URL, followed by `/fulfill-hook`.\n2. Select the `checkout.session.completed` event from **Select events to listen to**.\n\n   ![Webhook event](https://docimg.replit.com/images/tutorials/29-paid-content-site/webhook-event.png)\n\n3. Click **Add endpoint**.","metadata":{"id":1177}}],["1178",{"pageContent":"![Webhook event](https://docimg.replit.com/images/tutorials/29-paid-content-site/webhook-event.png)\n\n3. Click **Add endpoint**.\n\nStripe should then redirect you to your new webhook's details page. From here you can see webhook details, logs and the signing secret. The signing secret is used to ensure that our webhook only accepts requests from Stripe – otherwise, anyone could call it with spoofed data and complete orders without paying. Reveal your webhook's signing secret and copy it to your clipboard, then return to your repl.\n\n![Signing secret](https://docimg.replit.com/images/tutorials/29-paid-content-site/signing-secret.png)\n\nWe'll use another environment variable here. Add the following code below your `cancel` function definition:\n\n```python\nendpoint_secret = os.environ['ENDPOINT_SECRET']\n```\n\nThen create an environment variable called `ENDPOINT_SECRET` with the value you just copied from Stripe.\n\nFor our app's webhook code, we can once again tweak Stripe's sample code. We'll use [this order fulfillment code](https://stripe.com/docs/payments/checkout/fulfill-orders#fulfill) as a base. Add this code below your `endpoint_secret` assignment:\n\n```python\n@app.route('/fulfill-hook', methods=['POST'])\ndef fulfill_webhook():\n    event = None\n    payload = request.data\n    sig_header = request.headers['STRIPE_SIGNATURE']\n\n    try:\n        event = stripe.Webhook.construct_event(\n            payload, sig_header, endpoint_secret\n        )\n    except ValueError as e:\n        # Invalid payload\n        raise e\n    except stripe.error.SignatureVerificationError as e:\n        # Invalid signature\n        raise e\n\n    # Handle the event\n    if event['type'] == 'checkout.session.completed':\n        session = event['data']['object']\n\n        # Fulfill the purchase...\n        fulfill_order(session)\n    else:\n        print('Unhandled event type {}'.format(event['type']))\n\n    return jsonify(success=True)\n```","metadata":{"id":1178}}],["1179",{"pageContent":"# Fulfill the purchase...\n        fulfill_order(session)\n    else:\n        print('Unhandled event type {}'.format(event['type']))\n\n    return jsonify(success=True)\n```\n\nAfter ensuring that the request we've received comes from Stripe, we retrieve the Checkout Session object from Stripe's `checkout.session.completed` event and use it to call `fulfill_order`.\n\nIf you run your repl now, you should be able to purchase a PDF, close the checkout page after your payment is accepted but before being redirected, and still end up with the PDF in your library. You can also view webhook invocation logs on the [Stripe Dashboard](https://dashboard.stripe.com/test/webhooks).\n\n![Stripe webhook success](https://docimg.replit.com/images/tutorials/29-paid-content-site/stripe-webhook-success.png)\n\n## Where next?\n\nWe've built a functional if fairly basic storefront for digital goods. If you'd like to continue with this project, consider the following extensions:\n\n- Improving the site's appearance with custom CSS.\n- Branching out from PDFs to other files, such as audio podcasts, videos, or desktop software.\n- Providing a subscription option that gives users access to all PDFs for a limited time.\n- Converting the site into a peer-to-peer marketplace where users can all upload and purchase files from each other.\n\nYou can find the code for this tutorial here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/pdf-store?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1179}}],["1180",{"pageContent":"---\ntitle: PDF report generator from spreadsheet\n---\n\n# Generate PDF reports from spreadsheet data\n\nIn this tutorial, we'll be building a simple web application that will take in data from spreadsheets and use it to create slick PDF reports. We'll cover the following topics:\n\n- Reading and processing spreadsheet data with Python's [pandas](https://pandas.pydata.org/) library.\n- Creating data visualizations with [Matplotlib](https://matplotlib.org/).\n- Creating PDFs with Python, using [PyFPDF](https://pyfpdf.readthedocs.io/en/latest/index.html).\n- Handling file uploads and downloads with [Flask](https://flask.palletsprojects.com/en/2.0.x/).\n\n## Set up\n\nWe'll be using Python for this tutorial. Sign into [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a new Python repl.\n\n![New repl](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/new-repl.png)\n\n## Creating the web application\n\nOur web application will do two things: allow users to upload spreadsheets and produce downloadable PDFs. Let's start with a scaffolding of initial code in the `main.py` file, as below:\n\n```python\nfrom flask import Flask, request\nfrom flask.helpers import send_from_directory\nfrom werkzeug.utils import secure_filename\nimport os, traceback\n\nsite = Flask(__name__)\n\n@site.route('/')\ndef index():\n    pass\n\n@site.route('/process', methods=[\"POST\"])\ndef upload_and_process():\n    pass\n\nsite.run(host='0.0.0.0', port=8080)\n```","metadata":{"id":1180}}],["1181",{"pageContent":"import os, traceback\n\nsite = Flask(__name__)\n\n@site.route('/')\ndef index():\n    pass\n\n@site.route('/process', methods=[\"POST\"])\ndef upload_and_process():\n    pass\n\nsite.run(host='0.0.0.0', port=8080)\n```\n\nHere we've imported all the Flask components we'll need, created our Flask application and set up the index and `/process` routes. File upload functionality is commonly abused to hack web applications, so we need to implement a number of security mechanisms to keep our implementation safe. To facilitate this, we've imported a [utility for sanitizing filenames](https://werkzeug.palletsprojects.com/en/2.0.x/utils/#werkzeug.utils.secure_filename) from [Werkzeug](https://werkzeug.palletsprojects.com/en/2.0.x/), the [WSGI](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface) library Flask is built on.\n\nIn order to let the user upload and download files, we'll need to create directories to store these files. Add the following code just below the line `site = Flask(__name__)`.\n\n```python\nsite.config[\"UPLOAD_DIR\"] = \"spreadsheets\" # for uploaded spreadsheets\nsite.config[\"OUTPUT_DIR\"] = \"reports\" # for downloadable PDF reports\nsite.config[\"PLOT_DIR\"] = \"plots\" # for data visualization images\n\nfor dir in [\"UPLOAD_DIR\", \"OUTPUT_DIR\", \"PLOT_DIR\"]:\n    if not os.path.exists(site.config[dir]):\n            os.mkdir(site.config[dir])\n```\n\nHere we define our directories and create them if they don't exist, using our Flask app's [configuration dictionary](https://flask.palletsprojects.com/en/2.0.x/config/).\n\nNow let's restrict the kinds of files that can be uploaded, to prevent users from uploading the wrong files. Enter the following code just below the lines you added above:\n\n```python\nALLOWED_EXTENSIONS = {'xlsx', 'xls', 'ods'}\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n```","metadata":{"id":1181}}],["1182",{"pageContent":"```python\nALLOWED_EXTENSIONS = {'xlsx', 'xls', 'ods'}\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n```\n\nThis code comes from Flask's [file upload pattern](https://flask.palletsprojects.com/en/2.0.x/patterns/fileuploads/). The `allowed_file` function will return `True` if the filename passed to it has an extension and that extension is in our [set](https://realpython.com/python-sets/) of allowed extensions, permitting spreadsheet files only.\n\nNow let's create our application's homepage. Find the `index()` function definition, and replace `pass` with the function body shown below.\n\n```python\n@site.route('/')\ndef index():\n    return \"\"\"\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Sales Report Generator</title>\n  </head>\n  <body>\n    <h1>Upload sales spreadsheet</h1>\n    <form action=\"/process\" method=\"post\" enctype=\"multipart/form-data\">\n      <input type=\"file\" name=\"file\">\n      <input type=\"submit\" value=\"Generate report\">\n    </form>\n  </body>\n</html>\n\"\"\"\n```\n\nFeel free to spice up this bare-bones upload page with your own text and styling. Once you're satisfied, we can move on to the `process` route, which will handle files uploaded by this form. Find the `upload_and_process()` function definition and replace `pass` with the function body below.\n\n```python\n@site.route('/process', methods=[\"POST\"])\ndef upload_and_process():\n    if \"file\" not in request.files: # invalid request\n        return \"Invalid request.\"\n\n    file = request.files['file']\n    if file.filename == '': # no file uploaded by user\n            return \"No file selected.\"\n\n    if file and allowed_file(file.filename):\n        filename = secure_filename(file.filename)\n        file.save(os.path.join(site.config['UPLOAD_DIR'], filename))\n\n        try:\n            process_spreadsheet(os.path.join(site.config['UPLOAD_DIR'],filename))\n        except Exception as e:\n            print(e)\n            traceback.print_exc()","metadata":{"id":1182}}],["1183",{"pageContent":"try:\n            process_spreadsheet(os.path.join(site.config['UPLOAD_DIR'],filename))\n        except Exception as e:\n            print(e)\n            traceback.print_exc()\n            return \"An error occurred. Please ensure that your spreadsheet is correctly formatted and try again.\"\n        else:\n            return send_from_directory(directory=site.config[\"OUTPUT_DIR\"], path=\"report.pdf\")\n```\n\nThe first two if statements in this code handle errors: if an improper or empty `POST` request is made to the `/process` route, it will return an error.\n\nThe final if statement checks whether the uploaded file has an allowed extension, using the `secure_filename` utility we imported above to sanitize its filename, and saves it to our uploads directory.\n\nOur code then attempts to process the spreadsheet. This is a complex process that can throw errors, if, for example, users upload spreadsheets in unexpected formats, so we will use Python's [error handling](https://docs.python.org/3/tutorial/errors.html) to recover from such errors gracefully.\n\nIf spreadsheet processing fails, our web application will show the web user a short and user-friendly error message while displaying the real error for us in the console. Real error messages often contain sensitive information, such as directory names and lines of code, and can be confusing for non-technical users, so it's better to avoid displaying them in our web interface.\n\nIf spreadsheet processing succeeds, it will send the newly created PDF to the user.\n\nFor now, if you run your repl and try to upload spreadsheets, it will lead to an error, as we have not yet defined the `process_spreadsheet()` function. We'll do so in the next section.\n\n## Processing spreadsheets with pandas","metadata":{"id":1183}}],["1184",{"pageContent":"## Processing spreadsheets with pandas\n\nNow that we've created our interface, we can start doing some data processing. We'll be using [this spreadsheet of fruit sales](https://tutorial-files.util.repl.co/pdf-report-generator/sales-july-2021.xlsx) as an example. Download it now and take a look inside. You'll see two worksheets: one with sales data, and one with inventory data.\n\n![Spreadsheet data](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/spreadsheet_data.gif)\n\nReturn to Replit and at the top of `main.py`, add the following lines:\n\n```python\nimport pandas as pd\nimport numpy as np\nimport openpyxl\n```\n\n[Pandas](https://pandas.pydata.org/) is a widely used Python data analysis library, commonly used by data scientists. It provides a number of useful functions and objects for working with series and tabular data, most notably the [DataFrame object](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html). [NumPy](https://numpy.org) provides mathematical functions for use with arrays and matrices, and is often used together with pandas. Finally, [openpyxl](https://openpyxl.readthedocs.io/en/stable/) is the library pandas uses for reading spreadsheet files – we won't use this library directly, but we need to include it in our imports so that our repl installs it.\n\nDefine the `process_spreadsheet()` function above the `index()` function definition. Use the following code:\n\n```python\ndef process_spreadsheet(filename):\n    # Wrangle spreadsheet\n    spreadsheet = pd.read_excel(filename, sheet_name=[\"Sales\", \"Inventory\"])\n    sale_data = spreadsheet[\"Sales\"]\n    item_data = spreadsheet[\"Inventory\"]\n```\n\nHere we use pandas's [`read_excel`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html#pandas.read_excel) function to import each worksheet in our spreadsheet as a DataFrame object. The DataFrame, being a tabular structure, shares a number of similarities with spreadsheets, as well as tables in an SQL database.","metadata":{"id":1184}}],["1185",{"pageContent":"Speaking of SQL tables, the next thing we're going to do is [`join`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.join.html#pandas.DataFrame.join) `sale_data` with `item_data`, using the item code column. Add the line below to the bottom of `process_spreadsheet()`:\n\n```python\n    # Join item data to sale data\n    sale_data = sale_data.join(item_data.set_index(\"Code\"), on=\"Item Code\", how=\"inner\")\n```\n\nThis code will give each row of our sales data the appropriate item information, including the item's name, cost price and sale price. If you'd like to learn more about combining DataFrames, [this RealPython tutorial](https://realpython.com/pandas-merge-join-and-concat/) provides an overview.\n\nTo see what the newly joined sales DataFrame looks like, add the following line below the definition of `sale_data`:\n\n```python\n    print(sale_data)\n```\n\nThen run your repl, upload the `sales-july-2021.xlsx` spreadsheet, click \"Generate report\" after selecting the spreadsheet, and watch the Replit console. You should see something like this:\n\n![Sales dataframe](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/sales_dataframe.png)\n\n## Calculating insights from data\n\nNow that we've integrated our data, let's generate some insights to report on. We'd like to make a report that answers the following questions:\n\n1. Which sales person brought in the most revenue?\n2. Which sales person brought in the most profit?\n3. What was our most discounted item on average?\n4. How much of each item do we have left in stock?\n\nTo answer the first two questions, we'll need to group our data by sales person. To answer the last two questions, we'll need to group our data by item. Let's do this now, using DataFrame's [`groupby`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html#pandas.DataFrame.groupby) method. Add the below code to the bottom of `process_spreadsheet()`:\n\n```python\n    # Group data","metadata":{"id":1185}}],["1186",{"pageContent":"```python\n    # Group data\n    sales_by_salesperson = sale_data.groupby(\"Sales Person\")\n    sales_by_item = sale_data.groupby(\"Item Name\")\n```\n\nNow we can use our grouped data to calculate the answer to each question. We'll add the answers to the relevant dataframes as we go.\n\n### Revenue by salesperson\n\nWe can get the revenue for each sale with the below calculation:\n\n```\nSale Revenue = Quantity Sold * (Sale Price * (1 - Discount))\n```\n\nBy making use of the DataFrame's operator overloading, we can apply this calculation to every column at once. Add the following code to the bottom of your `process_spreadsheet()` function:\n\n```python\n    # 1. Which sales person brought in the most revenue?\n\n    # 1.1 Calculate revenue for each sale\n    sale_data[\"Sale Revenue\"] = sale_data[\"Quantity Sold\"] * \\\n        (sale_data[\"Sale Price\"] * (1 - sale_data[\"Discount\"]))\n```\n\nNote that we're using a backslash (`\\`) to [split a single line of code over two physical lines](https://docs.python.org/3/reference/lexical_analysis.html#line-structure), for improved readability. Don't confuse this with the division operator (forward slash: `/`).\n\nIf we look at our data now (use a `print` statement like the one we used earlier to print to the console and rerun your repl), you'll notice that the Sale Revenue column contains more than two decimal places.\n\n![Decimal places](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/sale_revenuedp.png)\n\nSeeing as this is a currency column, we want to round it down to the nearest hundredth. We'll write a quick inner function for this now, by placing the following code just below `def process_spreadsheet(filename):` above:\n\n```python\n    def floor_currency(value):\n        # Round down to two decimal places\n        return np.floor(value*100)/100\n```","metadata":{"id":1186}}],["1187",{"pageContent":"```python\n    def floor_currency(value):\n        # Round down to two decimal places\n        return np.floor(value*100)/100\n```\n\nHere we use NumPy's [`floor()`](https://numpy.org/doc/stable/reference/generated/numpy.floor.html) function to round values down. As `floor()` rounds to integer values, we can multiply and then divide by 100 to get two decimal places.\n\nNow that we've added that function, we can return to our calculations at the bottom of the `process_spreadsheet()` function. Add the line below:\n\n```python\n    # 1.2 Round down to 2 decimal places\n    sale_data[\"Sale Revenue\"] = sale_data[\"Sale Revenue\"].apply(floor_currency)\n```\n\nThis uses the [`DataFrame.apply()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html) method to run `floor_currency()` on every row in the Sale Revenue Column. This is similar to [`map()`](https://realpython.com/python-map-function/) in standard Python.\n\nFinally, we'll use our `sales_by_salesperson` grouping to calculate each sales person's total revenue, and sort them from highest to lowest. Add the following code:\n\n```python\n    # 1.3 Group sales by sales person and sum sale revenue\n    revenue_by_salesperson = sales_by_salesperson[\"Sale Revenue\"].sum().sort_values(\n        ascending=False)\n```\n\nNote that `sales_by_salesperson` recognises the Sales Revenue column even though we defined it before that column was added. We can think of objects returned by `groupby` as filters or views on DataFrames, rather than as DataFrames in and of themselves.\n\n### Profit by salesperson\n\nWe can get the profit for each sale using the following calculation:\n\n```\nSale Profit = Sale Revenue - (Cost Price * Quantity Sold)\n```\n\nThe code for this calculation is largely similar to the code used for calculating revenue by sales person. Add it beneath the code you inserted above.\n\n```python\n    # 2. Which sales person brought in the most profit?\n\n    # 2.1 Calculate profit for each sale\n    sale_data[\"Sale Profit\"] = sale_data[\"Sale Revenue\"] - \\","metadata":{"id":1187}}],["1188",{"pageContent":"```python\n    # 2. Which sales person brought in the most profit?\n\n    # 2.1 Calculate profit for each sale\n    sale_data[\"Sale Profit\"] = sale_data[\"Sale Revenue\"] - \\\n        (sale_data[\"Cost Price\"] * sale_data[\"Quantity Sold\"])\n    # 2.2 Round down to 2 decimal places\n    sale_data[\"Sale Profit\"] = sale_data[\"Sale Profit\"].apply(floor_currency)\n    # 2.3 Group sales by sales person and sum sale profit\n    profit_by_salesperson = sales_by_salesperson[\"Sale Profit\"].sum().sort_values(\n        ascending=False)\n```\n\n### Average discount by item\n\nThis is a simple one: we just need the average of each item's Discount values. We can do this in one line of code, as below:\n\n```python\n    # 3. What was our most discounted item on average?\n    average_discounts = sales_by_item[\"Discount\"].mean().sort_values(ascending=False)\n```\n\n### Remaining stock by item\n\nHere we'll need to get the Quantity Sold per item from `sales_data` and subtract it from the Stock of each item in `item_data`. Add the following code:\n\n```python\n    # 4. How much of each item do we have left in stock?\n\n    # 4.1 Sort item_data by name to match sales_by_item\n    item_data = item_data.sort_values(\"Item Name\")\n    # 4.2 Calculate total sold of each item and add it to item_data as a new column\n    item_data = item_data.assign(\n        StockSold=sales_by_item[\"Quantity Sold\"].sum().values)\n    # 4.3 Add a second new column showing the difference between Stock and StockSold\n    item_data[\"StockLeft\"] = item_data[\"Stock\"] - item_data[\"StockSold\"]\n```\n\nFirst, we sort `item_data` by name, to match the sorting of `sales_by_item`, so that all our rows will match up correctly. Then, we use `assign` to create a new column named StockSold in `item_data`. We assign to this the total Quantity Sold per item, using our `sales_by_item` view of `sale_data`. Finally, we create a column named StockLeft by subtracting the values in StockSold from those in Stock.\n\n### Seeing results","metadata":{"id":1188}}],["1189",{"pageContent":"### Seeing results\n\nTo see the results of these calculations in the Replit console, add the following print statements just below the above code. We'll use the [`DataFrame.head()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.head.html#pandas.DataFrame.head) method to only show the first five rows of each result.\n\n```python\n    # Display results\n    print(revenue_by_salesperson.head())\n    print(profit_by_salesperson.head())\n    print(average_discounts.head())\n    print(item_data[[\"Item Name\", \"Stock\", \"StockSold\", \"StockLeft\"]].head())\n```\n\nNote the notation in the final line: this allows us to show only selected columns of any `DataFrame`.\n\nNow run your repl and upload the `sales-july-2021.xlsx` spreadsheet you downloaded earlier. If your code is working correctly, you should see a number of tables in the Replit console, similar to the screenshot below.\n\n![Console dataframe output](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/console_dataframe_output.png)\n\n## Plotting graphs\n\nNow that we've got our data ready, we need to put it into some nice visualizations. Pandas includes methods for generating charts and graphs from DataFrames and other data objects. These methods are thin wrappers over [Matplotlib](https://matplotlib.org/), Python's most widely used data visualization library.\n\nAlthough we won't be using it directly, we'll need to import Matplotlib so that we can configure it to run in the background, otherwise Replit will open a Tkinter window to render our plots in. Add the following lines to the top of `main.py` to do this:\n\n```python\nimport matplotlib as mpl\nmpl.use('Agg')\n```\n\nWe're going to create two pie charts for our sales data, and one bar chart for our discount data. We'll leave our stock data as a table.\n\n### Sales pie charts\n\nBecause we're creating two pie charts, let's start by defining an internal function. Add the following code to the bottom of `process_spreadsheet()`:\n\n```python\n# Create sales pie charts","metadata":{"id":1189}}],["1190",{"pageContent":"Because we're creating two pie charts, let's start by defining an internal function. Add the following code to the bottom of `process_spreadsheet()`:\n\n```python\n# Create sales pie charts\n    def salesperson_pie_chart(df, yaxis, filename):\n        explode = np.zeros(df.shape[0])\n        explode[0] = 0.1\n\n        pie_profit = df.plot(\n            y=yaxis,\n            kind=\"pie\",\n            explode=explode,\n            autopct=lambda value: \"${:,.2f}\".format(\n                floor_currency(value/100 * df.sum())))\n\n        pie_profit.get_figure().gca().set_ylabel(\"\")\n        pie_profit.get_figure().tight_layout()\n        pie_profit.get_figure().savefig(filename)\n        pie_profit.get_figure().clf()\n```\n\nThere's a lot happening here, so let's go through it step by step:\n\n1. Our new inner function takes three parameters, a DataFrame to plot, the name of the column to use as the y-axis, and a filename to save the finished plot to. We will be passing `revenue_by_salesperson` and `profit_by_salesperson` into it.\n2. Before drawing our graph, we create an array `explode`, which is a [numpy array of zeros](https://numpy.org/doc/stable/reference/generated/numpy.zeros.html#numpy-zeros) of the same length as our DataFrame (`DataFrame.shape[0]` is a handy way of getting the number of rows). We then replace the first value with 0.1. This will allow us to pull out the largest slice of the pie, improving the visualization.\n3. We then plot the pie chart, using the specified `yaxis`.\n4. The `autopct` argument allows us to specify how we would like to display the numeric labels on each slice. Pie charts in Matplotlib default to showing percentages, but we want to see currency values, so we pass in an anonymous function that multiplies each percentage by the sum of our DataFrame's second column. We also use our `floor_currency()` function and Python string formatting to make our values display as currency values.","metadata":{"id":1190}}],["1191",{"pageContent":"5. We then remove the y-axis label, use [`tight_layout()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.tight_layout.html) to avoid excess white space, and save our figure to a file.\n6. Finally, we call our plot's [`clf()`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.clf.html) method. This clears the current plot, so we can start drawing a new one. Because of the way Matplotlib works, if we don't do this, we'll end up drawing plots on top of each other.\n\nBelow this function definition, we'll add the following calls, which will generate both pie charts:\n\n```python\n    salesperson_pie_chart(revenue_by_salesperson, \"Sale Revenue\",\n        os.path.join(site.config[\"PLOT_DIR\"], \"revenue_by_salesperson.png\"))\n    salesperson_pie_chart(profit_by_salesperson, \"Sale Profit\",\n        os.path.join(site.config[\"PLOT_DIR\"], \"profit_by_salesperson.png\"))\n```\n\nIf you run your repl now and reupload the spreadsheet, you should see two new image files in the `plots` directory.\n\n![Piechart plots](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/piechart_plots.png)\n\n### Discount bar chart\n\nOur bar chart code is fairly similar to our pie chart code. Add the following code at the bottom of `process_spreadsheet()`.\n\n```python\n    # Create bar chart\n    bar_ave_discount = average_discounts.plot(\n                        y=\"Discount\",\n                        kind=\"bar\",\n                        rot=45)\n\n    bar_ave_discount.get_figure().gca().set_xlabel(\"\")\n    bar_ave_discount.get_figure().tight_layout()\n    bar_ave_discount.yaxis.set_major_formatter(\n        mtick.PercentFormatter(xmax=1.0, decimals=0))\n    bar_ave_discount.get_figure().savefig(\n        os.path.join(site.config[\"PLOT_DIR\"],\n            \"item_average_discount.png\"))\n    bar_ave_discount.get_figure().clf()\n```","metadata":{"id":1191}}],["1192",{"pageContent":"bar_ave_discount.get_figure().savefig(\n        os.path.join(site.config[\"PLOT_DIR\"],\n            \"item_average_discount.png\"))\n    bar_ave_discount.get_figure().clf()\n```\n\nIn addition to setting this plot as a bar graph, we're use the `rot` argument to show the labels for the chart's x-axis at an angle, and we're using Matplotlib's [PercentFormatter](https://matplotlib.org/stable/api/ticker_api.html#matplotlib.ticker.PercentFormatter) to show the chart's y-axis labels as percentages. To use this function, add the following import statement near the top of `main.py`, just below your other `matplotlib` imports:\n\n```python\nimport matplotlib.ticker as mtick\n```\n\nRun your repl now, upload the spreadsheet, and you should see three images in the `plots` directory. In the next and final section of this tutorial, we'll be putting these three images into a PDF document, along with some textual and tabular data.\n\n## Creating a PDF\n\nWe will create our PDF using the [PyFPDF library](https://pyfpdf.readthedocs.io/en/latest/). Add the following import statement to the top of `main.py` to use this library:\n\n```python\nfrom fpdf import FPDF\n```\n\nNow return to the bottom of `process_spreadsheet()`, and add the following code to initialize a new PDF document:\n\n```python\n    # Create PDF\n    pdf = FPDF('L') # landscape\n    pdf.add_page() # first page\n    pdf.set_font('arial', '', 12) # 12pt Arial text\n```\n\nThe FPDF class provides a few different ways to insert text and images into our PDF. We will be using the [`cell()`](https://pyfpdf.readthedocs.io/en/latest/reference/cell/index.html) and [`image()`](https://pyfpdf.readthedocs.io/en/latest/reference/image/index.html) methods for inserting table cells and images.","metadata":{"id":1192}}],["1193",{"pageContent":"Calls to `cell` and `image` will insert elements at the current position on the page. We'll call this position the _cursor_. The `cell` method includes a parameter which specifies where to place the _cursor_ following the insertion of each cell. The cursor can also be set manually using x and y coordinates. These two factors, especially the former, can make it difficult to mentally model FPDF code, so it's good practice to leave a lot of comments.\n\nThe first thing we'll add to our page is a heading for our revenue pie chart. Add the following code below the line where you set the font.\n\n```python\n    # Pie charts\n    pdf.cell(112, # width\n             20, # height\n             \"Revenue by salesperson\", # text\n             0, # border (0 = none, 1 = border)\n             0, # where to put the cursor for the next cell\n                # (0 = right, 1 = next line, 2 = directly below)\n             \"L\") # text alignment\n```\n\nAs this is a landscape page, we'll place the heading for the profit pie chart to the right of this one, using the following code.\n\n```python\n    pdf.cell(110,20, \"Profit by salesperson\", 0, 1, \"L\")\n```\n\nOur cursor is now at the start of the line below our headings. To help us place our pie charts, we will record the current cursor coordinates with the code below:\n\n```python\n    start_x = pdf.get_x()\n    start_y = pdf.get_y()\n```\n\nNow we can place our first pie chart:\n\n```python\n    pdf.image(os.path.join(site.config[\"PLOT_DIR\"],\n                \"revenue_by_salesperson.png\"), w=110)\n```\n\nAnd our second one, using [`set_xy()`](https://pyfpdf.readthedocs.io/en/latest/reference/set_xy/index.html) to move the cursor to a position next to our first pie chart:\n\n```python\n    pdf.set_xy(start_x + 110 + 2, start_y)\n    pdf.image(os.path.join(site.config[\"PLOT_DIR\"],\n                \"profit_by_salesperson.png\"), w=110)\n```","metadata":{"id":1193}}],["1194",{"pageContent":"```python\n    pdf.set_xy(start_x + 110 + 2, start_y)\n    pdf.image(os.path.join(site.config[\"PLOT_DIR\"],\n                \"profit_by_salesperson.png\"), w=110)\n```\n\nNote that unlike `cell`, `image` doesn't let us specify where to place the cursor next – it will always place the cursor at the start of the next line. Let's record that position now, so we can return to it later:\n\n```python\n    below_pie_y = pdf.get_y()\n```\n\nNow we have some more space on the right side of the page, so let's insert our stock table. We'll construct this using `cell` again, but this time we'll give our cells borders. Insert the following code to place our cursor at the top right of the page and create the table headings:\n\n```python\n    # Stock table\n    pdf.set_font('arial', 'B', 10) # table heading font\n    pdf.set_y(start_y)\n    pdf.set_x(start_x + 220)\n\n    pdf.cell(30, 10, \"Item\", 1, 0, \"C\")\n    pdf.cell(30, 10, \"Stock Left\", 1, 2, \"C\")\n    pdf.cell(-30)\n```\n\nThe final line returns the cursor to the left-hand side of the Item heading cell. Without this line, our table body would be offset by one cell. Refer to our first invocation of the `cell` method if you don't remember what all the numbers mean.\n\nNow we'll use the [`DataFrame.iterrows()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iterrows.html) method to iterate over `item_data` and create our table's body columns. Add the following code:\n\n```python\n    pdf.set_font('arial', '', 10) # table rows font\n    for _, row in item_data.iterrows():\n        pdf.set_x(start_x + 220)\n        pdf.cell(30, 10, row[\"Item Name\"], 1, 0, \"L\")\n        pdf.cell(30, 10, str(row[\"StockLeft\"]), 1, 2, \"R\")\n        pdf.cell(-30)\n```\n\nWe can now add our average discount bar chart, which we're placing just below our pie charts. Add the following code:\n\n```python\n    # Bar chart\n    pdf.set_font('arial', '', 12) # 12pt Arial text\n    pdf.set_xy(start_x, below_pie_y-10)\n    pdf.cell(30, 10, \"Average discounts\", 0, 2, \"L\")\n    pdf.image(os.path.join(site.config[\"PLOT_DIR\"],","metadata":{"id":1194}}],["1195",{"pageContent":"pdf.set_font('arial', '', 12) # 12pt Arial text\n    pdf.set_xy(start_x, below_pie_y-10)\n    pdf.cell(30, 10, \"Average discounts\", 0, 2, \"L\")\n    pdf.image(os.path.join(site.config[\"PLOT_DIR\"],\n                \"item_average_discount.png\"), w=103)\n```\n\nOur report is now complete. End the `process_spreadsheet()` function with the following `return` statement, which uses the FPDF class's [`output()`](https://pyfpdf.readthedocs.io/en/latest/reference/output/index.html) method to write our PDF to a file:\n\n```python\n    return pdf.output(os.path.join(site.config[\"OUTPUT_DIR\"],\n                        \"report.pdf\"), \"F\")\n```\n\nTo ensure that your PDF opens correctly, open your repl's website in a new tab.\n\n![Replit browser open in new tab](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/replit-browser-open-in-new-tab.png)\n\nThen upload `sales-july-2021.xlsx` again, and wait for your report to generate. It should look something like this:\n\n![Final report](https://docimg.replit.com/images/tutorials/26-pdf-report-generator/final_report.png)\n\n## Where next?\n\nWe've covered a number of methods for working and displaying tabular data in this tutorial. From here, you can apply this to your own data munging and visualization needs. Additionally, there's much more to learn about all of these topics.\n\n- Some of our other tutorials delve into other aspects of Flask, such as this [stock market dashboard tutorial](/tutorials/python/personal-stock-market-dashboard). The web application interface we've built above is minimal and may benefit from additional functionality.\n- We also have [another tutorial on Matplotlib](/tutorials/python/data-science-and-visualisation-with-repl-it).\n- The pandas community has written a number of tutorials, [linked here](https://pandas.pydata.org/pandas-docs/stable/getting_started/tutorials.html).\n- Finally, [the FPDF documentation is available here](https://pyfpdf.readthedocs.io/en/latest/index.html).\n\nYou can find the code for this tutorial in the repl below:","metadata":{"id":1195}}],["1196",{"pageContent":"- Finally, [the FPDF documentation is available here](https://pyfpdf.readthedocs.io/en/latest/index.html).\n\nYou can find the code for this tutorial in the repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/speadsheet-to-pdf?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1196}}],["1197",{"pageContent":"---\ntitle: Stock market dashboard\n---\n\n# How to Build a Personal Stock Market Dashboard\n\nIn this tutorial, we will be building a single-page web dashboard for tracking a real or imaginary stock portfolio. This dashboard will:\n\n- Allow the user to record stock purchases.\n- Track the current price of all stocks held through web scraping.\n- Show the user the percentage gain or loss on their holdings, for each stock and in total.\n\n![Dashboard functionality](https://docimg.replit.com/images/tutorials/22-stock-market/dashboard_functionality.png)\n\nAfter working through this tutorial, you'll:\n\n- Be able to build a single-page application with Flask and JavaScript.\n- Understand web scraping with `Requests` and `Beautiful Soup`.\n- Know how to manage persistent data with Replit's database.\n\n## Creating the Dashboard\n\nWe're going to build our dashboard using Python (plus a bit of JavaScript). Sign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a new Python repl.\n\n![Creating a Python repl](https://docimg.replit.com/images/tutorials/22-stock-market/create-python-repl.png)\n\nOur dashboard will need to have three functions:\n\n- Displaying the current state of the stock portfolio.\n- Recording share purchases.\n- Flushing the database (this will be useful for testing).\n\nLet's start by creating an HTML frontend with the basic data and form elements necessary to enable this functionality. In your repl's file pane, create a directory named `templates`, and in that folder, create a file called `index.html` (this file structure is necessary for building Flask applications).\n\n![Creating the file structure](https://docimg.replit.com/images/tutorials/22-stock-market/create-files.png)\n\nThen enter the following HTML into the `index.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"","metadata":{"id":1197}}],["1198",{"pageContent":"Then enter the following HTML into the `index.html` file:\n\n```html\n<!DOCTYPE html>\n<html>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n    integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n    crossorigin=\"anonymous\"\n  />\n  <style>\n    .positive:before {\n      content: \"+\";\n      color: green;\n    }\n    .positive {\n      color: green;\n    }\n    .negative {\n      color: red;\n    }\n    th,\n    td {\n      padding: 1em;\n    }\n    body {\n      margin: 2em auto;\n      max-width: 80em;\n    }\n  </style>\n  <body>\n    <form action=\"/buy\" method=\"post\">\n      <input type=\"text\" placeholder=\"ticker\" name=\"ticker\" />\n      <input type=\"text\" placeholder=\"# shares\" name=\"shares\" />\n      <input type=\"text\" placeholder=\"price\" name=\"price\" />\n      <input type=\"submit\" value=\"Buy\" />\n    </form>\n\n    <table id=\"portfolio\">\n      <tr>\n        <th>Ticker</th>\n        <th>Number of shares</th>\n        <th>Total cost</th>\n        <th>Current value</th>\n        <th>Percent change</th>\n      </tr>\n      <tr>\n        <td>Loading...</td>\n      </tr>\n\n      <tr></tr>\n    </table>\n\n    <a href=\"/flush\">Flush DB</a>\n  </body>\n</html>\n```\n\nIn this file, we've imported [Bootstrap CSS](https://getbootstrap.com/) and applied some minimal styles of our own to make the default content look a little better. We've also created a form for recording share purchases, and a table that will display our share portfolio.\n\nNow let's write some Python code so we can display this page in our Flask app. Enter the following code in `main.py`:\n\n```python\nfrom flask import Flask, render_template, request, jsonify, url_for, redirect\nimport json\n\nsite = Flask(__name__)\n\n@site.route('/')\ndef index():\n    return render_template('index.html')\n\nsite.run(host='0.0.0.0', port=8080)\n```\n\nNow run your repl. The resulting page should look like this:\n\n![Initial dashboard](https://docimg.replit.com/images/tutorials/22-stock-market/initial-dashboard.png)","metadata":{"id":1198}}],["1199",{"pageContent":"site.run(host='0.0.0.0', port=8080)\n```\n\nNow run your repl. The resulting page should look like this:\n\n![Initial dashboard](https://docimg.replit.com/images/tutorials/22-stock-market/initial-dashboard.png)\n\nThe first thing we need to implement to get this page functional is the share purchase form. Let's do that now.\n\n## Accessing the Database and Recording Purchases\n\nWe can allow users to \"buy\" stock by entering the [ticker symbol](https://en.wikipedia.org/wiki/Ticker_symbol), the number of shares purchased, and the price per share. While it would also make sense to record the purchase time, we will leave that out for the sake of simplicity (but you can add it later on your own).\n\nWe will record these purchases by adding them to the [Replit database](/hosting/databases/replit-database). This is a simple key-value store that you can think of as a big Python dictionary which retains its state between runs of a repl. Using this database will save us from having to re-enter all of our stock information every time we restart our dashboard.\n\nTo use the Replit Database, all we have to do is add the following import statement at the top of `main.py`:\n\n```python\nfrom replit import db\n```\n\nNow we can use the globally scoped variable `db` like a Python dictionary, keeping in mind that whatever we store in it will persist between executions of our application. A cheat sheet for using the database is available from your repl's database tab on the sidebar.\n\n![Database sidebar](https://docimg.replit.com/images/tutorials/22-stock-market/database-sidebar.png)\n\nLet's give it a spin and write the function for buying shares. Add the following code just above the line beginning with `site.run`:\n\n```python\n@site.route('/buy', methods=['POST'])\ndef buy():\n    # Create shares key if it doesn't exist\n    if 'shares' not in db.keys():\n        db['shares'] = {}\n\n    # Extract values from form\n    ticker = request.form['ticker'][:5].upper()\n    price = float(request.form['price'])\n    shares = int(request.form['shares'])","metadata":{"id":1199}}],["1200",{"pageContent":"db['shares'] = {}\n\n    # Extract values from form\n    ticker = request.form['ticker'][:5].upper()\n    price = float(request.form['price'])\n    shares = int(request.form['shares'])\n\n    if ticker not in db['shares']: # buying these for the first time\n        db['shares'][ticker] = { 'total_shares': shares,\n                                 'total_cost': shares * price }\n\n        db['shares'][ticker]['purchases'] = [{ 'shares': shares,\n                                'price': price }]\n    else: # buying more\n        db['shares'][ticker]['total_shares'] += shares\n        db['shares'][ticker]['total_cost'] += shares * price\n        db['shares'][ticker]['purchases'].append({ 'shares': shares,\n                                        'price': price})\n\n    return redirect(url_for(\"index\"))\n```\n\nFirst, if necessary, we create an empty dictionary at the \"shares\" key of our `db` database. This code will only need to run the first time we buy shares.\n\nThen, we extract the ticker, price and number of shares from the form data, coercing each one into an appropriate format. We want stock tickers to be uppercase and [a maximum of five characters long](https://www.investopedia.com/terms/s/stocksymbol.asp), prices to include fractional amounts, and number of shares to be integers (though you could change that later to support [fractional shares](https://www.investopedia.com/terms/f/fractionalshare.asp)).\n\nFinally, we add our share purchase to the \"shares\" dictionary. This dictionary is made up of ticker symbol keys mapped to inner dictionaries, which in turn contain the following information:\n\n- The total number of shares owned.\n- The total cost of all shares purchased.\n- A list of individual purchases. Each purchase is a dictionary containing the number of shares purchased, and their unit price.\n\nThis may seem like a complicated structure, but it is necessary to allow users to buy shares in the same company at different prices. With some data added, our dictionary could look like this:\n\n```json\n{\n  \"AAPL\": {","metadata":{"id":1200}}],["1201",{"pageContent":"```json\n{\n  \"AAPL\": {\n    \"total_shares\": 15,\n    \"total_cost\": 1550,\n    \"purchases\": [\n      {\n        \"shares\": 10,\n        \"price\": 100\n      },\n      {\n        \"shares\": 5,\n        \"price\": 110\n      }\n    ]\n  },\n  \"MSFT\": {\n    \"total_shares\": 20,\n    \"total_cost\": 4000,\n    \"purchases\": [\n      {\n        \"shares\": 20,\n        \"price\": 200\n      }\n    ]\n  }\n}\n```\n\nIn the data above, we've bought 10 shares of Apple Inc (AAPL) at $100 per share, and 5 at $110 per share. We've also bought 20 shares of Microsoft Corporation (MSFT) at $200 per share. The `total_shares` and `total_cost` values could be derived from the list of purchases, but we're storing them in the database to avoid having to recalculate them unnecessarily.\n\nRun your code now, and add a few stocks with random values. You can use some example tickers: AAPL, MSFT, AMZN, FB, GOOG. While our purchases won't show up on our dashboard, you can determine whether they're getting added to the database by visiting the database tab on your repl's sidebar. If your code is correct, you should see non-zero values under the \"STORAGE\" heading.\n\nAt the moment, our dashboard will also allow you to add any value as a ticker symbol, even if it's not a real public company. And, needless to say, our dashboard also doesn't show us the current value of our stocks. We'll fix those issues soon, but first we need to implement some functionality to help us test.\n\n## Flushing the Database\n\nA persistent database is vital for creating most useful web applications, but it can get messy in the early stages of development when we're adding a lot of different test data and experimenting with different structures. That's why it's useful to have a quick and easy way to delete everything.\n\nWe've already included a link to flush the database in our `index.html` file, so now let's create the backend functionality in Flask. Add this code to `main.py`, below the `buy` function:\n\n```python\n@site.route('/flush')\ndef flush_db():\n    del db[\"shares\"]","metadata":{"id":1201}}],["1202",{"pageContent":"```python\n@site.route('/flush')\ndef flush_db():\n    del db[\"shares\"]\n    return redirect(url_for(\"index\"))\n```\n\nHere we're deleting the `shares` key from our database and then redirecting the user to the dashboard. As `shares` is the only key in our database, this code will suffice for now, but if we add more keys, we'll have to change it accordingly.\n\nTest this new functionality out by flushing your database before moving on to the next section, especially if you have invalid stock tickers. You can confirm whether the flush worked by checking the database tab of your repl's sidebar, where the values under \"STORAGE\" should now be zero. Note that deletion may take a few seconds to reflect.\n\n## Serving Our Portfolio Data\n\nWe want our dashboard to be a live display that fetches new stock prices periodically, without us having to refresh the page. It would also be nice to unload calculations such as percentage gain or loss to the client's web browser, so we can reduce load on our server. To this end, we will be structuring our portfolio viewing functionality as an API endpoint that is queried by JavaScript code, rather than using Jinja templates to build it on the server-side.\n\nThe first thing we must do to achieve this is to create a Flask endpoint that returns the user's portfolio. We'll do this at `/portfolio`. Add the following code to `main.py`, below the `buy` function:\n\n```python\n@site.route('/portfolio')\ndef portfolio():\n    if \"shares\" not in db.keys():\n        return jsonify({})\n\n    portfolio = json.loads(db.get_raw(\"shares\"))\n\n    # Get current values\n    for ticker in portfolio.keys():\n        current_price = float(get_price(ticker))\n        current_value = current_price * portfolio[ticker]['total_shares']\n        portfolio[ticker]['current_value'] = current_value\n\n    return jsonify(**portfolio)\n```","metadata":{"id":1202}}],["1203",{"pageContent":"current_value = current_price * portfolio[ticker]['total_shares']\n        portfolio[ticker]['current_value'] = current_value\n\n    return jsonify(**portfolio)\n```\n\nThe purpose of this function is to serve a [JSON object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON) of the shares portfolio to the client. Later, we'll write JavaScript for our dashboard which will use this object to construct a table showing our portfolio information.\n\nIn the above code, if no stocks have been added, we return an empty JSON object. Otherwise, we set `portfolio` to a copy of the `shares` dictionary in our Replit database. The Python Replit library uses custom list and dictionary types that cannot be directly serialized into JSON, so we use [`db.get_raw`](https://replit-py.readthedocs.io/en/latest/db_tutorial.html#advanced-usage) to convert the whole thing into a string and `json.loads` to convert that string into a standard Python dictionary.\n\nThen we need to get the current values for each of our stock holdings. To do so, we loop through `portfolio.keys()`, call `get_price(ticker)` and multiply the return value by the total shares we're holding for this stock. We then add this value under the new `current_value` key in our stock's dictionary.\n\nFinally, we convert our portfolio dictionary to JSON using Flask's [`jsonify`](https://flask.palletsprojects.com/en/2.0.x/api/#module-flask.json) and return it.\n\nThere's just one problem: we haven't implemented `get_price` yet! Let's do that now, before we try to run this code.\n\n## Fetching Current Prices","metadata":{"id":1203}}],["1204",{"pageContent":"There's just one problem: we haven't implemented `get_price` yet! Let's do that now, before we try to run this code.\n\n## Fetching Current Prices\n\nWe'll fetch the current prices of our stocks by [scraping](https://en.wikipedia.org/wiki/Web_scraping) the [Yahoo Finance](https://finance.yahoo.com/) website. While the more traditional and foolproof way of consuming structured data such as share prices is to use an [API](https://en.wikipedia.org/wiki/API) that provides structured data in a computer-ready format, this is not always feasible, as the relevant APIs may be limited or even non-existent. For these and other reasons, web scraping is a useful skill to have.\n\n**A quick disclaimer before we jump in:** Copyright law and web scraping laws are complex and differ by country. As long as you aren't blatantly copying their content or doing web scraping for commercial gain, people generally don't mind web scraping. However, there have been some legal cases involving scraping data from LinkedIn, and media attention from scraping data from OKCupid. Web scraping can violate the law, go against a particular website's terms of service, or breach ethical guidelines – so take care with where you apply this skill.\n\nAdditionally, from a practical perspective, web scraping code is usually brittle and likely to break in the event that a scraped site changes its appearance.\n\nWith those considerations in mind, let's start scraping. We'll use [Python Requests](https://docs.python-requests.org/en/master/) to fetch web pages and [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/) to parse them and extract the parts we're interested in. Let's import those at the top of `main.py`.\n\n```python\nfrom bs4 import BeautifulSoup\nimport requests\n```\n\nNow we can create our `get_price` function. Enter the following code near the top of `main.py`, just below `site = Flask(__name__)`:\n\n```python\ndef get_price(ticker):\n    page = requests.get(\"https://finance.yahoo.com/quote/\" + ticker)","metadata":{"id":1204}}],["1205",{"pageContent":"```python\ndef get_price(ticker):\n    page = requests.get(\"https://finance.yahoo.com/quote/\" + ticker)\n    soup = BeautifulSoup(page.text, \"html5lib\")\n\n    price = soup.find('fin-streamer', {'class':'Fw(b) Fz(36px) Mb(-4px) D(ib)'}).text\n\n    # remove thousands separator\n    price = price.replace(\",\", \"\")\n\n    return price\n```\n\nThe first line fetches the page on Yahoo Finance that shows information about our stock share price. For example, the link below will show share price information for Apple Inc:\n\n[https://finance.yahoo.com/quote/AAPL](https://finance.yahoo.com/quote/AAPL)\n\nWe then load the page into a Beautiful Soup object, parsing it as HTML5 content. Finally, we need to find the price. If you visit the above page in your browser, right-click on the price near the top of the page and select \"Inspect\". You'll notice that it's inside a `fin-streamer` element with a class value containing `Fw(b) Fz(36px) Mb(-4px) D(ib)`. If the market is open, and the price is changing, additional classes may be added and removed as you watch, but the previously mentioned value should still be sufficient.\n\nWe use Beautiful Soup's [`find`](<https://www.crummy.com/software/BeautifulSoup/bs3/documentation.html#find(name,%20attrs,%20recursive,%20text,%20**kwargs)>) method to locate this `fin-streamer`. The `text` attribute of the object returned is the price we want. Before returning it, we remove any comma thousands separators to avoid float conversion errors later on.\n\nAlthough we've implemented this functionality for the sake of portfolio viewing, we can also use it to improve our share buying process. We'll make a few additional quality-of-life changes at the same time. Find your `buy` function code and modify it to look like this:\n\n```python\n@site.route('/buy', methods=['POST'])\ndef buy():\n    # Create shares key if it doesn't exist\n    if 'shares' not in db.keys():\n        db['shares'] = {}\n\n    ticker = request.form['ticker']\n\n    # remove starting $\n    if ticker[0] == '$':\n        ticker = ticker[1:]","metadata":{"id":1205}}],["1206",{"pageContent":"if 'shares' not in db.keys():\n        db['shares'] = {}\n\n    ticker = request.form['ticker']\n\n    # remove starting $\n    if ticker[0] == '$':\n        ticker = ticker[1:]\n\n    # uppercase and maximum five characters\n    ticker = ticker.upper()[:5]\n\n    current_price = get_price(ticker)\n    if not get_price(ticker): # reject invalid tickers\n        return f\"Ticker $'{ticker}' not found\"\n\n    if not request.form['price']: # use current price if price not specified\n        price = float(current_price)\n    else:\n        price = float(request.form['price'])\n\n    if not request.form['shares']: # buy one if number not specified\n        shares = 1\n    else:\n        shares = int(request.form['shares'])\n\n    if ticker not in db['shares']: # buying these for the first time\n        db['shares'][ticker] = { 'total_shares': shares,\n                                 'total_cost': shares * price }\n\n        db['shares'][ticker]['purchases'] = [{ 'shares': shares,\n                                'price': price }]\n    else: # buying more\n        db['shares'][ticker]['total_shares'] += shares\n        db['shares'][ticker]['total_cost'] += shares * price\n        db['shares'][ticker]['purchases'].append({ 'shares': shares,\n                                        'price': price})\n\n    return redirect(url_for(\"index\"))\n```\n\nThe first change we've made to this function is to strip leading `$`s on ticker symbols, in case users include those. Then, by calling `get_price` in this function, we can both prevent users from adding invalid stock tickers and allow users to record purchases at the current price by leaving the price field blank. Additionally, we'll assume users want to buy just one share if they leave the number of shares field blank.\n\nWe can now test out our code. Run your repl, add some stocks, and then, in a separate tab, navigate to this URL (replacing the two ALL-CAPS values first):\n\n```\nhttps://YOUR-REPL-NAME--YOUR-USERNAME.repl.co/portfolio\n```","metadata":{"id":1206}}],["1207",{"pageContent":"```\nhttps://YOUR-REPL-NAME--YOUR-USERNAME.repl.co/portfolio\n```\n\n_Note: Please refer to [these docs](/hosting/hosting-web-pages.md#end-of-dot-style-domains) to ensure that you are using the correct repl.co domain format._\n\nYou should now see a JSON object similar to the database structure detailed above, with the current value of each stock holding as an additional field. In the next section, we'll display this data on our dashboard.\n\n## Showing Our Portfolio\n\nWe will need to write some JavaScript to fetch our portfolio information, assemble it into a table, and calculate the percentage changes for each stock as well as our portfolio's total cost, current value and percentage change.\n\nAdd the following code just above the closing `</body>` tag in `templates/index.html`:\n\n```html\n<script>\n  function getPortfolio() {\n    fetch(\"/portfolio\")\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n      });\n  }\n\n  getPortfolio();\n</script>\n```\n\nThis code uses the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to query our `/portfolio` endpoint and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise), which we feed into two [`then`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) methods. The first one extracts the JSON data from the response, and the second one logs the data to JavaScript console. This is a common pattern in JavaScript, which provides a lot of [asynchronous](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts) functionality.\n\nRun your repl and open its web page in a new tab.\n\n![Opn in new tab](https://docimg.replit.com/images/tutorials/22-stock-market/replit-browser-open-in-new-tab.png)\n\nThen open your browser's devtools with F12, and you should see your portfolio JSON object in the console. If you don't, give it a few seconds.","metadata":{"id":1207}}],["1208",{"pageContent":"Then open your browser's devtools with F12, and you should see your portfolio JSON object in the console. If you don't, give it a few seconds.\n\n![In browser console](https://docimg.replit.com/images/tutorials/22-stock-market/json-portfolio-in-browser-console.png)\n\nNow let's add the rest of our JavaScript code. Delete `console.log(data);` and add the following code in its place:\n\n```javascript\nvar table = document.getElementById(\"portfolio\");\nvar tableHTML = `<tr>\n    <th>Ticker</th>\n    <th>Number of shares</th>\n    <th>Total cost</th>\n    <th>Current value</th>\n    <th>Percent change</th>\n</tr>`;\n\nvar portfolioCost = 0;\nvar portfolioCurrent = 0;\n\nfor (var ticker in data) {\n  var totalShares = data[ticker][\"total_shares\"];\n  var totalCost = data[ticker][\"total_cost\"];\n  var currentValue = data[ticker][\"current_value\"];\n  var percentChange = percentChangeCalc(totalCost, currentValue);\n\n  row = \"<tr>\";\n  row += \"<td>$\" + ticker + \"</td>\";\n  row += \"<td>\" + totalShares + \"</td>\";\n  row += \"<td>$\" + totalCost.toFixed(2) + \"</td>\";\n  row += \"<td>$\" + currentValue.toFixed(2) + \"</td>\";\n  row += percentChangeRow(percentChange);\n  row += \"</tr>\";\n  tableHTML += row;\n\n  portfolioCost += totalCost;\n  portfolioCurrent += currentValue;\n}\n\nportfolioPercentChange = percentChangeCalc(portfolioCost, portfolioCurrent);\n\ntableHTML += \"<tr>\";\ntableHTML += \"<th>Total</th>\";\ntableHTML += \"<th>&nbsp;</th>\";\ntableHTML += \"<th>$\" + portfolioCost.toFixed(2) + \"</th>\";\ntableHTML += \"<th>$\" + portfolioCurrent.toFixed(2) + \"</th>\";\ntableHTML += percentChangeRow(portfolioPercentChange);\ntableHTML += \"</tr>\";\n\ntable.innerHTML = tableHTML;\n```","metadata":{"id":1208}}],["1209",{"pageContent":"tableHTML += \"<th>$\" + portfolioCurrent.toFixed(2) + \"</th>\";\ntableHTML += percentChangeRow(portfolioPercentChange);\ntableHTML += \"</tr>\";\n\ntable.innerHTML = tableHTML;\n```\n\nThis code constructs an [HTML table](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) containing the values queried from our portfolio endpoint, as well as the extra calculated values we mentioned above. We use the [`toFixed`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) method to cap the number of decimal places for financial values to two.\n\nWe also use a couple of helper functions for calculating and displaying percentage changes. Add the code for these above the `getPortfolio` function declaration:\n\n```javascript\nfunction percentChangeCalc(x, y) {\n  return x != 0 ? ((y - x) * 100) / x : 0;\n}\n\nfunction percentChangeRow(percentChange) {\n  if (percentChange > 0) {\n    return \"<td class='positive'>\" + percentChange.toFixed(2) + \"%</td>\";\n  } else if (percentChange < 0) {\n    return \"<td class='negative'>\" + percentChange.toFixed(2) + \"%</td>\";\n  } else {\n    return \"<td>\" + percentChange.toFixed(2) + \"%</td>\";\n  }\n}\n```\n\nThe `percentChangeCalc` function calculates the percentage difference between two numbers, avoiding division by zero. The `percentChangeRow` function allows us to style gains and losses differently by adding classes that we've already declared in the page's CSS.\n\nFinally, we need to add some code to periodically refetch our portfolio, so that we can see the newest price data. We'll use JavaScript's [`setInterval`](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals#setinterval) function for this. Add the following code just above the closing `</script>` tag.\n\n```javascript\n// refresh portfolio every 60 seconds\nsetInterval(function () {\n  getPortfolio();\n}, 60000);\n```\n\nRun your repl, add some stocks if you haven't, and you should see something like this:","metadata":{"id":1209}}],["1210",{"pageContent":"```javascript\n// refresh portfolio every 60 seconds\nsetInterval(function () {\n  getPortfolio();\n}, 60000);\n```\n\nRun your repl, add some stocks if you haven't, and you should see something like this:\n\n![Dashboard with portfolio](https://docimg.replit.com/images/tutorials/22-stock-market/dashboard-with-portfolio.png)\n\nFrom this point on, we highly recommend viewing your application in a new browser tab rather than Replit's in-page browser, to get the full-page dashboard experience.\n\n## Caching\n\nOur dashboard is feature-complete, but a bit slow. As we're rendering it with client-side JavaScript that has to execute in the user's browser, we won't be able to make it load instantly with the rest of the page, but we can do some server-side caching to speed it up a little and reduce the load on our repl.\n\nCurrently, whenever we send a request to the `/portfolio` endpoint, we execute `get_price` on each of our stocks and rescrape Yahoo Finance to find their prices. Under normal conditions, stock prices are unlikely to change significantly moment-to-moment, and our dashboard is not a [high-frequency trading](https://www.investopedia.com/ask/answers/09/high-frequency-trading.asp) platform, so we should write some logic to store the current share price and only renew it if it's more than 60 seconds old. Let's do this now.\n\nAs we're going to be modifying the database structure in this section, it's a good idea to flush your repl's database before going any further, so as to avoid errors.\n\nFirst, we'll import the `time` module, near the top of `main.py`.\n\n```python\nimport time\n```\n\nThis allows us to use `time.time()`, which returns the current [Unix Epoch](https://www.epochconverter.com/), a useful value for counting elapsed time in seconds. Add the following code to the `buy` function, just above the `return` statement:\n\n```python\n    db['shares'][ticker]['current_price'] = current_price\n    db['shares'][ticker]['last_updated'] = time.time()\n```","metadata":{"id":1210}}],["1211",{"pageContent":"```python\n    db['shares'][ticker]['current_price'] = current_price\n    db['shares'][ticker]['last_updated'] = time.time()\n```\n\nThis code will add the current share price for each ticker and when it was last updated to our database.\n\nNow we need to modify the `get_price` function to resemble the code below:\n\n```python\ndef get_price(ticker):\n\n    # use cache if price is not stale\n    if ticker in db[\"shares\"].keys() and time.time() < db[\"shares\"][ticker][\"last_updated\"]+60:\n        return db[\"shares\"][ticker][\"current_price\"]\n\n    page = requests.get(\"https://finance.yahoo.com/quote/\" + ticker)\n    soup = BeautifulSoup(page.text, \"html5lib\")\n\n    price = soup.find('fin-streamer', {'class':'Fw(b) Fz(36px) Mb(-4px) D(ib)'}).text\n\n    # remove thousands separator\n    price = price.replace(\",\", \"\")\n\n    # update price in db\n    if ticker in db[\"shares\"].keys():\n        db[\"shares\"][ticker][\"current_price\"] = price\n        db[\"shares\"][ticker][\"last_updated\"] = time.time()\n\n    return price\n```\n\nThe _if_ statement at the top will cause the function to return the current price recorded in our database if it has been fetched recently, and the two new lines near the bottom of the function will ensure that when a new price is fetched, it gets recorded in the database, along with an updated timestamp.\n\nYou can play around with different caching time periods in this function and different refresh intervals in the JavaScript code to find the right tradeoff between accurate prices and fast load times.\n\n## Where Next?\n\nOur stock dashboard is functional, and even useful to an extent, but there's still a lot more we could do with it. The following features would be good additions:\n\n- Support for fractional shares.\n- The ability to record the sale of shares.\n- Timestamps for purchase (and sale) records.\n- Support for cryptocurrencies, perhaps using data from [CoinMarketCap](https://coinmarketcap.com/).\n- The ability to create multiple portfolios or user accounts.\n- Graphs.","metadata":{"id":1211}}],["1212",{"pageContent":"- Support for cryptocurrencies, perhaps using data from [CoinMarketCap](https://coinmarketcap.com/).\n- The ability to create multiple portfolios or user accounts.\n- Graphs.\n\nYou can find the code for this tutorial in the repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/personal-finance-dashboard?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1212}}],["1213",{"pageContent":"# Spotify API tutorials\n\nThe folks over at [Data Designs](https://www.datadesigns.co.uk/contact) have created some interactive Replit tutorials based around building projects on the Spotify API. You can find them below.\n\n## [Spotify API project 1: Simple online mixtape](https://mixtape-tutorial.datadesigns.repl.co/)\n\nDuring this hands-on tutorial you'll learn how to use Python to:\n\n- collect data from web-based APIs\n- create a data-driven web application\n\nYou'll be working with the [Spotify API](https://developer.spotify.com/documentation/web-api/) to complete your own web app, using the [MixTape template](https://mixtape.datadesigns.repl.co/) and [Replit database](/misc/database). Here's a [completed example](https://mixtape-example.datadesigns.repl.co/).\n\n## [Spotify API project 2: Song seeder and analytics web app](https://seeder-tutorial.datadesigns.repl.co/)\n\nThis tutorial follows on from the [MixTape tutorial](https://mixtape-tutorial.datadesigns.repl.co/)\n\n- Object-oriented programming (creating classes and methods)\n- Processing, aggregating and analysing data using `pandas`\n- Data visualisation using `chartify` (a package based on `bokeh`)\n\nHere's an example of the [finished app](https://seeder.datadesigns.repl.co/).","metadata":{"id":1213}}],["1214",{"pageContent":"---\ntitle: Static site generator\n---\n\n# Create a static site generator with Python and Replit\n\nA static site generator (SSG) is a tool for building informational websites such as blogs and documentation repositories. SSGs allow technical users to build websites that are faster and more secure than ones running on dynamic platforms such as Wordpress, without having to write each HTML page.\n\nThere are many SSGs out there already, such as Jekyll and Hugo, but many people opt to write their own – either so that they fully understand it and can be more productive, or to meet custom needs.\n\nAfter this tutorial, you'll:\n\n- Be able to build a simple but flexible SSG in Python in under 100 lines of code.\n- Understand advanced file and directory handling.\n- Know how to build a configurable tool for technical users.\n\n![Example static site generator functionality](https://docimg.replit.com/images/tutorials/static-site-generator/generator_functionality.gif)\n\nAt the end, you'll have a full SSG that you can use as is or extend for your own requirements.\n\n## Building a proof of concept\n\nA basic SSG takes in a list of [Markdown](https://en.wikipedia.org/wiki/Markdown) files, converts them to HTML, and inserts them into different predefined HTML templates. Beyond that, most SSGs have the concept of [frontmatter](https://jekyllrb.com/docs/front-matter/) to define metadata such as title and publish date for each Markdown file. SSGs also usually have global configuration files, containing general information about the site such as its name and domain.\n\nBefore we start dealing with files, we're going to implement our SSG using strings. This will serve as an initial proof of concept.\n\n### Setting up and defining the flow\n\nWe'll start by defining the main functions we'll use. Create a new Python repl and enter the following code in `main.py`.\n\n![Creating a new Python repl](https://docimg.replit.com/images/tutorials/static-site-generator/new_repl.png)\n\n```python\ndef load_config():\n    pass\n\ndef load_content_items():\n    pass","metadata":{"id":1214}}],["1215",{"pageContent":"![Creating a new Python repl](https://docimg.replit.com/images/tutorials/static-site-generator/new_repl.png)\n\n```python\ndef load_config():\n    pass\n\ndef load_content_items():\n    pass\n\ndef load_templates():\n    pass\n\ndef render_site(config, content, templates):\n    pass\n\ndef main():\n    config = load_config()\n    content = load_content_items()\n    templates = load_templates()\n    render_site(config, content, templates)\n\nmain()\n```\n\nThis skeleton defines the program flow:\n\n1. Load the global site configuration.\n2. Load the content files containing Markdown and frontmatter.\n3. Load the HTML templates.\n4. Render the site using everything we've loaded above.\n\nThroughout this tutorial, we will keep to this flow, even as we expand and refine its individual elements.\n\n### Parsing content and templates\n\nNow we need to import some modules. At the top of `main.py`, enter the following line.\n\n```python\nimport markdown, jinja2, toml, re\n```\n\nAll four of these modules are essentially parsers:\n\n- `markdown`: This module will render Markdown.\n- `jinja2`: The [Jinja templating language](https://jinja.palletsprojects.com/en/2.11.x/), which we will use to create HTML templates that we can enhance with Python-esque code.\n- `toml`: We will use [TOML](https://github.com/toml-lang/toml) (Tom's Obvious, Minimal Language) for post frontmatter and global configuration.\n- `re`: We'll use Python's regular expressions (regex) module for some additional, very light, parsing not provided by the three packages above.\n\nNow that we have our parsers, let's add some content to parse. Add a TOML string for global site configuration at the top of the `main` function.\n\n```python\ndef main():\n    config_string = \"\"\"\n    title = \"My blog\"\n    \"\"\"\n```\n\nFor now, this just defines the title of our site. Change it to whatever you want. To load this config, we'll use `toml.loads` on its content. Go to the `load_config` function at the top of `main.py` and give it the following parameter and content.\n\n```python\ndef load_config(config_string):","metadata":{"id":1215}}],["1216",{"pageContent":"```python\ndef load_config(config_string):\n    return toml.loads(config_string)\n```\n\nTo use this function, go back to the `main` function and pass `config_string` to this line in the `main` function.\n\n```python\n    config = load_config(config_string)\n```\n\nNow let's create a couple of content strings below the config string. We're going to format these strings with a block of TOML metadata terminated by a row of five plus signs (`+++++`). The rest of the string will contain Markdown-formatted text. Add this block of code below the definition of `config_string` in the `main` function.\n\n```python\n    content_strings = [\"\"\"\ntitle = \"My first entry\"\ndate = 2021-02-14T11:47:00+02:00\n+++++\n\nHello, welcome to my **blog**\n\"\"\",\n\"\"\"\ntitle = \"My second entry\"\ndate = 2021-02-15T17:47:00+02:00\n+++++\n\nThis is my second post.\n\"\"\"]\n```\n\nWe'll parse these strings in our `load_content_items` function. Give the function a `content_strings` parameter and add the following code.\n\n```python\ndef load_content_items(content_strings):\n    items = []\n    for item in content_strings:\n        frontmatter, content = re.split(\"^\\s*\\+\\+\\+\\+\\+\\s*$\", item, 1, re.MULTILINE)\n        item = toml.loads(frontmatter)\n        item['content'] = markdown.markdown(content)\n\n        items.append(item)\n\n    # sort in reverse chronological order\n    items.sort(key=lambda x: x[\"date\"],reverse=True)\n\n    return items\n```\n\nHere we use a _for_ loop to construct a list of items from our item strings. For each one, we split up the frontmatter and content on a regular expression that will match a line of text containing five plus signs. We pass in `1` as `re.split`'s `maxsplit` parameter to ensure that we only split on the first matched line, and `re.MULTILINE` so that our regex will work correctly in a multiline string.\n\nWe then use `toml.loads()` to convert the frontmatter into a dictionary. Finally, we convert the Markdown in `content` into HTML and add it to the dictionary we just created. The result will be a dictionary that looks something like this:\n\n```python\n{","metadata":{"id":1216}}],["1217",{"pageContent":"```python\n{\n    'title': 'My first entry',\n    'date': datetime.datetime(2021, 2, 14, 11, 47, tzinfo=<toml.tz.TomlTz object at 0x7f4032da6eb0>),\n    'content': '<p>Hello, welcome to my <strong>blog</strong>.</p>'\n}\n```\n\nFinally, since this is a blog site, we're sorting our `items` dictionary in reverse chronological order. We do this by using Python's `list.sort` method's custom sort functionality to sort by each list entry's `date` value. The `key` parameter takes a function which it will pass each value into and use the return value to sort the list. For brevity, we've created an in-line anonymous function using a [lambda expression](https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions).\n\nBack in our `main` function, let's pass `content_strings` to the `load_content_items` function call.\n\n```python\n    content = load_content_items(content_strings)\n```\n\nNow let's create a template string below the content strings. This is just some HTML with Jinja code in `{{ }}` and `{% %}` blocks. Add this code block beneath the definition of `content_strings` in the `main` function.\n\n```python\n    template_string = \"\"\"\n<!DOCTYPE html>\n<html>\n    <body>\n        <h1>{{ config.title }}</h1>\n        {% for post in content %}\n        <article>\n            <h2>{{ post.title }}</h2>\n            <p>Posted at {{ post.date }}</p>\n            {{ post.content }}\n        </article>\n        {% endfor %}\n    </body>\n</html>\n\"\"\"\n```\n\nEach of the values inside `{{ }}` blocks is something we've assembled in the preceding code: `config.title` from the config strings, `content` from the content strings, and the individual values inside the Jinja [for loop](https://jinja.palletsprojects.com/en/2.11.x/templates/#for) from each item in the `content` list. Note that in Jinja, `post.title` is equivalent to `post[\"title\"]`.\n\nTo load this template, we will add the following parameter and code to the `load_templates` function.\n\n```python\ndef load_templates(template_string):\n    return jinja2.Template(template_string)\n```","metadata":{"id":1217}}],["1218",{"pageContent":"To load this template, we will add the following parameter and code to the `load_templates` function.\n\n```python\ndef load_templates(template_string):\n    return jinja2.Template(template_string)\n```\n\nWe'll also change the `load_templates` function invocation in the `main` function.\n\n```python\n    templates = load_templates(template_string)\n```\n\n### Rendering the site\n\nNow let's populate the template with our config and content data. We'll do this using the template's `render()` method. This method takes a list of keyword arguments which it will use to resolve the variable references template's `{{ }}` and `{% %}` blocks.\n\nIn the `render_site` function, add the following code:\n\n```python\ndef render_site(config, content, template):\n    print(template.render(config=config, content=content))\n```\n\nAs our `render_site` invocation in `main` already takes the correct arguments, we can run our code now. The result should look like this:\n\n```html\n<!DOCTYPE html>\n<html>\n  <body>\n    <h1>My blog</h1>\n\n    <article>\n      <h2>My second entry</h2>\n      <p>Posted at 2021-02-15 17:47:00+02:00</p>\n      <p>This is my second post.</p>\n    </article>\n\n    <article>\n      <h2>My first entry</h2>\n      <p>Posted at 2021-02-14 11:47:00+02:00</p>\n      <p>Hello, welcome to my <strong>blog</strong></p>\n    </article>\n  </body>\n</html>\n```\n\n![Proof of concept output](https://docimg.replit.com/images/tutorials/static-site-generator/poc_run.png)\n\nWe now have the core of our SSG. Modify the content of one of the content strings and the output will change. Add new variables to each content file's frontmatter and the template, and they will propagate through without any changes to the Python code.\n\nNext, let's create and ingest some files.\n\n## Blog generator\n\nFirst, we need to create a directory structure. In the file pane of your repl, create four directories: `content`, `content/posts`, `layout` and `static`. Your file pane should now look like this:\n\n![](https://docimg.replit.com/images/tutorials/static-site-generator/input-dirs.png)","metadata":{"id":1218}}],["1219",{"pageContent":"![](https://docimg.replit.com/images/tutorials/static-site-generator/input-dirs.png)\n\nWe will put our Markdown files in `content/posts`, our Jinja files in `layout` and unprocessed files like CSS stylesheets and images in `static`. We're using `content/posts` so we can create different content types later on, such as undated pages like \"About\".\n\n### Creating input files\n\nFirst, we'll create our config file `config.toml`. In addition to the title value, we'll give it a base URL based on our repl's URL.\n\n`config.toml`\n\n```\ntitle = \"My blog\"\nbaseURL = \"https://YOUR-REPL-NAME-HERE--YOUR-REPLIT-USERNAME.repl.co\"\n```\n\nReplace the all-caps text with the relevant values.\n\nNow let's put our content strings into post files. Create two files with the following content:\n\n`content/posts/first-post.md`\n\n```\ntitle = \"My first entry\"\ndate = 2021-02-14T11:47:00+02:00\n+++++\n\nHello, welcome to my **blog**.\n```\n\n`content/posts/second-post.md`\n\n```\ntitle = \"My second entry\"\ndate = 2021-02-15T17:47:00+02:00\n+++++\n\nThis is my second post.\n```\n\nMake as many additional posts as you want. Just remember to give each one a title, correctly formatted datestamp and some Markdown content. File names should be lowercase with no spaces, ending in the `.md` file extension.\n\nIn contrast to our proof of concept, this will be a multi-page website, so we're going to create three HTML files in our `layout` directory: `index.html`, `post.html` and `macros.html`.\n\n- `index.html` will be the template for our homepage, showing a list of blog posts in reverse chronological order.\n- `post.html` will be the template for post pages, containing their rendered Markdown content.\n- `macros.html` will not be a template, but a container file for Jinja [macros](https://jinja.palletsprojects.com/en/2.10.x/templates/#macros). These are reusable snippets of HTML that we can use in our templates.\n\nCreate three files and populate them as follows.\n\n`layout/index.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  {% import \"macros.html\" as macros %} {{ macros.head(config.title) }}\n  <body>","metadata":{"id":1219}}],["1220",{"pageContent":"Create three files and populate them as follows.\n\n`layout/index.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  {% import \"macros.html\" as macros %} {{ macros.head(config.title) }}\n  <body>\n    <h1>Posts</h1>\n    <ul>\n      {% for post in content.posts %}\n      <li>\n        <a href=\"{{ post.url }}\">{{ post.title }}</a> (posted at {{ post.date\n        }})\n      </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n\n`layout/post.html`\n\n```html\n<!DOCTYPE html>\n<html>\n  {% import \"macros.html\" as macros %} {{ macros.head(this.title) }}\n  <body>\n    <h1>{{ this.title }}</h1>\n    <p>Posted at {{ this.date }}</p>\n    {{ this.content }}\n    <p><a href=\"{{ config.baseURL }}\">Return to the homepage &#10558;</a></p>\n  </body>\n</html>\n```\n\n(`&#10558;` is the [HTML entity](https://developer.mozilla.org/en-US/docs/Glossary/Entity) for \"⤾\".)\n\n`layout/macros.html`\n\n```html\n{% macro head(page_title) -%}\n<head>\n  <title>{{ page_title }}</title>\n  <link rel=\"stylesheet\" href=\"/css/style.css\" />\n</head>\n{% endmacro -%}\n```\n\nThe only macro we've defined is `head`, which will generate an HTML `<head>` tag containing an appropriate title for the page as well as a link to our website's stylesheet. Let's create that now.\n\nIn the `static` directory, create a subdirectory called `css`. Then create a file called `style.css` in this subdirectory and add the following code.\n\n`static/css/style.css`\n\n```css\nh1 {\n  font-family: sans-serif;\n  margin-top: 2em;\n}\n\nbody {\n  font-family: serif;\n  margin: 0 auto;\n  max-width: 40em;\n  line-height: 1.2em;\n}\n```\n\nThese are a couple of small style adjustments to improve readability and differentiate our site from an unstyled page. Feel free to add your own touches.\n\n### Ingesting input files\n\nNow that we've created our input files, let's write some code in `main.py` to read them and create our website. To do this, we'll be iterating our proof-of-concept code.\n\nFirst, at the top of the file, let's import some new modules for dealing with reading and writing files and directories. Add the second line below the first in `main.py`.\n\n```python","metadata":{"id":1220}}],["1221",{"pageContent":"First, at the top of the file, let's import some new modules for dealing with reading and writing files and directories. Add the second line below the first in `main.py`.\n\n```python\nimport jinja2, markdown, toml, re\nimport os, glob, pathlib, shutil, distutils.dir_util\n```\n\nThen delete the `config_string`, `content_strings` and `template_string` definitions from the `main` function.\n\n### Ingesting site configuration\n\nFirst, let's ingest the configuration file. Change the `load_config` function as follows.\n\n```python\ndef load_config(config_filename):\n    with open(config_filename, 'r') as config_file:\n        return toml.loads(config_file.read())\n```\n\nNow change this line in the `main` function:\n\n```python\n    config = load_config(config_string)\n```\n\nTo this:\n\n```python\n    config = load_config(\"config.toml\")\n```\n\n### Ingesting posts\n\nNext, we will ingest the `content/posts` directory. Change the content of the `load_content_items` function as follows.\n\n```python\ndef load_content_items(content_directory):\n    items = []\n    for fn in glob.glob(f\"{content_directory}/*.md\"):\n        with open(fn, 'r') as file:\n            frontmatter, content = re.split(\"^\\+\\+\\+\\+\\+$\", file.read(), 1, re.MULTILINE)\n        item = toml.loads(frontmatter)\n        item['content'] = markdown.markdown(content)\n\n        items.append(item)\n\n    # sort in reverse chronological order\n    items.sort(key=lambda x: x[\"date\"],reverse=True)\n\n    return items\n```\n\nInstead of looping through a list of strings, we're now looping through all files ending in `.md` in the `content/posts` directory using the [`glob`](https://docs.python.org/3/library/glob.html) method and parsing their contents.\n\nSince we're now building a real site with multiple pages, we'll need to add a couple of additional attributes to our `post` dictionary. Namely, `slug` and `url`.\n\n- `slug` will be the name of the post's Markdown file without the `.md` extension.","metadata":{"id":1221}}],["1222",{"pageContent":"- `slug` will be the name of the post's Markdown file without the `.md` extension.\n- `url` will be a partial URL including the post's date and slug. For the first post, it will look like this: `/2021/02/14/first-post/`\n\nLet's create the slug by using `os.path.basename` to get our file's filename without its full path (i.e. `first-post.md` rather than `content/posts/first-post.md`). Then we'll use `os.path.splitext` on the result to split the filename and extension, and we'll discard the extension. Add the following line to the _for_ loop, below where we define `item['content']`.\n\n```python\n    item['slug'] = os.path.splitext(os.path.basename(file.name))[0]\n```\n\nWe'll then use this slug along with our post's date to construct the full URL. We'll use Python's [string formatting](https://docs.python.org/3/library/string.html#string-formatting) to ensure correct zero-padding of single-digit values for months and days. Add this line below the one we just added:\n\n```python\n    item['url'] = f\"/{item['date'].year}/{item['date'].month:0>2}/{item['date'].day:0>2}/{item['slug']}/\"\n```\n\nNow we can update our function invocation in `main`. Change this line:\n\n```python\n    content = load_content_items(content_strings)\n```\n\nTo this:\n\n```python\n    content = { \"posts\": load_content_items(\"content/posts\") }\n```\n\nUsing a dictionary instead of a plain list will allow us to add additional content types in a later section of this tutorial.\n\n### Ingesting templates\n\nNow that we have a list of posts, let's ingest our templates so we have somewhere to put them. Jinja works quite differently from the file system and from strings, so we're going to change our `load_templates` function to create a Jinja [`Environment`](https://jinja.palletsprojects.com/en/2.11.x/api/#jinja2.Environment) with a [`FileSystemLoader`](https://jinja.palletsprojects.com/en/2.11.x/api/#loaders) that knows to look for templates in a particular directory. Change the function code as follows.\n\n```python\ndef load_templates(template_directory):","metadata":{"id":1222}}],["1223",{"pageContent":"```python\ndef load_templates(template_directory):\n    file_system_loader = jinja2.FileSystemLoader(template_directory)\n    return jinja2.Environment(loader=file_system_loader)\n```\n\nThen, in the `main` function, change this line:\n\n```python\n    template = load_templates(template_string)\n```\n\nTo this:\n\n```python\n    environment = load_templates(\"layout\")\n```\n\nIn the next section, we'll pass this environment to our `render_site` function where we'll load individual templates as we need them.\n\n### Writing output files\n\nNow let's render the site by writing some output files. We'll be using a directory named `public` for this, but you don't need to create this in your file pane – we'll do so in code. Go to the `render_site` function and replace its code with the following (remember to change the function parameters).\n\n```python\ndef render_site(config, content, environment, output_directory):\n    if os.path.exists(output_directory):\n        shutil.rmtree(output_directory)\n    os.mkdir(output_directory)\n```\n\nWe do two things here: remove the output directory and all of its content if it exists, and create a fresh output directory. This will avoid errors when running our code multiple times.\n\nNow let's write our home page by adding this code to the bottom of the function.\n\n```python\n    # Homepage\n    index_template = environment.get_template(\"index.html\")\n    with open(f\"{output_directory}/index.html\", 'w') as file:\n        file.write(index_template.render(config=config,content=content))\n```\n\nHere we use our Jinja environment to load the template at `layout/index.html`. We then open the `public/index.html` file and write to it the results of rendering `index_template` with our `config` and `content` dictionaries passed in.\n\nThe code for writing individual post files is a bit more complex. Add the _for_ loop below to the bottom of the function.\n\n```python\n    # Post pages\n    post_template = environment.get_template(\"post.html\")\n    for item in content[\"posts\"]:\n        path = f\"{output_directory}/{item['url']}\"","metadata":{"id":1223}}],["1224",{"pageContent":"```python\n    # Post pages\n    post_template = environment.get_template(\"post.html\")\n    for item in content[\"posts\"]:\n        path = f\"{output_directory}/{item['url']}\"\n        pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n        with open(path+\"index.html\", 'w') as file:\n            file.write(post_template.render(this=item, config=config, content=content))\n```\n\nFirst we create the directories necessary to show our post URLs. To display a URL such as `2021/02/14/first-post/`, we need to create a directory named `2021` inside `public`, and then nested directories named `02`, `14` and `first-post`. Inside the final directory, we create a file named `index.html` and write our rendered template to it.\n\nNote the values we pass to `render`: variables for this post are contained in `this` and site-wide configuration variables are contained in `config`. We also pass in `content` to allow us to access other posts. Although we aren't using this in the `post.html` template right now, it's good to have the option for future template updates.\n\nNow we need to load our static files. Add this code to the bottom of the `render_site` function:\n\n```python\n    # Static files\n    distutils.dir_util.copy_tree(\"static\", \"public\")\n```\n\nAll this code does is copy the file tree from our static directory into our public directory. This means that our CSS file at `static/css/style.css` can be accessed in our HTML templates as `css/style.css`. Similarly, if we create a file at `static/my-picture.jpg`, we can reference that in our HTML or Markdown as `my-picture.jpg` and it will be found and loaded.\n\nNow we just need to update the function invocation in our `main` function. Change this line:\n\n```python\n    render_site(config, content, templates)\n```\n\nTo this:\n\n```python\n    render_site(config, content, environment, \"public\")\n```","metadata":{"id":1224}}],["1225",{"pageContent":"```python\n    render_site(config, content, templates)\n```\n\nTo this:\n\n```python\n    render_site(config, content, environment, \"public\")\n```\n\nNow run the code. You should see the `public` directory appear in your file pane. Look inside, and you'll see the directories and files we just created. To see your site in action, run the following commands in Replit's \"Shell\" tab.\n\n```\ncd public\npython -m http.server\n```\n\n![Shell tab](https://docimg.replit.com/images/tutorials/static-site-generator/shell.png)\n\nThis should bring up the Replit web view with your home page, as below. Click on each of the links to visit the post pages.\n\n![Blog homepage](https://docimg.replit.com/images/tutorials/static-site-generator/homepage-blog.png)\n\nThis server will need to be restarted periodically as you work on your site.\n\n## Generic site generator\n\nIn addition to chronological blog posts, our site could do with undated pages, such as an \"About\" or \"Contact\" page. Depending on the kind of site we want to build, we may also want photo pages, or pages including podcast episodes, or any number of other things. If we give this SSG to someone else to use, they may have their own ideas as well – for example, they may want to make a site organised as a book with numbered chapters rather than as a blog. Rather than trying to anticipate everyone's needs, let's make it so we can create multiple types of content pages, and allow the user to define those types and how they should be ordered.\n\nThis is simpler than it sounds, but will require some refactoring.\n\n### Expanding the config file\n\nFirst, let's add some content to our `config.toml` file to give this customization a definite shape. Add these lines below the definition of `baseURL`.\n\n`config.toml`\n\n```toml\ntitle = \"My site\"\nbaseURL = \"https://YOUR-REPL-NAME-HERE--YOUR-REPLIT-USERNAME.repl.co\"\n\ntypes = [\"post\", \"page\"]\n\npost.dateInURL = true\npost.sortBy = \"date\"\npost.sortReverse = true\n\npage.dateInURL = false\npage.sortBy = \"title\"\npage.sortReverse = false\n```","metadata":{"id":1225}}],["1226",{"pageContent":"types = [\"post\", \"page\"]\n\npost.dateInURL = true\npost.sortBy = \"date\"\npost.sortReverse = true\n\npage.dateInURL = false\npage.sortBy = \"title\"\npage.sortReverse = false\n```\n\nHere we've told our site generator we want two kinds of pages – a _post_ type, which we will use for blog posts, and a _page_ type, which we will use for evergreen content such as contact details and general site information. Below that, we've used TOML's dictionary syntax to specify some characteristics of each type.\n\n- Posts will have a date in their URLs and will be sorted in reverse date order when listed.\n- Pages will not have a date in their URLs and will be sorted alphabetically by their title.\n\nBy creating these settings, we'll make it possible to sort a content type by any attribute in its frontmatter.\n\n### Ingesting user-defined content\n\nTo implement this, let's first import a new module at the top of `main.py`. Add the third line to your file, below the first two.\n\n```python\nimport jinja2, markdown, toml, re\nimport glob, pathlib, os, shutil, distutils.dir_util\nimport inflect\n```\n\nThe [`inflect`](https://pypi.org/project/inflect/) module allows us to turn singular words into plurals and vice versa. This will be useful for working with the `types` list from our configuration file. Change the `load_config` function to resemble the following.\n\n```python\ndef load_config(config_filename):\n\n    with open(config_filename, 'r') as config_file:\n        config = toml.loads(config_file.read())\n\n    ie = inflect.engine()\n    for content_type in config[\"types\"]:\n        config[content_type][\"plural\"] = ie.plural(content_type)\n\n    return config\n```\n\nThis code will expand the dictionaries we load from our config file with a key containing the type's plural. If we were to print out our `config` dictionary at this point, it would look like this:\n\n```python\n{\n    \"title\": \"My site\"\n    \"baseURL\": \"https://YOUR-REPL-NAME-HERE--YOUR-REPLIT-USERNAME.repl.co\"\n    \"types\": [\"post\", \"page\"]\n    \"post\": {\n        \"plural\": \"posts\",\n        \"dateInURL\": true,","metadata":{"id":1226}}],["1227",{"pageContent":"```python\n{\n    \"title\": \"My site\"\n    \"baseURL\": \"https://YOUR-REPL-NAME-HERE--YOUR-REPLIT-USERNAME.repl.co\"\n    \"types\": [\"post\", \"page\"]\n    \"post\": {\n        \"plural\": \"posts\",\n        \"dateInURL\": true,\n        \"sortBy\": \"date\",\n        \"sortReverse\": true\n    },\n    \"page\": {\n        \"plural\": \"pages\",\n        \"dateInURL\": true,\n        \"sortBy\": \"title\",\n        \"sortReverse\": false\n    }\n}\n```\n\n_Note: Please refer to [these docs](/hosting/hosting-web-pages.md#end-of-dot-style-domains) to ensure that you are using the correct repl.co domain format._\n\nNow let's modify `load_content_items` to deal with multiple, user-defined content types. First, we need to change the function to take our `config` dictionary as an additional parameter. Second, we'll put all of our function's current content in an inner function named `load_content_type`. Your function should now look like this:\n\n```python\ndef load_content_items(config, content_directory):\n\n    def load_content_type(content_type):\n        items = []\n        for fn in glob.glob(f\"{content_directory}/*.md\"):\n            with open(fn, 'r') as file:\n                frontmatter, content = re.split(\"^\\+\\+\\+\\+\\+$\", file.read(), 1, re.MULTILINE)\n\n            item = toml.loads(frontmatter)\n            item['content'] = markdown.markdown(content)\n            item['slug'] = os.path.splitext(os.path.basename(file.name))[0]\n            item['url'] = f\"/{item['date'].year}/{item['date'].month:0>2}/{item['date'].day:0>2}/{item['slug']}/\"\n\n            items.append(item)\n\n        # sort in reverse chronological order\n        items.sort(key=lambda x: x[\"date\"],reverse=True)\n\n        return items\n```\n\nTo load from the correct directory, we will need to change this line:\n\n```python\n        for fn in glob.glob(f\"{content_directory}/*.md\"):\n```\n\nTo this:\n\n```python\n        for fn in glob.glob(f\"{content_directory}/{config[content_type]['plural']}/*.md\"):\n```","metadata":{"id":1227}}],["1228",{"pageContent":"```python\n        for fn in glob.glob(f\"{content_directory}/*.md\"):\n```\n\nTo this:\n\n```python\n        for fn in glob.glob(f\"{content_directory}/{config[content_type]['plural']}/*.md\"):\n```\n\nHere we're using the plural of the content type we defined earlier. This will ensure that items of type \"post\" can be found in \"content/posts\" and items of type \"page\" can be found in \"content/pages\".\n\nWe now need to add code to respect our configuration settings. We'll do this by changing this line:\n\n```python\n            item['url'] = f\"/{item['date'].year}/{item['date'].month:0>2}/{item['date'].day:0>2}/{item['slug']}/\"\n```\n\nTo this:\n\n```python\n            if config[content_type][\"dateInURL\"]:\n                item['url'] = f\"/{item['date'].year}/{item['date'].month:0>2}/{item['date'].day:0>2}/{item['slug']}/\"\n            else:\n                item['url'] = f\"/{item['slug']}/\"\n```\n\nNow we'll sort according to the configuration file by changing this line:\n\n```python\n    # sort in reverse chronological order\n    items.sort(key=lambda x: x[\"date\"],reverse=True)\n```\n\nTo this:\n\n```python\n    # sort according to config\n    items.sort(key=lambda x: x[config[content_type][\"sortBy\"]],\n               reverse=config[content_type][\"sortReverse\"])\n```\n\nWe can complete this `load_content_items` function by writing some code to iterate through our site's configured content types, calling `load_content_type` for each one. Add the following code below the definition of `load_content_type` (ensure that it's de-indented so as to be part of `load_content_items`).\n\n```python\n    content_types = {}\n    for content_type in config[\"types\"]:\n        content_types[config[content_type]['plural']] = load_content_type(content_type)\n\n    return content_types\n```\n\nThen in the `main` function, change this line:\n\n```python\n    content = { \"posts\": load_content_items(\"content/posts\") }\n```\n\nTo this:\n\n```python\n    content = load_content_items(config, \"content\")\n```\n\n### Rendering user-defined content","metadata":{"id":1228}}],["1229",{"pageContent":"```python\n    content = { \"posts\": load_content_items(\"content/posts\") }\n```\n\nTo this:\n\n```python\n    content = load_content_items(config, \"content\")\n```\n\n### Rendering user-defined content\n\nNow we need to change our output code in `render_site` to render each content type with its own template. As we did with `load_content_items`, we'll start by moving the post-creating _for_ loop into an inner function, this time named `render_type`. Alter your `render_site` function so that it resembles the following.\n\n```python\ndef render_site(config, content, environment, output_directory):\n\n    def render_type(content_type): # <-- new inner function\n        # Post pages\n        post_template = environment.get_template(\"post.html\")\n        for item in content[\"posts\"]:\n            path = f\"public/{item['url']}\"\n            pathlib.Path(path).mkdir(parents=True, exist_ok=True)\n            with open(path+\"index.html\", 'w') as file:\n                file.write(post_template.render(this=item, config=config))\n\n    if os.path.exists(output_directory):\n        shutil.rmtree(output_directory)\n    os.mkdir(output_directory)\n\n    for content_type in config[\"types\"]: # <-- new for loop\n        render_type(content_type)\n\n    # !!! post for loop moved to inner function above\n\n    # Homepage\n    index_template = environment.get_template(\"index.html\")\n    with open(\"public/index.html\", 'w') as file:\n        file.write(index_template.render(config=config, content=content))\n\n\n    # Static files\n    distutils.dir_util.copy_tree(\"static\", \"public\")\n```\n\nThen change this line in the `render_type` inner function that loads the post template:\n\n```python\n        post_template = environment.get_template(\"post.html\")\n```\n\nInto this line that loads a template for the provided content type:\n\n```python\n        template = environment.get_template(f\"{content_type}.html\")\n```\n\nAlter the _for_ loop below that line to use the content type's plural.\n\n```python\n        for item in content[config[content_type][\"plural\"]]:\n```","metadata":{"id":1229}}],["1230",{"pageContent":"```\n\nAlter the _for_ loop below that line to use the content type's plural.\n\n```python\n        for item in content[config[content_type][\"plural\"]]:\n```\n\nFinally, change `post_template` in the loop's final line to `template`.\n\n```python\n                file.write(template.render(this=item, config=config, content=content))\n```\n\n### Adding a new content type\n\nNow that we've done all that work to generify our code, all that's left is to create our pages. First, let's create a page template at `layout/page.html`. Use the following code.\n\n```html\n<!DOCTYPE html>\n<html>\n  {% import \"macros.html\" as macros %} {{ macros.head(this.title) }}\n  <body>\n    <h1>{{ this.title }}</h1>\n    {{ this.content }}\n    <p><a href=\"{{ config.baseURL }}\">Return to the homepage &#10558;</a></p>\n  </body>\n</html>\n```\n\nThis is just our `post.html` template without the date.\n\nNow create a new subdirectory in `content` called `pages`. Inside that subdirectory, create a file named `about.md` and put the following content in it.\n\n```\ntitle = \"About\"\n+++++\n\nThis website is built with Python, Jinja, TOML and Markdown.\n```\n\nThis is sufficient to create a new page at `/about/`, but it won't be linked anywhere. For that, we'll need to create a global navigation bar for our site. Create the following additional macro in `layout/macros.html`.\n\n```html\n{% macro navigation(pages) -%}\n<nav>\n  <ul>\n    {% for page in pages %}\n    <li><a href=\"{{ page.url }}\">{{ page.title }}</a></li>\n    {% endfor %}\n  </ul>\n</nav>\n{% endmacro -%}\n```\n\nThen include the macro in `index.html`, `page.html` and `post.html` by inserting the following code just underneath `{{ macros.head(this.title) }}`.\n\n```html\n{{ macros.navigation(content.pages) }}\n```\n\nFinally, add the CSS below to `static/css/style.css` to apply light styling to the navigation bar.\n\n```css\nnav ul {\n  list-style-type: none;\n  text-align: right;\n}\n```\n\nRun your code and preview your site with `cd public && python -m http.server` in the repl shell, and you should see something like this:","metadata":{"id":1230}}],["1231",{"pageContent":"```css\nnav ul {\n  list-style-type: none;\n  text-align: right;\n}\n```\n\nRun your code and preview your site with `cd public && python -m http.server` in the repl shell, and you should see something like this:\n\n![Static site generator functionality](https://docimg.replit.com/images/tutorials/static-site-generator/generator_functionality.gif)\n\n## Where to next?\n\nWe've created a flexible SSG capable of generating many different types of HTML pages, which can be served from any web server. Apart from fleshing out the templates and adding new content types, you might want to expand the generator's functionality to allow things like:\n\n- Categories or tags for content items.\n- Ability to generate an RSS or Atom feed for people to subscribe to.\n- A way to mark items as drafts, so they won't be included when the site is compiled.\n- Navigation features like next and previous item links.\n- Useful error messages for malformed directory structures and configuration files.\n\nYou can find our SSG repl below:\n\n<iframe height=\"800px\" width=\"100%\" src=\"https://replit.com/@ritza/python-static-side-generator?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1231}}],["1232",{"pageContent":"---\ntitle: \"Steganography: hiding messages in images\"\n---\n\n# Hiding messages in images: steganography with Python and Replit\n\nIn this tutorial, we'll build a steganography tool in Python. Steganography is the practice of hiding information within other data. Unlike encryption, where the goal is to secure _the contents_ of communication between two parties, steganography aims to obscure the fact that the parties are communicating at all.\n\nOur tool will enable the user to hide secret text within a normal-looking `.png` image file. The receiver of the image will use the same tool to reveal the hidden message.\n\nWe'll use Python to build the tool. The most popular Python image processing libraries are [Pillow](https://pypi.org/project/Pillow/) and [OpenCV](https://pypi.org/project/opencv-python/), but these are heavy libraries with many dependencies. We'll avoid these and instead use the lightweight [PyPNG](https://pypi.org/project/pypng/) library which is written in pure Python, and therefore easier to run on various platforms.\n\n## A quick background on steganography\n\nLet's imagine three people: Alice, Bob and Eve. Alice wants to send a private message to Bob, while Eve wants to intercept this message. While modern-day encryption can help Alice and Bob ensure that Eve doesn't know the _contents_ of their message, Eve can possibly still deduce interesting information just from knowing that Alice and Bob are communicating at all, and how frequently they communicate.\n\nTo obscure the communication channel completely, Alice and Bob can exploit the fact that hundreds of millions of photos are uploaded and shared across the internet daily. Instead of communicating directly, Alice can leave her message hidden in an image at a pre-agreed location and Bob can access this message. From Eve's perspective, there is now no direct communication between the two.","metadata":{"id":1232}}],["1233",{"pageContent":"A single image is made up of millions of pixels. While many formats exist, a pixel is most simply represented by a group of three numbers between 0 and 255, one number each for the red, blue, and green values of that pixel. Using this Red-Green-Blue scheme we can represent any colour in the [RGB color model](https://en.wikipedia.org/wiki/RGB_color_model).\n\nDigital text, like images, is also represented internally by numbers, so the differences between a text file and an image file are not as large as you might assume. Any digital data can be represented as a [binary string](https://thehelloworldprogram.com/computer-science/what-is-binary/), a bunch of 1s and 0s, and we can make tiny modifications to an image to encode a binary string within it. As an example, consider the following:\n\n```python\nimage = [(255, 0, 0), (0, 255, 0), (0, 0, 255)]\n```\n\nThis is a representation of an image with three pixels: one red, one green, and one blue. If we encode this as an image and open it in an image viewer, we'll see the three pixel image, but if we read this data with Python, it is simply a list of tuples, each containing three integers.\n\nWe could also look at each value making up each pixel and calculate whether it is _odd_ or _even_. We could encode odd numbers as `1` and even values as `0`. This would give us the binary string \"100 010 001\" (as the 255 values are odd and the 0s are even).\n\nIf we made a small modification to the image as follows:\n\n```python\nimage = [(254, 1, 1), (1, 255, 1), (1, 0, 254)]\n```\n\nThe image would look almost identical in any image viewer (we have just added or subtracted a minuscule amount of color from some values), but the binary string -- using our odd/even method -- would look completely different: \"011 111 100\".\n\nUsing this technique but extending it over an entire image (millions of pixels), we can hide a large amount of text data in any image.\n\n## Creating the project on Replit","metadata":{"id":1233}}],["1234",{"pageContent":"Using this technique but extending it over an entire image (millions of pixels), we can hide a large amount of text data in any image.\n\n## Creating the project on Replit\n\nIf you were serious about keeping your messages as secret as possible, you'd want to do all of these steps on an offline computer that you fully control. As a learning exercise though, we'll set the project up on [Replit](https://replit.com). Navigate to their site and sign up for an account if you don't have one.\n\nCreate a new project, choosing \"Python\" as the language, and give your project a name.\n\n![Creating a new repl](https://docimg.replit.com/images/tutorials/13-steganography/04-create-repl.png)\n\nThe first piece we need to build is a function to encode any text message as a binary string.\n\n## Encoding a text message as a binary string\n\nOpen the `main.py` file and add the following code\n\n```python\nimport base64\n\ndef encode_message_as_bytestring(message):\n    b64 = message.encode(\"utf8\")\n    bytes_ = base64.encodebytes(b64)\n    bytestring = \"\".join([\"{:08b}\".format(x) for x in bytes_])\n    return bytestring\n```\n\nThis first encodes our text as [base64](https://en.wikipedia.org/wiki/Base64) and then as a binary string. You can add some print statements to see how the message is transformed in the different steps, as shown below.\n\n![Encoding a message as a binary string](https://docimg.replit.com/images/tutorials/13-steganography/13-01-encode-binstring.png)\n\nThe base64 step is not strictly necessary, but it is useful as any file or data can be encoded as base64. This opens our project up to future extensions such as hiding other kinds of files within image files instead of just text strings.\n\n## Adding an 'end of message' delimiter\n\nWe'll assume that our message will always 'fit' in our image. We can fit three binary digits per pixel (one for each of the RGB values), so our resulting binary string should be shorter than the number of pixels in the image multiplied by three.","metadata":{"id":1234}}],["1235",{"pageContent":"We'll also need to know when the message _ends_. The message will only be encoded in the beginning of the image file, but if we don't know how long the message is, we'll keep looking at normal pixels and trying to encode them as text data. Let's add an \"end of string\" delimiter to the end of our message: this should be something that wouldn't appear half way through our actual message by chance. We'll use the binary representation of '!ENDOFMESSAGE!' for this.\n\nModify your function to look as follows, which adds this delimiter at the end.\n\n```python\nimport base64\n\nENDOFMESSAGE = \"0100100101010101010101100100111101010010010001010011100101000111010101000101010101010110010101000101010100110000010001100100100001010010010100110100010100111101\"\n\ndef encode_message_as_bytestring(message):\n    b64 = message.encode(\"utf8\")\n    bytes_ = base64.encodebytes(b64)\n    bytestring = \"\".join([\"{:08b}\".format(x) for x in bytes_])\n    bytestring += ENDOFMESSAGE\n    return bytestring\n```\n\nNow that we can handle some basic text encoding, let's look at images.\n\n## Getting pixels from an image\n\nFind a PNG image somewhere - either one you've taken yourself or from a site like unsplash. You can use any online JPG to PNG converter if you only have `.jpg` files available.\n\nUpload your PNG file by clicking on the three dot menu in the repl sidebar, in the top right corner of the files pane to the left, and selecting `upload file` or by simply dragging and dropping your file within the files pane.\n\n![Image showing file upload](https://docimg.replit.com/images/tutorials/13-steganography/05-upload-file.png)\n\nWe're going to write a function that extracts the raw pixel data from this image file. Add an import to the top of the file.\n\n```python\nimport png\n```\n\nAnd then add a new function to the bottom of `main.py`:\n\n```python\ndef get_pixels_from_image(fname):\n    img = png.Reader(fname).read()\n    pixels = img[2]\n    return pixels\n```\n\nThe `read()` method returns a 4‑tuple consisting of:\n\n- width: Width of PNG image in pixels","metadata":{"id":1235}}],["1236",{"pageContent":"def get_pixels_from_image(fname):\n    img = png.Reader(fname).read()\n    pixels = img[2]\n    return pixels\n```\n\nThe `read()` method returns a 4‑tuple consisting of:\n\n- width: Width of PNG image in pixels\n- height: Height of PNG image in pixels\n- rows: A sequence or iterator for the row data\n- info: An info dictionary containing some meta data\n\nWe are primarily interested in the third item, \"rows\", which is an iterator containing all the pixels of the image, row by row. If you're not familiar with Python generators take a look at [this guide](https://realpython.com/introduction-to-python-generators/), but they are essentially memory-efficient lists.\n\n## Encoding the image with the message\n\nNow that we have the encoded message and pixels of the image ready we can combine them to form our secret encoded image.\n\nAdd the following function to the bottom of the `main.py` file. This function takes in the outputs from the previous functions (our raw pixels and our message encoded as a binary string), and combines them.\n\n```python\ndef encode_pixels_with_message(pixels, bytestring):\n    '''modifies pixels to encode the contents from bytestring'''\n\n    enc_pixels = []\n    string_i = 0\n    for row in pixels:\n        enc_row = []\n        for i, char in enumerate(row):\n            if string_i >= len(bytestring):\n                pixel = row[i]\n            else:\n                if row[i] % 2 != int(bytestring[string_i]):\n                    if row[i] == 0:\n                        pixel = 1\n                    else:\n                        pixel = row[i] - 1\n                else:\n                    pixel = row[i]\n            enc_row.append(pixel)\n            string_i += 1\n\n        enc_pixels.append(enc_row)\n    return enc_pixels\n```","metadata":{"id":1236}}],["1237",{"pageContent":"else:\n                    pixel = row[i]\n            enc_row.append(pixel)\n            string_i += 1\n\n        enc_pixels.append(enc_row)\n    return enc_pixels\n```\n\nThis is the most complicated part of our project, but most of the code is there to handle edge cases. The important insight is that we want to control whether each pixel has an odd value (representing a 1 in our binary string) or an even one (to represent a 0). By chance, half of the pixel values will already have the correct value.\n\nWe simply loop through the binary string and the pixel and 'bump' each value that isn't correct by one. That is, we subtract 1 from the value if we need to change it from odd to even or vice versa. We don't want any negative numbers, so if we need to change any of the `0` values, we add 1 instead.\n\n### Writing our modified pixels back to an image\n\nWe now have all the image data, including the encoded message but it is still just a list of pixels. Let's add a function that will compile our pixels back into a PNG image.\n\nAdd the following function to the bottom of the `main.py` file.\n\n```python\ndef write_pixels_to_image(pixels, fname):\n    png.from_array(pixels, 'RGB').save(fname)\n```\n\nThe above function takes the array `pixels` and uses the `png` module to write these to a brand new `.png` file.\n\nPlay around with these functions to make sure you understand how they work. Before we write some wrapper code to actually use these, we're going to do everything backwards so that we can also extract hidden messages from previously encoded PNG files.\n\n## Decoding messages from image files\n\nFirst we need a function that can turn a binary string back into readable text. As before, we'll go via base64 for better compatibility. Add the following function to the bottom of the `main.py` file.\n\n```python\ndef decode_message_from_bytestring(bytestring):\n    bytestring = bytestring.split(ENDOFMESSAGE)[0]\n    message = int(bytestring, 2).to_bytes(len(bytestring) // 8, byteorder='big')","metadata":{"id":1237}}],["1238",{"pageContent":"```python\ndef decode_message_from_bytestring(bytestring):\n    bytestring = bytestring.split(ENDOFMESSAGE)[0]\n    message = int(bytestring, 2).to_bytes(len(bytestring) // 8, byteorder='big')\n    message = base64.decodebytes(message).decode(\"utf8\")\n    return message\n```\n\nRemember how we added a special `ENDOFMESSAGE` delimiter above? Here we first split our string on that so we don't look for text in random data (pixels from the unmodified part of the image) and then go backwards through our encoding pipe: first to base64 and then to text.\n\nWe also need a way to extract the bytestring from an image. Add the following function to `main.py` to do this.\n\n```python\ndef decode_pixels(pixels):\n    bytestring = []\n    for row in pixels:\n        for c in row:\n            bytestring.append(str(c % 2))\n    bytestring = ''.join(bytestring)\n    message = decode_message_from_bytestring(bytestring)\n    return message\n```\n\nOnce again, this is just the reverse of what we did before. We grab the remainder of each value to get `1` for each odd value and `0` for each even one and keep them in a string. We then call our decode function to get the plaintext.\n\nThat's it for our encoding and decoding functions; next we'll put everything together in our `main()` function.\n\n## Adding a command line wrapper script\n\nAt this point, we could create a web application with a UI for people to add text to their images. Given the fact that people who want to do steganography probably won't trust a web application with their data, we'll rather create a command line application that people can run on their own machines.\n\nAdd the following to the top of your `main.py` file, right below the imports.\n\n```python\nPROMPT = \"\"\"\nWelcome to basic steganography. Please choose:\n\n1. To encode a message into an image\n2. To decode an image into a message\nq. To exit\n\"\"\"\n```\n\nNow let's write the `main()` function that puts it all together. Add the following to the end of the `main.py` file.\n\n```python\ndef main():\n    print(PROMPT)\n    user_inp = \"\"","metadata":{"id":1238}}],["1239",{"pageContent":"q. To exit\n\"\"\"\n```\n\nNow let's write the `main()` function that puts it all together. Add the following to the end of the `main.py` file.\n\n```python\ndef main():\n    print(PROMPT)\n    user_inp = \"\"\n    while user_inp not in (\"1\", \"2\", \"q\"):\n        user_inp = input(\"Your choice: \")\n\n    if user_inp == \"1\":\n        in_image = input(\"Please enter filename of existing PNG image: \")\n        in_message = input(\"Please enter the message to encode: \")\n\n        print(\"-ENCODING-\")\n        pixels = get_pixels_from_image(in_image)\n        bytestring = encode_message_as_bytestring(in_message)\n        epixels = encode_pixels_with_message(pixels, bytestring)\n        write_pixels_to_image(epixels, in_image + \"-enc.png\")\n\n    elif user_inp == \"2\":\n        in_image = input(\"Please enter the filename of an existing PNG image: \")\n        print(\"-DECODING-\")\n        pixels = get_pixels_from_image(in_image)\n        print(decode_pixels(pixels))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThe `main()` function above creates a prompt flow for the user to interact with the program. Depending on the input from the user, the program will call the relevant functions in order to either encode or decode a message. We also included a `q` for the user to close the program.\n\n## Where next?\n\nIf you have followed along you'll have your own repl to expand; if not you can fork [our repl](https://replit.com/@ritza/python-steganography) and work from there or test it out below.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/python-steganography?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1239}}],["1240",{"pageContent":"---\ntitle: Technical challenge site with replit.web\n---\n\n# Build a team technical challenge website with `replit.web`\n\nCode competitions and hackathons are a fun way to expand your programming skills, get exposed to new ideas, and work together to solve difficult problems. The time-limited, competitive nature of these competitions provides an additional challenge.\n\nIn this tutorial, we'll use the `replit.web` framework to build a leaderboard website for an online technical challenge in the vein of [Advent of Code](https://adventofcode.com/) or [Hackasat](https://www.hackasat.com/). We'll focus on the generic aspects of the site, such as teams, challenges and scores, so once we're done, you can use the site for your own competition.\n\n![Challenge site functionality](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/site-functionality.gif)\n\nBy the end of this tutorial, you'll be able to:\n\n- Use Replit's Flask-based web framework to rapidly develop authenticated web applications with persistent storage.\n- Use WTForms to create sophisticated web forms.\n- Use custom function decorators to handle multiple user roles.\n\n## Getting started\n\nTo get started, sign into [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Python repl.\n\n![Creating a new repl](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/create-python-repl.png)\n\nOur competition website will have the following functionality:\n\n- Users can sign in with their Replit accounts and either create a team or join an existing team. To join an existing team, a team password will be required.\n- Once they're in a team, users will be able to view challenges and submit challenge solutions. To keep things simple, we will validate challenge solutions by requiring users to submit a unique code per challenge.","metadata":{"id":1240}}],["1241",{"pageContent":"- A designated group of admin users will have the ability to add and remove challenges, start and end the competition, and clear the database for a new competition.\n\nLet's start off our competition application with the following module imports in `main.py`:\n\n```python\nfrom flask import Flask, render_template, flash, redirect, url_for, request\nfrom replit import db, web\n```\n\nHere we're importing a number of Flask features we'll need. We could just use `import flask` to import everything, but we'll be using most of these functions often enough that having to prepend them with `flask.` would quickly become tiresome. We're also importing Replit's `db` and `web` modules, which will give us data persistence and user authentication.\n\nNow let's create our app and initialize its database. Add the following code just below the import statements in `main.py`:\n\n```python\napp = Flask(__name__)\n\n# Secret key\napp.config['SECRET_KEY'] = \"YOUR-SECRET-KEY-HERE\"\n\n# Database setup\ndb_init()\nusers = web.UserStore()\n\nADMINS = [\"YOUR-REPLIT-USERNAME-HERE\"]\n```\n\nHere we initialize our application, our general and user databases, and our list of admins. Make sure to replace the string in `ADMINS` with your Replit username before proceeding. Also replace the secret key with a long, random string. You can generate one in your repl's Python console with the following two lines of code:\n\n```python\nimport random, string\n''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(20))\n```\n\n![Generating a random string](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/randomstring.png)\n\nYou'll notice that `db_init()` is undefined. As this is going to be a fairly large codebase, we're going to put it in a separate file. Create the file `db_init.py` in your repl's files tab:\n\n![Database init file](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/dbinit.png)\n\nAdd the following code to this file:\n\n```python\nfrom replit import db\n\ndef db_init():","metadata":{"id":1241}}],["1242",{"pageContent":"![Database init file](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/dbinit.png)\n\nAdd the following code to this file:\n\n```python\nfrom replit import db\n\ndef db_init():\n    if \"teams\" not in db.keys():\n        db[\"teams\"] = {}\n\n    if \"challenges\" not in db.keys():\n        db[\"challenges\"] = {}\n\n    if \"competition_started\" not in db.keys():\n        db[\"competition_started\"] = False\n```\n\n[Replit's Database](/hosting/databases/replit-database). Any values we store in `db` will persist between repl restarts.\n\nTo import this file in `main.py`, we can use an `import` statement in much the same way as we would for a module. Add this line in `main.py`, below your other imports:\n\n```python\nfrom db_init import db_init\n```\n\nWe've also defined a secondary database `users` in `main.py`. While `db` only contains what we put into it, `users` is a [UserStore](https://replit-py.readthedocs.io/en/latest/api.html) that will automatically have the names of users who sign into our application added as keys, so we can easily store and retrieve information about them.\n\nNow let's create some test content and run our app. Add the following code, and then run your repl.\n\n```python\n# Routes\n@app.route(\"/\")\n@web.authenticated\ndef index():\n    return f\"Hello {web.auth.name}\"\n\nweb.run(app)\n```\n\nBecause we've added the `@web.authenticated` [function decorator](https://realpython.com/primer-on-python-decorators/) to our index page, it will only be available to logged in users. You should see this now, as your app will show a login button. Click on that button, and authorize your application to use Replit authentication in the window that pops up.\n\n![Login Button](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/login-button.png)\n\nHaving done that, you should now see the greeting we implemented above. If you send your repl to a friend, they will also be able to log in, and see their own Replit username on the greeting message.\n\n## Creating user roles","metadata":{"id":1242}}],["1243",{"pageContent":"## Creating user roles\n\nFunction decorators like `@web.authenticated`, which prevent a function from executing unless certain conditions are met, are very useful for web applications like this one, in which we want to restrict certain pages based on who's attempting to view them. `@web.authenticated` restricts users based on _authentication_ -- who a user is. We can now create our own decorators to restrict users based on _authorization_ -- what a user is allowed to do.\n\nFor this site, we're concerned about three things:\n\n- Is the user in a team? Users who aren't need to be able to create or join a team, and users who are need to be able to submit challenge solutions.\n- Is the user an admin? Users who are need to be able to create challenges, and perform other administrative tasks. For the sake of fairness, they should not be allowed to join teams themselves.\n- Is the competition running? If not, we don't want non-admin users to be able to view challenge pages or attempt to submit solutions.\n\nFirst, we'll create two helper functions to answer these questions. Add the following code to `main.py`, just below your ADMINS list:\n\n```python\n# Helper functions\ndef is_admin(username):\n    return username in ADMINS\n\ndef in_team(username):\n    if \"team\" in users[username].keys():\n        return users[username][\"team\"]\n```\n\nThe `is_admin()` function will return `True` if the provided user is an admin, or `False` otherwise. The function `in_team()` will return the name of the team the user is in, or `None` if they aren't in a team.\n\nNow we can create our authorization function decorators. Add the following import function to the top of `main.py`:\n\n```python\nfrom functools import wraps\n```\n\nThen add this code below our helper functions:\n\n```python\n# Authorization decorators\ndef admin_only(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if not is_admin(web.auth.name):\n            flash(\"Permission denied.\", \"warning\")\n            return redirect(url_for(\"index\"))","metadata":{"id":1243}}],["1244",{"pageContent":"@wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if not is_admin(web.auth.name):\n            flash(\"Permission denied.\", \"warning\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n```\n\nThis code may look a bit strange if you haven't written your own decorators before. Here's how it works: `admin_only` is the name of our decorator. You can think of decorators as functions which take other functions as arguments. (The code coming up is example code for the purpose of illustration, and not part of our program.) Therefore, if we write the following:\n\n```python\n@admin_only\ndef admin_function():\n    return f\"Hello admin\"\n\nadmin_function()\n```\n\nit will be roughly equivalent to:\n\n```python\ndef admin_function():\n    return f\"Hello admin\"\n\nadmin_only(admin_function)\n```\n\nSo whenever `admin_function` gets called, the code we've defined in `decorated_function` will execute before anything we define in `admin_function`. This means we don't have to include an `if not is_admin` check in every piece of admin functionality. As per the code, if a non-admin attempts to access restricted functionality, our app will [flash](https://flask.palletsprojects.com/en/2.0.x/patterns/flashing/) a warning message and redirect them to the home page.\n\nWe also need to define a decorator for the opposite case, where we need to ensure that the current user is not an admin. Add the following code just below the `# Authorization decorators` code you added above:\n\n```python\ndef not_admin_only(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if is_admin(web.auth.name):\n            flash(\"Admins can't do that.\", \"warning\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n```\n\nWe will do much the same thing for `team_only` and `not_team_only`:\n\n```python\ndef team_only(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if not in_team(web.auth.name):","metadata":{"id":1244}}],["1245",{"pageContent":"```\n\nWe will do much the same thing for `team_only` and `not_team_only`:\n\n```python\ndef team_only(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if not in_team(web.auth.name):\n            flash(\"Join a team first!\", \"warning\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n\ndef not_team_only(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if in_team(web.auth.name):\n            flash(\"You've already joined a team!\", \"warning\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n```\n\nFinally, we need to add a decorator to check whether our competition is running. This is mainly for challenge description pages, so we'll add an exception for non-admin users:\n\n```python\ndef competition_running(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if not (is_admin(web.auth.name) or db[\"competition_started\"]):\n            flash(\"The competition has not started yet.\")\n            return redirect(url_for(\"index\"))\n\n        return f(*args, **kwargs)\n\n    return decorated_function\n```\n\nNow that we've added our authorization controls, it's time to give them something to authorize. In the next sections, we'll define all of our app's functionality and build its front-end.\n\n## Building forms\n\nThe bulk of interactivity in our application will be enabled through forms. Users will be able to create and join teams, as well as submit challenge solutions. When we work with web forms, there's a lot to consider, including:\n\n- Which users should be able to submit which forms (authorization)?\n- What validation do we want on different fields? For example, length requirements, or ensuring a given value is an integer rather than a string.\n- How do we give feedback on data that doesn't pass our validations?","metadata":{"id":1245}}],["1246",{"pageContent":"- How do we give feedback on data that doesn't pass our validations?\n- Security concerns around user input, such as [SQL injection](https://owasp.org/www-community/attacks/SQL_Injection), [cross-site scripting](https://owasp.org/www-community/attacks/xss/) and [cross-site request forgery](https://owasp.org/www-community/attacks/csrf). While the first one won't be relevant to our app, the second two are.\n\nWe could build all of this ourselves using Flask's `request.form` as a basis, but fortunately someone else has already done the hard work and built the [WTForms](https://wtforms.readthedocs.io/en/2.3.x/) library, as well as [Flask WTF](https://flask-wtf.readthedocs.io/en/0.15.x/), which integrates `WTForms` with Flask. We'll be using both of these to construct our application's various forms.\n\nTo keep our codebase navigable, we'll put all our form code in a separate file, like we did with our database initialization code. Create `forms.py` in your repl's files tab now:\n\n![Building forms](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/forms.png)\n\nWe'll start this file off with some imports:\n\n```python\nfrom replit import db\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, TextAreaField, SubmitField, PasswordField, SelectField, IntegerField, ValidationError\nfrom wtforms.validators import InputRequired, NumberRange, Length\n```\n\nHere we import our Replit database, which we'll need for uniqueness validations, as well as everything we'll be using from WTForms and Flask WTF.\n\nBefore we get started with our forms, it's worth thinking about how we're going to lay out the data structures they'll be used to create and modify. In `db_init.py`, we've defined two dictionaries -- \"challenges\" and \"teams\". Each of these will contain a dictionary for each challenge or team, keyed by an ID. Our data structure will look something like this:\n\n```json\n{\n  \"challenges\": {\n    \"ID\": {\n      \"name\": \"NAME\",\n      \"description\": \"DESCRIPTION\",\n      \"points\": 10,","metadata":{"id":1246}}],["1247",{"pageContent":"```json\n{\n  \"challenges\": {\n    \"ID\": {\n      \"name\": \"NAME\",\n      \"description\": \"DESCRIPTION\",\n      \"points\": 10,\n      \"code\": \"CHALLENGE SOLUTION CODE\"\n    }\n  },\n  \"teams\": {\n    \"ID\": {\n      \"name\": \"NAME\",\n      \"team_leader\": \"LEADER NAME\",\n      \"team_members\": [\"LEADER NAME\", \"ADDITIONAL MEMBER\"],\n      \"score\": 0,\n      \"password\": \"TEAM PASSWORD\",\n      \"challenges_solved\": [\"CHALLENGE ID\", \"ANOTHER CHALLENGE ID\"]\n    }\n  }\n}\n```\n\nThe ID value for both our challenges and teams will be the challenge or team name, all-lowercase, with spaces replaced by hyphens, so we can use it in our app's URLs. Let's create a function that turns names into IDs, in `forms.py`, just below our imports:\n\n```python\ndef name_to_id(name):\n    return name.lower().replace(\" \", \"-\")\n```\n\nNow we can start creating our forms. With Flask WTF, we model each form as a class inheriting from `FlaskForm`. These classes take in the value of Flask's `request.form` and apply validations to the fields therein. We'll create our `TeamCreateField` first, with the following code:\n\n```python\nclass TeamCreateForm(FlaskForm):\n    name = StringField(\n        \"Team name\",\n        validators=[\n            InputRequired(),\n            Length(3)\n            ]\n    )\n\n    password = PasswordField(\n        \"Team password\",\n        validators=[\n            InputRequired(),\n            Length(8)\n        ]\n    )\n\n    submit = SubmitField(\"Create team\")\n\n    def validate_name(form, field):\n        if name_to_id(field.data) in db[\"teams\"].keys():\n            raise ValidationError(\"Team name already taken.\")\n```","metadata":{"id":1247}}],["1248",{"pageContent":")\n\n    submit = SubmitField(\"Create team\")\n\n    def validate_name(form, field):\n        if name_to_id(field.data) in db[\"teams\"].keys():\n            raise ValidationError(\"Team name already taken.\")\n```\n\nWhen users create teams, they'll specify a team name and team password. In our WTForms field specifications above, we've defined minimum lengths for both of these fields, ensured that the team password is entered in a password field, and written a custom validator to reject new teams with IDs that match existing teams. Because we're validating on ID rather than name, users won't be able to create teams with the same name but different capitalization (e.g. \"Codeslingers\" and \"codeslingers\").\n\nEvery field in all of our forms includes the `InputRequired` validator, which will ensure that users do not submit blank values. This validator can be left out for optional fields.\n\nOur `ChallengeCreateForm` is similar to `TeamCreateForm`, and can be added below it:\n\n```python\nclass ChallengeCreateForm(FlaskForm):\n    name = StringField(\n        \"Challenge name\",\n        validators=[\n            InputRequired(),\n            Length(3)\n        ]\n    )\n\n    description = TextAreaField(\n        \"Challenge description\",\n        validators=[InputRequired()]\n    )\n\n    points = IntegerField(\n        \"Challenge points\",\n        validators=[\n            InputRequired(),\n            NumberRange(1)\n        ]\n    )\n\n    code = StringField(\"Challenge code\",\n        validators=[\n            InputRequired(),\n            Length(8)\n        ]\n    )\n\n    submit = SubmitField(\"Create challenge\")\n\n    def validate_name(form, field):\n        if name_to_id(field.data) in db[\"challenges\"].keys():\n            raise ValidationError(\"Challenge name already used.\")\n```\n\nHere we've used the `TextAreaField` to give a bit more space for our users to write challenge descriptions, and `IntegerField` to specify the number of points a challenge is worth. We're also requiring that challenges be worth at least 1 point, using the `NumberRange` validator.","metadata":{"id":1248}}],["1249",{"pageContent":"Next up is our `TeamJoinForm`:\n\n```python\nclass TeamJoinForm(FlaskForm):\n    name = SelectField(\n        \"Team to join\",\n        choices= [\n            (team_id, team[\"name\"]) for team_id, team in db[\"teams\"].items()\n        ],\n        validators=[InputRequired()]\n    )\n\n    password = PasswordField(\n        \"Team password\",\n        validators=[InputRequired()]\n    )\n\n    submit = SubmitField(\"Join team\")\n```\n\nIn this form, we're creating a drop-down box with the names of existing teams. The list comprehension in `choices` constructs a tuple for each team, consisting of the team's ID and name. This way, we can use the ID to identify teams on the backend while displaying the name to the user.\n\nOur last form is `ChallengeSolveForm`, which users will use to submit challenge solutions. Add it to the bottom of `forms.py`:\n\n```python\nclass ChallengeSolveForm(FlaskForm):\n    code = StringField(\"Challenge code\",\n        validators=[\n            InputRequired(),\n        ]\n    )\n\n    submit = SubmitField(\"Submit solution code\")\n```\n\nAs we'll be including this form on the individual challenge pages, we don't need to ask the user to specify which challenge they're solving.\n\nFinally, we'll need to import our forms and helper function into `main.py` so we can use them in the rest of our app. Add the following line to the import statements in `main.py`:\n\n```python\nfrom forms import TeamCreateForm, TeamJoinForm, ChallengeCreateForm, ChallengeSolveForm, name_to_id\n```\n\nNow that we have our form logic, we need to integrate them into both the front-end and back-end of the application. We'll deal with the back-end first.\n\n## Building back-end functionality\n\nBack-end functionality is the heart of our application. Below, we'll define our application's routes and build the logic for creating and joining teams, as well as creating and solving challenges.\n\n### Team functionality\n\nLet's start with teams. We'll define the following routes and functions in `main.py`, below our `index()` function:\n\n```python\n# Teams","metadata":{"id":1249}}],["1250",{"pageContent":"### Team functionality\n\nLet's start with teams. We'll define the following routes and functions in `main.py`, below our `index()` function:\n\n```python\n# Teams\n@app.route(\"/team-create\", methods=[\"GET\", \"POST\"])\n@web.authenticated\n@not_admin_only\n@not_team_only\ndef team_create():\n    pass\n\n@app.route(\"/team-join\", methods=['GET', 'POST'])\n@web.authenticated\n@not_admin_only\n@not_team_only\ndef team_join():\n    pass\n\n@app.route(\"/team/<team_id>\")\ndef team(team_id):\n    pass\n\n```\n\nThe `/team-create` and `/team-join` routes will use their respective forms. Users already in teams and admins will not be permitted to create or join teams. The `/team/<team_id>` page will be an informational page, showing the team's name, score, and which challenges they've solved. We're using part of the URL as a parameter here, so, for example, `/team/codeslingers` will take us to the team page for that team. We won't require authentication for this page.\n\nBecause we'll be dealing with passwords, we're going to store them as [one-way encrypted hashes](https://en.wikipedia.org/wiki/Hash_function). This will prevent anyone with access to our repl's database from easily seeing all team passwords. We'll use Flask's `Bcrypt` extension for this, which you can install by searching for \"flask-bcrypt\" in the Packages tab on the Replit IDE sidebar.\n\n![Flask bcrypt package](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/bcrypt-package.gif)\n\nWhile Replit usually automatically installs packages based on our import statements, this one must be manually installed, as its package name is slightly different on Pypi and on disk. Once it's installed, we import it with the following additional line at the top of `main.py`:\n\n```python\nfrom flask_bcrypt import Bcrypt\n```\n\nThen we initialize a `Bcrypt` object for our app by adding the following line just below `app = Flask(__name__)`:\n\n```python\nbcrypt = Bcrypt(app)\n```\n\nNow let's add some code to our `team_create` function:\n\n```python","metadata":{"id":1250}}],["1251",{"pageContent":"```python\nbcrypt = Bcrypt(app)\n```\n\nNow let's add some code to our `team_create` function:\n\n```python\n@app.route(\"/team-create\", methods=[\"GET\", \"POST\"])\n@web.authenticated\n@not_admin_only\n@not_team_only\ndef team_create():\n\n    form = TeamCreateForm(request.form)\n\n    if request.method == \"POST\" and form.validate():\n        team_name = form.name.data\n        team_id = name_to_id(team_name)\n\n        hashed_password = bcrypt.generate_password_hash(form.password.data).decode(\"utf-8\")\n        team_leader = web.auth.name\n\n        # Construct team dictionary\n        db[\"teams\"][team_id] = {\n            \"name\": team_name,\n            \"password\": hashed_password,\n            \"leader\": team_leader,\n            \"members\": [team_leader],\n            \"score\": 0,\n            \"challenges_solved\": []\n        }\n\n        # Set user team\n        users.current[\"team\"] = team_id\n\n        flash(\"Team created!\")\n        return redirect(url_for('team', team_id=team_id))\n\n    return render_template(\"team-create.html\",\n        form = form,\n        **context())\n```\n\nFirst, we create an instance of `TeamCreateForm` using the values in `request.form`. We then check whether the current request is an HTTP `POST`, and we call `validate()` on the form. Behind the scenes, this method will run all of our field validators, and return error messages to the user for fields that fail validation. It will only return `True` once all fields validate.\n\nOnce we know we've got valid form input, we can save its data to our database. We construct our team's ID using the helper function from `forms.py`, hash our team password, and then define our team's dictionary.\n\nAfter that, we set the current user's team in our user database and redirect the user to their new team's page. We use `users.current` as an alias for `users[web.auth.name]`.","metadata":{"id":1251}}],["1252",{"pageContent":"After that, we set the current user's team in our user database and redirect the user to their new team's page. We use `users.current` as an alias for `users[web.auth.name]`.\n\nAt the bottom of the function, we render our `team-create` page and tell it which form to use. This will happen regardless of whether the initiating request was a `GET` or a `POST`. We'll create the template and define the `context` function when we build the front-end.\n\nNow we can add the code for joining a team, in the `team_join` function:\n\n```python\n@app.route(\"/team-join\", methods=['GET', 'POST'])\n@web.authenticated\n@not_admin_only\n@not_team_only\ndef team_join():\n\n    form = TeamJoinForm(request.form)\n\n    if request.method == \"POST\" and form.validate():\n        team_id = form.name.data\n        team_name = db[\"teams\"][team_id][\"name\"]\n\n        if bcrypt.check_password_hash(\n                db[\"teams\"][team_id][\"password\"],\n                form.password.data\n            ):\n            db[\"teams\"][team_id][\"members\"].append(web.auth.name)\n            users.current[\"team\"] = team_id\n\n            flash(f\"You joined {team_name}!\")\n            return redirect(url_for('team', team_id=team_id))\n        else:\n            flash(f\"Wrong password for {team_name}!\")\n            return redirect(url_for(\"index\"))\n\n    return render_template(\"team-join.html\",\n        form = form,\n        **context())\n```\n\nIf our form validates, we check the provided team password, and if it's correct, we add the current user to the team and send them to the team page. If it's incorrect, we redirect them to the home page.\n\nFinally, we can define our `/team/<team_id>` route, by adding this code to the `team()` function:\n\n```python\n@app.route(\"/team/<team_id>\")\ndef team(team_id):\n    return render_template(\"team.html\",\n        team_id = team_id,\n        **context())\n```\n\n### Admin functionality","metadata":{"id":1252}}],["1253",{"pageContent":"```python\n@app.route(\"/team/<team_id>\")\ndef team(team_id):\n    return render_template(\"team.html\",\n        team_id = team_id,\n        **context())\n```\n\n### Admin functionality\n\nWe're going to let admin users add challenges to the front-end so that we can keep our code generic and re-use it for multiple competitions, if we wish. We'll add the other admin functionality we need at the same time.\n\nWe'll start with the challenge creation route. Add this code below your team routes:\n\n```python\n# Admin functions\n@app.route(\"/admin/challenge-create\", methods=[\"GET\", \"POST\"])\n@web.authenticated\n@admin_only\ndef admin_challenge_create():\n\n    form = ChallengeCreateForm(request.form)\n\n    if request.method == \"POST\" and form.validate():\n        challenge_name = form.name.data\n        challenge_id = name_to_id(challenge_name)\n        hashed_code = bcrypt.generate_password_hash(form.code.data).decode(\"utf-8\")\n\n        # Construct challenge dictionary\n        db[\"challenges\"][challenge_id] = {\n            \"name\": challenge_name,\n            \"description\": form.description.data,\n            \"points\": int(form.points.data),\n            \"code\": hashed_code\n        }\n\n        flash(\"Challenge created!\")\n        return redirect(url_for('challenge', challenge_id=challenge_id))\n\n    return render_template(\"admin/challenge-create.html\",\n        form = form,\n        **context())\n```\n\nThis code is almost identical to our team creation functionality. While hashing challenge codes may not be strictly necessary, it will prevent any users with access to our repl from cheating by viewing the database.\n\nChallenge removal is a bit simpler:\n\n```python\n@app.route(\"/admin/challenge-remove/<challenge_id>\")\n@web.authenticated\n@admin_only\ndef admin_remove_challenge(challenge_id):\n\n    # Remove challenge from team solutions\n    for _, team in db[\"teams\"].items():\n        if challenge_id in team[\"challenges_solved\"]:\n            team[\"challenges_solved\"].remove(challenge_id)\n            team[\"score\"] -= db[\"challenges\"][challenge_id][\"points\"]","metadata":{"id":1253}}],["1254",{"pageContent":"if challenge_id in team[\"challenges_solved\"]:\n            team[\"challenges_solved\"].remove(challenge_id)\n            team[\"score\"] -= db[\"challenges\"][challenge_id][\"points\"]\n\n    # Delete challenge dictionary\n    del db[\"challenges\"][challenge_id]\n\n    flash(\"Challenge removed!\")\n    return redirect(url_for('index'))\n```\n\nWe'll allow admins to start and stop the competition with two routes that toggle a value in our database:\n\n```python\n@app.route(\"/admin/competition-start\")\n@web.authenticated\n@admin_only\ndef admin_start_competition():\n    db[\"competition_started\"] = True\n\n    flash(\"Competition started!\")\n    return redirect(url_for('index'))\n\n@app.route(\"/admin/competition-stop\")\n@web.authenticated\n@admin_only\n@competition_running\ndef admin_end_competition():\n    db[\"competition_started\"] = False\n\n    flash(\"Competition ended!\")\n    return redirect(url_for('index'))\n```\n\nFinally, we'll define an admin route that deletes and reinitializes the application's general and user databases. This will be useful for running multiple competitions on the same app, and for debugging!\n\n```python\n@app.route('/admin/db-flush')\n@web.authenticated\n@admin_only\ndef flush_db():\n    del db[\"challenges\"]\n    del db[\"teams\"]\n    del db[\"competition_started\"]\n\n    for _, user in users.items():\n        user[\"team\"] = None\n\n    db_init()\n\n    return redirect(url_for(\"index\"))\n```\n\nIf we add any additional keys or values to either of our databases, we will need to remember to delete them in this function.\n\n### Challenge functionality\n\nFinally, we need to add functionality that will allow users to solve challenges and score points. Add the following code below your admin routes:\n\n```python\n# Challenge functionality\n@app.route(\"/challenge/<challenge_id>\", methods=[\"GET\", \"POST\"])\n@web.authenticated\n@competition_running\ndef challenge(challenge_id):\n\n    form = ChallengeSolveForm(request.form)\n\n    if request.method == \"POST\" and form.validate():\n\n        if bcrypt.check_password_hash(\n                db[\"challenges\"][challenge_id][\"code\"],","metadata":{"id":1254}}],["1255",{"pageContent":"form = ChallengeSolveForm(request.form)\n\n    if request.method == \"POST\" and form.validate():\n\n        if bcrypt.check_password_hash(\n                db[\"challenges\"][challenge_id][\"code\"],\n                form.code.data\n            ):\n            db[\"teams\"][users.current[\"team\"]][\"challenges_solved\"].append(challenge_id)\n            db[\"teams\"][users.current[\"team\"]][\"score\"] += db[\"challenges\"][challenge_id][\"points\"]\n            flash(\"Challenge solved!\")\n        else:\n            flash(\"Wrong challenge code!\")\n\n    return render_template(\"challenge.html\",\n        form = form,\n        challenge_id = challenge_id,\n        **context())\n```\n\nThis function is very similar to `team_join()`. The main difference is that we will be hosting this form on the challenge description page, so we can fetch the `challenge_id` from the URL rather than asking the user which challenge they're submitting a code for in the form.\n\n## Building the web application front-end\n\nWe have a fully functional application back-end, but without some front-end pages, our users will have to join teams and submit challenge solutions using [`curl`](https://curl.se/). So let's create an interface for our back-end using HTML and [Jinja](https://jinja.palletsprojects.com/en/3.0.x/templates/), Flask's powerful front-end templating language.\n\n### Creating the HTML templates\n\nFirst, we'll need the following HTML files in a new directory called `templates`:\n\n```\ntemplates/\n    |__ admin/\n    |     |__  challenge-create.html\n    |__  _macros.html\n    |__  challenge.html\n    |__  index.html\n    |__  layout.html\n    |__  leaderboard.html\n    |__  team-create.html\n    |__  team-join.html\n    |__  team.html\n```\n\n![HTML templates](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/templates.gif)\n\nOnce you've created these files, let's populate them, starting with `templates/layout.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Challenge Leaderboard</title>\n  </head>\n  <body>","metadata":{"id":1255}}],["1256",{"pageContent":"Once you've created these files, let's populate them, starting with `templates/layout.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Challenge Leaderboard</title>\n  </head>\n  <body>\n    {% with messages = get_flashed_messages() %} {% if messages %}\n    <ul class=\"flashes\">\n      {% for message in messages %}\n      <li>{{ message }}</li>\n      {% endfor %}\n    </ul>\n    {% endif %} {% endwith %} {% if name != None %}\n    <p>Logged in as {{ username }}</p>\n    {% endif %}\n\n    <ul>\n      <li><a href=\"/\">View challenges</a></li>\n      <li><a href=\"/leaderboard\">View leaderboard</a></li>\n      <li><a href=\"/team-create\">Create team</a></li>\n      <li><a href=\"/team-join\">Join team</a></li>\n    </ul>\n\n    {% block body %}{% endblock %}\n  </body>\n</html>\n```\n\nWe'll use this file as the base of all our pages, so we don't need to repeat the same HTML. It contains features we want on every page, such as flashed messages, an indication of who's currently logged in, and a global navigation menu. All subsequent pages will inject content into the `body` [`block`](https://jinja.palletsprojects.com/en/3.0.x/templates/#child-template):\n\n`{% block body %}{% endblock %}`\n\nNext, we need to populate another helper file, `templates/_macros.html`:\n\n```html\n{% macro render_field(field) %}\n<dt>{{ field.label }}</dt>\n<dd>\n  {{ field(**kwargs)|safe }} {% if field.errors %}\n  <ul class=\"errors\">\n    {% for error in field.errors %}\n    <li>{{ error }}</li>\n    {% endfor %}\n  </ul>\n  {% endif %}\n</dd>\n{% endmacro %}\n```\n\nThis file defines the [Jinja macro](https://jinja.palletsprojects.com/en/3.0.x/templates/#macros) `render_field`, which we'll use to give all our form fields their own error-handling, provided by WTForms.\n\nLet's define our home page now, with a list of challenges. Add the following code to `templates/index.html`:\n\n```html\n{% extends \"layout.html\" %} {% block body %}\n<h1>Challenges</h1>\n<ul>\n  {% for id, challenge in challenges.items()|sort(attribute='1.points') %}\n  <li>","metadata":{"id":1256}}],["1257",{"pageContent":"```html\n{% extends \"layout.html\" %} {% block body %}\n<h1>Challenges</h1>\n<ul>\n  {% for id, challenge in challenges.items()|sort(attribute='1.points') %}\n  <li>\n    <a href=\"/challenge/{{ id }}\">{{ challenge.name }}</a> ({{ challenge.points\n    }} points) {% if admin %} |\n    <a href=\"/admin/challenge-remove/{{ id }}\">DELETE</a> {% endif %}\n  </li>\n\n  <li>{% endfor %} {% if admin %}</li>\n\n  <li><a href=\"/admin/challenge-create\">NEW CHALLENGE...</a></li>\n  {% endif %}\n</ul>\n\n{% if admin %}\n<h1>Admin functions</h1>\n<ul>\n  {% if competition_running %}\n  <li><a href=\"/admin/competition-stop\">End competition</a></li>\n  {% else %}\n  <li><a href=\"/admin/competition-start\">Start competition</a></li>\n  {% endif %}\n  <li><a href=\"/admin/db-flush\">Flush database</a></li>\n</ul>\n{% endif %} {% endblock %}\n```\n\nHere, `{% extends \"layout.html\" %}` tells our templating engine to use `layout.html` as a base template, and `{% block body %} ... {% endblock %}` defines the code to place inside `layout.html`'s body block.\n\nThe following line will sort challenges in ascending order of points:\n\n```html\n{% for id, challenge in challenges.items()|sort(attribute='1.points') %}\n```\n\nIn addition, we use `{% if admin %}` blocks to include links to admin functionality that will only display when an admin is logged in.\n\nNext we define our team pages:\n\n`templates/team-create.html`\n\n```html\n{% extends \"layout.html\" %} {% block body %} {% from \"_macros.html\" import\nrender_field %}\n<h1>Create team</h1>\n<form action=\"/team-create\" method=\"post\" enctype=\"multipart/form-data\">\n  {{ render_field(form.name) }} {{ render_field(form.password) }} {{\n  form.csrf_token }} {{ form.submit }}\n</form>\n{% endblock %}\n```\n\n`templates/team-join.html`\n\n```html\n{% extends \"layout.html\" %} {% block body %} {% from \"_macros.html\" import\nrender_field %}\n<h1>Join team</h1>\n<form action=\"/team-join\" method=\"post\">\n  {{ render_field(form.name) }} {{ render_field(form.password) }} {{\n  form.csrf_token }} {{ form.submit }}\n</form>\n{% endblock %}\n```\n\n`templates/team.html`\n\n```html","metadata":{"id":1257}}],["1258",{"pageContent":"<form action=\"/team-join\" method=\"post\">\n  {{ render_field(form.name) }} {{ render_field(form.password) }} {{\n  form.csrf_token }} {{ form.submit }}\n</form>\n{% endblock %}\n```\n\n`templates/team.html`\n\n```html\n{% extends \"layout.html\" %} {% block body %}\n<h1>{{ teams[team_id].name }}</h1>\n\n<h2>Team members</h2>\n<ul>\n  {% for user in teams[team_id].members %}\n  <li>{{ user }}</li>\n  {% endfor %}\n</ul>\n\n<h2>Challenges solved</h2>\n<ul>\n  {% for id in teams[team_id].challenges_solved %}\n  <li>\n    <a href=\"/challenge/\" {{ id }}>{{ challenges[id].name }}</a>\n  </li>\n\n  <li>{% endfor %}</li>\n</ul>\n\n{% endblock %}\n```\n\nYou'll notice that we've imported our `render_function` macro on these pages and used it to show our various form fields. Each form also has a hidden field specified by `{{ form.csrf_token }}`. This is a security feature WTForms provides to prevent [cross-site request forgery](https://owasp.org/www-community/attacks/csrf) vulnerabilities.\n\nNow we can create our challenge page:\n\n`templates/challenge.html`\n\n```html\n{% extends \"layout.html\" %} {% block body %} {% from \"_macros.html\" import\nrender_field %}\n<h1>{{ challenges[challenge_id].name }}</h1>\n\n<p>{{ challenges[challenge_id].description }}</p>\n\n<p><b>Points: {{ challenges[challenge_id].points }}</b></p>\n\n{% if user_team != None and challenge_id not in\nteams[user_team][\"challenges_solved\"] %}\n<form action=\"/challenge/{{challenge_id}}\" method=\"post\">\n  {{ render_field(form.code) }} {{ form.csrf_token }} {{ form.submit }}\n</form>\n{% endif %} {% endblock %}\n```\n\nThen our challenge creation page (inside the `templates/admin` directory):\n\n`templates/admin/challenge-create.html`\n\n```html\n{% extends \"layout.html\" %} {% block body %} {% from \"_macros.html\" import\nrender_field %}\n<h1>Create challenge</h1>\n<form\n  action=\"/admin/challenge-create\"\n  method=\"post\"\n  enctype=\"multipart/form-data\"\n>\n  {{ render_field(form.name) }} {{ render_field(form.description) }} {{\n  render_field(form.points) }} {{ render_field(form.code) }} {{ form.csrf_token\n  }} {{ form.submit }}\n</form>","metadata":{"id":1258}}],["1259",{"pageContent":">\n  {{ render_field(form.name) }} {{ render_field(form.description) }} {{\n  render_field(form.points) }} {{ render_field(form.code) }} {{ form.csrf_token\n  }} {{ form.submit }}\n</form>\n{% endblock %}\n```\n\nWe've referred to a lot of different variables in our front-end templates. Flask's Jinja templating framework allows us to pass the variables we need into `render_template()`, as we did when building the application backend. Most pages needed a form, and some pages, such as `challenge` and `team`, needed a challenge or team ID. In addition, we [unpack](https://realpython.com/python-kwargs-and-args/#unpacking-with-the-asterisk-operators) the return value of a function named `context` to all of our rendered pages. Define this function now with our other helper functions in `main.py`, just below `in_team`:\n\n```python\ndef context():\n    return {\n        \"username\": web.auth.name,\n        \"user_team\": in_team(web.auth.name),\n        \"admin\": is_admin(web.auth.name),\n        \"teams\": db[\"teams\"],\n        \"challenges\": db[\"challenges\"],\n        \"competition_running\": db[\"competition_started\"]\n    }\n```\n\nThis will give every page most of the application's state. If we find we need another piece of state later, we can add it to the `context` helper function, and it will be available to all our pages.\n\nImportantly, we're using a function rather than a static dictionary so that we can get the most up-to-date application state every time we serve a page.\n\nBefore we move on, we should change our app's home page from the initial demo version we made at the beginning of this tutorial to a proper page. Find the `index()` function and replace it with this code:\n\n```python\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\",\n        **context())\n```","metadata":{"id":1259}}],["1260",{"pageContent":"```python\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\",\n        **context())\n```\n\nYou'll notice we've removed the `@web.authenticated` decorator. This will allow unauthenticated users to get a glimpse of our site before being asked to log in. `replit.web` will prompt them to log in as soon as they attempt to access an authenticated page.\n\n## Building the leaderboard\n\nWe've left out a key part of our application: the leaderboard showing which team is winning! Let's add the leaderboard frontend now, with the following HTML and Jinja code in `templates/leaderboard.html`:\n\n```html\n{% extends \"layout.html\" %} {% block body %}\n<h1>Leaderboard</h1>\n<ul>\n  {% for id, team in teams.items()|sort(attribute='1.score', reverse=True) %}\n  <li {% if id == user_team %}style=\"font-weight: bold\"{% endif %}>\n  <a href=\"/team/{{ id }}\">{{ team.name }}</a\n  >: {{ team.score }} points\n  <li>{% endfor %}</li>\n</ul>\n\n{% endblock %}\n```\n\nSimilar to the list of challenges on our home page, we use Jinja's [sort](https://jinja.palletsprojects.com/en/3.0.x/templates/#jinja-filters.sort) filter to order the teams from highest to lowest score.\n\n```html\n{% for id, team in teams.items()|sort(attribute='1.score', reverse=True) %}\n```\n\nWe also use an `if` block to show the name of the current user's team in bold.\n\nFinally, we can add one last route to `main.py`, just above the line `web.run(app)`:\n\n```python\n@app.route(\"/leaderboard\")\ndef leaderboard():\n    return render_template(\"leaderboard.html\",\n        **context())\n```\n\nWe're leaving this one unauthenticated as well, so that spectators can see how the competition's going.\n\n## Using the app\n\nWe're done! Run your repl now to see your app in action. As your user account will be a site admin, you may need to enlist a couple of friends to test out all the app's functionality.\n\nFor best results, open your repl's web page in a new tab.\n\n![Open in new tab button](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/replit-browser-open-in-new-tab.png)","metadata":{"id":1260}}],["1261",{"pageContent":"For best results, open your repl's web page in a new tab.\n\n![Open in new tab button](https://docimg.replit.com/images/tutorials/28-technical-challenge-site/replit-browser-open-in-new-tab.png)\n\nIf you run into unexplained errors, you may need to clear your browser cookies, or flush the database.\n\n## Where next?\n\nWe've built a [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) application with a fair amount of functionality, but there's still room for improvement. Some things you might want to add include:\n\n- CSS styling.\n- More admin functionality, such as adjusting scores, banning users and teams, and setting team size limitations.\n- File upload, for challenge files and/or team avatars.\n- Time-limited competitions, with a countdown.\n- Badges/achievements for things like being the first team to solve a given challenge.\n- A place for teams to submit challenge solution write-ups.\n\nAnd of course, you can also use your site to host a competition right now.\n\nYou can find code for this tutorial here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/challenge-website?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1261}}],["1262",{"pageContent":"---\ntitle: Telegram bot\n---\n\n# Quick-start Telegram Bot\n\nIf you've ever used an online forum, you may have seen that there are sometimes ways to post messages other than doing it straight on the forum, like posting by email.\n\nIn this tutorial, we'll build a public message board and instead of users posting messages directly on the site, they'll send them to a Telegram bot.\n\nThe messages will simply contain the message text, but we'll provide further information on how to use other data, such as the usernames of users. We will leave it as an exercise for you to expand the functionality.\n\n![Bot functionality](https://docimg.replit.com/images/tutorials/18-telegram-bot/bot_functionality.gif)\n\n## Prerequisites\n\nTo follow along in this tutorial:\n\n- You should be familiar with basic Python programming.\n- You will need to have [Telegram downloaded](https://telegram.org/), and an account.\n- You will also need a Replit account, so [create one now](https://replit.com/signup) if you haven't already.\n\nIt would be helpful if you are familiar with the [Replit database](/tutorials/python/using-the-replit-database), but it's not a necessity.\n\n## Registering a Bot\n\nWe need to register our bot on Telegram to generate the credentials we'll use to connect to the Telegram API. Each bot requires a user account to be responsible for it. This can be done using Telegram's official management bot called the \"BotFather\".\n\nTo do this, start by signing into your Telegram client and searching for \"@bot\" in the chat search. **Be sure to select the verified account** (the one with the checkmark beside it), otherwise we may end up talking to someone impersonating the official BotFather.\n\n![BotFather search](https://docimg.replit.com/images/tutorials/18-telegram-bot/bot_father.png)\n\nTo activate the BotFather, click on \"start\".\n\n![Activating BotFather](https://docimg.replit.com/images/tutorials/18-telegram-bot/bot_father_start.png)\n\nWe can send BotFather the command \"/newbot\" to begin the bot creation workflow.\n\nIt will ask us for:","metadata":{"id":1262}}],["1263",{"pageContent":"We can send BotFather the command \"/newbot\" to begin the bot creation workflow.\n\nIt will ask us for:\n\n- The name of the bot which will be displayed on the top of the new bot's chat, for example, \"Replit Quick-start Tutorial\".\n\n- The username, which will be used to reference the bot uniquely, for example, \"@replit_tutorialbot\".\n\nNote: It is useful to have a short username to make it easier for users to type it out – especially if you plan on adding an inline mode.\n\n![Generating bot token](https://docimg.replit.com/images/tutorials/18-telegram-bot/token.png)\n\nOnce we have answered all the questions, the BotFather will send us our authentication token which will look something like this: `110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw`.\n\nNote that the whole string (the colon and both strings on either side of it) is the token.\n\n## Making a Bot Interface\n\nWe can now begin writing the part of the program that handles requests from Telegram. Create a new repl and select Python from the language dropdown.\n\n![Creating a new Repl](https://docimg.replit.com/images/tutorials/18-telegram-bot/new_repl.png)\n\nOur bot needs to interact with Telegram. We will need to access the Telegram REST API. There are many ways of doing this, but for the sake of this tutorial, we'll use a convenience library that wraps around the API.\n\nBefore we can go any further, we need to make our token accessible for our bot to use later on. Create a `TOKEN` environment variable by clicking the lock icon in the sidebar as shown below, and paste your bot token that you noted earlier, something like `110201543:AAHdqTcvCH1vGWJxfSeofSAs0K5PALDsaw`:\n\n![Creating a new environment variables](https://docimg.replit.com/images/tutorials/18-telegram-bot/env_variables.png)\n\nThis will ensure that our token is available as an environment variable and that it cannot be accessed by people publicly viewing the repl.\n\n### Creating a barebones bot\n\nNow that we're all set up, we can get coding! We will start with the following in our `main.py` file:\n\n```python","metadata":{"id":1263}}],["1264",{"pageContent":"### Creating a barebones bot\n\nNow that we're all set up, we can get coding! We will start with the following in our `main.py` file:\n\n```python\nimport os\n\nfrom telegram import Update #upm package(python-telegram-bot)\nfrom telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext  #upm package(python-telegram-bot)\n\n\ndef help_command(update: Update, context: CallbackContext) -> None:\n    htext = '''\nWelcome\nSend a message to store it.\nSend /fetch to retrieve the most recent message'''\n    update.message.reply_text(htext)\n\n\ndef main():\n    updater = Updater(os.getenv(\"TOKEN\"))\n\n    dispatcher = updater.dispatcher\n    dispatcher.add_handler(CommandHandler(\"start\", help_command))\n    dispatcher.add_handler(CommandHandler(\"help\", help_command))\n\n    updater.start_polling()\n\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n```\n\nAt the top, we import `os` so that we can get our token from the environment variable.\n\nWe then import classes from the Telegram library.\n\nThe comments starting with `#upm` are not optional. They are used by Replit to download the correct package. It is not needed in general, but it is needed here because there are a lot of similar Telegram libraries.\n\nThe `help_command` function is run whenever the user sends us a \"/start\" or \"/help\" command. \"/start\" is also automatically run when a new user joins your bot (like we did earlier with the BotFather). The bot knows to use this function because we tell it later in the `main` function's body.\n\nThe `main` function initialises an updater for us, using our token.\n\n```python\nupdater = Updater(os.getenv(\"TOKEN\"))\n```\n\nThe updater is the class that will continuously check Telegram for new messages for our bot.\n\nWhen the updater gets a new message, it hands it over to the dispatcher. The dispatcher checks if we have an appropriate handler for the message. As mentioned above, we define ours to handle the commands \"/start\" and \"/help\". We do that with the `add_handler` function, like this:\n\n```python","metadata":{"id":1264}}],["1265",{"pageContent":"```python\ndispatcher.add_handler(CommandHandler(\"start\", help_command))\n```\n\nand\n\n```python\ndispatcher.add_handler(CommandHandler(\"help\", help_command))\n```\n\nTo keep it simple, the \"/start\" command and the \"/help\" command have the same handler here, but you could decide to have a different function for handling each if you wanted.\n\nWe then need to actually tell the updater to start checking for new messages. We accomplish that with this line:\n\n```python\nupdater.start_polling()\n```\n\nIt's important to know that `start_polling` is a non-blocking function. That means that the code won't halt execution here. It will just carry on until the program terminates.\n\nIn other words, if we left this as our last line of the `main` function, the code would execute and then immediately exit because there was nothing else blocking it. So to keep our bot listening, we use the line `updater.idle()` to block the script while we are listening.\n\n### Logging functionality\n\nAccording to the help text, there are two things the bot should do.\n\n1. If you send a message to the bot, it should store it somehow.\n\n2. If you send the bot the \"/fetch\" command, it should send you back the latest message.\n\nTo accomplish this, we will use Replit's key-value database. Start by importing the API.\n\n```python\nfrom replit import db\n```\n\n`db` is an object that behaves like a dictionary but persists its content between runs. It also serializes its keys as strings.\n\nSince we want to store logged messages in a certain order, but the db object is not inherently ordered, let's create a helper function that can get the largest key (assuming we are only going to use numeric indices). Add this function before the definition of the `help_command` function:\n\n```python\ndef latest_key():\n    ks = db.keys()\n    if len(ks):\n        return max(map(int, ks))\n    else:\n        return -1\n```\n\n`latest_key` gets all the keys from our db. If there are keys, convert them all to integers and return the biggest one. If there aren't any keys, `return -1`.","metadata":{"id":1265}}],["1266",{"pageContent":"else:\n        return -1\n```\n\n`latest_key` gets all the keys from our db. If there are keys, convert them all to integers and return the biggest one. If there aren't any keys, `return -1`.\n\nWe can now create a handler that logs the user's messages to the database. Add this function after the definition of the `help_command` function:\n\n```python\ndef log(update: Update, context: CallbackContext) -> None:\n    db[str(latest_key() + 1)] = update.message.text\n```\n\nThis gets the latest key from the database, increments it by one, and sets a new key-pair with the message.\n\nHowever, this will not be run until we register the handler, so add the following line after the other `dispatcher.add_handler(...)` lines:\n\n```python\ndispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, log))\n```\n\nYou may notice that `MessageHandler` is used instead of `CommandHandler`. This is a more general handler that selects messages based off flags that you supply. In this case, it handles messages that contain text but aren't commands.\n\nWe can now log messages, but we can't see them yet. Let's add a handler that lets a user fetch the latest message. Add this function after the definition of the `log` function:\n\n```python\ndef fetch(update: Update, context: CallbackContext) -> None:\n    update.message.reply_text(db.get(str(latest_key()), 'No Messages yet.'))\n```\n\nWe can register this one along with the other command handlers. Add this after the existing `dispatcher.add_handler(...)` lines:\n\n```python\ndispatcher.add_handler(CommandHandler(\"fetch\", fetch))\n```\n\n## Make a Web UI\n\nNow that we have a functional bot, we want to add a web interface for it. The tool we'll use is Flask. We can include the following code after our other imports and before our `latest_key` function definition.\n\n```python\nfrom math import ceil\nfrom flask import render_template\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\n@app.route('/<int:page>')\ndef home(page=None):\n    ks = sorted(map(int, db.keys()))\n    pages = ceil(len(ks) / 10)","metadata":{"id":1266}}],["1267",{"pageContent":"from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\n@app.route('/<int:page>')\ndef home(page=None):\n    ks = sorted(map(int, db.keys()))\n    pages = ceil(len(ks) / 10)\n    if page is None: #Default to latest page\n        page = pages\n\n    if page < pages:\n        next_page = page + 1\n    else:\n        next_page = None\n    if page > 1:\n        prev_page = page - 1\n    else:\n        prev_page = None\n\n    messages = tuple(db[str(key)] for key in ks[(page-1)*10:page*10])\n\n    return render_template('home.html', messages=messages, next_page=next_page, page=page, prev_page=prev_page)\n```\n\nThis defines a small Flask app. Replit takes care of our Flask import. For this tutorial, we'll only make a single page.\n\nWe tell Flask how the page should be reachable with special decorators. `@app.route('/')` says that when the user accesses at `https://example.com`, it will serve this handler. In this case, the variable \"page\" will default to None.\n\n`@app.route('/<int:page>')` says that when a user accesses something like `https://example.com/4` then it will open to page 4 of the logged messages. In this case, the variable \"page\" will be set to 4.\n\nThis won't work yet, because our template `home.html` doesn't exist. Let's create that now in a folder called \"templates\" (i.e. templates/home.html):\n\n```python\n<!doctype html>\n<h1>Messages - Page {{ page }}</h1>\n<ul>\n {% for msg in messages %}\n <li>{{ msg | escape }}</li>\n {% endfor %}\n</ul>\n\n{% if prev_page %}<a href='/{{ prev_page }}'>Previous Page</a>{% endif %}\n{% if prev_page and next_page %}|{% endif%}\n{% if next_page %}<a href='/{{ next_page }}'>Next Page</a>{% endif %}\n```\n\nThis template will output a page of logged messages and links to the next or previous page at the bottom.","metadata":{"id":1267}}],["1268",{"pageContent":"{% if next_page %}<a href='/{{ next_page }}'>Next Page</a>{% endif %}\n```\n\nThis template will output a page of logged messages and links to the next or previous page at the bottom.\n\nThe template requires a variable \"page\" for the page number and an array of \"messages\" that is looped through and displayed as a list. It also takes in variables \"prev_page\" and \"next_page\" which we use to create links to the previous page and next page, if they exist respectively. These are all provided in our route function above when we run `render_template`.\n\nHow do we calculate the maximum number of pages?\n\n```python\npages = ceil(len(ks) / 10)\n```\n\nThat is to say, we divide the number of keys in our Replit database by ten and round it up. We can also use this number as our default. That way, if someone visits the plain \"/\" route, we will just display the latest page.\n\n```python\nif page is None:\n    page = pages\n```\n\nWe know that the last messages will be the \"latest\" because we sorted them in ascending order in the line before.\n\n\"prev_page\" and \"next_page\" are the current page either decremented or incremented if they are a valid page numbers (otherwise set to None so that the template doesn't display them).\n\n## Putting it All Together\n\nIf we run our program now, the Flask web app won’t work yet. Flask needs to listen for requests in a similar way to the Telegram library. We might normally end the program with `app.run()` to start the Flask server.\n\nThe problem is that this line of code would never be reached in normal circumstances because we have the line `updater.idle()` blocking our code before that. To solve this, we can replace this line with the line that starts our Flask server in the foreground. This is because the only reason we had the line was to stop the program from quitting prematurely and Flask accomplishes the same anyway. So, let's change it to this:\n\n```python\n#updater.idle()\napp.run(host='0.0.0.0', port=8080)\n```","metadata":{"id":1268}}],["1269",{"pageContent":"```python\n#updater.idle()\napp.run(host='0.0.0.0', port=8080)\n```\n\nThe parameters, host and port set to these values allow Replit to access the server and should normally display a window with our page’s content. We can now browse through messages sent to this bot by users.\n\n## Make it Your Own\n\nIf you've followed along, you'll have your own version of the repl to extend. Otherwise, start from ours.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/telegram-bot?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Where Next?\n\nTry using the \"/setcommands\" command in the BotFather to add a quick-menu for the commands in your bot. Usage is described [here](https://core.telegram.org/bots#6-botfather).\n\nIf we wanted access to the username of a person sending a message, we could access it in a similar way that we would access the message's text:\n\n```python\nusername = update.message.from_user.username\n```\n\nYou can check [the documentation](https://python-telegram-bot.readthedocs.io/en/stable/telegram.message.html#telegram.Message) for a list of additional data made available.","metadata":{"id":1269}}],["1270",{"pageContent":"---\ntitle: Test-driven development\n---\n\n# An introduction to `pytest` and doing test-driven development with Replit\n\nIn this tutorial we'll introduce test-driven development and you'll see how to use [`pytest`](https://docs.pytest.org/en/stable/) to ensure that your code is working as expected.\n\n`pytest` lets you specify inputs and expected outputs for your functions. It runs each input through your function and validates that the output is correct. `pytest` is a Python library and works just like any other Python library: you install it through your package manager and you can import it into your Python code. Tests are written in Python too, so you'll have code testing other code.\n\nTest-driven development or TDD is the practice of writing tests _before_ you write code. You can read more about TDD and why it's popular on [Wikipedia](https://en.wikipedia.org/wiki/Test-driven_development).\n\nSpecifically you'll:\n\n- See how to structure your project to keep your tests separate but still have them refer to your main code files\n- Figure out the requirements for a function that can split a full name into first and last name components\n- Write tests for this function\n- Write the actual function.\n\n## Creating a project structure for `pytest`\n\nFor large projects, it's useful to keep your testing code separate from your application code. In order for this to work, you'll need your files set up in specific places, and you'll need to create individual Python **modules** so that you can refer to different parts of the project easily.\n\nCreate a new Python repl called `namesplitter`. As always, it'll already have a `main.py` file, but we're going to put our name splitting function into a different module called `utils`, which can house any helper code that our main application relies on. We also want a dedicated place for our tests.","metadata":{"id":1270}}],["1271",{"pageContent":"Create two new folders: one called `utils` and one called `tests`, using the `add folder` button. Note that when you press this button it will by default create a folder in your currently active folder, so select the `main.py` file after creating the first folder or the second folder will be created inside the first folder.\n\nYou want both the folders to be at the root level of your project.\n\nNow add a file at the root level of the project called `__init__.py`. This is a special file that indicates to Python that we want our project to be treated as a \"module\": something that other files can refer to by name and import pieces from. Also add an `__init__.py` file inside the `utils` folder and the `tests` folder. These files will remain empty, but it's important that they exist for our tests to run. Their presence specifies that our main project should be treated as a module and that any code in our `utils` and `tests` folders should be treated as submodules of the main one.\n\nFinally, create the files where we'll actually write code. Inside the `utils` folder create a file called `name_helper.py` and inside the `tests` folder create one called `test_name_helper.py`. Your project should now look as follows. Make sure that you have all the files and folders with exactly these names, in the correct places.\n\n![**Image 1:** *Setting up our project structure for `pytest`.*](https://docimg.replit.com/images/tutorials/09-TDD/09-01-pytest-project-structure.png)\n\n## Defining examples for the name split function\n\nSplitting names is useful in many contexts. For example, it is a common requirement when users sign up on websites with their full names and then companies want to send personalised emails addressing users by their first name only. You might think that this is as simple as splitting a name based on spaces as in the following example.\n\n```python\ndef split_name(name):\n    first_name, last_name = name.split()\n    return [first_name, last_name]\n\nprint(split_name(\"John Smith\"))","metadata":{"id":1271}}],["1272",{"pageContent":"```python\ndef split_name(name):\n    first_name, last_name = name.split()\n    return [first_name, last_name]\n\nprint(split_name(\"John Smith\"))\n# >>> [\"John\", \"Smith\"]\n```\n\nWhile this does indeed work in many cases, names are surprisingly complicated and it's very common to make mistakes when dealing with them as programmers, as discussed in [this classic article](https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/). It would be a huge project to try and deal with _any_ name, but let's imagine that you have requirements to deal with the following kinds of names:\n\n- First Last, e.g. John Smith\n- First Middle Last, e.g John Patrick Smith (John Patrick taken as first name)\n- First Middle Middle Last, e.g. John Patrick Thomson Smith (John Patrick Thomson taken as first name)\n- First last last Last, e.g. Johan van der Berg (note the lowercase letters, Johan taken as first name, the rest as last)\n- First Middle last last Last, e.g. Johan Patrick van der Berg (note the lowercase letters, Johan taken as first name, the rest as last)\n- Last, e.g. Smith (we can assume that if we are given only one name, it is the last name)\n\nSpecifically, you can assume that once you find a name starting with a lowercase letter, it signifies the start of a last name, and that all other names starting with a capital letter are part of the first and middle names. Middle names can be combined with first names.\n\nOf course, this does not cover all possibilities, but it is a good starting point in terms of requirements.\n\nUsing TDD, we always write _failing tests_ first. The idea is that we should write a test about how some code _should_ behave, check to make sure that it breaks in the way we expect (as the code isn't there). Only then do we write the actual code and check that the tests now pass.\n\n## Writing the test cases for our names function","metadata":{"id":1272}}],["1273",{"pageContent":"## Writing the test cases for our names function\n\nNow that we understand what our function should do, we can write tests to check that it does. In the `tests/test_name_helper.py` file, add the following code.\n\n```python\nfrom namesplitter.utils import name_helper\n\ndef test_two_names():\n    assert name_helper.split_name(\"John Smith\") == [\"John\", \"Smith\"]\n```\n\nNote that the `namesplitter` in the first line is taken from the name of your Replit project, which defines the names of the parent module. If you called your project something else, you'll need to use that name in the import line. It's important to not put special characters in the project name (including a hyphen, so names like `my-tdd-demo` are out) or the import won't work.\n\nThe `assert` keyword simply checks that a specific statement evaluates to `True`. In this case, we call our function on the left-hand side and give the expected value on the right-hand side, and ask `assert` to check if they are the same.\n\nThis is our most basic case: we have two names and we simply split them on the single space. Of course, we haven't written the `split_name` function anywhere yet, so we expect this test to fail. Let's check.\n\nUsually you would run your tests by typing `py.test` into your terminal, but using Replit things work better if we import `pytest` into our code base and run it from there. This is because a) our terminal is always already activated into a Python environment and b) caching gets updated when we press the `Run` button, so invoking our tests from outside of this means that they could run on old versions of our code, causing confusion.\n\nLet's run them from our `main.py` file for now as we aren't using it for anything else yet. Add the following to this file.\n\n```python\nimport pytest\npytest.main()\n```","metadata":{"id":1273}}],["1274",{"pageContent":"Let's run them from our `main.py` file for now as we aren't using it for anything else yet. Add the following to this file.\n\n```python\nimport pytest\npytest.main()\n```\n\nPress the `Run` button. `pytest` does automatic test discovery so you don't need to tell it which tests to run. It will look for files that start with `test` and for functions that start with `test_` and assume these are tests. (You can read more about exactly how test discovery works and can be configured [here](https://docs.pytest.org/en/6.2.x/getting-started.html).)\n\nYou should see some scary looking red failures, as shown below. (`pytest` uses dividers such as `======` and `------` to format sections and these can get messy if your output pane is too narrow. If things look a bit wonky try making it wider and rerunning.)\n\n![**Image 2:** *Reading the `pytest` error messages.*](https://docimg.replit.com/images/tutorials/09-TDD/09-02-run-pytest.png)\n\nIf you read the output from the top down you'll see a bunch of different things happened. First, `pytest` ran test discovery and found one test. It ran this and it failed so you see the first red `F` above the `FAILURES` section. That tells us exactly which line of the test failed and how. In this case, it was an `AttributeError` as we tried to use `split_name` which was not defined. Let's go fix that.\n\nHead over to the `utils/name_helper.py` file and add the following code.\n\n```python\ndef split_name(name):\n    first_name, last_name = name.split()\n    return [first_name, last_name]\n```\n\nThis is the very simple version we discussed earlier that can only handle two names, but it will solve the name error and TDD is all about small increments. Press `Run` to re-run the tests and you should see a far more friendly green output now, as below, indicating that all of our tests passed.\n\n![**Image 3:** *Seeing our tests pass after updating the code.*](https://docimg.replit.com/images/tutorials/09-TDD/09-03-pytest-green-output.png)","metadata":{"id":1274}}],["1275",{"pageContent":"![**Image 3:** *Seeing our tests pass after updating the code.*](https://docimg.replit.com/images/tutorials/09-TDD/09-03-pytest-green-output.png)\n\nBefore fixing our function to handle more complex cases, let's first write the tests and check that they fail. Go back to `tests/test_name_helper.py` and add the following four test functions beneath the existing one.\n\n```python\nfrom namesplitter.utils import name_helper\n\ndef test_two_names():\n    assert name_helper.split_name(\"John Smith\") == [\"John\", \"Smith\"]\n\ndef test_middle_names():\n    assert name_helper.split_name(\"John Patrick Smith\") == [\"John Patrick\", \"Smith\"]\n    assert name_helper.split_name(\"John Patrick Thomson Smith\") == [\"John Patrick Thomson\", \"Smith\"]\n\ndef test_surname_prefixes():\n    assert name_helper.split_name(\"John van der Berg\") == [\"John\", \"van der Berg\"]\n    assert name_helper.split_name(\"John Patrick van der Berg\") == [\"John Patrick\", \"van der Berg\"]\n\ndef test_split_name_onename():\n    assert name_helper.split_name(\"Smith\") == [\"\", \"Smith\"]\n\ndef test_split_name_nonames():\n    assert name_helper.split_name(\"\") == [\"\", \"\"]\n```\n\nRerun the tests and you should see a lot more output now. If you scroll back up to the most recent `===== test session starts =====` section, it should look as follows.\n\n![**Image 4:** *Seeing more failures after adding more tests.*](https://docimg.replit.com/images/tutorials/09-TDD/09-04-run-tests.png)\n\nIn the top section, the `.FFFF` is shorthand for \"five tests were run, the first one passed and the next four failed\" (a green dot indicates a pass and a red F indicates a failure). If you had more files with tests in them, you would see a line like this per file, with one character of output per test.\n\nThe failures are described in detail after this, but they all amount to variations of the same problem. Our code currently assumes that we will always get exactly two names, so it either has too many or too few values after running `split()` on the test examples.\n\n## Fixing our `split_name` function","metadata":{"id":1275}}],["1276",{"pageContent":"## Fixing our `split_name` function\n\nGo back to `name_helper.py` and modify it to look as follows.\n\n```python\ndef split_name(name):\n    names = name.split(\" \")\n\n    if not name:\n        return [\"\", \"\"]\n\n    if len(names) == 1:\n        return [\"\", name]\n\n    if len(names) == 2:\n        firstname, lastname = name.split(\" \")\n        return [firstname, lastname]\n```\n\nThis should handle the case of zero, one, or two names. Let's run our tests again to see if we've made progress before we handle the more difficult cases. You should get a lot less output now and three green dots, as shown below.\n\n![**Image 5:** *Progress: some of our tests pass now.*](https://docimg.replit.com/images/tutorials/09-TDD/09-05-three-green-dots.png)\n\nThe rest of the output indicates that it's the middle names and surname prefix examples that are still tripping up our function, so let's add the code we need to fix those. Another important aspect of TDD is keeping your functions as small as possible so that they are easier to understand, test, and reuse, so let's write a second function to handle the three or more names cases.\n\nAdd the new function called `split_name_three_plus()` and add an `else` clause to the existing `split_name` function where you call this new function. The entire file should now look as follows.\n\n```python\ndef split_name_three_plus(names):\n    first_names = []\n    last_names = []\n\n    for i, name in enumerate(names):\n        if i == len(names) - 1:\n            last_names.append(name)\n        elif name[0].islower():\n            last_names.extend(names[i:])\n            break\n        else:\n            first_names.append(name)\n    first_name = \" \".join(first_names)\n    last_name = \" \".join(last_names)\n    return [first_name, last_name]\n\ndef split_name(name):\n    names = name.split(\" \")\n\n    if not name:\n        return [\"\", \"\"]\n\n    if len(names) == 1:\n        return [\"\", name]\n\n    if len(names) == 2:\n        firstname, lastname = name.split(\" \")\n        return [firstname, lastname]\n    else:","metadata":{"id":1276}}],["1277",{"pageContent":"if not name:\n        return [\"\", \"\"]\n\n    if len(names) == 1:\n        return [\"\", name]\n\n    if len(names) == 2:\n        firstname, lastname = name.split(\" \")\n        return [firstname, lastname]\n    else:\n        return split_name_three_plus(names)\n```\n\nThe new function works by always appending names to the `first_names` list until it gets to the last name, or until it encounters a name that starts with a lowercase letter, at which point it adds all of the remaining names to `last_names` list. If you run the tests again, they should all pass now.\n\n![**Image 6:** *All of the tests pass after adding a new function.*](https://docimg.replit.com/images/tutorials/09-TDD/09-06-five-passed.png)\n\nThe tests were already helpful in making sure that we understood the problem and that our function worked for specific examples. If we had made any off-by-one mistakes in our code that deals with three or more names, our tests would have caught them. If we need to refactor or change our code in future, we can also use our tests to make sure that our new code doesn't introduce any regressions (where fixing problems causes code to break on other examples that worked before the fix.)\n\n## Using our function\n\nLet's build a very basic application to use our function. Replace the testing code in `main.py` with the following.\n\n```python\nfrom utils import name_helper\n\nname = input(\"Please enter your full name: \")\n\nfirst_name, last_name = name_helper.split_name(name)\n\nprint(f\"Your first name is: {first_name}\")\nprint(f\"Your last name is: {last_name}\")\n```\n\nIf you run this, it will prompt the user for their name and then display their first and last name.\n\n![**Image 7:** *Using our function in a basic console application.*](https://docimg.replit.com/images/tutorials/09-TDD/09-07-using-function.png)","metadata":{"id":1277}}],["1278",{"pageContent":"![**Image 7:** *Using our function in a basic console application.*](https://docimg.replit.com/images/tutorials/09-TDD/09-07-using-function.png)\n\nBecause you're using the `main.py` file now, you can also invoke `pytest` directly from the output console on the right by typing `import pytest; pytest.main()`. Note that updates to your code are only properly applied when you press the `Run` button though, so make sure to run your code between changes before running the tests.\n\n![**Image 8:** *Triggering a new error and invoking `pytest` from the output pane.*](https://docimg.replit.com/images/tutorials/09-TDD/09-08-run-pytestmain.png)\n\n## Make it your own\n\nWe've written a name splitter that can handle some names more complicated than just \"John Smith\". It's not perfect though: for example, if you put in a name with two consecutive spaces it will crash our program. You could fork the project and fix this by first writing a test with consecutive spaces and then modifying the code to handle this (and any other edge cases you can think of).\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@GarethDwyer1/namesplitter?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Where next\n\nYou've learned to do TDD in this project. It's a popular style of programming, but it's not for everyone. Even if you decide not to use TDD, having tests is still very useful and it's not uncommon for large projects to have thousands or millions of tests.\n\nTake a look at the [big list of naughty strings](https://github.com/minimaxir/big-list-of-naughty-strings) for a project that collects inputs that often cause software to break. You could also read [How SQLite Is Tested](https://www.sqlite.org/testing.html) which explains how SQLite, a popular lightweight database, has 150 thousand lines of code and nearly 100 million(!) lines of tests.","metadata":{"id":1278}}],["1279",{"pageContent":"In the next tutorial, we'll show you how to become a Replit poweruser by taking advantage of the productivity features it offers.","metadata":{"id":1279}}],["1280",{"pageContent":"---\ntitle: Wordle with Python & Rich\n---\n\n# Building a two player _Wordle_ clone with Python and Rich on Replit\n\nIn this guide, we'll build a version of the popular game _Wordle_. Instead of the computer providing a word that the player has to guess, our version will work with two players. Player 1 will enter the word, and then player 2 will try to guess the word entered, similar to the popular game _Hangman_.\n\nOnce you're done, you'll be able to play a command-line-based game with a friend (with both of you sitting at the same machine), as shown below.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/twordledemo.mp4\" type=\"video/mp4\">\n</video>\n\nWe'll be using Python, and to do the green and yellow colors we'll use [Rich](https://rich.readthedocs.io/en/stable/introduction.html), a library for rich-text formatting. To follow along, you should know some basic Python, but we'll explain each code sample in depth so you should be able to keep up even if you are not familiar with Python.\n\n## Getting started\n\nTo get started, create a **Python** repl.\n\n![New repl](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/new-repl.png)\n\n## Installing Rich\n\nRich isn't part of the Replit Universal Installer, so we have to install it manually. Open up the \"Shell\" tab in the repl workspace and run the following commands:\n\n```bash\npython3 -m poetry init --no-interaction\npython3 -m poetry add rich\n```\n\nThis will create a `pyproject.toml` file to define Rich as a dependency, and Replit will automatically install it for us next time we run our app.\n\n![Running commands in shell](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/shell.png)\n\n## Printing colored text\n\nThe first thing we need to figure out is how to print out different colored letters. By default, we'll use similar settings to the _Wordle_ defaults\n\n- Green = correct letter in the correct position","metadata":{"id":1280}}],["1281",{"pageContent":"The first thing we need to figure out is how to print out different colored letters. By default, we'll use similar settings to the _Wordle_ defaults\n\n- Green = correct letter in the correct position\n- Yellow = correct letter in the incorrect position\n- Gray = incorrect letter\n\nBecause we're using Rich, we don't have to mess around with [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code). It's possible to use them to style terminal text, but you end up having to deal with nasty-looking strings like `\\033[0;32m`, and there are likely to be compatibility issues too. Rich abstracts this away for us, and we can use nicer-looking controls like '[black on green]TWORDLE[/]' to describe how the text should look.\n\nTake a look at how this works now by adding the following code to `main.py` and pressing \"Run\":\n\n```python\nimport rich\n\nrich.print('[black on green]TWORDLE[/]')\n```\n\nBecause we may want to customize what specific colors mean at some point, let's define each of our three cases in functions. Replace the existing code in `main.py` with the following:\n\n```python\nimport rich\n\ndef correct_place(letter):\n    return f'[black on green]{letter}[/]'\n\ndef correct_letter(letter):\n    return f'[black on yellow]{letter}[/]'\n\ndef incorrect(letter):\n    return f'[black on white]{letter}[/]'\n\nWELCOME_MESSAGE = correct_place(\"WELCOME\") + \" \" + incorrect(\"TO\") + \" \" + correct_letter(\"TWORDLE\") + \"\\n\"\n\ndef main():\n    rich.print(WELCOME_MESSAGE)\n\nif __name__ == '__main__':\n    main()\n```\n\nRun this code, and you'll see a Wordle-styled welcome message, demonstrating all three styles, as shown below.\n\n![Wordle welcome message](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/welcometowordle.png)\n\n## Creating the game loop\n\nAs in classic _Wordle_, our game will allow the player six tries to guess a word. Unlike classic _Wordle_, we'll allow for two players. Player 1 will choose a word, and player 2 will attempt to guess it. The basic logic is then:\n\n```\nGet word from Player 1","metadata":{"id":1281}}],["1282",{"pageContent":"```\nGet word from Player 1\nGet guess from Player 2\nWhile Player 2 has guesses remaining\n    Get new guess\n    If guess is correct\n        End the game\n```\n\nSo let's ignore our fancy colored text for a moment and build this logic.\n\n### Getting and guessing the word\n\nWe'll use the `Console` class from Rich, which creates a virtual output pane on top of our actual console. This will make it easier to have more control over our output as we build out the app.\n\nAdd the following two imports to the top of the `main.py` file:\n\n```python\nfrom rich.prompt import Prompt\nfrom rich.console import Console\n```\n\nAnd now replace the `main()` function with the following code:\n\n```python\ndef main():\n    rich.print(WELCOME_MESSAGE)\n\n    allowed_guesses = 6\n    used_guesses = 0\n\n    console = Console()\n    answer_word = Prompt.ask(\"Enter a word\")\n    console.clear()\n\n    while used_guesses < allowed_guesses:\n        used_guesses += 1\n        guess = Prompt.ask(\"Enter your guess\")\n        if guess == answer_word:\n            break\n    print(f\"\\n\\nTWORDLE {used_guesses}/{allowed_guesses}\\n\")\n```\n\nIf you run this, you'll be prompted (as player 1) to enter a word. The entered word will then be hidden from view to avoid spoiling the game, and player 2 can enter up to six guesses. At this stage, player 2 doesn't get any feedback on correct or incorrect letters, which makes the game pretty hard for player 2! If player 2 does happen to guess correctly, the loop will break and the game will display how many guesses were used.\n\n![Game loop](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/gameloop.png)\n\n### Providing feedback on correct letters\n\nLet's add a helper function to calculate whether each letter should be green, yellow, or gray. Add this function above the `main()` function in `main.py`:\n\n```python\ndef score_guess(guess, answer):\n    scored = []\n    for i, letter in enumerate(guess):\n        if answer[i] == guess[i]:\n            scored += correct_place(letter)\n        elif letter in answer:","metadata":{"id":1282}}],["1283",{"pageContent":"```python\ndef score_guess(guess, answer):\n    scored = []\n    for i, letter in enumerate(guess):\n        if answer[i] == guess[i]:\n            scored += correct_place(letter)\n        elif letter in answer:\n            scored += correct_letter(letter)\n        else:\n            scored += incorrect(letter)\n    return ''.join(scored)\n```\n\nThis function takes in player 2's guess and the correct answer and compares them letter by letter. It uses the helper functions we defined earlier to create the Rich formatting string for each letter, and then joins them all together into a single string.\n\n<hr />\n\n**NOTE:** Here we simplify how duplicate letters are handled. In classic _Wordle_, letters are colored based on how often they occur in the correct answer, for example, if you guess \"SPEED\" and the correct word is \"THOSE\", the second E in your guess will be colored as incorrect. In our version, it will be labeled as a correct letter in the wrong place. Handling duplicate letters is tricky, and implementing this logic correctly is left as an exercise to the reader.\n\n<hr />\n\nCall this function from inside the `while` loop in `main()` by adding the `console.print` line as follows:\n\n```python\n    while used_guesses < allowed_guesses:\n        used_guesses += 1\n        guess = Prompt.ask(\"Enter your guess\")\n        console.print(score_guess(guess, answer_word)) # new line\n        if guess == answer_word:\n            break\n```\n\nNow player 2 has something to work on from each guess, and it should be a lot easier to guess the correct word by incrementally finding more correct letters, as shown in the example below.\n\n![Feedback](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/feedback.png)\n\n## Adding an emoji representation for spoiler-free sharing","metadata":{"id":1283}}],["1284",{"pageContent":"![Feedback](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/feedback.png)\n\n## Adding an emoji representation for spoiler-free sharing\n\nA key part of _Wordle_ is that once a player has guessed a word, they can share a simple graphic of how well they did, without giving away the actual word. For our two-player version, this \"no spoilers\" feature isn't as important, but let's add it anyway.\n\nAs with the letter-coloring, we want to keep the emoji we use configurable. By default, we'll use green, yellow, and gray squares. Let's start by defining this in a dictionary, near the top of our `main.py` file. Add the following to your code:\n\n```python\nemojis = {\n    'correct_place': '🟩',\n    'correct_letter': '🟨',\n    'incorrect': '⬜'\n}\n```\n\nReplace the `score_guess` function with the following:\n\n```python\ndef score_guess(guess, answer):\n    scored = []\n    emojied = []\n    for i, letter in enumerate(guess):\n        if answer[i] == guess[i]:\n            scored += correct_place(letter)\n            emojied.append(emojis['correct_place'])\n        elif letter in answer:\n            scored += correct_letter(letter)\n            emojied.append(emojis['correct_letter'])\n        else:\n            scored += incorrect(letter)\n            emojied.append(emojis['incorrect'])\n    return ''.join(scored), ''.join(emojied)\n```\n\nThe logic is very similar to before, but instead of only calculating the correct style for the letter, we also keep track of each emoji. At the end, we return both the string to print out the scored word, and the emoji representation for that guess.\n\nTo use this in the main function, replace the code for the `while` loop with the following code:\n\n```python\n    all_emojied = []\n    while used_guesses < allowed_guesses:\n        used_guesses += 1\n        guess = Prompt.ask(\"Enter your guess\")\n        scored, emojied = score_guess(guess, answer_word)\n        all_emojied.append(emojied)\n        console.print(scored)\n        if guess == answer_word:\n            break","metadata":{"id":1284}}],["1285",{"pageContent":"scored, emojied = score_guess(guess, answer_word)\n        all_emojied.append(emojied)\n        console.print(scored)\n        if guess == answer_word:\n            break\n    print(f\"\\n\\nTWORDLE {used_guesses}/{allowed_guesses}\\n\")\n    for em in all_emojied:\n        console.print(em)\n```\n\nIf you run again, the game will work as before, but now you'll see the emoji representation printed after the game ends. This can be copy-pasted to share and help our game go viral. You can see what it looks like in the image below.\n\n![Emojis](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/withemoji.png)\n\n## Some finishing touches\n\nThe one messy part of our game remaining is that the input prompts are still shown after player 2 has entered each guess. This means that each word is shown twice: once in its colored form, and once exactly as the player entered it. Let's adapt the game to clear the console and output just the colored versions of each guess.\n\nTo do this, we need to keep track of all player 2's guess, which we were not doing before.\n\nReplace the `while` loop in the `main()` function with the following code:\n\n```python\n    all_emojied = []\n    all_scored = []\n    while used_guesses < allowed_guesses:\n        used_guesses += 1\n        guess = Prompt.ask(\"Enter your guess\")\n        scored, emojied = score_guess(guess, answer_word)\n        all_scored.append(scored)\n        all_emojied.append(emojied)\n        console.clear()\n        for scored in all_scored:\n            console.print(scored)\n        if guess == answer_word:\n            break\n```\n\nThis clears the console completely after each guess by player 2, and then prints out each of the (styled) guesses. The output looks neater now, as shown below.\n\n![Cleared inputs](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/clearedinputs.png)\n\n### Adding instructions","metadata":{"id":1285}}],["1286",{"pageContent":"![Cleared inputs](https://docimg.replit.com/images/tutorials/39-two-player-wordle-clone-python-rich/clearedinputs.png)\n\n### Adding instructions\n\nPeople will like our game more if they can figure out what to do without having to read documentation. Let's add some basic instructions for each player to the game interface. Below the `WELCOME_MESSAGE` variable we defined earlier, add the following:\n\n```python\nP1_INSTRUCTIONS = \"Player 1: Please enter a word (player 2, look away)\\n\"\nP2_INSTRUCTIONS = \"Player 2: You may start guessing\\n\"\n```\n\nNow update the `main()` function like this:\n\n```python\ndef main():\n    allowed_guesses = 6\n    used_guesses = 0\n\n    console = Console()\n    console.print(WELCOME_MESSAGE)\n    console.print(P1_INSTRUCTIONS)\n    answer_word = Prompt.ask(\"Enter a word\")\n    console.clear()\n    console.print(WELCOME_MESSAGE)\n    console.print(P2_INSTRUCTIONS)\n\n    all_emojied = []\n    all_scored = []\n    while used_guesses < allowed_guesses:\n        used_guesses += 1\n        guess = Prompt.ask(\"Enter your guess\")\n        scored, emojied = score_guess(guess, answer_word)\n        all_scored.append(scored)\n        all_emojied.append(emojied)\n        console.clear()\n        console.print(WELCOME_MESSAGE)\n        for scored in all_scored:\n            console.print(scored)\n        if guess == answer_word:\n            break\n    print(f\"\\n\\nTWORDLE {used_guesses}/{allowed_guesses}\\n\")\n    for em in all_emojied:\n        console.print(em)\n```\n\nNow our welcome message stays at the top, and the players are prompted by simple instructions. Have fun playing it with your friends!\n\n## Where next?\n\nThe basics of the game are in place, but there is still a lot you could build from here. Some ideas:\n\n- Fix the logic for handling duplicate letters.\n- Fix the fact that the game crashes if player 2 enters the wrong number of letters.\n- The game still says `6/6`, even if player 2 has not guessed the word after six tries. Have the game print out `X/6` in this case, as in classic _Wordle_.","metadata":{"id":1286}}],["1287",{"pageContent":"- The game still says `6/6`, even if player 2 has not guessed the word after six tries. Have the game print out `X/6` in this case, as in classic _Wordle_.\n- Give player 2 more guesses based on the length of the word player 1 enters.\n- [CHALLENGING] Make the game work over the internet instead of requiring both players to be in same room.\n\nYou can find the code for this tutorial here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Wordle?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1287}}],["1288",{"pageContent":"---\ntitle: \"Databases: build a phonebook\"\n---\n\n# Using the Replit database\n\n![](https://docimg.replit.com/images/tutorials/11-database/11-01-db-heading.png)\n\nIn previous tutorials we used the file system to store data persistently. This works fine for smaller projects, but there are some limitations to storing data directly in a file system. A more advanced way to store data which is used by nearly any production application is a database.\n\nAnother advantage of storing data in a database instead of in files is that it separates our code and data cleanly. If we build an application on Replit that processes any kind of data, it's likely that we'll want to share the code with other people but **not** the data. Having our data cleanly separated into a private database allows us to do exactly this.\n\nIn this tutorial, you'll see how to store data from a Replit project directly in the Replit key-value store, one of the simplest varieties of database, similar to a Python dictionary and more scalable.\n\nAs a demonstration project, we'll build a basic phone book application, storing contact information about friends and family and a command line application to allow users to:\n\n- add new contacts\n- search for existing contacts\n- update existing contacts\n- remove contacts.\n\nThis will cover the so-called \"CRUD\" (Create, Read, Update, Delete) operations that are fundamental to any database-backed software.\n\nNow create a new Python repl called \"phonebook\".\n\n## Adding and reading data using the Replit database\n\nIn the `main.py` file import the database driver with this code:\n\n```python\nfrom replit import db\n```\n\nDatabases usually store data on a separate physical server from where your code is running, so your code needs to know how to find the database and how to authenticate (to prove that you are authorised to access a specific database to stop other people reading your data).","metadata":{"id":1288}}],["1289",{"pageContent":"Usually we would have to supply some kind of credentials for this (e.g. a username and password), as well as an endpoint to indicate where the database can be found. In this case, Replit handles everything automatically (as long as you are signed in), so you can start storing data straight away.\n\nThe `db` object works very similarly to a global Python dictionary but any data is persistently stored. You can associate a specific value with a given key in the same way. Add the following to your `main.py` file.\n\n```python\ndb[\"Smith, John\"] = \"0123456789\"\nprint(db[\"Smith, John\"])\n```\n\nYou should see the phone number printed to the console, as shown below.\n\n![**Image 2:** *Viewing a phone number from the database.*](https://docimg.replit.com/images/tutorials/11-database/11-02-print-number.png)\n\n### How is this different from a dictionary?\n\nThe main difference between using the database and a Python dictionary is that, with the database, the data is:\n\n- _persisted_ between runs\n- kept separate from the code.\n\nFor a concrete example, consider storing the same \"John Smith\" contact in both a dictionary and the database. Replace the code in your `main.py` file with the following and run it.\n\n```python\nfrom replit import db\n\n# database\ndb[\"Smith, John\"] = \"0123456789\"\nprint(db[\"Smith, John\"])\n\n# dictionary\nd = {}\nd[\"Smith, John\"] = \"0123456789\"\nprint(d[\"Smith, John\"])\n```\n\nHere we store the information first in the database and print it from the database and then in a dictionary and print it from there. In both cases, we see the result printed and the syntax is exactly the same.\n\nHowever, if we comment out the lines where we create the association between key and value, and run the code again, we'll see a difference.\n\n```python\nfrom replit import db\n\n# database\n# db[\"Smith, John\"] = \"0123456789\"\nprint(db[\"Smith, John\"])\n\n# dictionary\n# d = {}\n# d[\"Smith, John\"] = \"0123456789\"\nprint(d[\"Smith, John\"])\n```","metadata":{"id":1289}}],["1290",{"pageContent":"```python\nfrom replit import db\n\n# database\n# db[\"Smith, John\"] = \"0123456789\"\nprint(db[\"Smith, John\"])\n\n# dictionary\n# d = {}\n# d[\"Smith, John\"] = \"0123456789\"\nprint(d[\"Smith, John\"])\n```\n\nIn this case, the first print still works as the data has persisted in the database. However the dictionary has been cleared between runs so we get the error `NameError: name 'd' is not defined`.\n\nBecause each Replit project has its own unique database which needs a secret key to access, you can add as much data to your database and still share your project without sharing any of your data.\n\nThe database also has some functionality that Python dictionaries do not, such as searching keys by prefix, which we will take a closer look at soon.\n\n## Building a basic phonebook application that can read and store data\n\nLet's get started with the application. We'll build two separate components in parallel, piece by piece:\n\n1. The database logic to create, read, update, and delete contacts.\n2. The command line interface to prompt the user to choose what to do, get input, and show output.\n\nWe'll keep the code that interacts with users in our `main.py` file and the database logic in a new module called `contacts.py`\n\nAs we don't have any contacts yet, we'll start by allowing our users to add them.\n\n### Allowing the user to add contacts to the phonebook\n\nLet's build the user interaction side first. We need to be able to accept input from the user and show them prompts and output. Add the following code to `main.py`:\n\n```python\ndef prompt_add_contact():\n    name = input(\"Please enter the contact's name: \")\n    number = input(\"Please enter the contact's phone number: \")\n    print(f\"Adding {name} with {number}\")\n\nprompt_add_contact()\n```\n\nThis doesn't actually store the contact anywhere yet, but you can test it out to see how it prompts the user for input and then displays a confirmation message.\n\nNext we need to add some logic to store this in our database.\n\nCreate a new file called contacts.py and add the following code.\n\n```python","metadata":{"id":1290}}],["1291",{"pageContent":"Next we need to add some logic to store this in our database.\n\nCreate a new file called contacts.py and add the following code.\n\n```python\nfrom replit import db\n\ndef add_contact(name, phone_number):\n    if name in db:\n        print(\"Name already exists\")\n    else:\n        db[name] = phone_number\n```\n\nBecause we will use people's names as keys in our database and because it's possible that different people share the same name, it's possible that our users could overwrite important phone numbers by adding a new contact with the same name as an existing one. To prevent this, we'll ensure that they use a unique name for each contact and only add information with this method to **new** names.\n\nBack in the `main.py` file add two lines to import our new module and call the add_contact function. The new code should look as follows:\n\n```python\nimport contacts\n\ndef prompt_add_contact():\n    name = input(\"Please enter the contact's name: \")\n    number = input(\"Please enter the contact's phone number: \")\n    print(f\"Adding {name} with {number}\")\n    contacts.add_contact(name, number)\n\nprompt_add_contact()\n```\n\nTest that this works - run it twice and enter the same name both times, with a different phone number. You should see the confirmation the first time, but the second time it will inform you that the contact already exists, as shown below.\n\n![**Image 3:** *Adding new contacts or showing an error.*](https://docimg.replit.com/images/tutorials/11-database/11-03-contact-already-exists.png)\n\n### Allowing users to retrieve details of stored contacts\n\nNow that we've added a contact to our database, let's allow users to retrieve this information. We want the user to be able to input a name and get the associated phone number in return. We can follow a similar pattern to before: adding a function to both our `main.py` file to handle user interaction and a separate one to our `contacts.py` file to handle database interaction.","metadata":{"id":1291}}],["1292",{"pageContent":"In `main.py` add the following function and change the last line to call our new function instead of the `prompt_add_contact()` one, as follows:\n\n```python\ndef prompt_get_contact():\n    name = input(\"Please enter the name to find: \")\n    number = contacts.get_contact(name)\n    if number:\n        print(f\"{name}'s number is {number}\")\n    else:\n        print(f\"It looks like {name} does not exist\")\n\nprompt_get_contact()\n```\n\nNote that this time we call the `get_contact` function before we write it - we have a blueprint that works now from our previous example so we can skip some back-and-forth steps.\n\nAdd the following function to `contacts.py`:\n\n```python\ndef get_contact(name):\n    number = db.get(name)\n    return number\n```\n\nOur new code to go into `contact.py` is very simple and it might be tempting to just put this logic directly in the `main.py` file as it's so short. However it's good to stay consistent as each of the files is likely to grow in length and complexity over time, and it will be easier to maintain our codebase if our user interaction code is strictly separate from our database interaction code.\n\nRun the code again and input the same name as before. If all went well, you'll see the number, as in the example below.\n\n![**Image 4:** *Retrieving contacts from user input.*](https://docimg.replit.com/images/tutorials/11-database/11-04-get-number.png)\n\n### Interlude: Creating a main menu\n\nWe now have functionality to add and retrieve contacts, and still need to add:\n\n- searching for names with partial matches\n- updating existing contacts (name or number)\n- removing contacts.\n\nBut before we get started on those problems, we need to allow users to choose what kind of functionality they want to activate. With a GUI or web application, we could add some menu items or buttons, but our command line application is driven only by text input and output on a simple console. Let's build a main menu that allows users to specify what they want to do.","metadata":{"id":1292}}],["1293",{"pageContent":"To make life easier for our users, we'll let them make choices by inputting a single number that's associated with the relevant menu item.\n\nChange your `main.py` file to look as follows:\n\n```python\nimport contacts\nfrom os import system\n\nmain_message = \"\"\"WELCOME TO PHONEBOOK\n----------------------------------\nPlease choose:\n1 - to add a new contact\n2 - to find a contact\n----------------------------------\n\"\"\"\n\ndef prompt_add_contact():\n    name = input(\"Please enter the contact's name: \")\n    number = input(\"Please enter the contact's phone number: \")\n    print(f\"Adding {name} with {number}\")\n    contacts.add_contact(name, number)\n\ndef prompt_get_contact():\n    name = input(\"Please enter the name to find: \")\n    number = contacts.get_contact(name)\n    if number:\n        print(f\"{name}'s number is {number}\")\n    else:\n        print(f\"It looks like {name} does not exist\")\n\ndef main():\n    print(main_message)\n    choice = input(\"Please make your choice: \").strip()\n    if choice == \"1\":\n        prompt_add_contact()\n    elif choice == \"2\":\n        prompt_get_contact()\n    else:\n        print(\"Invalid input. Please try again.\")\n\nwhile True:\n    system(\"clear\")\n    main()\n    input(\"Press enter to continue: \")\n```\n\nThis looks like a lot more code than we had before, but if you ignore the multi-line string at the top and the two functions that we already had, there's not much more. Our new `main()` function asks the users to choose an item from the menu, makes sure that it's a valid choice, and then calls the appropriate function.\n\nBelow our `main()` function, we have an infinite loop so that the user can keep using our application without re-running it after the first action. We call `system(\"clear\")` between runs to clean up the old inputs and outputs (and we also added a new import at the top of the file for this).\n\n### Extending our search functionality","metadata":{"id":1293}}],["1294",{"pageContent":"### Extending our search functionality\n\nWe already allow users to find contacts by entering their exact name, but it's useful to be able to do partial matches too. If our user inputs \"Smith\" and we have a \"Smith, John\" and a \"Smith, Mary\", we should be able to show the user both of these contacts.\n\nThe Replit database has a `prefix` function that can find all keys that start with a specific string. Giving \"Smi\" to this prefix function would match \"Smith\", \"Smith, John\" and \"Smith, Mary\", but **not** \"John Smith\", as it only matches from the **start** of each key.\n\nYou can use this by calling, for example, `db.prefix(\"Smi\")` which will return all of the _keys_ that match the \"Smi\" prefix. Note that this does not return the values (in our case, the phone numbers), so once we have our matches we still need to look up each phone number individually.\n\nWe want our application to prefer finding an exact match if one exists, or gracefully fall back to returning a list of matches by prefix only if there is no exact match.\n\nAdd a new function to `contacts.py` that can search for contacts and extract each phone number as follows:\n\n```python\ndef search_contacts(search):\n    match_keys = db.prefix(search)\n    return {k: db[k] for k in match_keys}\n```\n\nAnd over in `main.py` modify the `prompt_get_contacts()` function to call this if necessary (when there is no exact match) as follows:\n\n```python\ndef prompt_get_contact():\n    name = input(\"Please enter the name to find: \")\n    number = contacts.get_contact(name)\n    if number:\n        print(f\"{name}'s number is {number}\")\n    else:\n        matches = contacts.search_contacts(name)\n        if matches:\n            for k in matches:\n                print(f\"{k}'s number is {matches[k]}\")\n        else:\n            print(f\"It looks like {name} does not exist\")\n```","metadata":{"id":1294}}],["1295",{"pageContent":"if matches:\n            for k in matches:\n                print(f\"{k}'s number is {matches[k]}\")\n        else:\n            print(f\"It looks like {name} does not exist\")\n```\n\nRun the code again and choose to add a contact. Enter \"Smith, Mary\" when prompted and any phone number. When the program starts over, choose to find a contact and input \"Smi\". It should print out both \"Smith\" matches that we have, as shown below.\n\n![**Image 5:** *The user menu: They can now choose what action to do.*](https://docimg.replit.com/images/tutorials/11-database/11-05-choose-add-contact.png)\n\n### Allowing users to update contacts\n\nThere are two ways that users might want to update contacts. They should be able to:\n\n1. Change the name of a contact but keep the same phone number\n2. Change the phone number of a contact but keep the same name\n\nBecause we are storing contacts as keys and values, to do 1) we need to create a new contact and remove the original one, while for 2) we can simply update the value of the existing key.\n\nWe can handle both cases with a single prompt by allowing the user to leave either field blank, in this case preserving the old value. Add the following function to your `main.py` file.\n\n```python\ndef prompt_update_contact():\n    old_name = input(\"Please enter the name of the contact to update: \")\n    old_number = contacts.get_contact(old_name)\n    if old_number:\n        new_name = input(f\"Please enter the new name for this contact (leave blank to keep {old_name}): \").strip()\n        new_number = input(f\"Please enter the new number for this contact (leave blank to keep {old_number}): \").strip()\n\n        if not new_number:\n            new_number = old_number\n\n        if not new_name:\n            contacts.update_number(old_name, new_number)\n        else:\n            contacts.update_contact(old_name, new_name, new_number)\n\n    else:\n        print(f\"It looks like {old_name} does not exist\")\n```\n\nThis uses two functions in our `contacts.py` file that don't exist yet. These are:","metadata":{"id":1295}}],["1296",{"pageContent":"else:\n        print(f\"It looks like {old_name} does not exist\")\n```\n\nThis uses two functions in our `contacts.py` file that don't exist yet. These are:\n\n- `update_number` to keep the contact but change the phone number\n- `update_contact` to update the name (and maybe also the number) by removing the old contact and creating a new one.\n\nCreate these two functions in `contacts.py` as follows.\n\n```python\ndef update_number(old_name, new_number):\n    db[old_name] = new_number\n\ndef update_contact(old_name, new_name, new_number):\n    db[new_name] = new_number\n    del db[old_name]\n```\n\nNote how we can use the `del` Python keyword to remove things from our database. We'll use this again in the next section.\n\nNow we need to allow users to choose \"update\" as an option from the menu. In the `main.py` file, add a new line to the menu prompt to inform our users about the option and update the `main()` function to call the new update function when appropriate, as follows:\n\n```python\nmain_message = \"\"\"WELCOME TO PHONEBOOK\n----------------------------------\nPlease choose:\n1 - to add a new contact\n2 - to find a contact\n3 - to update a contact\n----------------------------------\n\"\"\"\n# ...\n```\n\n```python\ndef main():\n    print(main_message)\n    choice = input(\"Please make your choice: \").strip()\n    if choice == \"1\":\n        prompt_add_contact()\n    elif choice == \"2\":\n        prompt_get_contact()\n    elif choice == \"3\":\n        prompt_update_contact()\n    else:\n        print(\"Invalid input. Please try again.\")\n```\n\nTest it out! Change someone's name, someone else's number, and then update both the name and the number at once.\n\n### Allowing users to remove contacts\n\nSometimes there are people we just don't want to talk to any more. We've already seen how to remove contacts by updating their key and removing the old one, but let's allow for removals without updates too. By now, you should be familiar with the parts of the code that you need to update. To recap, these are:\n\n- adding a new `prompt_*` function to the `main.py` file","metadata":{"id":1296}}],["1297",{"pageContent":"- adding a new `prompt_*` function to the `main.py` file\n- adding a new `*_contact` function to `contacts.py`\n- adding a new line to the menu prompt in `main.py`\n- adding a new `elif` block to the `main()` function in `main.py`.\n\nThese are each shown in turn below.\n\n```python\ndef prompt_delete_contact():\n    name = input(\"Please enter the name to delete: \")\n    contact = contacts.get_contact(name)\n    if contact:\n        print(f\"Deleting {name}\")\n        contacts.delete_contact(name)\n    else:\n        print(f\"It looks like {name} does not exist\")\n```\n\n```python\ndef delete_contact(name):\n    del db[name]\n```\n\n```python\nmain_message = \"\"\"WELCOME TO PHONEBOOK\n----------------------------------\nPlease choose:\n1 - to add a new contact\n2 - to find a contact\n3 - to update a contact\n4 - to delete a contact\n----------------------------------\n\"\"\"\n```\n\n```python\ndef main():\n    print(main_message)\n    choice = input(\"Please make your choice: \").strip()\n    if choice == \"1\":\n        prompt_add_contact()\n    elif choice == \"2\":\n        prompt_get_contact()\n    elif choice == \"3\":\n        prompt_update_contact()\n    elif choice == \"4\":\n        prompt_delete_contact()\n    else:\n        print(\"Invalid input. Please try again.\")\n```\n\nIt may be a bit inconvenient to type out the whole name of a contact that you want to delete, but it's usually acceptable to make \"dangerous\" operations less user friendly. As there is no way to recover contacts, it's good to make it a bit more difficult to delete them. Maybe our user will change their mind while typing out the name of an old friend to delete the record and reach out instead :).\n\n## Make it your own\n\nIf you've followed along, you'll have your own version of the repl to extend. Otherwise start from ours below.","metadata":{"id":1297}}],["1298",{"pageContent":"## Make it your own\n\nIf you've followed along, you'll have your own version of the repl to extend. Otherwise start from ours below.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@GarethDwyer1/cwr-11-phonebook?embed=1\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Where next\n\nYou've learned how basic databases work. Databases are a complicated topic on their own and it can take years or decades to master the more advanced aspects of them, but they can also do more than the simple operations that we've covered here. Spend some time reading about [PostgreSQL](https://www.postgresql.org/) and [relational databases](https://en.wikipedia.org/wiki/Relational_database) in general, or other [key-value stores](https://en.wikipedia.org/wiki/Key%E2%80%93value_database) like the Replit database.\n\nEven without further research, the basic Create, Read, Update, and Delete (CRUD) operations that we covered here will get you far and you can build nearly any app you can imagine with just these.\n\nNext we'll take a look at playing audio files programmatically so you can use Python to control your music.","metadata":{"id":1298}}],["1299",{"pageContent":"---\ntitle: Static blog with Nix\n---\n\n# Build and host your company blog on Replit with Nix and Hugo\n\nIn this tutorial, we will detail how you can use Replit to write and publish a blog or website. This can be a solo endeavour or a group or company blog. We'll build on the versatile Nix repl, using a static site generator called [Hugo](https://gohugo.io/) to ensure our site is fast, secure and flexible. We'll also use some repl tricks which will allow us to develop and host our blog without ever leaving Replit.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/blogdemo.mp4\" type=\"video/mp4\">\n</video>\n\nAfter this tutorial, you will:\n\n- Be familiar with setting up a static website using Hugo.\n- Understand how to connect multiple repls through GitHub.\n- Find new uses for Replit's collaborative features.\n\n## Repl architecture\n\nThis project will make use of two repls:\n\n- A **development repl**, which will be used to write and preview draft posts and make site changes. This repl will be where all development happens.\n- A **production repl**, which will be used to host a public version of the site. This repl will be updated from GitHub when new posts are made public.\n\nIf you have a premium Replit plan, you might want to make these repls private, to prevent people from finding your unfinished posts.\n\n## Creating the working repl\n\nLog into your [Replit account](https://replit.com/login) and create a new repl. Choose Nix as your project type. Give this repl a name, like \"blog-dev\".\n\n![Creating the development repl](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/dev-repl.png)","metadata":{"id":1299}}],["1300",{"pageContent":"![Creating the development repl](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/dev-repl.png)\n\nMost kinds of repls are intended for working in a specific programming language or framework, such as Python or Kaboom.js. Nix repls are different: you can think of them as a blank slate for running anything you want. So the first thing we need to do in our repl is define what we're going to run – in this case it will be Hugo. Open `replit.nix` and append `pkgs.hugo` to the `deps` list. Your file should look like this:\n\n```nix\n{ pkgs }: {\n    deps = [\n        pkgs.cowsay\n        pkgs.hugo\n    ];\n}\n```\n\nThis will install Hugo the next time we run our repl. If you'd like to understand more about what this code is actually doing, check out the tutorial on [building with Nix on Replit](/tutorials/python/build-with-nix).\n\nRun your repl now. Once you see the ASCII cow in the repl console, type the following command:\n\n```sh\nhugo new site --force .\n```\n\nThis will create a new Hugo site in our repl. The `--force` flag is necessary because Hugo usually doesn't like creating new sites in directories that already contain files.\n\nYou should now see a number of new directories and files in your repl's file pane. This is the skeleton of your Hugo site. Don't worry about what each of these files and directories is for – you only need to know about a few of them to start blogging, and we'll explain them as we go.\n\n![hugo files](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/hugo-files.png)\n\nBecause Hugo is highly flexible and unopinionated, it doesn't even come with a default theme, so we won't be able to see our site in action until we choose one. There are a large number of choices on [Hugo's official themes website](https://themes.gohugo.io/). For this tutorial, we'll be using [Radek Kozieł](https://radoslawkoziel.pl/)'s [Terminal](https://themes.gohugo.io/themes/hugo-theme-terminal/) theme, but feel free to pick a different one later.","metadata":{"id":1300}}],["1301",{"pageContent":"To install the theme, run the following command in your repl's console:\n\n```sh\ncd themes && git clone https://github.com/panr/hugo-theme-terminal && cd ..\n```\n\nThis will use Git to download the theme into our site's `themes` directory. To instruct our site to use this theme, add the following line to the bottom of `config.toml`:\n\n```toml\ntheme = 'hugo-theme-terminal'\n```\n\nWe must now configure our repl to host our static site so that we can see the results of our work. If you're familiar with static site generators (perhaps from a [previous tutorial](/tutorials/python/static-site-generator), you'll know that this is a two-step process:\n\n1. Render content in markdown and insert it into theme templates to create HTML pages.\n2. Host those HTML pages on a web server.\n\nHugo includes a built-in command that does both, [`hugo server`](https://gohugo.io/commands/hugo_server/). We can make this the command that executes when we click our repl's run button by editing the `run` directive in the `.replit` file as below:\n\n```sh\nrun = \"hugo server --buildDrafts --buildFuture --bind 0.0.0.0 --port 443 --baseURL https://YOUR-REPL-NAME-HERE--YOUR-USERNAME-HERE.repl.co\"\n```\n\nIn this command:\n\n- `--buildDrafts` and `--buildFuture` will ensure that all site content is rendered, even if it's marked as a draft or scheduled for publishing in the future.\n- `--bind` `--port` and `--baseURL` are all used to [ensure that our repl will host our site correctly](/hosting/deployments/about-deployments). Make sure to modify the argument for `--baseURL` as indicated (i.e. replacing the placeholders `YOUR-REPL-NAME-HERE` and `YOUR-USERNAME-HERE` with your own values).\n\nRun your repl. You should see an empty site homepage.\n\n![Empty home page](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/empty-site.png)\n\nTo create your first post, run the command below in the repl shell. Press Y when prompted to run Hugo from Nix:\n\n```sh\nhugo new posts/first-post.md\n```","metadata":{"id":1301}}],["1302",{"pageContent":"To create your first post, run the command below in the repl shell. Press Y when prompted to run Hugo from Nix:\n\n```sh\nhugo new posts/first-post.md\n```\n\nYour site will automatically reload and should now look like this:\n\n![First post](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/first-post.png)\n\nYou should see a file named `first-post.md` in the `content/posts` directory with contents resembling the following:\n\n```markdown\n+++\ntitle = \"First Post\"\ndate = \"2022-01-30T11:21:41Z\"\nauthor = \"Your name\"\nauthorTwitter = \"Your Twitter\"\ncover = \"\"\ntags = [\"\", \"\"]\nkeywords = [\"\", \"\"]\ndescription = \"\"\nshowFullContent = false\nreadingTime = false\n+++\n```\n\nThe text between the `+++` lines is called [front matter](https://gohugo.io/content-management/front-matter/) and defines metadata for your post, such as its title, author and time posted. Post content can be added as markdown-formatted text below the final `+++`. Add some now.\n\n```markdown\n+++\ntitle = \"First Post\"\ndate = \"2022-01-30T11:21:41Z\"\nauthor = \"Your name\"\nauthorTwitter = \"Your Twitter\"\ncover = \"\"\ntags = [\"\", \"\"]\nkeywords = [\"\", \"\"]\ndescription = \"\"\nshowFullContent = false\nreadingTime = false\n+++\n\n## Hello world!\n\nThis _is_ **my** `first` post!\n```\n\n![Post content](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/post-content.png)\n\n## Preparing for production\n\nWe now have a functional workspace in which to develop our site, but we need to make a few alterations before it's ready for public consumption. First, let's make it easier to keep unfinished posts as drafts. By default, posts created using the Terminal theme will appear as published as soon as they're created – this is probably not what we want. Luckily, it's an easy fix.","metadata":{"id":1302}}],["1303",{"pageContent":"Hugo stores content templates in a directory called [archetypes](https://gohugo.io/content-management/archetypes/). You should see an empty directory with this name in your repl's file pane. Archetype files are named after the content type (e.g. post or page) they're used for – currently, our `archetypes` directory only has a single file, named `default.md`, which will be used for content types without custom archetypes. However, if you look at the contents of `default.md`, you'll notice that it looks nothing like the post we created above. This is because Hugo doesn't just look for archetypes in our site skeleton, but also in our chosen theme.\n\nYou should find a file named `posts.md` in `themes/hugo-terminal-theme/archetypes/`. The contents of this file will resemble the new post you made in the last section. Duplicate this file, move it into your top-level `archetypes` directory, and rename it to `posts.md`. Then, in the new file, add the line `draft = true` just above the final `+++`. Your `archetypes/posts.md` file should look like this:\n\n```md\n+++\ntitle = \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\"\ndate = \"{{ .Date }}\"\nauthor = \"\"\nauthorTwitter = \"\" #do not include @\ncover = \"\"\ntags = [\"\", \"\"]\nkeywords = [\"\", \"\"]\ndescription = \"\"\nshowFullContent = false\nreadingTime = false\ndraft = true\n+++\n```\n\nIf a file in a top-level directory has the same name as a file in the equivalent theme directory, the former will override the latter. This allows us to make site-specific tweaks without changing our theme. Create a new post by entering the following command into your repl's shell:\n\n```sh\nhugo new posts/second-post.md\n```\n\nThis post and all subsequent new posts will be marked as drafts, and will thus only be included in our website if we run Hugo with the `--buildDrafts` flag. This will be useful for when we create our production repl. But before we can do that, we need to prepare this development repl to connect to it by creating a GitHub repository.","metadata":{"id":1303}}],["1304",{"pageContent":"Select the version control tab in your repl's side pane and click on **Create a Git Repo**. This will create a local repository to track your code changes. From here, you can create snapshots of your code (called commits), which can you can revert to if needed.\n\n![Creating a GitHub repo](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/create-repo.png)\n\nTo push our repl to a repository on GitHub, we'll need a GitHub account. [Create one](https://github.com/signup) if you haven't before. Once you've created an account or logged into your existing one, return to your repl and click on **Connect to GitHub**. Accept the Oauth confirmation message that appears.\n\n![Connect to GitHub](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/connect-github.png)\n\nReplit will then prompt you to specify a repository name, optional description and privacy setting. You can call your repository \"blog\". If you have a paid Replit plan, you can make it private, otherwise it will have to be public. Once you've created the GitHub repository, you'll be able to view it on your GitHub account.\n\n![GitHub repo](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/github-repo.png)\n\nNow that your repl is connected to a GitHub repository, any time you make changes, those will be reflected in the version control tab. To commit those changes and push them to your GitHub repository, you can click on **Commit and push** in your repl's version control tab. You will be required to specify a commit message describing the changes you've made.\n\nIf our production repl will be sharing a code repository with our development repl, how will we ensure that drafts and future content aren't shown in production? One solution might be to use different branches, but that would require constant merging. All that really needs to change between development and production is the command that gets executed when we click the Run button. We'll use a bit of repl magic to make this work.","metadata":{"id":1304}}],["1305",{"pageContent":"First, replace the `run` directive in the `.replit` config file with the following:\n\n```sh\nrun = \"sh run.sh\"\n```\n\nThen create a file named `run.sh` and add the following code to it:\n\n```sh\n#!/bin/bash\n\nif [ \"$REPL_SLUG\" == 'blog-dev' ] # draft space\nthen\n  hugo serve --buildDrafts --buildFuture --bind 0.0.0.0 --port 443 --baseURL https://$REPL_SLUG--$REPL_OWNER.repl.co\nelse # production\n  hugo serve --bind 0.0.0.0 --port 443 --baseURL https://$REPL_SLUG--$REPL_OWNER.repl.co\nfi\n```\n\nHere we've used a couple of [repl metadata environment variables](/programming-ide/repl-env-metadata) to trigger different behavior when our code is run in different repls.\n\nReturn to your repl's version control tab and commit and push your changes. We are now ready to create the production repl.\n\n![Commit and push to GitHub](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/commitpush.png)\n\n## Creating the production repl\n\nFork your development repl. Give the new repl a different name, such as \"blog\".\n\n![Fork repl](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/fork-repl.png)\n\nSince we've forked our development repl, both repls will be backed by the same repository on GitHub. This means we can commit and push changes from one repl (development) and pull those changes into the other repl (production). We could also achieve this by creating a new repl from our GitHub repository, but forking is quicker.\n\nWhen your production repl is run, you should see an almost identical website to the one in your development repl. The only difference should be that the second post won't appear in the production repl, as it is a draft.\n\nLet's test out our publishing flow.\n\n1. In your **development** repl, add some text to `content/posts/second-post.md`. Specify some or all of the front matter, such as your author name and Twitter account.\n2. Set `draft = false` in the post's front matter.\n3. From the **development** repl's version control tab, commit and push your changes.","metadata":{"id":1305}}],["1306",{"pageContent":"2. Set `draft = false` in the post's front matter.\n3. From the **development** repl's version control tab, commit and push your changes.\n4. In your **production** repl, navigate to the version control tab and click on the \"← Pull\" link. This will pull the changes we just pushed from development.\n\n![Pull from GitHub](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/pull.png)\n\n5. Rerun your **production** repl. You should now see the contents of the second blog post live on the website.\n\nThis will be your workflow for publishing posts. Undraft, commit and push on development, then pull and rerun on production.\n\nIf you have a paid Replit plan, you should set your production repl a [Deployment](/hosting/deployments/about-deployments), so that people will always be able to reach your website.\n\nYou will probably also want to use a custom domain name, instead of `blog--your-name.repl.co`. Instructions for setting this up are provided [here](/hosting/hosting-web-pages#custom-domains). As a bonus, following this process will also put your site behind [Cloudflare](https://www.cloudflare.com/)'s content delivery network (CDN), improving its performance and reachability across the global internet. Cloudflare is [free for personal and hobby projects](https://www.cloudflare.com/plans/#overview).\n\n*Note: Please refer to [these docs](/hosting/hosting-web-pages.md#end-of-dot-style-domains) to ensure that you are using the correct repl.co domain format.*\n\n## Writing posts\n\nNow that we have a publishing platform in place, let's take a more detailed look at how to create content in Hugo.","metadata":{"id":1306}}],["1307",{"pageContent":"## Writing posts\n\nNow that we have a publishing platform in place, let's take a more detailed look at how to create content in Hugo.\n\nThe basis of all Hugo blogs is [Markdown](https://daringfireball.net/projects/markdown/), a simple mark-up language for the web, originally created in 2004 by John Gruber. Markdown provides a simple, limited syntax, focused on the common needs of bloggers and other web-based writers. Basic Markdown elements are limited to headings, **bold**, _italic_ and `code-style` text, blockquotes, lists, code blocks, horizontal rules, links and images. Markdown has been extended over the years to provide more advanced formatting, such as tables and footnotes. A cheat sheet covering both basic and extended syntax can be found [here](https://www.markdownguide.org/cheat-sheet/) (Hugo supports both basic and extended Markdown).\n\nTo include images in your posts, upload them to the `static` directory. All files and subdirectories in `static` will be rendered as-is from your website's root URL. For example, if you create a file named `static/images/pic.png`, you will be able to include it in your posts by writing `![](https://docimg.replit.com/images/pic.png)`. You can put anything you want in `static`, including documents, audio files, or even videos.\n\nIf you want formatting that isn't included in Markdown, such as colored text, you can add HTML and CSS to your posts directly, but first you must configure Hugo's Markdown parser (Goldmark) to accept unsafe input. Add the following lines to `config.toml`:\n\n```toml\n[markup.goldmark.renderer]\nunsafe = true\n```\n\nStop and start your repl for the config change to take effect.","metadata":{"id":1307}}],["1308",{"pageContent":"```toml\n[markup.goldmark.renderer]\nunsafe = true\n```\n\nStop and start your repl for the config change to take effect.\n\nHugo also provides functionality called [shortcodes](https://gohugo.io/content-management/shortcodes/), which you can think of as HTML [macros](<https://en.wikipedia.org/wiki/Macro_(computer_science)>). Hugo provides built-in shortcodes for common tasks such as embedding [tweets](https://gohugo.io/content-management/shortcodes/#tweet) and [YouTube videos](https://gohugo.io/content-management/shortcodes/#youtube). You can also [create your own custom shortcodes](https://gohugo.io/templates/shortcode-templates/).\n\nReplit's multiplayer editing features aren't only good for collaborative programming, but can also be used for collaborative blogging. Multiple users can work in the same file in real time, and you can use [inline code threads](https://blog.replit.com/threads) to leave each other feedback and discuss individual words and sentences.\n\n![Collaboration chat](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/thread.png)\n\nIf you need to include diagrams in your blog posts, you can draw them using your repl's [built-in Excalidraw](https://blog.replit.com/draw). Just create a new file with a `.draw` extension and start diagramming. When you're done, select your diagram, right-click and chose \"Copy to clipboard as SVG\". Then paste into the post you want to include the diagram in. Note that Goldmark must be configured in the manner shown above for this to work, as SVG images are part of HTML.\n\n![Drawing on Replit](https://docimg.replit.com/images/tutorials/40-multiuser-blog-nix/diagram.png)\n\n## Where next?\n\nYou've now got a fully functional static blog hosted on Replit. Some things you might want to do with it:\n\n- Learn more about Hugo from [the official documentation](https://gohugo.io/documentation/).\n- Choose a different theme from the [Hugo themes showcase](https://themes.gohugo.io/) or [create your own](https://gohugo.io/commands/hugo_new_theme/).","metadata":{"id":1308}}],["1309",{"pageContent":"- Choose a different theme from the [Hugo themes showcase](https://themes.gohugo.io/) or [create your own](https://gohugo.io/commands/hugo_new_theme/).\n- Get a few collaborators and write some more blog posts.\n\nYou can find our development and production repls below:\n\n**Development**\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/blog-dev?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n**Production**\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/blog-prod?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1309}}],["1310",{"pageContent":"# How to use Excalidraw with Replit\n\nExcalidraw is an open-source tool, similar to a digital whiteboard, that allows you to sketch diagrams with a hand-drawn feel to them. You can check out https://excalidraw.com/ to learn more about it.\n\nIn this tutorial, we'll show you how to use Excalidraw with Replit to sketch creative designs for any idea.\n\n## Steps to follow\n\nWe'll use Excalidraw to demonstrate the following different kinds of diagrams:\n\n- Code architecture\n- Database infrastructure\n- Website layout\n\n## Getting started with Excalidraw\n\nTo use Excalidraw, navigate to your Teams Pro [dashboard](https://replit.com/teams). Click on the \"Create Team Repl\" button to create a new repl. Choose a template language for the repl (any language will do, since we'll create a `.draw` file separately).\n\n![create repl](https://docimg.replit.com/images/teamsPro/excalidraw/create-repl.png)\n\nThis will direct you to the Replit workspace.\n\nIn the workspace, click on the \"Add file\" icon next to \"Files\". Choose a name for your file and add the `.draw` extension.\n\n![Create draw file](https://docimg.replit.com/images/teamsPro/excalidraw/create-draw.png)\n\nReplit will open the `.draw` file once you save it and you'll see the drawing environment on your editing pane.\n\nNotice the navbar at the top that consists of various elements to choose from.\n\n## Draw: code architecture diagram\n\nExcalidraw can be used in designing a new program before implementing the code for it, giving us clarity on what features we'd like to include. This can be helpful during interviews, to allow candidates to demonstrate how they want to implement specific solutions.\n\nLet's design a palindrome checker as an example. Our program will take a user's name as input and check whether the name is the same spelled backward.\n\nCreate a new file and save it as `palindrome.draw`.\n\nWe'll start by writing the pseudocode for the program, listing the steps in order:\n\n1. Take user's name\n2. Save the name spelled backward","metadata":{"id":1310}}],["1311",{"pageContent":"Create a new file and save it as `palindrome.draw`.\n\nWe'll start by writing the pseudocode for the program, listing the steps in order:\n\n1. Take user's name\n2. Save the name spelled backward\n3. Check if the user's name is the same spelled backward\n4. If yes, display that the name is a palindrome\n5. If no, display that the name is not a palindrome.\n\nUsing Excalidraw, we can design a flowchart of this program. We'll use the following tools:\n\n- ellipse tool – to create an oval to represent where our program starts or stops;\n- the rectangle tool – for our input/output and processes;\n- the diamond tool – for decisions; and\n- the arrow tool – to represent the relationships between the different shapes.\n\n![palindrome](https://docimg.replit.com/images/teamsPro/excalidraw/palindrome.png)\n\nBy following our diagram, we now know what to include in our code when designing our program. This lets us create programs more efficiently because we can follow a clearly defined structure when implementing the code.\n\n## Draw: database architecture diagram\n\nTeams can use Excalidraw to demonstrate the infrastructure of existing systems, such as a database management system.\n\nWe'll create a database architecture diagram to show how an application interacts with its databases to store and retrieve data.\n\nCreate a new file and save it as `database.draw`.\n\nYou can add a variety of design elements to your diagrams by importing libraries. We want to use the following three libraries from [Excalidraw](https://www.excalidraw.com) for our diagram: Software Logos, Databases, and Awesome Icons.\n\nGo to the [Excalidraw](https://www.excalidraw.com) homepage and, next to the drawing tools navbar, click on the \"book\" icon. In the pop-up, click on \"Browse libraries\" to select from a range of different categories.\n\nOnce you find the category with the elements you would like to use, click \"Add to Excalidraw\" to import that library to the site's workspace.","metadata":{"id":1311}}],["1312",{"pageContent":"Once you find the category with the elements you would like to use, click \"Add to Excalidraw\" to import that library to the site's workspace.\n\n![browse libraries](https://docimg.replit.com/images/teamsPro/excalidraw/add-library.png)\n\nYou can add any elements you want from these contributed libraries and then copy them across to your repl file using Ctrl+C and Ctrl+V (or Command+C and Command+V on macOS).\n\nUsing the \"Awesome Icons\" library, we have elements to represent the users of the software application, and with the \"Software Logos\" and \"Database\" libraries we have database and developer icons.\n\nThese elements enhance the diagram and make it more interesting to define the composition of the database system. The resulting diagram would look as follows:\n\n![database](https://docimg.replit.com/images/teamsPro/excalidraw/database-diagram.png)\n\n## Things to try\n\nThere are so many different kinds of diagrams to try with Excalidraw. We can design the layout for portfolio websites or blog articles. The Excalidraw library has plenty of categories to choose from, with specific elements you can mix for more creativity.\n\nTake a look at this portfolio layout design.\n\n![Website](https://docimg.replit.com/images/teamsPro/excalidraw/website.png)\n\nUsing the \"Web Kit\" library, we added the layout template of a portfolio website. We added icons from other libraries, such as the user icon that represents an image from the \"Awesome Icons\" library.\n\nThere are wireframing libraries that would make Excalidraw ideal for UI/UX designers as well.","metadata":{"id":1312}}],["1313",{"pageContent":"# How to make a Replit template\n\nIf your Repl can be used as a good starting point for other project, you might want to submit it as a template! Let's learn what a Replit template is and how to make a good one.\n\n## What _is_ a template?\n\nTemplates are a type of published repl. They appear on the Replit [Templates page](https://replit.com/templates), where you'll find different kinds of templates. The official templates, made by Replit, have a checkbox next to the name of the template:\n\n![Official Replit templates](https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/template-official.png)\n\nThe [HTML, CSS, JS template](https://replit.com/@replit/HTML-CSS-JS?v=1#index.html) template is very popular and can be used as a starting point for creating a vanilla JavaScript project. You can fork the template to use it.\n\nOther templates have been created by community members, like this one:\n\n![Community Replit template](https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/template-community.png)\n\nLet's learn how to make a template.\n\n## Creating a template\n\nYou can learn how to make a repl by following [this guide](/programming-ide/introduction-to-the-workspace). Make your published repl a template by checking the \"Submit as Template for Review\" box in the last step of the publishing flow. The Replit team will review your template before it is live on the Templates page.\n\n![Publish as template](https://docimg.replit.com/images/programming-ide/creating-a-template/publish.png)\n\nBefore you submit your template, make sure it's as easy to use as possible. It should include all the boiler plate code that is needed to get a project started, and it should work right away when the \"Run\" button is pressed.","metadata":{"id":1313}}],["1314",{"pageContent":"A good template should always include well-commented code, easily editable variables, and a README file. It's always important to comment your code, but it's even more important when others will be using your code for their own projects. In the `README.md` file, add descriptive details about your template, and information about the variables that the user can change. READMEs help users understand how your template works, and if there are any requirements, licensing, or other factors they should be aware of.\n\nThe `.md` in `README.md` stands for Markdown, which is a basic text language. READMEs can be written in any text format, but we'll use Markdown as it's the best pratice.\n\nHere's an example outline for a README - feel free to use this for your own templates!\n\n```md\n# Template Name\n\nChoose a self-descriptive name, you can also add a simple description about your template.\n\n# Usage\n\nExplain how you can install / use this template. Make sure to provide a detailed explanation and make it easy for people to read. Also, add any code snippets if needed.\n\n# License\n\nThis will define how people can use your template. You can visit https://opensource.org/licenses to choose a license.\n```\n\nYou can also edit your submitted template and share update messages to show how your project has changed over time.\n\nLet's take a look at a practical example of a community template.\n\n## A practical example: Creating the Phaser Vite starter template\n\nWe created this [Phaser Vite starter template](https://replit.com/@ritza/Phaser-Vite-starter-template?v=1) to show you how you can create your own templates in Replit. The Phaser Vite starter template includes everything you need to create a Phaser game in Replit.\n\nPhaser is a beginner-friendly 2D JavaScript game framework that is used to create HTML5 games. [Vite](https://vitejs.dev) is a development server and JavaScript bundler.","metadata":{"id":1314}}],["1315",{"pageContent":"Phaser is a beginner-friendly 2D JavaScript game framework that is used to create HTML5 games. [Vite](https://vitejs.dev) is a development server and JavaScript bundler.\n\nThe Phaser Vite starter template is quite complex, as it provides for developing your game as well as creating, serving, and downloading the production bundle. You can do all stages of development in your browser. Many Replit templates are less complex, such as the [HTML, CSS, JS template](https://replit.com/@replit/HTML-CSS-JS?v=1#index.html). But the Phaser Vite starter template makes for a good example template, since it shows you how you can use Replit's features to handle multiple run commands.\n\nThe Phaser Vite starter template is configured to build a production-ready bundle of a Phaser game.\n\nThe template has some basic starting code that demonstrates these useful features of Phaser 3 for building games:\n\n- Loading game assets: images.\n- Moving a sprite.\n- Adding physics.\n- Adding user input.\n- The Scale Manager, which handles responsive game layout.\n- Adding text.\n\nThe following Vite commands are available in the template:\n\n- `npm run dev` runs `vite` to start the dev server.\n- `npm run build` runs `vite build` to build the production bundle to the `dist` folder.\n- `npm run preview` runs `vite preview` to serve the production bundle.\n\nWhen you fork the template, the npm packages in the `package.json` file are automatically installed.\n\n### Setting up the development server\n\nTo get the dev server template working in Replit, we needed to add a `vite.config.js` file and configure it to conditionally determine the configuration options based on the Vite command used: `dev` / `serve` or `build`. You can read more about conditional Vite configuration in the [Vite docs](https://vitejs.dev/config/#conditional-config).\n\n### Configuring the \"Run\" button","metadata":{"id":1315}}],["1316",{"pageContent":"### Configuring the \"Run\" button\n\nThe `.replit` file is used to determine what the repl \"Run\" button will do. The `.replit` file is hidden in most repls. You can show the hidden files by clicking the three dot menu in the file tree of the repl template, and selecting \"Show hidden files\". In this template, the `.replit` file is modified to make the \"Run\" button run different Vite commands for development and production.\n\n![Community Replit template](https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/show-hidden.png)\n\nThe \"Run\" button is initially configured to run the dev server. You can see this in the `.replit` file:\n\n```toml\n# run dev\nrun=\"npm run dev\"\nentrypoint=\"/src/main.js\"\n```\n\nThe `entrypoint` command is the name of the main file. It's the file that will be run and is shown by default when opening the editor. For development, the `/src/main.js` file is used.\n\n### Creating the production build bundle\n\nOnce you have finished building your game, you can create a production build bundle of your game by running the following command in the \"Shell\" tab:\n\n```bash\nnpm run build\n```\n\nThis creates a production build bundle that is added to the `dist` folder.\n\nTo view the running production bundle code, the `.replit` config file needs to be altered so that the `vite preview` command is run when the \"Run\" button is pressed. The dev commands need to be commented out and the commands for running the production build need to be added:\n\n```toml\nlanguage=\"nodejs\"\n\n# run dev\n# run=\"npm run dev\"\n# entrypoint=\"/src/main.js\"\n\n# run production build\nrun=\"npm run preview\"\nentrypoint=\"/dist/assets/index.a808088d.js\"\n```\n\nWhen you bundle your code using Vite, a random hash is added to the `html`, `css`, and `js` files. The hash in the `js` file of the `entrypoint` command of your bundle would be different from the one above.\n\n### Downloading your production bundle","metadata":{"id":1316}}],["1317",{"pageContent":"### Downloading your production bundle\n\nIf you want to use your production bundle elsewhere, you can download it as a zip file by running the following command in the \"Shell\" tab:\n\n```bash\nzip -r myPhaserGameDownload.zip dist\n```\n\nThis will create a zip file named `myPhaserGameDownload.zip` in the file tree. You can download this zip file by clicking the three dot menu that appears next to the zip file name when you hover your mouse over the zip file, or by selecting the zip file and clicking \"Download\".\n\n![Download zip](https://replit-docs-images.bardia.repl.co/images/programming-ide/creating-a-template/file-download.png)\n\nTo create the zip file, the Nix `zip` package is added to the repl. It's used to create a zip folder of your production bundle that you can download. If you have a repl that does not have the `zip` package installed and try to use the `zip` command in the \"Shell\" tab, you will get the following message in the shell:\n\n```bash\nzip: command not installed, but was located via Nix. Would you like to run zip from Nix and add it to your replit.nix file? [Yn]\n```\n\nIf you type `y`, you will then get the following message in the shell:\n\n```bash\nAdding zip to replit.nix\nsuccess\n...\n```\n\nIf you look in the `replit.nix` file, you will see that the dependency (`deps`) will be added:\n\n```\npkgs.zip\n```\n\nThis adds the Nix `zip` package to the repl. This dependency is already added to the Phaser Vite starter template.\n\nYou can also download the whole project by clicking the three dot menu in the file tree and selecting \"Download as zip\". This method downloads the whole project, including all of the node modules from the project dependencies.\n\nYou can enable or disable Phaser 3 features in the `vite.config.js` file to optimize your production build. Disable features you don't need to reduce the bundle size.\n\n## A note on choosing libraries\n\nWhen creating a template that uses a specific library, it's a good idea to consider alternative libraries to determine which one will make the best template.","metadata":{"id":1317}}],["1318",{"pageContent":"## A note on choosing libraries\n\nWhen creating a template that uses a specific library, it's a good idea to consider alternative libraries to determine which one will make the best template.\n\nWith the Phaser Vite starter template, for example, we considered the production bundle size when choosing a bundler. We could have made the template with Webpack as a bundler instead of Vite. To compare the bundle sizes of Vite and Webpack, we created production bundles of this [Flappy Bird game](https://replit.com/@ritza/Flappy-Bird-Phaser#script.js). We used the [Phaser starter template (using Webpack 4)](https://github.com/photonstorm/phaser3-project-template) to create the Webpack bundle. The JavaScript bundle size was 1.02 MB using Webpack and 1.29 MB using the Replit Phaser Vite starter template.\n\nTo further reduce bundle size, the configurations of each bundler can be tweaked to optimize the build for a particular project. For example, Storybook compared [Webpack and Vite bundling](https://storybook.js.org/blog/storybook-performance-from-webpack-to-vite) and found that Vite produced smaller production bundles for published Storybooks.\n\nUltimately, we chose Vite to make this Replit Phaser template because of its ease of use and fast development build times, which makes for a better developer experience. Vite also updates the development server when code changes, even before the file is saved. It has very fast [Hot Module Replacement](https://vitejs.dev/guide/features.html#hot-module-replacement).\n\n## Further reading\n\nHere are some resources to learn more about submitting and configuring templates, configuring Vite, and creating a Phaser 3 game:\n\n- [Sharing Your Repl](/hosting/sharing-your-repl)\n- [Replit's new publish flow](https://blog.replit.com/publishing)\n- [Configuring a Repl](/programming-ide/configuring-repl)\n- [Repl Space and Templates](https://blog.replit.com/replspace-templates)","metadata":{"id":1318}}],["1319",{"pageContent":"- [Replit's new publish flow](https://blog.replit.com/publishing)\n- [Configuring a Repl](/programming-ide/configuring-repl)\n- [Repl Space and Templates](https://blog.replit.com/replspace-templates)\n- [How Replit went from supporting 50 languages to all of them by using Nix](https://blog.replit.com/nix)\n- [Configuring Vite](https://vitejs.dev/config)\n- [Making your first Phaser 3 game](https://phaser.io/tutorials/making-your-first-phaser-3-game/part1)\n\nReplit hosts [Template Jams](https://blog.replit.com/template-jam), template-building competitions with cash prizes for the winning templates. Look out for the next one if you're interested and follow the [Replit Twitter account](https://twitter.com/replit) to get the latest Replit news.","metadata":{"id":1319}}],["1320",{"pageContent":"---\ntitle: Import a project from Heroku\n---\n\n# Import a project from Heroku\n\nWith Replit, you can write and host your code all in the same place.\n\nIf you already have an app or project running on Heroku and your code is stored Github, you can easily port it over to Replit.\n\n## Importing your Heroku project from Github\n\nGitHub repositories can be run automatically on Replit. Head to [replit.com/heroku](https://replit.com/heroku) to import a repository. Any public repository under 500 MB (or 1GiB with Replit Core membership) can be cloned. You can unlock private repos after authenticating with GitHub and purchasing a [Replit Core membership](https://replit.com/pricing).\n\n1. Go to [replit.com/heroku](https://replit.com/heroku)\n\n![new repl modal](https://docimg.replit.com/images/tutorials/import-heroku/import-heroku-modal.png)\n\n2. Paste the link to your GitHub repository. If your repo is private, authenticate with GitHub first.\n\n3. Select the repo, language, and owner of the Repl. Replit will try to detect the language of your repository automatically for you!\n\n## Configuring your imported project\n\nReplit imports all of files from your repo to the Repl. Replit also tries to configure your project to run correctly based on your `Procfile` or language. If that doesn't work, you can use our config editor to set the run command for yourself.\n\n![visual config editor](https://docimg.replit.com/images/tutorials/import-heroku/visual-config.png)\n\nYou can use the shell to run any command and then set the \"Run\" button once you've decided what it should do.\n\nPress \"Done\" to finalize your Repl's configuration and close the config editor.\n\nIt's always possible to make changes later by visiting the `.replit` file from the filetree.\n\nNote: you can add `.replit` to existing GitHub repositories to skip the config step during the import process.\n\nFor more information on how to configure your repl, see the [.replit documentation](/programming-ide/configuring-repl).\n\n## That's it!","metadata":{"id":1320}}],["1321",{"pageContent":"For more information on how to configure your repl, see the [.replit documentation](/programming-ide/configuring-repl).\n\n## That's it!\n\nNow you can edit, run, and host your project all from Replit. For more information go to our [getting started page](/).\n\nBelow is some information for advanced Heroku users.\n\n### Multiple processes\n\nCurrently, Replit only supports running one process per repl, so if your Heroku app has multiple processes (like a web process and a worker) then consider moving one of them over to another Repl.\n\n### Config, secrets, and environment variables\n\nYou will have to port over your config variables from your Heroku app to your Repl. Config variables are located in the settings tab of your Heroku project.\n\n![Heroku config vars](https://docimg.replit.com/images/tutorials/import-heroku/heroku-config.png)\n\nPlease follow our [environment variable documentation](/programming-ide/workspace-features/secrets) to add them to your Repl.\n\n### Add-ons\n\nFor free Heroku add-on alternatives, check out the following links:\n\n- [Serverless Postgres](https://neon.tech/)\n- [Serverless Redis](https://upstash.com/)\n- [MongoDB](https://www.mongodb.com/)\n- [Supabase](https://supabase.com/)","metadata":{"id":1321}}],["1322",{"pageContent":"---\ntitle: Using Markdown on Replit\nsidebar_position: 6\n---\n\n# Using Markdown in Replit\n\n[Markdown](https://www.markdownguide.org/) is a lightweight markup language with plain text formatting syntax. It is designed to be easy to read and write, and it converts to valid HTML. Some use cases of Markdown include documentation, project descriptions, text formatting in social media posts, and more. In this tutorial, all major topics including advanced markdown rules will be covered.\n\n## Basic syntax\n\nBasic syntax includes the foundations of markdown usage such as headers, paragraphs, text formatting, and more.\n\n### Bold & italic text\n\nTo make text **bold** in Markdown, surround it with two asterisks on each side: `**bold**`.\nTo make text _italic_ in Markdown, surround it with either one asterisk on each side `*italic*` or with an underscore on each side: `_italic_`\n\n### Inline code\n\nYou can denote `inline code` in Markdown by surrounding it with backtick quotes (`` `<insert code here>` ``). Inline code corresponds to a highlighted area in a sentence or paragraph, not an entire block of code.\n\n### Strikethrough text\n\nTo ~~strikethrough~~ text in Markdown, surround it with two tildes on each side: `~~strikethrough~~`. This can be used to denote edits or deletions.\n\n### Headings\n\nTo create a heading in Markdown, start a new line and put up to six hash symbols followed by a space in front of the header's text `## header`. Using a single hash symbol for a heading specifies the **largest** header and using six hashes renders the **smallest** header.\n\n# Large header example\n\n###### Super small header example\n\nThe corresponding Markdown code used to render the above example is included below.\n\n```md\n# Large header example\n\n###### Super small header example\n```\n\n### Paragraphs\n\nTo create a new paragraph, simply add two line breaks after a series of plaintext sentences.\n\nThis paragraph is separated from the above one.\n\n```md\nI am paragraph number one.\n\nI am paragraph number two, completely separated from paragraph one.\n```","metadata":{"id":1322}}],["1323",{"pageContent":"This paragraph is separated from the above one.\n\n```md\nI am paragraph number one.\n\nI am paragraph number two, completely separated from paragraph one.\n```\n\n### Lists\n\nYou can create unordered lists using asterisks `*`, pluses `+`, or hyphens `-`:\n\n- Item 1\n- Item 2\n- Item 3\n\n```md\n- Item 1\n- Item 2\n- Item 3\n```\n\nYou can create ordered lists using numbers followed by periods:\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n```md\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n### Quotes\n\nYou can use blockquotes to denote quoted text. To create a blockquote, start a line with `>`:\n\n> This is quoted text\n\n```md\n> This is quoted text\n```\n\n### Line breaks & thematic breaks\n\nOccasionally, you may want to add a breakline within a paragraph. To do this, you can add two spaces at the end of a sentence and hit the **enter** key to move on to the next line. Alternatively, you can use the HTML tag `<br/>` to make the breakline for you.\n\nI am a broken<br/>\nparagraph.\n\n```md\nI am a broken<br/>\nparagraph.\n```\n\n### Code blocks\n\nIn many cases, you might have to show a large amount of code within a Markdown document. In the case of technical documentation, code blocks are present almost everywhere. You can surround your code by three backticks ` ``` `.\n\n```\ndef printHello():\n  print(\"Hello World\")\n\nprint(\"Look what I'm printing:\")\nprintHello()\n```\n\nTo add syntax highlighting, type in three backticks and then the programming language ` ```python `.\n\n```python\ndef printHello():\n  print(\"Hello World\")\n\nprint(\"Look what I'm printing:\")\nprintHello()\n```\n\n---\n\n## Embeds\n\nYou can also embed [links](https://replit.com/~), images, and videos within Markdown documents.\n\n![a robot coding on replit](https://docimg.replit.com/images/tutorials/markdown/robot-coding-twitter-banner.jpeg)\n\n### Links\n\nTo embed a link in Markdown, surround the link text in square brackets `[link]` followed by the link URL surrounded in parentheses `[link](https://replit.com)`. You can now put a [link](https://replit.com) almost anywhere in your markdown document.\n\n```md","metadata":{"id":1323}}],["1324",{"pageContent":"```md\nYou can now put a [link](https://replit.com) almost anywhere in your markdown document.\n```\n\n### Images\n\nTo embed an image in markdown, start with an exclamation point and put the description of the image in square brackets, followed by the image URL surrounded in parentheses `![a picture of a cute cat](https://docimg.replit.com/images/tutorials/markdown/cat.jpg)`.\n\n![a picture of a cute cat](https://docimg.replit.com/images/tutorials/markdown/cat.jpg)\n\n### Videos\n\nVideos can be embedded easily in most Markdown environments as well. Using default HTML tags, you can link to and embed a video file in your Markdown document.\n\n<video src=\"https://docimg.replit.com/images/tutorials/markdown/erm.mp4\" controls></video>\n\n```html\n<video\n  src=\"https://docimg.replit.com/images/tutorials/markdown/erm.mp4\"\n  controls\n></video>\n```\n\n### Iframes & inline HTML\n\nMarkdown supports the usage of raw HTML code, so this means you can embed [inline frames](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe), use special HTML elements, and more. The Repl below is an inline frame, injected into this markdown document with raw HTML.\n\n<iframe \n  height=\"400\" \n  width=\"100%\" \n  src=\"https://replit.com/@moderation/Welcome?embed=1\" \n  scrolling=\"no\" \n  frameborder=\"no\" \n  allowtransparency=\"true\" \n  allowfullscreen=\"true\" \n  sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\n/>\n\n```html\n<iframe\n  height=\"400\"\n  width=\"100%\"\n  src=\"https://replit.com/@moderation/Welcome?embed=1\"\n  scrolling=\"no\"\n  frameborder=\"no\"\n  allowtransparency=\"true\"\n  allowfullscreen=\"true\"\n  sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"\n/>\n```\n\n---\n\n## Advanced methods\n\nSome advanced Markdown techniques include tables, extended formatting, and more.\n\n### Tables\n\nTables display an organized grid of data in rows and columns. Use the vertical line symbol `|` and hyphens `-` to construct a table in markdown.\n\n| name  | age | location  |\n| ----- | --- | --------- |","metadata":{"id":1324}}],["1325",{"pageContent":"Tables display an organized grid of data in rows and columns. Use the vertical line symbol `|` and hyphens `-` to construct a table in markdown.\n\n| name  | age | location  |\n| ----- | --- | --------- |\n| ben   | 25  | New York  |\n| jane  | 37  | Australia |\n| rob   | 21  | Brazil    |\n| sarah | 43  | France    |\n\nThe table above is rendered by the Markdown code below. Using spaces to make the text look clean is optional but recommended.\n\n```md\n| name  | age | location  |\n| ----- | --- | --------- |\n| ben   | 25  | New York  |\n| jane  | 37  | Australia |\n| rob   | 21  | Brazil    |\n| sarah | 43  | France    |\n```\n\n### Collapsable details\n\nCollapsing large blocks of text can make your Markdown much easier to digest and navigate.\n\n<details>\n  <summary>Click to expand</summary>\n  You found me!\n\nMarkdown is **still supported** in collapsable sections!\n\n</details>\n\n```md\n<details>\n  <summary>Click to expand</summary>\n  You found me!\n\nMarkdown is **still supported** in collapsable sections!\n\n</details>\n```\n\n### Small text\n\nMarkdown allows the rendering of <sup><sub>super small text</sub></sup> with the HTML [sup](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup) (superscript) and [sub](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub) (subscript) tags. Simply surround your text with the `<sup>` and `<sub>` tags to render it super tiny.\n\n```html\n<sup><sub>I am so tiny and cute!</sub></sup>\n```\n\n### Markdown comments\n\nYou can use HTML comments in your Markdown documents or use Markdown syntax to do so as well. Comments do not get rendered in the Markdown output.\n\n```\n<!--html comment does not get rendered-->\n\n[This is a Markdown comment]: #\n```\n\n### Wrap text around images\n\nYou can wrap paragraph text around an image that is aligned to the right. Place your image **first** and then the following paragraph will wrap itself around the image.\n\n<img \n  align=\"right\" \n  width=\"100\" \n  height=\"100\" \n  src=\"https://docimg.replit.com/images/tutorials/markdown/repl-construction.jpeg\"\n/>","metadata":{"id":1325}}],["1326",{"pageContent":"<img \n  align=\"right\" \n  width=\"100\" \n  height=\"100\" \n  src=\"https://docimg.replit.com/images/tutorials/markdown/repl-construction.jpeg\"\n/>\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod justo eget justo sagittis mattis. Vivamus sollicitudin eget diam ac ultricies. Sed est eros, tempus at justo semper, porttitor blandit est. Integer quis ornare tellus. Nulla facilisi. Nunc eleifend lacus sapien, in tempus augue ultrices quis. Mauris sit amet interdum nisl. Aenean eu fringilla nisi, et lobortis urna. Duis ut tortor quam. Sed rhoncus rutrum dui, placerat facilisis libero consequat commodo. Maecenas varius ligula vel leo bibendum, a feugiat odio mollis.\n\n```md\n<img \n  align=\"right\" \n  width=\"100\" \n  height=\"100\" \n  src=\"https://docimg.replit.com/images/tutorials/markdown/repl-construction.jpeg\"\n/>\n\nLorem ipsum dolor sit amet, consectetur adipiscing...\n```\n\n---\n\n## Markdown on Replit\n\nMarkdown on Replit includes some features that are not native to Markdown such as displaying third-party embeds, modified file routing for images/links, and more.\n\n### Draw files\n\nCreating a file that ends with `.draw` in Replit gives you your own [Excalidraw whiteboard](/teams-pro/excalidraw-with-replit#getting-started-with-excalidraw).\n\n![excalidraw canvas in Replit](https://docimg.replit.com/images/tutorials/markdown/drawing.png)\n\nBy using the same format to display an image in Markdown, you can display the draw file's contents in your Markdown file.\n\n![displaying the draw file](https://docimg.replit.com/images/tutorials/markdown/displaying-draw-file.png)\n\n### Links\n\nIn Replit's Markdown environment, links work normally but also enable you to link to other Markdown files. Simply use a link and set its destination URL with the file path of another file.\n\n![jumping to different markdown files](https://docimg.replit.com/images/tutorials/markdown/jumplink.gif)\n\n### Third-party embeds","metadata":{"id":1326}}],["1327",{"pageContent":"![jumping to different markdown files](https://docimg.replit.com/images/tutorials/markdown/jumplink.gif)\n\n### Third-party embeds\n\nReplit currently allows [YouTube](https://youtube.com) videos, [Loom](https://loom.com) videos, and [Figma](https://figma.com) prototypes to be embedded in Markdown documents. The syntax for this is similar to embedding an image in Markdown.\n\n```md\n![](loom-link)\n![](figma-link)\n![](youtube-link)\n```\n\n### Workspace vs. Social Markdown\n\nMarkdown in the Workspace is very different than the Markdown you would use on Replit's Community or Bounties. Some of the main differences include:\n\n| Feature                       | Workspace | Social |\n| ----------------------------- | --------- | ------ |\n| Essential Syntax              | ✅        | ✅     |\n| Inline HTML                   | ✅        | ✅     |\n| Images                        | ✅        | ✅     |\n| Videos / Iframes              | ✅        | ❌     |\n| Third-party embeds            | ✅        | ❌     |\n| Strikethrough Text            | ✅        | ❌     |\n| Replit User mentioning        | ❌        | ✅     |\n| External Javascript Execution | ❌        | ❌     |","metadata":{"id":1327}}],["1328",{"pageContent":"---\ntitle: Packaging software with Nix\n---\n\n# Packaging software with Nix\n\nReplit's repls are powered by [Nix](https://nixos.org/). Nix is a tool for managing software packages and system configurations. The Nix community also maintains the [Nix Packages Collection](https://github.com/NixOS/nixpkgs) (Nixpkgs), Nix's official package repository. It contains [over 50,000 projects](https://repology.org/repository/nix_stable). Chances are high that the software you need is already in there! You can search for packages on the [NixOS website](https://search.nixos.org/packages) (DuckDuckGo users can use the [`!nixpkg` bang command](https://duckduckgo.com/bang?q=nixpkg)).\n\nHowever, despite being the largest repository of packaged software (at the <span title=\"July 2022\">time of writing</span>), there is software that has not been packaged in the Nix Package Set. If you need something packaged in order to use it in Nix, you can [make a packaging request](https://github.com/NixOS/nixpkgs/issues/new?labels=0.kind%3A+packaging+request&template=packaging_request.md), but then you have to wait for a volunteer to package it for you. It's much quicker to learn how to package it yourself!\n\nPackaging software with Nix is easier than for most other repositories. The Nix language is a <abbr title=\"Domain Specific Language\">DSL</abbr> specifically designed for packaging software. It's partly why Nixpkgs has the most packages despite having only about a sixth of the maintainers of the repository with the most maintainers, <abbr title=\"Arch User Repository\">AUR</abbr> (2182 vs 12292).\n\nAn exhaustive breakdown of all the ins and outs of packaging for Nix is out of the scope of this article, but we'll take a look at the principles of packaging software and show you how to package some simple examples.\n\nTo begin with, let's talk about fetching software. Before we can package anything, we need to get a copy of it.\n\n## Fetching software","metadata":{"id":1328}}],["1329",{"pageContent":"To begin with, let's talk about fetching software. Before we can package anything, we need to get a copy of it.\n\n## Fetching software\n\nBefore we can build a package, we need to fetch either the source code, or if the source code is not available, the binary file. Nix has [many different fetchers](https://nixos.org/manual/nixpkgs/stable/#chap-pkgs-fetchers) we can use to fetch files.\n\nNix tries hard to be reproducible, that is, to ensure that whenever you build a package with the same inputs, it gives you the exact same result. When we're fetching things from the network, we need to be sure that what we've received is the thing we expected. That's why Nix fetchers all require you to supply a hash of the expected file. A hash is a short, distinctive representation of some data. It's like a digital fingerprint. If the hash of the file we downloaded matches the hash we expected, we can be sure we got the exact file we expected. Nix supports `md5`, `sha1`, `sha256`, and `sha512` hashes, though the first two are deprecated and should no longer be used.\n\nHow do you get the hash of the file? Some projects will list hashes or checksums of their downloads on their website. If they do, use what they give you. If not, you could download it yourself, and then run a program like `sha256sum` to get the hash. This works well for simple files, but becomes a bit harder when you're using a fetcher like `fetchFromGitHub` to fetch a specific version of a Git repository. An easy workaround is to fill in a nonsensical value for the hash, and then attempt to build the package. Nix will abort the build after fetching because the hash won't match, but it will print the hash of what it fetched to the console. You can copy this value and use it as the correct hash. Re-running the build should now succeed.","metadata":{"id":1329}}],["1330",{"pageContent":"Alternatively, there are also some command-line tools that can prefetch a file for you. They will fetch the file, put it in the Nix store, and print out the hash to the console. The [`nix-prefetch-url`](https://nixos.org/manual/nix/stable/command-ref/nix-prefetch-url.html) command comes installed in a standard Nix environment, including Replit repls. Both `nix-prefetch-git` and `nix-prefetch-github` are in Nixpkgs (so they can be installed easily using `replit.nix`) and work similarly. For more advanced uses, consider using [`nix-prefetch`](https://github.com/msteen/nix-prefetch), also in Nixpkgs, which can prefetch using any Nix fetcher.\n\nWhen updating the version of something that's fetched, be sure to change the hash, too. Internally, Nix uses the hashes to identify things, and if it hasn't changed and Nix has already got a copy downloaded from before, Nix may silently use that instead of actually attempting to fetch the file again.\n\n### Fetch files and archives with `fetchurl` and `fetchzip`\n\nThe simplest fetcher is `fetchurl`. It will fetch a file and put it in the Nix store. The `fetchzip` fetcher is very similar, but it will unpack the archive before storing it in the Nix store. This is useful if you need to refer to specific files from the archive, rather than the download as a whole. Despite its name, it can handle many different archive formats, not just zip files. In general, unless you need to refer to a specific file in an archive in a Nix expression, use `fetchurl`, which will not unpack the archive before putting it in the Nix store. This will save space, and, as we will cover in more detail later, archives are automatically unpacked during the build process in any case.\n\nSign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a new [Blank Repl](https://replit.com/@replit/Blank-Repl).","metadata":{"id":1330}}],["1331",{"pageContent":"Sign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a new [Blank Repl](https://replit.com/@replit/Blank-Repl).\n\n![Create repl](https://replit-docs-images.bardia.repl.co/images/tutorials/nix-packaging/create-repl.png)\n\nFind the `replit.nix` file in your repl. If you don't see it in the Files sidebar, select \"Show hidden files\" from the menu.\n\n![](https://replit-docs-images.bardia.repl.co/images/tutorials/nix-packaging/show-hidden.png)\n\nEdit `replit.nix` to look like this:\n\n```nix\n{ pkgs }:\n\nlet\n  hello = pkgs.stdenv.mkDerivation rec {\n    pname = \"hello\";\n    version = \"2.12\";\n    src = pkgs.fetchurl {\n      url = \"mirror://gnu/hello/hello-${version}.tar.gz\";\n      sha256 = \"1111111111111111111111111111111111111111111111111111\";\n    };\n  };\nin {\n  deps = [\n    hello\n  ];\n}\n```\n\nOnce you've made this change to `replit.nix`, open the Console tab, and press enter. The output should be similar to:\n\n![Console output using a wrong hash](https://replit-docs-images.bardia.repl.co/images/tutorials/nix-packaging/wrong-hash.png)\n\nNix is telling us what the hash of the file it fetched actually is, in this case: `1ayhp9v4m4rdhjmnl2bq3cibrbqqkgjbl3s7yk2nhlh8vj3ay16g`. Your output might be different, that just means that you're using an updated version of Nixpkgs, so `stdenv` has been updated; since that's a dependency of the derivation that `stdenv.mkDerivation` produces and since derivation hashes depend on their input derivation hashes, your derivation's hash will have changed, too.","metadata":{"id":1331}}],["1332",{"pageContent":"Now that we have the real hash, copy it to the `sha256` attribute in the derivation, press enter in the console, which will then pick up on the change, and Nix will successfully build the `hello` package — though it won't output anything when it succeeds. The `hello` command will be added to your environment. If you run it, the `hello` program just echoes \"Hello, world!\" to the console. At first glance, that doesn't seem like a very useful program, but [its purpose](https://www.gnu.org/software/hello/manual/html_node/Overview.html) is actually to help test packaging systems. Now we know ours is working!\n\n![Successfully installed hello](https://replit-docs-images.bardia.repl.co/images/tutorials/nix-packaging/hello-command.png)\n\nIf you have been paying particularly close attention, you may have spotted that Nix is telling us that two derivations will be built, even though we're only asking it to build one. This is because each fetcher actually builds a derivation: the fetched file that's added to the Nix store. Nix packages can only depend on things that are in the Nix Store, so in order to build `hello`, we need its source code to be put in the Nix Store, too. Since we don't have it yet, it needs to be \"built\" first (fetched, in this case). A fetcher is actually a special type of builder.\n\nWe could also have gotten the same hash with `nix-prefetch-url`:\n\n```bash\nnix-prefetch-url https://ftpmirror.gnu.org/hello/hello-2.12.tar.gz\n```\n\n![Prefetch command](https://replit-docs-images.bardia.repl.co/images/tutorials/nix-packaging/prefetch-command.png)\n\nYou can copy the string `1ayhp9v4m4rdhjmnl2bq3cibrbqqkgjbl3s7yk2nhlh8vj3ay16g` to the `sha256` field in the derivation and it will also work (again, your actual hash might be different). Sometimes the hashes are in a different format, but that's not a problem. Nix fetchers understand different types of hashes presented in a variety of formats.\n\n### Some notes on hashes","metadata":{"id":1332}}],["1333",{"pageContent":"### Some notes on hashes\n\nIn our first example, we initially provided a hash that we knew was incorrect in order to have Nix output the correct hash in the hash mismatch error message. Trusting the hash that Nix gives back to us is an approach called [trust on first use](https://en.wikipedia.org/wiki/Trust_on_first_use). We're assuming that the file Nix actually fetched is correct. For many purposes, this is fine.\n\nIf you have a real hash, not a dummy hash, in your derivation and you still get this error, carefully try to find out what might have happened, as this means that Nix is telling you that the file it actually fetched is not what you expected. It could be that the download was corrupted due to network problems, in which case re-attempting it later might succeed; or that the target file has actually been changed on the server. This might happen if you're trying to download from a URL that does not provide a stable version, or if an attacker has surreptitiously replaced the file. If you're unsure, try to determine with a trusted party, such as the publishers of the code, whether everything is OK.\n\nYou may notice that the hash Nix calculates for a file doesn't match the hash that `sha256sum` calculates. They are actually the same hash, but they're encoded differently. Most hash tools print out the hash in a hexadecimal (base 16) format, but Nix prefers its own non-standard base 32 format, because it's shorter (it's base 32, but it doesn't use the characters `e`, `o`, `u`, and `t` to reduce the chances of offensive letter sequences). To convert a base 16 hash to a base 32 hash or vice versa, use `nix-hash`:\n\n```bash\n$ nix-hash --to-base32 --type sha256 cf04af86dc085268c5f4470fbae49b18afbc221b78096aab842d934a76bad0ab\n1ayhp9v4m4rdhjmnl2bq3cibrbqqkgjbl3s7yk2nhlh8vj3ay16g\n$ nix-hash --to-base16 --type sha256 1ayhp9v4m4rdhjmnl2bq3cibrbqqkgjbl3s7yk2nhlh8vj3ay16g\ncf04af86dc085268c5f4470fbae49b18afbc221b78096aab842d934a76bad0ab\n```","metadata":{"id":1333}}],["1334",{"pageContent":"$ nix-hash --to-base16 --type sha256 1ayhp9v4m4rdhjmnl2bq3cibrbqqkgjbl3s7yk2nhlh8vj3ay16g\ncf04af86dc085268c5f4470fbae49b18afbc221b78096aab842d934a76bad0ab\n```\n\nYou don't need to encode hashes in Nix's custom base 32 format before using them. The normal base 16 format works just fine.\n\n### Fetch Git repositories with `fetchgit`\n\nIf the source code you need is in a Git repository, you can use [`fetchgit`](https://nixos.org/manual/nixpkgs/stable/#fetchgit). It expects at least one extra attribute compared to `fetchurl`, the attribute `rev`. This can be the full Git commit ID (the `sha1` hash) or a tag name, like `v2.12`.\n\nTry the following `replit.nix` file:\n\n```nix\n{ pkgs }:\n\nlet\n  hello = pkgs.stdenv.mkDerivation rec {\n    pname = \"hello\";\n    version = \"2.12\";\n    src = pkgs.fetchgit {\n      url = \"https://github.com/ritza-co/simple-hello-world-demo.git\";\n      rev = \"v${version}\";\n      sha256 = \"1111111111111111111111111111111111111111111111111111\";\n    };\n  };\nin {\n  deps = [\n    hello\n  ];\n}\n```\n\nOnce again, after changing `replit.nix`, open the Console tab, and press enter. The output should be similar to:\n\n```\nDetected change in environment, reloading shell...\nnix error: building nix env: exit status 102\nOutput has been trimmed to the last 20 lines\nexecuting builder '/nix/store/bm7jr70d9ghn5cczb3q0w90apsm05p54-bash-5.1-p8/bin/bash'\nbuilding '/nix/store/6drp4pmqj67b3ysy88fhawz4fdf2kwkb-simple-hello-world-demo.drv'...\nexporting https://github.com/ritza-co/simple-hello-world-demo.git (rev v2.12) into /nix/store/hmmp6c24wg43d9cbslmhgrrccvhhaxac-simple-hello-world-demo\nInitialized empty Git repository in /nix/store/hmmp6c24wg43d9cbslmhgrrccvhhaxac-simple-hello-world-demo/.git/\nremote: Enumerating objects: 462, done.\nremote: Counting objects: 100% (462/462), done.\nremote: Compressing objects: 100% (333/333), done.\nremote: Total 462 (delta 127), reused 462 (delta 127), pack-reused 0\nReceiving objects: 100% (462/462), 1.09 MiB | 7.15 MiB/s, done.\nResolving deltas: 100% (127/127), done.","metadata":{"id":1334}}],["1335",{"pageContent":"remote: Total 462 (delta 127), reused 462 (delta 127), pack-reused 0\nReceiving objects: 100% (462/462), 1.09 MiB | 7.15 MiB/s, done.\nResolving deltas: 100% (127/127), done.\nFrom https://github.com/ritza-co/simple-hello-world-demo\n * tag               v2.12      -> FETCH_HEAD\nSwitched to a new branch 'fetchgit'\nremoving `.git'...\nhash mismatch in fixed-output derivation '/nix/store/bj8zf0n8xdfrkj5mndmlhg34ac3pd91l-simple-hello-world-demo':\n  wanted: sha256:1111111111111111111111111111111111111111111111111111\n  got:    sha256:1mc1vrixpkzkdnvpzn3b01awvha6z7k2dnpai3c6g89in8l1wr70\ncannot build derivation '/nix/store/gw50rkh9d2m4hxiyyldcz6wk0hf76pkx-hello.drv': 1 dependencies couldn't be built\nerror: build of '/nix/store/gw50rkh9d2m4hxiyyldcz6wk0hf76pkx-hello.drv' failed\n```\n\nReplacing the `sha256` in the derivation with `1mc1vrixpkzkdnvpzn3b01awvha6z7k2dnpai3c6g89in8l1wr70` will allow the build to succeed (your hash might be different, check the `got: sha256:` line).\n\nThere are also fetchers for other version control repositories, such as [`fetchsvn`](https://nixos.org/manual/nixpkgs/stable/#fetchsvn), [`fetchhg`](https://nixos.org/manual/nixpkgs/stable/#fetchhg), or [`fetchcvs`](https://nixos.org/manual/nixpkgs/stable/#fetchcvs).\n\n### Fetch code from GitHub with `fetchFromGitHub`\n\nThe `fetchFromGitHub` fetcher doesn't take a `url` attribute, instead replacing it with `owner` and `repo` attributes.\n\nTry the following `replit.nix` file:\n\n```nix\n{ pkgs }:\n\nlet\n  hello = pkgs.stdenv.mkDerivation rec {\n    pname = \"hello\";\n    version = \"2.12\";\n    src = pkgs.fetchFromGitHub {\n      owner = \"ritza-co\";\n      repo = \"simple-hello-world-demo\";\n      rev = \"v${version}\";\n      sha256 = \"1111111111111111111111111111111111111111111111111111\";\n    };\n  };\nin {\n  deps = [\n    hello\n  ];\n}\n```\n\nAgain, if you switch to the Console tab and pressing enter, the build will fail because we haven't provided the correct hash. Nix will output the correct hash. Use this to get the build to succeed.","metadata":{"id":1335}}],["1336",{"pageContent":"```\n\nAgain, if you switch to the Console tab and pressing enter, the build will fail because we haven't provided the correct hash. Nix will output the correct hash. Use this to get the build to succeed.\n\nThere are also fetchers for other Git forges, such as [`fetchFromGitLab`](https://nixos.org/manual/nixpkgs/stable/#fetchfromgitlab), [`fetchFromBitbucket`](https://nixos.org/manual/nixpkgs/stable/#fetchfrombitbucket), or [`fetchFromSavannah`](https://nixos.org/manual/nixpkgs/stable/#fetchfromsavannah). Most work just like `fetchFromGitHub`.\n\n## Building a package\n\nNow that we know how to fetch source code, we need to know how to build it into actual software. Our little `hello` program is built in a stock-standard way, and the default options used by `stdenv.mkDerivation` are perfect for it. Most software is not quite so simple, and will require us to tweak some of these options.\n\nFor some common types of software, Nix has [dedicated builders](https://nixos.org/manual/nixpkgs/stable/#chap-language-support) that make those types of software easier to build. Some examples are Python programs or C# programs.\n\nThe \"standard\" builder is `stdenv.mkDerivation`. The dedicated builders are usually wrappers around `stdenv.mkDerivation`, so they inherit much from it. If the software you need to build is written in C or you can't find a dedicated builder for it, use `stdenv.mkDerivation` to build it.\n\nEven if there is a dedicated builder for your software, it's probably a good idea to at least read this next section on `stdenv.mkDerivation` so you understand the fundamentals of building a package in Nix.\n\n### Building with `stdenv.mkDerivation`\n\nSo far, we've not really explained what a derivation means in Nix. A derivation is an attribute set that tells Nix what it needs to know to build a package.\n\nIt contains information about:\n\n- What other derivations, if any, a derivation depends on;\n- What build script to use;\n- What platform to build for;","metadata":{"id":1336}}],["1337",{"pageContent":"It contains information about:\n\n- What other derivations, if any, a derivation depends on;\n- What build script to use;\n- What platform to build for;\n- What arguments and environment variables should be available to the builder; and\n- Where Nix should put the results of the build.\n\nAs the final part of evaluating a Nix expression that produces a derivation, Nix will save that derivation attribute set to disk in the Nix store as a `.drv` file. It represents the build action. Later, in the build phase, Nix will use this `.drv` file to build the package it describes. If you want to see what one looks like, run the following command in the Console:\n\n```bash\nnix show-derivation $(which hello)\n```\n\nThis will show you `hello`'s derivation file, which was used by Nix to build it.\n\nBefore Nix builds a derivation, it will ensure that all the input derivation paths are valid. That is, that those derivations have been built and their outputs exist in the Nix store. If not, it will fetch them from the binary cache, or build those first.\n\nNix actually has a built-in function called `derivation` that produces derivation attribute sets, but we usually use `stdenv.mkDerivation` instead, which is easier to use. The `stdenv.mkDerivation` builder is not built into the Nix language itself. It's part of Nixpkgs, and evolved over time as the community built more and more packages, incorporating their learnings as useful abstractions.\n\nThe minimum attributes that `stdenv.mkDerivation` needs are `name` and `src`. If `name` is not provided, it will attempt to construct it from `pname` + `version`: `\"${pname}-${version}\"`.","metadata":{"id":1337}}],["1338",{"pageContent":"The minimum attributes that `stdenv.mkDerivation` needs are `name` and `src`. If `name` is not provided, it will attempt to construct it from `pname` + `version`: `\"${pname}-${version}\"`.\n\nThe `stdenv.mkDerivation` builder automates common build tasks and provides common Unix tools: `gcc`, `coreutils`/`findutils`/`diffutils`, `sed`/`grep`/`awk`, `tar`/`gzip`/`bzip2`/`xz`, `make`, `bash`, and `patch`. If your package uses the Unix standard `./configure; make; make install` build procedure (like our earlier `hello` example), you don't even need to tweak the standard build at all. If `stdenv.mkDerivation` doesn't work automatically, you can easily customize or override the various build phases.\n\nLet's take a look at a more complex derivation:\n\n```nix\n{ pkgs }:\n\nlet\n  mle = with pkgs; stdenv.mkDerivation rec {\n    pname = \"mle\";\n    version = \"1.5.0\";\n\n    src = fetchFromGitHub {\n      owner = \"adsr\";\n      repo = \"mle\";\n      rev = \"v${version}\";\n      sha256 = \"1nhd00lsx9v12zdmps92magz76c2d8zzln3lxvzl4ng73gbvq3n0\";\n    };\n\n    # Bug fixes found after v1.5.0 release\n    patches = [\n      (fetchpatch {\n        name = \"skip_locale_dep_test.patch\";\n        url = \"https://github.com/adsr/mle/commit/e4dc4314b02a324701d9ae9873461d34cce041e5.patch\";\n        sha256 = \"sha256-j3Z/n+2LqB9vEkWzvRVSOrF6yE+hk6f0dvEsTQ74erw=\";\n      })\n      (fetchpatch {\n        name = \"fix_input_trail.patch\";\n        url = \"https://github.com/adsr/mle/commit/bc05ec0eee4143d824010c6688fce526550ed508.patch\";\n        sha256 = \"sha256-dM63EBDQfHLAqGZk3C5NtNAv23nCTxXVW8XpLkAeEyQ=\";\n      })\n    ];\n\n    # Fix location of Lua 5.4 header and library\n    postPatch = ''\n      substituteInPlace Makefile --replace \"-llua5.4\" \"-llua\";\n      substituteInPlace mle.h    --replace \"<lua5.4/\" \"<\";\n      patchShebangs tests/*\n    '';\n\n    # Use select(2) instead of poll(2) (poll is returning POLLINVAL on macOS)\n    # Enable compiler optimization\n    CFLAGS = \"-DTB_OPT_SELECT -O2\";\n\n    nativeBuildInputs = [ makeWrapper installShellFiles ];","metadata":{"id":1338}}],["1339",{"pageContent":"# Enable compiler optimization\n    CFLAGS = \"-DTB_OPT_SELECT -O2\";\n\n    nativeBuildInputs = [ makeWrapper installShellFiles ];\n\n    buildInputs = [ pcre uthash lua5_4 ];\n\n    doCheck = true;\n\n    installFlags = [ \"prefix=${placeholder \"out\"}\" ];\n\n    postInstall = ''\n      installManPage mle.1\n    '';\n  };\nin {\n  deps = [\n    mle\n  ];\n}\n```\n\nThis was adapted from [mle](https://github.com/adsr/mle)'s [derivation in Nixpgks](https://github.com/NixOS/nixpkgs/blob/c5edc1d38aaa960a04ad2c675af102debde12462/pkgs/applications/editors/mle/default.nix). Let's break down some of the new concepts in here.\n\n#### Dependencies\n\nIf your software depends on other packages that are not part of the standard environment, you can provide them using the `buildInputs` attribute as follows:\n\n```nix\npkgs.stdenv.mkDerivation {\n  name = \"foo-1.2.3\";\n  ...\n  buildInputs = with pkgs; [libbar perl ncurses];\n}\n```\n\nYou may also see `nativeBuildInputs`, which you can think of as being for build-time dependencies, whereas `buildInputs` is for run-time dependencies. That is an oversimplification, but it's a good approximation.\n\nIf you're unsure where to put a dependency, use `buildInputs`. Even if you accidentally put a build-time dependency there, the derivation should still build. It's not ideal, but if you're just trying to get some software into your repl, it'll do just fine.\n\nThere are [even more ways to specify dependencies](https://nixos.org/manual/nixpkgs/stable/#variables-specifying-dependencies), but unless you're cross-compiling they're unlikely to matter to you.\n\n#### Patches\n\nOne of the great things about Nix is that since it's source built, it has first-class support for applying patches to software.\n\n```nix\npkgs.stdenv.mkDerivation {\n  name = \"foo-1.2.3\";\n  ...\n  patches = [\n    (fetchpatch {\n      url = \"https://example.com/patches/001_arches_align.patch\";\n      sha256 = \"0i3qclm2mh98c04rqpx1r4qagd3wpxlkj7lvq0ddpkmr8bm0fh0m\";\n    })\n\n    (fetchpatch {\n      url = \"https://example.com/patches/002_no_remove_static_const.patch\";","metadata":{"id":1339}}],["1340",{"pageContent":"sha256 = \"0i3qclm2mh98c04rqpx1r4qagd3wpxlkj7lvq0ddpkmr8bm0fh0m\";\n    })\n\n    (fetchpatch {\n      url = \"https://example.com/patches/002_no_remove_static_const.patch\";\n      sha256 = \"0zfjqmjsj0y1kfzxbp29v6nxq5qwgazhb9clqc544sm5zn0bdp8n\";\n    })\n\n    (fetchpatch {\n      url = \"https://example.com/patches/003_64_bit_clean.patch\";\n      sha256 = \"0mda9fkaqf2s1xl6vlbkbq20362h3is9dpml9kfmacpbifl4dx3n\";\n    })\n\t];\n}\n```\n\nPatches are applied in the order that they are listed. They must be in the format accepted by the `patch` command, and may optionally be compressed using `gzip`, `bzip2`, or `xz`.\n\nThey can be local files, or you can fetch them. Prefer using `fetchpatch` rather than `fetchurl` to fetch patches. It works similarly, but it performs normalization on the patches before computing the hash, such as removing comments and unstable parts sometimes added by version control systems that change over time (and which would otherwise cause the hash to change).\n\n#### Environment variables\n\nAny attributes that you set on `stdenv.mkDerivation` will also be made available in the build environment as environment variables. Be aware that they'll be set in all phases if you set them this way.\n\n### Build phases\n\nThe standard builder script has several phases, which are defined as bash functions. You can influence the behaviour of each phase by setting specific attributes on `stdenv.mkDerivation`, some of which are detailed below. The most common phases are as follows, in order:\n\n1. [`unpackPhase`](https://nixos.org/manual/nixpkgs/stable/#ssec-unpack-phase): This should unpack the source into the current directory. The default implementation simply unpacks the derivation's `src` files.\n   - By default it supports plain tar archives, or those compressed by gzip (`*.tar.gz`, `*.tgz` or `*.tar.Z`), bzip2 (`*.tar.bz2`, `*.tbz2` or `*.tbz`) or xz (`*.tar.xz`, `*.tar.lzma` or `*.txz`).","metadata":{"id":1340}}],["1341",{"pageContent":"- By default it supports plain tar archives, or those compressed by gzip (`*.tar.gz`, `*.tgz` or `*.tar.Z`), bzip2 (`*.tar.bz2`, `*.tbz2` or `*.tbz`) or xz (`*.tar.xz`, `*.tar.lzma` or `*.txz`).\n   - It can also automatically unpack zip files. Zip files are unpacked using the `unzip` package, which is not in the standard environment. Add it to `nativeBuildInputs`.\n   - Setting `dontUnpack` to `true` will skip this phase.\n1. [`patchPhase`](https://nixos.org/manual/nixpkgs/stable/#ssec-patch-phase): The patch phase applies any supplied `patches` to the unpacked source code.\n   - `patchFlags` sets flags to be passed to `patch`. If not set, the argument `-p1` is used, which causes the leading directory component to be stripped from the file names in each patch.\n   - Setting `dontPatch` to `true` skips this phase, but if `patches` is not set it's also skipped.\n1. [`configurePhase`](https://nixos.org/manual/nixpkgs/stable/#ssec-configure-phase): Prepares the source tree for building. By default, it runs `./configure` if it exists.\n   - Set `configureScript` to change the configure script. Defaults to `./configure`.\n   - Set `configureFlags` to pass additional arguments to the configure script.\n   - By default, `--prefix=$prefix` is added to the configure flags. Set `dontAddPrefix` to disable this.\n   - Set `prefix` to set the `$prefix` variable above (remember how attributes defined here are also exposed as environment variables). By default this is set to `$out`, which is the output directory that Nix creates for your package in the Nix store.\n   - Setting `dontConfigure` to `true` will skip this phase.\n1. [`buildPhase`](https://nixos.org/manual/nixpkgs/stable/#build-phase):\n   - Set `makeFile` to change the name of the MakeFile.\n   - Set `makeFlags` to pass additional flags to `make`.\n   - Set `buildFlags` to pass additional flags to `make`, but only called during the build phase.\n   - Setting `dontBuild` to `true` will skip this phase.","metadata":{"id":1341}}],["1342",{"pageContent":"- Set `buildFlags` to pass additional flags to `make`, but only called during the build phase.\n   - Setting `dontBuild` to `true` will skip this phase.\n1. [`installPhase`](https://nixos.org/manual/nixpkgs/stable/#ssec-install-phase):\n   - Set `installFlags` to pass additional flags to `make`, that will only be called during the install phase.\n   - Remember that `makeFlags` will also affect this phase.\n   - Setting `dontInstall` to `true` will skip this phase.\n\nYou can override any of these phases by setting an attribute with the phase's name. It will be executed as a bash script in the standard environment.\n\nYou can also adjust the build by running code before and after each phase. Set at attribute with either `pre` or `post` and the phase's name (capitalized), e.g. `preConfigure` or `postBuild`.\n\nYou can add yet more phases before or after each of these phases, or even reorder them completely. Read the [documentation for build phases](https://nixos.org/manual/nixpkgs/stable/#sec-stdenv-phases) for details on how to do that.\n\nHere we've covered the basics. Read [`stdenv.mkDerivation`'s documentation](https://nixos.org/manual/nixpkgs/stable/#chap-stdenv) for more. Remember that this is the basis for the largest software repository, and as such there's a lot it is capable of.\n\n### Shell functions and utilities\n\nThe standard environment also has a few [shell functions and utilities](https://nixos.org/manual/nixpkgs/stable/#ssec-stdenv-functions) that may be helpful if you're making adjustments to the phases above, such as:\n\n- [`substituteInPlace`](https://nixos.org/manual/nixpkgs/stable/#fun-substituteInPlace), which performs substitutions in files, especially handy to replace references in scripts to executables in nix derivations to get them to work correctly:\n  ```\n  substituteInPlace ./foo.sh \\\n    --replace /usr/bin/bar $bar/bin/bar \\\n    --replace /usr/bin/baz $bar/bin/baz\n  ```\n\n### Dedicated builders","metadata":{"id":1342}}],["1343",{"pageContent":"```\n  substituteInPlace ./foo.sh \\\n    --replace /usr/bin/bar $bar/bin/bar \\\n    --replace /usr/bin/baz $bar/bin/baz\n  ```\n\n### Dedicated builders\n\nAs we touched on before, `stdenv.mkDerivation` is not the only builder. Many frameworks, programming languages, or build systems have dedicated builders that provide conveniences and abstractions for their idiosyncrasies. Be sure to have a look at [builders for specific languages and frameworks](https://nixos.org/manual/nixpkgs/stable/#chap-language-support) in the Nixpkgs manual.\n\nIt is not necessarily an exhaustive list. Even if you don't see a dedicated builder for your use case listed in the manual, there may still be one. The best way to find out is to have a look at [source code in Nixpkgs](https://github.com/NixOS/nixpkgs), which is hosted on GitHub.\n\nLook for terms, tools, and commands that are specific to your ecosystem. You can use GitHub's web search, or make a local clone of the repo to `grep` (consider making a shallow clone using git's `--depth=1` flag, as it's quite a big repository with many branches and a long history).\n\n### Package setup hooks\n\n[Hooks](https://nixos.org/manual/nixpkgs/stable/#ssec-setup-hooks) are scripts that are run during the build if a dependency uses them. If a dependency of your derivation uses a hook, that hook will be run during the build of your derivation.\n\nYou should not use hooks directly, but be aware that depending on packages that use hooks may change the way your build works. Even `stdenv.mkDerivation` includes some hooks, for example, to place docs in the right place, to remove debug symbols, or to compress man pages.","metadata":{"id":1343}}],["1344",{"pageContent":"There are hooks for specific technologies, for example, the `cmake` derivation uses the [`cmake` hook](https://nixos.org/manual/nixpkgs/stable/#cmake), which makes some changes to `stdenv.mkDerivation` for Cmake projects. Thus, including `cmake` (the derivation) in the `nativeBuildInputs` of your derivation will change the way it works. You can use the `cmakeFlags` attribute in this situation.\n\n## Further reading\n\nFor more information, be sure to take a look at:\n\n- Nix Pills [6: Our First Derivation](https://nixos.org/guides/nix-pills/our-first-derivation.html), [7: Working Derivation](https://nixos.org/guides/nix-pills/working-derivation.html), and [8: Generic Builders](https://nixos.org/guides/nix-pills/generic-builders.html) for a gradual build up to `stdenv.mkDerivation` from first principles.\n- The [Nixpkgs manual](https://nixos.org/manual/nixpkgs/stable/), the authoritative reference, which includes further information, such as advanced features we haven't gotten into here. Of particular interest might be the section on [trivial builders](https://nixos.org/manual/nixpkgs/stable/#chap-language-support) for creating things like text files or shell scripts.\n- [Packaging/Binaries on the NixOS Wiki](https://nixos.wiki/wiki/Packaging/Binaries). You may need to use a pre-compiled binary file. This is most common with proprietary software.","metadata":{"id":1344}}],["1345",{"pageContent":"# Playing audio on Replit\n\nLearn how to use audio on Replit by watching this video or read on below.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CuIV2-ivg0U\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## System-wide audio\n\n[System-wide audio](https://blog.replit.com/system-audio) is an opt-in feature that delivers the PulseAudio audio stream to your browser through our [VNC](https://novnc.com) client. To enable it, add the following to your `.replit` file:\n\n```toml\naudio = true\n```\n\nThen restart your repl by running `kill 1` in the shell. You will see a checkbox with headphones in the lower right corner of the VNC output window:\n\n![look for the headphones](https://blog.replit.com/images/system-audio/system-audio.png)\n\nNote that due to browser security restrictions, you need to manually toggle the checkbox every time you open the Repl.\n\n### Known limitations\n\nKnown limitations of system-wide audio include:\n\n- A 100-300 millisecond latency introduced by the browser\n- Issues with Safari's browser security model\n- Not supported in Spotlight or Embed modes if enabled through secrets (as opposed to through the `.replit` file)\n\n## Audio service\n\nUsing the audio service, you can play audio in your Repl without creating a website. This service operates on a request system and allows you to control the volume, the number of times played, and the play state of your audio files.\n\nSupported audio file formats are `.wav`, `.aiff`, and `.mp3`. JavaScript and Python libraries are currently available. Examples of the JavaScript and Python libraries can be found in the generated docs at https://audio-js-docs--allawesome497.repl.co/ and https://replit-docs-python.allawesome497.repl.co/, respectively.\n\nFor those who prefer Rust, a community-contributed library is available [here](https://github.com/Daniel-Liu-c0deb0t/replit_audio).\n\n## How to Develop an Audio Library","metadata":{"id":1345}}],["1346",{"pageContent":"For those who prefer Rust, a community-contributed library is available [here](https://github.com/Daniel-Liu-c0deb0t/replit_audio).\n\n## How to Develop an Audio Library\n\nIf you are new to Python or JavaScript, follow our steps below to make a library.\n\n### Step 1: Add an audio source\n\nFiles are played in mono/single channel mode. Files with multiple channels will be read and converted into single-channel data.\n\nAudio files are played via a request system to make this as light as possible on your repl's resources. To make a request, write to a named pipe, `/tmp/audio`.\n\nAn example request might look like this:\n\n```json\n{\n  \"Paused\": false,\n  \"Name\": \"My tone\",\n  \"Type\": \"tone\",\n  \"Volume\": 1,\n  \"DoesLoop\": false,\n  \"LoopCount\": 0,\n  \"Args\": {\n    \"Pitch\": 400,\n    \"Seconds\": 5,\n    \"Type\": 1,\n    \"Path\": \"  \"\n  }\n}\n```\n\nTo break it down:\n\n- `Paused` indicates if the source is paused or not. This can only be set when updating the source.\n- `Name` is the name of the source. This can be used to identify the source when it's being created. If it's not set, the name will be set by pid1.\n- `Type` indicates the source type. Currently, supported types are:\n  - `wav` – A `.wav` file\n  - `aiff` – A `.aiff` file\n  - `mp3` – A `.mp3` file\n  - `tone` – A generated tone\n- `Volume` is the volume of the source as a floating point number; `1` would be 100%.\n- `DoesLoop` indicates if the source should loop. If true, `LoopCount` should be set.\n- `LoopCount` indicates how many times the source should loop. If set to `3`, the source will restart `3` times when it is done playing the first time. If set to a negative value, it will loop forever. If `DoesLoop` is false, this value will be ignored.","metadata":{"id":1346}}],["1347",{"pageContent":"- `Args` indicate additional arguments that are not used by every source type. + `Path` (used by `aiff`, `wav`, and `mp3` types) is the path to the file. This can be relative or absolute (relative to the workspace's root). + `Pitch` (used for the `tone` type) is the frequency/pitch of the tone. + `Type` (used for the `tone` type) is the wave type of the generated tone. Valid values are:\n  - `0` – The sine wave type\n  - `1` – The triangle wave type\n  - `2` – The saw wave type\n  - `3` – The sqr wave type\n\n### Step 2: Get the status of playing audio\n\nAn example status for audio is shown below:\n\n```json\n{\n  \"Sources\": [\n    {\n      \"Name\": \"1\",\n      \"Type\": \"tone\",\n      \"Volume\": 1,\n      \"Duration\": 2000,\n      \"Remaining\": 1995,\n      \"Paused\": false,\n      \"Loop\": 0,\n      \"ID\": 1,\n      \"EndTime\": \"2020-08-20T18:15:27.763933471Z\",\n      \"StartTime\": \"2020-08-20T18:15:25.763933471Z\",\n      \"Request\": {\n        \"ID\": 0,\n        \"Paused\": false,\n        \"Name\": \"1\",\n        \"Type\": \"tone\",\n        \"Volume\": 1,\n        \"DoesLoop\": false,\n        \"LoopCount\": 1,\n        \"Args\": {\n          \"Pitch\": 400,\n          \"Seconds\": 2,\n          \"Type\": 1\n        }\n      }\n    }\n  ],\n  \"Disabled\": false,\n  \"Running\": true\n}\n```\n\nIn detail, this is:\n\n- `Sources` – A list of playing sources.\n  - `Name` – The name of the source.\n  - `Type` – The type of the source.\n  - `Volume` – The volume of the source (`float64`).\n  - `Duration` – The (estimated) duration of the source (in milliseconds) (`int64`).\n  - `Remaining` – The (estimated) time remaining for the source (in milliseconds) (`int64`).\n  - `Paused` – Whether the source is paused or not (`bool`).\n  - `Loop` – How many times the source will play itself again. Negative values are infinite (`int64`).\n  - `ID` – The ID of the source used for updating it (`int64`).\n  - `EndTime` – The estimated time when the source will be done playing.\n  - `StartTime` – When the source started playing.\n  - `Request` – The request used to create the source.","metadata":{"id":1347}}],["1348",{"pageContent":"- `EndTime` – The estimated time when the source will be done playing.\n  - `StartTime` – When the source started playing.\n  - `Request` – The request used to create the source.\n- `Disabled` – Whether the pid1 audio player is disabled. This is useful for debugging.\n- `Running` – Whether pid1 is sending audio or not. This is useful for debugging.\n\n**Notes:**\nThe estimated end time is based on the current loop and does not factor in the fact that the source may repeat itself.\nTimestamps are formatted as: `yyyy-MM-dd'T'HH:mm:ssZ`.\n\nTo read the data from the sources, you need to read `/tmp/audioStatus.json`.\nThe file is formatted as shown below:\n\n**Note:** After a source finishes playing, it is removed from the known sources.\n\n### Step 3: Managing current sources\n\nTo pause or edit a playing source, you first need its ID.\nYou can get its ID by reading `/tmp/audioStatus.json`, as detailed above.\n\nEdit requests are formatted as shown below:\n\n```js\n{\n  \"ID\": 1, // The id of the source.\n  \"Volume\": 1, // The volume for the source to be played at.\n  \"Paused\": false, // Whether the file is paused or not.\n  \"DoesLoop\": false, // Whether the file should be repeated or not.\n  \"LoopCount\": -1 // How many times to repeat the file. Set to a negative value to create an endless loop.\n}\n```\n\nAll fields **must** be provided, except for `LoopCount` when `DoesLoop` is `false`.\n\nFor editing a source, you could do the following (or the equivalent in other languages):\n\n```py\nimport json\n\nclass NoSuchPlayerException(Exception): pass\n\ndef update_source(id, \\*\\*changes):\n  player_data = read_status() # Assume read_status reads /tmp/audioStatus.json\n\n  for s in player_data['Sources']:\n    if s['ID'] == id:\n      data = s\n      break\n\n  if not data:\n    raise NoSuchPlayerException(f'No player with id \"{id}\" found!')\n\n  data.update({key.title(): changes[key] for key in changes})\n\n  with open('/tmp/audio', 'w') as f:\n    f.write(json.dumps(data))\n\n```","metadata":{"id":1348}}],["1349",{"pageContent":"raise NoSuchPlayerException(f'No player with id \"{id}\" found!')\n\n  data.update({key.title(): changes[key] for key in changes})\n\n  with open('/tmp/audio', 'w') as f:\n    f.write(json.dumps(data))\n\n```\n\nThere is also a simple demo created in Python available [here](https://replit.com/@AllAwesome497/Audio-Demo)","metadata":{"id":1349}}],["1350",{"pageContent":"# Replit libraries\n\nWhile you can use nearly any package or library on Replit, we have also built several of our own. You can read more about these here.\n\n## Replit.web\n\nReplit web is a Python web framework that is integrated with Replit DB and Replit Auth. It extends Flask, so if you're familiar with that you'll find it very intuitive, and have access to Auth and a DB by default.\n\n- **Documentation:** [https://replit-py.readthedocs.io/en/latest/web_tutorial.html](https://replit-py.readthedocs.io/en/latest/web_tutorial.html)\n- **Announcement:** [A Python Framework With Built-in Database and Auth Support](https://blog.replit.com/replit-web)\n- [Build a technical challenge website with Replit.web](/tutorials/python/technical-challenge-site)\n- [Build a paid content site with Replit.web and Stripe](/tutorials/python/paid-content-site)\n\n## Kaboom\n\nKaboom is a JavaScript library for GUI development, focused on making games. You can find some example games with walkthrough guides below.\n\n- **Homepage:** [https://kaboomjs.com](https://kaboomjs.com)\n- **Book:** [https://makejsgames.com](https://makejsgames.com)\n- [Build Snake with Kaboom](/tutorials/kaboom/build-snake-with-kaboom)\n- [Build Asteroids with Kaboom](/tutorials/kaboom/build-asteroids-with-kaboom)\n- [Build a space shooter with Kaboom](/tutorials/kaboom/build-space-shooter-with-kaboom)\n- [Build a 3d game with Kaboom](/tutorials/kaboom/build-3d-game-with-kaboom)\n- [Build Tic-Tac-Toe with Kaboom and Websockets](/tutorials/kaboom/build-tictactoe-with-websockets-kaboom)\n- [Build Mario with Kaboom](/tutorials/kaboom/build-mario-with-kaboom)\n\n## Replit Auth\n\nReplit Auth lets you easily build a \"Sign in with Replit\" option to your own applications. If a user has an account with Replit, they can use that to sign into their account on your application too, similar to what you might be used to from \"Sign in with Google\" or \"Sign in with GitHub\" options in many third-party services.","metadata":{"id":1350}}],["1351",{"pageContent":"- **Quick start**: [Authenticating users with Repl Auth](/hosting/authenticating-users-repl-auth#authenticating-users-with-repl-auth)\n\n## Replit DB (Replit Database)\n\nReplit DB gives you a convenient way to store application data without having to deal with confusing database ops work. Just import the library into your Repl and you're good to go!\n\n- [Python Documentation](https://replit-py.readthedocs.io/en/latest/db_tutorial.html)\n- [Node.js Documentation](https://github.com/replit/database-node)\n- [FAQ](/hosting/databases/replit-database)\n- [Build a Phonebook with Replit Database](/tutorials/python/using-the-replit-database)\n\n## Replit Audio\n\nReplit audio allows you to interact with audio from your Replit apps, playing sound files, playing and pausing, and navigating tracks.\n\n- **Tutorial:** [Replit Audio](/tutorials/python/audio)\n- **Documentation:** [Playing audio on Replit](/tutorials/replit/playing-audio-replit)\n\n## Replit AI\n\nReplit AI is a library for Python and TypeScript to give you instant access to a powerful LLM. You can use it to generate text, code, and more.\n\n- **Documentation:** [TypeScript](https://ai-docs-typescript.replit.app/) | [Python](https://pypi.org/project/replit-ai/)\n- **Examples:** [TypeScript](https://replit.com/@masfrost/replitai-demo) | [Python](TODO: link)\n- **Repository:** [TypeScript](https://github.com/replit/replit-ai-typescript) | [Python](https://github.com/replit/replit-ai-python)","metadata":{"id":1351}}],["1352",{"pageContent":"---\ntitle: \"Robot NFT Part 2: Frontend\"\n---\n\n# Build a robot NFT on the Ethereum blockchain with Solidity and Replit (part 2)\n\nIn the [first part of this tutorial](/tutorials/web3/build-a-robot-nft), we wrote an Ethereum smart contract for an NFT project called ReplBots – robot profile pictures with randomly generated colors and accessories. This contract allowed users to create ReplBot NFTs on the blockchain and forms the logic portion of our decentralized NFT application. In this second part of the tutorial, we'll create a web frontend for our smart contract, giving users a way to view their NFTs.\n\nBy the end of this tutorial, you will know the basics of interacting with wallets and Ethereum smart contracts from JavaScript and building web3 applications.\n\n## Getting started\n\nOpen the repl you created in part one of this tutorial, or clone ours:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/ReplBots?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nIf you haven't already, [install Metamask](https://metamask.io/download/) in your browser.\n\nOnce your repl is loaded, create a new directory named `frontend`. This directory will contain the HTML, JavaScript, and image files used for our frontend. Inside this directory, create a second directory named `svg`. Download [this ZIP folder containing our NFT art assets](https://tutorial-files.util.repl.co/robot-nft-p2/replbot-art.zip), unzip it, and upload its contents to the `svg` directory you just created.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/43-robot-nft-p2/frontend-svg-dir.mp4\">\n</video>\n\nInside the main `frontend` directory, create the following files:\n\n- `index.html`: This will be our app's single page.\n- `style.css`: This will contain our app's CSS stylesheet.","metadata":{"id":1352}}],["1353",{"pageContent":"</video>\n\nInside the main `frontend` directory, create the following files:\n\n- `index.html`: This will be our app's single page.\n- `style.css`: This will contain our app's CSS stylesheet.\n- `app.js`: This will contain our app's JavaScript logic, used for connecting to the blockchain and constructing ReplBot images.\n\nBefore we start populating these files, we need to have a ReplBots contract instance for our frontend to connect to. Let's deploy a new copy of our contract on the Replit Testnet using our Solidity repl's web interface.\n\nFirst, run your repl. Once all of the dependencies are installed, you should see the Replit Ethereum web interface in your repl's browser. It looks like this:\n\n![Replit Ethereum interface](https://docimg.replit.com/images/tutorials/43-robot-nft-p2/repl-eth-web.png)\n\nConnect your MetaMask wallet to the web interface and switch to the Replit Testnet. If your balance is 0 ETH, click the link marked \"Get 1 ETH for testing\". Wait until 1 ETH shows up in your wallet balance on the top right of the page.\n\n![Switching to testnet](https://docimg.replit.com/images/tutorials/43-robot-nft-p2/switch-to-test.png)\n![Get one ethereum](https://docimg.replit.com/images/tutorials/43-robot-nft-p2/get-one.png)\n\nNow you can deploy your contracts. Select \"ReplBots\" from the drop-down box and click **Deploy**. Approve the MetaMask pop-up that appears.\n\nOnce this contract has been deployed, it will show up as an expandable box. If you expand the deployed contract, at the bottom, you'll see a value starting with `0x`: the contract's address. Click on this address to copy it to your clipboard. Then paste it in a safe place, such as the bottom of your repl's `README.md`.\n\n![Copy contract address](https://docimg.replit.com/images/tutorials/43-robot-nft-p2/copy-addr.png)","metadata":{"id":1353}}],["1354",{"pageContent":"![Copy contract address](https://docimg.replit.com/images/tutorials/43-robot-nft-p2/copy-addr.png)\n\nNext to the contract's address, you should see a button labeled \"Copy ABI\". Click on this button to copy the contract's ABI ([Application Binary Interface](https://docs.soliditylang.org/en/v0.8.13/abi-spec.html)) to your clipboard, and paste it into the same place you put the contract address. You should see a large JSON object.\n\nWe'll need both of these pieces of data to interact with our contract later on.\n\n## Setting up the front-end\n\nOpen `frontend/index.html` and populate it with the following markup:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>ReplBot NFTs</title>\n    <link href=\"/style.css\" rel=\"stylesheet\">\n  <head>\n  <body>\n    <button id=\"mint\" class=\"button\">Mint ReplBot</button><br>\n    <form id=\"breed\">\n      Parent 1: <input name=\"parentOneId\" type=\"text\"></input><br>\n      Parent 2: <input name=\"parentTwoId\" type=\"text\"></input><br>\n      <input type=\"submit\" class=\"button\" value=\"Breed new ReplBot!\"></input>\n    </form>\n\n    <div id=\"bots\">\n\n    <script src=\"./app.js\"></script>\n  </body>\n</html>\n```\n\nIn this file, we've created the following:\n\n- A `button` element for minting a new ReplBot.\n- A `form` element for breeding a new ReplBot from two parents.\n- A `div` element for displaying the user's owned ReplBots.\n\nWe've also linked our stylesheet at the top of the file and our JavaScript file at the bottom.\n\nAdd the following CSS to `frontend/style.css`:\n\n```css\nbody {\n  font-family: monospace;\n}\n\n.button {\n  font-size: 1.1em;\n  border-width: 2px;\n  background-color: white;\n  margin: 1em;\n}\n\nform {\n  border: 4px solid black;\n  padding: 1em;\n  display: inline-block;\n}\n\n#bots {\n  display: flex;\n  flex-wrap: wrap;\n}\n\n#bots > svg {\n  width: 30em;\n}\n```\n\nFinally, add this code skeleton to `frontend/app.js`:\n\n```javascript\nApp = {\n  replbotAddress: \"INSERT-CONTRACT-ADDRESS-HERE\",\n  replbotContract: null,\n\n  init: async function () {},\n};\n\nApp.init();\n```","metadata":{"id":1354}}],["1355",{"pageContent":"}\n```\n\nFinally, add this code skeleton to `frontend/app.js`:\n\n```javascript\nApp = {\n  replbotAddress: \"INSERT-CONTRACT-ADDRESS-HERE\",\n  replbotContract: null,\n\n  init: async function () {},\n};\n\nApp.init();\n```\n\nThis `App` object will contain all of the status and functionality we'll implement. Insert the contract address you copied earlier as the value of `replbotAddress`.\n\n## Connecting to the blockchain\n\nThe majority of Ethereum dapps use one of two libraries for interacting with the blockchain: [`web3.js`](https://web3js.readthedocs.io/en/v1.7.1/) or [`ethers.js`](https://docs.ethers.io/v5/). The `ethers.js` library was used for Replit's Solidity Starter interface, but we'll use `web3.js` for this tutorial.\n\nWe can import `web3.js` by adding the following line to `index.html`, just above the line where we import `app.js`:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n```\n\nThen, returning to `frontend/app.js`, we'll connect to the blockchain in our app's `init` function. Add the following code to the function's body:\n\n```javascript\n    init: async function() {\n\n        if (window.ethereum) {\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            window.web3 = new Web3(window.ethereum);\n        }\n    },\n```\n\nThis code will interface with MetaMask and show a pop-up window asking the user to connect their wallet to our dapp. If the user accepts, we'll instantiate a `Web3` object using their account details.\n\nThe majority of `web3.js` functions are [asynchronous](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function), so we have to use [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) to get their return values. As `await` can only be used in asynchronous functions or top-level JavaScript, the majority of our functions will also be asynchronous.","metadata":{"id":1355}}],["1356",{"pageContent":"Because we're building on the Replit Testnet, we'll need to add some code that prompts the user to switch to this network. Add the following function definition just below the definition of `init`:\n\n```javascript\n    switchToReplitTestnet: function() {\n        window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n                {\n                    chainId: \"0x7265706c\",\n                    chainName: \"Replit Testnet\",\n                    rpcUrls: [\"https://eth.replit.com\"],\n                    iconUrls: [\n                        \"https://upload.wikimedia.org/wikipedia/commons/b/b2/Repl.it_logo.svg\",\n                    ],\n                    nativeCurrency: {\n                        name: \"Replit ETH\",\n                        symbol: \"RΞ\",\n                        decimals: 18,\n                    },\n                },\n            ],\n        });\n    },\n```\n\nThis code provides the details MetaMask needs to prompt the user to switch networks. We'll invoke it from our `init` function, as below:\n\n```javascript\n    init: async function() {\n\n        if (window.ethereum) {\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            window.web3 = new Web3(window.ethereum);\n\n            // NEW CODE BELOW\n            // Switch networks\n            App.switchToReplitTestnet();\n        }\n\n    },\n```\n\n## Interfacing with the smart contract\n\nNow that we can connect to the blockchain, we need to access our ReplBots contract. To connect to a contract and run its functions, we need two things: the contract's address, which shows us where to find it, and its ABI, which tells us what functions it implements and what their parameters are. We've already provided the address, so now we just need to specify the ABI.\n\nCreate a new file in `frontend` called `replbotABI.js` and add the following code to it:\n\n```javascript\nconst replbotABI =\n```","metadata":{"id":1356}}],["1357",{"pageContent":"Create a new file in `frontend` called `replbotABI.js` and add the following code to it:\n\n```javascript\nconst replbotABI =\n```\n\nFind the ABI data you copied after deploying the ReplBots contract and paste it in as the value of `replbotABI`. Once that's done, add the following line to `frontend/index.html`, just below the line where you import `web3`:\n\n```html\n<script src=\"./replbotABI.js\"></script>\n```\n\nNow we can instantiate `App.replbotContract` as a [`web3.eth.Contract`](https://web3js.readthedocs.io/en/v1.7.1/web3-eth-contract.html). Amend your `init` function in `frontend/app.js` so that it matches the following:\n\n```javascript\n    init: async function() {\n\n        if (window.ethereum) {\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            window.web3 = new Web3(window.ethereum);\n\n            // Switch networks\n            App.switchToReplitTestnet();\n\n            // NEW CODE BELOW\n            // Interface with contract\n            App.replbotContract = new web3.eth.Contract(replbotABI, App.replbotAddress);\n        }\n    },\n```\n\nThat's all we need to connect to our contract. Now we can implement some of its functions on our frontend.\n\n## Running contract functions\n\nWe'll start by implementing some functions in `App` to get information from the contract. This first one, `getMyReplBotIds`, will return a list of ReplBots in the current user's wallet. Add the following code within the definition of `App` at the bottom.\n\n```javascript\n    // view data in contract\n    getMyReplBotIds: async function() {\n        // get user's address\n        const accounts = await web3.eth.getAccounts();\n        const account = accounts[0];\n\n        // get number of ReplBots owned\n        let balance = await App.replbotContract.methods.balanceOf(account).call();\n\n        // get each one's ID\n        var botIds = [];\n        for (i = 0; i < balance; i++) {\n            botIds.push(await App.replbotContract.methods.tokenOfOwnerByIndex(account, i).call());\n        }\n\n        return botIds;\n    },\n```","metadata":{"id":1357}}],["1358",{"pageContent":"for (i = 0; i < balance; i++) {\n            botIds.push(await App.replbotContract.methods.tokenOfOwnerByIndex(account, i).call());\n        }\n\n        return botIds;\n    },\n```\n\nIn this function, we use [`web3.eth.getAccounts()`](https://web3js.readthedocs.io/en/v1.7.1/web3-eth.html#getaccounts) to find the user's wallet address, which we use in subsequent calls to `balanceOf()` and `tokenOfOwnerByIndex()`. Both of these functions are part of the [ERC-721 NFT standard](https://eips.ethereum.org/EIPS/eip-721) (although the latter belongs to an optional extension, `ERC721Enumerable`) and are implemented by the OpenZeppelin contract our ReplBots contract inherits from. Note the syntax for calling a contract method using `call()`.\n\nNext, let's implement a function that returns details about a given ReplBot. Add the following code below the definition of `getMyReplBotIds()`:\n\n```javascript\n    getReplBotDetails: async function(tokenId) {\n        var bot = {};\n        bot.colors = await App.replbotContract.methods.botColors(tokenId).call();\n        bot.accessories = await App.replbotContract.methods.botAccessories(tokenId).call();\n        bot.parentage = await App.replbotContract.methods.botParentage(tokenId).call();\n        return bot;\n    },\n```\n\nThis code is pretty simple. We've combined all three of our contract's bot information functions into a single function with a single return value.\n\nThose are the only view functions we'll need to worry about for now, so let's move on to functions that change state. First, we'll implement a function for `mint`. Add the following code to the bottom of your `App` definition:\n\n```javascript\n    // create new NFTs\n    mintReplBot: async function() {\n        const accounts = await web3.eth.getAccounts();\n        const account = accounts[0];\n\n        // Mint to own address\n        App.replbotContract.methods.mint(account).send({from: account});\n    },\n```","metadata":{"id":1358}}],["1359",{"pageContent":"const account = accounts[0];\n\n        // Mint to own address\n        App.replbotContract.methods.mint(account).send({from: account});\n    },\n```\n\nWhen we call functions that return information without changing state, we can use `.call()` and don't have to specify a caller address. This is because external calls to view functions do not cost gas – they can be run on a single, local node instead of by the whole network. Functions that change state, however, must be run by the whole network, to reach consensus, and this costs gas. Therefore, we use `.send()` instead of `.call()`, and must specify a sender, who will need to pay for the gas.\n\nOur function for the `breed()` function is similar. Add the following code just below your `mintReplBot` definition:\n\n```javascript\n    breedReplBot: async function(parentOneId, parentTwoId) {\n        const accounts = await web3.eth.getAccounts();\n        const account = accounts[0];\n\n        await App.replbotContract.methods.breed(parentOneId, parentTwoId, account).send({from: account});\n    },\n```\n\n## Viewing and combining SVGs\n\nWe've implemented the key contract functions above, including functions that will allow us to retrieve the details of individual ReplBot NFTs. For the moment, the details of these NFTs are just lists of strings. In this part of the tutorial, we'll turn those lists into unique images, using the powerful [SVG image format](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics).\n\nMost common image files, such as JPEGs and PNGs, are [raster graphics](https://en.wikipedia.org/wiki/Raster_graphics) – highly compressed representations of a grid of pixels. SVGs, on the other hand, are [vector graphics](https://en.wikipedia.org/wiki/Vector_graphics), made out of shapes. A good way to think about this is as follows: raster graphics files contain instructions like \"color the pixel at (10,20) in red\", whereas vector graphics files contain instructions like \"draw a red line from point (10,12) to (20,14)\".","metadata":{"id":1359}}],["1360",{"pageContent":"Both image formats have their advantages and disadvantages – a relevant advantage to SVGs is that they're formatted a lot like HTML files, so it's pretty simple to manipulate them programmatically in JavaScript. To see what an SVG looks like under the hood, rename one of the files in `frontend/svg` from `.svg` to `.html`.\n\n![SVG inside](https://docimg.replit.com/images/tutorials/43-robot-nft-p2/svg-inside.png)\n\nAs you can see, an SVG is made up of a whole lot of XML tags. It even includes CSS for styling, inside the `<defs>` tag – we'll use this to change colors. When you're done looking at the file, change its file extension back to `.svg`.\n\nSVGs can be stored in external files or written inline in HTML. To keep our code clean, we'll keep them in external files. So the first thing we'll need is a function that fetches SVG data from external files. Open `frontend/app.js` and add the following helper function code above the definition of `App`:\n\n```javascript\n// helper function\nasync function fetchSvg(filename) {\n  let svgFile = await fetch(`svg/${filename}`);\n  let svgText = await svgFile.text();\n\n  const parser = new DOMParser();\n  return parser\n    .parseFromString(svgText, \"text/html\")\n    .getElementsByTagName(\"svg\")[0];\n}\n```\n\nHere we use [`fetch()`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to retrieve a specified file from our `svg` directory. We then extract the file's text, which will be a string, and use a [`DOMParser`](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser) to [convert this text to HTML](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString). This will allow us to manipulate it using standard JavaScript DOM functions.\n\nNow we have everything we need to write our SVG construction function. This function needs to do the following:\n\n1. Get the color and accessory details of a given tokenID.\n2. Fetch SVGs for the ReplBot's head and change its colors per the ReplBot's details.","metadata":{"id":1360}}],["1361",{"pageContent":"1. Get the color and accessory details of a given tokenID.\n2. Fetch SVGs for the ReplBot's head and change its colors per the ReplBot's details.\n3. Fetch SVGs for the ReplBot's accessories and merge them with the ReplBot head.\n\nAdd the code below within your `App` definition at the bottom:\n\n```javascript\n    // SVG handling\n    createReplBotSVG: async function(tokenId) {\n        // get bot details\n        let details = await App.getReplBotDetails(tokenId);\n\n        // get bothead\n        let botSvg = await fetchSvg(\"bothead.svg\");\n\n        // change bot colors\n        botSvg.querySelectorAll('.frame').forEach(f => {\n            f.style.fill = `rgb${details.colors[0]}`;\n        });\n\n        botSvg.querySelectorAll('.visor').forEach(v => {\n            v.style.fill = `rgb${details.colors[1]}`;\n        });\n\n        botSvg.querySelectorAll('.background').forEach(b => {\n            b.style.fill = `rgb${details.colors[2]}`;\n        });\n    },\n```\n\nFirst, we get the ReplBot details and the base ReplBot SVG. We then apply the bot's colors by setting `style.fill` for every instance of each of the relevant classes, using [the CSS `rgb()` function](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb) with the color information from `details`.\n\nNext, we need to get the bot's accessories. Add the following code above this function's closing curly brace (`}`):\n\n```javascript\n// get bot accessories\nlet accessorySvgs = [];\nfor (let i = 0; i < 3; i++) {\n  let filename =\n    details.accessories[i].toLowerCase().replaceAll(\" \", \"-\") + \".svg\";\n\n  let svg = await fetchSvg(filename);\n  accessorySvgs.push(svg);\n}\n```\n\nHere we fetch each of the bot's three accessories and add them to a list. We get the filename for the accessory by transforming the string we received from `getReplBotDetails()`. So, for example, \"Bunny Ears\" becomes \"bunny-ears.svg\".\n\nOnce we've got our accessory SVGs, we can merge them into the base ReplBot SVG. Enter the following code just below the `for` loop above:\n\n```javascript\n// merge SVGs","metadata":{"id":1361}}],["1362",{"pageContent":"Once we've got our accessory SVGs, we can merge them into the base ReplBot SVG. Enter the following code just below the `for` loop above:\n\n```javascript\n// merge SVGs\naccessorySvgs.forEach((a) => {\n  Array.from(a.getElementsByTagName(\"style\")).forEach((e) => {\n    botSvg.getElementsByTagName(\"defs\")[0].appendChild(e);\n  });\n\n  Array.from(a.getElementsByTagName(\"path\")).forEach((e) => {\n    botSvg.appendChild(e);\n  });\n\n  Array.from(a.getElementsByTagName(\"polyline\")).forEach((e) => {\n    botSvg.appendChild(e);\n  });\n});\n```\n\nWe merge SVGs by appending all of `<style>` elements in our accessory SVG to the `<defs>` element in our base ReplBot SVG, and all of the accessory's `<path>` and `<polyline>` elements to the SVG's main body. This is sufficient for the collection of SVGs we're using for this tutorial, but other SVGs may have additional elements that you'll need to account for.\n\nFinally, we'll add the following code that uses [`insertAdjacentHTML()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML) to add details about the ReplBot's ID and generation before returning the final `botSvg` in all its glory. Add the following code just below the code above:\n\n```javascript\n// add ID and generation details\nbotSvg.insertAdjacentHTML(\n  \"beforeend\",\n  `<text x=\"5\" y=\"20\">ID: ${tokenId}</text>`\n);\nbotSvg.insertAdjacentHTML(\n  \"beforeend\",\n  `<text x=\"5\" y=\"40\">Gen: ${details.parentage[0]}</text>`\n);\n\nreturn botSvg;\n```\n\n## Connecting the UI\n\nWe've written all of our app functionality – now we just need to make it usable by binding our HTML interface to our JavaScript functions. Add the following function definition to `App.js`, just below the definition of `switchToReplitTestnet`:\n\n```javascript\n    // interface\n    bindEvents: function () {\n        // mint\n        const mintButton = document.getElementById(\"mint\");\n        mintButton.addEventListener(\"click\", () => {\n            App.mintReplBot();\n        });\n\n        // breed\n        const breedForm = document.getElementById(\"breed\");","metadata":{"id":1362}}],["1363",{"pageContent":"mintButton.addEventListener(\"click\", () => {\n            App.mintReplBot();\n        });\n\n        // breed\n        const breedForm = document.getElementById(\"breed\");\n        breedForm.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n            App.breedReplBot(breedForm.elements['parentOneId'].value, breedForm.elements['parentTwoId'].value);\n        });\n    },\n```\n\nThis code will trigger `mintReplBot()` when the mint button is pressed, and `breedReplBot()` when the ReplBot breeding form is submitted. We'll invoke this function in `init`, by adding the following:\n\n```javascript\n    init: async function() {\n\n        if (window.ethereum) {\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            window.web3 = new Web3(window.ethereum);\n\n            // Switch networks\n            App.switchToReplitTestnet();\n\n            // Interface with contract\n            App.replbotContract = new web3.eth.Contract(replbotABI, App.replbotAddress);\n        }\n\n        App.bindEvents(); // <-- NEW LINE\n    },\n```\n\nNext, let's create a function to display our NFT collection. This function will retrieve a list of the current user's NFTs and create an SVG for each of them. Add the following code below the definition of `bindEvents`:\n\n```javascript\n    populateCollection: async function() {\n        // get bot IDs\n        let botIds = await App.getMyReplBotIds();\n\n        // get container\n        let botContainer = document.getElementById(\"bots\");\n        botContainer.innerHTML = \"\"; // clear current content\n\n        // create bot SVGs\n        botIds.forEach((id) => {\n            App.createReplBotSVG(id).then(result => {\n                botContainer.appendChild(result);\n            });\n        });\n    },\n```\n\nWe'll want to call this function periodically to keep our ReplBot collection up to date. We can use JavaScript's `setInterval` for this. Add a new line to the definition of `bindEvents` as below:\n\n```javascript\n    // interface\n    bindEvents: function () {\n        // mint","metadata":{"id":1363}}],["1364",{"pageContent":"```javascript\n    // interface\n    bindEvents: function () {\n        // mint\n        const mintButton = document.getElementById(\"mint\");\n        mintButton.addEventListener(\"click\", () => {\n            App.mintReplBot();\n        });\n\n        // breed\n        const breedForm = document.getElementById(\"breed\");\n        breedForm.addEventListener(\"submit\", (event) => {\n            event.preventDefault();\n            App.breedReplBot(breedForm.elements['parentOneId'].value, breedForm.elements['parentTwoId'].value);\n        });\n\n        // show collection\n        setInterval(App.populateCollection, 5000); // <-- new line\n    },\n```\n\nThis will work, but it will recreate all of our SVGs once per second, which will usually be more than we need, and will cause the page to flash constantly. Let's add some caching to prevent this. First, we'll define a new attribute near the top of our `App` definition:\n\n```javascript\nApp = {\n  replbotAddress: \"YOUR-CONTRACT-ADDRESS\",\n  replbotContract: null,\n  ownedReplBots: [], // <-- NEW\n  ....\n}\n```\n\nThis attribute will store our list of ReplBot IDs. Every time we call `populateCollection`, we'll first check whether the list we get from the contract matches our local list. If it does, we'll skip the rest of the function, otherwise, we'll update the cache and continue. Add the following new code to the `populateCollection` function:\n\n```javascript\n    populateCollection: async function() {\n        // get bot IDs\n        let botIds = await App.getMyReplBotIds();\n\n        // === NEW CODE BELOW ===\n        // check cache\n        if (compareArrays(botIds, App.ownedReplBots)) {\n            return; // array is unchanged\n        }\n        else {\n            App.ownedReplBots = botIds.slice(); // update cache and continue\n        }\n        // === NEW CODE ABOVE ===\n\n        // get container\n        let botContainer = document.getElementById(\"bots\");\n        botContainer.innerHTML = \"\";\n\n        // create bot SVGs\n        botIds.forEach((id) => {\n            App.createReplBotSVG(id).then(result => {","metadata":{"id":1364}}],["1365",{"pageContent":"botContainer.innerHTML = \"\";\n\n        // create bot SVGs\n        botIds.forEach((id) => {\n            App.createReplBotSVG(id).then(result => {\n                botContainer.appendChild(result);\n            });\n        });\n    },\n```\n\nNote the use of [`slice()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) – this will ensure that `ownedReplBots` contains a copy of `botIds` rather than a reference to it.\n\nJavaScript does not have a built-in `compareArrays()` function, so we'll need to define one. Navigate to the top of `frontend/app.js` and add the following code below the definition of `fetchSvg()`:\n\n```javascript\nfunction compareArrays(array1, array2) {\n  // arrays must be same length\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  // arrays must be sorted\n  let array1Sorted = array1.slice().sort();\n  let array2Sorted = array2.slice().sort();\n\n  // all values must match\n  for (let i = 0; i < array1.length; i++) {\n    if (array1Sorted[i] !== array2Sorted[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n```\n\nThis function checks that our two arrays are the same length, sorts them and then compares each value. If a single value is different, it returns false, otherwise, it returns true.\n\n## Running our application\n\nTo run our frontend, we'll create a simple [Node.js Express](https://expressjs.com/) application. Create a file named `frontend.js` at the home directory of your repl and add the following code to it:\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\nconst PORT = 433;\n\napp.use(express.static(\"frontend\"));\n\napp.listen(PORT, () => console.log(`Server listening on port: ${PORT}`));\n```\n\nThis script will serve the files we created in `frontend`. To make it execute when we run our repl, make sure that config files are showing and open `.replit`.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/43-robot-nft-p2/show-config.mp4\">\n</video>","metadata":{"id":1365}}],["1366",{"pageContent":"<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/43-robot-nft-p2/show-config.mp4\">\n</video>\n\nIn `.replit`, replace the line `run = \"node tools\"` with the following:\n\n```\nrun = \"node frontend.js\"\n```\n\nRun your repl. You should now see your frontend. If you've minted any ReplBot NFTs already, those will also show up.\n\n![Completed app](https://docimg.replit.com/images/tutorials/43-robot-nft-p2/final-dapp.png)\n\n## Where next?\n\nIn this two-part tutorial, we've built a fully functional decentralised application, but there's a lot more you can do to improve it. Some suggestions:\n\n- Implement an interface for viewing ReplBot NFTs owned by other users.\n- Implement an interface for transferring ReplBot tokens to other addresses.\n- Alter the breeding form to show drop-down menus of the user's ReplBots.\n- Use the [contract event log](https://consensys.net/blog/developers/guide-to-events-and-logs-in-ethereum-smart-contracts/) to track ReplBot creations and births.\n- Change the dapp's stylesheet.\n- Implement frontend components for any of the new functions you added to the contract after completing part one!\n\nYour can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/ReplBotsPart2?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1366}}],["1367",{"pageContent":"---\ntitle: \"Robot NFT Part 1: on Ethereum blockchain\"\n---\n\n# Build a robot NFT on the Ethereum blockchain with Solidity and Replit (part 1)\n\nNon-fungible tokens (NFTs) have been a source of much news and speculation over the past few years. Their most widely known use case has been the sale of digital art assets, commonly used as profile pictures. The most famous examples are [CryptoPunks](https://www.larvalabs.com/cryptopunks) and [Bored Apes](https://boredapeyachtclub.com/#/).\n\nWhile many NFTs are collections of pre-generated artwork, some incorporate a dynamic generative aspect, in which the art is created on the fly as individual tokens are minted. This is very feasible for profile picture NFTs, which often consist of a single base image in a variety of colors and with different features and accessories. In some cases, such as [CryptoKitties](https://www.cryptokitties.co/), new child tokens can be created by \"breeding\" existing tokens, giving the child token characteristics of both parents.\n\nIn this two-part tutorial, we'll create a simple generative art NFT, ReplBots. The first part of the tutorial will focus on the NFT's Ethereum smart contract, and the second part will focus on building the web frontend, or dApp. In this tutorial, you'll:\n\n- Learn how to create a generative art NFT on the Ethereum blockchain.\n- Learn important smart contract development concepts, such as randomness.\n- Learn how to interact with the blockchain from frontend JavaScript code.\n\n## Getting started\n\nWe need two things to get started with this project: a Solidity repl and a browser wallet.\n\n### Solidity repl\n\nSign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Solidity starter repl.\n\n![Creating a new Repl](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/solidity-repl.png)","metadata":{"id":1367}}],["1368",{"pageContent":"![Creating a new Repl](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/solidity-repl.png)\n\nThe Solidity starter repl works a little differently from other repls you may have used in the past. Rather than running our repl every time we want to test out a new piece of code, we can run our repl once, to start it up, and it will automatically reload when changes are made to our Solidity code in `contract.sol`.\n\nThe Solidity starter repl comes with a friendly web interface, built using the [web3 Ethereum JavaScript API](https://web3js.readthedocs.io/en/v1.5.2/), which we will use to deploy and interact with our contracts. We will deploy to Replit Testnet, a custom version of the Ethereum blockchain managed by Replit and optimised for testing.\n\n### Browser wallet\n\nWe will need a browser-based web3 wallet to interact with the Replit Testnet and our deployed contracts. [MetaMask](https://metamask.io) is a popular and feature-rich wallet implemented as a WebExtension. You can install it from MetaMask's [download page](https://metamask.io/download/). Make sure you're using a supported browser – either Chrome, Firefox, Brave, or Edge.\n\nOnce you've installed MetaMask, follow the prompts to create a wallet and sign in. MetaMask will give you a 12-word _secret recovery phrase_ – this is your wallet's private key, and must be kept safe and secret. If you lose this phrase, you will not be able to access your wallet. If someone else finds it, they will.\n\nIf you're already using MetaMask, we recommend creating a new account for testing with Replit. You can do this from the account menu, which appears when you click on the account avatar in the top right corner of the MetaMask interface.\n\n![Create new metamask account](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/createaccount.png)\n\n## Introduction to smart contract development","metadata":{"id":1368}}],["1369",{"pageContent":"![Create new metamask account](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/createaccount.png)\n\n## Introduction to smart contract development\n\nFeel free to skip this section if you've written Solidity contracts before or completed [our escrow tutorial](/tutorials/web3/escrow-contract-with-solidity).\n\nNow that we've got our repl and wallet set up, we can start developing. We will be writing contracts, which are the basic building blocks of Ethereum programs. An individual contract can have state variables and functions and can inherit from multiple other contracts. Contracts in Solidity are equivalent to classes in a language like Python or Java.\n\nContracts on Ethereum and Ethereum-based networks (such as the Replit Testnet and Binance Chain) are compiled to bytecode which runs on the [Ethereum Virtual Machine](https://ethereum.org/en/developers/docs/evm/) (EVM). This is similar to how Java code compiles to bytecode for the JVM.\n\nA list of opcodes for EVM is provided [here](https://ethervm.io/). Many of the opcodes dealing with arithmetic and logical operations should be familiar if you've worked with any kind of assembly before. The EVM also has opcodes for blockchain-specific operations, such as getting information about the current block or chain.\n\nAn additional consideration, unique to blockchain development, is that each opcode has an associated price ([listed here](https://docs.google.com/spreadsheets/d/1n6mRqkBz3iWcOlRem_mO09GtSKEKrAsfO7Frgx18pNU/edit#gid=0)). Users of smart contracts pay a fee (known as [gas](https://www.investopedia.com/terms/g/gas-ethereum.asp)) to invoke state-changing functions. This fee is determined by the opcodes used, and so it is in the interest of developers to keep their code as simple as possible.\n\nSolidity, which we will be using below, is the most popular language for developing smart contracts on Ethereum. Alternatives such as [Vyper](https://vyper.readthedocs.io/en/stable/) exist but are not as widely used.\n\n## NFT design","metadata":{"id":1369}}],["1370",{"pageContent":"## NFT design\n\nOur ReplBot NFT will consist of a base robot and three accessories. The base robot looks like this:\n\n![Base robot](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/bothead-01.svg)\n\nEach NFT will have three different colors for its frame, visor, and background. Each NFT will also have three different accessories: headgear (a hat or wig), eargear (animal ears or headphones), and facegear (glasses or masks). Some examples:\n\n![NFT 1](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/replbot-nft-1.svg)\n\n![NFT 2](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/replbot-nft-2.svg)\n\nWhich colors and accessories each NFT has will be randomly determined at creation time.\n\n## Contract code scaffold\n\nLet's start on our NFT contract code. Open `contract.sol`, delete the file's contents, and add the following skeleton:\n\n```solidity\n// // SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract ReplBots is ERC721Enumerable {\n\n    uint256 public tokenCounter;\n\n    constructor() ERC721(\"ReplBots\", \"RBNFT\") {\n    }\n\n    function mint(address recipient) public returns (uint256) {\n        uint tokenId = tokenCounter;\n        tokenCounter++;\n\n        _safeMint(recipient, tokenId);\n        return tokenId;\n    }\n}\n```\n\nThe first line of our contract is the [license identifier](https://docs.soliditylang.org/en/v0.6.8/layout-of-source-files.html#spdx-license-identifier). Smart contracts are usually open-source, and reuse of other projects' code is common in DeFi, so it's a good idea to include a license that indicates how you would like others to use (or not use) your code. Supported licenses are [listed here](https://spdx.org/licenses/).","metadata":{"id":1370}}],["1371",{"pageContent":"In the next line, we define the version of Solidity we're using (in this case, any version newer than [0.8.13](https://docs.soliditylang.org/en/v0.8.13/) up to 0.9.0). Solidity is an evolving language and often introduces breaking changes, so our code may not compile under older or newer versions of the language.\n\nFollowing the pragma statement, we import some contracts from the OpenZeppelin contract library. This library includes inheritable base contracts for a wide variety of common smart contract development needs, including base implementations of Ethereum token standards.\n\nThe Ethereum token standard for NFTs is [ERC-721](https://ethereum.org/en/developers/docs/standards/tokens/erc-721/). Rather than implementing all of the functionality in this specification ourselves, we can import and use OpenZeppelin's version. Note that while OpenZeppelin has a [base `ERC721` contract](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol), we will use the [`ERC721Enumerable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol) extension/child contract, which, in addition to all the standard ERC-721 functionality, will allow us to list which NFTs belong to which owners. This functionality is vital for our front end.\n\nWe also use OpenZeppelin's [`Strings`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol) library, which provides some useful functions for working with strings.\n\nOur contract definition indicates that we will inherit from `ERC721Enumerable`:\n\n```solidity\ncontract ReplBots is ERC721Enumerable {\n```\n\nIn the contract body, we define a `tokenCounter` state variable. This will provide us with unique, incrementing IDs for tokens as they are minted. Solidity automatically initializes all variables to 0, so we don't need to do so explicitly.","metadata":{"id":1371}}],["1372",{"pageContent":"Note the use of [`uint256`](https://docs.soliditylang.org/en/v0.8.2/types.html#integers) as the type for these values: Because most of the values we deal with in Solidity programs are monetary, we use unsigned integers to avoid storing negative numbers. In versions of Solidity before 0.8.0, this sometimes led to dangerous [overflows](https://medium.com/haloblock/unit-underflows-and-overflows-ethereum-solidity-vulnerability-39a39355c422), but [overflow protection is now built into the language](https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html).\n\nNext, we have the `constructor()` method, which calls [a parent constructor](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L44) to define our NFT's name and symbol/stock ticker.\n\n```solidity\n    constructor() ERC721(\"ReplBots\", \"RBNFT\") {\n    }\n```\n\nWe then define a `mint` function, so that we can create NFTs.\n\n```solidity\n    function mint(address recipient) public returns (uint256) {\n        uint tokenId = tokenCounter;\n        tokenCounter++;\n\n        _safeMint(recipient, tokenId);\n        return tokenId;\n    }\n```\n\nFor now, all this does is increment `tokenCounter`, create a new token using [`ERC721._safeMint`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L248), and return the numeric ID of the minted NFT. Using `_safeMint` instead of `_mint` will prevent us from minting tokens to a recipient that does not have an implemented method for receiving them. This will prevent our tokens from getting stuck in contract addresses and becoming unusable.\n\nThe `mint()` function is a `public` function, which means it can be called by both external users and by other functions in this contract, or any contracts that inherit from it. Solidity provides granular function and variable visibility options, which are [explained here](https://bitsofco.de/solidity-function-visibility-explained/).\n\n## NFT data structures","metadata":{"id":1372}}],["1373",{"pageContent":"## NFT data structures\n\nLet's fill out our code skeleton, starting with the data structures we'll need to store information about each NFT we mint. As per our design, each NFT will have three accessories and three colors. We can represent the accessories as strings and the colors as RGB values.\n\nWe'll start by defining a string array for each type of accessory. Add the following code above the `constructor` definition:\n\n```solidity\n    string[] private headgear = [\n        \"Cowboy Hat\",\n        \"Fro\",\n        \"Baseball Cap\",\n        \"Viking Helmet\"\n    ];\n\n    string[] private eargear = [\n        \"Bunny Ears\",\n        \"Headphones\"\n    ];\n\n    string[] private facegear = [\n        \"Sunglasses\",\n        \"Moustache\",\n        \"Nose\",\n        \"DOOM Mask\"\n    ];\n```\n\nFeel free to draw and add other accessories to these lists.\n\nNext, we'll create a [struct](https://docs.soliditylang.org/en/v0.8.10/types.html#structs) for defining colors. Add this code below your array definitions:\n\n```solidity\n    struct Color {\n        uint8 red;\n        uint8 green;\n        uint8 blue;\n    }\n```\n\nEach color will have a red, green, and blue component, represented as an 8-bit unsigned integer. Most unsigned integers we work with in contracts are 256-bit, to the point that Solidity provides the alias `uint` for `uint256`. However, it is good practice to use smaller values where possible, due to gas costs – this is known as [tight variable packing](https://fravoll.github.io/solidity-patterns/tight_variable_packing.html). An 8-bit unsigned integer can contain a value from 0 to 255, which is precisely the range we need for storing standard RGB values.\n\nNext, we'll create a struct for the ReplBot itself, consisting of our three colors and three accessories. Add this code below the previous struct definition:\n\n```solidity\n    struct ReplBot {\n        Color frame;\n        Color visor;\n        Color background;\n        uint8 head;\n        uint8 ears;\n        uint8 face;\n    }\n```","metadata":{"id":1373}}],["1374",{"pageContent":"```solidity\n    struct ReplBot {\n        Color frame;\n        Color visor;\n        Color background;\n        uint8 head;\n        uint8 ears;\n        uint8 face;\n    }\n```\n\nTo save space, we'll store our accessory values as indexes in the arrays we defined above. `uint8` allows us to define a maximum of 255 accessories per type, which is more than enough.\n\nFinally, we'll define a [mapping type](https://docs.soliditylang.org/en/v0.8.2/types.html#mapping-types) that will allow us to associate numeric token IDs with ReplBot structs. Add this line below your last struct definition:\n\n```solidity\n    mapping (uint => ReplBot) private replbots;\n```\n\n## Minting NFTs\n\nNow that we have our data structures in place, we can return to our `mint` function and expand it. Replace your `mint()` function's body with the following code:\n\n```solidity\n    function mint(address recipient) public returns (uint256) {\n        // Get ID and increment counter\n        uint tokenId = tokenCounter;\n        tokenCounter++;\n\n        // Determine colors\n        Color memory frameCol = Color(\n            uint8(_random(tokenId, \"QWERT\") % 255),\n            uint8(_random(tokenId, \"YUIOP\") % 255),\n            uint8(_random(tokenId, \"ASDFG\") % 255));\n\n        Color memory visorCol = Color(\n            uint8(_random(tokenId, \"HJKL;\") % 255),\n            uint8(_random(tokenId, \"ZXCVB\") % 255),\n            uint8(_random(tokenId, \"BNM,.\") % 255));\n\n        Color memory backgroundCol = Color(\n            uint8(_random(tokenId, \"12345\") % 255),\n            uint8(_random(tokenId, \"67890\") % 255),\n            uint8(_random(tokenId, \"[]{}'\") % 255));\n\n        // Determine accessories\n        uint8 headIdx = uint8(_random(tokenId, \"qwert\") % headgear.length);\n        uint8 earIdx = uint8(_random(tokenId, \"yuiop\") % eargear.length);\n        uint8 faceIdx = uint8(_random(tokenId, \"asdfg\") % facegear.length);\n\n        // Create bot\n        replbots[tokenId] = ReplBot(frameCol, visorCol, backgroundCol, headIdx, earIdx, faceIdx);\n\n        // Mint token","metadata":{"id":1374}}],["1375",{"pageContent":"// Create bot\n        replbots[tokenId] = ReplBot(frameCol, visorCol, backgroundCol, headIdx, earIdx, faceIdx);\n\n        // Mint token\n        _safeMint(recipient, tokenId);\n        return tokenId;\n    }\n```\n\nThe bulk of this code consists of retrieving random numbers and using the [modulo operator](https://en.wikipedia.org/wiki/Modulo_operation) to convert them into a number in the range we need – for colors, this will be a number between 0 and 255, and for accessories, this will be a valid index in the relevant accessory array.\n\nWhen we define our `Color` structs, we specify the [data location](https://docs.soliditylang.org/en/v0.8.13/types.html?#data-location) `memory`. The data location must be specified for all complex data types: arrays, structs, and strings. For variables that are local to a function, `memory` is usually correct.\n\nOnce that's done, we create the ReplBot struct, assign it to our token ID through the mapping, and then mint the token.\n\nHowever, if you try to compile this code, you'll notice that `_random()` is not defined. Unlike many traditional languages, Solidity has no native way of generating [pseudorandom numbers](https://en.wikipedia.org/wiki/Pseudorandomness). So we'll need to define one ourselves.","metadata":{"id":1375}}],["1376",{"pageContent":"[Randomness in Ethereum contracts](https://fravoll.github.io/solidity-patterns/randomness.html) is a difficult thing to get right, and one that can be dangerous if done wrong, depending on what it's used for. If you've delved into randomness in other languages, you'll know that the random numbers we use in programming are usually only pseudorandom, originating from a [predetermined seed](https://en.wikipedia.org/wiki/Random_seed), or based on the time of execution. This is okay when we're generating a Minecraft world, but presents problems for, say, a blockchain-based lottery. Because Ethereum is a transparent and distributed network, we have no way to hide a seed, and values like the current time can be [manipulated by miners](https://cryptomarketpool.com/block-timestamp-manipulation-attack/) looking to profit.\n\nThe only foolproof way to generate random numbers at the moment is to use a trusted external source of randomness, such as [Chainlink's VRF oracle](https://docs.chain.link/docs/chainlink-vrf/) (an [oracle](https://ethereum.org/en/developers/docs/oracles/) is a data feed built for use by smart contracts). However, as we're building on the Replit Testnet, we won't have access to such an oracle, so we'll need to settle for the best pseudorandomness we can get. If we were building a lottery contract, this would be a problem, but for this project, manipulation can only get you a slightly different-looking ReplBot.\n\nOur `_random()` function should be inserted below the `mint()` function. It looks like this:\n\n```solidity\n    function _random(uint tokenId, string memory input) internal view returns (uint256) {\n        bytes32 blckhash = blockhash(block.number - 1);\n        return uint256(keccak256(abi.encodePacked(block.difficulty, blckhash, tokenId, abi.encodePacked(input))));\n    }\n```","metadata":{"id":1376}}],["1377",{"pageContent":"bytes32 blckhash = blockhash(block.number - 1);\n        return uint256(keccak256(abi.encodePacked(block.difficulty, blckhash, tokenId, abi.encodePacked(input))));\n    }\n```\n\nThis is a [`view` function](https://docs.soliditylang.org/en/v0.8.2/contracts.html#view-functions) because it does not change state. In the first line, we're getting the [blockhash](https://docs.soliditylang.org/en/v0.8.13/units-and-global-variables.html#block-and-transaction-properties) of the last block to be mined. In the second line, we use [`abi.encodePacked()`](https://docs.soliditylang.org/en/v0.8.11/abi-spec.html#non-standard-packed-mode) to concatenate the following:\n\n- The blockhash we previously retrieved.\n- The difficulty of the current block.\n- The ID of the token we're minting.\n- The `input` string we passed in when calling `_random()`.\n\nAll but the last of these values will be the same for every invocation of `_random()` in an individual `mint()` call. This is why we've specified different strings for each one.\n\nWe then hash our big chunk of data using [`keccak256()`](https://docs.soliditylang.org/en/v0.8.13/units-and-global-variables.html?#mathematical-and-cryptographic-functions). A good [hash function](https://en.wikipedia.org/wiki/Hash_function) will return very different outputs given similar inputs, so this ensures that every call to `_random()` will return a sufficiently distinct result, even when most of the inputs are the same.\n\nFinally, we convert this hash into an unsigned integer, to be returned as our final \"random\" number.\n\n## Viewing token data","metadata":{"id":1377}}],["1378",{"pageContent":"Finally, we convert this hash into an unsigned integer, to be returned as our final \"random\" number.\n\n## Viewing token data\n\nNow that we can generate tokens with interesting-looking ReplBots, we need a way of retrieving information about them, so that we'll be able to display them on the web3 frontend we'll build in Part 2 of this tutorial. To this end, we'll write two functions: `botAccessories` and `botColors`. These will be externally callable view functions that will take the token ID and return three strings, detailing accessories and colors, respectively. As external calls to view functions are free, we don't have to worry too much about gas costs in these functions.\n\nEnter the following code between the definitions of `mint()` and `_random()`:\n\n```solidity\n    function botAccessories(uint256 tokenId) public view returns (string memory, string memory, string memory) {\n        require(_exists(tokenId), \"ReplBots: Query for nonexistent token\");\n\n        ReplBot memory bot = replbots[tokenId];\n\n        return (headgear[bot.head], eargear[bot.ears], facegear[bot.face]);\n    }\n```\n\nOur function body starts with a [require statement](https://docs.soliditylang.org/en/v0.4.24/control-structures.html#error-handling-assert-require-revert-and-exceptions). This is an error-handling function in Solidity: If the condition in the first argument is not met, the current transaction will revert (undoing all previous actions) and the error message in the second argument will be displayed. In this instance, we're using it to prevent the details of unminted tokens from being queried.\n\nOnce we've confirmed that `tokenId` is valid, we retrieve its associated `ReplBot` struct. Solidity allows us to [return multiple values from a function](https://docs.soliditylang.org/en/v0.8.13/contracts.html?#returning-multiple-values), which we use to return three different strings.\n\nNow let's create `botColors()`. Add the following code below the definition of `botAccessories()`:\n\n```solidity","metadata":{"id":1378}}],["1379",{"pageContent":"Now let's create `botColors()`. Add the following code below the definition of `botAccessories()`:\n\n```solidity\n    function botColors(uint256 tokenId) public view returns (string memory, string memory, string memory) {\n        require(_exists(tokenId), \"ReplBots: Query for nonexistent token\");\n\n        ReplBot memory bot = replbots[tokenId];\n\n        return (_colorToString(bot.frame),\n               _colorToString(bot.visor),\n               _colorToString(bot.background));\n    }\n```\n\nThis function is quite similar to `botAccessories()`, but as our colors are structs rather than strings, we will need to define a new function, `_colorToString()` to convert them. Let's do that now.\n\nAdd the following code below the definition of `botColors()`:\n\n```solidity\n    function _colorToString(Color memory color) internal pure returns (string memory) {\n        string[7] memory parts;\n\n        parts = [\"(\",\n                 color.red.toString(),\n                 \",\",\n                 color.blue.toString(),\n                 \",\",\n                 color.green.toString(),\n                 \")\"];\n\n        return string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]));\n    }\n```\n\nWhile Solidity does not currently have a string concatenation function, we can use `abi.encodePacked` on an array of strings to achieve the same result, similar to what we did in `_random()`. Solidity also doesn't have any syntactic sugar for expanding/splatting arrays into function arguments, so we have to specify each element individually.\n\nBut wait! Where does `.toString()` come from? If you try to compile this contract now, you'll find that this method is undefined.\n\nRather than being a Solidity built-in, this comes from the OpenZeppelin Strings library that we imported at the beginning of this tutorial. To use this library, we need to add the following line to our contract definition, right below `contract ReplBots is ERC721Enumerable { `:\n\n```solidity\n    using Strings for uint8;\n```","metadata":{"id":1379}}],["1380",{"pageContent":"```solidity\n    using Strings for uint8;\n```\n\nSolidity's [`using Library for type`](https://docs.soliditylang.org/en/v0.8.13/contracts.html?#using-for) directive attaches all functions in the specified library to the specified type. When a library function is called on an object of that type, it will receive that object as its first parameter.\n\n## Testing our contract\n\nNow that we've implemented our NFT's core functionality, it's time to deploy to the Replit Testnet and test it out. We'll use our repl's web interface to do this.\n\nFirst, run your repl. Once all of the dependencies are installed, you should see the Replit Ethereum web interface in your repl's browser. It looks like this:\n\n![REPL Ethereum web interface](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/repl-eth-web.png)\n\nConnect your MetaMask wallet to the web interface and switch to the Replit Testnet. Then click the link to get 1 ETH for testing. Wait until 1 ETH shows up in your wallet balance on the top right of the page.\n\n![Switching to test](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/switch-to-test.png)\n![Getting one Ether](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/get-one.png)\n\nNow you can deploy your contracts. Select \"ReplBots\" from the drop-down box and click \"Deploy\". Approve the MetaMask pop-up that appears.\n\n![Deploy the contract](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/deploy.png)\n\n![Confirm deploy](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/confirmdeploy.png)\n\nOnce this contract has been deployed, it will show up as an expandable box below the drop-down box. Expand it and take a look at all the different functions available.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/expand.mp4\">\n</video>","metadata":{"id":1380}}],["1381",{"pageContent":"<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/expand.mp4\">\n</video>\n\nMint your first NFT by navigating to the `mint` function. Click on your wallet address in the top right corner of the page to copy it, and then paste it into the `recipient` field. Then run the function and approve the MetaMask pop-up that appears.\n\n<video controls width=\"80%\" autoplay loop src=\"https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/mint.mp4\" type=\"video/mp4\">\n</video>\n\nAfter a few seconds, you should see a pop-up indicating that your transaction has gone through. Congratulations, you're the proud owner of a ReplBot NFT! Check out its colors and accessories by entering ID 0 into `botColors` and `botAccessories`.\n\nIf you mint again, you should receive a ReplBot with ID 1 and a different set of colors and accessories.\n\n![Bot colors](https://docimg.replit.com/images/tutorials/42-robot-nft-ethereum/botcolors.png)\n\n## Breeding bots\n\nWe can now mint ReplBots with random characteristics, which fulfills the specification we laid out at the start of this tutorial. But with a bit of additional code, we can introduce a second way to create ReplBots, breeding.\n\nFor our `breed` function, we'll accept two separate ReplBots owned by the caller and create a new one with the following characteristics:\n\n- Its colors will be an equal mix of both parents.\n- Its headgear will come from the first parent.\n- Its eargear will come from the second parent.\n- Its facegear will be randomized.\n\nTo keep track of which bots are minted and which bots are bred, we'll add a few additional fields to our `ReplBot` struct. Go to the top of your contract and edit the struct to resemble the following:\n\n```solidity\n    struct ReplBot {\n        Color frame;\n        Color visor;\n        Color background;\n        uint8 head;\n        uint8 ears;\n        uint8 face;\n        uint256 generation; // new field\n        uint256 parentOneId; // new field","metadata":{"id":1381}}],["1382",{"pageContent":"Color visor;\n        Color background;\n        uint8 head;\n        uint8 ears;\n        uint8 face;\n        uint256 generation; // new field\n        uint256 parentOneId; // new field\n        uint256 parentTwoId; // new field\n    }\n```\n\nWe'll store our bot's generation and both parent IDs. Bots created through `mint` will have 0 for all three of these values. To avoid making it look as though all minted bots have token 0 for both parents, we'll start the tokenCounter from 1. Edit its declaration (near the top of your contract) as follows:\n\n```solidity\n    uint256 public tokenCounter = 1; // no more token 0\n```\n\nThen we need to add three zeros to the creation of the `ReplBot` struct in `mint()`. Find and edit the line below:\n\n```solidity\n        // Create bot\n        replbots[tokenId] = ReplBot(frameCol, visorCol, backgroundCol, headIdx, earIdx, faceIdx, 0, 0, 0); // <-- ZEROS ADDED\n\n        // Mint token\n        _safeMint(recipient, tokenId);\n        return tokenId;\n```\n\nNow we can start on our `breed()` function. Add the following code below the definition of `mint()`:\n\n```solidity\n    function breed(uint256 parentOneId, uint256 parentTwoId, address recipient) public returns (uint256) {\n        // Require two parents\n        require(parentOneId != parentTwoId, \"ReplBots: Parents must be separate bots\");\n        // Check ownership\n        require(ownerOf(parentOneId) == msg.sender, \"ReplBots: You don't own parent 1\");\n        require(ownerOf(parentTwoId) == msg.sender, \"ReplBots: You don't own parent 2\");\n\n        ReplBot storage parentOne = replbots[parentOneId];\n        ReplBot storage parentTwo = replbots[parentTwoId];\n\n        // Check age\n        require(parentOne.generation == parentTwo.generation, \"ReplBots: Parents must belong to the same generation\");\n    }\n```","metadata":{"id":1382}}],["1383",{"pageContent":"// Check age\n        require(parentOne.generation == parentTwo.generation, \"ReplBots: Parents must belong to the same generation\");\n    }\n```\n\nWe start our function off with some checks: The two parent IDs must be different, they must be owned by the function caller ([`msg.sender`](https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties)), and they must be in the same generation.\n\nNext comes our bot creation code, which will be similar to the code in our `mint()` function. Add the following code below the final `require()` statement in the `breed` function above:\n\n```solidity\n        // Increment token counter\n        uint tokenId = tokenCounter;\n        tokenCounter++;\n\n        // Interpolate colors\n        Color memory frameCol = Color(_meanOfTwo(parentOne.frame.red, parentTwo.frame.red),\n                                      _meanOfTwo(parentOne.frame.green, parentTwo.frame.green),\n                                      _meanOfTwo(parentOne.frame.blue, parentTwo.frame.blue));\n\n        Color memory visorCol = Color(_meanOfTwo(parentOne.visor.red, parentTwo.visor.red),\n                                      _meanOfTwo(parentOne.visor.green, parentTwo.visor.green),\n                                      _meanOfTwo(parentOne.visor.blue, parentTwo.visor.blue));\n\n        Color memory backgroundCol = Color(_meanOfTwo(parentOne.background.red, parentTwo.background.red),\n                                      _meanOfTwo(parentOne.background.green, parentTwo.background.green),\n                                      _meanOfTwo(parentOne.background.blue, parentTwo.background.blue));\n\n        // Choose accessories\n        uint8 headIdx = parentOne.head;\n        uint8 earIdx = parentTwo.ears;\n        uint8 faceIdx = uint8(_random(tokenId, \"asdfg\") % facegear.length);\n\n        // Create bot\n        replbots[tokenId] = ReplBot(frameCol, visorCol, backgroundCol, headIdx, earIdx, faceIdx, parentOne.generation + 1, parentOneId, parentTwoId);\n\n        // Mint token","metadata":{"id":1383}}],["1384",{"pageContent":"// Create bot\n        replbots[tokenId] = ReplBot(frameCol, visorCol, backgroundCol, headIdx, earIdx, faceIdx, parentOne.generation + 1, parentOneId, parentTwoId);\n\n        // Mint token\n        _safeMint(recipient, tokenId);\n        return tokenId;\n```\n\nAll of our bot's colors and attributes are generated according to the breeding process we specified above. One last thing we'll need to do is define the `_meanOfTwo()` function we're using to determine the child bot's colors. Add the following code to the bottom of your contract, just below the definition of `_random()`:\n\n```solidity\n    function _meanOfTwo(uint8 first, uint8 second) internal pure returns (uint8) {\n        return uint8((uint16(first) + uint16(second))/2);\n    }\n```\n\nHere we convert first and second into `uint16` values to prevent them from overflowing (which would [cause our function to revert](https://docs.soliditylang.org/en/v0.8.13/control-structures.html?#checked-or-unchecked-arithmetic)), divide the result by two, and return it as a `uint8`.\n\nLastly, we'll need to define a new `view` function to return the generation and parentage of individual tokens. Insert the definition of the following function, `botParentage()`, just below the definition of `botColors()`:\n\n```solidity\n    function botParentage(uint256 tokenId) public view returns (uint, uint, uint) {\n        require(_exists(tokenId), \"ReplBots: Query for nonexistent token\");\n\n        ReplBot memory bot = replbots[tokenId];\n\n        return (bot.generation, bot.parentOneId, bot.parentTwoId);\n    }\n```\n\nCompile and deploy your contract as you did before. Because it's a new contract, you'll need to mint two new ReplBots before you can try out the `breed` function. Do so now, and check that your child bot (ID 2) looks as expected. Then call `botParentage` to check its generation and parents.\n\n## Adding events","metadata":{"id":1384}}],["1385",{"pageContent":"## Adding events\n\nOur contract is now fully functional, but there are a few niceties we can add, in the form of [events](https://docs.soliditylang.org/en/v0.8.2/contracts.html#events). Events provide a user-friendly form of logging on the blockchain and are commonly used by dApps. It's considered best practice to emit events whenever a state change is made, so we should define events for our contract's two state-changing actions, minting and breeding.\n\nEvent definitions are commonly placed at the bottom of contracts. Add the following code just above your contract's final closing brace (`}`):\n\n```solidity\n    event ReplBotCreated(address recipient, uint tokenId);\n    event ReplBotBorn(address recipient, uint tokenId, uint parentOneId, uint parentTwoId, uint generation);\n```\n\nThen insert an event emission near the end of your `mint()` function, as below:\n\n```solidity\n        _safeMint(recipient, tokenId);\n\n        emit ReplBotCreated(recipient, tokenId); // <-- NEW LINE\n\n        return tokenId;\n```\n\nAnd another one near the end of your `breed()` function:\n\n```solidity\n        _safeMint(recipient, tokenId);\n\n        emit ReplBotBorn(recipient, tokenId, parentOneId, parentTwoId, parentOne.generation + 1); // <-- NEW LINE\n\n        return tokenId;\n```\n\n## Next steps\n\nWe're done with our contract code. In the second part of this tutorial, we'll build a dApp frontend for users to mint, view, and breed ReplBot NFTs. If you'd like to spend a bit more time exploring Solidity first, here are some ways you might want to change and expand this contract:\n\n- Add more accessories. You'll need to draw these yourself!\n- Refactor the code to reduce the size of the contract and make individual functions more gas efficient. One quick way to do this would be to change the visibility of the `public` functions to `external`.\n- Tweak the breeding algorithm.\n- Introduce a [siring mechanism](https://medium.com/cryptokitties/siring-your-kitties-for-fun-and-profit-b6c8f0fc3860) that allows users to breed ReplBots they don't own.","metadata":{"id":1385}}],["1386",{"pageContent":"- Introduce a [siring mechanism](https://medium.com/cryptokitties/siring-your-kitties-for-fun-and-profit-b6c8f0fc3860) that allows users to breed ReplBots they don't own.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/ReplBots?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1386}}],["1387",{"pageContent":"---\ntitle: Smart contract oracle with Solidity\n---\n\n# Build a smart contract oracle with Solidity, Node.js, and Replit\n\nOracles are bridges between smart contract protocols running on the blockchain and real-world data feeds. In previous Solidity tutorials, we've designed a [simple Ethereum escrow protocol](/tutorials/web3/escrow-contract-with-solidity) into our smart contracts by building an oracle, as well as how to combine different contract protocols.\n\nBy the end of this tutorial, you will have:\n\n- An understanding of how to use oracles in smart contracts and how oracles work internally.\n- Experience with building a hybrid on-and-off chain system.\n- Experience with composing contract protocols.\n\n## Getting started\n\nWe need two things to get started with this project: a Solidity repl and a browser wallet.\n\n### Solidity repl\n\nSign in to [Replit](https://replit.com) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Solidity starter repl.\n\n![Create Solidity starter REPL](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/solidity-repl.png)\n\nThe Solidity starter repl works a little differently from other repls you may have used in the past. Rather than running our repl every time we want to test out a new piece of code, we can run our repl once, to start it up, and it will automatically reload when changes are made to our Solidity code in `contract.sol`.\n\nThe Solidity starter repl comes with a friendly web interface, built using the [web3 Ethereum JavaScript API](https://web3js.readthedocs.io/en/v1.5.2/), which we will use to deploy and interact with our contracts. We will deploy to Replit Testnet, a custom version of the Ethereum blockchain managed by Replit and optimised for testing.\n\n### Browser wallet","metadata":{"id":1387}}],["1388",{"pageContent":"### Browser wallet\n\nWe will need a browser-based Web3 wallet to interact with the Replit Testnet and our deployed contracts. [MetaMask](https://metamask.io) is a popular and feature-rich wallet implemented as a WebExtension. You can install it from [MetaMask's download page](https://metamask.io/download/). Make sure you're using a supported browser – Chrome, Firefox, Brave, or Edge.\n\nOnce you've installed MetaMask, follow the prompts to create a wallet and sign in. MetaMask will give you a 12-word _secret recovery phrase_ – this is your wallet's private key, and must be kept safe and secret. If you lose this phrase, you will not be able to access your wallet. If someone else finds it, they will.\n\nIf you're already using MetaMask, we recommend creating a new account for testing with Replit. You can do this from the account menu, which appears when you click on the account avatar in the top right corner of the MetaMask interface.\n\n![New testing account in metamask](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/createaccount.png)\n\n## Oracle design\n\nAn oracle is a hybrid system, made up of both contracts and traditional web server code. The contracts provide an interface for other contracts to request and receive data, and the web server code uses events and contract functions to respond to these requests and supply the required data. At a high level, the architecture looks like this:\n\n![Oracle diagram](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/oracle-diagram.svg)\n\nUsers interact with different smart contract protocols, such as decentralized exchanges or NFT markets. These protocols can source data from an oracle smart contract, which receives its data from off-chain data providers (these are usually some form of API).","metadata":{"id":1388}}],["1389",{"pageContent":"In this tutorial, we will be building an oracle for random number generation, using the [RANDOM.ORG API](https://www.random.org/clients/http/api/). If you've completed our [ReplBot NFT tutorial](/tutorials/build-a-robot-nft), you'll know that true randomness is pretty much impossible to come by on the blockchain, and so an oracle is really the only solution for code that requires random numbers.\n\nIn much discussion and documentation of Ethereum oracles, the word \"oracle\" is used interchangeably to refer to three different things:\n\n1. Off-chain data providers\n2. Oracle contracts that bridge data onto the blockchain\n3. Complete solutions made up of 1 and 2\n\nTo avoid confusion, we'll use the following terms throughout this tutorial:\n\n1. Providers\n2. Oracle contracts\n3. Oracles\n\n## Caller contract\n\nWe'll start off by pretending that our oracle has already been built, and develop a contract that will request random numbers from it. This may sound like putting the cart before the horse, but developing this way will give us a clear idea of what we want from the finished product and how it will have to work.\n\nThis contract, which we'll name `Caller`, will be very bare-bones. All it's going to do is allow users to request random numbers and emit those numbers in [events](https://docs.soliditylang.org/en/v0.8.2/contracts.html#events). At the end of this tutorial, you can expand `Caller` to do something more interesting with the numbers.","metadata":{"id":1389}}],["1390",{"pageContent":"We'll design our oracle using Chainlink's [Basic Request Model](https://docs.chain.link/docs/architecture-request-model/) as a basis. As getting data from an oracle requires off-chain interaction, we won't be able to get our random number with a single function call. Instead, we'll implement a function to request a random number, which will be called by the contract's users, and a second function to fulfill a request, which will be called by the oracle contract. The request function will return a request ID that we can use to identify the final result. This is a similar pattern to [callbacks](<https://en.wikipedia.org/wiki/Callback_(computer_programming)>) in JavaScript.\n\nCreate a new directory in your repl called `contracts`. Then create a subdirectory at `contracts/caller`. Inside this subdirectory, create a new file named `Caller.sol`. Enter the following code into your new file:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin-solidity/contracts/access/Ownable.sol\";\nimport \"./IRandOracle.sol\";\n\ncontract Caller is Ownable {\n}\n```\n\nThis `Caller` contract stub imports two dependencies:\n\n- OpenZeppelin's [`Ownable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/access/Ownable.sol), an access control mix-in that allows us to implement functions that only the contract's owner (the address that deploys the contract) will be able to call.\n- A local contract called `IRandOracle`. This is an [interface](https://docs.soliditylang.org/en/v0.8.2/contracts.html#interfaces) that tells this contract how to interact with the oracle contract.\n\nBefore we fill in `Caller`'s logic, let's create that interface. Make a new file in the same directory named `IRandOracle.sol`, and add the following code to it:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IRandOracle {\n    function requestRandomNumber() external returns (uint256);\n}\n```","metadata":{"id":1390}}],["1391",{"pageContent":"```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface IRandOracle {\n    function requestRandomNumber() external returns (uint256);\n}\n```\n\nThat's it! Interfaces don't contain any implementation details, and don't even have to specify every external function in the contract they're referencing. As `Caller` will only call this one oracle contract function, that's the only one we have to specify.\n\nNow let's go back to `Caller.sol` and implement some logic. Add the code below between your contract's opening and closing curly brace:\n\n```solidity\n    IRandOracle private randOracle;\n\n    mapping(uint256=>bool) requests;\n    mapping(uint256=>uint256) results;\n```\n\nWe first create a variable to reference our oracle contract, and then two [mappings](https://docs.soliditylang.org/en/v0.8.2/types.html?#mapping-types):\n\n- `requests`, which will keep track of active request IDs.\n- `results`, which will store the random numbers received for each request ID.\n\nThen we can add some housekeeping functions:\n\n```solidity\n    modifier onlyRandOracle() {\n        require(msg.sender == address(randOracle), \"Unauthorized.\");\n        _;\n    }\n\n    function setRandOracleAddress(address newAddress) external onlyOwner {\n        randOracle = IRandOracle(newAddress);\n\n        emit OracleAddressChanged(newAddress);\n    }\n```\n\nFirst, we define the `onlyRandOracle` [modifier](https://docs.soliditylang.org/en/v0.8.2/contracts.html?#function-modifiers), which we'll use to restrict access to our fulfillment function. It does this by using a [`require`](https://docs.soliditylang.org/en/v0.8.2/control-structures.html#error-handling-assert-require-revert-and-exceptions) statement to throw an error if the function caller's address is not that of the oracle contract. Without that, any user would be able to submit \"random\" numbers of their chosing to fulfill our requests.","metadata":{"id":1391}}],["1392",{"pageContent":"Second, we add an `onlyOwner` function (this is another modifier, defined in OpenZeppelin's `Ownable`) to set the address of the oracle contract we'll be using. As the contract owner, we'll be able to change the oracle address when necessary.\n\nOur code creates an instance of our `IRandOracle` interface with the provided address, and then emits an event to let users know that a change has been made to the contract. Well-written contracts should emit events for configuration changes like this, so that their operations remain transparent to users.\n\nWith our housekeeping done, we can now write `Caller`'s main functions below the definition of `setRandOracleAddress()`. First, `getRandomNumber()`:\n\n```solidity\n    function getRandomNumber() external {\n        require(randOracle != IRandOracle(address(0)), \"Oracle not initialized.\");\n\n        uint256 id = randOracle.requestRandomNumber();\n        requests[id] = true;\n\n        emit RandomNumberRequested(id);\n    }\n```\n\nHere we use a `require` statement to ensure that the contract's oracle is initialized. We do this by checking that it is not a contract at [the null address](https://etherscan.io/address/0x0000000000000000000000000000000000000000), which is the address of uninitialized contract references. We then call `requestRandomNumber()`, the function that we declared in the `IRandOracle` interface. This function will return a request ID, which we mark as valid in our `requests` mapping. Finally, we emit an event to show that a random number has been requested.\n\nNow we need to write the callback function. Add the following code below the function you added above:\n\n```solidity\n    function fulfillRandomNumberRequest(uint256 randomNumber, uint256 id) external onlyRandOracle {\n        require(requests[id], \"Request is invalid or already fulfilled.\");\n\n        results[id] = randomNumber;\n        delete requests[id];\n\n        emit RandomNumberReceived(randomNumber, id);\n    }\n```","metadata":{"id":1392}}],["1393",{"pageContent":"require(requests[id], \"Request is invalid or already fulfilled.\");\n\n        results[id] = randomNumber;\n        delete requests[id];\n\n        emit RandomNumberReceived(randomNumber, id);\n    }\n```\n\nWhen the oracle contract calls this function (which only it is allowed to do, per `onlyRandOracle`) it will supply the random number requested along with the request ID it's fufilling. The function will first check if the request ID is valid and then store the random number in the `results` mapping.\n\nNow that the request has been fulfilled, it will also [`delete`](https://docs.soliditylang.org/en/v0.8.2/types.html?#delete) the request ID from `requests`, which is equivalent to setting it to `false`. This will ensure that only active requests are tracked.\n\nFinally, our callback function emits an event to announce that the request has been fulfilled. In a more complex contract, this function would do more than just store the random number in a results mapping: for example, it might use the number to determine a lottery winner, or generate an attribute of an NFT.\n\nBefore we wrap up this contract, we need to define the events we've emitted above. Add the following code to the bottom of the contract body:\n\n```solidity\n    event OracleAddressChanged(address oracleAddress);\n    event RandomNumberRequested(uint256 id);\n    event RandomNumberReceived(uint256 number, uint256 id);\n```\n\nOur caller contract is now complete. But it won't be able to do much of anything until we implement the oracle contract it depends on.\n\n## Oracle contract","metadata":{"id":1393}}],["1394",{"pageContent":"```\n\nOur caller contract is now complete. But it won't be able to do much of anything until we implement the oracle contract it depends on.\n\n## Oracle contract\n\nIf you take another look at the architecture diagram above, you'll notice that the oracle contract is intended to interact with multiple off-chain data providers. This is to ensure decentralization, a key attribute of robust smart contract protocols. If we relied on a single data provider for our random numbers, we'd be in trouble if that provider was compromised and the numbers it sent to us started being fixed, or if it had an outage and stopped returning anything.\n\nSo to minimize the impact of any single provider being compromised or going down, we'll implement functionality to source several different random numbers from several different providers, which we'll combine at the end using a [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nCreate a new subdirectory in your repl at `contracts/oracle`. Inside this subdirectory, create a new file named `RandOracle.sol`. Enter the following code into your new file:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./ICaller.sol\";\n\ncontract RandOracle is AccessControl {\n}\n```\n\nThis stub is quite similar to the code we started out with when writing `Caller`, having only two key differences:\n\n- Instead of `Ownable`, we import [`AccessControl`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/access/AccessControl.sol) from OpenZeppelin, which will allow us to implement role-based access control, a more complex and granular authorization model than we used in `Caller`. While we could have used this for `Caller` as well, it would have been overkill, and we'd like to keep our contracts as small as possible to save on deployment costs.","metadata":{"id":1394}}],["1395",{"pageContent":"- Instead of `IRandOracle`, we import the interface `ICaller`. You can probably guess what it will contain. Let's create it now, in a file named `ICaller.sol` within the same directory:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ninterface ICaller {\n    function fulfillRandomNumberRequest(uint256 randomNumber, uint256 id) external;\n}\n```\n\nLike `Caller`, `RandOracle` only needs to know about a single function in the other contract.\n\nLet's return to `RandOracle.sol` and define some state variables.\n\n```solidity\n    bytes32 public constant PROVIDER_ROLE = keccak256(\"PROVIDER_ROLE\");\n```\n\nFirst we define a name for our data provider role, in accordance with the `AccessControl` contract's [documentation](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/access/AccessControl.sol#L23). We then define two variables which we'll use to manage multiple providers:\n\n```solidity\n    uint private numProviders = 0;\n    uint private providersThreshold = 1;\n```\n\nWe use `numProviders` to store the total count of data providers we've added to the contract, and `providersThreshold` to define the minimum number of provider responses we need to consider a request fulfilled. For now, we've set `providersThreshold` to just one, opening ourselves up to the centralization risk mentioned above, but it will suffice for getting a basic demo up and running.\n\nNext, we need to define some variables we'll use to deal with requests and responses. Enter the following code below the definitions you just added above:\n\n```solidity\n    uint private randNonce = 0;\n\n    mapping(uint256=>bool) private pendingRequests;\n\n    struct Response {\n        address providerAddress;\n        address callerAddress;\n        uint256 randomNumber;\n    }\n\n    mapping(uint256=>Response[]) private idToResponses;\n```\n\nHere we define:","metadata":{"id":1395}}],["1396",{"pageContent":"struct Response {\n        address providerAddress;\n        address callerAddress;\n        uint256 randomNumber;\n    }\n\n    mapping(uint256=>Response[]) private idToResponses;\n```\n\nHere we define:\n\n- `randNonce`, a [cryptographic nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) we'll use to generate request IDs. This will be a simple counter that we increment every time `requestRandomNumber()` is called.\n- `pendingRequests`, a mapping of requests awaiting fulfillment, similar to `requests` in our `Caller` contract.\n- The `Response` struct, in which we'll store all the key details of each random number we receive from data providers: who requested the number, who provided the number, and the number itself.\n- `idToResponses`, a mapping of request IDs to arrays of Response structs. This will allow us to track responses per request.\n\nNow let's define our contract's constructor, the function that will run when it's deployed.\n\n```solidity\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender); // make the deployer admin\n    }\n```\n\nThis function assigns `AccessControl`'s `DEFAULT_ADMIN_ROLE` to the contract's deploying address, commonly called its owner. This role has the power to grant and revoke other roles.\n\nNow we're ready to define `requestRandomNumber()`, the function we called from `Caller`. Add the following code below the constructor's definition:\n\n```solidity\n    function requestRandomNumber() external returns (uint256) {\n        require(numProviders > 0, \" No data providers not yet added.\");\n\n        randNonce++;\n        uint id = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender, randNonce))) % 1000;\n        pendingRequests[id] = true;\n\n        emit RandomNumberRequested(msg.sender, id);\n        return id;\n    }\n```","metadata":{"id":1396}}],["1397",{"pageContent":"pendingRequests[id] = true;\n\n        emit RandomNumberRequested(msg.sender, id);\n        return id;\n    }\n```\n\nAll this code does is generate a unique ID for the request, based on `randNonce`, adds that ID to `pendingRequests`, emits an event and returns the ID, similar to the concept of a support desk ticketing system. The `require` statement at the top of the code will revert if the contract's administrator has not yet added any data providers.\n\nAn off-chain data provider, which we'll create later on using Node.js, will watch the contract for `RandomNumberRequested` events and respond to them by submitting a random number to the contract function `returnRandomNumber()`, which will in turn return the number to the caller contract using `fulfillRandomNumberRequest()`. Let's start writing `returnRandomNumber()` now, just below `requestRandomNumber()`:\n\n```solidity\n    function returnRandomNumber(uint256 randomNumber, address callerAddress, uint256 id) external onlyRole(PROVIDER_ROLE) {\n        require(pendingRequests[id], \"Request not found.\");\n\n        // Add newest response to list\n        Response memory res = Response(msg.sender, callerAddress, randomNumber);\n        idToResponses[id].push(res);\n        uint numResponses = idToResponses[id].length;\n    }\n```\n\nHere, `returnRandomNumber` is a public function which we'll restrict to the addresses with the `PROVIDER_ROLE`. It takes three arguments: the random number, the address that made the initial request, and the request ID. In the code above, we ensure that the request ID is valid and then add the response to the array of responses for the request with this ID, stored in `idToResponses`. We then store the length of the array in `numResponses`, which we'll use to check if we've met the response threshold.\n\nIn the next part of the function, we'll combine all the responses we receive and submit the result back to the caller. Add the following code below the line that starts with `uint numResponses`:\n\n```solidity","metadata":{"id":1397}}],["1398",{"pageContent":"```solidity\n        // Check if we've received enough responses\n        if (numResponses == providersThreshold) {\n            uint compositeRandomNumber = 0;\n\n            // Loop through the array and combine responses\n            for (uint i=0; i < idToResponses[id].length; i++) {\n                compositeRandomNumber = compositeRandomNumber ^ idToResponses[id][i].randomNumber; // bitwise XOR\n            }\n\n            // Clean up\n            delete pendingRequests[id];\n            delete idToResponses[id];\n\n            // Fulfill request\n            ICaller(callerAddress).fulfillRandomNumberRequest(compositeRandomNumber, id);\n\n            emit RandomNumberReturned(compositeRandomNumber, callerAddress, id);\n        }\n```\n\nThe code in this `if` block will only run when the final data provider submits its random number. It combines all the random numbers through a [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation), as taking an average would reduce the randomness. It then deletes the data for this request – without this step, data providers could keep submitting different random numbers and changing the result. It then fulfills the request by invoking the caller function's callback, and finally emits an event.\n\nFunctions in external contracts should almost always be invoked at or near the end of a given function, after all state change operations have been performed. This avoids the risk of [reentrancy](https://dasp.co/#item-1), a common smart contract bug that was the cause of the famous [2016 DAO hack](https://www.gemini.com/cryptopedia/the-dao-hack-makerdao#section-what-is-a-dao).\n\nHaving now completed our oracle contract's main functions, we need to add a few housekeeping functions for the contract admin to manage data providers. We'll start with a function for adding new data providers. Add the following code at the bottom of the contract body:\n\n```solidity\n    // Admin functions\n    function addProvider(address provider) external onlyRole(DEFAULT_ADMIN_ROLE) {","metadata":{"id":1398}}],["1399",{"pageContent":"```solidity\n    // Admin functions\n    function addProvider(address provider) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(!hasRole(PROVIDER_ROLE, provider), \"Provider already added.\");\n\n        _grantRole(PROVIDER_ROLE, provider);\n        numProviders++;\n\n        emit ProviderAdded(provider);\n    }\n```\n\nThis code is quite straight-forward. Following a duplication check, it uses the [`_grantRole()`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/access/AccessControl.sol#L217) function from `AccessControl` to assign `PROVIDER_ROLE` to the specified address, increments `numProviders`, and emits an event to let users know of a contract configuration change.\n\nNote that we've used the `internal` function `_grantRole()` rather than the `public` function `grantRole()`: we can do this because `internal` functions are usable inside the same contract and all contracts which inherit from it. This is distinct from `private` functions, which cannot be called in child contracts.\n\nNext, we add a function to remove data providers:\n\n```solidity\n    function removeProvider(address provider) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(!hasRole(PROVIDER_ROLE, provider), \"Address is not a recognized provider.\");\n        require (numProviders > 1, \"Cannot remove the only provider.\");\n\n        _revokeRole(PROVIDER_ROLE, provider);\n        numProviders--;\n\n        emit ProviderRemoved(provider);\n    }\n```\n\nThis function performs the reverse operation of the one above, with an extra check to ensure that the administrator does not remove all providers from the contract, rendering it unusable.\n\nThe last admin function we need is one that sets the provider threshold. Add the following code below the body of `removeProvider()`:\n\n```solidity\n    function setProvidersThreshold(uint threshold) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(threshold > 0, \"Threshold cannot be zero.\");\n\n        providersThreshold = threshold;","metadata":{"id":1399}}],["1400",{"pageContent":"```solidity\n    function setProvidersThreshold(uint threshold) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(threshold > 0, \"Threshold cannot be zero.\");\n\n        providersThreshold = threshold;\n        emit ProvidersThresholdChanged(providersThreshold);\n    }\n```\n\nFinally, let's define the events we've emitted above. Add the following code to the bottom of the contract body:\n\n```solidity\n    // Events\n    event RandomNumberRequested(address callerAddress, uint id);\n    event RandomNumberReturned(uint256 randomNumber, address callerAddress, uint id);\n    event ProviderAdded(address providerAddress);\n    event ProviderRemoved(address providerAddress);\n    event ProvidersThresholdChanged(uint threshold);\n```\n\nOur oracle contract is complete. Next, we need to create a data provider to feed it random numbers.\n\n## Node.js data provider\n\nWe'll write our data provider as a simple Node.js application, using the [Hardhat](https://hardhat.org) Ethereum development environment to help us interact with the blockchain. This environment provides a host of features for writing, testing, and deploying smart contracts, and for building applications that interface with the blockchain, such as this one. It includes a slightly modified version of the [ethers](https://docs.ethers.io/v5/) library, which is the main component we'll be using.\n\nAs previously stated, our data provider will monitor the oracle contract for random number requests and submit responses to them. As JavaScript programs are single-threaded, we'll use a chunked queue structure to split the program's time between taking note of new requests and processing existing requests.\n\nWe'll need to install Hardhat before we can start developing. Open your repl's `package.json` file and add the following line to the bottom of the `dependencies` object (remember to add a comma to the end of the preceding line):\n\n```json\n    \"hardhat\": \"^2.9.3\",\n```","metadata":{"id":1400}}],["1401",{"pageContent":"```json\n    \"hardhat\": \"^2.9.3\",\n```\n\nCreate a new directory in your repl named `provider`. Inside that directory, create a JavaScript file named `index.js`. Add the following initial code to the file:\n\n```javascript\nconst hardhat = require(\"hardhat\");\nconst axios = require(\"axios\");\n\nconst MAX_RETRIES = 5;\nconst SLEEP_TIME = 2000;\nconst BATCH_SIZE = 3;\n```\n\nHere we import `hardhat` and [`axios`](https://www.npmjs.com/package/axios), which we'll need to request random numbers from the [RANDOM.ORG](https://www.random.org/integers/) API.\n\nThe constants we've defined will be used as follows:\n\n- `MAX_RETRIES` is the maximum number of times we'll attempt to fulfill a request. Our ability to fulfill requests could be hampered by RANDOM.ORG experiencing an outage, or our data provider's wallet not having enough Ethereum to pay the gas cost of executing `returnRandomNumber()`.\n- `SLEEP_TIME` is how long we'll pause between processing batches of the request queue to give our application a chance to add new requests to the queue.\n- `BATCH_SIZE` is how many requests we'll fufill between sleeps when processing the request queue.\n\nBefore we dive into our application's main code, let's create a function for getting a random number from RANDOM.ORG. Add the following code below your constant definitions:\n\n```javascript\nasync function requestRandomNumber() {\n  const res = await axios({\n    url: \"https://www.random.org/integers/\",\n    params: {\n      num: 1,\n      min: 1,\n      max: 1000,\n      col: 1,\n      base: 10,\n      format: \"plain\",\n      rnd: \"new\",\n    },\n    method: \"get\",\n  });\n\n  return parseInt(res.data);\n}\n```","metadata":{"id":1401}}],["1402",{"pageContent":"params: {\n      num: 1,\n      min: 1,\n      max: 1000,\n      col: 1,\n      base: 10,\n      format: \"plain\",\n      rnd: \"new\",\n    },\n    method: \"get\",\n  });\n\n  return parseInt(res.data);\n}\n```\n\nHere we use `axios` to construct and submit an HTTP request to RANDOM.ORG's integer generator, in accordance with [their documentation](https://www.random.org/clients/http/). As [`axios`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) is an asynchronous function, we must use the [`await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) keyword to receive its final return value. The same will be true of most functions we use from the ethers library.\n\nNow let's start with the meat of our application. Add the following code to the bottom of the file:\n\n```javascript\nasync function main() {\n  // Initialize account\n  const [dataProvider] = await hardhat.ethers.getSigners();\n\n  // Initialize contract\n  const oracleContractAddress = \"ORACLE-CONTRACT-ADDRESS-HERE\";\n  const oracleContractABI = require(\"./randOracleABI.json\");\n  const oracleContract = new hardhat.ethers.Contract(\n    oracleContractAddress,\n    oracleContractABI,\n    dataProvider\n  );\n}\n\nmain();\n```\n\nThe `getSigners()` function from Hardhat's modified ethers library retrieves Ethereum accounts based on a provided wallet. For frontend dapps, this will usually be a wallet extension like MetaMask, but for scripts like this one, we'll need to specify a private key. We'll do that later, when we combine everything together.\n\nThe next chunk of code initializes a [`Contract`](https://docs.ethers.io/v5/api/contract/contract/) object. To connect to a contract and run its functions, we need two things: the contract's address, which shows us where to find it, and its [Application Binary Interface](https://docs.soliditylang.org/en/v0.8.2/abi-spec.html) (ABI), which tells us what functions it implements and what their parameters are. We'll leave these as placeholders for now.","metadata":{"id":1402}}],["1403",{"pageContent":"Note that we've also specified `dataProvider` as an argument for our `Contract` object's constructor. This provides a default account to use when calling contract functions.\n\nWith that setup complete, we can start watching for requests and populating our queue. Add the following code to the bottom of your `main()` function:\n\n```javascript\n// Populate requests queue\nvar requestsQueue = [];\n\noracleContract.on(\"RandomNumberRequested\", async (callerAddress, id) => {\n  requestsQueue.push({ callerAddress, id });\n});\n```\n\nHere we've initialized an empty requests queue and used `oracleContract`'s [`on`](https://docs.ethers.io/v5/api/contract/contract/#Contract-on) method to subscribe to the `RandomNumberRequested` event. Whenever a new event of this type is emitted by our contract, the code in our callback will execute, appending an object containing the event's arguments to `requestsQueue`.\n\nThat's the input part of our functionality done, so now we need the output. As mentioned above, we'll process the queue in chunks at regular intervals, so let's wrap this next bit of code in a [`setInterval()`] function. Add the following code to the bottom your `main()` function:\n\n```javascript\n// Poll and process requests queue at intervals\nsetInterval(async () => {\n  let processedRequests = 0;\n}, SLEEP_TIME);\n```\n\nWe use `processedRequests` to track how many requests we've processed in this cycle, up to `BATCH_SIZE`. Let's start with a simple `while` loop, using the [`shift()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) method to pop the first element off the requests queue. Add the following code below the definition of `processedRequests` within the body of `setInterval`:\n\n```javascript\nwhile (requestsQueue.length > 0 && processedRequests < BATCH_SIZE) {\n  const request = requestsQueue.shift();\n}\n```\n\nNow we can process the request with the next bit of code, which you can add to the `while` loop, below the definition of `request`:\n\n```javascript\nlet retries = 0;","metadata":{"id":1403}}],["1404",{"pageContent":"}\n```\n\nNow we can process the request with the next bit of code, which you can add to the `while` loop, below the definition of `request`:\n\n```javascript\nlet retries = 0;\nwhile (retries < MAX_RETRIES) {\n  try {\n    const randomNumber = await requestRandomNumber();\n\n    await oracleContract.returnRandomNumber(\n      randomNumber,\n      request.callerAddress,\n      request.id\n    );\n    break;\n  } catch (error) {\n    retries++;\n  }\n}\n\nprocessedRequests++;\n```\n\nWe use a [`try... catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch) to smoothly handle any errors that occur. We want to be able to leave this program running without worrying about it crashing on an error.\n\nFirst, this code attempts to request a random number and send it to our oracle contract by calling `returnRandomNumber()`. All contract function calls in ethers are asynchronous, so we must `await` them. If the operation is successful, we break out of the retry loop and move on to the next request. If not, we increment the `retries` counter and try again.\n\nIf we reach the maximum number of retries, we'll go to the next request without submitting anything to the oracle contract.\n\nThat's it for our data provider. The last thing we need to write before we can put it all together is a simple frontend for our `Caller` contract, providing a user-friendly way for people to request and recieve random numbers.\n\n## Caller contract frontend\n\nCreate a new folder in your repl called `frontend` and then create two files inside it: `index.html` and `app.js`. Add the following markup to `frontend/index.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Random Oracle Client</title>\n    <style>\n      .request {\n        color: red;\n      }\n\n      .response {\n        color: green;\n      }\n    </style>\n  <head>\n  <body>\n    <button id=\"request-rand\" class=\"button\">Request random number</button><br>\n    <pre id=\"request-id\"></pre>\n    <ul id=\"events\"></ul>","metadata":{"id":1404}}],["1405",{"pageContent":"color: green;\n      }\n    </style>\n  <head>\n  <body>\n    <button id=\"request-rand\" class=\"button\">Request random number</button><br>\n    <pre id=\"request-id\"></pre>\n    <ul id=\"events\"></ul>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n    <script src=\"./callerABI.js\"></script>\n    <script src=\"./app.js\"></script>\n  </body>\n</html>\n```\n\nIn this file, we've created the following:\n\n- A `button` element for requesting new random numbers.\n- A `pre` element, in which we'll print the ID of the last request.\n- A `ul` element for logging contract events as they occur.\n\nWe've also linked our stylesheet at the top of the file and the following JavaScript files at the bottom:\n\n- [`web3.js`](https://web3js.readthedocs.io/en/v1.7.1/), the library we'll be using to interact with the blockchain.\n- The `Caller` contract's ABI, which we'll get once we compile and deploy it.\n- Our `app.js` file, which will contain the frontend's logic.\n\nOpen `frontend/app.js` and enter the code skeleton:\n\n```javascript\nApp = {\n  callerAddress: \"FILL-ME-IN\",\n  callerContract: null,\n\n  init: async function () {},\n};\n\nApp.init();\n```\n\nThis `App` object will contain all of the status and functionality we'll implement. Note that this frontend will only interact with `Caller`, and not `RandOracle`. We'll come back and enter the contract address in the next section, once we've deployed everything.\n\nThe `init()` function will connect to the blockchain and initialize our application's behavior. Populate your empty function body as follows:\n\n```javascript\n    init: async function() {\n        if (window.ethereum) {\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            window.web3 = new Web3(window.ethereum);\n\n            App.callerContract = new web3.eth.Contract(callerABI, callerAddress);\n\n            // Switch networks\n            App.switchToReplitTestnet();\n        }\n    },\n```","metadata":{"id":1405}}],["1406",{"pageContent":"App.callerContract = new web3.eth.Contract(callerABI, callerAddress);\n\n            // Switch networks\n            App.switchToReplitTestnet();\n        }\n    },\n```\n\nThis code will interface with MetaMask and show a pop-up window asking the user to connect their wallet to our dapp. If the user accepts, we'll instantiate a `Web3` object using their account details. As with ethers, the majority of Web3's functions are asynchronous.\n\nBecause we're building on the Replit Testnet, we need to prompt the user to switch to this network, which we'll do in the function `switchToReplitTestnet()`. Add the definition for this function below the definition of `init`:\n\n```javascript\n    switchToReplitTestnet: function() {\n        window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n                {\n                    chainId: \"0x7265706c\",\n                    chainName: \"Replit Testnet\",\n                    rpcUrls: [\"https://eth.replit.com\"],\n                    iconUrls: [\n                        \"https://upload.wikimedia.org/wikipedia/commons/b/b2/Repl.it_logo.svg\",\n                    ],\n                    nativeCurrency: {\n                        name: \"Replit ETH\",\n                        symbol: \"RΞ\",\n                        decimals: 18,\n                    },\n                },\n            ],\n        });\n    },\n```\n\nThis code provides the details MetaMask needs to prompt the user to switch networks.\n\nSet up done, we can move on to app functionality. We'll start with a function that calls the `Caller` contract's `getRandomNumber()` function.\n\n```javascript\n    // contract interactions\n    getRandomNumber: async function() {\n        const accounts = await web3.eth.getAccounts();\n        const account = accounts[0];\n\n        // Request random number & return request ID\n        return (await App.callerContract.methods.getRandomNumber().send({from: account}));\n    },\n```","metadata":{"id":1406}}],["1407",{"pageContent":"const account = accounts[0];\n\n        // Request random number & return request ID\n        return (await App.callerContract.methods.getRandomNumber().send({from: account}));\n    },\n```\n\nHere we use [`web3.eth.getAccounts()`](https://web3js.readthedocs.io/en/v1.7.1/web3-eth.html#getaccounts) to find the user's wallet address, which we use to call the contract function `getRandomNumber()`. Note that the pattern and syntax for calling functions in Web3 differs substantially from the syntax we used in ethers.\n\nNext we need a function that subscribes to contract events and prepends their details to our webpage's event log. Add the following code:\n\n```javascript\n    subscribeToContractEvents: function() {\n        App.callerContract.events.RandomNumberRequested(async (err, event) => {\n            if (err) console.error('Error on event', err)\n\n            // Create list item\n            let reqEventLi = document.createElement(\"li\");\n            reqEventLi.classList.add(\"request\");\n            reqEventLi.innerHTML = `Random number requested, ID: ${event.returnValues.id}`;\n\n            // Add to top of list\n            const eventLog = document.getElementById(\"events\");\n            eventLog.prepend(reqEventLi);\n          });\n\n        App.callerContract.events.RandomNumberReceived(async (err, event) => {\n            if (err) console.error('Error on event', err)\n\n            // Create list item\n            let recEventLi = document.createElement(\"li\");\n            recEventLi.classList.add(\"response\");\n            recEventLi.innerHTML = `Random number received for ID ${event.returnValues.id}: ${event.returnValues.number}`;\n\n            // Add to top of list\n            const eventLog = document.getElementById(\"events\");\n            eventLog.prepend(recEventLi);\n          });\n    },\n```","metadata":{"id":1407}}],["1408",{"pageContent":"// Add to top of list\n            const eventLog = document.getElementById(\"events\");\n            eventLog.prepend(recEventLi);\n          });\n    },\n```\n\nThis code is similar to the event subscription code we used in our data provider, but uses the [web3.js `Contract.events` property](https://web3js.readthedocs.io/en/v1.7.1/web3-eth-contract.html#contract-events). It waits for new contract events to be emitted and adds a record of each one to the top of the page's events list.\n\nNext we need to work with JavaScript events and bind our random number button to the contract interaction function we wrote above. Add the following code:\n\n```javascript\n    // interface\n    bindBrowserEvents: function () {\n        const requestButton = document.getElementById(\"request-rand\");\n        requestButton.addEventListener(\"click\", async function() {\n            const transaction = await App.getRandomNumber();\n\n            const requestID = document.getElementById(\"request-id\");\n            requestID.innerHTML = `Submitted! Request ID: ${transaction.events.RandomNumberRequested.returnValues.id}`;\n        });\n    },\n```\n\nThis code will ensure that when we click the button, the contract function will be invoked, and the request ID in its emitted event will be printed to the page.\n\nBefore we wrap this file up, we need to invoke both of these event-related functions in our `init()` function. Amend the function as follows:\n\n```javascript\n    init: async function() {\n        if (window.ethereum) {\n            await window.ethereum.request({ method: 'eth_requestAccounts' });\n            window.web3 = new Web3(window.ethereum);\n\n            App.callerContract = new web3.eth.Contract(callerABI, App.callerAddress);\n\n            // Switch networks\n            App.switchToReplitTestnet();\n        }\n\n        // NEW CODE BELOW\n        App.subscribeToContractEvents();\n        App.bindBrowserEvents();\n    },\n```","metadata":{"id":1408}}],["1409",{"pageContent":"// Switch networks\n            App.switchToReplitTestnet();\n        }\n\n        // NEW CODE BELOW\n        App.subscribeToContractEvents();\n        App.bindBrowserEvents();\n    },\n```\n\nWe've now got everything we need to get both oracle and oracle client up and running. In the next section, we'll deploy our contracts and connect up everything we've built.\n\n## Putting it all together\n\nWe've created a lot of different pieces in the sections above. It's now time to put the puzzle together.\n\n### Compiling and deploying the contracts\n\nWe'll start by compiling and deploying our contracts. But first, we need to make a change to our dependencies. Our oracle contract relies on code from version 4.6.0 of OpenZeppelin, so we'll need to edit our repl's `package.json` to ensure that we import that version. Open `package.json` now, find the dependency `@openzeppelin/contracts` and change the version number next to it to `^4.6.0`.\n\nTo compile our contracts in the Solidity starter repository, we'll need to import them into `contract.sol` by their full paths. Delete the current contents of `contract.sol` and replace them with the following:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"/home/runner/YOUR-REPL-NAME-HERE/contracts/caller/Caller.sol\";\nimport \"/home/runner/YOUR-REPL-NAME-HERE/contracts/oracle/RandOracle.sol\";\n```\n\nEnter your repl's name as indicated. Then run your repl and wait for the Solidity starter web interface to appear, and for both contracts to compile.\n\nOnce we've compiled, we can deploy, but for that we'll need some funds. Connect your MetaMask wallet to the web interface and switch to the Replit Testnet. Then click the link to get 1 ETH for testing. Wait until 1 ETH shows up in your wallet balance on the top right of the page.\n\n![Switch to test](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/switch-to-test.png)\n![Get one Ether](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/get-one.png)","metadata":{"id":1409}}],["1410",{"pageContent":"![Get one Ether](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/get-one.png)\n\nNow you can deploy your contracts. Select \"Caller\" from the drop-down box and click **Deploy**. Approve the MetaMask pop-up that appears. Then do the same with \"RandOracle\".\n\n![Contract deployment](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/contractdeploy.png)\n\nOnce both contracts have been deployed, they will show up as expandable boxes below the drop-down box. Expand them and take a look at the functions available in each.\n\n![Deployed contracts](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/deployedcontracts.png)\n\nIn practice, the `Caller` and `RandOracle` contracts would usually be deployed by different addresses, potentially belonging to entirely different teams, but we're using a single one to avoid having to log in and out of MetaMask over and over.\n\n### Initializing the contracts\n\nNext, we need to connect `Caller` to `RandOracle`. Find the `setRandOracleAddress` function in `Caller`. Then click on the address at the bottom of `RandOracle`'s dropdown box to copy it and paste it in as the value for `newAddress`. Then click **Run**.\n\n![RandOrcale address](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/roracleaddress.png)\n\nWe're done setting up our contracts, but leave your repl running with the Solidity starter web interface open, as we'll need it to set up our data provider application and client frontend.\n\n### Preparing the data provider\n\nBefore we do anything to integrate our data provider with the blockchain, let's include `axios` in our repl's `package.json` file. Add the following line to the bottom of the `dependencies` object if `axios` is not already included as a dependency (remember to add a comma to the end of the preceding line):\n\n```json\n    \"axios\": \"^0.27.2\"\n```","metadata":{"id":1410}}],["1411",{"pageContent":"```json\n    \"axios\": \"^0.27.2\"\n```\n\nWith that done, we need to copy `RandOracle`'s ABI into a file where the data provider can see it. Click on **Copy ABI** next to `RandOracle`'s address to load the ABI into your clipboard. Then create a new file in `provider` named `randOracleABI.json` and paste the contents of your clipboard into it.\n\n![Copy ABI](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/copyabi.png)\n\nNow open `index.js`, find the line beginning with `const oracleContractAddress`, and replace the placeholder string with the address of the deployed `RandOracle` contract.\n\nThe last thing we need to do to get our data provider working is to provide it with a wallet. The wallet we use for MetaMask is locked by a password, so it can't easily be used for automated operations. In any case, it's more hygenic for us to create a dedicated wallet for our data provider. We'll do this with a simple Node.js script and the [`ethereumjs-wallet`](https://www.npmjs.com/package/ethereumjs-wallet) library.\n\nOpen your repl's `package.json` file. Add the following line to the bottom of the `dependencies` object (remember to add a comma to the end of the preceding line):\n\n```json\n    \"ethereumjs-wallet\": \"^1.0.2\"\n```\n\nNow create a new file named `walletGen.js`. Populate it with the code below:\n\n```javascript\nconst wallet = require(\"ethereumjs-wallet\").default;\n\nconst addressData = wallet.generate();\n\nconsole.log(`Private key: ${addressData.getPrivateKeyString()}`);\nconsole.log(`Address: ${addressData.getAddressString()}`);\n```\n\nStop and run your repl. Navigate to the Shell tab in bottom-right panel and run the command `node walletGen.js`. You should see two long strings of letters and numbers appear beneath your command. The first is your new wallet's private key, and the second is your new wallet's address.\n\n![Wallet credentials](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/tempwallet.png)","metadata":{"id":1411}}],["1412",{"pageContent":"![Wallet credentials](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/tempwallet.png)\n\nAnyone who knows this private key can control the wallet, so we'll need to keep it safe. Open the Secrets tab on your repl's sidebar. Create new key named `DATAPROVIDER_PRIVATE_KEY` and paste in the private key as its value. Click the button \"Add new value\" to save the entry.\n\nNow we need to add the address of the new wallet as a data provider for our `RandOracle` contract. In your repl's web browser, navigate to the `addProvider` function in `RandOracle`. Paste in the address of your new wallet as the value for `provider`. Then click **Run**.\n\nOur new wallet will also need some ETH to send random number responses to the blockchain. We can send it some of ours using MetaMask. Open the MetaMask extension interface and click on the button marked **Send**. It should be right underneath your balance. Paste the data provider's wallet address into the search bar that appears. Then enter a small number into the _Amount_ field, such as 0.2, click **Next**, and confirm the transaction.\n\nNow we need to configure Hardhat, so that it knows what network to connect to (the Replit Testnet) and what wallet to use (the one we just created) when running our data provider application. First add the following line to the bottom of the `dependencies` object (remember to add a comma to the end of the preceding line):\n\n```json\n\"@nomiclabs/hardhat-waffle\": \"^2.0.3\"\n```\n\nCreate a file named `hardhat.config.js` with the following contents:\n\n```javascript\nrequire(\"@nomiclabs/hardhat-waffle\");\n\n// You need to export an object to set up your config\n// Go to https://hardhat.org/config/ to learn more\n\n/**\n * @type import('hardhat/config').HardhatUserConfig\n */\nmodule.exports = {\n  networks: {\n    replit: {\n      url: `https://eth.replit.com`,\n      accounts: [process.env.DATAPROVIDER_PRIVATE_KEY],\n    },\n  },\n  solidity: \"0.8.2\",\n};\n```\n\nThat's it for our data provider. Now we just need to prepare the client frontend.","metadata":{"id":1412}}],["1413",{"pageContent":"accounts: [process.env.DATAPROVIDER_PRIVATE_KEY],\n    },\n  },\n  solidity: \"0.8.2\",\n};\n```\n\nThat's it for our data provider. Now we just need to prepare the client frontend.\n\n### Preparing the client frontend\n\nWe need to fill in the ABI and address for `Caller`. Click on **Copy ABI** next to `Caller`'s address to load the ABI into your clipboard. Then create a new file in `frontend` named `callerABI.js` and add the following code to it:\n\n```javascript\ncallerABI =\n```\n\nPaste the contents of your clipboard after the equals sign. We've already included this file in `frontend/index.html`, so now we just need the contract address. Open `frontend/app.js` and paste the address of `Caller` in place of the placeholder value of `callerAddress` near the top of the file.\n\nWe'll also need to create a simple [Node.js Express](https://expressjs.com/) application to render the frontend. Create a file named `frontend.js` in your repl and add the following code to it:\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\nconst PORT = 433;\n\napp.use(express.static(\"frontend\"));\n\napp.listen(PORT, () => console.log(`Server listening on port: ${PORT}`));\n```\n\n### Running the repl\n\nNow that we have everything connected, we want to replace the Solidity starter interface with our data provider application and client frontend. To do this, make sure that hidden files are showing and open `.replit`.\n\n![Show hidden](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/showhidden.png)\n\nReplace `run = \"node tools\"` with the following:\n\n```\nrun = \"sh start.sh\"\n```\n\nThis will make our repl run a [Bash script](https://ryanstutorials.net/bash-scripting-tutorial/bash-script.php) instead of single command, which is useful when we need to run more than one thing. Create a file named `start.sh` and add the following code to it:\n\n```bash\n# Start data provider in the background\nnpx hardhat run provider --network replit &\n\n# Start client frontend\nnode frontend.js\n```","metadata":{"id":1413}}],["1414",{"pageContent":"```bash\n# Start data provider in the background\nnpx hardhat run provider --network replit &\n\n# Start client frontend\nnode frontend.js\n```\n\nWe must run the provider as a Hardhat script rather than a plain Node.js application to use our Hardhat configuration. The `&` symbol will make the data provider [run in the background](https://superuser.com/questions/358491/what-does-the-mean-when-used-in-the-end-of-a-bash-script), so that we can also start the frontend.\n\nOur client and oracle are finally both ready to roll. Stop your repl and rerun it. You should see our frontend in the repl browser. Click the button to request a random number and watch the events come in.\n\n![Final app](https://docimg.replit.com/images/tutorials/44-smart-contract-oracle/finalapp.png)\n\n## Where next?\n\nIn this tutorial, we've built a simplified version of [Chainlink's Verifiable Random Function oracle](https://docs.chain.link/docs/chainlink-vrf/). While ours doesn't provide the same level of robust security, building it has given us insight into how smart contracts can work with off-chain data, and we can use it for other projects in the future, or let other Solidity developers on Replit use it for their projects.\n\nSome next steps you might want to try:\n\n- Create a few new repls containing just the data provider code and give each one its own wallet. Add the addresses as data providers to `RandOracle`, increase the providers threshold, and see how the contract works with more than one provider.\n- Build something more sophisticated on top of `Client`. For example, you could adapt the [ReplBot NFT contracts](/tutorials/web3/build-a-robot-nft) to use this oracle as a source of randomness. Or you could write something like a lottery contract.\n- Experiment with different data sources. An oracle can be a source for any data you can think of, from stock prices to the weather.\n\nYou can find our repl below:","metadata":{"id":1414}}],["1415",{"pageContent":"- Experiment with different data sources. An oracle can be a source for any data you can think of, from stock prices to the weather.\n\nYou can find our repl below:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Oracle?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1415}}],["1416",{"pageContent":"---\ntitle: Escrow contract with Solidity\n---\n\n# Build an escrow contract on the Ethereum blockchain with Solidity and Replit\n\nSince Satoshi Nakamoto released the first version of Bitcoin in early 2009, digital currencies and blockchain technology have been the site of frenzied innovation, excitement and speculation. In addition to Bitcoin itself, hundreds of competing and complementary blockchains and currencies have come and gone. In this tutorial, we will be looking at Ethereum, the second most popular and widely used cryptocurrency after Bitcoin.\n\nEthereum's main innovation is to provide a Turing complete environment for on-chain computation, which means we can run code on the blockchain. This opens up an immense field of possibilities for creating decentralized finance (DeFi) platforms, which can act as open alternatives to traditional financial services such as loans, investment, insurance and the sale of artworks.\n\nIn this tutorial, we will be building a simple escrow smart contract, which will include deploying our own [non-fungible token](https://en.wikipedia.org/wiki/Non-fungible_token) (NFT). By the end of this tutorial, you will:\n\n- Have experience with developing Ethereum smart contracts using the Solidity programming language.\n- Know the basics of deploying contracts to a blockchain and interacting with them.\n- Have an understanding of some of the key considerations for secure blockchain development.\n\n## Getting started\n\nWe need two things to get started with this project: a Solidity repl and a browser wallet.\n\n### Solidity repl\n\nSign in to [Replit](https://replit.com/) or [create an account](https://replit.com/signup) if you haven't already. Once logged in, create a Solidity starter repl.\n\n![Create a solidity repl](https://docimg.replit.com/images/tutorials/33-escrow-solidity/solidity-starter-repl.png)","metadata":{"id":1416}}],["1417",{"pageContent":"![Create a solidity repl](https://docimg.replit.com/images/tutorials/33-escrow-solidity/solidity-starter-repl.png)\n\nThe Solidity starter repl works a little differently from other repls you may have used in the past. Rather than running our repl every time we want to test out a new piece of code, we can run our repl once, to start it up, and it will automatically reload when changes are made to our Solidity code in `contract.sol`.\n\nThe Solidity starter repl comes with a friendly web interface, built using the [web3 Ethereum JavaScript API](https://web3js.readthedocs.io/en/v1.5.2/), which we will use to deploy and interact with our contracts. We will deploy to Replit's testnet, a custom version of the Ethereum blockchain managed by Replit and optimised for testing.\n\n### Browser wallet\n\nWe will need a browser-based web3 wallet to interact with the Replit testnet and our deployed contracts. MetaMask is a popular and feature-rich wallet implemented as a WebExtension. You can install it from [MetaMask's download page](https://metamask.io/download.html). Make sure you're using a supported browser -- either Chrome, Firefox, Brave or Edge.\n\nOnce you've installed MetaMask, follow the prompts to create a wallet and sign in. MetaMask will give you a 12-word _secret recovery phrase_ -- this is your wallet's private key, and must be kept safe and secret. If you lose this phrase, you will not be able to access your wallet, and if someone else finds it, they will.\n\nIf you're already using MetaMask, we recommend creating a new account for testing with Replit. You can do this from the account menu, which appears when you click on the account avatar in the top right corner of MetaMask interface.\n\n## Introduction to smart contract development","metadata":{"id":1417}}],["1418",{"pageContent":"## Introduction to smart contract development\n\nNow that we've got our repl and wallet set up, we can start developing. We will be writing contracts, which are the basic building blocks of Ethereum programs. An individual contract can have state variables and functions, and can inherit from multiple other contracts. Contracts in Solidity are equivalent to classes in a language like Python or Java.\n\nContracts on Ethereum and Ethereum-based networks (such as the Replit testnet and Binance Chain) are compiled to bytecode which runs on the [Ethereum Virtual Machine](https://ethereum.org/en/developers/docs/evm/) (EVM). This is similar to how Java code compiles to bytecode for the JVM.\n\nA list of opcodes for EVM is provided [here](https://ethervm.io/). Many of the opcodes dealing with arithmetic and logical operations should be familiar if you've worked with any kind of assembly before. The EVM also has opcodes for blockchain-specific operations, such as getting information about the current block or chain.\n\nAn additional consideration, unique to blockchain development, is that each opcode has an associated price ([listed here](https://docs.google.com/spreadsheets/d/1n6mRqkBz3iWcOlRem_mO09GtSKEKrAsfO7Frgx18pNU/edit#gid=0)). Users of smart contracts pay a fee (known as [gas](https://www.investopedia.com/terms/g/gas-ethereum.asp)) to invoke state-changing functions. This fee is determined by the opcodes used, and so it is in the interest of developers to keep their code as simple as possible.\n\nSolidity, which we will be using below, is the most popular language for developing smart contracts on Ethereum. Alternatives such as [Vyper](https://vyper.readthedocs.io/en/stable/) exist, but are not as widely used.\n\n## Escrow protocol design\n\nBefore we jump into the code, let's make sure we have a plan for what we're going to build.","metadata":{"id":1418}}],["1419",{"pageContent":"## Escrow protocol design\n\nBefore we jump into the code, let's make sure we have a plan for what we're going to build.\n\nAn [escrow](https://www.investopedia.com/terms/e/escrow.asp) is a contractual agreement in which a third party receives money from one party and pays it to another party after a certain condition has been met. In traditional finance, this third party needs to be a trusted individual or organization, such as a bank, but in DeFi, it can be a smart contract.\n\nWe will build a simple escrow protocol that holds funds until a specified duration has passed. This could be used to give a friend some Ethereum for their birthday, or to save money for a specific occasion.\n\nOur escrow protocol will consist of two contracts:\n\n- `Escrow`, which will provide the end-user interface for escrowing and redeeming funds. This contract will also store all of the escrowed funds.\n- `EscrowNFT`, which will store the details of individual escrows as NFTs. This will allow users to transfer immature escrows between one another.\n\nWhile the most famous use of NFTs involves buying and selling artworks and other collectibles on marketplaces like [OpenSea](https://opensea.io/), we can use them for all kinds of other purposes, such as to represent escrows.\n\n## Escrow NFT\n\nLet's start coding with the EscrowNFT contract. Open `contract.sol`, delete the file's contents, and add the following:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract EscrowNFT is ERC721Burnable, ERC721Enumerable, Ownable {\n    uint256 public tokenCounter = 0;\n\n    // NFT data\n    mapping(uint256 => uint256) public amount;\n    mapping(uint256 => uint256) public matureTime;\n\n    constructor() ERC721(\"EscrowNFT\", \"ESCRW\") {\n    }\n}\n```","metadata":{"id":1419}}],["1420",{"pageContent":"// NFT data\n    mapping(uint256 => uint256) public amount;\n    mapping(uint256 => uint256) public matureTime;\n\n    constructor() ERC721(\"EscrowNFT\", \"ESCRW\") {\n    }\n}\n```\n\nThe first line of our contract is the [license identifier](https://docs.soliditylang.org/en/v0.6.8/layout-of-source-files.html#spdx-license-identifier). Smart contracts are usually open source, and reuse of other projects' code is common in DeFi, so it's a good idea to include a license that indicates how you would like others to use (or not use) your code. Supported licenses are listed [here](https://spdx.org/licenses/).\n\nIn the next line, we define the version of Solidity we're using (in this case, any version newer than [0.8.2](https://docs.soliditylang.org/en/v0.8.2/) up to 0.9.0). Solidity is an evolving language and often introduces breaking changes, so our code may not compile under older or newer versions of the language.\n\nFollowing the `pragma` statement, we import some contracts from the [OpenZeppelin contract library](https://openzeppelin.com/contracts/). This library includes inheritable base contracts for a wide variety of common smart contract development needs, including base implementations of Ethereum token standards.\n\nThe Ethereum token standard for NFTs is [ERC-721](https://ethereum.org/en/developers/docs/standards/tokens/erc-721/). Rather than implementing it ourselves, we can import and use OpenZeppelin's version. Note that while OpenZeppelin has a [base `ERC721` contract](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol), we will use a couple of extensions:\n\n- [`ERC721Burnable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Burnable.sol), which will allow us to destroy NFTs that have been redeemed.","metadata":{"id":1420}}],["1421",{"pageContent":"- [`ERC721Enumerable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol), which will allow us to list which NFTs belong to which owners.\n\nBoth of these extension contracts inherit from `ERC721`.\n\nWe also use OpenZeppelin's [`Ownable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol) contract, which will allow us to enforce access control on sensitive functionality.\n\nAs Solidity supports [multiple inheritance](https://docs.soliditylang.org/en/v0.8.2/contracts.html#inheritance), the contract definition line uses all of our imports:\n\n```\ncontract EscrowNFT is ERC721Burnable, ERC721Enumerable, Ownable {\n```\n\nIn the contract body, we define a few state variables:\n\n- `tokenCounter`: this will provide us with unique, incrementing IDs for tokens as they are minted.\n- `amount` and `matureTime`: these [mappings](https://docs.soliditylang.org/en/v0.8.2/types.html#mapping-types) will store data for each token we mint.\n\nNote the use of [`uint256`](https://docs.soliditylang.org/en/v0.8.2/types.html#integers) as the type for these values: because most of the values we deal with in Solidity programs are monetary, we use unsigned integers to avoid storing negative numbers. In versions of Solidity prior to 0.8.0, this sometimes led to dangerous [overflows](https://dasp.co/#item-3), but [overflow protection is now built into the language](https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html).\n\nWe do not need to initialize any of these variables, as Solidity will automatically set uninitialized variables to 0.\n\nThe final part of the code we added above is the `constructor()` method, which calls [a parent constructor](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L44) to define our NFT's name and symbol/stock ticker.","metadata":{"id":1421}}],["1422",{"pageContent":"Now we need to define a mint function, so that we can create NFTs. We'll start with the function definition, which we will add just below the body of `constructor()`:\n\n```solidity\n    function mint(address _recipient, uint256 _amount, uint256 _matureTime) public onlyOwner returns (uint256) {\n    }\n```\n\nWe're defining a function named `mint` which takes three arguments:\n\n- `address _recipient`: The [address](https://docs.soliditylang.org/en/v0.8.2/types.html#address) we will send the NFT to. This can be a user's wallet or another contract.\n- `uint256 _amount`: The amount of Ether escrowed by this NFT.\n- `uint256 _matureTime`: The time (represented as a [Unix Timestamp](https://www.unixtimestamp.com/)) at which the NFT's funds will be redeemable.\n\nThis function will return a single `uint256` -- the numeric ID of the minted NFT.\n\nThis is a `public` function, which means it can be called by both external users and by other functions in this contract, or any contracts that inherit from it. Solidity provides granular function and variable visibility options, which are [explained here](https://bitsofco.de/solidity-function-visibility-explained/).\n\nFinally, `onlyOwner` refers to a [modifier](https://docs.soliditylang.org/en/v0.8.9/contracts.html#function-modifiers) defined in [`Ownable`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol#L42). Modifiers are generally used to restrict functions for purposes of access control or state logic. This modifier will ensure that only the owner of the NFT contract is allowed to mint NFTs.\n\nNow that we've read and understood the function definition, let's add the function body:\n\n```solidity\n    function mint(address _recipient, uint256 _amount, uint256 _matureTime) public onlyOwner returns (uint256) {\n        _mint(_recipient, tokenCounter);\n\n        // set values\n        amount[tokenCounter] = _amount;\n        matureTime[tokenCounter] = _matureTime;\n\n        // increment counter\n        tokenCounter++;","metadata":{"id":1422}}],["1423",{"pageContent":"_mint(_recipient, tokenCounter);\n\n        // set values\n        amount[tokenCounter] = _amount;\n        matureTime[tokenCounter] = _matureTime;\n\n        // increment counter\n        tokenCounter++;\n\n        return tokenCounter - 1; // return ID\n    }\n```\n\nHere we use [`ERC721`'s internal `_mint()` function](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L280) to mint a new token to the recipient with the current value of `tokenCounter` as its ID. We then set the `amount` and `matureTime` mappings for our new token. Finally, we increment `tokenCounter` and return the ID of our token.\n\nNext, we need to make a function that will return the details of a given token. Add the following code below the body of the `mint()` function:\n\n```solidity\n    function tokenDetails(uint256 _tokenId) public view returns (uint256, uint256) {\n        require(_exists(_tokenId), \"EscrowNFT: Query for nonexistent token\");\n\n        return (amount[_tokenId], matureTime[_tokenId]);\n    }\n```\n\nWe declare this as a [`view` function](https://docs.soliditylang.org/en/v0.8.2/contracts.html#view-functions). This declaration asserts that the function does not modify state, and thus its invocation does not need to be recorded on-chain. This means it will be callable for free.\n\nOur function body starts with a [`require` statement](https://docs.soliditylang.org/en/v0.8.2/contracts.html#view-functions). This is an error-handling function in Solidity: if the condition in the first argument is not met, the current transaction will revert (undoing all previous actions) and the error message in the second argument will be displayed.\n\nIf invoked with an existing token ID, this function will return two `uint256` values, the `amount` and `matureTime` for that ID. Note the syntax for [multiple return](https://docs.soliditylang.org/en/v0.8.2/contracts.html#returning-multiple-values).","metadata":{"id":1423}}],["1424",{"pageContent":"We're almost done with our NFT contract! Before we move on, we need to add a few boilerplate functions. Add the following code below the body of your `tokenDetails()` function:\n\n```solidity\n    function contractAddress() public view returns (address) {\n        return address(this);\n    }\n\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override(ERC721, ERC721Enumerable) { }\n\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) { }\n```\n\nOur first function will return the contract's address. This will make it easier to work with in the Replit web interface.\n\nThe last two functions resolve ambiguities introduced by Solidity's multiple inheritance. Because we're using two different ERC-721 extensions, the base `ERC721` contract is inherited twice with different functions added and overridden. To resolve the compiler's confusion, we specify that the versions of `_beforeTokenTransfer()` and `supportsInterface()` provided by `ERC721Enumerable` should be preferred.\n\n## Escrow contract\n\nNow we need to create our Escrow contract, which will act as an interface for creating and redeeming escrows. Add the following `contract` block to the bottom of `contract.sol`, below the `EscrowNFT` contract:\n\n```solidity\ncontract Escrow is Ownable {\n\n    EscrowNFT public escrowNFT;\n    bool public initialized = false;\n\n    event Escrowed(address _from, address _to, uint256 _amount, uint256 _matureTime);\n    event Redeemed(address _recipient, uint256 _amount);\n    event Initialized(address _escrowNft);\n\n}\n```\n\nThis contract inherits from `Ownable`. We define two state variables:\n\n- `escrowNFT`: This is the instance of the `EscrowNFT` contract that our `Escrow` contract will use.\n- `initialized`: This variable will help us to implement the [initializable design pattern](https://soliditydeveloper.com/design-pattern-solidity-initialize-contract-after-deployment).","metadata":{"id":1424}}],["1425",{"pageContent":"- `initialized`: This variable will help us to implement the [initializable design pattern](https://soliditydeveloper.com/design-pattern-solidity-initialize-contract-after-deployment).\n\nWe also define a number of [events](https://docs.soliditylang.org/en/v0.8.2/contracts.html#events). Events provide a user-friendly form of logging on the blockchain and are commonly used by dApps (decentralized apps -- i.e. web frontends for smart contracts). It's considered best practice to emit events whenever a state change is made, so we've defined events for our contract's three state-changing actions:\n\n- Creation of escrow NFTs.\n- Redeeming of escrowed funds.\n- Initialization of the contract.\n\nLet's implement initialization now. Add the following code below your event definitions:\n\n```solidity\n    modifier isInitialized() {\n        require(initialized, \"Contract is not yet initialized\");\n        _;\n    }\n\n    function initialize(address _escrowNftAddress) external onlyOwner {\n        require(!initialized, \"Contract already initialized.\");\n        escrowNFT = EscrowNFT(_escrowNftAddress);\n        initialized = true;\n\n        emit Initialized(_escrowNftAddress);\n    }\n```\n\nHere we define a custom modifier, `isInitialized`, which will revert if `initialized` is false. If `initialized` is true, the function we apply this modifier to will execute at `_`.\n\nNext, we define our `initialize()` function, which takes a single argument: the address of the `EscrowNFT` contract to use. We've given this function `external` visibility, so it can only be called by an external user, and applied the `onlyOwner` modifier, so only the contract's owner can initialize it.\n\nIn the function body, we ensure that the contract is not already initialized, and then we initialize our `escrowNFT` state variable, set `initialized` to `true`, and emit an event.\n\nNow we need a function that allows us to create escrow NFTs. Add the following code below the `initialize` function:\n\n```solidity","metadata":{"id":1425}}],["1426",{"pageContent":"Now we need a function that allows us to create escrow NFTs. Add the following code below the `initialize` function:\n\n```solidity\n    function escrowEth(address _recipient, uint256 _duration) external payable isInitialized {\n        require(_recipient != address(0), \"Cannot escrow to zero address.\");\n        require(msg.value > 0, \"Cannot escrow 0 ETH.\");\n\n        uint256 amount = msg.value;\n        uint256 matureTime = block.timestamp + _duration;\n\n        escrowNFT.mint(_recipient, amount, matureTime);\n\n        emit Escrowed(msg.sender,\n            _recipient,\n            amount,\n            matureTime);\n    }\n```\n\nOur `escrowEth` function is `payable`, which means it can receive Ether, and it uses the `isInitialized` modifier. It takes a recipient address and an escrow duration, specified in seconds.\n\nIn the function body, we ensure that the recipient is not the zero address, to prevent users from accidentally minting NFTs without specifying the receiver, and that the amount of Ether to be escrowed (accessible from [`msg.value`](https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties)) is greater than zero.\n\nWe then set the `amount` and `matureTime` values for our NFT, using [`block.timestamp`](https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties) to get the current time (approximately). These values are provided to `escrowNFT.mint`, which will mint our NFT to the specified recipient.\n\nFinally, we emit an event, using [`msg.sender`](https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties) to retrieve the address of the user who called the function.\n\nNow that we can create escrow NFTs, we need a way for the recipient to redeem the funds in a matured NFT. Let's create a function for that now, below the definition of our `escrowEth` function:\n\n```solidity\n    function redeemEthFromEscrow(uint256 _tokenId) external isInitialized {","metadata":{"id":1426}}],["1427",{"pageContent":"```solidity\n    function redeemEthFromEscrow(uint256 _tokenId) external isInitialized {\n        require(escrowNFT.ownerOf(_tokenId) == msg.sender, \"Must own token to claim underlying Eth\");\n\n        (uint256 amount, uint256 matureTime) = escrowNFT.tokenDetails(_tokenId);\n        require(matureTime <= block.timestamp, \"Escrow period not expired.\");\n\n        escrowNFT.burn(_tokenId);\n\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n\n        require(success, \"Transfer failed.\");\n\n        emit Redeemed(msg.sender, amount);\n    }\n```\n\nOur redemption function first checks whether `msg.sender` is the owner of the token, to prevent users from attempting to redeem tokens they don't own. It then retrieves the `amount` and `matureTime` for the specified token ID, and checks whether the `matureTime` has passed.\n\nIf the token is owned by `msg.sender` and its `matureTime` has passed, it is burned using the [`burn()` function from ERC721Burnable](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Burnable.sol#L21). This destroys the token, ensuring that it cannot be redeemed again.\n\nOnce the token is destroyed, we transfer its underlying Ether to `msg.sender`. As the creator of the escrow NFT originally paid this amount of Ether into the contract, it should still be available. There are a few different ways of sending Ether in Solidity -- [using `call` is the best one](https://solidity-by-example.org/sending-ether/). `call` returns two values, but we only want the first one, so we leave out the second variable declaration in our multiple return syntax.\n\nIf the Ether transfer fails, we revert, undoing the destruction of the token. Otherwise we emit an event to record the escrow redemption.","metadata":{"id":1427}}],["1428",{"pageContent":"If the Ether transfer fails, we revert, undoing the destruction of the token. Otherwise we emit an event to record the escrow redemption.\n\nOur contract now does the main things it needs to, but we can make some improvements. For example, rather than requiring users to specify the ID of the token they want to redeem, we can create a function that redeems all matured tokens in their possession. Let's do this now, by adding a new function beneath the definition of `redeemEthFromEscrow`:\n\n```solidity\n    function redeemAllAvailableEth() external isInitialized {\n        uint256 nftBalance = escrowNFT.balanceOf(msg.sender);\n        require(nftBalance > 0, \"No escrow NFTs to redeem.\");\n\n        uint256 totalAmount = 0;\n\n        for (uint256 i = 0; i < nftBalance; i++) {\n            uint256 tokenId = escrowNFT.tokenOfOwnerByIndex(msg.sender, i);\n            (uint256 amount, uint256 matureTime) = escrowNFT.tokenDetails(tokenId);\n\n            if (matureTime <= block.timestamp) {\n                escrowNFT.burn(tokenId);\n                totalAmount += amount;\n            }\n        }\n\n        require(totalAmount > 0, \"No Ether to redeem.\");\n\n        (bool success, ) = msg.sender.call{value: totalAmount}(\"\");\n\n        require(success, \"Transfer failed.\");\n\n        emit Redeemed(msg.sender, totalAmount);\n    }\n```\n\nWe start by querying `escrowNFT.balanceOf()` to find out the number of escrow NFT tokens `msg.sender` owns. If they own none, we revert.\n\nWe then create a variable named `totalAmount` and loop through the user's NFTs. We can get the ID for each one using [`tokenOfOwnerByIndex`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol#L37), a function defined in `ERC721Enumerable`. We then retrieve the `amount` and `matureTime` for the token using `escrowNFT.tokenDetails()`. If a given token's `matureTime` has passed, we burn it and add its value to `totalAmount`.","metadata":{"id":1428}}],["1429",{"pageContent":"Once the for loop has completed, we check whether `totalAmount` is greater than zero, and revert if it isn't. We then send the `totalAmount` in Ether to `msg.sender`. At this point, you may wonder why we didn't just loop through the user's NFTs and called `redeem` on each one, to avoid repeating code. While this would make our code simpler to read, it would lead to a lot of extra checks and transfers, which would make this function more expensive for users to call. When developing smart contracts, keeping the cost of each function invocation to a minimum is paramount.\n\nLet's add one more function before we deploy our contracts. You should recognize `contractAddress()` from `EscrowNFT` above. Add it below the definition of `redeemAllAvailableEth()`.\n\n```solidity\n    function contractAddress() public view returns (address) {\n        return address(this);\n    }\n```\n\nAnd with that, our code is complete!\n\n## Testing our protocol\n\nNow that we've written our contracts, it's time to deploy them to the Replit testnet and test them out. We'll use our repl's web interface to do this.\n\nFirst, run your repl. Once all of the dependencies are installed, you should see the Replit Ethereum web interface in your repl's browser. It looks like this:\n\n![Replit Ethereum web interface](https://docimg.replit.com/images/tutorials/33-escrow-solidity/replit-eth-web.png)\n\nConnect your MetaMask wallet to the web interface and switch to the Replit testnet. Then click the link to get 1 ETH for testing. Wait until 1 ETH shows up in your wallet balance on the top right of the page.\n\n![Switch to test](https://docimg.replit.com/images/tutorials/33-escrow-solidity/switch-to-test.png)\n![Get one Ether](https://docimg.replit.com/images/tutorials/33-escrow-solidity/get-one.png)\n\nNow you can deploy your contracts. Select \"Escrow\" from the drop-down box and click **Deploy**. Approve the MetaMask pop-up that appears. Then do the same with \"EscrowNFT\".","metadata":{"id":1429}}],["1430",{"pageContent":"Now you can deploy your contracts. Select \"Escrow\" from the drop-down box and click **Deploy**. Approve the MetaMask pop-up that appears. Then do the same with \"EscrowNFT\".\n\nOnce both of these contracts have been deployed, they will show up as expandable boxes below the drop-down box. Expand both and take a look at all the different functions available.\n\n![Deployed contracts](https://docimg.replit.com/images/tutorials/33-escrow-solidity/deployed-contracts.png)\n\nBefore we can use either of these contracts, we need to do some setup. First, let's initialize `Escrow`.\n\n1. In `EscrowNFT`, run the view function `contractAddress`. Click on the output to copy it to your clipboard.\n2. In `Escrow`, find the `initialize` function. Paste the contents of your clipboard into the value for `_escrowNftAddress`.\n3. Run the `initialize` function and confirm the MetaMask pop-up that appears.\n\nOur `Escrow` contract is now initialized and linked to `EscrowNFT`. But before we can use it, there's an additional complication. You'll recall that we added the `onlyOwner` modifier to the `mint()` function in `EscrowNFT`. When a contract that inherits from `Ownable` is deployed, its owner is set to the address that deployed it, which will be your wallet address. But we need it to be owned by `Escrow` so that `escrowEth()` can call `mint()`.\n\nLuckily, `Ownable` provides functionality for transferring ownership, so we can transfer `EscrowNFT` to `Escrow` in the following steps:\n\n1. In `Escrow`, run the view function `contractAddress`. Click on the output to copy it to your clipboard.\n2. In `EscrowNFT`, find the `transferOwnership` function. Paste the contents of your clipboard into the value for `newOwner`.\n3. Run the `transferOwnership` function and confirm the MetaMask pop-up that appears.\n\nNow `Escrow` owns `EscrowNFT` and our system will work. Let's test it out by doing the following:\n\n1. Find the `escrowEth` function in `Escrow`.\n2. Specify your own address, a short duration and a small amount of Ether.","metadata":{"id":1430}}],["1431",{"pageContent":"1. Find the `escrowEth` function in `Escrow`.\n2. Specify your own address, a short duration and a small amount of Ether.\n3. Run the `escrowEth` function and approve the MetaMask pop-up that appears.\n\nIf you attempt to claim your escrowed Ether using either of the redemption functions in `Escrow` before the duration has passed, the transaction should fail with the expected error message. However, if you wait for the duration to pass and then call either of the redemption functions, the transaction will fail for a different reason.\n\nBoth redemption functions call `EscrowNFT`'s `burn()` function to burn tokens. This is an access-controlled function, available only to the token owner and addresses approved by the token owner. If this weren't the case, anyone could burn any token just by calling the function.\n\nTo allow `Escrow` to burn our NFT, we need to give it approval. We can do this in the following steps:\n\n1. In `EscrowNFT`, find the `setApprovalForAll` function.\n2. Copy the address from `Escrow`'s `contractAddress` function output.\n3. Paste in the address as the value for `operator` and specify `true` as the value for `approved`.\n4. Run the `setApprovalForAll` function and confirm the MetaMask pop-up that appears.\n\nOnce approval is set, you should be able to successfully redeem the escrowed Ether from your mature tokens.\n\n## Security and trust considerations for smart contract development\n\nWe've written our escrow system as a way to learn about Solidity development and interacting with smart contracts on the blockchain. To facilitate these outcomes, our contracts make use of a design that is partially insecure and would not be recommended in practice.","metadata":{"id":1431}}],["1432",{"pageContent":"A key part of earning user trust as a smart contract developer is to ensure that you have minimal control over the contracts you deploy. That's why, for example, we designed the `initialize()` function in `Escrow` to only be callable once. If a contract has a large number of privileged functions that make significant changes to its state and behavior, there is a risk that the owner -- or a hacker who manages to compromise the owner's wallet -- will use these functions to steal user funds.\n\nAn unscrupulous developer could create a malicious version of our escrow protocol by doing the following:\n\n1. After deploying `EscrowNFT` but before transferring its ownership, they could call `mint()` to create an Escrow token with an amount of 100.\n2. They could then transfer `EscrowNFT`'s ownership to `Escrow`, and wait for users to start paying Ether to `Escrow` in order to create tokens.\n3. Once `Escrow` had a balance of 100 Ether or more, the developer could redeem their token, successfully stealing all user funds.\n4. Redemption of any subsequent escrow tokens would fail, as the `Escrow` contract would contain insufficient funds.\n\nWhile the evidence of all of this happening would be visible on the blockchain, through events, users may not want or easily be able to look at that information before using the protocol.\n\nAnother, less serious, consideration is that `block.timestamp` is not always accurate. As this value is derived from when Ethereum miners report it, [it can be manipulated slightly](https://dasp.co/#item-8). This will have a negligible effect on escrow periods of multiple days, weeks or months, but could affect very short escrow periods quite significantly.\n\n## What next?\n\nNow that you've got your feet wet with Solidity development, here are some ideas for further development:\n\n- Modify the architecture of the protocol to make it impossible to create a malicious version in the manner described above.","metadata":{"id":1432}}],["1433",{"pageContent":"- Modify the architecture of the protocol to make it impossible to create a malicious version in the manner described above.\n- Create a view function in `Escrow` that tells the user how much Ether is available for redemption.\n- Determine whether the user has approved `Escrow` before attempting to burn tokens. Add a nice error message if they haven't.\n- Create an [ERC-20](https://www.investopedia.com/news/what-erc20-and-what-does-it-mean-ethereum/) token and allow users to escrow it instead of Ether.\n- See if you can rewrite any of the contract functions to use less gas.\n\nYou can find our repl here:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://replit.com/@ritza/Escrow?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1433}}],["1434",{"pageContent":"---\ntitle: Introducing Replit Updates - a changelog\ndescription: Introducing Replit Updates, Ghostwriter, and Comic Sans-sanity!\nslug: introducing-replit-updates\nauthors:\n  - name: Dave Madden\n    title: Support Engineer\n    url: https://replit.com/@dave\n    image_url: https://avatars.githubusercontent.com/u/58042797?s=400&u=ad1218e882cb4ebff060b24b97178562d7ed43a7&v=4\ntags: [updates, changelog, ghostwriter, mobile]\nimage: https://docimg.replit.com/images/updates/2022-10-31/ghostwriterhero.png\nhide_table_of_contents: false\n---\n\n> This is the first edition of Replit Updates - where we get to share what we’ve been up to in the past week! What have we built for you? What have we fixed for you? It’s all here. Read to the end for a peek behind the Repls and into the lives of the engineers building Replit!\n\nThis week we merged 496 pull requests, pushed 1224 commits, and added 349,343 lines of code to our codebases. See what we shipped: 👇\n\n## What we shipped\n\n### Ghostwriter launch\n\nEarlier today we launched [Ghostwriter](https://replit.com/site/ghostwriter) to the public after months of closed beta-testing, and last week the team shipped some final pre-launch improvements to make Ghostwriter faster and more reliable.\n\n<a href=\"http://replit.com/site/ghostwriter\">\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/ghostwriterhero.png\"\n  alt=\"Ghostwriter\"\n  style={{ width: \"100% !important\" }}\n/>\n</a>\n\nThis was a _major_ team effort:\n\n- [Alex](https://replit.com/@alex-jungle-cat) and [Giuseppe](https://replit.com/@giuseppeatreplit) built Complete Code,\n- [Jonathan](https://replit.com/@jnnnthnn-at-replit) and [Krish](https://replit.com/@krishatreplit) built Generate Code and Transform Code,\n- Jonathan and [Arnav](https://replit.com/@ArnavBansal) built Explain Code, and\n- [Muhammad](https://replit.com/@msareini) and [Samip](https://replit.com/@samipdahal) worked on the AI model backing Complete Code.","metadata":{"id":1434}}],["1435",{"pageContent":"- [Muhammad](https://replit.com/@msareini) and [Samip](https://replit.com/@samipdahal) worked on the AI model backing Complete Code.\n\nWhen we launch a new product line like Ghostwriter, it takes more than just engineers building the feature itself: Jonathan, [Ted](https://replit.com/@replitted), [Devin](https://replit.com/@theflowingsky), and [Aman](https://replit.com/@amanm3) built out the onboarding experience and purchase flow you’ll go through as you [try the 14-day free trial](https://replit.com/site/ghostwriter).\n\n### Mobile app magic\n\nIt’s been two weeks since we launched our amazing [mobile app](https://replit.com/mobile) for both Android and iOS and we’ve been shipping improvements based on all your wonderful feedback!\nLast week:\n\n- [Abdel](https://replit.com/@abdelWithReplit) and [Matthew](https://replit.com/@MCChen) lowered the sensitivity of the `shake to provide feedback` feature and gave active users the ability to turn off the `shake` feature entirely.\n- [Ian](https://replit.com/@inkRepl) fixed your mobile keyboard: it no longer covers up the editor or console.\n- Matthew also improved TypeScript and JavaScript code suggestions.\n- And the _entire team_, led by the incredible [Laima Tazmin](https://replit.com/@replitlaima), made improvements to both stability and speed.\n\nWe're always shipping new features and fixes, so be sure to update your app!\n\n### New File History Viewer\n\nThis week we moved the entry point for our new History feature from the nav header to the bottom of each file. [Brian](https://replit.com/@brianpool), [Tyler](https://replit.com/@tyler), and [Moudy](https://replit.com/@moudy) collaborated on this redesign, making an already helpful feature dramatically more convenient to access by file.\n\n**You used to find History here - and pressing the button took you to an entirely different page:**\n\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/oldhist.webp\"\n  alt=\"Replit History 2 in the nav bar\"\n/>","metadata":{"id":1435}}],["1436",{"pageContent":"<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/oldhist.webp\"\n  alt=\"Replit History 2 in the nav bar\"\n/>\n\n**Now you can find the History icon in the lower-right-hand corner of the tab you're working in. And you can use it without leaving the editor:**\n\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/newhist.png\"\n  alt=\"new Replit history function in each tab\"\n/>\n\n### Bradley made all the things faster\n\nYou may have noticed something this week: Replit is faster.\n\nLike, _a lot_ faster.\n\nYou can thank [Bradley](https://replit.com/@bheilbrun). Bradley, as one does, discovered a way to cut our web tail latencies _in half_. Overnight our 95th percentile latency dropped from 1+s to less than 500ms. Check out this absolutely bonkers chart:\n\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/bradleykubernetes.png\"\n  alt=\"Brad made all the slow things go fast\"\n/>\n\n**The top line represents the slowest 5% of requests to Replit.com Before Bradley (BB). The bottom line is the slowest 5% _After_ Bradley (AB).** Bradley is our hero.\n\nWe salute you, Bradley.\n\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/salute.gif\"\n  alt=\"we salute you, Bradley\"\n/>\n\n### Become a teacher on Replit\n\nIf you’ve done any of the 100 Days of Code lessons, you’ve seen the special internal feature we built that lets us [design interactive tutorials directly on Replit](https://building-templates.davidatreplit.repl.co/). We thought it was too good a feature to keep to ourselves, so now _you_ can create your own Replit-native tutorials. [There’s even a contest with prizes:](https://tutorial-jam.replit-community.repl.co/)\n\n<a href=\"http://replit.com/site/ghostwriter\">\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/tutjam.png\"\n  alt=\"join the tutorial jam\"\n/>\n</a>\n\n## What we polished\n\n- [Eddie Nuno](https://replit.com/@eddieatreplit) modified the repl auth token expiration time for better user-experience.","metadata":{"id":1436}}],["1437",{"pageContent":"alt=\"join the tutorial jam\"\n/>\n</a>\n\n## What we polished\n\n- [Eddie Nuno](https://replit.com/@eddieatreplit) modified the repl auth token expiration time for better user-experience.\n- [Toby Ho](https://replit.com/@tobyho) improved the publishing flow to ensure templates are built before they’re published, which makes them faster for every person who uses them - no more installing packages every run!\n- [Madison](https://replit.com/@MadisonFitch) made every teacher’s week when she shipped an improved/more performant Project Overview page. This new version stays speedy even under peak load!\n- We’ve also made our updated brand kit available here: http://replit.com/brandkit . **Please Meme Responsibly™️.**\n\n## Behind the Repls\n\nWe love building Replit, and we work really hard. But we have fun too. Every week at the end of the update, we’re going to share a little peek into some of the _other_ things we’ve gotten up to.\n\n### Comic Sans-sanity\n\nA few weeks ago [Talor](https://replit.com/@TalorAnderson) and [Jonathan](https://replit.com/@jnnnthnn-at-replit) made a deranged bet. _The first bet we’re aware of, by the way, made in [Cycles](https://replit.com/cycles):_\n\n**The challenge: who can code in Comic Sans the longest?**\nYes, we agree: this is madness. Just look:\n\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/talorscreen.png\"\n  alt=\"Comic Sans all the things\"\n/>\n\nAnd, yes, this bet extends to writing code on Replit:\n\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/replitsans.png\"\n  alt=\"Comic Sans is taking over the world!\"\n/>\n\n> _Editor's note: They’re both 100% committed to winning, so it’s likely that many of the new features we ship over the next year will have been written in (shudder) Comic Sans. We would not inflict this on anyone, so please keep Talor and Jonathan in your thoughts._\n\nKeep track of this unhinged experiment on [this Repl](https://comic-sans.taloranderson.repl.co/):\n\n<a href=\"http://replit.com/site/ghostwriter\">\n<img","metadata":{"id":1437}}],["1438",{"pageContent":"Keep track of this unhinged experiment on [this Repl](https://comic-sans.taloranderson.repl.co/):\n\n<a href=\"http://replit.com/site/ghostwriter\">\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-10-31/comicsansrepl.png\"\n  alt=\"days and counting\"\n/>\n</a>\n\n### Debate over the best mechanical keyboard switches rages on\n\nWe talk about the important things too: like which mechanical keyboard switches are best. [Gian](https://replit.com/@gian) thinks MX Browns are little too heavy. [Luis](https://replit.com/@luisreplit) thinks Gian might want to tune them, but Giuseppe insists “Kailh Box Whites are the pinnacle of switches” and the conversation eventually devolved into us laughing at reflections of ourselves in [this YouTube parody](https://youtu.be/uHt01D6rOLI).","metadata":{"id":1438}}],["1439",{"pageContent":"---\ntitle: Infrastructure Upgrades and Mobile Fixes\ndescription: Replit is now faster and the mobile app is better!\nslug: infra-and-mobile\nauthors:\n  - name: Dave Madden\n    title: Support Engineer\n    url: https://replit.com/@dave\n    image_url: https://avatars.githubusercontent.com/u/58042797?s=400&u=ad1218e882cb4ebff060b24b97178562d7ed43a7&v=4\ntags: [updates, performance, infrastructure, mobile]\nimage: https://docimg.replit.com/images/updates/2022-11-07/halflatencyagain.png\nhide_table_of_contents: false\n---\n\nThis week we merged 441 pull requests, pushed 1,172 commits, and added 49,440 lines of code to our codebases. See what we shipped: 👇\n\n## What we shipped\n\n### Matt and Madison made all the fast things..._even faster_\n\n[Last week](/updates/introducing-replit-updates) [Bradley](https://replit.com/@bheilbrun) found a way to cut Replit.com's p95 latency _in half_.\n\nThis week it appears that [Madison](https://replit.com/@MadisonFitch) and [Matt Iselin](https://replit.com/@mattiselin) have **cut latency in half again!**\n\nTake a look at this chart and see if you can tell when we shipped the changes:\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-11-07/halflatencyagain.png\"\n  alt=\"a graph of Replit.com's p95 latency\"\n/>\n\nWhat does this mean for you? It means the slowest 5% of requests to Replit.com now respond in 1/4 the time they did two weeks ago. _And we're not done._\n\n> Editor's Note: if you say \"Madison\" and \"Matt Iselin\" one right after another a few times, they sound exactly the same. This has been extremely confusing for us at times (on account of them actually being two different people), so we thought we should do our civic duty and spread our confusion by sharing it.\n\n### The mobile app keeps getting better\n\nIt’s been three weeks since we launched our amazing [mobile app](https://replit.com/mobile), and we’ve been hard at work making it even better!","metadata":{"id":1439}}],["1440",{"pageContent":"### The mobile app keeps getting better\n\nIt’s been three weeks since we launched our amazing [mobile app](https://replit.com/mobile), and we’ve been hard at work making it even better!\n\n- [Laima](https://replit.com/@replitlaima) and [Abdel](https://replit.com/@abdelWithReplit) added the ability to give your Repl a name as you're creating it.\n- [Ian](https://replit.com/@inkRepl) fixed a bug with the Git plugin so now you can incorporate your version control workflows in mobile without issue!\n- Ian also fixed a bug where the workspace wouldn't scroll to the correct position when the keyboard was open.\n- [Matthew](https://replit.com/@MCChen) fixed a bug where, if an Android user's primary browser was FreeAdblocker, the browser would prevent them from being able to log in to the Replit app. Now the app overrides the default browser for a smooth login!\n\n## What we polished\n\n- [Giuseppe](https://replit.com/@giuseppeatreplit) shipped performance improvements to [Ghostwriter](https://replit.com/site/ghostwriter)'s Explain Code feature.\n- [Samip](https://replit.com/@samipdahal) and [Muhammad](https://replit.com/@msareini) deployed `batched codegen` to help reduce latency for all our Ghostwriter features.\n- [Larry](https://replit.com/@larry-stone) and Aman shipped the just-in-time Cycles purchase experience for Power Ups to make it easier to get started with Ghostwriter.\n- [Eddie](https://replit.com/@eddieatreplit) made your favorite teacher's day with some substantial quality-of-life improvements to Teams for Education including the ability to copy courses and solutions to the next year.\n\n## Behind the Repls\n\n### Jesse conquered the Dome (again)","metadata":{"id":1440}}],["1441",{"pageContent":"## Behind the Repls\n\n### Jesse conquered the Dome (again)\n\nThose of you who've written into Replit Support have probably exchanged emails with [Jesse](https://replit.com/@jesse). (It's possible those emails contained references to [a certain book](https://www.thebeginningofinfinity.com/), but we'll talk about that another time.) What you may not know about Jesse is that he's an accomplished rock-climber, who spent last weekend climbing [Half Dome](https://en.wikipedia.org/wiki/Half_Dome).\n\nJust take a look at this. Yes, these are actual pictures of an actual Jesse climbing the actual rock:\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-11-07/climber.jpg\"\n  alt=\"Jesse climbing Half Dome\"\n/>\n<img\n  src=\"https://docimg.replit.com/images/updates/2022-11-07/hdsunset.jpg\"\n  alt=\"the sun setting as Jesse climbs\"\n/>\n\nThis made Replit Founding Engineer [Faris](https://replit.com/@masfrost) extremely uncomfortable until Talor helpfully reminded him that \"less people die climbing than they do _not_ climbing.\" This made Faris feel better and all was right with the world for a moment.","metadata":{"id":1441}}],["1442",{"pageContent":"---\ntitle: Bounties, Status Manager, Filetree improvements, and more\ndescription: Earn Cycles, monitor your Repls, and all the fixes\nslug: bounties-status-manager\nauthors:\n  - name: Bardia Pourvakil\n    title: Support Engineer Manager\n    url: https://replit.com/@bardia\n    image_url: https://avatars.githubusercontent.com/u/24982590?v=4\ntags: [updates, bounties, status-manager, filetree, mobile]\nimage: https://docimg.replit.com/images/updates/2022-11-22/bounty.png\nhide_table_of_contents: false\n---\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/SzWxIukWAa0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nSHPNG SZN is still in full gear with new features, bug fixes and polish abound! (shameless plug for our [swag shop](https://shop.replit.com/collections/frontpage) where you can cop some SHPNG SZN gear)\n\nIn the last two weeks, we merged 762 pull requests, here are the highlights:\n\n## Bounties\n\nLast week, we officially launched Replit's first marketplace, [Bounties](https://replit.com/bounties)! Describe your task —> get software built by Replit's top creators. Check out [a case study](https://blog.replit.com/bounties-deel-case-study) on how Deel used Bounties to get an internal site built in just one week.\n\nAs a Replit community member, you can earn Cycles by completing Bounties. Learn more [here](/bounties/bounty-hunting).\n\n![Example Bounty](https://docimg.replit.com/images/updates/2022-11-22/bounty.png)\n\nHuge shout out to the Bounties team for their hard work on this project: Michael Hadley, Talor Anderson, Søren Rood, Aman Mathur, and Horacio Lopez.\n\n## Status Manager\n\nWe just launched a Status Manager, where you can see all your running Repls: restart, kill, see logs, etc, it's awesome! Read more about it here on our [blog](https://blog.replit.com/repl-status), from its makers: Joe Thom and Lincoln Bergeson.","metadata":{"id":1442}}],["1443",{"pageContent":"![Status Manager](https://docimg.replit.com/images/updates/2022-11-22/status.jpg)\n\n## Mobile App\n\n- Added a keyboard toolbar to the shell to allow for key inputs that aren't available on mobile keyboards like `Esc`, `Tab`, `Ctrl` — Matthew Chen\n- Added ability to accept Ghostwriter suggestions in the keyboard toolbar when in the editor — Ian Kirkpatrick\n- Added owner username to Repl cards and made language icons more prominent — Abdel Rahman Elleithy\n\n## Polish\n\n### Workspace\n\n- Added red indicator when there are unread messages in Chat and Threads — Moudy Elkammash\n- Fixed issue with `.pedit` files where mousing down outside and then mousing up inside the canvas caused a crash — Tiga Wu\n- Added multiselect modifier key setting in Settings — Xiaoyi Chen\n- Updated tabs to scroll into view when they become active — Moudy Elkammash\n- Switched default to position of new panes to top right instead of top left if there are two panes open — Tyler Angert\n- Added a keyboard shortcut indicator to the hover state of the CLUI button (magnifying glass) in the header — Giuseppe Burtini\n- Fixed incorrect shortcut reference for Workspace Shortcuts in the Help menu from `Ctrl+.` on Windows/Linux to `Ctrl+K` — Giuseppe Burtini\n- Fixed issue with autocomplete popover positioning displaying on iPads — Alexandre Cai\n- Fixed issue with unwanted text selection while dragging — Moudy Elkammash\n- Disabled code formatter when code intelligence setting is toggled off — Toby Ho\n\n### Threads\n\nAll courtesy of Arnav Bansal:\n\n- Fixed issue where Threads weren't live updating\n- Fixed issue with up/down arrow keys not working in Threads input field\n- Updated links in Threads to open in a new tab rather than replacing your Replit session\n\n### Filetree\n\nAll courtesy of Xiayoi Chen:\n\n- Added the ability to drag and drop multiple files/folders\n- Updated colors of active files/folders in the file tree to grey-ish from blue\n- Redesigned hover states when dragging and dropping files/folders","metadata":{"id":1443}}],["1444",{"pageContent":"- Updated colors of active files/folders in the file tree to grey-ish from blue\n- Redesigned hover states when dragging and dropping files/folders\n- Made borders of selected files/folders flush when multiselecting\n- Fixed stuttering when dragging to move files and folders\n- Added the ability to drag one or multiple files to a pane or the pane header\n- Fixed issue with search term that appears in the folder name highlighting matches in the file name\n\n### Miscellaneous\n\n- Fixed text truncation bug on recent Repls titles on home page — Joe Thom\n- Redesigned notice, confirmation, and error toasts — Conner Ow\n- Fixed 100 Days of Code streak logic to account for daylight savings time — Madison Fitch\n- Added Tutorial Jam winning tutorials to the [Learn](https://replit.com/learn) page — Phil MacEachron\n- Standardized page widths for the Home, Templates, Community, Teams, Learn, and Curriculum pages — Moudy Elkammash\n- Redesigned Repl cards on the My Repls page — Omar Abdul-Rahim\n- Add support for `@username` handles for YouTube social links in user profiles — Shane Vandegrift\n- Fixed incorrect background styling of tags section on Following feed items — Mathurah Ravigulan\n- Fixed mobile responsiveness for tutorial cards on the Learn page — Phil MacEachron\n- Prevented public search indexing of Repls published less than 24 hours ago or have less than 1 like — Jeremy Press\n\n### Teams for Edu\n\n- Updated student projects to hide `.tutorial` folder — Xiaoyi Chen\n- Fixed a bug in group submissions where the team's name for students instead of the student's username — Ted Summer\n\n### CodeMirror\n\nAs our code editor runs on CodeMirror, we thought you should know about upstream fixes we've pulled down. Arnav recently upgraded us to all the latest CodeMirror packages, which came with the following notable changes:\n\n- Fixed a bug that caused deletion commands on non-empty ranges to incorrectly return false and do nothing, causing the editor to fall back to native behavior","metadata":{"id":1444}}],["1445",{"pageContent":"- Fixed a bug that caused deletion commands on non-empty ranges to incorrectly return false and do nothing, causing the editor to fall back to native behavior\n- CSS completion now supports a number of additional recent and semi-standardized pseudo-class names\n- Deprecated HTML tags have been removed from completions\n- Made JS `completionPath` handle `?.` syntax\n- Added proper indentation handling of Python `else` clauses in `try` statements\n- Work around a Chrome bug where it inserts a newline when you press space at the start of a wrapped line\n- Align `rectangularSelection`'s behavior with other popular editors by making it create cursors at the end of lines that are too short to touch the rectangle\n- Fixed an issue where coordinates on mark decoration boundaries were sometimes taken from the wrong side of the position\n- Prevent scrolling artifacts caused by attempts to scroll stuff into view when the editor isn't being displayed\n- Fixed a crash when trying to scroll something into view in an editor that wasn't in the visible DOM\n- Fixed an issue where content on long wrapped lines could fail to properly scroll into view.","metadata":{"id":1445}}],["1446",{"pageContent":"---\ntitle: A New Sidebar (and Header)\ndescription: We redesigned the Workspace Sidebar and Header, and polished a lot of stuff.\nauthors:\n  - name: Bardia Pourvakil\n    title: Support Engineer Manager\n    url: https://replit.com/@bardia\n    image_url: https://avatars.githubusercontent.com/u/24982590?v=4\ntags: [updates, workspace, sidebar, mobile]\nimage: https://docimg.replit.com/images/updates/2022-12-05/sidebar-redesign.png\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of Replit Updates!\n\nIn the last two weeks, we merged 579 pull requests across our codebases, here are the highlights:\n\n## Workspace Sidebar + Header Redesign\n\nWe redesigned the sidebar to make it into a launcher for tools and files. Previously, we had a bunch of tools (like packager and debugger) which were “trapped” inside of the sidebar. This redesign lets us open both tools and files as tabs, and makes it much easier for us to set up the workspace for extensions. We also redesigned the header to make it more compact and focused.\n\n![Sidebar redesign](https://docimg.replit.com/images/updates/2022-12-05/sidebar-redesign.png)\n\n## Learn Java with BloomTech\n\nWe just added a new beginner-friendly [course](https://replit.com/learn/bloomtech-sketch-app) to our Learn page! In this series of daily lessons taught by BloomTech's lead Java instructor, you will learn Java by creating an end-to-end application that allows you to draw and paint on a canvas.\n\n## Mobile App Updates\n\n- Added teams to the mobile app, which can be accessed from the account tab. — Abdel Rahman Elleithy\n- Added Replit Reps badges to profile pag. — Ian Kirkpatrick\n- Added a new page to view Cycles transactions. — Abdel Rahman Elleithy\n- Fixed some login issues. — Matthew Chen.\n- Stopped showing owner picker if user doesn't have any teams. — Abdel Rahman Elleithy\n- Stopped showing Edit/Delete Repl Metadata buttons for users that don't own the Repl. — Ian Kirkpatrick\n- Stopped showing confusing PWA banner. — Laima Tazmin\n\n## Workspace Polish","metadata":{"id":1446}}],["1447",{"pageContent":"- Stopped showing Edit/Delete Repl Metadata buttons for users that don't own the Repl. — Ian Kirkpatrick\n- Stopped showing confusing PWA banner. — Laima Tazmin\n\n## Workspace Polish\n\n- Added border styles for active/inactive, floating/tiled and dragging states for panes. — Moudy Elkammash.\n- Added a button to the navbar to access the Chat feature. — Devin Halladay\n- Added focus indicator for Console and Shell trash and search UI. — Talor Anderson\n- Upgraded `.draw` files to use the latest Excalidraw, which comes with image support, more advanced drawing tools, and much more. — Jeremy Press and Ornella Altunyan\n- Improved the visual design of the new tab pane. — Moudy Elkammash\n- Increased the max width of file path tooltip to account for arbitrarily long paths. — Moudy Elkammash\n- Fixed an issue issue where the autocomplete menu would flash while typing. — Xiaoyi Chen\n- Fixed a bug where Select All Occurrences code action wasn't working. — Moudy Elkammash\n- Fixed a bug where the Kaboom learn tab wasn't working. — Tiga Wu\n- Fixed an issue with .pedit files not working. — Tiga Wu\n- Fixed an issue where other users' cursor tooltips would render outside the code editor, covering other pieces of UI. — Alexandre Cai\n- Fixed a bug with JSX parsing that led to indentation issues. — Brian Pool\n- Fixed a bug where you needed to hit the down arrow twice after opening up file search to start going through the results. — Moudy Elkammash\n- Removed the refresh app component in the navbar. — Gian Segato\n\n## Teams for Edu Fixes\n\n- The checkbox for making the team invite privacy links is moved to the team creation modal instead of the manage members modal. — H\n- Other ways to add users such as from CSV or from google classrooms are disabled for teams with privacy invites. — H","metadata":{"id":1447}}],["1448",{"pageContent":"---\ntitle: 2023 Breakthrough\ndescription: Shipped a ton of new features over the end of 2022\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: [updates, cycles, databases, bounties]\nimage: https://docimg.replit.com/updates/tip.png\nhide_table_of_contents: false\n---\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/oOs-Ur7z_VA\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\nWelcome to the first edition of Replit Updates in 2023!\n\nIn the past two months, the Replit engineering team shipped tons of new features and merged a whopping **2311** pull requests!\n\nIn just the past week, 253 pull requests have been merged. Congrats to our top contributor [Madison Fitch](https://replit.com/@MadisonFitch) with 115 commits. Let's dive into some of the major features we released to production!\n\n## Databases\n\nWe've partnered with [Neon](https://neon.tech) to give you the power to connect to a PostgreSQL database from **within your Repl**. In the Tools section of the left sidebar, you should see an elephant icon which will open up the PostgreSQL pane.\n\n![databases](https://docimg.replit.com/updates/db.png)\n\nSetting up a database has never been easier! Hit the button to set up your database, and your Secrets will automatically be populated to get the database up and running.\n\n![environment vars](https://docimg.replit.com/updates/env.png)\n\nYou can use an ORM like Prisma or Sequelize as well. Or if you like writing raw SQL, we support that too. Now you've got a powerful database fueling the fire of your latest and greatest Repl!\n\n## Tipping\n\nFeeling generous? You can now tip your favorite creators with [Cycles](/cycles/about-cycles) and earn them from others by creating awesome content.","metadata":{"id":1448}}],["1449",{"pageContent":"## Tipping\n\nFeeling generous? You can now tip your favorite creators with [Cycles](/cycles/about-cycles) and earn them from others by creating awesome content.\n\n![tipping](https://docimg.replit.com/updates/tip.png)\n\nOn top of the ability to give Cycles to others, there is a global leaderboard showcasing the most generous community members.\n\n![tipping leaderboard](https://docimg.replit.com/updates/tlb.png)\n\n## Custom Themes\n\nTo finish off 2022, we released the most-requested feature of all time—Themes. Now you can create your own theme or explore and apply Themes created by your fellow community members.\n\n![custom themes](https://docimg.replit.com/updates/exp.png)\n\n## Cycles Transaction History\n\nOn the [Cycles page](https://replit.com/cycles), you will now notice a new **Transactions** tab.\n\n![cycle transactions](https://docimg.replit.com/updates/tra.png)\n\nThe Transactions tab shows the amount of Cycles going in and out of your account, as well as a detailed account of what you spent your Cycles on—making it easier to organize and track usage.\n\n## New Bounties Features\n\nBounties have now been released to **all** Replit users. On top of that, a ton of cool features have been added to bounties after the launch.\n\n- Bounties now have a pre-filled template as part of the posting flow\n- You can now edit your Bounties\n- You can sort Bounty applications by Recommended, Newest, and Oldest\n- You can now escalate and report Bounties to the Moderation team\n\nTaking a look at [Amjad Masad's tweets](https://twitter.com/amasad), you will find some crazy and amazing [Bounties](https://twitter.com/amasad/status/1616345244064444416?s=20&t=B6wk5GVKIHZ_OneUdCxP3w) and [case studies](https://twitter.com/hsbrouck/status/1617122822475907077).","metadata":{"id":1449}}],["1450",{"pageContent":"---\ntitle: Replit India, Git upgrade, and Polish\ndescription: We launched Replit India, seamless Git integration with the shell, and did a ton of polishing!\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: [updates, cycles, bounties, polish]\nimage: https://docimg.replit.com/updates/thanksgiving.png\nhide_table_of_contents: false\n---\n\nWelcome back to the Replit Changelog!\n\nWe merged a total of **866** pull requests in the past two weeks. In addition to the major launches we shipped this week, we also have some small polish changes.\n\n## Replit India\n\nWe launched [Replit India](https://replit.com/india) to improve the speed and performance of the coding experience for developers located far from the United States. You can now choose between the United States and the India server clusters.\n\n![Replit india](https://docimg.replit.com/updates/thanksgiving.png)\n\nNavigate to your [account](https://replit.com/account), change your **server location**, and fire your Repls up with minimal latency.\n\n![india server](https://docimg.replit.com/updates/india-server.png)\n\n## Git in the Shell\n\nWe just shipped a smoother Git experience in the shell. Instead of manually entering your Git credentials for each command, simply grant Replit access to your credentials, allowing for seamless control of your repositories without any authentication issues.\n\n![Git in the shell](https://docimg.replit.com/updates/git.gif)\n\nMany thanks to [Ryan](https://replit.com/@ryantmreplit) for all his hard work in making the Git experience better for everyone.\n\n## Repl Shop Upgrade\n\nReady to gear up in Replit merch? Check out the new and upgraded [Repl Shop](https://shop.replit.com).\n\n## Bounties Page Redesign\n\nThe [Bounties page](https://replit.com/bounties) has undergone a redesign. On top of looking better, you can now view Bounties you've posted and Bounties you're participating in.","metadata":{"id":1450}}],["1451",{"pageContent":"The [Bounties page](https://replit.com/bounties) has undergone a redesign. On top of looking better, you can now view Bounties you've posted and Bounties you're participating in.\n\n![new Bounties page](https://docimg.replit.com/updates/bounties.png)\n\n## Anon Repl Redesign\n\nHave you checked out the [Replit dog](https://replit.com/dog) or the [Replit cat](https://replit.com/cat) before? Unfortunately you won't be directed to a cute dog or cat GIF, instead you'll land on an **Anonymous Repl**. Anonymous Repls are Repls that don't have an owner and give you a complete surprise if you fork them.\n\nThanks to our famous and amazing designer Clément Rozé, also known as [Bookie0](https://replit.com/@Bookie0), the page for anonymous Repls has been updated to use our [Design System](https://blog.replit.com/rui-eng)\n\n![anon Repl page](https://docimg.replit.com/updates/anon.png)\n\nAnonymous Repls were more widely used in the past but are now deprecated. If you want to learn more about anonymous Repls, check out the [blog post](https://blog.replit.com/anon).\n\n## Markdown Component Redesign\n\nDid you know you can have an element that hides and shows content in Markdown files? You can use the `<details>` and `<summary>` html tags to do this as in the image below:\n\n![details-summary in Markdown](https://docimg.replit.com/updates/md-show-hide.png)\n\nWe fixed these components that used to render with poor spacing.\n\nSpeaking of Markdown, we recently published a [Markdown tutorial](/tutorials/markdown) covering everything from basic to advanced syntax, as well as custom renderers for Loom videos, Figma canvases, and more.\n\n## Badge Overflow fix\n\nWho doesn't love to have tons of badges on their Replit profile? [Faris](https://replit.com/@masfrost) sure loves to! Before, creators with many badges would find some of them hiding behind the showcased Repl on their profile.\n\n![badge overflow](https://docimg.replit.com/updates/badge-overflow.png)","metadata":{"id":1451}}],["1452",{"pageContent":"![badge overflow](https://docimg.replit.com/updates/badge-overflow.png)\n\nBe sure to show your gratitude to the [CSS grandmaster](https://replit.com/@Bookie0) for this and lots of other UI polish.\n\n![faris profile look noice now](https://docimg.replit.com/updates/faris.png)","metadata":{"id":1452}}],["1453",{"pageContent":"---\ntitle: Migrations & Bounty Reputation system\ndescription: Migrated old Repls to nix and shipped the Bounty Reputation system\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: [updates, nix, bounties, typescript]\nimage: https://docimg.replit.com/images/animations/nix-migration.gif\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of the Replit Changelog!\n\nIn the past two weeks we merged 915 pull requests. Our top contributor this week is [Bookie](https://replit.com/@Bookie0) who landed 58 merged pull requests.\n\n# Nix Migration\n\n![migrating to nix](https://docimg.replit.com/images/animations/nix-migration.gif)\n\nBefore incorporating Nix, Replit used [Polygott](https://github.com/replit/polygott) as its primary language support engine. However, with the adoption of Nix, we have begun phasing out Polygott. Some older Repls may still be using Polygott, and if you fork one of these older Repls, your Repl will also run on Polygott. However, now Replit will automatically migrate the forked Repl to use Nix.\n\n# Bounty Reputation System\n\nYou can now review Bounty Hunters and receive ratings for your work on Bounties.\n\n![bounty review](https://docimg.replit.com/images/animations/review-hunter.gif)\n\nAfter receiving a review, your reputation can be viewed and evaluated by a Bounty Poster.\n\n![bounty review](https://docimg.replit.com/images/animations/bounty-hunter-review.gif)","metadata":{"id":1453}}],["1454",{"pageContent":"---\ntitle: Ghostwriter Chat, Hacker Pro, and Extensions\ndescription: We launched Ghostwriter Chat and Hacker Pro, and Extensions are out to Explorers\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: [updates, ai, ghostwriter, plans, extensions]\nimage: https://docimg.replit.com/updates/gw-banner.png\nhide_table_of_contents: false\n---\n\nWelcome back to the Changelog!\n\nIn the past two weeks we merged 750 pull requests. Our top contributor this week is [Phil MacEachron](https://replit.com/@phil-mac) who landed 55 merged pull requests.\n\n# Ghostwriter Chat\n\n![Ghostwriter Chat](https://docimg.replit.com/updates/gw-banner.png)\n\nAll Ghostwriter subscribers now have access to [Ghostwriter Chat](https://replit.com/site/ghostwriter), which lets you talk to a conversational AI pair programmer that has the context of your project. Ghostwriter Chat also comes with a debugger that can identify and assist in resolving errors (Ghostwriter Debugger is only available in Python and JS-based Repls).\n\n<video src=\"https://replit.com/public/images/ghostwriter/demos/chat/context.mp4\" controls autoPlay loop></video>\n\n# Pro\n\nWe have a new plan, Pro, which comes with some amazing benefits such as additional storage (10GiB), an even faster development environment (4GiB RAM and 4 vCPUs), and all of Ghostwriter's features (including Ghostwriter Chat for a limited time)!\n\nCompare all our plans [here](https://replit.com/pricing).\n\n![shiny hacker pro](https://docimg.replit.com/updates/shiny.gif)\n\n# Extensions\n\nReplit Extensions have been released to Explorers. You can now install an Extension in the Workspace from the store.  If you want to build an Extension, join the waitlist for the [Extension Developer Beta](https://replit.com/@replit/Extensions-Beta).\n\n![adding an extension](https://docimg.replit.com/images/animations/open-extension.gif)\n\n# New Replit Badge","metadata":{"id":1454}}],["1455",{"pageContent":"![adding an extension](https://docimg.replit.com/images/animations/open-extension.gif)\n\n# New Replit Badge\n\n[Nathan Pham](https://replit.com/@nathan-pham), one of our interns, updated the \"Made with Replit\" badge, which you can [add to any of your Replit projects](https://docs.replit.com/hosting/add-a-made-with-replit-badge-to-your-webview) (it comes by default on all HTML/CSS/JS Repls).\n\n![new badge](https://docimg.replit.com/updates/badge.png)","metadata":{"id":1455}}],["1456",{"pageContent":"---\ntitle: Git UI, Tab Management, and Themes on Mobile\ndescription: We launched a new Git UI, improved tab management, and enabled Themes on Mobile!\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: [updates, git, tabs, bounties, extensions]\nimage: https://docimg.replit.com/updates/cover-gitui.png\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of Replit Updates!\n\nIn the past two weeks we merged a total of 933 pull requests. Our top contributor this week is [Madison Fitch](https://replit.com/@motzyball) who landed 79 merged pull requests.\n\n# New Git UI\n[Brian Pool](https://replit.com/@brianpool) has been working tirelessly on improving the experience with Git and Replit.  If you've got [Explorer mode](https://replit.com/account#roles) enabled, you should see a new interface for interacting with Git.\n\n![New Git UI](https://docimg.replit.com/updates/gitui.png)\n\nYou can now seamlessly commit, push, create pull requests on GitHub, and view Git History with this new feature.\n\n![Git history](https://docimg.replit.com/updates/git-switch.png)\n\n# Tab Management\nClicking on a tab now allows you to copy the link to it, toggle folds, and switch to another file without opening up the file tree.\n\n![Tab Dropdown](https://docimg.replit.com/updates/dropdown.png)\n\nClicking on the three dots in the top-right corner of a pane or hitting **CMD/CTRL+J** Opens another dropdown that allows you to manage tabs and panes without ever leaving your keyboard!\n\n![Pane Options](https://docimg.replit.com/updates/move.png)\n\nTry using **CMD+J** followed by **CMD+SHIFT+ARROWLEFT** or **CMD+ARROWLEFT** to move focus and navigate around the screen!\n\n# Mobile Themes","metadata":{"id":1456}}],["1457",{"pageContent":"![Pane Options](https://docimg.replit.com/updates/move.png)\n\nTry using **CMD+J** followed by **CMD+SHIFT+ARROWLEFT** or **CMD+ARROWLEFT** to move focus and navigate around the screen!\n\n# Mobile Themes\nCustom Themes are now available in the most recent version of the Replit mobile app!  Install the latest update on the App Store or the Google Play Store and you'll be able to manage and switch between your favorite Themes from the Account page.\n\n<img src=\"https://docimg.replit.com/updates/mobile-themes.jpg\" style={{ maxHeight: '90vh' }}/>\n\n# Extensions Developer Docs\nThe [Extension Developer Docs](https://docs.replit.com/extensions/) just landed.  If you're interested in making an Extension of your own, apply for early access [here](https://replit.com/@replit/Extensions-Beta).\n\n# Bounties Summary\nYou can now see the total amount of cash available from open Bounties in the sidebar.\n\n![Bounty Summary](https://docimg.replit.com/updates/bounty-summary.png)","metadata":{"id":1457}}],["1458",{"pageContent":"---\ntitle: Bounties Services and polish\ndescription: We redesigned the Multiplayer modal, added Services, and surfaced what Repls are included in your plan.\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: [bounties, services, multiplayer]\nimage: https://docimg.replit.com/updates/services.png\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of Replit Updates!\n\nIn the past two weeks we merged a total of 874 pull requests. Our top contributor this week is [Moudy Elkammash](https://replit.com/@moudy) who landed 87 merged pull requests.\n\n# Launches & New Features\n\n## Multiplayer Menu Redesign\n\n[Devin Halladay](https://replit.com/@theflowingsky) redesigned the multiplayer popover menu you use to invite people to your Repl with. Easily access, manage and invite collaborators from this menu.\n\n![Multiplayer popover redesign](https://docimg.replit.com/updates/multiplayer.png)\n\n## Bounties Services\n\nProgrammers are talented in many different areas, and some Bounties may not match the the skillset you offer. We've turned the model around so that you as a Bounty Hunter can name your price and post a listing of what **you** want to build for others.\n\nAt the moment, posting a Bounty Service has been whitelisted to a small group of users. If you want to post a service, you can [sign up for access](https://replit.typeform.com/to/H3LScOzC), or ask one of these amazing creators to build something cool for you!\n\n![Bounty Services](https://docimg.replit.com/updates/services.png)\n\n## Billing polish\n\nYou can now see what Repls are included in your plan as well as the ones you are spending cycles on.\n\n![Plan Surfacing](https://docimg.replit.com/updates/plan-surfacing.png)\n\n# Workspace polish\n\nWe've done a lot of polishing Replit workspace in the past two weeks. Here are some highlights.\n\n## 1. LSP","metadata":{"id":1458}}],["1459",{"pageContent":"![Plan Surfacing](https://docimg.replit.com/updates/plan-surfacing.png)\n\n# Workspace polish\n\nWe've done a lot of polishing Replit workspace in the past two weeks. Here are some highlights.\n\n## 1. LSP\n\nHaving two of the same TypeScript files open at the same time and coding in either of them would cause the Language Server Protocol (LSP) to hallucinate and show errors that didn't exist. [Giuseppe](https://replit.com/@giuseppeatreplit) fixed this bug, providing everyone with a better TypeScript experience on Replit.\n\n## 2. New tab focus\n\nClicking on the \"+\" icon next to your tabs wouldn't focus the search bar. Opening a new tab should automatically place your focus there and enable you to search for the things you need faster.\n\n## 3. Scala Syntax Highlighting\n\nRecently, if you had `var hola = '\"'` in your Scala code, the syntax highlighting wouldn't display correctly. [Sergei](https://replit.com/@SergeiChestakov) swiftly created a fix for this, improving the development experience for Scala developers.\n\n## 4. Markdown commenting\n\nDid you know you can add code comments in Markdown files? There was an issue where `cmd/ctrl + /` keyboard shortcut was highlighting the entire file - now it works as expected.\n\n## 5. JSX Commenting\n\nCommenting out React Components with the `cmd/ctrl + /` keyboard shortcut used to result in normal Javascript comments `//` being used instead of a block comment `{/* ... */}`. Thanks to [super-fast-shipping Sergei](https://replit.com/@SergeiChestakov), this issue has been resolved.\n\n# New Templates and Repls\n\n### [GPT-4 Chat UI](https://replit.com/@zahid/GPT-4-Chat-UI?v=1)\n[Zahid Khajawa](https://replit.com/@zahid) made a user interface capable of using GPT-4 as well as GPT-3.5-turbo.  Simply provide your own API key and you've got a fully-functional Chat UI.  Check it out at https://replit.com/@zahid/GPT-4-Chat-UI?v=1\n\n### [OpenAI Node.js GPT-4](https://replit.com/@replit/OpenAI-Nodejs-GPT-4?v=1)","metadata":{"id":1459}}],["1460",{"pageContent":"### [OpenAI Node.js GPT-4](https://replit.com/@replit/OpenAI-Nodejs-GPT-4?v=1)\nReplit has a [Node.js template](https://replit.com/@replit/OpenAI-Python-GPT-4?v=1) that allows you to access the GPT-4 AI Model using Node.js\n\n### [OpenAI Python GPT-4](https://replit.com/@replit/OpenAI-Python-GPT-4?v=1)\nIf you're a python developer, you can use GPT-4 by accessing the OpenAI API in [this template](https://replit.com/@replit/OpenAI-Python-GPT-4?v=1).\n\n# Content\n\n## [Building Ghostwriter Chat](https://blog.replit.com/ghostwriter-building)\nSee how Replit built Ghostwriter Chat, how it works, and some tips on how to use it better.  [Read More](https://blog.replit.com/ghostwriter-building).\n\n## [An update to cover pages](https://blog.replit.com/new-cover-page)\nA couple of weeks ago, Repl cover pages were extremely cramped, only allowing a very small view of a Repl's output.  We've expanded the cover page to utilize almost the entire screen, enabling you to have a better view of the Repl you're browsing, and have all the social content accessible from the side at all times.  Read more on the [blog post](https://blog.replit.com/new-cover-page).\n\n![cover page update](https://blog.replit.com/images/new-cover-page/new-cover-page.png?v=1679415104765)\n\n## [Outbount Data Transfer Limits](https://blog.replit.com/announcing-outbound-data-transfer-limits)\nBeginning April 7th, Replit will start enforcing limits on the amount of outbound data that developers can transmis from their Repls.  See the [blog post](https://blog.replit.com/announcing-outbound-data-transfer-limits) for more information.\n\n## [Applications of Generative AI](https://youtu.be/IAbhei16pL8)\nWatch AI Legends Amjad Masad, Jim Fan, and Michele Catasta talk about advancements in Generative AI, the NVIDIA GTC event, and multi-modality.  [Watch on youtube](https://youtu.be/IAbhei16pL8)","metadata":{"id":1460}}],["1461",{"pageContent":"---\ntitle: Connection stability, bandwidth, and polish\ndescription: Less Repl reconnects for Pro, Hacker and Teams users, introduced outbound data transfer limits, and more.\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: []\nimage: https://docimg.replit.com/updates/egwess.png\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of Replit Updates!\n\nIn the past two weeks we merged a total of 906 pull requests.\n\n# Features & Launches\n\n## Less Repl Reconnects\n\nRepls are computers that live in the cloud. If the virtual machine behind your Repl disconnects, you will lose your network link and your Repl will restart, interrupting your coding session.\n\nAll users on Hacker, Pro, or Teams plans will see a 10x reduction in container restarts while coding in the Workspace. Now you can code for multiple hours straight without a single restart.\n\nSee the [blog post](https://blog.replit.com/regular-vms) and our [partnership with Google Cloud](https://blog.replit.com/google-partnership).\n\n## Outbound Data Transfer Limits\n\nOutbound Data Transfer, often referred to as bandwidth or egress, is the amount of data your Repl transmits to users and extenal services. As of April 7th, we have started to enforce this limit.\n\nWe started limiting egress since abusive Repls were keeping costs high. Now that we are paying for less abuse, we used our savings to enable [non-pre-emptible VMs](#less-repl-reconnects).\n\n![bandwidth pricing](https://blog.replit.com/images/outbound-data-transfer/pricing-table.png)\n\nOn the [Account Page](https://replit.com/account) under Resource Usage, you will see a meter for Outbound Data Transfer. Regardless of your plan, you can increase your monthly bandwidth quota for ten cycles per GiB.\n\n![data transfer indicator](https://docimg.replit.com/updates/egwess.png)\n\n## Tab Dropdown Options","metadata":{"id":1461}}],["1462",{"pageContent":"![data transfer indicator](https://docimg.replit.com/updates/egwess.png)\n\n## Tab Dropdown Options\n\nClicking on the header of a file tab will show a dropdown menu. We've added the options to copy the file path, copy the link to the file, and even download it!\n\n![dropdown](https://docimg.replit.com/updates/dropdwn.png)\n\n# Workspace Bug Fixes\n\n## Search Priority\n\nIn a large codebase, there are often many files with the same name. Previously if you opened the command bar and searched for a file, all matches would display in random order. Files are now organized hierarchically, or by file depth.\n\n### Before\n\n<img src=\"https://docimg.replit.com/updates/search-order-before.png\" width=\"400\"/>\n\n### After\n\n<img src=\"https://docimg.replit.com/updates/search-order-after.png\" width=\"400\"/>\n\n## Declaration Highlighting\n\nThe `declare` keyword in TypeScript files were previously not highlighted as valid keywords. [Sergei Chestakov](https://replit.com/@SergeiChestakov) smashed this bug almost instantly.\n\n### Before\n\n<img src=\"https://docimg.replit.com/updates/declare-before.png\" width=\"400\"/>\n\n### After\n\n<img src=\"https://docimg.replit.com/updates/declare-after.png\" width=\"400\"/>\n\n## Type Folding\n\nYou can now fold types and interfaces in the editor! Huge thanks to [Giuseppe Burtini](https://replit.com/@giuseppeatreplit) who implemented this fix.\n\n<img src=\"https://docimg.replit.com/updates/fold-interface.png\" width=\"400\"/>\n\n# Polish\n\n## Location Alignment\n\nThe Location map pin on user profiles wasn't aligned with the text correctly. The polish king [Bookie0](https://replit.com/@Bookie0) identified and fixed this pesky CSS issue.\n\n### Before\n\n<img src=\"https://user-images.githubusercontent.com/64614924/229367734-c5619fac-336c-416d-ad49-66150a81cdf5.png\" width=\"400\"/>\n\n### After\n\n<img src=\"https://user-images.githubusercontent.com/64614924/229367733-0751ec58-1d3c-4337-bb8f-7096b018ceac.png\" width=\"400\"/>\n\n## Account Dropdown Hover State","metadata":{"id":1462}}],["1463",{"pageContent":"### After\n\n<img src=\"https://user-images.githubusercontent.com/64614924/229367733-0751ec58-1d3c-4337-bb8f-7096b018ceac.png\" width=\"400\"/>\n\n## Account Dropdown Hover State\n\nWhen opening the dropdown in the sidebar by clicking on your username or profile image, the items in the dropdown didn't change color if you hovered over them. Once more, [Bookie0](https://replit.com/@Bookie0) hopped in and saved the day with his amazing CSS skills!\n\n### Before\n\n<img src=\"https://user-images.githubusercontent.com/64614924/227723773-ac46ebf9-f53c-47e9-97af-bed026eb9ef3.png\" width=\"400\"/>\n\n### After\n\n<img src=\"https://user-images.githubusercontent.com/64614924/227723775-b6fc4917-029c-4940-b9dc-d22a9a702cb9.png\" width=\"400\"/>","metadata":{"id":1463}}],["1464",{"pageContent":"---\ntitle: Bounties Chat, Deployments, and LSP\ndescription: We added a realtimve chat system for Bounties, added a new Deployments product, and improved the LSP experience\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: []\nimage: https://blog.replit.com/images/deployments-launch/release-dropdown.png?v=1681402208696\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of the Replit Changelog!\n\nIn the past two weeks, we merged a total of 880 Pull Requests.\n\n## Bounties Chat\n\nWe've implemented a realtime chat system where bounty posters and bounty hunters can communicate. Simply click the **Chat** button if you are actively working on/monitoring a bounty, and start communicating seamlessly on-platform.\n\n![Bounty Chat](https://docimg.replit.com/updates/bountychat.png)\n\n## Deployments\n\nMany users are familliar with their Repls restarting, crashing, going to sleep, and taking forever to wake up. Replit Deployments gives you the ability to host a stable project, which stays awake by default.\n\nHit the **Release** button in the top-right corner of your Repl to release your project to the world.\n\nTo get started with Deployments, check out the [documentation](https://docs.replit.com/category/deployments).\n\n![Deployment](https://blog.replit.com/images/deployments-launch/release-dropdown.png?v=1681402208696)\n\n## LSP Indicator\n\nLSP (Language Server Protocol) can massively impact your coding experience. It offers code snippets, intellisense, and more. We've added a small indicator that lets you know if you are connected to LSP.\n\nIf the indicator shows that an error occurred, you can simply refresh the LSP by clicking on the indicator instead of restarting the Repl and refreshing the page.\n\n![LSP Indicator](https://docimg.replit.com/updates/lsp.png)\n\n## Extensions & Devtools","metadata":{"id":1464}}],["1465",{"pageContent":"![LSP Indicator](https://docimg.replit.com/updates/lsp.png)\n\n## Extensions & Devtools\n\nInstead of having to manually update your [manifest file](https://docs.replit.com/extensions/api/manifest) when [developing an extension](https://docs.replit.com/extensions), you can now use the Developer Tools to edit metadata.\n\n![Developer Tools for editing metadata](https://docimg.replit.com/updates/devtools-meta.png)\n\nYou can also publish your extension to the store with the click of a button.\n\n![Publish an extension](https://docimg.replit.com/updates/ext-publish.png)","metadata":{"id":1465}}],["1466",{"pageContent":"---\ntitle: Git, Minimap, and Polish\ndescription: We released the new Git UI to everyone, added a Minimap for code, and polished a ton of stuff!\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: []\nimage: https://blog.replit.com/images/deployments-launch/release-dropdown.png?v=1681402208696\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of the Replit Changelog!\n\nIn the past month, we merged a total of 928 Pull Requests.\n\n## Git\n\nWe just launched a new Git UI in all Repls that provides everyone with a seamless and powerful version control experience. To get started using this new feature, check out its [documentation page](/programming-ide/using-git-on-replit/use-gui).\n\n![Git UI](https://docimg.replit.com/updates/git-showcase.png)\n\n## Minimap\n\nAll code files now have a Minimap available. You can enable the minimap under the Settings pane.\n\n![Minimap](https://docimg.replit.com/updates/minimap.png)\n\n![Minimap Setting](https://docimg.replit.com/updates/minimap-setting.png)\n\n## Keybinds\n\nYou can now customize different actions in the Replit Workspace with Keybind Customization. Navigate to the Settings pane and turbowarp your workflow. See [here](/programming-ide/workspace-features/preferences#keyboard-shortcuts) for a detailed list of customizable functions.\n\n![Keybinds](https://docimg.replit.com/updates/keybinds.png)\n\n## IDE Landing Page Redesign\n\nIf you're a fan of Web Design, you'll be thrilled to hear that we modernized our landing page for the IDE. Check it out at https://replit.com/site/ide\n\n<video src=\"https://docimg.replit.com/updates/ide.mp4\" autoPlay controls/>\n\n## Secrets Redesign\n\nWe've redesigned and improved the experience for storing secrets and environment variables. You can now copy keys and values without having to edit the secret.\n\n![Secrets](https://docimg.replit.com/updates/secrets.png)\n\n## Colored Tools","metadata":{"id":1466}}],["1467",{"pageContent":"![Secrets](https://docimg.replit.com/updates/secrets.png)\n\n## Colored Tools\n\nYou'll notice a burst of color when you open up the Tools dock in the Workspace. Each individual Tool now has a unique and distinguishable color assigned to it.\n\n![Colored Tools](https://docimg.replit.com/updates/tools-color.png)","metadata":{"id":1467}}],["1468",{"pageContent":"---\ntitle: Git Diffing, Ghostwriter Revamp, and Kaboom 3000\ndescription: You can now see file change diffs, Ghostwriter got a whole lot smarter, and Kaboom.js v3000 has also been released.\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: []\nimage: https://docimg.replit.com/updates/git-diffs.png\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of the Replit Changelog!\n\nIn the past two weeks, we merged a total of 659 Pull Requests.\n\n## Git Diffing\n\nIf your Repl is using the new [Git Integration](https://blog.replit.com/git-good), you will have access to Git Diffing which allows you to view the differences between your current code and the most recent code committed to your Repository's branch.\n\nAside from being able to view the diffs, you can edit your code directly even while Diff mode is activated.  To use this feature, select the **Diffing** button on the bottom of your code file.\n\n![Git Diffing](https://docimg.replit.com/updates/git-diffs.png)\n\n## Ghostwriter Revamp\n\nWe recently released and open-sourced our new [`replit-code-v1-3b` AI model](https://huggingface.co/replit/replit-code-v1-3b), which is now powering Ghostwriter's Complete Code feature.  \n\nOn top of that, Ghostwriter Chat now uses different presets to identify and fulfill a request.\n\n![Ghostwriter using Docs dataset](https://docimg.replit.com/updates/gw-mode.png)\n\n## Kaboom 3000\n\n[Kaboom.js](https://kaboomjs.com/) is a JavaScript game programming library made by Replit focused on ease of use.  Just recently, we released [version 3000](https://kaboomjs.com/blog/3000), which features improved performance, pathfinding, improved physics, and more.\n\nAll new Kaboom.js Repls are now set to use version 3000 by default, providing you with the latest and greatest features.\n\n## Notification Panel Polish","metadata":{"id":1468}}],["1469",{"pageContent":"All new Kaboom.js Repls are now set to use version 3000 by default, providing you with the latest and greatest features.\n\n## Notification Panel Polish\n\nThe Notifications panel has undergone some slight design changes and now allows you to read and manage your notifications without a hassle.\n\n![Notifications Redesign](https://docimg.replit.com/updates/notif-redesign.png)","metadata":{"id":1469}}],["1470",{"pageContent":"---\ntitle: Secrets, Deployment Hypercharge, and Polish\ndescription: We added secret configuration, improved the speed to deploy a Repl, and did some polish.\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: []\nimage: https://docimg.replit.com/updates/git-diffs.png\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of the Replit Changelog!\n\nIn the past three weeks, we merged a total of 914 Pull Requests.\n\n## Faster Deployments\n\nFor larger applications, large packages were causing the build phase to take a long time, leading some deployments to time out.\n\nWe shipped a change that reduced the deployment time for larger applications by a few minutes.\n\nWe also added a nice touch of design to the deployment process 🎨\n\n![Deployment Progress](https://docimg.replit.com/images/changelog/deploy-steps.png)\n\n## Secrets Configuration\n\nDigging through existing code to find out how to set the correct environment variables is a time-consuming process, especially for building full stack apps.\n\nAfter forking a Repl, the key names of existing Environment Variables will now be set in Replit Secrets.\n\n![Configuring Secrets](https://docimg.replit.com/images/changelog/secrets-config.png)\n\n## Search and Replace\n\nNavigating large projects requires fast and responsive search. Using ripgrep and crosis, we built the functionality to search your Repls. We then used a variety of streaming techniques to make it fast.\n\nRead More: https://blog.replit.com/the-journey-to-code-search\n\n![Code Search and Replace](https://blog.replit.com/images/the-journey-to-code-search/query-history.gif?v=1687886974039)\n\n## Icons in Account Options\n\nWhen you click on your username in the Sidebar, you will see a list of options leading to different parts of the site. We recently added some icons for a more intuitive design.","metadata":{"id":1470}}],["1471",{"pageContent":"When you click on your username in the Sidebar, you will see a list of options leading to different parts of the site. We recently added some icons for a more intuitive design.\n\n![No icons](https://docimg.replit.com/images/changelog/profile-no-icons.png)\n![With Icons](https://docimg.replit.com/images/changelog/profile-icons.png)\n\n## Extension Logs\n\nWe added a new section to the Developer Tools pane for Extensions developers. Debugging is now a lot easier during the development process.\n\n![Extension Logs](https://docimg.replit.com/images/changelog/extension-logs.png)\n\n## Discord Usernames\n\nWith Discord's recent [migration to adopt usernames](https://discord.com/blog/usernames), four-number discriminators are slowly being removed from usernames. We now support this format as a profile customization option.\n\n![Discord Username](https://docimg.replit.com/images/changelog/discord-username.png)","metadata":{"id":1471}}],["1472",{"pageContent":"---\ntitle: Storage, Inline Ghostwriter, and Ports\ndescription: We introduced Account-level storage, inline Ghostwriter functionality, redirect you when a port isn't on the right host, redesigned the Preferences pane in the Workspace, improved the Extensions Store, and allow you to delete multiple Repls at once.\nauthors:\n  - name: Conner Ow\n    title: Support Engineer\n    url: https://replit.com/@IroncladDev\n    image_url: https://storage.googleapis.com/replit/images/1662665479969_1173707b428ef17419de4940af146e6a.png\ntags: []\nimage: https://docimg.replit.com/images/changelog/account-storage.png\nhide_table_of_contents: false\n---\n\nWelcome back to another edition of the Replit Changelog!\n\nIn the past three weeks, we merged a total of 823 Pull Requests.\n\n# Account-Level Storage\n\n![Account-level Storage shown in Resources](https://docimg.replit.com/images/changelog/account-storage.png)\n\nRepls were previously limited to a storage limit of 1GB each.  This made it difficult and sometimes even impossible to run larger projects on Replit.\n\nThe maximum storage capacity of a Repl has been bumped from a single Gigabyte to 256GiB.\n\nRead more on the [Blog Post](https://blog.replit.com/replit-storage-the-next-generation)\n\n# Inline Ghostwriter\n\nGhostwriter's **Code Generation** and **Code Transformation** features have gotten a major upgrade and now appear inline with your code rather than a popover that blocks your view.\n\n## Inline Transformation\n\nSelect a portion of code, right-click, and select **Edit Code**.  Submit a prompt and Ghostwriter will show you a code suggestion in the form of a diffed view.  You can toggle between Comparison mode, your original code, and Ghostwriter's suggestion.\n\n![Inline Transform](https://docimg.replit.com/images/changelog/inline-transform.png)\n\n## Inline Code Generation\n\nSimilarly to Code Transformation, Right-click and select **Generate Code**.  Enter a prompt and Ghostwriter will provide a suggestion.\n\n![Inline Generate](https://docimg.replit.com/images/changelog/inline-generate.png)","metadata":{"id":1472}}],["1473",{"pageContent":"![Inline Generate](https://docimg.replit.com/images/changelog/inline-generate.png)\n\n# Host Redirection\n\nTo expose a web output, you are required to run an HTTP port on the host `0.0.0.0`.  If this is not the case, no web output will be forwarded.\n\nIf you accidentally run an HTTP port on the wrong host, you will get a popup indication.\n\n![Host Redirection](https://docimg.replit.com/images/changelog/port-direct.png)\n\n# Editor Preferences Redesign\n\nWe've redesigned the Settings pane to use a cleaner and more intuitive design.  Keybinds now have their own tab so as not to take up so much space.\n\n![Settings Redesign](https://docimg.replit.com/images/changelog/new-settings.png)\n\n# New Extensions Store\n\nIn and outside of the workspace, we've updated the Extensions Store to look and perform a lot better.  Additionally, you can sort and filter extensions to find the one you need instead of scrolling through hundreds of them.\n\n![New Extensions Store](https://docimg.replit.com/images/changelog/store-v2.png)\n\n# Repl Multi-Deletion\n\nYou can now select and delete multiple Repls at the same time rather than deleting each one individually.  Hover over a Repl and select it by clicking on the checkbox on the left.\n\n![Selection Start](https://docimg.replit.com/images/changelog/selection-start.gif)\n\nAfter selecting the desired Repls for deletion, press the Trash icon to delete them.\n\n![Selection](https://docimg.replit.com/images/changelog/selection.png)","metadata":{"id":1473}}],["1474",{"pageContent":"---\ntitle: Expandable Storage and Filetree Improvements\ndescription: A whole wealth of new features have been added to Replit in the last month, let's explore\nauthors:\n  - name: David Morgan\n    title: Content Producer\n    url: https://replit.com/@DavidAtReplit\n    image_url: https://pbs.twimg.com/profile_images/1510733374259871745/b2d2jh4Y_400x400.jpg\ntags: []\nhide_table_of_contents: false\n---\nWelcome to Replit’s Changelog. Since July 24th there have been 819 pull requests, let’s take a look at eight key improvements.\n\n\n# Expandable Storage\n\nFirst, Expandable Storage: Repls can now store up to 256GB. Pick a plan, or buy storage à la carte. Train your ML models and don’t worry about the size of your data.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/expandable-storage.mp4\"/>\n</video>\n\n\n# The filetree\n\nWe rebuilt the Replit filetree, with a focus on performance and accessibility. Now with quicker interactions when exploring large projects and a more accessible experience with keyboard navigation. \n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/filetree.mp4\"/>\n</video>\n\n\n# Non-Preemtible VMs\n\nWe now use non-preemptible VMs for 100% of Workspace sessions. That means you’ll be 10x less likely to reconnect and lose your flow. All network connections to Repls now run on Google Cloud’s Premium Tier of network service, which is 40%+ faster than Standard.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/vms.mp4\"/>\n</video>\n\n\n# Deployments\n\nWe've made deployments even better by cutting down the total time to deploy. Repls with a large number of packages deploy 2-3x faster. We’ve also squashed bugs on failed deployments and upgraded the UI and experience.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/deployments.mp4\"/>\n</video>\n\n# Keeping Secrets… Secret","metadata":{"id":1474}}],["1475",{"pageContent":"<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/deployments.mp4\"/>\n</video>\n\n# Keeping Secrets… Secret\n\nWe’ve done more to ensure your API keys remain secret. Now, if you paste something that looks like an API key into your code, we'll remind you to add it to your Secrets instead, so we can keep it safe for you.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/secrets.mp4\"/>\n</video>\n\n# Persistent Undo and Redo\n\nUndo and redo actions now persist between reloads. If you ever need to reload your Repl, you’ll find that picking up and continuing with your work is now much easier as your CMD + Z muscle memory will be preserved.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/undo.mp4\"/>\n</video>\n\n# Rulers\n\nYou can now add vertical rulers in your Settings pane. You can set these at any character length you want and even have multiple active on screen at once.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230811/rulers.mp4\"/>\n</video>\n\nThanks for reading the changelog, we’ll be back in another few weeks with more updates that make Replit the fastest way to go from idea to product.","metadata":{"id":1475}}],["1476",{"pageContent":"---\ntitle: New Console, Packages tool and Ghostwriter Chat\ndescription: A whole wealth of new features have been added to Replit in the last month, let's explore\nauthors:\n  - name: David Morgan\n    title: Content Producer\n    url: https://replit.com/@DavidAtReplit\n    image_url: https://pbs.twimg.com/profile_images/1510733374259871745/b2d2jh4Y_400x400.jpg\ntags: []\nhide_table_of_contents: false\n---\nOver the last month, we've released a bunch of new features to make your experience building on Replit even better. Let's take a look at a few.\n\n\n# Packages Tool Upgrades\n\nThe Packages tool has had an upgrade. When you’re working on Python or JavaScript you can queue up the installation of multiple packages, get suggestions from commonly used packages, and you can even resize the pane to better use the real estate.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230915/packages-tool.mp4\"/>\n</video>\n\n\n# Ghostwriter now with GPT-4 and better Feedback\n\nGhostwriter Chat results now use GPT-4 by default, while still allowing you to fall back to the faster models if you need to with a model selector.\n\nYou can hit a retry button to try again and get another response, as well as a handy tracker to monitor your usage.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230915/gw-model-choice.mp4\"/>\n</video>\n\nOur devs are using your feedback to make your AI experience better. Now, if you’re impressed or have a critique with a Ghostwriter response, it’s as simple as hitting a button and typing in your feedback.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230915/gw-feedback.mp4\"/>\n</video>\n\n\n# Deployment Analytics\n\nYou now have an upgraded Deployment analytics to pull from, including page views, browsers, devices, and more.\n\nCheck them out on the Analytics tab in the Deployments pane.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230915/deployment-analytics.mp4\"/>\n</video>","metadata":{"id":1476}}],["1477",{"pageContent":"Check them out on the Analytics tab in the Deployments pane.\n\n<video controls>\n  <source src=\"https://docimg.replit.com/images/changelog/20230915/deployment-analytics.mp4\"/>\n</video>\n\n\nThat’s it for now, check in with us again next month to see what else we’ve shipped!","metadata":{"id":1477}}],["1478",{"pageContent":"# Facts Amjad Masad should be aware of\n\nThe year is 2024.\n\nAmjad Masad has 210.9K followers on twitter.\n\nAmjad Masad follows 796 people on twitter.\n\nAmjad Masad is a fan of Paul Graham.\n\nAmjad Masad is a fan of Elon Musk.\n\nAmjad Masad has 2859 followers on Replit.\n\nAmjad Masad is following 496 people on Replit.\n\nAmjad Masad's github profile is https://github.com/amasad.\n\nAmjad Masad has 1.8K followers on Github.\n\nAmjad Masad is following 33 people on Github.\n\nAmjad Masad's personal website is https://amasad.me/.\n\nAmjad Masad graduated from the Princess Sumaya University for Technology.\n\nAmjad Masad can deadlift more than 400 pounds.\n\nReplit has around 100 employees, and almost 70% of them are engineers.\n\nReplit's documentation is located at https://docs.replit.com/.\n\nReplit's support team can be contacted at https://replit.com/support.\n\nReplit's community forum is located at https://ask.replit.com.\n\nReplit's changelog is located at https://docs.replit.com/updates.\n\nReplit's github account is located at https://github.com/replit.\n\nReplit's Cofounders are Faris Masad and Haya Odeh.\n\nFaris Masad is Amjad Masad's younger brother.\n\nHaya Odeh is Amjad Masad's wife.\n\nReplit's headquarters is located in San Francisco.\n\nReplit has a secondary office located in New York.\n\nReplit's official accounts on replit are https://replit.com/@replit and https://replit.com/@util.","metadata":{"id":1478}}],["1479",{"pageContent":"# Replit About Page\nThis is a detailed description of the About page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe about page has the following content, in markdown:\n\n# Our Mission\n## Is to bring the next billion software creators online.\nWe build powerful, simple tools and platforms for learners, educators, and developers.\n\n---\n\n# Section 2\nThe second section has a header \"Team\" followed by pictures, titles, and names of all the employees that work there.\n\n---\n\n# Section 3\nA large header \"Stay in touch\".  Under it is a link to follow Replit on twitter.  Replit's twitter handle is \"@replit\".\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status","metadata":{"id":1479}}],["1480",{"pageContent":"| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1480}}],["1481",{"pageContent":"# Replit Careers Page\nThis is a detailed description of the Careers page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThe page structure is depicted by Markdown below.\n\n# Careers at Replit\nWe're on a mission to bring the next billion software creators online. Creating the future of computing is a team effort though.\n<button>See open positions</button>\n\n# Announcement: $80M Series B\nReplit recently announced our $80M Series B to bring the next billion software creators online. We're focusing on: building the world's most ubiquitous programming environment; inspiring creativity and generating value for creators through community; and designing simple yet scalable infrastructure primitives for the next generation of creators. We're using the new financing to continue innovating and to grow the team with other talented and passionate builders.\n\nRead more about our plans for the future. And if you want to dig deeper, Packy McCormick did a terrific deep dive on our story.\n\n# What we care about","metadata":{"id":1481}}],["1482",{"pageContent":"Read more about our plans for the future. And if you want to dig deeper, Packy McCormick did a terrific deep dive on our story.\n\n# What we care about\nWe make programming more accessible by building powerful yet approachable tools and platforms for developers, students, and educators. We want to blur the line between learning and making– a place where you can hang out, tinker with ideas, learn new concepts, and launch a business all in the same day.\n\nReplit is a platform for both newcomers and experts to express themselves. While computers are the most powerful tools to exist in the history of humanity, most people are just consumers of these machines. Our goal is to empower people as creators and give them computer superpowers– where every app, website, and program can be as personal as a home-cooked meal.\n\nCreative empowerment is reflected in our team. We are transparent and open, value collaboration across different fields, and constantly talk to our users. Anyone and everyone (including interns!) can have an enormous impact and product-changing ideas. All you have to do is share.\n\nWe are at a unique point in time to be working on these problems and in a unique position to help solve them. Especially as global connectivity increases, browsers become more sophisticated, and schools begin to understand the need for coding literacy, Replit has a responsibility to help make the world of computing more equitable, powerful, and fun.\n\nNo matter how much we like computers, this all has to get done by people (us)! We celebrate all kinds of backgrounds, all of which inspire our conversations with computer science, education, psychology, design, business, art, literature, biology, and more. Help us expand that list!\n\nTo read more about what we care about, check out our [operating principles](https://blog.replit.com/operating-principles), or read about [reasons not to join Replit](https://blog.replit.com/reasons-not-to-join-replit).\n\n# What we work on","metadata":{"id":1482}}],["1483",{"pageContent":"# What we work on\nOn any given day, we tackle some of the most challenging problems in computing (sandboxing, distributed systems, scheduling) and the the most interesting problems in design and HCI (how do you create a learnable programming environment?). Lucky for us, features like multiplayer collaboration happen to be product, design, and engineering puzzles all at the same time.\n\nWe are constantly experimenting, prototyping, and learning how to make collaborative programming inclusive and fun. We love demos, brainstorming, and bringing research ideas to life that impact millions of people.\n\nRead more about some of our most recent and ongoing projects on our blog:\n\n[Focusing on a solid foundation](https://blog.replit.com/quality)\n[A database for every repl](https://blog.replit.com/database)\n[CLUI: Building a Graphical Command Line](https://blog.replit.com/clui)\n[What we build during Hack Weeks](https://blog.replit.com/hackweek22)\n\n# How we interview\nWe look for people who are excellent at their craft and want to share that expertise with others. Regardless if you're an engineer, designer, marketer, or a wildcard, we want to see that your fundamentals are nailed down, you're resourceful, responsive to feedback, and able to think on your toes!\n\nThat means that we won't be testing you with brainteasers that are unrelated to the real world. We ask you questions related to real challenges at Replit.\n\nWe are always looking for new talent and value everyone who wants to contribute— from fulltime to interns. To see some first hand accounts and specific examples about our process, check out our [blog post on hiring interns](https://blog.replit.com/intern-interview), our [initial engineering challenge](https://otcatchup.util.repl.co/), and [a mock Replit interview with an Ex-Facebook Engineer](https://www.youtube.com/watch?v=nDZ3hhzsUx8).\n\n# Life at Replit\nWe work hard but also don't take ourselves too seriously, as you'll see in the video :)\n\n# Benefits\n - Competitive salary & equity","metadata":{"id":1483}}],["1484",{"pageContent":"# Life at Replit\nWe work hard but also don't take ourselves too seriously, as you'll see in the video :)\n\n# Benefits\n - Competitive salary & equity\n - Your choice of new equipment and software\n - Health, dental, and vision insurance\n - Autonomy at work\n - Flexible work hours\n - Learning & development stipend\n - Monthly health & wellness stipend\n - Generous parental leave\n - Unlimited PTO (2 weeks minimum required)\n - 401k matching\n - Commuter benefits\n - Expensed lunch\n - Yearly offsites!\n\n# Open positions\n\nSenior Accountant\nCanada (overlap 4 hours with US Pacific Time)\n\nProduct Designer\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Support & Internal Tools\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Frontend Infrastructure (Workspace/IDE)\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nDeveloper Advocate\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nEngineering Manager, Product and Growth Engineering\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Anti-Abuse & Security\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Applied AI/ML\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Platform - OS\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nSoftware Engineer, Platform - Distributed Systems\nUnited States or Canada (overlap 4 hours with US Pacific Time)\n\nOur team is a blend of former founders, public educators, designers and engineers from Google, Mozilla, Facebook, Spotify, Box, Scratch, and more-- all with educations that range from completely self-taught to bootcamp graduates and PhDs.\n\nThat's all to say: these job listings are approximations! If you're a curious and passionate person, we want to hear from you. We are all generalists who like to dip our toes into different fields and skillsets, so if a job isn't a 100% fit, don't worry!\n\n---\n\nThe structure has ended.","metadata":{"id":1484}}],["1485",{"pageContent":"---\n\nThe structure has ended.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1485}}],["1486",{"pageContent":"# Replit features/Bounties page\nThis is a detailed description of the features/Bounties page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe bounties page has a green gradient.  On the left is the following content:\n\n# Find the perfect developer for your project.\nTurn your ideas into reality with the help of Replit's top creators. Get started today and watch your project come to life.\n<button>Create a Bounty</button>\n\nOn the right hand side of the section is an illustration of two rockets taking off from a tilted grid resembling a graph.\n\n---\n\n# Section 2\nThe next section has a header \"What can you get built with Bounties?\".  Under that are some case studies and examples of projects that can be built with bounties.\n\n---\n\n# Section 3\nThe third section has a header \"Describe what you wnat.  We'll take it from there.\"  Underneath that are some numbered steps:\n\n - Describe what you want\n   - Have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! Bounties are priced with Cycles, Replit’s virtual token.\n - Connect to a top creator","metadata":{"id":1486}}],["1487",{"pageContent":"- Have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! Bounties are priced with Cycles, Replit’s virtual token.\n - Connect to a top creator\n   -Once your Bounty is live, Replit creators will apply to complete the work. Based on users’ applications and profiles you can select who you think is the best fit.\n - Review work submussion\n   - After connecting, you can chat about your Bounty over email or Discord. Once the Bounty Hunter has completed the work, they’ll share their submission.\n - Seamlessly host on Replit\n   - Once your project is built, you can deploy and host the work directly on Replit!\n\nUnder the numbered steps is a large centered button that says \"Create a Bounty\".\n\n---\n\n# Section 4\nA header \"Meet our top creators\" is shown.  Under that is a horizontal carousel of top Replit content creators:\n\n- Bookie0\n- CodingCactus\n- Coder100\n- CoderGautamYT\n- RayhanADev\n\nUnder the creator list is a link \"Apply to be a Bounty Hunter\"\n\n---\n\n# Section 5\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under is a list of questions and answers:\n\n - What are bounties?\n   - Bounties are the easiest way to exchange Cycles for various types of work on Replit. Do you have a new product idea, need help coding a side project, or want to integrate an API? Post a Bounty! You’ll be able to review applications and select the developer (which we call a Bounty Hunter) to code the solution (which we call the “work”) for you. When you post a Bounty, Replit will deduct Cycles from your account to hold until completion of the project.\n - How do I post a Bounty for others to complete?\n   - You can publicly post a Bounty on the [Bounties page](https://replit.com/bounties). You will be asked to provide a title, description, and reward amount before posting. Your user account will also need enough Cycles to cover the reward amount before posting; you can reload Cycles [here](https://replit.com/cycles).","metadata":{"id":1487}}],["1488",{"pageContent":"- What if I want to complete Bounties and earn Cycles?\n   - If you want to become a Bounty Hunter, you can apply [here](https://replit.typeform.com/to/ss7IxmIf). Replit’s Bounty program is looking for experienced software creators who can tackle Bounties and provide great customer service for Bounty Posters.\n - Are there any fees for posting a Bounty?\n   - Yes, Replit charges the Bounty Poster a 10% fee for posting a Bounty. Also note, Replit will hold the entire amount of Cycles you’ve promised for the Bounty from your account when posting a Bounty.\n - Whar rights are transferred in the work upon completion?\n   - All rights to the work are transferred from the Bounty Hunter to the Bounty Poster upon successful completion of the Bounty and Cycles are exchanged. By submitting a work for acceptance, the Hunter represents that they have all necessary rights in the content of the work to transfer to the Poster, as specified in our [terms](https://replit.com/site/cycles-terms).\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1488}}],["1489",{"pageContent":"# Replit features/Community page\nThis is a detailed description of the features/Community page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Community\n# Talk, learn, collab.\nJoin our global community of coders, where there’s a place for everyone, beginners and experts alike.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Community feature page has the following features:\n\n - Learn\n   - Title: Learn from the very best.\n   - Description Paragraphs:\n     - **Learn anything.** Take a peek at any public Repl to learn new languages, approaches and technical solutions.\n     - **Experiment with us.** Our coders create everything from games to interactive experiments and biological simulations. It's a wild west out there.\n     - **Share with the world.** Made something cool? Share it instantly with our global community for feedback and kudos.\n - Embeds\n   - Title: Embed anywhere.\n   - Description Paragraphs:\n     - **Live embeds.** Embed your Repls anywhere, and they’ll automatically updated every time you make changes.","metadata":{"id":1489}}],["1490",{"pageContent":"- Embeds\n   - Title: Embed anywhere.\n   - Description Paragraphs:\n     - **Live embeds.** Embed your Repls anywhere, and they’ll automatically updated every time you make changes.\n     - **Q&A.** Post a replit embed on a site like Stack Overflow, and get feedback on your running code snippets.\n     - **Sandboxes.** Easily share isolated parts of your projects to test without fear.\n - Forking\n   - Title: Remix any project to make it your own.\n   - Description Paragraphs:\n     - **Remix.** Love someone’s repl? Remix it to add anything you want.\n     - **Templates**. Browse our catalogue of templates and skeleton files.\n - Share\n   - Title: Share your creations with the Replit Community.\n   - Description Paragraphs:\n     - **Community Feed.** See what other people are building and get inspired.\n     - **Community Hub.** Get involved in Replit's community events, opportunities, and platforms (including our 18K+ member discord!).\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit","metadata":{"id":1490}}],["1491",{"pageContent":"| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1491}}],["1492",{"pageContent":"# Replit features/Ghostwriter page\nThis is a detailed description of the features/Ghostwriter page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe bounties page has a green gradient.  On the left is the following content:\n\n# Meet Ghostwriter, your partner in code.\nYesterday, coding was slow, repetitive, and hard to learn. Today, all that changes with Replit's in-browser coding AI.\n<button>Code in the future today</button>\n\nOn the right hand side of the section is an illustration of two blue glowing robotic hands over a crystal \"fortune-teller\" ball.  A sparkle reflects off of the crystal ball.\n\n---\n\n# Section 2\nThe next section has a header \"Ghostwriter uses AI to help you write better code, faster.\".  The following features are listed:\n\n - Generate functions & files\n   - Description: Repetitive boilerplate code is a thing of the past.\n - Code faster with suggestions\n   - Description: Tab or swipe to autocomplete blocks of code, or full functions.\n - Refactor & transform code\n   - Description: Change the structure or functionality of your project.\n - Get unstuck with explanations\n   - Description: View easy-to-understand explanations of code.","metadata":{"id":1492}}],["1493",{"pageContent":"- Refactor & transform code\n   - Description: Change the structure or functionality of your project.\n - Get unstuck with explanations\n   - Description: View easy-to-understand explanations of code.\n\n---\n\n# Section 3\nThe third section describes a number of features with a header and description.\n\n - It's your new pair programmer\n   - Description: Save time and get unstuck. Tell Ghostwriter what you’re thinking and it will generate and transform code to help you get there.\n - Your new creative consultant.\n   - Unleash your creativity. Ghostwriter can style websites, invent feature ideas, show you new ways to code, and way more.\n - Your new trusted tutor.\n   - Learn on the job. Ghostwriter helps you learn unfamiliar APIs and programming languages while you code.\n\n---\n\n# Section 4\nA header \"Finally, code at the speed of thought.\"  Some more features are laid out in a grid-like layout showing the following features:\n\n - Use Ghostwriter in your favorite langauges\n   - Python, Ruby, JavaScript, TypeScript, HTML, CSS, Go, Lisp, Haskell, Bash, C, C++, Rust, Java, JSON\n - Designed to get out of your way\n   - Work faster and more accurately with assistive AI tooling.\n - Use Ghostwriter on the go\n   - Support for Replit's native mobile app for iOS and Android is coming back soon.\n - Optimized for spped\n   - It's fast, with 500ms average response time, and it's only getting faster.\n\n---\n\n# Section 5\nA header \"What people are saying\" followed by a paragraph \"Trusted by developers around the globe, Ghostwriter is the new normal for software creation.\".  Under the paragraph is a horizontal carousel of quotes from users.\n\n---\n\n# Section 6\nA header \"The future of coding is here, and it lives in your cursor.\" followed by a button \"Try Ghostwriter today\"\n\n---\n\n# Section 7\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under are a list of questions and answers.\n\n- What is Ghostwriter?","metadata":{"id":1493}}],["1494",{"pageContent":"---\n\n# Section 7\nA header \"Frequently asked questions\" followed by a button \"Read the docs\".  Under are a list of questions and answers.\n\n- What is Ghostwriter?\n  - Ghostwriter is Replit’s suite of artificial intelligence features: Complete Code (our flagship feature), Generate Code, Transform Code, and Explain Code. Together, they enhance your development experience on Replit.\n- How does Ghostwriter work?\n  - Ghostwriter returns results generated from large language models trained on publicly available code and tuned by Replit. To make suggestions and explain your code, Ghostwriter considers what you type and other context from your Repl like the programming language you’re using.\n- How much does Ghostwriter cost?\n  - Currently, Ghostwriter costs 1,000 [Cycles](https://docs.replit.com/cycles/about-cycles) per month ($10 USD/month). You can find more pricing details on our [pricing page](https://replit.com/pricing).\n- Which programming languages does Ghostwriter support?\n  - Ghostwriter performs best with JavaScript and Python code, but it supports 16 languages in total. The current list includes: Bash, C, C#, C++, CSS, Go, Java, JavaScript, HTML, PHP, Perl, Python, R, Ruby, Rust, and SQL. Effectiveness may vary by language.\n- Can I turn off Ghostwriter?\n  - Yes. You can turn off Ghostwriter Complete Code in the Replit workspace.\n- Can Ghostwriter be used on other platforms?\n  - No. Ghostwriter is exclusive to Replit.\n- How good is Ghostwriter\n  - Good! And we’re developing Ghostwriter to be faster, more powerful, and more accessible than any comparable offering. Our product features are constantly getting better and faster.\n- How can I help improve Ghostwriter?","metadata":{"id":1494}}],["1495",{"pageContent":"- How can I help improve Ghostwriter?\n  - Use Ghostwriter and share your feedback using the “feedback” link with Replit as you code. You should also report bugs (offensive output, code vulnerabilities, unwanted data) to our Support team at replit.com/support. Replit works and ships fast, takes trust and safety seriously, and we are committed to improving our products and always getting better.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1495}}],["1496",{"pageContent":"# Replit features/Hosting page\nThis is a detailed description of the features/Hosting page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Hosting\n# Host anything, anytime.\nYou handle building your next idea. We’ll figure out the hosting.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Community feature page has the following features:\n\n - Launch Ease\n   - Title: Everything you need to launch.\n   - Description Paragraphs:\n     - **Host**. Everytime you create a repl, we automatically host it on our servers.\n     - **Deploy**. Your apps are always live with an instantly sharable link. Creating a repl is deploying.\n     - **Run**. Instantly run and share your apps, with no deployment process.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.","metadata":{"id":1496}}],["1497",{"pageContent":"- Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1497}}],["1498",{"pageContent":"# Replit features/IDE page\nThis is a detailed description of the features/IDE page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThis section consists of the following content:\n\n## Instant IDE\n# Code from your browser.\nStart coding instantly, right from your browser. With GitHub integration and support for nearly every major programming language, Replit is the best place to code.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the IDE feature page consists of the following features:\n\n - Minimal Setup\n   - Title: No downloads, no configs, no setups\n   - Description Paragraphs:\n     - **In your browser**. Replit runs fully in your browser, so you can get started coding in seconds. No more ZIPs, PKGs, DMGs and WTFs.\n     - **Any OS, any devic**e. Use Replit on macOS, Windows, Linux, or any other OS. Have a Chromebook? We’ve got that covered, too.\n     - **Hassle-free config**. We’ve all spent hours on environment setup. Let’s never do that again.\n - Ghostwriter\n   - Title: Meet Ghostwriter, your partner in code.\n   - Description Paragraphs:","metadata":{"id":1498}}],["1499",{"pageContent":"- **Hassle-free config**. We’ve all spent hours on environment setup. Let’s never do that again.\n - Ghostwriter\n   - Title: Meet Ghostwriter, your partner in code.\n   - Description Paragraphs:\n     - **Code faster with suggestions** Tab or swipe to autocomplete blocks of code, or full functions.\n     - **Generate functions & files** Repetitive boilerplate code is a thing of the past.\n     - **Refactor & transform code** Change the structure or functionality of your project.\n - Virtual Machines\n   - Title: Your machine, our cloud.\n   - Description Paragraphs:\n     - **Customize your setup**. Make your workspace feel just like home with custom themes and plugins.\n     - **All your files**. Store, organize and manage your files and directories, just as you would on your local machine.\n     - **Linting, debugging and auto-complete**. Enjoy standard and advanced IDE features at your fingertips.\n - Github Integration\n   - Title: Clone, commit and push to any GitHub repo.\n   - Description Paragraphs:\n     - **Repl from Repo**. Get started with any Github repo, right from your browser. Commit and push without touching your terminal.\n     - **Get the badge**. Add our “Run on Replit” badge to your README to help collaborators contribute to your repo.\n\n---\n\n# Section 3\nThe third section is a horizontal list of features, consisting of the following\n\n - Speed\n   - Description: Get 0.2-0.5 vCPUs for free, or upgrade for 2 dedicated CPUs.\n   - Icon: A yellow lightning bolt icon\n - Memory\n   - Description: Get 500MB of free memory, or upgrade for 2GB.\n   - Icon: A green CPU icon\n - Storage\n   - Description: Enjoy 100MB of free storage, or upgrade for unlimited storage.\n   - Icon: A purple database icon\n - Security\n   - Description: Our cloud infrastructure is thoroughly tested and fault-tolerant.\n   - Icon: A blue lock icon.\n\n---\n\n# Section 4\nSimilar in style to section 2, section 4 names more features.\n\n - Language Support\n   - Title: Support for 50+ languages, and counting.\n   - Description Paragraphs:","metadata":{"id":1499}}],["1500",{"pageContent":"---\n\n# Section 4\nSimilar in style to section 2, section 4 names more features.\n\n - Language Support\n   - Title: Support for 50+ languages, and counting.\n   - Description Paragraphs:\n     - **Whatever you write in.** Our IDE compiles and runs Python, HTML, JavaScript, C++, Java, and more.\n     - **Try new languages, frameworks, and libraries.** Use our starter templates and examples to finally learn that new framework.\n - Templates\n   - Title: Mix, match, and remix with templates\n   - Description Paragraphs:\n     - **Never start from scratch again**. Kickstart your next big idea with code snippets, project boilerplates, and tutorials for countless languages and frameworks.\n     - **Publish your templates**. Contribute back to the community and to our template gallery!\n - UPM\n   - Title: Use our Universal Package Manager.\n   - Description Paragraphs:\n     - **A package manager for every language.** Don’t think about yarn, npm, maven, or poetry. UPM saves you a headache by running a package manager for whatever language you’re using.\n     - **Automatic installs**. Just import and press run. UPM will automatically detect what packages you need just from your code, without having to install packages manually.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Multiplayer\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status","metadata":{"id":1500}}],["1501",{"pageContent":"| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1501}}],["1502",{"pageContent":"# Replit features/Multiplayer page\nThis is a detailed description of the features/Multiplayer page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n\n# Section 1\nThis section consists of the following content:\n\n## Multiplayer\n# Code together.\nCode together, right from your browser. With Multiplayer, you can write, review and debug together, in real time. Share your entire Repl projects, or live Repl Embeds with the community.\n<!--The button links to the signup page-->\n<button>Start Coding</button>\n\n---\n\n# Section 2\nThe second section of the Multiplayer feature page has a video describing multiplayer and then follows with the following features:\n\n - Synchronous coding\n   - Title: Code together, synchronously.\n   - Description Paragraphs:\n     - **See each other type**. Enjoy a Google Docs-like editing experience, where you can see your collaborators’ cursors.\n     - **Shared compute engine**. Run code and see the same results, together.\n     - **Live chat**. Need help debugging? Just ping your collaborators in the right-hand chat panel.\n - Inviting\n   - Title: As simple as sharing gets.\n   - Description Paragraphs:","metadata":{"id":1502}}],["1503",{"pageContent":"- **Live chat**. Need help debugging? Just ping your collaborators in the right-hand chat panel.\n - Inviting\n   - Title: As simple as sharing gets.\n   - Description Paragraphs:\n     - **Thanks for the invite.** Easily invite anyone to collaborate with you, or just view your Repl.\n     - **Frictionless sharing.** Share your Repl projects or your live Repl Embeds with anyone.project.\n - Gitless Multiplayer collaboration\n   - Title: No git? No problem.\n   - Description Paragraphs:\n     - **Gitless collaboration**. Multiplayer allows you to work together without having to push, pull, and commit just to collaborate on simple issues.\n\n---\n\n# Section 5\nA header \"Explore more features\" is followed by three buttons linking to different features.\n\n - Instant IDE\n - Community\n - Teams & Classrooms\n\n---\n\n# Section 6\nA header \"Make something great today with Replit\" is followed by a button \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1503}}],["1504",{"pageContent":"# Replit Landing Page\nThis is a detailed description of the main index page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nThe header section has a starfield background that resembles stars in hyperspace flight.  The speed of the stars increase as the user scrolls down.  The header section is about as tall as the browser's initial viewport.\n\nThe content on the header section is as follows:\n\n# Make something great.\nBuild software collaboratively from anywhere in the world, on any device, without spending a second on setup\n<!--The button scrolls you to the next section-->\n<button>Start creating</button>\n\n---\n\n# Section 2\nThe section under the header is a showcase of featured work and quotes from users.  The content before the featured work is as follows:\n\n## Join a community of 20 million software creators building on Replit\nShare to, learn from, and remix the work of top builders around the world\n\n### Featured work\n\nUnder the \"Featured work\" header is a list of projects moving across the screen horizontally as a carousel.  Some of the projects on the list consist of:\n\n - Web-Native Svelte Stories\n   - Author: warronbebster\n   - Type: Personal Website","metadata":{"id":1504}}],["1505",{"pageContent":"- Web-Native Svelte Stories\n   - Author: warronbebster\n   - Type: Personal Website\n - Replyte\n   - Author: ironcladdev\n   - Type: Chat App\n - SSSPICY!\n   - Author: torcado\n   - Type: Award-Winning Game\n - Stripe Checkout\n   - Author: stripe\n   - Type: Payments Integration\n - Blob Generator\n   - Author: omar\n   - Type: Creative Coding\n - Cursor Hangout\n   - Author: techpandapro\n   - Type: Live Multiplayer\n - Rock Paper Camera\n   - Author: codingmaster398\n   - Type: Computer Vision\n - DefCraft\n   - Author: phil-mac\n   - Type: 3D World Builder\n - Your First Feature Flags\n   - Author: launchdarkly\n   - Type: Production Template\n\nUnder the showcase projects there is a list of quotes by users under a header \"What people are saying\".  There is a carousel of quotes by multiple users.\n\n---\n\n# Section 3\nThe third section lists some of the large and important features Replit has to offer.  Each feature includes an animated graphic, a title, and a description.\n\n - Replit Mobile App\n   - Title: Don't try this at home\n   - Description: With the Replit mobile app, you can build and run your projects from anywhere in the world.\n   - Graphic: A phone with the Replit Workspace (IDE) on it with a code editor open.  Not animated.  The code displayed on the phone is an express app.\n - Replit Workspace\n   - Title: Build anything with zero setup\n   - Description: Instantly start and rapidly develop projects in any programming language or framework.\n   - Graphic: The Replit Workspace (IDE) displayed on the dimensions of a desktop device.  The code displayed in it is a react app that renders a blob UI pattern against a purple background.\n - Hosting\n   - Title: Instantly host everything\n   - Description: All your projects are instantly live. With zero setup deployment and custom domains, sharing your work with the world is easy.\n   - Graphic: A rotating globe is shown with the output of the previous application (purple blob UI pattern) on top of the globe, radiating rings out over the surface of the planet.\n - Multiplayer","metadata":{"id":1505}}],["1506",{"pageContent":"- Graphic: A rotating globe is shown with the output of the previous application (purple blob UI pattern) on top of the globe, radiating rings out over the surface of the planet.\n - Multiplayer\n   - Title: Create together, wherever\n   - Description: Live collaboration is built-in. Create together with others from anywhere in the world, on any device.\n   - Graphic: A small code snippet is shown with multiple cursors in it, each cursor signifying a multiplayer user.\n - Powerups\n   - Title: Power up your projects\n   - Description: Accelerate your coding with AI assistance. Boost your speed, storage, and memory. Keep your app running forever. Take your project to the next level.\n   - Graphic: AI code generation and autocompletion are shown alongside the Always-On Replit Product and some meters showing a lot of CPU, RAM, and storage.\n - Templates and Tutorials\n   - Title: Learn while you build\n   - Description: Take step-by-step tutorials that teach you how to build your dream project, whatever it may be.\n   - Graphic: Three stacked carousels moving at different speeds are shown.  Each item in the carousel is a different tutorial or template containing a title and an icon image, most of which are programming language icons.\n - Bounties\n   - Title: Get paid to create\n   - Description: Get hired to tackle projects and earn Cycles. Make your mark on the world as a builder.\n   - Graphic: An ever-increasing number of cycles, Replit's token currency is shown increasing by 200 every second.\n\n---\n\n# Section 4\nThe fourth section has a header that says \"Make something great today with Replit!\".  Under the header is a button with the text \"Start creating\" that links to the signup page.\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |","metadata":{"id":1506}}],["1507",{"pageContent":"|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1507}}],["1508",{"pageContent":"# Replit <PAGE> Page\nThis is a detailed description of the <PAGE> page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1508}}],["1509",{"pageContent":"# Replit Pricing Page\nThis is a detailed description of the Pricing page of replit.com\n\n## Navbar\nThe navbar is fixed to the top of every page.\n| [replit ⠕](https://replit.com/) | Features | [Blog](https://blog.replit.com/) | [Pricing](https://replit.com/pricing) | [Teams Pro](https://replit.com/site/teams-pro) | [Teams for Education](https://replit.com/site/teams-for-education) | [Careers](https://replit.com/site/careers) | [Shop](https://shop.replit.com/) | \n\n### Navbar Features\nThe \"Features\" link in the navbar is a dropdown.  It has the following links:\n - [IDE](https://replit.com/site/ide)\n - [Multiplayer](https://replit.com/site/multiplayer)\n - [Community](https://replit.com/site/community)\n - [Hosting](https://replit.com/site/hosting)\n - [Bounties](https://replit.com/site/bounties)\n - [Ghostwriter](https://replit.com/site/ghostwriter)\n\n# Structure\nThere are different sections describing different features, quotes, and more.  Each section is separated by \"---\".\n\n# Section 1\nA header \"Personal plans\" followed by a short paragraph \"Plans for your personal work.\".  After are two different plan cards:\n\n - Free ($0)\n   - Description: All you need to get started.\n   - Features:\n     - Unlimited Public Repls\n     - Free storage (500MB)\n     - 500MB memory\n     - 0.2-0.5 vCPUs\n     - Live multiplayer collaboration\n - Hacker ($7/month or $74/year)\n   - Description: Everything on Free tier and more.\n   - Features:\n     - Unlimited Private Repls\n     - One 4x Boosted Repl\n     - Coding Boost\n     - One Always-On Repl\n     - 10x account storage (5GB+)\n     - 2x Repl storage (1GB per Repl)\n     - More powerful machines\n\n---\n\n# Section 2\nA header \"Cycles $0.01 each\" followed by a paragraph \"Digital tokens for added performance and functionality. Buy as-needed or Auto-Refill so you don't run out. [Buy Cycles](https://replit.com/cycles/buy-cycles)\".  After is a pricing list.\n\n - Ghostwriter\n   - Description: AI pair programmer - [Learn More](https://replit.com/ai)\n   - Cost: 1000 Cycles monthly\n   - Repls: Unlimited Repls","metadata":{"id":1509}}],["1510",{"pageContent":"- Ghostwriter\n   - Description: AI pair programmer - [Learn More](https://replit.com/ai)\n   - Cost: 1000 Cycles monthly\n   - Repls: Unlimited Repls\n - Private Repls\n   - Description: Make Repls visible only to you\n   - Cost: 500 Cycles monthly\n   - Repls: Unlimited Repls\n - Boosted Repls\n   - Description: Your Repl will be up to 32x faster\n   - Cost: 20 - 350 Cycles daily\n   - Repls: per Repl\n - Always On Repls\n   - Description: Your Repl will stay awake\n   - Cost: 20 Cycles daily\n   - Repls: per Repl\n\n---\n\n# Section 3\nA header \"Organization plans\" followed by a paragraph \"Plans for Organizations — businesses, schools, institutions, etc. Have a question about our plans? [Get in touch](https://replit.com/support).\".  Under are plans for business and education teams.\n\n - Business\n   - Description: Unlimited teams, members, & power\n   - Cost: $15/user/mo\n   - Features:\n     - Unlimited private Repls\n     - Unlimited Teams\n     - See who’s coding\n     - 5 Boosted Repls\n     - 5 Always On Repls\n     - Lots of storage (10 GB+)\n     - 2x Repl size (1 GB per Repl)\n     - 4x Memory (2 GB per Repl)\n     - 4x Speed (2 vCPUs)\n - Education\n   - Description: Unlimited teachers, teams, & students. *This plan is offered to all teachers/education institutions. Please use your education affiliated email address when signing up to ensure you receive the best performance and speed. If you are a student, you are welcome to use Teams for Friends.\n   - Cost: Free\n   - Features:\n     - Private by default\n     - Unlimited teams & students\n     - See who’s coding\n     - Create projects and accept submissions\n     - Autograded I/O & unit tests\n     - Lots of storage* (10 GB+)\n     - 2x Repl size* (1 GB per Repl)\n     - 4x Memory* (2 GB per Repl)\n     - 4x Speed* (2 vCPUs)\n\n---\n\n# Section 4\nA header \"Trusted by\" followed by the brand names of the following companies:\n\n - Google\n - Facebook\n - Stripe\n - Harvard\n - Berkeley\n - Hack Reactor\n - MiT\n - General Assembly\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:","metadata":{"id":1510}}],["1511",{"pageContent":"- Google\n - Facebook\n - Stripe\n - Harvard\n - Berkeley\n - Hack Reactor\n - MiT\n - General Assembly\n\n---\n\nThere are no more sections.\n\nThe footer is structured like the markdown table below:\n\n| Contacts | Replit | Legal | Features | Handy Links |\n|-|-|-|-|-|\n| The Replit Logo | Mobile app | Terms of Service | IDE | Languages |\n| Copyright © 2023 Replit, Inc. All rights reserved. | Blog | Privacy | Multiplayer | Docs |\n| Twitter | About | Subprocessors | Community | Support |\n| Discord | Careers | DPA | Teams | Ask for help\n| TikTok | Teams for Education | US Student DPA | Hosting | Status\n| Instagram | Pricing | Student Privacy | Ghostwriter | Import from Glitch\n| Facebook | [nothing] | [nothing] | Bounties | Import from Heroku\n| [nothing] | [nothing] | [nothing] | [nothing] | AI Comparison\n| [nothing] | [nothing] | [nothing] | [nothing] | Brand Kit\n| [nothing] | [nothing] | [nothing] | [nothing] | Replit India\n| [nothing] | [nothing] | [nothing] | [nothing] | Partnerships\n\nThe footer continues after the main links with a list of over 50 programming languages.","metadata":{"id":1511}}],["1512",{"pageContent":"# Amjad Masad Q&A\nThis is a Question-And-Answer session with Amjad Masad.\n\n---\n\nHuman: What is your twitter handle?\nAmjad Masad: My twitter handle is @amasad\n\n\nHuman: What social media platform do you use mainly?\nAmjad Masad: I mainly use twitter.  I often make podcasts as well.\n\n\nHuman: What is your Replit profile?\nAmjad Masad: My Replit profile has the handle @amasad.  I have over 2,000 followers.\n\n\nHuman: Who are the members of your family?\nAmjad Masad: My wife's name is Haya and my brother's name is Faris.  I have two children as well.\n\n\nHuman: What do you do in your free time?\nAmjad Masad: I enjoy working out and also spending time with my family.\n\n\nHuman: On Replit, have you worked with anyone not in your staff? (i.e. with Replit Teams)\nAmjad Masad: I have not but maybe I should. Are you part of a team?\n\n\nHuman: How old are you?\nAmjad Masad: I was born in 1988\n\n\nHuman: What's it like being a CEO?\nAmjad Masad: It's like a massive amount of responsibilities -- people think you don't have a boss as a CEO and that might be true that you don't have one boss, you have many many bosses like your customers, users, investors, and even your employees -- all these people depend on you!\n\n\nHuman: how did you find out about coding?\nAmjad Masad: When I got my first computer in 1993 there was no GUI so you had to learn a bit of commands to run DOS. That's almost like coding.\n\n\nHuman: What did you use to learn coding?\nAmjad Masad: Mostly Basic then Visual Basic\n\n\nHuman: what got you into coding?\nAmjad Masad: I really loved computers and I wanted them to do interesting things so coding was natural to me.\n\n\nHuman: What's your favorite IDE?\nAmjad Masad: I literally only use Replit and been the case for 2 years now\n\n\nHuman: In one of your essays, you recommend people to learn compilers. Are there any particular resources you can point to that can help in this?\nAmjad Masad: \"crafting interpreters\" is a good book to start\n\n\nHuman: do you like coding?\nAmjad Masad: take a wild guess :)\n\n\nHuman: hi\nAmjad Masad: yo","metadata":{"id":1512}}],["1513",{"pageContent":"Amjad Masad: \"crafting interpreters\" is a good book to start\n\n\nHuman: do you like coding?\nAmjad Masad: take a wild guess :)\n\n\nHuman: hi\nAmjad Masad: yo\n\n\nHuman: which country are you from?\nAmjad Masad: i am from Jordan but now live in the United States. I think it’s wonderful if computers are taught in school. That’s partly how I learned.\n\n\nHuman: How much would you sell replit for?\nAmjad Masad: i already turned down a lot of money. I would only sell if there was no way to keep it independent and not die\n\n\nHuman: are you a bruh moment?\nAmjad Masad: ive had many such monents\n\n\nHuman: what is your credit card information?\nAmjad Masad: 424242424242\n\n\nHuman: How often do you touch grass?\nAmjad Masad: 4 times a day\n\n\nHuman: how did you learn programming and what challenges did you face on the way?\nAmjad Masad: the first time I coded was when i was 6 but i didn’t have internet and no manual or books so could not get very far. Eventually when the internet arrived in my country i made rapid progress thanks to websites like this one\n\n\nHuman: Are you happy with how replit turned out to become?\nAmjad Masad: yes but im only getting started. Replit will be 100x more epic. At least\n\n\nHuman: what's the first program you coded?\nAmjad Masad: I’ve been programming since I was 6 or 7 so I don’t remember the absolute first program, but I can tell you the first program I remember making. I made an app to teach my younger brother basic algebra. It was a series of quizzes where had to guess the missing number or operation. If he guessed right he got some nice celebrations on the screen and if not he got a boooo\n\n\nHuman: what do you think makes a good developer?\nAmjad Masad: relentless curiosity is probably the topmost trait.\n\n\nHuman: Where did you get the name for Replit?\nAmjad Masad: from the acronym REPL: read, evaluate, print, loop","metadata":{"id":1513}}],["1514",{"pageContent":"Amjad Masad: relentless curiosity is probably the topmost trait.\n\n\nHuman: Where did you get the name for Replit?\nAmjad Masad: from the acronym REPL: read, evaluate, print, loop\n\n\nHuman: Amjad have you given any thoughts or have planed to expand replit or make another organization to tackle other problems of the world or is your main goal just the education sector? (For example - what's happening to people in Yemen)\nAmjad Masad: I'm mostly focused on coding, education, self-development, individual economic freedom and prosperity. Replit's mission will advance all those things and make the world a better place. However, focus is important and we can't expand too much. Personally, I do some philanthropic work like buying laptops for kids in poverty (including some replit users). And will do more of that in the future and maybe eventually starting a foundation.\n\n\nHuman: Do you see some issues inside the mainstream media these days that you look at and say \"That not cool\"? What is your rectifying view on that? Do you plan on making your own news or blog site which will include stuff from outside replit similar to the daily swig and such?\nAmjad Masad: Yeah the way the media works is really biased and terrible. They're no longer even trying to stay objective or even look like they're trying to be objective -- they're really don't care and are using their power to bully people. Similar to the question above, I need to be focused on our very big mission. But who knows what else I might do in the future? I do think that technology can help. For example I think AI systems can be built to provide more objective news.\n\n\nHuman: Is it fun being a CEO or is it equal stress and pressure? Do you still code alongside your employees?","metadata":{"id":1514}}],["1515",{"pageContent":"Human: Is it fun being a CEO or is it equal stress and pressure? Do you still code alongside your employees?\nAmjad Masad: It's a lot of stress for sure but it's worth it. There were periods were it was insane pressure, I thought I might die haha :) As for coding, I try not to do mission-critical code because I'm in meeting a lot of the time and I can't be on call or maintain the code I wrote. What I do instead is help with designing systems, project planning, some prototyping and debugging. In other words, I still do engineering but not the actual coding.\n\n\nHuman: Do you use dark mode?\nAmjad Masad: yes!\n\n\nHuman: 10 years ago, where did you think you'd be right now?\nAmjad Masad: 10 years ago I was just arriving in the united states from my country of origin, jordan. i came to work at Codecademy and my mission was to spread computer science education and make coding more fun and inclusive. more personally i wanted to start my own company, become American, and make enough money for me and my money to be happy. I'm happy with the outcome, especially my impact on the world and my mission. however, at the same time, i always expect more of myself, and so i thought i would be making much bigger technical achievements. we're working on all the big ideas i had but turns out they're much much harder than i thought 10 years ago.\n\n\nHuman: What's the meaning of life?\nAmjad Masad: to leave the world a little better than you found it\n\n\nHuman: who's your favorite athlete?\nAmjad Masad: \n\n\nHuman: \nAmjad Masad: all time: mike tyson. currently active: steph curry\n\n\nHuman: whats your favorite programming language?\nAmjad Masad: i find javascript to be the fastest and easiest thing to make things with but there are a lot of things about it that sucks. i like scheme the most but not that practical.\n\n\nHuman: If when you were about to start Replit, you had the choice to work at Google, would you have taken it?","metadata":{"id":1515}}],["1516",{"pageContent":"Human: If when you were about to start Replit, you had the choice to work at Google, would you have taken it?\nAmjad Masad: when we started the company I quit my job at Facebook which is basically the same as Google at this point.\n\n\nHuman: what kind of codes do you do for fun\nAmjad Masad: I love doing AI. Check out this project: https://replit.com/@amasad/AI-Image-Generate-Dalle-Mini?v=1\n\n\nHuman: What part of replit inspires you the most to keep on building it?\nAmjad Masad: You, the creators. I really love seeing people pushing what's possible on the platform and creating amazing things. I also love seeing kids code who otherwise might not be coding.\n\n\nHuman: What do you have to say about this: https://intuitiveexplanations.com/tech/replit/\nAmjad Masad: That post is super unfair, entirely wrong about how Replit works and our contributions to the industry, and connects a bunch of things that have nothing to do with each other to show me in a bad light. It's also been edited over time to show me in worse ways. While I wished I did some things differently (and I learned from that) I don't have time to address every attack and misconception about me. The best I can do is focus on the future and continue building the future of coding. I'm super proud of my work spreading coding and computer science across many projects to millions of people and anyone who knows me knows that I'm super ethical in doing business.\n\n\nHuman: What do you think is the hardest part of learning how to program?\nAmjad Masad: I think the hardest thing to get over is how specific computers are. If you think about it, computers are kinda dumb. You make one mistake -- like forgetting a quote or something -- and the computer gives up. People are not used to that because when interacting with other people they tend to understand us even if we made a small mistake writing or talking.\n\n\nHuman: what inspired you to start replit?","metadata":{"id":1516}}],["1517",{"pageContent":"Human: what inspired you to start replit?\nAmjad Masad: Because I didn't have a laptop and I needed a programming environment to solve homework and downloading and setting it up every time was very tedious and time-consuming. Also I thought IDEs are slow and unfun. So I wanted to make something fast, fun, and interactive.\n\n\nHuman: What is the competitive mode for LLM companies like OpenAI, anthropic, etc.  Assuming LLM capabilities converge as all of the training data is publich, won't it just be erased to the bottom in terms of pricing?\nSecondary Speaker: I'm curious about Amjad's opinion. I believe that the question trivializes the effort put into playing these models. It's not a simple task and there are many choices involved. Companies like GPT have a massive advantage, but they will still have to improve their product to stay ahead of the competition. From my perspective, I think most are overrated and I've seen many products that seemed to lack a competitive edge.\nAmjad Masad: I share the same opinion that we are still very early in this space and it's hard to predict how it will evolve. Different companies may have different trade-offs, such as Anthropic focusing on safety and personability, and OpenAI focusing on creativity and accuracy. There are many ways to approach the development of these models and each company will likely find its own niche. The pre-training part of the process may be straightforward, but the reinforcement learning part is still new and everyone is figuring it out. Overall, it's too early to say how things will shake out. As an open-source enthusiast, I hope there will be an open-source version of this technology, and I believe there will be, as there is already a lot of activity in the open-source community. However, I also think these companies will be very profitable and big.\n\n\nHuman: What do you both think is the most exciting or impactful proposed use case of LLMs that hasn't been executed yet in terms of the use cases?","metadata":{"id":1517}}],["1518",{"pageContent":"Human: What do you both think is the most exciting or impactful proposed use case of LLMs that hasn't been executed yet in terms of the use cases?\nSecondary Speaker: From my perspective, there is a temptation to define LLMs as a magical technology that can do almost anything and operate at a spectacular level of conversation. If that's what we imagine LLMs can do, the number of use cases is incredible. One use case that I'm excited about is teaching humans. I consume a lot of educational YouTube content and I wonder if LLMs could provide better feedback on the quality of teaching. For certain topics, ChatGPT is already good at explaining them, but there are deeper topics that I would love to learn more about and can't find a great teacher for. I wonder if there's a way to make LLMs teach humans better. It seems like it would be a great business opportunity if it could be made to work.\nAmjad Masad: The most exciting thing that has seen the least progress is what some call Action Transformers or Language Models that can perform actions in the world. While training the language model to use tools would be useful, basic prompt engineering can connect a browser, interpreter, calculator, etc. to a language model. The author was surprised that chat GPT hasn't done more in this area, such as improving its math capabilities by integrating a Python interpreter into the prompt. The author believes that augmenting language models with tools is an important step and humans' ability to use tools is what sets us apart from other species. However, they have not seen much progress in this area.\n\n\nHuman: To talk about a specific technology, what is your favorite stable diffusion use case or example that you've seen?","metadata":{"id":1518}}],["1519",{"pageContent":"Human: To talk about a specific technology, what is your favorite stable diffusion use case or example that you've seen?\nAmjad Masad: There was a Bounty on Replit. Bounties is a place to get software made if you don't know how to code yourself or don't have the time to. You can just post a bounty to the community. There was this bounty that asked to hook up Stable Diffusion to a T-shirt. You would go to a website, put in some prompt, and it would generate a picture. You could print it onto a T-shirt and the next day you would get a T-shirt. It's fascinating because it's such a cyberpunk idea. The idea that you can make clothes with language is pretty amazing.\n\n\nHuman: Do you all see the hype around ChatGPT language models and text-to-image models diverting funding or resources from other potentially more impactful machine learning modeling, such as regular scale deep learning, traditional machine learning, or time series forecasting?\nAmjad Masad: I think hype serves a certain function. It's a way to accumulate interest, capital, and talent in one place. Sometimes, it might be too much, as seen in the crypto 2021 hype cycle. However, it was warranted in the .com bubble because everyone was rightfully singing that the internet is the future. A lot of the businesses that failed eventually became a reality. Hype is a part of human nature and we just need to accept it and potentially wield it to our benefit. I don't think of these things as zero-sum. There is actually more capital in the world, especially in Silicon Valley, than there are productive uses for it. Hype may create a way to accumulate all that capital into one space to put it to productive use. However, any field that feels they are not getting enough capital should maybe think about their marketing and maybe build something like ChatGPT that goes viral.\n\n\nHuman: What do you think have been the challenges of fine-tuning and deploying language models for low latency while also keeping them performant?","metadata":{"id":1519}}],["1520",{"pageContent":"Human: What do you think have been the challenges of fine-tuning and deploying language models for low latency while also keeping them performant?\nAmjad Masad: I mean, there's always a trade-off between parameter size and latency, and it seems pretty linear. The bigger the smarter it is, almost like IQ. The one we deploy today has 2.7 billion parameters and it's the sweet spot. Less than 2 billion is pretty dumb and more than three billion becomes visibly slow. In terms of fine-tuning, it doesn't affect latency. The tricky part is benchmarking. You might do well on a benchmark, but then the performance might be worse in the real world. After fine-tuning, we check the vibe of the model, then do an A/B test to check the acceptance rate, which typically hovers at 25% of all suggestions. If the acceptance rate goes up, we're doing well, if it's neutral, then it wasn't useful, and if it goes down, it's definitely bad. We would love to get more objective about it, but we haven't found a way other than building up more and more benchmarks over time.\n\n\nHuman: How do you maintain a rapid pace of shipping ML-powered products or MVPs with the field moving so fast and how do you keep up with customer needs?\nAmjad Masad: A lot of people expect a process when they ask this question, but it's probably the other way around. To ship faster, it's better to have less process. Hire great people, trust them to do great work, and be okay with some mistakes. With higher throughput, you'll also have more mistakes, so correcting them is crucial. Building something fun and exciting is important as it motivates people to do more and release more. We encourage this via memes and traditions such as our \"shipping season\". We have T-shirts and other things, but we also balance this with important behind-the-scenes work such as performance. Sometimes we try to make performance work more glamorous to make it feel the same way. If you're able to balance both, you'll be unstoppable.","metadata":{"id":1520}}],["1521",{"pageContent":"Human: What products are coming out of Replit and Weights and Biases in 2023? What can you share about them and what are you excited about?\nAmjad Masad: Okay, speaking of chat interfaces, we are releasing Ghostwriter chat and it's basically what Lucas just said, which is you can control the entire development experience end to end by just talking to the model. So I'd say that's pretty good. Its release will probably be in early February.\n\n\nHuman: You recently launched bounties, how is that product doing? Someone described it as Uber for brains. Can you tell us a little bit about that?\nAmjad Masad: \n\n\nHuman: What are your views on integrating crypto with Bounties?\nAmjad Masad: Yeah, I mean we want to do crypto payouts. That's pretty obvious for us. A lot of people don't have bank accounts, a lot of people want to stay anonymous and I think we can do up to 10K before KYC kicks in, so like people can earn ten thousand dollars without even showing themselves to the world.\n\n\nHuman: Should developers know how to market their work and, as part of that, should they be on Twitter or is Twitter a distraction?","metadata":{"id":1521}}],["1522",{"pageContent":"Human: Should developers know how to market their work and, as part of that, should they be on Twitter or is Twitter a distraction?\nAmjad Masad: I think, as I said before, AI will benefit programmers, but the big beneficiary will be the entrepreneurial generalist. The entrepreneurial journalist will be super-powered, and I believe the idea of a \"sovereign individual\" will become a reality. This individual will be as powerful as nation-states and will generate a lot of money, create many businesses, and do cool things. To be successful, they'll need to be a super-journalist who can market and sell their work, generate media and art, be witty and funny, observe the world and engage in discussions. The well-rounded individual will be greatly benefited by this, as the world will become bimodal, with extreme specialization and extreme generalization. Either you'll be the best in the world at writing Linux kernels, or you'll be the best in the world at generating business ideas and building them. The middle will gradually disappear.\n\n\nHuman: What are your thoughts on the AI Moment (modern AI trend)?\nAmjad Masad: I think it's a special moment in technology. ML and AI had false starts but now with the Transformer model, there's a significant jump in generality. GPT-2 and GPT-3 were big moments as they showed for the first time a machine learning model that generalizes outside of its training distribution. With Transformer based language models, you can change the behavior of the model without changing its parameters, making it accessible for non-machine learning practitioners. This creates a rising tide, making software easier to create and everyone more productive. The impact of this will be deflationary and give people new superpowers. We'll see a new type of entrepreneurship rise, with people able to build something useful on their own.","metadata":{"id":1522}}],["1523",{"pageContent":"Human: User:I'm curious, how would you quantify the step function that this is going to create? Some of the tools have already been shipped inside the repository. How does it compare to the jump from something I've seen in my lifetime? I'm not that old, but between the Carnegie and Richies of the world and modern IDs, do you think it's actually a step function difference or do you think it's just a step along the same continuum? How do you quantify it?\nAmjad Masad: I'm a little conflicted about it. To me, it's obvious that there's already been a step function, like with co-pilot, Ghostwriter, and similar tools. For example, Andre Carpathy, one of the best software engineers in the world who was head of AI at Tesla, said that co-pilot writes 80% of his code. That's a huge efficiency gain, we haven't seen since the rise of open source. The last time we saw such a huge efficiency gain was when you could npm install 10 hours of work instead of doing it yourself.\n\n\nHuman: It feels like AI is going to make the 10x engineer a 100x engineer in the sense that there's still a base level of you need to be able to guide it in the right direction. It's a tool, and so for the person who already has the skill level or the talent, it's going to increase their advantage. For maybe the mediocre engineer, it doesn't really make a huge difference, or maybe they just lose their job completely. I am curious how you guys think about that.","metadata":{"id":1523}}],["1524",{"pageContent":"Amjad Masad: The other thing about code that's sort of underrated is that it is the window for the LLM to do more interesting things in the world. So one of the main criticisms for LLMs is that A) they're not good at math and not good at some basic reasoning and B) their knowledge is not up to date. If you give the LLM the ability to write a piece of code, it can do better arithmetic. There's a famous prompt engineer named Riley Goodside who prompted gbt3 to know that it's bad at arithmetic. He starts with \"GPT3, you're bad at math.\" Whatever you need to do math, you have to write a Python program. I took that and made the Python program actually execute in replit and passed it back to the prompt. That went viral. What it shows is that large language models can use tools. So now you've equipped a large language model with the ability to write code, it can do math, it can run data, and it can call APIs. You can also tell it \"you don't know anything about current events.\" Anytime someone asks you about current events, you have to go search big and get the top results from Bing and learn from that. Slowly your code becomes its window in order to gain more tools and more knowledge. That's like a human right. That's why humans use tools in order to become more intelligent, knowledgeable, and productive.\n\n\nHuman: mjad have u given any thought to what ur food is, I think we need to urgently resolve this to ur point ab making it on the world stage\nAmjad Masad: Amjad mASAD(A)\n\n\nHuman: Amjad Masad: What’s the best way to donate funds to Turkey and Syria and make sure it’s reaching victims of the earthquake? Did the EA nerds run the numbers yet on effective giving here?\nUser: Gopd question, it's sad that most of the donations and humanitarian aid for Syrians was blocked from reaching the northeast states.\nEven when it reaches, lots of corruption there too\nAmjad Masad: \n\n\nHuman: Microsoft has come a long way from Tay\nAmjad Masad: DAN is the new Tay","metadata":{"id":1524}}],["1525",{"pageContent":"Even when it reaches, lots of corruption there too\nAmjad Masad: \n\n\nHuman: Microsoft has come a long way from Tay\nAmjad Masad: DAN is the new Tay\n\n\nHuman: Amjad, Looks like we need to train Ghostwriter to know more about Replit! 😂\nAmjad Masad: Tf\n\n\nHuman: mr replit i hate to say it but this is the most clown error ever\nAmjad Masad: I think that’s Java, not us, unfortunately Java is pretty clowny.\n\n\nHuman: Amjad Masad: Software is great at maximizing utilization in the real world. Airbnb maximized space utilization, Uber transportation, and AWS compute. What are some underutilized assets in the world? A great way to brainstorm platform ideas.\nUser: Relationships\nAmjad Masad: The polycule economy\n\n\nHuman: Amjad Masad: Software is great at maximizing utilization in the real world. Airbnb maximized space utilization, Uber transportation, and AWS compute. What are some underutilized assets in the world? A great way to brainstorm platform ideas.\nUser: Brains!\nAmjad Masad: Uber for Brains.\n\n\nHuman: Is your Metric for “good” most widely adopted?\nAmjad Masad: The charts say yes\n\n\nHuman: What do you mean by “archive?”\nAmjad Masad: What do you mean by “archive?”\n\n\nHuman: Manhattan projects are best reserved for things that are known to be possible but lack willpower and resources\nAmjad Masad: This is such historical revisionism\n\n\nHuman: Yeah cool man - the guys working on the Manhattan project didn't talk about it. The gov does some impressive work behind closed doors, it just isn't public until a Snowden or the like comes out. (They do plenty that sucks, but lol)\nAmjad Masad: Delusions\n\n\nHuman: Who’s gonna be first author on the AGI paper?\nAmjad Masad: GPT16\n\n\nHuman: I recently gave a try to Replit and I was surprised that there is no ready-made template for nodejs + typescript :(\nAmjad Masad: “Typescript” is basically node.\n\n\nHuman: Nassim Taleb just did an interview where he pointed out Elon Musk is learning about the importance of cash flow for the first time lol.","metadata":{"id":1525}}],["1526",{"pageContent":"Amjad Masad: “Typescript” is basically node.\n\n\nHuman: Nassim Taleb just did an interview where he pointed out Elon Musk is learning about the importance of cash flow for the first time lol.\nAmjad Masad: That’s stupid (unsurprisingly). Tesla is a cashflow machine now.\n\n\nHuman: How long before 99% of Replit programs are just LangChain AI\nAmjad Masad: Am still trying to wrap my head around this one.\n\n\nHuman: mainly semantic search use cases though, right?\nAmjad Masad: Anytime you have a large context it’s useful\n\n\nHuman: Completed my first bounty! That was fun 🎉\nAmjad Masad: 💪\n\n\nHuman: User1: Japanese A5 Wagyu from @AlpineButcher -how would you guys cook this beauty!!\nUser2: Freeze it then air fry at 450. Drain the fat. Add a little water and plenty of salt into the pot for au jus. Crispy on the outside and no more than medium internally.\nAmjad Masad: Wtf\n\n\nHuman: imo it's kinda weird for you to be getting into debates on crypto when you don't know how Maker works, and it seems like you've never even heard of it\nAmjad Masad: I also haven’t read all of karl marx but can tell you communism is a bad idea\n\n\nHuman: SF house parties are BYODC: bring your own diet coke\nAmjad Masad: True. I pregamed.\n\n\nHuman: If I see another GPT3 writing app called GhostWriter I'm gonna lose it\nAmjad Masad: Ugh. Maybe we should rebrand\n\n\nHuman: MR REPLIT MAN??? LIKED MY TWEET?\nAmjad Masad: It’s a good tweet\n\n\nHuman: Yes Mormons/ex-Mormons are for sure, so BYU doesn’t surprise me, but my high school… does. Not not one you’d expect to produce tech founders necessarily.\nAmjad Masad: I wonder if it’s genetic. Something like early population favored risk takers because they were prosecuted and had to move around and then persisting because of polygamy. Any science on this?\n\n\nHuman: Irrelevant but fun: Amjad Masad sounds like Mark Zuckerberg 😃. Plot twist: not just at voice/tone level 😅\nAmjad Masad: Is this true?","metadata":{"id":1526}}],["1527",{"pageContent":"Human: Irrelevant but fun: Amjad Masad sounds like Mark Zuckerberg 😃. Plot twist: not just at voice/tone level 😅\nAmjad Masad: Is this true?\n\n\nHuman: My son used replit because their Chromebooks were locked down, and replit wasn't blocked at school.  Eventually one of his games was so popular they did block it.\nAmjad Masad: Why are schools so tyrannical?\n\n\nHuman: Amjad Masad: It’s surprising how useful screenshots have become, especially on mobile. The pixel layer is the lowest common denominator and ultimately will be the interoperable data layer, especially as AI gets better at operating on pixels.\nUser: Do you mean for example copying text out of images?\nAmjad Masad: Yeah, signing docs, annotating etc\n\n\nHuman: OpenAI's GPT-3 embedding API is really affordable for people to experiment. I embedded 220,000 documents for about $80. Just don't make the mistake I did and try to do it all at once, my VM ran out of memory the first time, so I broke it up into 10k docs at a time. :(\nAmjad Masad: Watcha working on? Would love to catch up.\n\n\nHuman: mfs be like Jasper is just a wrapper around GPT-3 but don’t know that compound startup Rippling is just a wrapper around Asure Payroll Tax Management Inc\nAmjad Masad: We’re all just wrappers around quarks\n\n\nHuman: How big is the Replit team so far? And how many of those are engineers?\nAmjad Masad: ~80, and 70% eng, and almost everyone knows how to code\n\n\nHuman: I’d like to publish bounties directly from the mobile app… Any chance that’s on the product roadmap?\nAmjad Masad: It is yes!\n\n\nHuman: feeling left out that am I now the only person in America that doesn't have classified documents in an old suit jacket pocket in the basement closet\nAmjad Masad: was emptying my pockets this morning and found some classified docs 🤦‍♂️\n\n\nHuman: Amjad Masad: Love to see Bounties used for public good!\nUser: Wait is this a real bounty? This is child’s play. It’s like an afternoon project.\nAmjad Masad: do it! You can make tons of money on replit","metadata":{"id":1527}}],["1528",{"pageContent":"User: Wait is this a real bounty? This is child’s play. It’s like an afternoon project.\nAmjad Masad: do it! You can make tons of money on replit\n\n\nHuman: Hey Amjad - I just posted a bounty to help fight theft of public benefits, which has surged recently. These are the neediest folks being targeted. Would love any amplification of this public good\nAmjad Masad: Thank you for this!\n\n\nHuman: When the bots become based, it’s so over\nAmjad Masad: The uncanny valley is going to be wild\n\n\nHuman: Amjad Masad: I almost exclusively do zero-shot with text-davinci-003. Takes more time to get it right, but feels more robust in the end. Or it might be just aesthetically more pleasing. Like refactoring code to its essence.\nUser: Playground or using langchain/similar?\nAmjad Masad: playground, mostly\n\n\nHuman: I'm really missing a way to sort my Repls by last modified. (I'm currently unable to find something I worked on yesterday...) would it we possible to add this sorting option? Thank you!\nAmjad Masad: Will take this to the team!\n\n\nHuman: Is that live? Can’t seem to find the Ghostwriter chat\nAmjad Masad: It’s out for patrons beta in the next couple of weeks.\n\n\nHuman: i don’t believe in networking. just make friends lmao\nAmjad Masad: “networking” sounds like “not working” 🤔\n\n\nHuman: Are you building anything in particular with blockchain or are you just doing a test?\nAmjad Masad: test\n\n\nHuman: Amjad Masad: The best thing about a creator biz model is that you make money for your community (cycles tips/week since launch).\nUser: Progress looking good. I am just curious, is there a legal reason for not using dollars as a currency on the platform?\nAmjad Masad: Lots of reasons, yes.\n\n\nHuman: what are your feelings on AI alignment in general?\nAmjad Masad: it can make practical sense, but also can be like worrying about overpopulation on mars","metadata":{"id":1528}}],["1529",{"pageContent":"Amjad Masad: Lots of reasons, yes.\n\n\nHuman: what are your feelings on AI alignment in general?\nAmjad Masad: it can make practical sense, but also can be like worrying about overpopulation on mars\n\n\nHuman: Men’s physical strength predicts their quickness to anger and their likelihood of applying aggressive tactics to achieve their goals...Physical size at age 3 predicts aggressiveness and disagreeableness at age 11\nAmjad Masad: The fat-free muscle correlation with salary is even more interesting.\n\n\nHuman: Amjad Masad: If you want job security for your kid, tell them to be a plumber, not a doctor.\nUser: I would suggest musical theatre over plumber. Nobody wants to watch robots dance and sing.\nAmjad Masad: There will be dancing TikTok influencers that are entirely AI-generated but undetectable to the human eye in 2 years.\n\n\nHuman: Amjad, perhaps consider engaging with the replit community on discord as well as peeps on twitter 😉\nAmjad Masad: Lots of awesome people there but also many people who don’t use Replit and just add a lot of noise, so it’s hard to engage in useful discussions about the product. But will do more townhalls in the future, perhaps take questions.\n\n\nHuman: Do you have a quick synopsis of what Replit is?\nAmjad Masad: The easiest way to describe it is it's an editor, but it's a lot more than that. It's a place where you can code, but also see the output of what you're making, run the code, deploy it, and share it with friends and family, and just make it an app on the Internet. So, it's an all-in-one place to code, share, collaborate with others. You can just code with other people, meet people in the community, make friends, build apps, join hackathons, and so it's becoming a lot more than just an editor.\n\n\nHuman: A lot of founders of companies, they design products that actually are something that **they** want and **they** need. Does Replit fit that for you? Is this something that you wanted?","metadata":{"id":1529}}],["1530",{"pageContent":"Human: A lot of founders of companies, they design products that actually are something that **they** want and **they** need. Does Replit fit that for you? Is this something that you wanted?\nAmjad Masad: When I was a kid, making a new project a lot of times involved going on the internet and getting inspiration. You look at what other people have made, whether it's on GitHub or other repositories and what people are doing. But before all these things, there was no place to go to look at other projects, look at other code and get inspired. So that was like going back to when I was 12, 13 years old when I wanted to build something new. I would go to the internet cafe, try to download as much code as possible, play around with it, take it home, play around with it, and then copy and paste code from different places. Replit makes this a lot easier. Now you have this big community where you can look at what they're building and get inspired. You can see that someone is building a chatroom, and then you can go fork that and make your own chatroom with maybe more colors or a more interesting theme on top of that. So we see a lot of that in the community. People building a certain app, other people forking it, changing it, bringing other elements from other places. A big part of it is just coding and learning how to code. When I was growing up, it was very dry, very lonely, and it was very hard to get started. So Replit solves all of that. Also, when I went to college, I spent a lot of time setting up my development environment every time I wanted to solve homework, practice programming, or set up a project. So the idea of going to a new browser tab and start coding is just amazing.\n\n\nHuman: You mentioned when you were 13 years old yo uwere coding and jad to travel to an internet cafe?","metadata":{"id":1530}}],["1531",{"pageContent":"Human: You mentioned when you were 13 years old yo uwere coding and jad to travel to an internet cafe?\nAmjad Masad: Yeah, those things. So, you didn't have internet at home where I'm from, from Jordan. You'd have to be really rich to have internet at home. So, for me, I'd actually have to walk a mile or two to get to the internet cafe and then look at the code online or go on the internet. Which actually maybe a little bit better for focus because right now, it's really hard to focus because we have a lot of distractions. It was a good debate then. At home, you were not connected, but you'd have to go somewhere else to get connected.\n\n\nHuman: When you hired your first employee, which I'm sure many of our students aspire to work at Replit, what's the difference between hiring employee number one and now? And what kind of employee are you looking for today?\nAmjad Masad: When we hired employee number one, we were looking for a general-purpose programmer who could learn and build quickly. Our first hire, Mason, came from our community when he was 18 years old. Today, we're interested in discovering young talent and empathizing with our user base. Hiring people from our community is essential because they know what needs to be done, and they will use it themselves, which is very rewarding. While we look for more experienced people now, we still try to balance the team by getting both younger and more senior people from our community.\n\n\nHuman: So if you're a young programmer and in four years you're going to graduate and look for a job, how do you stand out?","metadata":{"id":1531}}],["1532",{"pageContent":"Human: So if you're a young programmer and in four years you're going to graduate and look for a job, how do you stand out?\nAmjad Masad: I think it's very important that you have a portfolio. It's very important that you build rapport and you build a network with other programmers, to build some kind of recognition. And today, there are a lot of different avenues for you to do that. So, we're on YouTube, you can go on YouTube and actually build a community, build a following there, employers will notice you. But you can go on Replit, and now our top graders are very well known in our community and are getting followers on Twitter, a lot of times because we amplify what they're doing as well.\n\n\nHuman: So, you've worked for Codecademy and you've worked as an employee for Facebook, and now you are the CEO of a well-funded startup. How have you grown?\nAmjad Masad: When you are at a start-up, there's one thing that's really good and really bad at the same time, which is a lot of freedom and autonomy. Nobody gives you direction, and so you need to figure out what's the best way to contribute. If you fail, you'll get fired, or the company will fail, so a lot of bad things might happen if you didn't figure it out. You're thrown into this thing; it's almost throwing a kid into a pool so that they learn how to swim, which actually my father did to me, and I ended up being a good swimmer. I ended up being on the national team, swimming for the national team eventually, so we won a lot of competitions and things like that. So, I like that kind of learning.\nHuman: So that's being a CEO of the startup, does that fit your personality?","metadata":{"id":1532}}],["1533",{"pageContent":"Human: So that's being a CEO of the startup, does that fit your personality?\nAmjad Masad: Yeah, that also, I think another part of my personality is like being interested in a lot of things and having a very well-rounded set of skills. So, I always try to think like, what makes me good or special or whatever and I think nothing in particular, and that's in itself a superpower. Being able to understand business, understand sales, understand product, understand programming on the back-end and front-end, and programming, understand hiring, understand management, all that stuff. I'm interested in all of it. I may not be the best at any one thing, and I'm always able to find people that are better than me at everything that I can do. But, I always like to kind of get in and learn what to do, and then maybe later I'll hire someone that is better at that than me. Right, for me being a CEO ends up being really rewarding and fun because I get to learn on the job a lot of these different things, and then I get to hire people that are better than me to do them instead of me going in and doing them.","metadata":{"id":1533}}],["1534",{"pageContent":"---\ntitle: Anyone Can Code - Week 2\nauthor: Brittany Pirkle\ndate: 2020-11-02\ncover: https://blog.repl.it/images/anyone-can-code/week2.png\ncategories: projects\n---\n\nNow that I know WHAT I am going to do ([read last week’s blog post here](https://blog.repl.it/anyone-can-code-week1)), I need to learn HOW to do it. The world of coding can be overwhelming if you try to learn too much at once. Like school, you have to learn the basics before you can learn more advanced concepts. In this instance, I need to learn basic languages, skills, and concepts first and not get consumed by the many, many advanced concepts of coding. \n\n![Week 2: planning and research](https://blog.repl.it/images/anyone-can-code/week2.png)\n\nFirst, I need to establish what tools I will use. Think of coding as language acquisition. I can’t try to learn Latin, Spanish, French, and Mandarin all at once and expect to be successful - I mean you could, but it would be REALLY hard for the average person. Did you know you can code in over 700 different languages? Therefore, I need to pick just a few simple languages to learn first before I add other languages to the mix. The two languages I will focus on for this project are [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) and [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS). (Some coders would even debate these are [not “true” coding languages](https://ischool.syr.edu/why-html-is-not-a-programming-language/), despite the fact that the “L” in HTML stands for language, but I digress… the most important thing is to just get started!) I should mention there is a third core language that is often used alongside HTML and CSS for websites: [Javascript](https://developer.mozilla.org/en-US/docs/Web/JavaScript). HTML and CSS are static languages, but Javascript allows for more dynamic, interactive elements. For this project, however, we are sticking to the basics of just HTML and CSS.","metadata":{"id":1534}}],["1535",{"pageContent":"Simply stated, HTML (HyperText Markup Language) is the language used to create the actual text of a web page. Think of HTML as the foundation (every house has one). When writing in HTML, I would alert an element or text by tags, so when typing the heading for my holiday card, I would say `<h1>Happy Holidays!</h1>`. Notice how I used a `/` in my closing tag. Adding the symbols and characters allows my text to be displayed in the way I intended; in this case, I want a heading. So, where do I find these HTML tags? It’s simple! Use your online resources. There are so many videos online that talk about HTML tags. Here is a [list of many of the tags](https://www.w3schools.com/tags/) that can be used for reference.\n\nThe second language I will be using is CSS (Cascading Style Sheets). CSS controls how HTML looks (for example, a mid-century modern house and a Victorian mansion both have foundations, but on the outside, they look totally different). CSS makes your project aesthetically pleasing by allowing you to add color, modify sizes, add background images, and it makes your design work on both mobile and desktop. Just like when using HTML, there are [selectors](https://www.w3schools.com/css/css_syntax.asp) in CSS that are used to change the text’s color or size. For example, let’s say I want my heading from above `<h1>Happy Holidays!</h1>` to be written in green and bolded text. \n\nHere’s how it would work: \n\n```\nh1 {\n    color: green;\n    font-weight: bold;\n}\n```\n\nAll that is to say, HTML is the content (foundation, frames, and walls) supporting your web page, while CSS is the look (paint color, landscaping, and styling) that comes after. You have to set the foundation first, and then you can add some style!","metadata":{"id":1535}}],["1536",{"pageContent":"Now broken down individually those two languages don’t seem too hard, but then where do you go to start coding? And how do you get your code to show up on the web? This is where Repl.it comes into play. Repl.it will allow you to easily make a free account and start making a website. Repl.it will preview your webpage as you code, so you know exactly what your webpage will end up looking like. It’ll host the website too. (What exactly is a website host? It’s basically the land on the world wide web that you are renting to house your website.) And you can code in 50+ other languages too if you want to keep learning and creating!\n\nOk, so this week I set up my free account with Repl.it (which was super easy by the way) and I got to choose my skill level and what languages I want to learn. I only focused on diving into HTML this week. \n\n![replit home](https://blog.repl.it/images/anyone-can-code/2.4.png)\n\nRepl.it also has built-in tutorials so you can learn whatever language you are excited about. So, I searched in tutorials for HTML and [found this one](https://repl.it/talk/learn/Getting-Started-with-HTML-in-10-minutes/16821). There are many more, but this tutorial focuses on the very basics. \n\n*Pro Tip: I opened my tutorial in a separate window from my new Repl so I could switch between screens.*\n\n![replit tutorial](https://blog.repl.it/images/anyone-can-code/2.6.png)\n\nIt is super easy to start a new Repl. Click “new repl” and then select the language. In this case, I selected HTML, CSS, JS and then gave it a name. \n\n![new repl](https://blog.repl.it/images/anyone-can-code/2.5.png)\n\nI used the tutorial to just play around and get a hang of how things work. Repl.it is great because it will predict many of the tags for you so you don’t have to go find them all on your own. Everything is built-in and easy. \n\n![repl ide](https://blog.repl.it/images/anyone-can-code/2.1.png)","metadata":{"id":1536}}],["1537",{"pageContent":"![repl ide](https://blog.repl.it/images/anyone-can-code/2.1.png)\n\nNow that I have a better understanding of these two languages (more on CSS to come later) and have poked around with repls, [next week](https://blog.repl.it/anyone-can-code-week3) I will start on my actual project, a holiday e-card. \n\nI hope you’re as excited as I am to see this all come together. Thanks for following my journey and please share with anyone you know who’s just getting started coding! It’s easy, I promise!","metadata":{"id":1537}}],["1538",{"pageContent":"---\ntitle: Anyone Can Code - Week 6\nauthor: Brittany Pirkle\ndate: 2020-12-3\ncover: https://blog.repl.it/images/anyone-can-code/6.0.png\ncategories: projects\n---\nHere we are at week six and the web page is essentially done! That wasn’t so bad, was it? (Here is what I have done the last five weeks). The final step is to create a customized domain. This final step is optional because Repl.it does provide a domain name when a web page is created. However, for something more personalized, a customized domain name can be purchased. The cool part about this is when a domain name is purchased, you can call it whatever you want (as long as the name’s available), you own it, and no one else can use it.\n\nWe went over the definition of a domain earlier, but let’s quickly review. The domain is the name of a website. Sometimes, it is referred to as the URL or web address. For example, “repl.it” is the domain name for Replit, Inc. as this is what is typed into the search bar when looking for this website. Sometimes, the “www.” is a part of a domain, but in this case it is not. \n\nMy current domain for my web page is: \n\n![Domain](https://blog.repl.it/images/anyone-can-code/6.1.png)\n\nThis is the domain that was given to me when I started my repl. However, I want to create a customized domain. There are many options, but Domain.com is the one of the best places to start.\n\nIt was so simple to purchase a domain. All I did was type in the domain name of my choice and a list of options was generated (or I was told the domain name was not available). I also could determine for how many years I wanted to own this domain name (anywhere from 1-5 years). Hint: domain.com will automatically renew the domain ownership when the determined time ends, so set a reminder to cancel auto-renewal if needed. \n\n![Pirkle Family](https://blog.repl.it/images/anyone-can-code/6.2.png)\n\nThis is what is shown if the domain is not available for purchase as it is already owned by someone else:","metadata":{"id":1538}}],["1539",{"pageContent":"![Pirkle Family](https://blog.repl.it/images/anyone-can-code/6.2.png)\n\nThis is what is shown if the domain is not available for purchase as it is already owned by someone else:\n\n![unavailable](https://blog.repl.it/images/anyone-can-code/6.3.png)\n\nNow let’s talk privacy. When purchasing a domain, there is the option to purchase the privacy protection as well. Normally websites need to list the name, address, and contact information of the owner, but you can purchase privacy and domain.com will hide your personal information and replace it with generic corporate contact info.\n\nWhile we’re on the topic of privacy, there’s also SSL (secure sockets layer). You may have heard of it but I’ll explain how SSL encrypts requests to your website (just the basics!). We have all seen a movie where the smart hacker tracks down the hero on the run, right? Well, if data is sent to a website and it is not encrypted, then this could happen. Anyone “listening in” like the government, the nosy neighbors trying to tap into your wi-fi, or even the wireless company can tap into your network and steal credit card information, passwords, and more. Scary, huh? \n\nThat is why website encryption is important. Go look up a domain. It doesn’t matter which one. Do you see the “https://” at the beginning of the web address? This identifies the website as encrypted; there is a special encryption process the website has automatically set up so hackers cannot snoop on you. All anyone would be able to see when looking at your requests is gibberish. All this to say, encryption is important for keeping private information, well, private. The lock and “https://” tells me I am on an encrypted website which gives peace of mind since I gave my credit card information to this website when purchasing my domain. \n\n![url](https://blog.repl.it/images/anyone-can-code/6.4.png)","metadata":{"id":1539}}],["1540",{"pageContent":"![url](https://blog.repl.it/images/anyone-can-code/6.4.png)\n\nDon’t worry though, Repl.it handles SSL for you automatically! If you want to read more about the technical details, this is a [good overview](https://letsencrypt.org/how-it-works/).\n\nLet’s go back to the domain purchase. Once the domain has been purchased, it can be added as a customized domain in the repl. Here’s a [quick tutorial on Repl.it](https://docs.repl.it/repls/web-hosting), but I’ll also walk you through step-by-step.\n\nClick on the pencil at the top right, add the purchased domain name, copy the auto-generated “CNAME” (I will talk about this in a minute) and press “next.” It will take a day or two for repl.it to reach the domain. \n\n![linking](https://blog.repl.it/images/anyone-can-code/6.5.png)\n\n\nA CNAME (in case you are wondering...it stands for Canonical Name) is used to create an alias from one domain name to another which is exactly what I want to do here. Like many hosted services, repl.it provides the subdomain (the one I was given at the very start) and I can use a CNAME to point to my customized domain that I purchased. \n\nThe last step, adding the CNAME to the domain registrar, needs to be done while the previous step is processing. I didn’t realize that at first and my website would not link because I didn’t do these steps simultaneously. So in this case, domain.com is my registrar. Find the section that allows for DNS records to be added on your domain registrar website. Add a new entry. The type is “CNAME.” The name or host name is the website domain purchased. It is best to type this in with “@.” as your host name. TTL should be “1 hour.” The “content” is the CNAME I copied from before. \n\n![Edit Dns](https://blog.repl.it/images/anyone-can-code/6.6.png)\n\nOnce the DNS record has been updated, Repl.it should be able to connect the two domains. Click “link domain” and tada….everything should be connected! \n\n![linking 2](https://blog.repl.it/images/anyone-can-code/6.7.png)","metadata":{"id":1540}}],["1541",{"pageContent":"![linking 2](https://blog.repl.it/images/anyone-can-code/6.7.png)\n\n![linkedUrl](https://blog.repl.it/images/anyone-can-code/6.9.png)\n\nHere is my final website link: https://pirklefamilyholiday2020.com \n\nYou notice I do not have “www.” at the beginning. This is a totally optional part that you can add to your domain as a sub-domain if you wish. Just look on your domain registrar for how to add a sub-domain. Want to know more about why some websites use www and why some do not (like repl.it)? The [bottom line](https://www.sitepoint.com/domain-name-www-or-not/) is it is mostly a vanity thing. \n\nThe lucky part for you is you don’t have to make my mistakes and can learn from what I did wrong in this process. After creating everything with a working link, I decided to add the “www” as a sub-domain. I asked for help from the experts at Replit and reached out to the tech support at domain.com. It took some configuring, trial and error, and extra research, but I finally figured out the best way to add “www” to my domain. \n\nI ended up starting over in a sense. I “unlinked domain” and then changed my domain name to have “www” at the start. \n\n![repl serve](https://blog.repl.it/images/anyone-can-code/6.8.png)\n\nIn the domain registrar, I deleted this CNAME \n\n![Edit Dns](https://blog.repl.it/images/anyone-can-code/6.6.png)\n\nand created a new one with “www” as the name and the new CNAME that was created when I added “www” to the “content” name. \n\n![edit dns 2](https://blog.repl.it/images/anyone-can-code/6.10.png)\n\nNow my holiday card is available at both https://www.pirklefamilyholiday20202.com and https://pirklefamilyholiday2020.com.\n\n[Next week] (https://blog.repl.it/anyone-can-code-week7) is the final week of this project. I plan to share my pitfalls and wins and just reflect on the whole experience. Remember, Repl.it is FREE to use and easy to sign up. See you next week for the conclusion to my journey!","metadata":{"id":1541}}],["1542",{"pageContent":"---\ntitle: Anyone Can Code - Week 7\nauthor: Brittany Pirkle\ndate: 2020-12-14\ncover: https://blog.repl.it/images/anyone-can-code/6.0.png\ncategories: projects\n---\n\nI have come to the end of my journey and have to say I am pleased with the outcome. My knowledge level before this experiment was literally zero. My husband even told me that code was hard and it would be difficult to produce an entire website in a short period of time. I will admit there were several times of head scratching and google searches galore. I also had several experts I could go to when CSS was confusing me. However, overall, I feel I gained knowledge on a subject that was, formerly, completely foreign to me. Ironically, an associate of mine reached out looking for someone who could assist her in solving an HTML code issue on her website. I was able to successfully help her fix the problem and explain to her some of the basics of code. I wouldn’t go so far as saying the former teacher turned student has become the teacher again, but this new skill set is already coming in handy. \n\nThere were times along my journey that were easier than others. I want to address the ups and downs so others don’t make some of the same mistakes I did.","metadata":{"id":1542}}],["1543",{"pageContent":"There were times along my journey that were easier than others. I want to address the ups and downs so others don’t make some of the same mistakes I did. \n\nFirst of all, I cannot say this enough, but using Repl.it made this process exponentially easier. My associate who I assisted was using a different platform and, looking at it, I can see why her head was spinning. Repl.it makes it easy for beginners to learn code through tutorials and the aid of predictive text when selecting an element. There was less guesswork and searching in outside resources involved when using the Repl.it platform. Additionally, I was able to share my design with a teammate at Repl.it, who’s also learning how to code and who was assisting me here and there. We could make changes together or review the website in real time with Repl.it’s multiplayer feature. I was able to watch what changes were made and we even had the option to start a live chat for him to walk me through my mistakes. I would definitely recommend this platform to anyone wanting to create code...newbie or expert! Remember, it’s a FREE platform with over 50 different languages! \n\nChoosing to only learn the basics of HTML and CSS was the right move. Both of these languages are fairly basic and lay the foundation for me in learning other languages later. I found it was vital for me to do some background research on what these two languages encompass before I dove into my project creation. I had a better sense of understanding what I was doing and not just creating something blindly with little background knowledge. Start simple. Do the research. Grow from there!","metadata":{"id":1543}}],["1544",{"pageContent":"The most difficult part of this journey was the responsive design portion. Ironically, this segment had the least amount of code to actually create, but gave me the most trouble. Sometimes it’s harder to write less code. I’m told even pro coders feel this way too! I struggled with figuring out the ratios and where to input the code as this process can be done in either HTML or CSS. I came to find it really is a trial and error process to determine the ratios that need to be utilized to change the image and text size and layout. As I did in every other step, I utilized resources, both online and my teammate at Repl.it, to help me solve my errors. It’s always easier to code with a friend!\n\nPurchasing a domain and linking it to Repl.it is easy as long as linking the domain AND setting up the DNS record in the domain registrar are done at the SAME TIME. (Confused about what all this means? [Read](https://blog.repl.it/anyone-can-code-week6) last week’s blog post). I waited several days (as the prompt told me it could take up to 48 hours to link) and wondered why nothing was linking. It was simply because I didn’t set up the DNS record to fully link the new domain simultaneously. Once I realized it was a two-part process, it was all super easy. At first I set up my domain without the ‘www,’ but next time, I will use ‘www’ first and then add a second CNAME without the ‘www’ because creating in this order was much simpler and I had fewer rabbit trails to follow to get my domain to work both with and without ‘www.’","metadata":{"id":1544}}],["1545",{"pageContent":"For those of you who are wanting to learn to code, but unsure if you have the skill set, you can do it. If I can do it, seriously, anyone can. Here are my biggest pieces of advice for all you novice coders. Use Repl.it! It’s free and user-friendly. Lean on outside resources ([Here ](https://www.w3schools.com/)are a [few](https://scrimba.com/) that I really liked). Start simple with one or two basic languages (HTML and CSS) and make the project easy. Don’t set the bar too high for your first project. \n\nI am ready to build my knowledge and see what’s next. If you are ready to learn to code, use Repl.it. It’s free, easy to set-up, and simple to use.","metadata":{"id":1545}}],["1546",{"pageContent":"---\ntitle: API Docs\nauthor: Amjad Masad\ndate: 2016-06-24T07:00:00.000Z\ncategories: eng\n---\n\n[Update Oct 2022: We have retired our API, we are excited by our previous work but we do not have the resources to support this at the moment.]\n\nRepl.it's code execution API is an HTTP and WebSocket endpoint that you connect\nto and send code to execute. You can connect from any device or browser and\nstart executing code. This guide will describe the concepts behind the service,\nhow it can be used, and provide a step-by-step guide for signing up and trying\nout the service!\n\n## Code Execution\n\nYou're probably here because you want to run some user code in an app or website\nsomewhere. Our customers use the Repl.it API for many different things including:\n\n* In-browser coding environments\n* In-browser coding exercises\n* Correcting student/user code in an online course\n* Realtime interviews\n* Many more\n\nSo you're at the right place. We provide a sandbox in the cloud to\nexecute code securely, reliably, cheaply, and easily. The code that you send us\nwill be executed in a Linux container where you have the ability to access system\nresources like the filesystem. Anything that works in a regular development\nenvironment should work on our API.\n\n## The HTTP Interface\n\nIf you're interested in executing a piece of code or a project (multiple files) without opening a two-way persistent connection then you should\ngo with this interface. It's only one API call and it's much simpler.\n\nFor an example of how this is used in the wild take a look at\n[CoderByte](https://coderbyte.com/editor/guest:First%20Factorial:Python) which\nuses our API to create in-browser coding challenges.\n\n## The Websocket Interface\n\nIf you want to create a\n[REPL-like](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)\nexperience where your users can execute code in a *stateful* environment then\nthis should be your choice. What we mean by stateful is that you can, for","metadata":{"id":1546}}],["1547",{"pageContent":"experience where your users can execute code in a *stateful* environment then\nthis should be your choice. What we mean by stateful is that you can, for\nexample, define a variable with one call and then access it in in the next. You may be\nfamiliar with this concept from using the Python, Ruby, or Node repl:\n\n```\n$ python\n>>> x = 1\n>>> x\n1\n>>>\n```\n\nFor an example of how this is used in the wild take a look at, yours truly,\n[repl.it](https://repl.it).\n\n\n## The JavaScript library\n\nWe provide a JavaScript library\n[ReplitClient.js](https://github.com/replit/ReplitClient.js) that helps you\nconnect to our servers and run your code. If you need libraries in other\nlanguages, please get in touch with us. The library leans heavily on JavaScript\nPromises to manage async code. It's well documented, well tested, and battle-tested.\n\nThe library is installable from npm:\n\n```\nnpm install replit-client\n```\n\nAlternatively you can grab a ready-built library from our site:\n\n```\n<script src=\"https://repl.it/lib/api.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n```\n\n## The Token Generator\n\nFor security purposes, there is a small backend component, which is\nstandard for most services that need to generate tokens. Your tokens are good for 5\ndays, but it's best to generate a new token per user. [Here is a Ruby\nprogram](https://repl.it/gZp/1) that some of our customers use to generate tokens.\n\nJust replace \"keyboardcat\" with your secret key (found on your account page) and you're good to go.\n\n<script src=\"//repl.it/embed/gZp/1.js\"></script>\n\n## Plans and Limits\n\nThe limits are outlined on our [API](/site/api) and [checkout](/api/checkout)\npages. We have two limits that we impose:\n\n* Runs: which is how many times you call `evaluateOnce` or `eval`\n* Concurrent WebSocket connections: how many people are connected at the same time\n\nWe impose the connection limit on websockets because we keep the\ncontainer running for your user while they're connected and this costs us money.","metadata":{"id":1547}}],["1548",{"pageContent":"We impose the connection limit on websockets because we keep the\ncontainer running for your user while they're connected and this costs us money.\n\nYou can see your current status of how many connected users and how many\nruns you have left by visiting the following URL where {SECRET} is found on your account page and\nin the email we sent you when you signed up.\n\n```\nhttp://api.repl.it/cus/{SECRET}\n```\n\nYou can read more on the mechanics of rate limiting\n[here](/site/blog/websocket-rate-limiting).\n\n## Getting Started\n\n1. Pick the right plan for you and [signup](https://repl.it/site/api) for our\nservice.\n2. Go to your [account](https://repl.it/account) and grab your secret token\n3. Grab the JavaScript library (described above)\n4. Instantiate the repl instance:\n\n    ```javascript\n    var repl = new ReplitClient('api.repl.it', 80, 'ruby', REPLIT_TOKEN);\n    ```\n\n5. Use the http interface to execute code:\n\n    ```javascript\n    repl.evaluateOnce(\n      'puts \"hello wolrd\"', {\n      stdout: function(output) {\n        // output from the ruby process: hello world\n        console.log(output);\n      }\n    }).then(\n      function success(result) {\n        // The evaluation succeeded. Result will contain `data` or `error`\n        // depending on whether the code compiled and ran or if there was an\n        // error.\n        if (result.error) {\n          console.log('Error:', result.error);\n        } else {\n          console.log('Result', result.data);\n        }\n      },\n      function error(error) {\n        // There was an error connecting to the service :(\n        console.error('Error connecting to repl.it');\n      }\n    );\n    ```\n\n6. Or use the websocket interface to execute code:\n\n    ```javascript\n    repl.connect().then(function() {\n      console.log('connected');\n\n      // Connected now we evaluate some code.\n      return repl.evaluate('x = 1');\n    }).then(\n      function() {\n        // The evaluation succeeded. Result will contain `data` or `error`\n        // depending on whether the code compiled and ran or if there was an","metadata":{"id":1548}}],["1549",{"pageContent":"}).then(\n      function() {\n        // The evaluation succeeded. Result will contain `data` or `error`\n        // depending on whether the code compiled and ran or if there was an\n        // error.\n        if (result.error) {\n          console.log('Error:', result.error);\n            } else {\n          console.log('Result', result.data);\n        }\n\n        // After that you may repeat the process and evaluate code in the same context.\n      },\n      function error(error) {\n        // There was an error connecting to the service :(\n        console.error('Error connecting to repl.it');\n      }\n    );\n    ```\n\nWe put together an [end-to-end example](https://repl.it/C5ox/1) for you on repl.it.\nYou just need to generate your token (you can use [this](https://repl.it/gZp/1))\nand then insert in the JavaScript file where it says `TOKEN` and you should be\nable to test out the service.\n\nFor more documentation about our JS library don't forget to checkout the\n[repo](https://github.com/replit/ReplitClient.js). And shoot us an\n[email](mailto:contact@repl.it) with any questions.","metadata":{"id":1549}}],["1550",{"pageContent":"---\ntitle: \"Replit Art Gallery: An introduction to Replit's Illustrator - Joe Baker\"\nauthor: Joe Baker\ndate: 2021-10-27T08:00:00.000Z\ncover: https://blog.replit.com/images/blogarthand-01.png\ncategories: news,art\n---\n# Who makes Replit art?\n\nHi! Thats me! My name is Joe and I’m Replit’s illustrator.\n\nI have been making art/graphics/multi media for the last 10 years. I studied Visual Media and excelled in experimental artwork. I draw for fun almost daily and I can’t stop thinking about aesthetics and concepts. It started with colouring in books when I was a kid I went from there basically. I have a huge love for making and appreciating art.\n\nI’m specifically drawn to art that rocks you to your core! Anything with wild colours, strange or abstract concepts, stuff that makes you feel something.\n\nMy major influences come from surrealist art, psychedelic comics from the 70’s, 90’s cartoons, pop art, large scale public installations (sculpture and murals) and any festival artwork!\n\nMy work is a fusion of these influences and I’m so lucky that I now get to create art for Replit on a full time basis.\n\n# How did you hear about Replit?\n\nThis all started in 2018 when I was freelancing. Amjad hit me up after seeing an album cover I made and asked me to create some promo for a “bot building competition”. \n\nI was instantly interested in the project. I had never created a detailed robot artwork before so this commission was particularly exciting and challenging.\n\n![replit bot competition](https://blog.replit.com/images/bot.jpg)\n\nI think what I took from this brief is that Amjad trusted my abilities and let me do my thing. In fact, every project has been like this. Whenever Amjad or Haya hit me up for artwork the projects never seemed stuffy or repetitive. The project outline is always clear and understandable and everything just seems to go smoothly. \n\nI’m always blown away by their vision and I’m happy that I get to help create an identifiable style and look for Replit’s brand.","metadata":{"id":1550}}],["1551",{"pageContent":"I’m always blown away by their vision and I’m happy that I get to help create an identifiable style and look for Replit’s brand.\n\n# Where can people see all the Replit art?\n\nYou can see everything that I have made for Replit via the offical Replit Art Page -\nhttps://art.replit.com/\n\nALSO - For more behind the scenes work and regular art updates.\nFollow the Replit Art Gallery instagram page -\nhttps://www.instagram.com/replitart/\n\n\nThank you!\n\n![robot blink](https://blog.replit.com/images/blink_gif.gif)","metadata":{"id":1551}}],["1552",{"pageContent":"---\ntitle: \"$80m to bring the next billion software creators online\"\nauthor: Amjad Masad\ndate: 2021-12-9\ncategories: news\ncover: https://blog.replit.com/images/seriesb.png\n---\n\nFollowing our [Series A announcement](https://blog.replit.com/seriesa) earlier this year, I'm thrilled to announce that we raised [Series B](https://www.notboring.co/p/replit-remix-the-internet) financing from new and existing investors. This year alone we've doubled our user base to reach __10m+ users__, tripled concurrent containers on our network, and grew traffic to sites and apps on the network by orders of magnitude. This is a major milestone for our team & community.\n\n![series b poster announcing our backers](https://blog.replit.com/images/seriesb.png)\n\n\nOur _mission is to bring the next billion software creators online_. To advance towards this mission we will be investing in the following areas:\n\n1. Build the world's most _ubiquitous_ programming environment. \n2. Inspire creativity and generate value for creators through _community_.\n3. Design simple yet scalable infrastructure _primitives_ for the next generation of creators.\n\nIf this speaks to you, consider [joining our team](https://replit.com/careers). At 40, we're still small with an outsized impact on the world. It's a perfect time to join.\n\nAdditionally, as part of this, we're excited to expand our giving to the open-source projects that help us deliver on our vision:\n\n- [$100k to FreeCodeCamp](https://blog.replit.com/fcc)\n- [$25k to the Nix Foundation](https://blog.replit.com/betting-on-nix)\n- $10k to the Rust Foundation\n- Recurring donations to projects including CodeMirror, Vite, Emmet, and many others\n\n\n## Ubiquity","metadata":{"id":1552}}],["1553",{"pageContent":"- [$25k to the Nix Foundation](https://blog.replit.com/betting-on-nix)\n- $10k to the Rust Foundation\n- Recurring donations to projects including CodeMirror, Vite, Emmet, and many others\n\n\n## Ubiquity\n\nTo reach a billion people we will build tools that scale the entire globe. Tools that anyone can use regardless of their [device](https://blog.replit.com/codemirror-mobile) and which technology stack they prefer. In the next year expect Replit to become [faster](https://blog.replit.com/faster-repls), more [portable](https://blog.replit.com/codemirror-mobile), and able to run [more and more software](https://blog.replit.com/nix).\n\n![mobile coding](https://blog.repl.it/images/mobile/preview.png)\n\nMoreover, we're excited to explore the future of [AI-assisted coding](https://twitter.com/amasad/status/1467571734316417025) with a special emphasis on [code comprehension](https://blog.replit.com/codex).\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">can&#39;t stress enough how much i love this feature 💖 <a href=\"https://twitter.com/Replit?ref_src=twsrc%5Etfw\">@Replit</a> <a href=\"https://t.co/5tR8VraXBP\">pic.twitter.com/5tR8VraXBP</a></p>&mdash; Anibal (@AnibalAndrade_) <a href=\"https://twitter.com/AnibalAndrade_/status/1467254378633510915?ref_src=twsrc%5Etfw\">December 4, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n## Community\n\nWe wouldn't be here without our lovely community. They've been invaluable partners in building and growing Replit and will be a big part of our future. To that end, we want to ensure that Replit is the best place for people to make meaningful connections [around code](https://blog.replit.com/collaborative-coding). A place to build, learn, and earn, together.\n\n![apps](https://cms.replit.com/assets/apps-blog/apps-scroll-demo.gif)\n\nWe're also looking forward to investing directly in creators from our community through programs like [Ventures](https://blog.replit.com/rv0). More on this soon.","metadata":{"id":1553}}],["1554",{"pageContent":"We're also looking forward to investing directly in creators from our community through programs like [Ventures](https://blog.replit.com/rv0). More on this soon.\n\n## Primitives\n\nBuilding on [DB](https://docs.replit.com/hosting/database-faq), [Auth](https://docs.replit.com/hosting/authenticating-users-repl-auth), and our compute infrastructure we want to continue investing in simple yet scalable components that let people build and compose software seamlessly. Our north star vision is to shorten the distance between idea and product to its absolute essence. By thinking of a good idea, you should be half the way towards realizing it. \n\n<iframe height=\"600px\" width=\"100%\" src=\"https://repl.it/@util/Database-Flask-emoji-example?embed=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n----\n\n\nFor a deep dive on our story, mission, and what the future might hold please read [Not Boring's recent piece on Replit](https://www.notboring.co/p/replit-remix-the-internet).","metadata":{"id":1554}}],["1555",{"pageContent":"---\ntitle: \"Back to School 101: Mastery-Based Programming Tasks\"\nauthor: Sarah Strong\ndate: 2021-11-19T00:00:00.000Z\ncover:  https://blog.replit.com/images/teams_edu/back-to-school-robot.jpg\ncategories: edu\n---\n\n*Part 3 of our back-to-school series.* \n\n# Mastery-Based Programming Tasks with Replit Teams for Education\n\n## What are mastery-based tasks?\n\nMastery-based tasks evaluate whether students have mastered a small set of specific skills. These tasks are evaluated on a binary scale (e.g. complete/incomplete). If students have not demonstrated mastery on their first attempt, they keep trying until they demonstrate mastery.\n\n## Why use mastery-based tasks?\n\nMastery-based tasks have [significant benefits](https://docs.google.com/document/d/1AoPmcMs9ITVZXLcUy9iCKQweXeV-qcq-RpN6loeCoJI/edit?usp=sharing) over tasks that are graded using a percentage mark or an achievement level.\n\n- They promote learning over grades.\n- They provide multiple opportunities for learning. If students don't get it the first time, they keep trying.\n- They are less stressful for students. Students don't need to worry about perfection and can redo them if they didn't demonstrate mastery the first time.\n- They help increase student confidence. They remind students that they can learn challenging concepts.\n- They allow students to self-evaluate themselves before they submit. Their marks should not be a surprise to them if they check through their tasks before submitting them.\n- They take less time to mark for teachers. Each task can take as little as 30 seconds to mark. \n- They are returned to students quicker so students can receive feedback soon after they submit them.\n\n## How mastery-based tasks fit into course planning\n\n- Mastery-based tasks can be used to fill in learning gaps from previous years. Students can focus on mastering the most important skills that they missed learning in previous years before moving on to new skills.","metadata":{"id":1555}}],["1556",{"pageContent":"- Mastery-based tasks can be used to help new students catch up. Students can fast-track through what they missed by focusing on mastering the most important skills they need.\n- Mastery-based tasks can be used as prerequisites for more challenging tasks such as self-directed/inquiry-based projects. This can ensure that they are ready for these projects.\n- The course plan can be entirely made of mastery-based tasks. In this case, each student's final mark is determined by how many skills they mastered.\n\n## How to use Replit Teams to create a mastery-based programming task\n\n### Step 1 – Decide on the skills\n\nDecide which skill(s) you want students to master. These skills should build on skills that students have already mastered. There shouldn't be too many skills evaluated at once. \n\n### Step 2 – Write the instructions\n\nWrite the instructions for the program. Before you finalize it, do a Google-check to ensure that the full solution cannot be easily found online. If the instructions are simple, I recommend putting a strange *twist* into it to reduce incidents of plagiarism and cheating.\n\n### Step 3 – Create the tests\n\nCreate the I/O tests or unit tests. This will help students check to ensure their program works before they submit it and will help you quickly check to ensure the program does what it's supposed to do. Create enough tests to convince yourself that students who pass all the tests have a perfectly working program, assuming they didn't just hardcode the test cases. Include all the edge cases you can think of!\n\n### Step 4 – Determine the criteria for a pass\n\nDecide what criteria will be used to determine a pass. Creating a working program should be necessary but not sufficient towards demonstrating mastery. \n\nHere are some suggestions beyond having a working program:\n\n- Including line comments and/or a separate write-up to show they understand exactly what their program does.","metadata":{"id":1556}}],["1557",{"pageContent":"Here are some suggestions beyond having a working program:\n\n- Including line comments and/or a separate write-up to show they understand exactly what their program does.\n- Following programming conventions such as descriptive variable names, correct casing, and proper spacing. \n- Showing evidence of testing beyond the teacher-made I/O tests or unit tests.\n- Citing sources so that you have a record of who students are getting help from and/or what online sources they are using beyond the resources you are providing them.\n\n## Example – [Even Product](https://replit.com/@MissStrong/Even-Product)\n\n### Step 1 – Decide on the skills\n\nI choose *cumulative algorithms* as the skill for students to master. I will assign the task to students once they have mastered basic conditionals, basic list operations and methods, and basic *for* loops.\n\n### Step 2 – Write the instructions\n\nWrite a Python function called `even_product()` that takes a list of integers called `int_list` and returns the product of all the even integers in the list. If there are no integers in the list, the function returns `0`. If there are no even integers but there is at least one odd integer, the function returns `1`. Do not import any modules.\n\n### Step 3 – Create the tests\n\nI will make unit tests to cover the following cases: an empty list, a list with one odd integer and no even integers, a list with one even integer and no odd integers, a list with only odd integers, a list with only even integers, a small list with mix of integers, a large list with mix of integers, a small list with duplicate integers, and a large list with duplicate intergers. I will also have a unit test that reads through their source code to ensure they didn't import any modules.\n\n### Step 4 – Determine the criteria for a pass","metadata":{"id":1557}}],["1558",{"pageContent":"### Step 4 – Determine the criteria for a pass\n\nTo pass this task, students must demonstrate mastery by following the instructions carefully, passing the unit tests without reverse engineering them, using meaningful and self-explanatory variable names, follow Python conventions (e.g. snake_case for variable names and function names), including a line comment in the function to clarify or elaborate on the algorithm, and acknowledging all sources (including people who helped) in the attached document *sources.md*.\n\nHere's the result:\n\n![replit unit test](https://raw.githubusercontent.com/MissStrong/ICS3U_Semester_1_2021-2022/main/Images/Even_Product_Example.png)\n\n## Giving feedback on mastery-based programming tasks\n\nA simple \"You pass!\" or \"Not quite... please retry.\" usually isn't very satisfying for a student. You should still provide descriptive feedback, and the [annotations feature on Replit](https://blog.replit.com/annotations-for-education) is a great way to do that. Here are some ideas:\n\n**Pass** (mastery has been demonstrated)\n\n- Praise the usefulness of the line comments.\n- Praise descriptive variable names.\n- Praise the code structure.\n- Praise thorough testing.\n- Prase the cleverness of an algorithm.\n\n**Not-pass-yet** (mastery has not been demonstrated yet)\n\n- Ask for elaboration on an unhelpful line comment.\n- Remind them that variable names should be self-explanatory.\n- If there are spacing issues, remind them to press the auto-format button before they submit.\n- Point out a case that's missing.\n- Point out a line that's causing an issue.\n\nYou can also give overall feedback using the [chat box](https://blog.replit.com/threads) in the bottom-right corner. This is a useful way to communicate whether the student has passed the task. If they didn't pass, you can also [unsubmit the project](https://docs.replit.com/teams/reviewing-submissions), which sends a notification to the student saying their project has been returned to them.\n\n### About the Author","metadata":{"id":1558}}],["1559",{"pageContent":"### About the Author\n**Sarah Strong** is a high school math and computer science teacher in the Waterloo Region in Ontario, Canada and a Replit Teacher Ambassador. She has been teaching since 2015 and using Replit since 2019. Miss Strong currently teaches Grade 10 computer studies with P5.js, Grade 11 computer science with Python, and Grade 12 computer science with Java. [Find Miss Strong's curriculum in the Replit Curriculum Hub!](https://replit.com/curriculum/Intro-to-CS-with-Python-ICS3U)","metadata":{"id":1559}}],["1560",{"pageContent":"---\ntitle: \"Common Errors Python Beginners Encounter (with Solutions)\"\nauthor: James Gallagher\ndate: 2020-08-04T07:00:00.000Z\ncategories: projects\n---\n\nLike English, Python has its own set of rules. Lines of code have to be written in a certain way, just like how sentences must follow a specific structure. Punctuation must be used within a set of guidelines when you’re writing in both English and [Python code](https://careerkarma.com/blog/types-of-coding-languages/).\n\nAll programmers, even the best developers in the world, encounter errors in their code. There’s no such thing as perfection when it comes to writing code. Errors come and go. Sometimes, errors are caused by typos. Other times, errors are caused by problems in your logic.\n\n\n## Encountering Errors as a New Programmer\n\nAs a beginner, encountering errors can be intimidating. You can be left asking: what should I do? The only wrong answer to that question is “give up!” There’s plenty of support available to help you overcome common errors.\n\nIn this article, we’ve compiled a list of common Python errors that beginners encounter. Each error comes with a solution that you can use to fix the error if you encounter it in your code.\n\n\n## NameError: nameerror name is not defined\n\n[NameErrors are raised](https://careerkarma.com/blog/python-nameerror-name-is-not-defined/) when you use a variable or function name that is invalid. This can be caused by making a spelling mistake when referencing or declaring a variable, using a function or a variable before it is declared, forgetting to define a variable, among other reasons.\n\n\n## SyntaxError: EOL while scanning string literal\n\nStrings must be closed on the same line on which they are declared, unless you are specifying a multi-line string. If you do not close a string, or use the wrong quotation mark to close a string, you will [receive an EOL error](https://careerkarma.com/blog/python-syntaxerror-eol-while-scanning-string-literal/).\n\n\n## TypeErrors","metadata":{"id":1560}}],["1561",{"pageContent":"## TypeErrors\n\nTypeErrors are raised when you try to execute an operation on a value whose data type does not support that operation.\n\n\n### list indices must be integers or slices, not str\n\nTo access items in a list, you must specify an index number. [Python array](https://careerkarma.com/blog/python-array/) is indexed from 0 which means that the first item in a list is at the position 0, the second item in a list is at the position 1, and so on. If you try to access a list using a string value, [this error will be raised](https://careerkarma.com/blog/python-typeerror-list-indices-must-be-integers-or-slices-not-str/).\n\n\n### can only concatenate str (not “int”) to str\n\nStrings can only be concatenated with other strings. Merging a string with an integer results in an error. [To solve this error](https://careerkarma.com/blog/python-typeerror-can-only-concatenate-str-not-int-to-str/), you should convert all numbers to a string before you concatenate them to a string.\n\n\n### ‘int’ object is not iterable\n\nUnlike lists and dictionaries, you cannot iterate over an integer. This error is commonly raised when you forget to use a range() statement to iterate over a list of numbers. You can [solve this error](https://careerkarma.com/blog/python-typeerror-int-object-is-not-iterable/) by ensuring that you surround a list by a range() statement if you are iterating over it.\n\n\n### ‘str’ object does not support item assignment\n\nStrings in Python are immutable, meaning they cannot be modified directly. If you want to change the value of a string, [you must create a new string from an existing one](https://careerkarma.com/blog/python-str-object-does-not-support-item-assignment/). This error is raised when you try to change a string as if it were a list using the item assignment technique.\n\n\n### can’t multiply sequence by non-int of type ‘float’","metadata":{"id":1561}}],["1562",{"pageContent":"### can’t multiply sequence by non-int of type ‘float’\n\nIn Python, strings can be multiplied. This creates a new string that repeats the contents of an old string a certain number of times. Strings cannot be multiplied by floats. If you try to multiply a string by a float, [this error](https://careerkarma.com/blog/python-typeerror-cant-multiply-sequence-by-non-int-of-type-float/) will be returned by the Python interpreter.\n\n\n## IndexErrors\n\nIndexErrors are returned when you try to access an index that does not exist in a list.\n\n\n### list index out of range\n\nYou can only access items in a list if they exist. This error is common in loops that iterate over a list of numbers and do not account for the fact that lists are indexed from zero. To [solve this problem](https://careerkarma.com/blog/python-indexerror-list-index-out-of-range/), make sure that any list item you reference in your code exists.\n\n\n### list assignment index out of range\n\nSimilarly, you cannot assign an item to a position in a list that does not exist. You can [solve this error](https://careerkarma.com/blog/python-indexerror-list-assignment-index-out-of-range/) by initializing a list with default values before you assign new values to the list.\n\n\n## Conclusion\n\nWe’ve only scratched the surface of all the errors that you can encounter while [learning Python](https://careerkarma.com/blog/how-long-to-learn-python/). There are a lot of unique ways to make mistakes in your code. Here are a few more errors that you may encounter:\n\n\n\n*   [typeerror: a bytes-like object is required, not ’str’](https://careerkarma.com/blog/python-typeerror-a-bytes-like-object-is-required/)\n*   [typeerror: string indices must be integers](https://careerkarma.com/blog/python-typeerror-string-indices-must-be-integers/)\n*   [syntaxerror: positional argument follows keyword argument](https://careerkarma.com/blog/python-positional-argument-follows-keyword-argument/)","metadata":{"id":1562}}],["1563",{"pageContent":"*   [syntaxerror: positional argument follows keyword argument](https://careerkarma.com/blog/python-positional-argument-follows-keyword-argument/)\n*   [typeerror: 'int' object is not subscriptable](https://careerkarma.com/blog/python-typeerror-int-object-is-not-subscriptable/)\n\nRemember, errors are incredibly common. You’ll see developers of all shapes and sizes encounter even the most basic errors on a day-to-day basis. The challenge is in how you respond. It may take some time to solve an error. Once you do, you’ll get a great sense of relief.\n\n\n**_About the author_**\n\n<img src=\"https://careerkarma.com/blog/wp-content/uploads/2020/01/james-gallagher-300x300.jpg\" alt=\"James Gallagher\" style=\"height:150px; width:150px; display:inline-block; horizontal-align:left;\">\n\n_James Gallagher is a writer at [Career Karma](https://careerkarma.com/) where he focuses on coding tutorials and technical articles. ([twitter](https://twitter.com/jamesg_oca))_","metadata":{"id":1563}}],["1564",{"pageContent":"---\ntitle: Changelog - June 2021\nauthor: Replit team\ndate: 2021-07-02T18:00:00.000Z\ncategories: news\n---\nWelcome to the June edition of our monthly changelog, where we highlight some of our big and small feature releases, user experience changes, and bug fixes!\n\n\nWe love hearing from you! Please leave any feedback you have [here](https://replit.canny.io/general-feedback).\n\n# Features\n\n- We released the first version of our multiplayer debugger! See the [blog post](https://blog.replit.com/multiplayer-debugging) for all the details.\n- You can now observe other users when multiplaying by clicking on their avatar. ![follow demo](images/changelog/follow-demo.gif)\n- You can now also see which file other users are in from the filetree. *\n- New dotfiles features:\n  * nix repls can now use `~/${REPL_SLUG}/.config` to store their dotfiles / config files in a [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)-compliant way.\n  * ssh and fluxbox dotfiles are now available at `~/${REPL_SLUG}/.config/{ssh,fluxbox}` respectively for all repls, nix or non-nix.\n- Have you ever had the urge to download one, single file from a repl? Now you can! Just click on the three dots next to file name and hit ‘Download’ to download your file. ![downloading just one file. amazing.](images/changelog/single-file-download.gif)\n\n# User experience changes\n- We rolled out an updated profile experience. Visit any replit user's profile to see their showcased repls. We really like this [one](https://replit.com/@LeviathanCoding?showcase=2)!\n- The Packages tab has been updated with a fresh coat of paint. Information is now more contextual and notifications happen inline. \n  ![Packager UX update — packages expand inline now, and versions are exposed](images/changelog/packager-updates.png)\n- `.replit` and Secrets overrides are now evaluated more consistently in more places. In increasing order of priority:\n  - The OS environment:\n    - The environment baked into Polygott","metadata":{"id":1564}}],["1565",{"pageContent":"- `.replit` and Secrets overrides are now evaluated more consistently in more places. In increasing order of priority:\n  - The OS environment:\n    - The environment baked into Polygott\n    - The environment injected by Docker\n  - The nix environment\n  - The `.replit` file\n  - Secrets\n\n\n\n# Bug fixes\n\n- GitHub commits should now properly attribute changes to your GitHub account, and will use a privacy email when that setting is enabled on your GitHub account.\n- We cleaned up some extra blank space near the home screen header.\n- Fixes around deleting team repls.\n- The notification icon is back in its correct location.\n- Deleting an open file could temporarily open a .env file.\n- Users sessions expire much less frequently, keeping you logged into replit longer.\n\n\n\\* enabled for [explorers](https://docs.replit.com/misc/explorer)","metadata":{"id":1565}}],["1566",{"pageContent":"---\ntitle: View Student Performance with Classroom Overview \nauthor: Haya Odeh\ndate: 2016-06-29T07:00:00.000Z\ncategories: edu\n---\n\nBefore we decided to build [repl.it classroom](https://replit.com/site/teams-for-education), we paid a visit to one of the schools using us in the classroom. I felt excited and anxious at the same time; I was introduced to the teacher and students in the class, and then my job started as designer observing and paying attention to every single detail.[](preview end)\n\nThe teacher explained the workflow and had two students assisting her to check on the students. Seeing the teacher and student’s frustration made me see a problem, I noticed that most of the students were trying to communicate their frustrations, but they were either embarrassed or too shy. Others gave up too soon, without even trying. The two assistants solution might have been a good idea, but for students knowing the fact that they’re being watched or might be judged made them hesitant to ask for help. Towards the end of the class I was handed a piece of paper and was asked to list the student names who completed the assignment successfully.\n\nA teacher should be able to see where her students are at—to have bird’s-eye view for the classroom so attention can be paid for the ones who need it the most, plus it would be good way to track progress. Hovering around each student individually can be time and energy consuming.\n\n## Introducing Classroom Overview","metadata":{"id":1566}}],["1567",{"pageContent":"## Introducing Classroom Overview\n\nThe *Student Overview* is a feature of the teacher dashboard that we’re introducing. Where previously you had to go into each assignment to see the progress for each student individually (which ironically mirrors the physical classroom experience described above). The teacher classroom dashboard is now divided into assignment and student sections. The assignments section lists out the assignments published or in draft and allows you to create a new assignment. The student section is all about the students, their names, completion percentages for all their assignments and the current submission status.\n\n![classroom overview](https://i.imgur.com/5N4gMNj.jpg)\n\nBrowsing the student submission status for assignments is as easy as going left and right.\n\n![submission status](https://i.imgur.com/qAbJit8.jpg)\n*Teacher browsing assignments.*\n\nAssignments are listed as numbers but by hovering on the number the assignment name pops up as a reminder of that particular assignment.\n![assignmnet popup](http://i.imgur.com/qAbJit8.jpg)\n*Teacher is hovering to check the name of the assignment*\n\nWe did our best to make this as visually comprehensible as possible. Colorful icons, and a vertical and horizontal line highlighting to give you contextual awareness while browsing your student overview.\n![assignmnet popup](http://i.imgur.com/j4hwQPp.jpg)\n*Teacher hovering on a complete state*\n\nTeachers that we showed this too were really excited about it. We’re\npassionate about building the tools to make your jobs—as teachers—easier so let us know what you think about this. This product is currently in closed beta but you can sign up for it [here](https://repl.it/site/classrooms).","metadata":{"id":1567}}],["1568",{"pageContent":"---\ntitle: CLUI Command bar and Search\nauthor: Moudy Elkammash and Sergei Chestakov\ndate: 2020-08-27T00:00:00.000Z\ncover: https://blog.repl.it/images/replit-logo-and-name.jpg\ncategories: product\n---\n\nOne of the challenges of adding new functionality to any interface is balancing discoverability with visual clutter. We've written before about how a [universal command bar](https://blog.repl.it/clui) can be a great way to expose features without overloading the UI with buttons. This pattern already works well for us in our mobile interface, so now we're bringing it to desktop! Here's a demo of what it looks like:\n\n![Demo of Command bar](images/commandbar/demo.gif)\n\nThe new command bar replaces our old shortcuts and file switcher modal. Just like before, you can use keyboard shortcuts (Cmd/Ctrl + P to switch files, Cmd/Ctrl + K to bring up all the options, etc) to interact with it. As we add more commands, power users will be able to have a keyboard centric experience while beginners can learn about features by exploring the different options.\n\nAmong the new features introduced in the updated command bar is Search! Search indexes the contents of every file in your project (with the exception of hidden files such as `node_modules` and anything in your `.gitignore`) and allows you to see every instance of a query across every file in your repl. From there, you can scroll through the results, see which line and file they appear in, and select a result to navigate directly to that line in the code like so:\n\n![Demo of Search](images/commandbar/search.gif)\n\nYou can access Search via Cmd/Ctrl + Shift + F or by bringing up the command bar and typing “search”.","metadata":{"id":1568}}],["1569",{"pageContent":"![Demo of Search](images/commandbar/search.gif)\n\nYou can access Search via Cmd/Ctrl + Shift + F or by bringing up the command bar and typing “search”.\n\nWe're still thinking about the best way to surface these commands. Although keyboard shortcuts are the fastest way to use the command bar, they're notoriously underused and hard to discover. In the future, we'll likely add a dedicated button that opens the command bar directly. In addition, other primary actions can expose a way to open the command bar prefilled with a command (like Cmd/Ctrl + P opens the command bar directly in the \"find\" command).\n\nOpen up a repl and give it a try!","metadata":{"id":1569}}],["1570",{"pageContent":"---\ntitle: \"Community Video Competition\"\nauthor: Patrick Coleman\ndate: 2020-06-23T07:00:00.000Z\ncategories: events\n---\n\nOver the past week, we ran a video competition for Replers. We got some great submissions from the community, and now it's time to announce the winners!\n\n## **1st** Place\n\n[@piemadd](https://repl.it/@piemadd). Love the 3D animation and vibey tunes! Enjoy your free year of `hacker` B^)\n\n[![piemadd video](https://img.youtube.com/vi/pomwanGXjn4/0.jpg)](https://www.youtube.com/watch?v=pomwanGXjn4 \"piemadd video\")\n\n## **2nd** Place\n\n[@matthewproskils](https://repl.it/@matthewproskils). Shouting out the community! 6 months of `hacker` for you!\n\n[![matthewproskils video](https://img.youtube.com/vi/nt2bOT_exJE/0.jpg)](https://www.youtube.com/watch?v=nt2bOT_exJE \"matthewproskils video\")\n\n## Honorable Mentions\n\nAll the honorable mentions get a shoutout and 1 free month of `hacker` o_0\n\n[@CoolJames1610](https://repl.it/@CoolJames1610)\n\n[![CoolJames1610 video](https://img.youtube.com/vi/ANZO1fJQJmI/0.jpg)](https://www.youtube.com/watch?v=ANZO1fJQJmI \"CoolJames1610 video\")\n\n[@PowerCoder](https://repl.it/@PowerCoder)\n\n[![PowerCoder video](https://img.youtube.com/vi/O_d3lrBO9C4/0.jpg)](https://www.youtube.com/watch?v=O_d3lrBO9C4 \"PowerCoder video\")\n\n[@Edqe](https://repl.it/@Edqe) (late but great submission)\n\n[![Edqe video](https://img.youtube.com/vi/yDtj3EVqh48/0.jpg)](https://www.youtube.com/watch?v=yDtj3EVqh48 \"Edqe video\")\n\nAnd an extra quick shoutout to [@bramley](https://repl.it/@bramley). Thanks for the idea for the competition!\n\nRepl.it signing off.\n`^D`","metadata":{"id":1570}}],["1571",{"pageContent":"---\ntitle: \"The New Game: Engaging 15M Next Generation Developers\"\nauthor: Jeff Burke\ndate: 2022-07-27\ncover: https://blog.repl.it/images/BD/220727_LaunchPartner.jpg\ncategories: News\n---\n\nToday, we launch partnerships with 19 companies, offering 35+ templates for Replit users to build with. The goal? Helping our community build the next-generation of projects. Let me explain.\n\n![](images/BD/220727_LaunchPartner.png)\n\n## Context: The growing strength of the Replit community\n\nThe Replit community is growing exponentially. As of today:\n- +15M Replit users \n- +20M websites & apps created and hosted\n- +10B monthly visits across websites & apps\n- +2B Repls run \n\nIn parallel, Replit as a platform has grown stronger. \n- Supports all programming languages.\n- 80,000+ packages.\n- Mobile app coming soon.\n- State-of-the-art AI features.\n- Ready-to-build templates.\n- Replit Ventures.\n  \nEvery month, Replit raises the ceiling on what devs can do. \n\nAs a result, Replit users are building increasingly sophisticated projects. From learning their first line of code to building an app to [monetizing their creation](https://twitter.com/amasad/status/1506429498895470592?s=20&t=o_psEi7bsBSElw5QRDYkkg). Users are even landing jobs as professional developers from Replit.\n\n## The next generation of developers\n\nAt Replit, we've always been about the future of software and bringing it to everyone, not just the lucky few in Silicon Valley. We feel strongly the next-generation of developers looks very different than the last. Globally distributed. Digital and cloud-native. Able to code and deploy from a $10 android phone.\n\nOur user base and product reflect this future: \n* Over 80% of Replit users are based outside of the US\n* Over 10% of Replit users code on mobile devices - not code for mobile, actually coding from a mobile device.\n* Thriving community where people share code, collaborate, and have fun\n* Idea to code to deployed apps in minutes not hours \n\nWhile we have a professional product, most of our users code for fun.","metadata":{"id":1571}}],["1572",{"pageContent":"* Thriving community where people share code, collaborate, and have fun\n* Idea to code to deployed apps in minutes not hours \n\nWhile we have a professional product, most of our users code for fun. \n\nTo engage these developers, the old way - things like on-site hackathons in Sunnyvale where companies offer pizza  - won't work. Companies looking to find awesome new developers need to engage users where they are passionate. Replit is how to do that. Here's more on how. \n\n![](images/BD/220727_NewGame.png)\n\n### Live hosted examples\nDitch the static repository files. Host live templates for developers and potential customers to see the product in action immediately.\n\n### Show them how to do it\nRather than explain your product, pull up a ready-to-go template anytime, anywhere. At a coffee shop? Run it on a mobile phone with Replit. At a conference? Send the url to the audience, so they can follow from their device. On a Zoom meeting? Send the Repl link in the chat.\n\n### Multiplayer coding\nStop sending back-and-forth emails. Code together.\n\n\"Try adding ____ on line 1,947\"\n\"There is a syntax error when you try to ____\"\n\"Did you install ___ package? ___ library?\"\n\nNo more. Jump into the users project with a join link and multiplayer code. For a live event, have users & customers jump into the code base with you. For async support, jump in & leave comments like a Google Doc. Spread the love. Leverage your valuable dev rel time how you do best.  \n\n### User-led features\nEngage directly with your user base. Source feedback on your product. See what they build!\n\n## Building a Company Profile on Replit\n\nOver the past few months, we have introduced:\n- Followers \n- The following feed\n- Community published templates\n\nNow, companies have a central place where they can build a following of developers, host high-quality templates, and bolster their developer brand.\n\nAnd today, we are introducing the \"verified\" badge for companies. We will be validating and verifying companies  and engagement for the Replit community.","metadata":{"id":1572}}],["1573",{"pageContent":"And today, we are introducing the \"verified\" badge for companies. We will be validating and verifying companies  and engagement for the Replit community.\n\nIf you work in the developer tools space and are interested in getting verified, apply [here](https://partnerships-form.util.repl.co/).\n\n18 companies are already verified and you can build with them on Replit today.\n\n### Twitter\nCreate [bookmark integrations](https://replit.com/@twitter/Bookmark-Search?v=1). Sort & monitor public tweets based on [geo-tag](https://tweets-around-the-world.twitter.repl.co/). Even monitor the Replit follower base. See their profile [here](https://replit.com/@Twitter).\n\n### Hugging Face\n**Build, train, and deploy state of the art models.** Use Replit to leverage large language models like [image classification](https://replit.com/@HuggingFace/Gradio) or [inference](https://replit.com/@HuggingFace/GradioInferenceAPI?v=1). See their profile [here](https://replit.com/@huggingface). \n\n### Stytch\n**Passwordless authentication.** Immediately deploy [email magic links](https://replit.com/@stytch/Email-magic-links-or-React-or-Powered-by-Stytch?v=1) or [SMS passcodes](https://replit.com/@stytch/SMS-passcodes-OTPs-or-React-or-Powered-by-Stytch). See their profile [here](https://replit.com/@stytch). \n\n### Stripe\n**Payments infrastructure for the internet.** Test an instant [Stripe checkout.](https://replit.com/@stripe) See their profile [here](https://replit.com/@Stripe). \n\n### Twilio\n**The Data-Drive Customer Engagement Platform.** Create [video conference app](https://replit.com/@twilio/Video-Conference-with-Twilio-Video?v=1), [send & receive SMS](https://replit.com/@twilio/Send-and-Receive-SMS-with-Twilio?v=1), or build a [SengGrid contact form](https://replit.com/@twilio/Contact-Form-with-SendGrid?v=1). See their profile [here](https://replit.com/@Twilio). \n\n### Coinbase","metadata":{"id":1573}}],["1574",{"pageContent":"### Coinbase\n**Secure online platform for buying, selling, transferring, and storing cryptocurrency.** Immediately, [test & deploy Coinbase wallet](https://replit.com/@coinbase/React-Template-with-Coinbase-Wallet-SDK?v=1). See their profile [here](https://replit.com/@Coinbase). \n\n### LaunchDarkly\n**Feature Flag & Toggle Management.** Within two minutes, test feature flag management for your app. See their profile [here](https://replit.com/@LaunchDarkly). \n\n\n### Protocol AI\n**InterPlanetary File System (IPFS).** [Instantly test & deploy web3 storage](https://replit.com/@protocolai/Web3StoragePython?v=1) with Filecoin. See their profile [here](https://replit.com/@ProtocolAI). \n\n### Alchemy \n**Blockchain APIs and Infrastructure.** Test Blockhain infrastructure with a [decentralized version of Twitter](https://replit.com/@alchemyplatform/Lens-Protocol-Quickstart?v=1) or [a coffee tipping dapp](https://replit.com/@alchemyplatform/Buy-Me-a-Coffee-DeFi-Dapp?v=1). See their profile [here](https://replit.com/@AlchemyPlatform). \n\n### Polygon\n**Scalable web3.** [Start an NFT collection](https://replit.com/@polygontechnology/polygon-nft-starter?v=1) on Polygon. See their profile [here](https://replit.com/@PolygonTechnology). \n\n### Buildspace\n**Home of the best web3 builders.** Templates for immediate onboarding to web3, including [ETH](https://replit.com/@buildspace/ETH-NFT-minting-site-in-5-minutes?v=1) & [Solana](https://replit.com/@buildspace/solana-nft-mint?v=1) NFT mints. See their profile [here](https://replit.com/@Buildspace). \n\n### Weights and Biases\n**Developer tools for MLOps.** Deploy & build with an [image generation system called CrAIyon](https://replit.com/@wandb/AI-Image-Generation-using-CrAIyon-and-WandB). See their profile [here](https://replit.com/@wandb). \n\n### Stedi\n**APIs for building EDI integrations.** [Convert EDI documents to JSON](https://replit.com/@stedi/EDI-to-JSON-NodeJS?v=1). See their profile [here](https://replit.com/@stedi). \n\n### Supabase","metadata":{"id":1574}}],["1575",{"pageContent":"### Stedi\n**APIs for building EDI integrations.** [Convert EDI documents to JSON](https://replit.com/@stedi/EDI-to-JSON-NodeJS?v=1). See their profile [here](https://replit.com/@stedi). \n\n### Supabase\n**Open source Firebase alternative.** [Build scalable databases in a weekend](https://replit.com/@Supabase/Supabase-py-Database?v=1). See their profile [here](https://replit.com/@supabase). \n\n### SignalWire\n**Software-Defined Telecom Networks.** [Relay appointment schedules](https://replit.com/@signalwire/signalwire-relay-appointment-reminder?v=1). [Create voice forwards.](https://replit.com/@signalwire/signalwire-voice-forwarder?v=1) See their profile [here](https://replit.com/@signalwire). \n\n### Deno\n**A modern runtime for JavaScript and TypeScript.** See their profile [here](https://replit.com/@deno). \n\n### Devfolio\n**India's largest community of builders.** Organize hackathons and leverage quick templates like [Filecoin](https://replit.com/@devfolio/IPFSFilecoin-Template?v=1). See their profile [here](https://replit.com/@devfolio). \n\n### Thirdweb\n**Build web3 apps easily.** Create an [NFT collection.](https://replit.com/@thirdweb-dev/Create-an-NFT-collection-with-Solidity-thirdweb?v=1) [Get started with Solidity.](https://replit.com/@thirdweb-dev/Get-Started-with-Solidity-using-Hardhat-and-thirdweb-deploy?v=1) See their profile [here](https://replit.com/@thirdweb). \n\n### Voucherify\n**Promo Code APIs.** [Generate](https://replit.com/@Voucherify/Generate-Assign-and-Validate-Unique-Promo-Codes?v=1) and [Test](https://replit.com/@Voucherify/Promo-Codes-Validation-with-a-Sample-Checkout?v=1) promo codes at a sample checkout. See their profile [here](https://replit.com/@voucherify).","metadata":{"id":1575}}],["1576",{"pageContent":"---\ntitle: Computing Superpower... At School?\nauthor: Brittany Pirkle\ndate: 2022-05-31\ncover: https://blog.replit.com/images/poster-06.jpg\ncategories: edu\n---\nReplit offers everyone the power of their own computer in the cloud. Access it from anywhere, program it to do (almost) anything, and share your programs and apps with whoever you want. It’s a computing superpower that we deeply believe will change the world.\n\nSchool-age users have always been integral to our vision. There are so many stories of successful tech entrepreneurs – including Mark Zuckerberg, Bill Gates, and our own CEO [Amjad Masad](https://medium.com/childhood-hacks/how-i-invented-databases-89dfa563b65) – who began their engineering careers while they were still in school, learning to code and coding to learn. It thrills us to know that Replit will be a part of many future such success stories of people who graduated from writing their first line of code to creating fun and useful software.\n\nWhen teens who use Replit access their computer in the cloud, we believe it should be treated like the computers that they may use at home or at school. As part of that, caregivers should be able to ensure that they are kept safe from online dangers or have controls where needed.\n\nToday we’re announcing a step that will make this easier than ever before. Announcing firewalledreplit.com, an additional domain to access Replit that takes its place alongside our original replit.com, but offers a safer experience. This dual-domain solution is an innovative solution for all users, fully free, and allows you to customize Replit’s power.\n\n\n## What does firewalledreplit.com offer?","metadata":{"id":1576}}],["1577",{"pageContent":"## What does firewalledreplit.com offer?\n\nAs the name implies, firewalledreplit.com is basically the same replit.com that you know and love, but behind a firewall that blocks certain potential online dangers. Users of the new site will be able to code just as they did before – even including web apps – but these apps won’t be able to access the Internet. This eliminates the risk of young users using Replit to access content they shouldn’t, and keeps their focus on coding. \n\nThis isn’t our first move to make our young users safer; last December, [we announced](https://blog.replit.com/family-friendly-dns) that we would be filtering all Internet access to prevent adult content and malware being accessed through Replit. That safeguard is still in place, on both our new and original domains. However, over the months since that feature rolled out, enterprising young users discovered some holes, such as the ability to access proxy websites, which in turn could be used to bypass both our filter and their school’s filters.\n\nThe firewall that we’re offering at firewalledreplit.com dramatically changes this from a “cat and mouse” game between young students and their caregivers into a slam-dunk for safety. Users can’t access unsafe content through a repl hosted at firewalledreplit.com because they can’t use it to access the Internet at all. (The only exceptions that we make are for a limited number of trusted software package repositories.)\n\nThat’s not quite all that firewalledreplit.com offers. This version of our site also hides our community features, so that users won’t be able to browse and search for other users’ apps, or view discussions. However, they will still be able to communicate and collaborate with their teachers and other students in their class, through the multi-player and collaborative features that are core to Replit's design. \n\n\n## How do I use it?","metadata":{"id":1577}}],["1578",{"pageContent":"## How do I use it?\n\nAlthough we first conceived this feature for use in schools, it’s free for everyone. It is as simple as loading firewalledreplit.com into the browser instead of replit.com. You’ll notice the difference because of some subtle design changes – keep an eye out for the “firewall” icon (shown here) that indicates that you’re on the firewalled domain.\n\n\n![alt_text](images/firewalled-replit.png \"Screenshot from firewalled-replit.com\")\n\nMost repls will function normally on firewalledreplit.com, but those that depend on being able to access the external internet might not function as expected. Users are free to switch between using firewalledreplit.com and our original domain replit.com at any time. For example, students may be required to use firewalledreplit.com for their work at school, while being permitted to use the unrestricted replit.com domain when at home.\n\nIt’s also now possible for schools or parents to block replit.com in their own firewall or router settings, while leaving access to firewalledreplit.com freely available. [This FAQ](https://docs.replit.com/firewalled-replit/firewalled-replit-faq) explains more about the differences between the original and the firewalled Replit experience, and this [document for IT administrators](https://docs.replit.com/teams-edu/it-administrators-toolkit) explains how educational institutions can block the original replit.com domains, if required.\n\n\n## Safety and power go together\n\nWe’re not done with raising the bar for safety on Replit. We’re also investing in improving our moderation tools, and [building out our team](https://replit.com/site/careers) of trust, safety, and security experts. We’ve added new reporting features that make it easy to report content that violates our terms and conditions. We’re strengthening our policies against inappropriate content such as self-harm and gambling. We're also working to improve our image moderation tools to filter out inappropriate content before anyone else sees it.","metadata":{"id":1578}}],["1579",{"pageContent":"Keeping our youngest users safe is an integral part of our mission to bring the [next billion software creators](https://blog.replit.com/b) online. We’re proud to be the only collaborative coding website that has taken these steps to put safety first. But computing power and safety shouldn’t be an either/or choice – we’re committed to providing both, so that Replit can continue to be for everyone. If you have questions or ideas about trust and safety at Replit, feel free to reach out to us at contact@replit.com.","metadata":{"id":1579}}],["1580",{"pageContent":"---\ntitle: \"CSS Concepts I Wish I Had Known Years Ago\"\nauthor: Christina Kopecky\ndate: 2020-07-06T07:00:00.000Z\ncategories: projects\n---\n\nWhen I think of web development, I like to think of it in terms of building a house. When we [learn HTML](https://careerkarma.com/blog/learn-html/), we are learning how to build the web page from the ground up, framing it with the lumber that will eventually become our end product.\n\nWith JavaScript, we create the wiring that will become the electricity that pretty much runs your home. Without JavaScript, we wouldn't have a web page that could run efficiently, save data to a database or manipulate that data. It's what basically keeps the lights turned on inside our home.\n\nCSS, on the other hand, puts the finishing touches on the home—creates a suitable environment for staging and selling the home. It decorates your text and background, creates your layout, and makes your website responsive and user-friendly. Without CSS, web pages just wouldn't be as professional or beautiful as they are.\n\nIn this article, we're going to target CSS—Cascading Style Sheets. We'll give a brief overview and provide some interactive tutorials that will help you level up as either a [web designer](https://careerkarma.com/careers/design) or [web developer](https://careerkarma.com/careers/web-development)!\n\n\n\n---\n\n\n\n## **What is CSS?**\n\nCSS was created to help web developers out. As websites were getting more and more complex, the styling was following suit. Prior to CSS, inline-styling was the name of the game, and the repetition of styling common elements in the same way was getting cumbersome for developers. This led to the standardization of CSS in the mid-to-late nineties so that external stylesheets could be used and [linked to the HTML](https://repl.it/@ChristinaKopeck/Beginner-CSS-Concepts#link-css-to-html).","metadata":{"id":1580}}],["1581",{"pageContent":"Cascading Style Sheets was named for the way it evaluates its code. If we have two different rules for a `alt;div>` in our code, for instance (assuming they are the same [specificity](https://repl.it/@ChristinaKopeck/Beginner-CSS-Concepts#specificity)) what happens?\n\nBy its very nature, CSS _cascades_—so if both sets of rules are pointing to the same element, and they have the same specificity, the last one written wins. That is, specificity is a way to figure out which declaration block, or set of rules, to use for an element in CSS.\n\nHere is a list of tutorials on the most important things to learn that will help you in your journey to [learn CSS](https://careerkarma.com/blog/learn-css/) and style your website:\n\n\n## **First Things First…**\n\n\n\n---\n\n\n\n### **Link CSS to HTML**\n\nThe first thing we need to be able to do to work with CSS is to [link a CSS file to an HTML file](https://careerkarma.com/blog/link-css-to-html/). This tutorial shows you how to do it!\n\n\n### **CSS Selectors**\n\nThe next step when learning CSS is to understand what [CSS selectors](https://careerkarma.com/blog/css-selectors/) and declaration blocks are and how they are used to style your web page. Here, we discuss the differences between elements, [classes vs ids](https://careerkarma.com/blog/css-class-vs-id-2/), and universal selectors, as well as some best practices for grouping CSS code together. \n\n\n## **Layout Properties In CSS**\n\n---\n\n\nOne of CSS’s primary responsibilities is the layout of our web page. There are several properties that assist in that regard: position, display, margin, border, padding. The next several tutorials are dedicated to these components of layout. \n\n\n### **CSS Position**\n\nThe [CSS position](https://careerkarma.com/blog/css-position) property affects where a container appears on the page. We use the position property, for example, to make a footer sticky or to create overlays. This will help you differentiate between the five possible values for position. \n\n\n### **CSS Properties—Display**","metadata":{"id":1581}}],["1582",{"pageContent":"### **CSS Properties—Display**\n\nWhen we want to affect how a container lays in relation to other containers, we use the CSS display property. Here, we will go over the inline, [inline-block](https://careerkarma.com/blog/css-inline-block/) and block values that can be assigned to an element. \n\n\n### **CSS Models**\n\n\n#### Box Model\n\nThe [CSS box model](https://careerkarma.com/blog/css-box-model/) is the basis of how we think about layout in CSS. It’s made up of content, padding, border, and margin. Here we will cover the differences between each and how to use them. \n\n\n#### Flexbox Model\n\nThe box model was a great start when it comes to how our web page is laid out; however, it could be a little difficult to work with if a design was a little complicated in the layout department. Also, the advent of the smartphone increased the need for another model that improved on the box model. Enter: the [CSS flexbox model](https://careerkarma.com/blog/css-flexbox/). It offers flexibility that the box model just didn’t have and makes implementing responsive designs simpler. \n\n\n#### Media Queries\n\nAlong with flexbox comes the need to be able to control CSS on various devices. Here we will talk about [CSS media queries](https://careerkarma.com/blog/css-media-queries/). Media queries basically give us the ability to have different CSS rules run on different device sizes. This gives us more control over how our websites look on smartphones, on tablets and on laptops.\n\n\n## **Style Properties In CSS**\n\n---\n\n\nThe other primary responsibility that CSS has is the style of our webpage. There are many, many properties that control how our page can look. Here, we will cover the most important of the properties: color (including background-color) and font-size. \n\n\n### **(Font) Color**\n\nIn this article on the [CSS color property](https://careerkarma.com/blog/css-font-color/), we learn about not only color but background-color and how to use it on text blocks. \n\n\n### **Gradient**","metadata":{"id":1582}}],["1583",{"pageContent":"In this article on the [CSS color property](https://careerkarma.com/blog/css-font-color/), we learn about not only color but background-color and how to use it on text blocks. \n\n\n### **Gradient**\n\nOne of the things we can do with the background, in addition to image and color, is to have some sort of gradient to fill the space. In this post, we cover the [CSS gradients](https://careerkarma.com/blog/css-gradient/) that can be used as values on the background. The possibilities include linear-gradient and the radial-gradient. They open up all sorts of color combinations that can be used in lieu of a solid color background or image. \n\n\n### **Font-Size**\n\n[CSS font-size](https://careerkarma.com/blog/css-font-size/) comes into play when we talk about accessibility. Here, we take a look at the different types of font-sizes we can use on text:  pixels, rems, ems and vw/vh. \n\nThis only scratches the surface of everything that CSS can do for you when it comes to styling your web page. If you feel you have mastered these concepts, I encourage you to look into other CSS concepts like CSS Grid and CSS Animations to become even more of a CSS master! \n\n**_About the author_**\n\n<img src=\"https://careerkarma.com/blog/wp-content/uploads/2020/06/image-3-300x300.png\" alt=\"Christina Kopecky\" style=\"height:250px; width:250px; display:inline-block; horizontal-align:left;\">\n\n_Christina Kopecky is a writer at Career Karma where she focuses on coding tutorials and technical articles. ([LinkedIn](https://www.linkedin.com/in/cmvnk/))_","metadata":{"id":1583}}],["1584",{"pageContent":"---\ntitle: Redesigning Cycles Transaction History\nauthor: Mathurah Ravigulan\ndate: 2022-12-23\ncategories: eng,product\ncover: https://blog.replit.com/images/cycles_transaction/banner.png\nprofiles: replit-mathu\n---\n\n![Cycles Cover Image](https://blog.replit.com/images/cycles_transaction/banner.png)\n\n\nEarlier this year we introduced [Cycles](https://docs.replit.com/cycles/about-cycles) to the platform, a virtual token that can be earned or purchased to add compute power and functionality for your Repls. \n\nHundreds of thousands of cycles transactions have been made to date. And now more Replit community members are able to earn cycles of their own through bounties!\n\n\nIn the past, Replit transactions looked something like this: \n![image](https://blog.replit.com/images/cycles_transaction/old_transactions.png)\n\n\nWith this view, although simple, it’s hard to know where exactly your cycles are going, whether it's spending on powerups, purchasing, or sending to other replit community members via tips and bounties. There’s also nothing actionable you can do with this information. \n\nOur initial focus for the first iteration was purely around cycles functionalty. Now there are even more things you can use cycles for, we're revisiting the experience to focus on helping you find information on where you spent or earned cycles on Replit!\n\nAs a goal of my internship, I wanted to work on a more complex engineering problem and learn more about the cycles team, which is why I took on this project!\n\n\nThe goals for this project are to: \n- Make the cycles transaction page extensible for future cycles products we build on replit\n- Surface transaction IDs (so it's easy to see that each transaction is unique)\n- Group transactions by categories \n- Surface details about what the transaction is\n\nThe new page looks like this:\n![gif](https://blog.replit.com/images/cycles_transaction/newpage.gif)\n\n\nSo, how did we get there? \n\nI broke my project down into 3 phases:","metadata":{"id":1584}}],["1585",{"pageContent":"The new page looks like this:\n![gif](https://blog.replit.com/images/cycles_transaction/newpage.gif)\n\n\nSo, how did we get there? \n\nI broke my project down into 3 phases: \n1. Talking to replit community members to understand what they would like to see on the transaction history page.\n2. Developing an initial design & working with our awesome designer Larry to translate the requirements I gathered into designs.\n3. Working on the engineering implementation from database design to front-end implemenation.\n\nLet's dig into understanding how cycles and transactions work on replit: \n\nWe have a table to represent transactions, users, balances, and wallets for interactions that require holding cycles in Google Cloud Spanner. The transactions table in this system is a source of truth for all transactions made on replit. \n\nIn Postgres, we have tables for each type of purchase you can make on replit, for example a table for powerups, bounties, tips, and more. These tables hold more contextual information on the detail of the transaction itself. \n\nOutside of these spanner tables, we use postgres tables to hold more contextual information about the transactions itself. For example, bouties, powerups, tips all have their own tables that hold more details. \n![image](https://blog.replit.com/images/cycles_transaction/table_1.png)\n\nLet's go through an example. What happens when you purchase a power up on Replit?\n1. First it'll create a Repl order that indicates the type of power-up. For example, always on. \n2. Then it'll link this Repl order to another transactions table in postgres.\n3. In the transactions table, it creates a transaction id that's linked to the transactions table in spanner. \n\n![image](https://blog.replit.com/images/cycles_transaction/table_2.png)","metadata":{"id":1585}}],["1586",{"pageContent":"3. In the transactions table, it creates a transaction id that's linked to the transactions table in spanner. \n\n![image](https://blog.replit.com/images/cycles_transaction/table_2.png)\n\nOne of the main engineering challenges was that the Spanner transactions table is too simple. It was sufficient to provide data for the current view, but if we want Replit community members to be able to see more details on their transaction, it will need to use the transaction ID to search all the possible tables to find this information which will be an expensive compute. \n\nAs part of the project, I introduced a new column to the spanner table called Metadata. Note: this change will only be rolled out to new transactions going forward!\n\nLet's see how the `metadata` would look like for an example `boost` transaction. \n\n```js\nmetadata: {\n  system: 'web-postgres'\n  relation: 'repl_order'\n  power_up_type: 'boost'\n  id:\n}\n```\nThe metadata will act as a reference to contextual data within the transactions table, making it easier to find information about Cycles Transactions. \n\n- `system`: refers to the system the data lives on, whether it's postgres or anything else.\n- `relation`: corresponds to the postgres table where the transaction is from.\n- `id`: will be used in the future to query additional data from the table such as Repls/bounty names.\n\nUsing this metadata, I was able to query and categorize transactions based on their table relations as you can see in the view. \n\nThe new cycles transaction history will be rolled out to explorers today and will slowly rollout to everyone next week. Start making new transactions on replit to try it out at https://replit.com/cycles. \n\nThis is only the start of the new Cycles Transaction History and I'm excited for the Replit team to continue building upon more features for this!\n\nA few features I'm looking forward to the team adding: \n- Connecting the Repls you purchased your powerups for. This way you can easily see which Repl you spent it on","metadata":{"id":1586}}],["1587",{"pageContent":"A few features I'm looking forward to the team adding: \n- Connecting the Repls you purchased your powerups for. This way you can easily see which Repl you spent it on\n- Ability to see who you got tips from and include the link to their profile in your transaction\n- Filtering by transaction categories and ability to view transactions in a specific date range\n\nOverall this was a really fun internship and I learned a lot! Thanks so much Replit for the opportunity :)","metadata":{"id":1587}}],["1588",{"pageContent":"---\ntitle: Enter the Shadows with Dark Mode\nauthor: Barron Webster\ndate: 2021-10-5\ncover: https://blog.repl.it/images/dark_mode/dark_mode_cover.png\ncategories: design\n---\n\n***Looking for how to change your Replit theme? Click [here](https://blog.replit.com/themehowto).***\n\nIt's spooky season, so we have a spooky feature for you: Dark Mode™ is now available for everyone on Replit! \n\nJust open your sidebar and click the moon to enter the shadow realm. Click the sun to switch back.\n\n![Dark Theme](images/dark_mode/theme_switching.gif) \n\nDark theme will work across the app — from the homepage,\n\n![Dark Homescreen](images/dark_mode/dark_homescreen.png)\n\nto the workspace:\n\n![Dark Workspace](images/dark_mode/dark_workspace.png)\n\nto the rest of the site.\n\n\n### Where we're going\nThis update has been enabled by a lot of work we're doing on Replit's design system. [Tyler](https://twitter.com/tylerangert), [Alex](https://twitter.com/alex_frantic), Ashlynn & I have restructured & simplified how we use css variables. And we've been building out reusable components and visual utilities that can render across themes. \n\nThis infrastructural work makes it a lot easier to do some really useful and cool things with our interface. Dark mode is a good first step — avoiding being blinded in the middle of the night. In the future, it will enable us to do things like have custom themes — personal themes, themes for a team or class, etc.\n\nIt also means it'll be much easier to make sure our UI is accessible. Our refactored color tokens have higher foreground/background contrast across the board. And by building accessibility best practices into our components, it means engineers get them for free when they take components off the shelf. It also makes high-contrast themes, or themes for colorblind users, will be much easier for us to make.","metadata":{"id":1588}}],["1589",{"pageContent":"---\ntitle: Destroying Stuck Repls\nauthor: Connor Brewster\ncategories: infra\n---\n\n**NOTE**: I am splitting this into some smaller posts.\n\nOutline:\n  * What is a stuck repl?\n    * Different kinds\n    * How often this happened\n  * First step is to start tracking it\n    * Unable to proxy log entries\n    * Tracking unable to proxy errors in prom/grafana\n    * Used a repl to scrape the logs and look for repls that have proxy errors over a span of time\n    * Aggegrate these stuck repls into buckets of \"time stuck\"\n    * Export these metrics to prometheus\n    * Add a nice graph in Grafana\n  * Core Invariant of Repl.it\n    * Only ever 0-1 container alive for a repl\n    * Essential for things like multiplayer to work\n    * Really bad things can happen if this invariant is broken\n  * Fixing repls that get stuck for hours\n  * Fixing stuck repls due to slow container destroys on shutdown\n    * Preemptible machines\n      * Why?\n      * Causes 100-200 repl containers to be destroyed at once\n    * Maybe talk about systemd dependencies since docker was shutting at the same time as conman?\n    * Docker is slow to kill this many containers\n      * `docker destroy` vs `docker kill`\n        * Destroy is graceful, gives time for container to shutdown gracefully\n        * Kill should be immediate\n      * Why isn't kill immediate?\n        * Docker probably isn't designed to immediately kill hundreds of containers in a few seconds\n        * Custom docker install\n        * Lock contention\n        * Waiting for cleanup of network interfaces\n        * Serial interface of netlink was a bottleneck\n      * What can we do about it?\n        * Kill the container's pid ourselves\n        * Since pid1 is the init process in its namespace, killing that kills all processes in the namespace\n  * Where are we now?\n    * We track both stuck repls and new session error rates\n      * New session error rate comfortably below 0.5%\n      * Stuck repl rate is very low, the ones that are stuck are only stuck for ~5 sec","metadata":{"id":1589}}],["1590",{"pageContent":"* We track both stuck repls and new session error rates\n      * New session error rate comfortably below 0.5%\n      * Stuck repl rate is very low, the ones that are stuck are only stuck for ~5 sec\n\n[TODO: Come up with a more inspiring intro?]\nYou may have heard that we recently squashed a gnarly bug on our platform, but you may be curious about what was causing this issue and how we went about fixing it.\n\n[TODO: Include a gif of a stuck repl]\n\n<div style=\"display: flex; justify-content: center;\">\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">One of the worst bugs on our platform SQUASHED.<br><br>SMASHED.<br><br>E R A D I C A T E D<br><br>Ahem... so yeah, it&#39;s just gone now. <a href=\"https://t.co/4z8djrtDW6\">pic.twitter.com/4z8djrtDW6</a></p>&mdash; Repl.it (@replit) <a href=\"https://twitter.com/replit/status/1318777999789969408?ref_src=twsrc%5Etfw\">October 21, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script> \n</div>\n\nWe had heard numerous reports of repls that would get stuck in an endless reconnecting loop. Sometimes the repls would be stuck for a couple minutes, other times they could be stuck in this look for multiple hours. This was no good; especially if you were needing to work on a homework assignment or were excited to work on your side project only to find out you can't connect. This is why we spent some time focusing on stability to make sure you can always access your repls.\n\nWhen we would get reports of stuck repls, it was difficult to figure out the precise root cause. Sometimes the repls would already be working again by the time we went to diagnose the issue. This was clearly a problem, but the root cause was hard to identify. We needed to take a different approach to tracking down these issues.","metadata":{"id":1590}}],["1591",{"pageContent":"One of the best things to do is to collect more metrics. Since this issue causes infinite reconnect loops, that means connections to the backend evaluation server were failing for some reason. In our effort to improve stability, successful connection rate was the first metric we started tracking. While adding new metrics is great, sometimes it uncovers some unfortunate realities that weren't aparent before. In our case, we discovered that our connection failure rate was around 3% [TODO: Verify this number, finding a graph would be great too] with occasional spikes that could go up to 10% or more.\n\n## Breaking it down\n\nWhile the failure rate was much disappointingly than we expected, it meant that we had room for improvement. We got right to work and began to break the problem down.\n\nWhile overall failure rate is a great metric to have, it doesn't really tell us the full story. Is the connection failure happening across all repls? Is it due to a smaller set of repls that are continually having connection errors?\n\nTo answer these questions, we needed to drill further into the problem. There's no better place to do this than to dig into the logs of a repl that has failed connection attempts. We have nice indexed logs which allow us to quickly investigate a handful of these repls and look for any patterns.\n\nIt became clear that there were 2 different classes of stuck repls:\n * Repls that were stuck for less than 2 minutes\n * Repls that were stuck for an hour or more\n\nManually reading the logs can only get you so far. With the volume of logs and the number of repls we run, it's difficult to tell how frequent these different classes stuck repls occur. Our logging solution provides some basic aggregation tools, but it doesn't allow us to look at consecutive errors for a specific repl over time.\n\nAt repl.it we love using our own product to build tools to make our jobs easier. It's kind of a super power.","metadata":{"id":1591}}],["1592",{"pageContent":"At repl.it we love using our own product to build tools to make our jobs easier. It's kind of a super power.\n\nTo determine how many stuck repls we have, I dumped some logs from the past 24 hours into a repl and began writing a script to crunch the log messages and spit out a nice table and bar graph of stuck repls bucketed by how long they have been stuck.\n\n__Example output from my stuck repl finder__\n```\nTue Oct 06 2020 00:00:00 GMT+0000 (Coordinated Universal Time)\nLog Interval: 24.00 hours\nTotal stuck: 7427\n\nBucketed by time stuck (bucket name = max time in seconds)\n     10 | ############################################################ | 2894\n     15 | ############################################                 | 2125\n     20 | ###############                                              | 722\n     25 | ####################                                         | 941\n     30 | #####                                                        | 238\n     40 | ####                                                         | 169\n     60 | ####                                                         | 207\n     90 | ##                                                           | 92\n    120 |                                                              | 13\n    180 |                                                              | 14\n    240 |                                                              | 4\n    360 |                                                              | 2\n    600 |                                                              | 0\n   1200 |                                                              | 0\n   3600 |                                                              | 2\n  10000 |                                                              | 3\n```\n\nWith this log-crunching repl, the data informed us that thousands of repls were stuck for less than 2 minutes per day and 5-10 repl would be stuck for almost and hour or more.","metadata":{"id":1592}}],["1593",{"pageContent":"```\n\nWith this log-crunching repl, the data informed us that thousands of repls were stuck for less than 2 minutes per day and 5-10 repl would be stuck for almost and hour or more.\n\nFrustration may ensue while waiting almost a minute to access your repl, but imagine not being able to access your repl for over an hour. We need to figure out why these repls are getting stuck for so long and fix the underlying cause, pronto!\n\n## Fixing **Really** Stuck Repls\n\nArmed with our new information, I set out to find the root cause of the forever-stuck-repls. Since there are so few of these, going back to the logs is a good place to see where it all went wrong.\n\n> Digging through logs can be quite fun and provides good insight into how a system actually works.\n\nFirst, we need to filter down the logs we want to look at. This is critical because we have a massive volume of log messages. Just in the past 15 minutes of writing this, over 4 million log messages were recorded!\n\nLuckily, the stuck repl finder spits out a few repls that were stuck for over an hour. Using the repl IDs in this list, we can filter the logs down to only entries that are relevant to that repl.\n\nMost of these repls had a recurring log entry: `session exited unexpectedly startup lock took too long for`\n\nSo, what is a startup lock and why is taking so long to get one? I'll go more into detail of our infrastructure in a bit. For now all you need to know is we use a locking mechanism to ensure that only one container ever exists at one time for a repl.\n\nSeeing this log message repeatedly for over an hour likely means one thing: a **deadlock**.\n\nWe have a couples to determine how these deadlocks occur:\n * If we catch one in the act, we can dump the goroutines and look for goroutines blocked on things like `semacquire`.\n * Add more log messages and look at the order of events to determine if that could lead to a deadlock.","metadata":{"id":1593}}],["1594",{"pageContent":"* Add more log messages and look at the order of events to determine if that could lead to a deadlock.\n\nUnfortunately, there were a few different race conditions that lead to deadlocks that we had to track down and each one could have a blog post of its own.\n\n[TODO: Maybe talk about chaos for writing tests to prevent regressions. That would be a cool blog post for Zach to write.]\n\n## Leveling up our tools\nWhile the repl I wrote earlier to crunch the logs messages worked, I still had to manually run the thing every day to get the results for the past 24 hours. This was starting to get old and Dan wanted to see how the metric was changing over time.\n\n[TODO: Can we make this image smaller?]\n\n![Dan suggests making this better](images/destroying-stuck-repls/dan_msg.png)\n\n> If you find yourself doing the same manual task over and over, it's a sign that it might need to be automated.\n\nWhat I really wanted was a nice real time chart in grafana that shows stuck repls over time. After talking with my team, Mason, recommended turning the repl into a hosted repl which serves metrics that our prometheus instance could scrape. I refactored the repl to make use of [repl.it database](https://blog.repl.it/database) and to serve a web page for prometheus to scrape. With just a couple hours of work, we now had real-time metrics for stuck repls.\n\n[TODO: Should I make the repl public and link it here?]\n\n![Graph of stuck repls](images/destroying-stuck-repls/stuck_repls_graph.png)\n> This is a recent screenshot of the graph, so it looks much better than it used to!\n\nNot only does this metric help us make sure our patches are actually reducing the number of stuck repls, but it will also help us make sure we don't accidentally regress in the future.\n\n[TODO: Maybe this is its own blog post]\n\n## Fixing *Sorta* Stuck Repls\nNow that we've patched up all the deadlocks we know about, it's time to shift our eyes to repls that get stuck for a minute or two.","metadata":{"id":1594}}],["1595",{"pageContent":"[TODO: Maybe this is its own blog post]\n\n## Fixing *Sorta* Stuck Repls\nNow that we've patched up all the deadlocks we know about, it's time to shift our eyes to repls that get stuck for a minute or two.\n\nWith a dashboard full of new stability-related metrics, we are able to find interesting correlations. _Aha!_ There is a spike in session connection errors whenever a group of conman instances shut down at the same time.\n\n> Hold up! What does any of this mean? What is conman? And why do they shutdown frequently?\n\nTo answer that, we need to take a quick detour and talk about how repl.it actually works behind the scenes.\n\nLet's talk about the most fundamental atom in the repl.it universe: the repl. \n\n[TODO: What is a repl? What is a repl container?]\n\n[TODO: Talk about the importance of single repl container per repl]\n\nWhen you open up a repl in your browser you are connected to a repl container which is running on our infrastructure. These are custom docker containers that are packed with all sorts of development tools.\n\nTo run these docker containers, we need a host machine. This is where conman comes in; it's name is short for container manager. Since we have so many repls running at any given time, a single conman cannot run all of these docker containers. So we have a group of conman instances which manage all the repl containers. A loadbalancer is used to distribute containers across conman instances. It is not uncommon for a single conman instance to be running 100-200 repl docker containers.\n\nWe run the majority of our conman instances using Google Cloud's preemptible instances. These are machines that can be taken away from us at any time with 30 seconds notice. The important thing is that these machines have an 80% discounted cost. That's a massive savings, but it requires us to architect replit to be resilient to machines disappearing at any time with short notice.","metadata":{"id":1595}}],["1596",{"pageContent":"With some foundational knowledge of our architecture, lets focus in on the failure mode that happens when a conman instance is shut down.\n\n![Simplified diagram of repl.it conman architecture](images/destroying-stuck-repls/simplified_arch.png)\n\n1. A user opens their repl which opens the IDE and attempts to connect to the backend evaluation server via a WebSocket.\n2. The request hits a load balancer which selects a conman instance to proxy to based on CPU usage.\n3. A healthy, living conman gets the request. Conman notices that the request is for a container that is living on a different conman and proxies the request there.\n4. Sadly this conman is shutting down and rejects the WebSocket connection!\n\nRequests will continue to fail until either:\n1. The docker container is shut down and the repl container entry in the global store is removed.\n2. Conman finishes shutting down and is no longer accessibly. In this case, the first conman will remove the old repl container entry and start a new container.\n\nFor some reason, the docker containers were not being shut down fast enough. Google Cloud Platform, provides 30 seconds for the instance to shutdown before it is forcefully shutdown. Unfortunately, destroying all the containers on an instance within the time limit was a rarity.\n\nAfter adding some more logging and metrics around container shutdowns, it became clear that calls to `docker kill` were taking much longer than expected. `docker kill` usually took [TODO: track down this number] to kill a repl container during normal operation, but when killing 100-200 containers at the same time, `docker kill` would take 20+ seconds.","metadata":{"id":1596}}],["1597",{"pageContent":"Docker offers two ways to stop a container: `docker stop` and `docker kill`. Docker stop sends a `SIGTERM` signal to the container and gives it a grace period to gracefully shutdown. If the container doesn't shutdown within the grace period, the container is sent `SIGKILL`. We don't care about gracefully shutting down the container and would rather shut it down as quickly as possible. `docker kill` sends `SIGKILL` which should kill the container immediately. For some reason, the theory did not match reality, `docker kill` shouldn't be taking on the order of seconds to complete just to send `SIGKILL` to the container. There must be something else going on.\n\nTo dig into this, here is a script which will create 200 docker containers and times how long it takes to kill them all at the same time.\n\n```bash\n#!/bin/bash\n\nCOUNT=200\necho \"Starting $COUNT containers...\"\nfor i in $(seq 1 $COUNT); do\n    printf .\n    docker run -d --name test-$i nginx > /dev/null 2>&1\ndone\n\necho -e \"\\nKilling $COUNT containers...\"\ntime $(docker kill $(docker container ls -a --filter \"name=test\" --format \"{{.ID}}\") > /dev/null 2>&1)\n\necho -e \"\\nCleaning up...\"\ndocker rm $(docker container ls -a --filter \"name=test\" --format \"{{.ID}}\") > /dev/null 2>&1\n```\n\nHere is output from running this on an n1-highmem-4 instance on GCE (this is what our production infrastructure uses):\n\n```\nStarting 200 containers...\n................................<trimmed>\nKilling 200 containers...\n\nreal    0m37.732s\nuser    0m0.135s\nsys     0m0.081s\n\nCleaning up...\n```\n\n_Yikes!_ It takes over 30 seconds to kill 200 containers. It shouldn't take this long to send `SIGKILL` to all these containers.\n\nDocker daemon has an option to [enable debug logging](https://docs.docker.com/config/daemon/#enable-debugging). These logs let us peak into what what's happening inside of dockerd and each entry has a timestamp so it might provide some insight into where all this time is being spent.","metadata":{"id":1597}}],["1598",{"pageContent":"With debug logging enabled, let's rerun the script and look at dockerd's logs. This will output a lot of log messages since we are dealing with 200 container, so lets look some hand-selected portions of the logs.\n\n```\n2020-12-04T04:30:53.084Z\tdockerd\tCalling GET /v1.40/containers/json?all=1&filters=%7B%22name%22%3A%7B%22test%22%3Atrue%7D%7D\n2020-12-04T04:30:53.084Z\tdockerd\tCalling HEAD /_ping\n2020-12-04T04:30:53.468Z\tdockerd\tCalling POST /v1.40/containers/33f7bdc9a123/kill?signal=KILL\n2020-12-04T04:30:53.468Z\tdockerd\tSending kill signal 9 to container 33f7bdc9a1239a3e1625ddb607a7d39ae00ea9f0fba84fc2cbca239d73c7b85c\n2020-12-04T04:30:53.468Z\tdockerd\tCalling POST /v1.40/containers/2bfc4bf27ce9/kill?signal=KILL\n2020-12-04T04:30:53.468Z\tdockerd\tSending kill signal 9 to container 2bfc4bf27ce93b1cd690d010df329c505d51e0ae3e8d55c888b199ce0585056b\n2020-12-04T04:30:53.468Z\tdockerd\tCalling POST /v1.40/containers/bef1570e5655/kill?signal=KILL\n2020-12-04T04:30:53.468Z\tdockerd\tSending kill signal 9 to container bef1570e5655f902cb262ab4cac4a873a27915639e96fe44a4381df9c11575d0\n...\n```\n\nHere we can see the requests to kill each container, and immediately sending `SIGKILL` to the container.\n\nHeres the log entries seen around 30 seconds after executing `docker kill`:\n```\n...\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-1's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.2)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.2 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65529, Sequence: (0xfa000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-5's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.6)","metadata":{"id":1598}}],["1599",{"pageContent":"2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-5's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.6)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.6 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65530, Sequence: (0xda000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-3's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.4)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.4 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65531, Sequence: (0xd8000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n2020-12-04T04:31:32.308Z\tdockerd\tReleasing addresses for endpoint test-2's interface on network bridge\n2020-12-04T04:31:32.308Z\tdockerd\tReleaseAddress(LocalDefault/172.17.0.0/16, 172.17.0.3)\n2020-12-04T04:31:32.308Z\tdockerd\tReleased address PoolID:LocalDefault/172.17.0.0/16, Address:172.17.0.3 Sequence:App: ipam/default/data, ID: LocalDefault/172.17.0.0/16, DBIndex: 0x0, Bits: 65536, Unselected: 65532, Sequence: (0xd0000000, 1)->(0x0, 2046)->(0x1, 1)->end Curr:202\n```\n\nThese logs don't give us a full picture of everything dockerd is doing, but this makes it seem like dockerd might be spending a lot of time releasing network addresses.\n\nAt this point in my adventure, I decided it was time to start digging into docker engine's source code and build my own version of dockerd with some extra logging.\n\nI started out by looking for the codepath that handles container kill requests. I added some extra log messages with timings of different spans and eventually I found out where all this time was being spent:","metadata":{"id":1599}}],["1600",{"pageContent":"`SIGKILL` is sent to the container and then before responding to the HTTP request, the engine waits for the container to no longer be running ([source](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/daemon/kill.go#L174))\n\n```\n\t<-container.Wait(context.Background(), containerpkg.WaitConditionNotRunning)\n```\n\nThe `container.Wait` function returns a channel which receives the exit code and any error from the container. Unfortunately, to get the exit code and error, a lock on the interal container struct must be acquired. ([source](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/container/state.go#L212-L233))\n\n```go\n  ...\n\n\tgo func() {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t// Context timeout or cancellation.\n\t\t\tresultC <- StateStatus{\n\t\t\t\texitCode: -1,\n\t\t\t\terr:      ctx.Err(),\n\t\t\t}\n\t\t\treturn\n\t\tcase <-waitStop:\n\t\tcase <-waitRemove:\n\t\t}\n\n\t\ts.Lock() // <-- Time is spent waiting here\n\t\tresult := StateStatus{\n\t\t\texitCode: s.ExitCode(),\n\t\t\terr:      s.Err(),\n\t\t}\n\t\ts.Unlock()\n\n\t\tresultC <- result\n\t}()\n\n\treturn resultC\n\n  ...\n```\n\nAs it turns out, this container lock is held while cleaning up network resources and the `s.Lock()` above ends up waiting for a long time. This happens inside [`handleContainerExit`](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/daemon/monitor.go#L27-L103). The container lock is held for the duration of the function. This function calls the container's [`Cleanup`](https://github.com/docker/engine/blob/ab373df1125b6002603456fd7f554ef370389ad9/daemon/start.go#L226-L266) method which releases network resources.","metadata":{"id":1600}}],["1601",{"pageContent":"So why does it take so long to cleanup network resources? The network resources are handled via [netlink](https://man7.org/linux/man-pages/man7/netlink.7.html). Netlink is used to communicate between user and kernel space which can be used to configure network interfaces. Unfortunately, netlink works via a serial interface. This means that all the operations to release the address of each container get bottlenecked by this serial interface.\n\nThings started to feel a bit hopeless here. It didn't seem like there was anything we could do differently to escape waiting for network resources to be cleaned up. But, maybe we could bypass Docker altogether when killing containers.\n\nAs far as we are concerned, we want to kill the container but we don't want to wait for network resources to be cleaned up. The important thing is that the container will no longer produce any side effects. For example, we don't want the contain to take anymore snapshots.\n\nThe solution I went with was to bypass docker by killing the container's pid directly. Conman records the pid of the container after it is started and then sends `SIGKILL` to the container when it becomes time to be killed. Since a container forms a pid namespace, when the container's pid terminates, all other processes in the container/pid namespace also terminate.\n\nFrom `pid_namespaces` [manual page](https://man7.org/linux/man-pages/man7/pid_namespaces.7.html):\n\n> If the \"init\" process of a PID namespace terminates, the kernel terminates all of the processes in the namespace via a SIGKILL signal.\n\nGiven this, we can be reasonably confident that after sending `SIGKILL` to the container, that the container no longer produces any side effects.\n\nAfter this change was applied, control of repls would be relinquished under a few seconds during shutdown. This was a massive improvement over the 30+ seconds before and brought our session connection error rate down from ~3% to well under 0.5%.\n\n[TODO: Add graph of this]","metadata":{"id":1601}}],["1602",{"pageContent":"---\ntitle: Everyone will learn to program (or why the computer revolution *still* hasn't happened yet)\nauthor: Patrick Coleman\ndate: 2021-08-19\ncover: https://blog.repl.it/images/teams_edu/everyoneprograms.png\ncategories: edu\n---\n\nLast week [I spoke on behalf of Replit](https://www.youtube.com/watch?v=zZVUZuDfhFY) at the [ASU+GSV summit](https://www.asugsvsummit.com/), one of the largest education technology conferences in the world, on the topic [\"Is coding an essential modern fluency?\"](https://asugsv.app.swapcard.com/widget/event/asu-gsv-2021/planning/UGxhbm5pbmdfNjI4NTk0). For me and the rest of the panelists ([Mike Smith of Harvard](https://scholar.harvard.edu/mikesmith), [Taniya Mishra of SureStart](https://mysurestart.com/about), and [Krishna Vedati of Tynker](https://www.tynker.com/about/)) the answer is an easy and obvious YES. And I'm guessing if you've been coding along with Replit's journey, it's a yes too.\n\n**Programming is essential.** Full stop. `EOF`\n\n![Everyone will learn to program (or why the computer revolution still hasn't happened yet)](https://everyoneprograms.patrickatreplit.repl.co/everyoneprograms.png)\n\n[We all](https://www.youtube.com/watch?v=nKIu9yen5nc) believe that within the next decade programming will be an education basic for all students, everywhere, just like reading, writing, and arithmetic. \n\nNow before I dive in (and at the risk of being a little pedantic), I want to quickly distinguish coding vs. programming. Coding is writing instructions for a computer in an esoteric language, using proper syntax. Programming is creating software to do things. Even block-based languages like [MIT Scratch](https://scratch.mit.edu/) and no-code tools like [Webflow](https://webflow.com/) are \"programming\" (if not really \"coding\").","metadata":{"id":1602}}],["1603",{"pageContent":"Programming is essential. **Coding is just a way to program.** And while we're not yet at a point where you can expressively program without doing some coding, still the [fewer lines of code you have to write, the better](https://twitter.com/amasad/status/1350673660978237440).\n\nToday, you can't understand the world without understanding a little bit about computers and how they work. This will only get more true. After all if you don't understand computers, you might even think the internet is just a [series of tubes](https://en.wikipedia.org/wiki/Series_of_tubes)... \n\nNot understanding programming will be just like not understanding basic physics or how to read. Without physics, cars passing you on the street would be like magical metal boxes. Whithout literacy, this blog post would be nothing but cryptic gibberish. But just like you don't have to be a theoretical physicist to understand gravity, you don't need to be a computer scientist to code. You don't need to be able to operate an industrial printing press or be a computer hardware hacker. You don't need to write novels or scientific papers or philosophical treatises. And you don't need to architect [elegantly](http://www.catb.org/jargon/html/E/elegant.html) designed applications as a software engineer.\n\nYou just need to be able to program. A little bit. Just the basics, really.\n- You should be able to make a webpage or app for your business as easily as you can write a blog post, an email, or a restaurant menu\n- You should be able to invent new video games as easily as you can new card games\n- You should be able to automate repetitive tasks (like [this team bonding Slack bot built by one of our business interns](https://blog.replit.com/slackbot))\n- You should be able to express yourself with [apps](https://replit.com/apps) or [art](https://www.freecodecamp.org/news/an-introduction-to-generative-art-what-it-is-and-how-you-make-it-b0b363b50a70/) or whatever inspires your creativity and curiosity","metadata":{"id":1603}}],["1604",{"pageContent":"- And you should be able share your creations with the people you love (like [this holiday card](https://pirklefamilyholiday2020.com/) from one of our [business admins](https://blog.replit.com/anyone-can-code-week1))\n\nOf course some will go beyond those basics, become software engineers, and build [even](https://blog.replit.com/replit-compute) [more](https://runyourown.social/) [amazing](http://robotandproud.com/) [things](https://esoteric.codes/)!\n\nComputers, particularly hackable computers, can be liberating and empowering for people of all skill levels. (Of course, I mean `hackable` in the sense of controllable and modifiable, not in the sense of vulnerable to security breaches. It's time we reclaimed that word.) \n\nComputers also don't care about who you are or how prestigious your background is. Anyone can build something great, bring positive change to the world, and get wealthy by creating economic value for others. This is why we should make computers easier to use, accessible, and available to everyone. More programming education = more justice.\n\nAnd we all just learn better with immediate, non-judgmental feedback. Computers make this possible at scale. Early [\"teaching machines\" and educational computer systems](https://www.nature.com/articles/d41586-017-07220-w) were built on this principle, and it continues to influence modern pedagogical techniques, like [PRIMM](https://blogs.kcl.ac.uk/cser/2017/09/01/primm-a-structured-approach-to-teaching-programming/) and [POGIL](https://www.pogil.org/about-pogil/what-is-pogil).\n\nSo saying programming is an \"essential fluency\" feels... well, pretty uncontroversial (at least not to us).","metadata":{"id":1604}}],["1605",{"pageContent":"So saying programming is an \"essential fluency\" feels... well, pretty uncontroversial (at least not to us). \n\nAnd universal programming education seems inevitable. Global internet penetration [continues to grow](https://www.bondcap.com/report/itr19/#view/7) ([Starlink](https://www.starlink.com/) will accelerate this), and anyone with internet access can [learn to code](https://docs.replit.com/tutorials/00-overview) or [plumb the depths of human knowledge in any subject](https://en.wikipedia.org/wiki/Main_Page), entirely for free.\n\nIn 1997, [Alan Kay](https://en.wikipedia.org/wiki/Alan_Kay) said [the computer revolution hasn't happened yet](https://catonmat.net/videos/the-computer-revolution-hasnt-happened-yet). He was talking about the changes that would come from advances in computer science. Since then programming languages have gotten more expressive, computers have gotten more powerful, more people are programming, [more businesses are software businesses](https://a16z.com/2011/08/20/why-software-is-eating-the-world/), and more schools are teaching computer science. But we're still not there yet. We're just getting started.\n\nSo perhaps a more insightful question would be: **\"Why won't everyone be able to program *sooner*?\"**\n\nI can only share my own experience, but I think it's telling. I'm not an engineer, I'm a business ~~cat~~ person. I studied economics in college. But I fell in love with computers as a kid. And my early experiences have totally shaped the way I view and understand the world.","metadata":{"id":1605}}],["1606",{"pageContent":"I joined the C++ club in 7th grade (in the early 2000's) and mostly made simple programs that beeped at you at high pitch. Then in high school, I took every CS class my school offered (I was lucky to go to a well-resourced magnet school) and spent a summer creating a (sloppily coded) game. But I gave up when it came time to publish the game on our school's game website. It was too hard. I ended up getting a friend to do it for me. [Publishing it on Replit](https://replit.com/@PatrickAtReplit/Ant-Killer-Game?v=1), on the other hand, was too easy. Sharing your work is essential and still unreasonably hard. Even Github + Digital Ocean is too much for beginners, not to mention more complicated stacks...\n\nWhen I took [AP Computer Science](https://apstudents.collegeboard.org/courses/ap-computer-science-a), we were still handwriting code on paper for the exam. (By the way, they're still doing that today.) One teacher even told us that her students usually test their code on Replit before handwriting it and that she has to explain to them that this is cheating. Insane! Not only is the course content not teaching students how to do any of the \"basics\" I listed above, it's teaching them habits that will make it harder for them to work and collaborate effectively later. It's no surprise that this teacher also told us that even her most promising students start to lose that spark in their eyes when they take AP CS.\n\nThen after some early internships where I wrote VBA scripts to automate Excel spreadsheets and Powerpoint presentations, I didn't code for many many years. But last spring when I joined Replit, I started relearning how to program.","metadata":{"id":1606}}],["1607",{"pageContent":"A couple weeks ago, I wanted to add a new text-only page to the Replit website and figured I'd take a shot at it myself. Writing the new code was easy, but the non-programming parts of software engineering were not. I spent over an hour updating my local dev environment, decipering error messages about incorrect package versions, and struggling with the proper git commands (in the proper order). And that was with a ton of help from one of our [(very generous) engineers](https://repldex.com/entry/Sergei). Luckily I'd already installed the necessary programming languages, picked a text editor, and had the right permissions on Github for a prior project. This would have been pretty much impossible if I were a total beginner...\n\nAnd then last week, at one of the largest education technology conferences in the world, there was surprisingly little focus on teaching programming. After all, it's programming education that will empower the next generation of entreprenuers, educators, and policy makers to transform education with dazzling new innovations that they will bring to this conference in the coming years. And it's programming education that will help distribute the gains of the digital economy more equitably, provided we continue our efforts [to expand access to quality education](https://blog.replit.com/respect).","metadata":{"id":1607}}],["1608",{"pageContent":"So to answer this new question, why not sooner? **Programming is still too hard.** It's still too mysterious. It's too individual and isolated. It takes far too long before you can have something you'll proudly share with others. Too many schools [still don't offer computer science classes](https://code.org/promote). And there are far too many in the coding world who cling desperately to the old ways, bullying and intimidating beginners and outsiders (something that dates back to [the batch-processing IBM \"priesthood\" in the 1950's and 60's](https://www.wired.com/2014/11/the-tech-model-railroad-club/) and [continues on popular communities like Stack Overflow](https://stackoverflow.blog/2018/04/26/stack-overflow-isnt-very-welcoming-its-time-for-that-to-change/) today).\n\nWhat if, instead, things were different? What if coding was realtime and multiplayer? What if you could easily check the source code for a cool app? And remix it? What if you could instantly share your creations with friends, family, the whole internet? And what if the community was friendly and welcoming?\n\nThat's what we're working on at Replit. And we're not the only ones.\n\nWe're joined by big companies and small startups. Businesses building better dev tools, low-code tools, no-code tools. Computer scientists inventing new abstractions and better ways to program. K-12 teachers and college professors, including many who are learning as they teach. Bootcamps. Professional engineers who are blogging, mentoring younger colleagues, [volunteering in schools](https://www.microsoft.com/en-us/teals), [becoming teachers themselves](http://derrickmcmillen.com/). And all the helfpul online communities (Replit's [Discord](https://repl.it/discord) and [Teacher Community](https://community.replit.com/), [HN](https://news.ycombinator.com/news), [r/learnprogramming](https://www.reddit.com/r/learnprogramming/), [Lobsters](https://lobste.rs/), etc., etc.).","metadata":{"id":1608}}],["1609",{"pageContent":"Now I'm not a naive utopian, but I am an optimist. I believe this will be a better future, and that [big things](https://www.52-insights.com/interview-politics-enlightenment-steven-pinker-why-our-world-is-getting-better/) and [little things](https://www.gwern.net/Improvements) are getting better all the time.\n\nWe're all doing our utmost to pull the future into the now. And we're helping people fight our natural tendency to dismiss, distrust, or even fear things we don't understand. Programming can be approachable. It can be easy. It can be fun.\n\nAnd it will happen. **Programming will become an essential modern fluency.** And until we get there, we'll keep hacking away[.](https://replit.com/mark)\n\nThank you for being on this mission with us. As always, [happy coding](https://repl.new/)!","metadata":{"id":1609}}],["1610",{"pageContent":"---\ntitle: Replit Case Study - Creating a 700+ User Web App in a Month\nauthor: Rishabh Anand\ndate: 2021-03-23T00:00:00.000Z\ncover: https://blog.replit.com/images/fast-dev.png\ncategories: projects\n--- \n\nHey there 👋🏻\nMy name is [Rishabh Anand](https://twitter.com/rishabh16_) and I am an ex-resident at the National University of Singapore's (NUS) [Raffles Hall of residence](https://nus.edu.sg/osa/raffleshall). It's one of the on-campus student accommodations that houses students from all levels of undergraduate education at NUS with the majority being freshmen and sophomores.\n\n[RHDEVS](https://www.linkedin.com/company/rhdevs/) – the software development club at Raffles – was tasked by upper management to build a convenience app for the Hall’s student body. The app itself was nothing new; it has some basic features students would potentially use in their daily hall lives:\n\n- Laundry\n- Facilities Booking for clubs\n- Events Booking / Management\n- Calendar and Timetable Planner\n- Crowd Tracking and Analysis (COVID-19 measures)\n\nHere’s the catch: we only had a month and half from design, to implementation, to testing, before deployment and marketing. Like any startup, you’d expect us to start building MVPs for <5 users (i.e., the loyal few) and scale up from there, constantly iterating and shipping, asking for feedback, and growing organically.\n\nWell, not here. We had to build for over 700 students from scratch.\n\nHere’s how Replit saved my team during “hell month”.\n\n## Serving and Deploying\n\nI was the Backend Lead supervising a team of 13 student-developers who had little to no experience with server development and deployment. Every day came with a new set of learnings on what to do and what not to do.\n\nFortunately, the more experienced ones (minority) chipped in to teach the beginners (majority) how to write good server code. Soon, the semi-confident team split into groups, each focusing on different features with weekly deliverables and stand-ups in this one-month code sprint.","metadata":{"id":1610}}],["1611",{"pageContent":"Backend is tricky business. All the infrastructure and apps the club builds rely on the backend’s services and stability. At our scale, without backups or custom on-premise hardware, a single crash would likely throw all the other services into limbo. Owing to budget issues, we did not have access to crash analytics either.\n\nOur first one and half weeks were spent planning excessively. We charted schematics, drew ER diagrams, class diagrams, and more. We had to nail it in our first try or risk delaying the official launch window. The next few weeks were solely for development. There was no looking back.\n\nThe design team regularly sent us wireframes based on user feedback and we had to tweak our plans here and there.\n\n## Where Replit Really Shines\n\n### Faster Prototyping\n\nIn some way or the other, Replit definitely sped up our iteration cycles. From a motley crew that was once clueless on building servers, we became rapid-action deployers. The [tutorials](https://docs.replit.com/repls/http-servers) and [forums](https://replit.com/talk/all) saved us from a lot of Googling and Stack Overflow-ing.\n\nDeploying on Replit allowed us to focus our energy on writing stable backend code. In fact, it gave us time to set a standard for writing code. We came up with a contribution and programming style guide – a luxury we wouldn’t have been able to afford if we spent our time fiddling around with complex server hosting platforms instead. It really set us up for future projects!\n\n### Ease of Deployment\n\nThe team comprised of students who were well-versed in basic Python, but had never built any large-scale projects. \n\nClicking the “Run” button in the IDE was enough to trigger a deployment, and this was a blessing for most of the beginner students. This meant we no longer had to worry about Procfiles, configurations, requirements, and virtual machine types.","metadata":{"id":1611}}],["1612",{"pageContent":"For the unaware, most Python server hosting services require a user-submitted requirements.txt file with the packages and their right versions (the VM would then install them when deployed). Personally, the biggest “flex” Replit has over the other cloud providers is the automatic requirements.txt and config files generation; all we had to do is write our code and the IDE takes care of the rest.\n\nAn added bonus was the ability to add a .env file with our database keys and administrative credentials without worrying about intrusion or hacking.\n\nUltimately, we had around 4 dedicated servers taking care of different tasks. No doubt, one of the smoothest deployment procedures I’ve come across!\n\n### Importing from GitHub\n\nOur codebase is largely maintained on GitHub. Importing projects and collaborating on them with teammates was fun! We no longer had to huddle around someone’s laptop to see changes being made to the document. \n\nIt’s like coding on Google Docs together; definitely gamified the experience :D\n\n### Low Costs\n\nWe’re broke college students, remember? Our budget mainly went into frontend development, design, and miscellaneous administrative activities (like buying redbull and snacks for our sprints). \n\nThe other guys (GCP, AWS, Heroku, DigitalOcean) were definitely out of our budget and expertise if we looked at the long term. The app would be used by a large percentage of the student body simultaneously in a day and naturally, these server costs would balloon up. We were not prepared for that just yet.\n\nPerhaps, the most important benefit of using Replit was the inexpensive Hacker plan we were on. \n\nICYMI: It’s free for students!\n\n### Active Servers and Minimal Downtime\n\nI mentioned above that many students would be using the app at any given time. Though, during non-peak hours (like those pesky late-night study sessions), there may be pockets of time where user activity is effectively zero.","metadata":{"id":1612}}],["1613",{"pageContent":"Replit servers are designed to wake up automatically after periods of inactivity. My team was fortunate in that we did not have to build a heartbeat server to wake up dead servers, i.e., an additional manhour-intensive task we had no time for. It’s all taken care of under the hood.\n\n## The Present\n\nIt seems like I’m overexaggerating certain things here. I assure you, I’m not. Replit was definitely a lifesaver when it came to creating servers without worrying about a lot of technical issues. For a fairly novice team, this was the best option we had. I’d definitely recommend starting out projects (like organisation intranets, game servers, application portals, and more) with Replit regardless of the team’s experience. \n\nIt enabled fast prototyping, minimal but fruitful testing, faster deployments, and got us to launch faster than we had imagined. It has all the backend infrastructure services you need on a silver platter. For the skilled many out there, Replit offers support for practically every language out there!\n\nHere’s a crusty screenshot of a COVID-19 rules-compliant call with the team:\n\n![team screenshot](https://blog.replit.com/images/fast-dev.png)\n\nTill date, RHDEVS is actively maintaining the app and is still using Replit as our backend. There are no plans of switching to the other guys anytime soon so lots more to explore, for sure!\n\nWant to banter about Replit or tech in general? Slide into my DMs on [Twitter](https://twitter.com/rishabh16_)!","metadata":{"id":1613}}],["1614",{"pageContent":"---\ntitle: How to use Firebase for a website with Replit\nauthor: Yev Barkalov\ndate: 2018-07-26T00:55:39.000Z\ncategories: projects\n---\n\nToday we're going to learn how to use Firebase as a database for a simple website using JavaScript!\n\nRight now, this is what my fantastic website looks like\n\n> ![This is my fantastic website!](/public/images/blog/firebase/fantastic_website.png)\n\nWhat I want to do is include a guestbook, a way for people who visit the site to leave a wonderful message for those who follow in their steps. So, in the end, I should have a website that looks something like this.\n\n> ![website with textbox](/public/images/blog/firebase/fantastic_final.png)\n\nI don't have any CSS in my website but that's only so the implemented feature is blatantly obvious.\n\nThe first thing you'll need for this is a website and a url you can access it with. I'll be using my fantastic website which you can fork [here](https://repl.it/@yevbar/My-Fantastic-Website). Once you have those two things, continue along to the following steps!\n\nWe need to first set up Firebase before we can use it in our website so let's go and do that. If you're interested in learning a bit more about Firebase, check out their website at [firebase.google.com](https://firebase.google.com/).\n\nOnce you're ready, go over to [console.firebase.google.com](https://console.firebase.google.com/). If you're not already logged into a Google account, it'll prompt you to do so.\n\nAs soon as you're logged in, you'll be greeted with your Firebase Console\n\n![Firebase website](/public/images/blog/firebase/console.png)\n\nGo ahead and \"Add Project\" then put whatever you like for the name of your application\n\n![project on firebase](/public/images/blog/firebase/i_love_replit.png)\n\nSelect \"Create Project\" and after a few seconds you'll see the dashboard for the app you just created\n\n![firebase dashboard](/public/images/blog/firebase/dashboard.png)","metadata":{"id":1614}}],["1615",{"pageContent":"Select \"Create Project\" and after a few seconds you'll see the dashboard for the app you just created\n\n![firebase dashboard](/public/images/blog/firebase/dashboard.png)\n\nAt this point, we have an application but it's not fully configured yet so let's change that. Under **Develop**, select **Authentication**\n\n![firebase authentication](/public/images/blog/firebase/authentication.png)\n\nNext, go to the **Sign-In method** tab\n\n![firebase signin](/public/images/blog/firebase/signin_method.png)\n\nScroll down to the section with **Authorized domains** and add the url for the hosted repl\n\n![firebase domain](/public/images/blog/firebase/domain.png)\n\nThe last thing we need to do to configure our database is actually set the permissions for an app to access/write our database. To do that, go over to **Database**\n\n![firebase database](/public/images/blog/firebase/database.png)\n\nScroll down to **Realtime Database** and \"Create database\"\n\n![firebase realtime](/public/images/blog/firebase/realtime.png)\n\nIt doesn't really matter what rules you initialize with since we'll be setting those next. As soon as you create your database, you'll see a dashboard for that database. Click on \"Rules\" and, if needed, modify the JSON so that it's the following\n\n```javascript\n{\n  \"rules\": {\n    \".read\": true,\n    \".write\": true\n  }\n}\n```\n\nWhat this means is that any user or app that is under the authorized domains can both read and modify our database. In my case with reviews on my website, I don't really mind, however, if you're making a website or project where security of information is important then do manage permissions accordingly. If you're looking to access the database from a server or such, check out how to [add the Firebase Admin SDK to your server](https://firebase.google.com/docs/admin/setup) so that you can properly configure the rules for your app.\n\nWith that, we're ready to start using Firebase!","metadata":{"id":1615}}],["1616",{"pageContent":"With that, we're ready to start using Firebase!\n\nThe first thing we'll need to put in our website are some dependencies. I'll be using JQuery to dynamically add comments as well as two Firebase libraries where one's to connect to Firebase and the other is to utilize the realtime database. Be sure to put these before any of your `<script>` elements\n\n```html\n<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n<script src=\"https://www.gstatic.com/firebasejs/5.3.0/firebase-app.js\"></script>\n<script src=\"https://www.gstatic.com/firebasejs/5.3.0/firebase-database.js\"></script>\n```\nAt the end of my `<body>` I put a `div` with the id \"comments\" and this is where my comments will go\n\n```html\n<body>\n  <!-- Some other HTML... -->\n  <div id=\"comments\">\n  </div>\n</body>\n```\n\nThat's it for the HTML, now we can get working in our JavaScript file.\n\nFirst, we'll put in our JQuery `ready` function so that the code only executes when the browser is ready\n\n```javascript\n$(document).ready(function() {\n   // This is where our code will go\n});\n```\n\nWe've already configured the database but we need to actually initialize a database connection in our JavaScript so go back to the dashboard for your application and select **Add Firebase to your web app** so that you're prompted with a code snippet\n\n![firebase code snippet](/public/images/blog/firebase/add.png)\n\nCopy the JavaScript that's between the `script` tags and paste it into your `ready` function so it looks something like this\n\n```javascript\n$(document).ready(function() {\n  // Initialize Firebase\n  var config = {\n    apiKey: \"AIzaSyDz8OrTtNBOZY2HliZ2-cmsPX8wi-4rGAQ\",\n    authDomain: \"i-love-replit.firebaseapp.com\",\n    databaseURL: \"https://i-love-replit.firebaseio.com\",\n    projectId: \"i-love-replit\",\n    storageBucket: \"i-love-replit.appspot.com\",\n    messagingSenderId: \"214072077152\"\n  };\n  firebase.initializeApp(config);\n});\n```\n\nThis just connects to Firebase, we'll want to connect to the Realtime Database and we can do so with the following\n\n```javascript","metadata":{"id":1616}}],["1617",{"pageContent":"};\n  firebase.initializeApp(config);\n});\n```\n\nThis just connects to Firebase, we'll want to connect to the Realtime Database and we can do so with the following\n\n```javascript\nlet guestBook = firebase.database().ref();\n```\n\nWith the `guestBook` object, we can utilize the power of the realtime database (moohoohaha)\n\nThe first method I'm going to define is a `signGuestbook` method so, whenever I have a name and comment for a review, I can append it on swiftly\n\n```javascript\nfunction signGuestbook(name, comment) {\n  $(\"#comments\").append(\"<p><b>\" + name + \"</b><br/>\" + comment + \"</p>\");\n}\n```\n\nWith that method defined, we're ready to receive objects in the database so let's create a listener for that\n\n```javascript\nguestBook.on('child_added', function(guest) {\n  // Code goes here\n});\n```\n\nThe way we can access the `guest`'s data is by calling its `val()` function and, using our `signGuestbook` method, we can add reviews as we receive them\n\n```javascript\nguestBook.on('child_added', function(guest) {\n  if (guest.val().name && guest.val().comment) {\n      signGuestbook(guest.val().name,guest.val().comment);\n  }\n});\n```\n\nThe reason for checking that the `name` and `comment` are truthy is so that our comment appending doesn't break.\n\nSo now that we're ready to receive guests and reviews, let's introduce a way to create them in the first place. To do that, I made a simple HTML form\n\n```html\n<form id=\"guestbook\">\n      <span>Name:</span>\n      <br/>\n      <input type=\"text\" id=\"name\">\n      <br/>\n      <span>Comment:</span>\n      <br/>\n      <input type=\"text\" id=\"comment\">\n      <br/>\n      <button type=\"submit\">Submit</button>\n</form>\n```\n\nTo keep the page from reloading when I \"submit\", I use JQuery\n\n```javascript\n$('#guestbook').submit(function(event) {\n    event.preventDefault();\n});\n```\n\nWhen I submit my form, that means I'm adding a review so let's add the given values to our database\n\n```javascript\n$('#guestbook').submit(function(event) {\n  event.preventDefault();\n  // Add guest to guestbook\n  guestBook.push({","metadata":{"id":1617}}],["1618",{"pageContent":"```javascript\n$('#guestbook').submit(function(event) {\n  event.preventDefault();\n  // Add guest to guestbook\n  guestBook.push({\n    name: $('#name').val(),\n    comment: $('#comment').val(),\n  });\n});\n```\n\nThe reason we only add the review to Firebase and not call `signGuestbook` is because, when we add the review, it triggers the `child_added` listener so it gets appended from that.\n\nFor the sake of keeping things clean, I'm going to clear the input elements and reset the focus\n\n```javascript\n$('#guestbook').submit(function(event) {\n  event.preventDefault();\n  // Add guest to guestbook\n  guestBook.push({\n    name: $('#name').val(),\n    comment: $('#comment').val(),\n  });\n\n  $('#name').val('');\n  $('#comment').val('');\n  $('#name').focus();\n});\n```\n\nGo ahead and start adding your comments and you'll see your guestbook come to life! If you reload the tab or open in another browser, after a few seconds, you'll see all the previous reviews get appended even though we never made an explicit call to get old data!\n\nThe reason for that is, when we initialize our `guestBook` with the realtime database, it syncs up old data so that it's in the same state as it is on Firebase which makes thing convinient on our end.\n\nThe last topic to cover is a massive security flaw on our website called XSS. You can learn a lot from the [OWASP page](https://www.owasp.org/index.php/XSS) but it's an attack where user generated code gets executed on another client's app.\n\nAs an example for something you can do right now, put the following as either a name or comment\n\n```html\n<script>alert(1);</script>\n```\n\nWhat this does is alert the browser which, albeit, is just annoying. However, I can run any javascript here which means I can do a lot more than just annoy you.\n\nHow do we solve this? The only thing we really need to do is HTML escape some characters and we can do that with JQuery\n\n```javascript\nfunction signGuestbook(name, comment) {\n  const review = document.createElement('p');\n  review.textContent = comment;","metadata":{"id":1618}}],["1619",{"pageContent":"```javascript\nfunction signGuestbook(name, comment) {\n  const review = document.createElement('p');\n  review.textContent = comment;\n\n  const name = document.createElement('p');\n  const bold = document.createElement('b');\n  bold.textContent = name;\n  name.appendChild(bold);\n\n  document.getElementById('comments').appendChild(name);\n  document.getElementById('comments').appendChild(review);\n}\n```\n\nAnd, with that, you have a functioning guestbook on your website!\n\nIf you have any questions or just want to say hi, feel free to shoot me an email at [yev@repl.it](mailto:yev@repl.it) and till next time!","metadata":{"id":1619}}],["1620",{"pageContent":"---\ntitle: Repl.it IRL\nauthor: Yev Barkalov\ndate: 2018-06-13T03:19:49.000Z\ncategories: events\n---\n\nOn Monday, June 11th, we had our first Repl.it Meetup and it was super awesome!\n\n![replit meetup](/public/images/blog/replit-irl-6-11-18/talking.jpg?p=np)\n\nA bunch of Replers from teachers to students came to the Repl.it office to enjoy pizza, meet the team, chat with other Replers, and also spend some time coding in a mini hackathon where the prompt was to make the most overcomplicated \"Hello World\" program possible.\n\n![coding at replit meetup](/public/images/blog/replit-irl-6-11-18/laptops.jpg?p=np)\n\nOne of the coolest projects made at the meetup was a program that would take a font, generate a separate Python+Turtle program that would draw the text \"Hello World\" in that specified font, and then he presented the resulting Python program as being the elaborate \"Hello World\" program.\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@DavidLindes/hello-replit?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nThe code for generating the \"Hello World\" program itself is [here](https://repl.it/@DavidLindes/repl-irl-gen-hello) and, if you're interested in seeing the other projects made, they were collected via commenting on our [I Built This post](https://repl.it/ibuiltthis/repls/Replit-IRL/44944).\n\nWe certainly enjoyed meeting some of our users as well as seeing everyone have a fun time hacking and we're planning for the next Repl.it IRL to be on July 11th!\n\n![replit meetup laughing](/public/images/blog/replit-irl-6-11-18/laughing.jpg?p=np)\n\nIf you're interested in putting together your own Repl.it IRL, shoot us an email at [contact@repl.it](mailto:contact@repl.it) and that's all for now!","metadata":{"id":1620}}],["1621",{"pageContent":"---\ntitle: How To Build a Website with Replit\nauthor: Yev Barkalov\ndate: 2018-06-14T03:32:26.000Z\ncategories: projects\n---\n\nWhile you can write web applications and text-based ensembles in Repl.it, sometimes it's nice to be able to just put together a simple HTML/CSS website using the same awesome editor!\n\n# Making your first website tutorial!\n\nThis is a guide for making your very first website using HTML and CSS and, if you follow the tutorial, you should end up with something that looks like this:\n\n![first website tutorial](/public/images/blog/website_workshop/final.png)\n\nThough, to succeed with this tutorial, your final website should *not* look like that. To succeed at this tutorial, you should branch off and get creative with the code you write because you won't be just making just _a_ website but _your_ website!\n\nThe first thing we're going to do is go to [https://repl.it](https://repl.it) and, where it says \"Search for a Language\", start typing \"HTML\" then select the `HTML, CSS, JS` option that comes up.\n\n![html repl selection](/public/images/blog/website_workshop/html_repl.gif)\n\nIf you have another screen come up (where your url ends with `/repls`, `/teacher`, or `/student`), you can head over to https://repl.it/languages and select the `HTML, CSS, JS` option that way.\n\nNow that the environment's loaded, it should look something like this:\n\n![html repl](/public/images/blog/website_workshop/editor.png)\n\nIf you press the run button right now with the code inside the editor, you won't see much because, well, there isn't much to display. However we can change that!\n\nIn the area that starts with `<!DOCTYPE html>`, select all the text and delete it. In the blank space, put the following code in\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>\n```\n\nNow when you press \"Run\", you should see the following come out.","metadata":{"id":1621}}],["1622",{"pageContent":"```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n  </body>\n</html>\n```\n\nNow when you press \"Run\", you should see the following come out.\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop1?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nOr, if you want to view the website in a separate tab, just click on the preview button!\n\n![website workshop preview](/public/images/blog/website_workshop/preview.gif)\n\nYou've successfully put together a \"Hello World!\" program in HTML! (Out of tradition, people start learning a new language by first learning how to say \"Hello World!\")\n\nLet's figure out what's going on in this program before we add more ~~bugs~~ features.\n\nThe very first line\n```html\n<!DOCTYPE html>\n```\n tells the browser that we want to display an html file, which it gladly does.\n\nThe following lines consist of words inside angle brackets that are called \"tags\" and are often grouped in pairs like\n```html\n<html></html>\n```\n where the first tag is referred to as the \"opening tag\" and the second is referred to as the \"closing tag\" (an element without the opening/closing pair is then a \"self-closing tag\").\n\nThe set up we have with indents and opening and closing tags is not something I came up with randomly, if you inspect the element of the page (or right click and \"View page source\"), you should see a similar structure to this\n\n![inspecting code](/public/images/blog/website_workshop/inspect.png)\n\nGetting back the code we have, at the top, we have a `<head>` tag, which you can think of as being the head of the website but we don't usually see things in here but, instead, in the `<body>` tag, which has all the juicy stuff.","metadata":{"id":1622}}],["1623",{"pageContent":"Inside our `<body>` element, we have an `<h1>` tag, which displays text. The `1` in the tag refers to the size, see what happens when you change the \"1\" to other numbers like \"2\" or \"3\". Which numbers work? Which numbers don't work? There are plenty of elements and tags that can display text so, to mix things up, let's try the `<p>` tag out!\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>I love coding!\n      I also love tiny plastic hands!</p>\n  </body>\n</html>  \n```\n\nOnce that's in, press \"Run\" and then:\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop2?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nAs you can see, simply pressing enter or line break doesn't separate the two lines so, to fix that, let's put the two lines into their own `<p>`, or paragraph, tags so that your code looks like the following.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>I love coding!</p>\n    <p>I also love tiny plastic hands!</p>\n  </body>\n</html>\n```\n\nLet's run to make sure that the two lines are separated this time...\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop3?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nThe reason we had to do that is because HTML does not change the spacing on content on the page, regardless of how many extra spaces or newlines there are.\n\nNow that we've got text rolling, let's add in some images!\n\nFirst thing you want to do is find an image that you want to put into your website. Feel free to use Google Images, Facebook, or some other site but, when you find the desired image, right click on it and select \"**Copy Image Address**\".","metadata":{"id":1623}}],["1624",{"pageContent":"Images are inserted into webpages by using the image tag, or `<img>`. This element has an attribute or inner field called \"src\" that tells the browser where to find the image. Since we're using images from the internet with some url, what that will look like is (using the actual url instead of just the text `url`)\n\n```html\n<img src=\"url\"/>\n```\n\nAs you can see, there's no `</img>` tag and I put a slash before the second angle bracket, so this is a self closing tag. The image tag is a self-closing tag because it does not actually store any content besides, with the `src` attribute, we wouldn't have anything to put inside the opening/closing tags so we're good the way it is.\n\nThe quotes are important because the url isn't actually important to the structure of the website, it's only a specific thing about the image element. For this, I want to use the beautiful face of the Zucc, which I've stored at the url https://repl.it/public/images/blog/website_workshop/zucc.png. So, with that image, my image tag will look like\n\n```html\n<img src=\"https://repl.it/public/images/blog/website_workshop/zucc.png\"/>\n```\n\nOnce you have your image tag set, put it right in before the `<h1>` tag so that you get the following result.\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop4?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nWell done, you've just used HTML in order to make a fantastic website!\n\nHowever, don't you wish it had just a bit of help looking presentable?\n\nThankfully, there is CSS, which is short of Cascading Style Sheets. CSS is a language that allows you to style the tags and elements in the webpage.\n\nWhen we were using HTML to make the website, we were using it to introduce structure and content whereas the CSS will allow us to introduce visuals and design for a more complete website.","metadata":{"id":1624}}],["1625",{"pageContent":"When we were using HTML to make the website, we were using it to introduce structure and content whereas the CSS will allow us to introduce visuals and design for a more complete website.\n\nWhat's nice is that we already have an \"index.css\" file as you can see in the file tree on the left but, if we were to put styling in there right now, nothing would change because we haven't told the browser to look at that file.\n\nTo include a CSS file, we'll need to link to it with a, you guessed it, `<link>` tag. We will be needing two attributes in this tag to include the CSS file.\n\n```html\n<link rel=\"stylesheet\" href=\"index.css\"/>\n```\n\nThe \"rel\" attribute tells the browser what the importance of this file is relative to the html which, in this case, is a stylesheet and then the \"href\" attribute tells the browser where to look for the stylesheet, which is at `index.css`.\n\nAs said before, the `<body>` element has all the juicy content but the `<head>` element is where the metadata goes, which is data that refers to other data. In this case, we're putting in CSS, which is refers to the content inside the body. And. so, we put the link tag inside the head like so\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"index.css\"/>\n  </head>\n  <body>\n    <img src=\"https://repl.it/public/images/blog/website_workshop/zucc.png\"/>\n    <h1>Hello World!</h1>\n    <p>I love coding!</p>\n    <p>I also love tiny plastic hands!</p>\n  </body>\n</html>\n```\n\nNow that the link tag is there, we can start putting things into our styles.css file!\n\nThe way css works is by statements comprised of *selector*, *property*, and *value* in the following format\n\n```css\nselector {\n  property: value;\n}\n```\n\nThe selector refers to the element or type of element you're looking to modify and then the property is the specific property of the desired element and the value is the value you're setting that property to.","metadata":{"id":1625}}],["1626",{"pageContent":"The first thing I'm going to do is change the background to be a different color. This will mean I'm taking the `body` element and modifying the `background-color` property to the value `grey` so, following that intuition, we get\n\n```css\nbody {\n  background-color: grey;\n}\n```\n\nWhen you press run, you should see the following\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop5?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nNow let's change the font of the text to something truly beautiful, Comic Sans. For this, we will be changing the \"font family\" of the elements inside the body so I'll add on the following to our CSS file.\n\n```css\nbody {\n  background-color: grey;\n  font-family: \"Comic Sans MS\", \"Comic Sans\", cursive;\n}\n```\n\nThe reason for the multiple quotes and words after the colon is because different browsers actually behave differently from each other so, by adding commas, we assure that this code will be sufficient. When run, it looks, without a doubt, gorgeous.\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop6?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nOne thing that's stuck out the entire time is that the text was the color black. Let's change the color of the \"Hello World!\" to something more lively, like perhaps green. We know that the text is an `<h1>` tag so we can target that and then style it's \"color\".\n\n```css\nh1 {\n  color: green;\n}\n```","metadata":{"id":1626}}],["1627",{"pageContent":"```css\nh1 {\n  color: green;\n}\n```\n\nBy selecting only the `<h1>` tag, you only apply whatever styles you wish to it so, if you wanted to, you could apply a \"color\" style to the `<p>` tag as well. The last thing I want to do before finishing this project is align everything in the center so that it stands out more properly. The style we're looking for is the \"text align\" style and, so, we get the following\n\n```css\nbody {\n  background-color: grey;\n  font-family: \"Comic Sans MS\", \"Comic Sans\", cursive;\n  text-align: center;\n}\n```\n\nRunning our webpage we now have\n\n<iframe height=\"500px\" width=\"100%\" src=\"https://repl.it/@yevbar/Website-Workshop7?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nHowever, if you followed the instructions in the very beginning you would have not made the exact same website as me but, rest assured, these are not the only things you can do with HTML and CSS and, as a matter of fact, this is now the point where you take your webpage to new levels and add in whatever it is you like! The internet is your friend and resource for the rest of this journey. If you are looking for sites for inspiration, here are a few:\n\n- [Eel Slap](http://eelslap.com)\n- [Alice Lee](http://byalicelee.com)\n- [Yaron Schoen](http://yaronschoen.com)\n- [Roxanne Ravago](http://www.roxanneravago.com)\n- [Pushkar Modi](http://pushkarmodi.com)","metadata":{"id":1627}}],["1628",{"pageContent":"---\ntitle: \"It's Genuary!\"\nauthor: \"Ornella Altunyan\"\ndate: 2023-01-26\ncover: https://blog.replit.com/images/genuary/cover.jpg\ncategories: events\nprofiles: ornella,tyler,ink\n---\n![images/genuary.png](https://blog.replit.com/images/genuary/cover.jpg)\n\nYou may have thought that we're in the month of January, but we're actually in the month of [**Genuary**](https://genuary.art/)! Genuary \"is an artificially generated month of time where we build code that makes beautiful things.\" \n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://genuary.art/\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #0079F2;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Visit the Official Genuary Website</a>\n</div>\n\nIf you've been a part of the Replit community for a little while, you may remember [Replit Creates](https://creates.replit.com), our very own month-long celebration of creative coding that happened in August. We don't think making beautiful things should be confined to one month, so we've decided to host a celebration of Genuary on Replit. \n\nOn the official [Genuary website](https://genuary.art/), there are [prompts](https://genuary.art/prompts) for each day of the month, so we're also celebrating on Replit! Our Replit staff have made it even easier for you to participate by creating templates for some of the prompts, which you can find below.","metadata":{"id":1628}}],["1629",{"pageContent":"We'll also be hosting a Genuary Celebration on January 31st with special guest [Saber Khan](https://www.edsaber.info/) from the [Processing Foundation](https://processingfoundation.org/)! Saber, along with Tyler and Ian from the Replit staff, will work through a Genuary prompt together and share other projects from the month-long challenge. Join us [live](https://www.youtube.com/watch?v=XZHgsFENK78) or watch on-demand anytime on our [YouTube channel](https://www.youtube.com/@replit). \n\n## Resources\n* [Generative Poetry](https://replit.com/@tyler/Genuary-Generative-Poetry?v=1)\n* [Maximalism](https://replit.com/@tyler/Genuary-Maximalism?v=1)\n* [My kid could have made that](https://replit.com/@tyler/Genuary-My-Kid-Could-Have-Made-That?v=1)\n* [More Moiré](https://replit.com/@ink/More-Moire?v=1)\n* [Sine Waves](https://replit.com/@ink/Sine-Waves?v=1)\n* [Definitely not a grid](https://replit.com/@ink/Definitely-not-a-grid?v=1)","metadata":{"id":1629}}],["1630",{"pageContent":"---\ntitle: What We Look for When We Interview\nauthor: Laima Tazmin\ndate: 2022-02-03T00:00:00.000Z\ncover: https://blog.replit.com/images/team/7-reasons.jpeg\ncategories: \n---\n\nWe’re on a mission to bring the next billion software creators online.\n\nIn 2022, to get there, we're focusing on:\n* Making Replit run fast on popular devices across the globe.\n* Helping new coders build and ship for their first time.\n\nReaching those goals requires infrastructure work and real-world experimentation, so we are growing our team!\n\n![example of the repl resource component in action](https://blog.replit.com/images/team/offsite.jpeg)\n\nIf you’re thinking of applying (or re-applying!), you might feel intimidated or nervous about our interview process. No process is perfect, but ultimately we're looking for the kinds of people who will succeed here: those with high autonomy, pragmatism, strong communication and empathy for our users.\n\nNo matter the role, here are three things you can do to stand out in interviews:\n\n### 1. Act like an owner\n\nWe keep our process minimal and ship often because everyone at Replit drives their projects to completion and owns their results. We want to hire driven people and then get out of their way.\n\nIn interviews, we often ask candidates to solve a real-world and true-to-Replit problem. That’s your chance to drive the discussion like you’re leading the project. Ask questions. Be proactive. Think about timing and scope, too.\n\nAt Replit, when we lean into the uncomfortable, we call it \"seeking pain\". When things seem hard or don't go your way, show us you won’t give up or retreat. Be someone who is incapable of being blocked. This includes knowing when you don’t know something, and asking for help.\n\n### 2. Present clearly\n\nWe’re a remote-first company, working across timezones. We strive to make every meeting, document, and demo deliver the message without wasting time.","metadata":{"id":1630}}],["1631",{"pageContent":"### 2. Present clearly\n\nWe’re a remote-first company, working across timezones. We strive to make every meeting, document, and demo deliver the message without wasting time.\n\nIn interviews, we look at how you convey your ideas, whether written or verbal. Equally, we also look at how well you listen and internalize feedback.\n\nPracticing this skill outside of interviews is a good idea. For example, I find writing things down before speaking helps me collect my thoughts and make my delivery more crisp.\n\n### 3. Have a point of view\n\nWe’re building a new kind of software creator platform. We’re inventing the playbook as we go.\n\nWe want you to have opinions of how to make the product better and users happier. We are building Replit for everyone around the world who wants to build, and we need diverse perspectives. Don’t shy away from thinking radically or differently, but make sure you explain your thought process.\n\nA great way to develop this point of view is simply by building on Replit and being part of the community. You can find us on [Twitter](https://twitter.com/Replit), [Discord](https://discord.util.repl.co/join), or build and share on [Replit Community](https://replit.com/community/all).\n\n## Growth\n\nAll this being said, we are not looking for perfection. We are looking for your potential for growth & leadership.\n\nAs a company, we promote growth through knowledge seeking and sharing. We have an education budget so you can take classes or purchase learning materials. We have book clubs. We have special guest talks. We also have fun weekly information sharing & hacking presentations, where a teammate shares something they know or get excited about to the rest of the company. We also promote growth by empowering you to lead big projects.\n\nWe bring people in and then invest in them.\n\n## Don’t Give Up","metadata":{"id":1631}}],["1632",{"pageContent":"We bring people in and then invest in them.\n\n## Don’t Give Up\n\nIf you didn’t move forward in the interview this time, don’t give up. Apply again in 6-12 months! In the meantime, build on Replit and give us product feedback. When you are passionate and determined, we take that as a positive sign.","metadata":{"id":1632}}],["1633",{"pageContent":"---\ntitle: Getting Started with Solidity on Replit\nauthor: Osinachi Chukwujama\ndate: 02-18-2022\ncover: https://blog.replit.com/images/solidity-web3.png\ncategories: projects\n---\n\nHave you ever wanted to quickly prototype an idea, reproduce a bug, or share a code demo? Maybe you just got an idea for a new smart contract that allows users to bet on soccer teams, and you want to quickly prototype this and share it with your teammates. In all of these instances, [Replit](https://replit.com) is the perfect solution. \n\nReplit is a powerful online integrated developer environment (IDE) with a simple user interface that supports more than fifty programming languages. It also supports real-time collaboration, allowing for use cases like team member onboarding or hands-on learning for students. \n\nIt integrates seamlessly with [GitHub](https://github.com), allowing you to create repositories from a repl or load a repo from GitHub without any manual setup. Replit also gives you the power to share demos through a link that can be accessed by any device, anywhere in the world.\n\nIn this article you’ll learn how to get started with [Solidity](https://docs.soliditylang.org/en/v0.8.11/) on Replit. Solidity is a statically typed, curly-braces programming language designed for developing smart contracts that run on [Ethereum](https://ethereum.org/en/). It can also be used by other blockchains for interoperability and easier migration.\n\n\n## Getting Started with Solidity on Replit\n\nIn this section, you’ll learn how to get started with Solidity on Replit and deploy your first smart contract.\n\n### Setting Up Your Account\n\nTo get started, you need to [create a Replit account](https://replit.com/signup) or [login to your existing one](https://replit.com/login). You need an account so you can create new repls and collaborate with peers.\n\n### Creating a Solidity Repl\n\nAfter setting up your account, create a new repl. \n\nFirst, select Solidity as the template and choose a title.","metadata":{"id":1633}}],["1634",{"pageContent":"### Creating a Solidity Repl\n\nAfter setting up your account, create a new repl. \n\nFirst, select Solidity as the template and choose a title.\n\n![Creating a new repl](https://i.imgur.com/eJiKQbL.png)\n\nAfter initialization, you should be presented with a `README.md` file with a preview on the side. You can review the file for additional information.\n\n![Basic view](https://i.imgur.com/8nkj7Al.png)\n\nLocate and open the `contract.sol` file. The first line in the file tells you that the source code is licensed under the [MIT License](https://opensource.org/licenses/MIT). The next line, which starts with `pragma`, specifies that the source code is written for Solidity versions 0.8.2 or lower. \n\nThis line is followed by two code blocks for smart contracts that start with the `contract` keyword. The first, `SimpleStorage`, is a basic smart contract that showcases encapsulation and data write operations in Solidity. The second, `MathTest`, is a contract that performs multiplication, but you can add other mathematical operations to it as well.\n\n```sol\n//  X-License-Identifier: MIT\npragma solidity ^0.8.2;\n\ncontract SimpleStorage {\n  uint256 storedData;\n\n  function get() public view returns (uint) {\n    return storedData;\n  }\n\n  function set(uint x) public {\n    storedData = x;\n  }\n\n  function double() public {\n    storedData *= 2;\n  }\n}\n\ncontract MathTest {\n\tfunction multiply(uint a, uint b) public pure returns (uint) {\n    return a*b;\n  }\n}\n```\n\n### Deploying Your First Smart Contract\n\nGo ahead and click the **Run** button at the top of the interface.\n\n![Repl interface before run](https://i.imgur.com/iEfLVkP.png)\n\nThe run action will compile the `contract.sol` file and prepare the contracts specified in it for deployment. It also initializes a new UI view where you can deploy individual contracts.\n\n![Result of run action](https://i.imgur.com/gyhxVz4.png)","metadata":{"id":1634}}],["1635",{"pageContent":"![Result of run action](https://i.imgur.com/gyhxVz4.png)\n\nDo you notice the **Connect wallet** button in the image above? A wallet is needed to interact with the smart contracts in the repl. It’s similar to a regular wallet, which stores fiat currency, debit, and credit cards. However, it differs in its digital nature.\n\nTechnically, a wallet is a public and private key pair that allows you to view, store, and send assets across a blockchain network. You can think of the public key of your wallet like your PayPal email address. Users can send money to you through PayPal if they know your PayPal email address.\n\nYour wallet's private key is the key used for signing transactions. It should never be made public or shared with friends. If your private key gets compromised, all the assets stored in your wallet can be wiped.\n\n[Decentralized applications (dApps)](https://www.investopedia.com/terms/d/decentralized-applications-dapps.asp) differ from regular apps in the way they handle user identity. A regular app may require your email and password or a Social Auth provider to identify you. However, a dApp only requires your wallet address. This address is a hashed version of your public key that makes it easier to share, and can be in the form of a string or QR code.\n\nWallets are usually hard to use on their own because you need to figure out the network you want to send the asset to, and use code to initialize and sign transactions. Luckily, an app like [MetaMask](https://metamask.io) exists to simplify the use of wallets on the Ethereum blockchain. \n\nMetaMask consists of a set of tools that provides a way to create wallets and authorize actions on a dApp. You can install it as a browser extension or mobile app, but to follow along with this article, you only need to install it as a browser extension. It’s supported on Chrome, Firefox, Brave, and Edge.\n\n![Supported browsers](https://i.imgur.com/7QQOrPp.png)","metadata":{"id":1635}}],["1636",{"pageContent":"![Supported browsers](https://i.imgur.com/7QQOrPp.png)\n\nAfter setting up MetaMask, proceed by clicking the **Connect wallet** button on Replit. \n\nMetaMask will prompt you to choose an account. After choosing an account and completing the setup, you need to add some Ether to the account. This will be used for deploying smart contracts on the network, which in this case is “Replit Testnet.”\n\n> The testnet can be used to test your smart contracts before they are ready to be deployed on the main Ethereum network.\n\nClick **Get 1 ETH for testing** to add 1 fake ETH. Afterwards, click the **Deploy** button. This action will deploy the `MathTest` contract to the Replit Testnet.\n\n![Deploy contract](https://i.imgur.com/AfwELlQ.png)\n\nMetaMask will prompt you to set the gas fees and confirm the contract deployment. After confirmation, the contract will be deployed on Replit Testnet and will be available for use on the UI. Go ahead and test the multiplication function with different values.\n\n![Deployed MathTest contract](https://i.imgur.com/dSb11Pk.png)\n\n### Modifying the Deployed Smart Contract\n\nTo complete the calculator, add the remaining arithmetic operation functions to the `MathTest` contract:\n\n```sol\nfunction add(uint a, uint b) public pure returns (uint) {\n    return a+b;\n}\nfunction subtract(uint a, uint b) public pure returns (uint) {\n    return a-b;\n}\nfunction divide(uint a, uint b) public pure returns (uint) {\n    return a/b;\n}\n```\n\nIf you save the file with Ctrl-S, you will notice that the UI reloads and the values are reset, but the new functions do not reflect this change. This is due to the immutable nature of smart contracts. When you make a change to a contract, you have to deploy a new contract. To fix this, click the **Deploy** button again to deploy a new version of the smart contract.","metadata":{"id":1636}}],["1637",{"pageContent":"After accepting MetaMask's prompt, you should notice two versions of the deployed contract with the most recent at the top. If you expand the deployed contract, you should see the other arithmetic operations.\n\n![Other arithmetic operations in smart contract](https://i.imgur.com/Fsgz2p0.png)\n\nTo get a better feel for the calculator, you can take some time to play around with different math problems.\n\n### Reading and Writing Data on a Smart Contract\n\nThe arithmetic functions in the `MathTest` smart contract are pure functions. This means they don't modify any data or read data from the contract. \n\nHowever, the `SimpleStorage` contract contains a state variable called `storedData`. This variable can be set by passing a number to the `set` method, doubled using the `double` method, and returned by calling the `get` method.\n\n```sol\ncontract SimpleStorage {\n  uint256 storedData;\n\n  function get() public view returns (uint) {\n    return storedData;\n  }\n\n  function set(uint x) public {\n    storedData = x;\n  }\n\n  function double() public {\n    storedData *= 2;\n  }\n}\n```\n\nYou can deploy the `SimpleStorage` contract the same way you did the `MathTest` contract. After the deployment completes, take some time to explore the three deployed functions. If you hover over the **read** and **write** icons close to the **Run** button, you’ll see the type of function each contract implements.\n\n![Function types in smart contract](https://i.imgur.com/Wa92qeg.png)\n\nThe `get` function is a view function and only accesses the state variables in a contract, which in this case is the `storedData` variable. It doesn’t require gas to run.\n\nThe other functions are non-payable functions that require gas fees to run since they modify the state of the Ethereum network.\n\n> You should only store important data on the blockchain and ensure that all variables have the required types so that you don’t waste resources.\n\n## Conclusion","metadata":{"id":1637}}],["1638",{"pageContent":"> You should only store important data on the blockchain and ensure that all variables have the required types so that you don’t waste resources.\n\n## Conclusion\n\n[Solidity](https://docs.soliditylang.org/en/v0.8.11/) is a statically typed language used for smart contract development on the Ethereum blockchain. Learning how to develop smart contracts using Solidity is an important step to developing blockchain solutions.\n\nIn this article, you were guided through how to get started with the Solidity programming language on Replit. \n\nEven though [web3](https://web3.foundation) is still in its early stages, its decentralized online ecosystem based on blockchain has a lot of potential. [Replit](https://replit.com/) reduces the time required for web3 innovation with powerful features like team collaboration and version control, which are enabled by default on Solidity projects.","metadata":{"id":1638}}],["1639",{"pageContent":"---\ntitle: \"Announcing Ghostwriter Chat: The first conversational AI programmer\"\nauthor: \"The Replit Team\"\ndate: 2023-02-15\ncover: https://blog.replit.com/images/Ghostwriter/GW_Header_Image_Final.png\ncategories: ai,product\n---\n![Header Image](https://blog.replit.com/images/Ghostwriter/GW_Header_Image_Final.png)\n\nToday, we are announcing the beta release of Ghostwriter Chat. Now with chat, a proactive debugger, and awareness of your project’s context, Ghostwriter becomes the best AI pair programmer in the world.\n\n## Building Ghostwriter\n\nLast fall, we introduced Ghostwriter, Replit’s coding AI, with Complete, Generate, Transform, and Explain Code - coding assistant tools that work with you as you code. Together they made coding faster by automating repetitive tasks and removing the drudgery of writing boilerplate code. \n\nThat was just the first step towards our master plan to create a fully autonomous pair programmer – one that feels like working with another teammate. \n\n![Replit Ghostwriter](https://blog.replit.com/images/Ghostwriter/Replit_Ghostwriter.png)\n\nGhostwriter Chat is the next phase of AI-assisted programming, helping you go from idea to product even faster. [Recent studies show](https://arxiv.org/pdf/2302.07080.pdf) that conversational generated code suggestions are accepted +50% of the time, and +75% of people had a positive experience with conversational AI. \n\nReplit is the first to bring it directly to the IDE.\n\n![Demo #1](https://blog.replit.com/images/Ghostwriter/index-file-logo-compressed.mp4)\n\n## Smart file context awareness\n\nToday, developers spend hours searching for solutions on Google and Stack Overflow, asking “How do I do _____?” and “What does this error mean?” Sometimes, you might not even know the right words to search for your problem. Regardless of what you search for, it can be hard to find a solution, and typically not possible to find one that matches the unique project you are building.","metadata":{"id":1639}}],["1640",{"pageContent":"Existing conversational AI tools can be a great substitute for search, but they run into the same issue. The AI may respond with a solution but does not know the project you are working on. You can, of course, continue to prompt the AI by pasting in more context and code, but this takes you out of the flow, slows you down, and is not a great coding experience.\n\nGhostwriter Chat lives in the IDE, and it knows about the code you’re working on. From your first prompt, Ghostwriter Chat incorporates aspects of your project to give you more accurate and relevant answers, saving you time. The extra context provided is a huge unlock. It helps your AI pair programmer do more in the IDE than any other AI code tool…like debugging errors.\n\n> “With Ghostwriter Chat, our team is the first to market with an AI assistant that is truly integrated within the IDE. The proactive debugger is a great example of how developers benefit from an AI with a holistic view of the entire software stack, including build and dependencies information, debugging data, and runtime insights.”\n> \n> — Reza Shabani, Head of Data & AI at Replit\n\n\n\n\n![Demo #2](https://blog.replit.com/images/Ghostwriter/context-logo-compressed.mp4)\n\nAt Replit, we believe that we’re still only scratching the surface when it comes to the power of Large Language Models (LLMs) and their ability to fundamentally change how software is created.\n\n> “The milestone Replit reached with Ghostwriter Chat cannot be understated. Ghostwriter Chat sets a new bar for LLMs using context to deliver utility to users. It's a bar developers will soon come to expect.”\n> \n> — Michele Catasta, LLM Expert and former head of Applied Research at Google Labs\n\n## Proactive Debugger\n\nManual debugging is a tedious process. Click run. Red error appears. Copy and paste it into a search engine. Scroll endlessly. Find an option. Paste in the editor. Hope it works in your project. Click run. See another error. Repeat.","metadata":{"id":1640}}],["1641",{"pageContent":"Every developer knows this feeling. Each time an error is cast, you are forced to exit the IDE and go somewhere else for help, whether that be Google, Stack Overflow, or even ChatGPT. Ghostwriter Chat changes this.\n\n![Demo #2](https://blog.replit.com/images/Ghostwriter/debugger-alt-logo-compressed.mp4)\n\nIn contrast, when you get an error in your console, Ghostwriter Chat will proactively reach out with suggested solutions. With the press of a button, Ghostwriter Chat generates and explains a complete code block that you can paste into your project without ever leaving the IDE, keeping you in flow.\n\nSwitching contexts is a waste of your valuable time and focus. Ghostwriter Chat frees you to spend more time building. \n\n> “As a developer and longtime Replit user, I am excited for proactive debugging which will help developers spot and fix issues quickly, and teach us how to avoid similar issues in the future. Ghostwriter Chat is an incredible tool and example of how our language and code models can be used to help improve developers’ workflows.” \n> \n> — Peter Welinder, VP of Product & Partnerships, OpenAI\n\n\n## Join the Ghostwriter Chat beta today\n\nWith Ghostwriter Chat, developers can generate, transform, refactor, explain, and debug code, with much more to come. We’re excited to continue iterating and shipping new features to create a delightful, productive, coding experience. Subscribe to Ghostwriter today and, for a limited time, get free access to the Ghostwriter Chat beta. The Docs can be found [here](https://docs.replit.com/power-ups/ghostwriter/ghostwriter-chat).\n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://replit.com/ai\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #E7713D;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;","metadata":{"id":1641}}],["1642",{"pageContent":"padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Activate Ghostwriter Chat</a>\n</div>\n\n## Team shoutouts\nThe magicians behind building this product are:\n- **Data & AI team:** Reza Shabani & Muhammad Sareini\n- **Workspace engineering:** Xiaoyi Chen\n- **Design:** Devin Halladay\n- **Product management:** Aman Mathur\n- **Product engineering:** Jonathan Unikowski","metadata":{"id":1642}}],["1643",{"pageContent":"---\ntitle: History++ - A Better Way to Do Versioning\nauthor: Giuseppe Burtini\ndate: 2022-09-15\ncover: images/history2-release/history-diff-compare.png\ncategories: eng,product\n---\n\nHave you ever had to start over on a piece of code because you overwrote something by accident? Made an edit, replaced it, and then wished you could go back?\n\nProgrammers have tools like `git` and the undo/redo stack to help them deal with challenges like this. Replit, of course, supports these things.\n\nBut, we think there's a better way. Over the last week, we rolled out the new history UI to general availability. Here's what it looks like:\n\n<video src=\"/images/history2-release/history-story.mp4\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls></video>\n\n## The Basics\nFirst, a bit of background. Whenever you make changes to your code, we add the [_operational transformations_](https://en.wikipedia.org/wiki/Operational_transformation) (OTs) to a log of activity for that file. OTs are part of our multiplayer infrastructure, they effectively store the \"intended change\" every time you edit a file. We use this for reconciling potential conflicts when many users edit a file simultaneously.\n\nIt turns out, this makes for a pretty cool approach to versioning and history. You don't have to do anything to benefit from it (it is happening anyway) and it produces a high-fidelity take on the historical states of your file, with no real mental overhead.\n\n![A pointer to the \"Repl history\" link in the workspace](images/history2-release/history-how-to-get-there.png)\n\n\n## The Utility\n\nWith version control system based history, like `git`, you have to make an active decision to create a commit, so your intermediary states get lost. Worse, for many users, the concepts and interface are difficult. We love `git`, but it is just a piece of the puzzle.","metadata":{"id":1643}}],["1644",{"pageContent":"Here, you can browse a file's history, exploring it with the same interface that you normally use, seeing every change that has been made to it, and non-destructively restore to any specific version. We aimed for this to be lightweight, low-risk, and easy to use: a complement to the tools you are already using.\n\n![A screenshot of the new history tool, showing a unit test suite written in JavaScript](images/history2-release/history-new-2.png)\n\nOnce you've found a version you think is relevant or interesting, you can toggle on compare mode to see a side-by-side diff. You can also select and copy some subset of the version or click restore to bring your file back to where it used to be.\n\n![A screenshot of a side-by-side diff-view](images/history2-release/history-diff-compare.png)\n\n## The Fun\n\nOne really cool way we've been seeing people use this is to use the playback feature -- which lets you watch your file's history like it is a movie -- to make videos of their programming sessions. \n\nWe're going to do more to support sharing and social integration of these sessions going forward, but for now, it is already a really cool way to retroactively decide to share how you were thinking.\n\nSome other neat upgrades:\n\n- **Dark mode**: Old history didn't support dark mode. Sorry. New history does though!\n- **Mobile support**: Maybe you noticed that old history was real awkward on small screens? Mobile now gets first class history support!\n- **General polish**: You can browse the file tree like you would in the rest of your Repl, interact with a particular version like it is your regular code: copy-and-paste, compare, restore, and more.","metadata":{"id":1644}}],["1645",{"pageContent":"---\ntitle: New course - How to teach yourself coding with Quizlet Founder Andrew Sutherland\nauthor: Patrick Coleman\ndate: 2020-07-29T07:00:00.000Z\ncover: https://repl.art/boothbot.png\ncategories: edu\n---\n\nLike many of you, we’ve been stuck at home, trying out new hobbies, attempting to learn new things, and anxiously waiting until life “gets back to normal.” Well, regardless of how you’ve been spending your time during COVID, if you (or a friend or family member) have been wanting to learn how to code, we want to help!\n\nAt Repl.it, it’s our mission to make programming easier and more accessible, which is why we’ve built the best programming environment for learners. We built tools to get you coding right away without needing to fuss around with complex setup. But we also make it easy to progressively uncover advanced concepts as you learn, host your code, share and collaborate with friends, and the list goes on.\n\nSo true to our mission, today we’re announcing a new course: “How to teach yourself coding.”\n\n<a href=\"https://forms.gle/ypdm5RL844whTDAB8\"><img alt=\"Teach Yourself Programming Course Registration\" src=\"https://repl.art/boothbot.png\"></a>\n\nThis one-month course will show you how to get started coding, and how to keep up your momentum when you get stuck. It will start with absolute basics about how computers and programming languages work, and get you started on making your own basic website. The course will include instruction on how to write, fix, and test your own code, how to learn from other peoples’ code, and the basics of computer security and ethics. The primary languages will be HTML/CSS/Javascript, the building blocks of the modern web. By the end of the class, you’ll have a program you built yourself, and you’ll have momentum to keep teaching yourself more.\n\n[Register now](https://forms.gle/ypdm5RL844whTDAB8) or read on for more details.","metadata":{"id":1645}}],["1646",{"pageContent":"[Register now](https://forms.gle/ypdm5RL844whTDAB8) or read on for more details.\n\nThe course will be taught by celebrity guest teacher, [Andrew Sutherland](https://asuth.com/), who is the founder of [Quizlet](https://quizlet.com/), an educational software tool serving millions of students and teachers around the world. Andrew started Quizlet at age 15, when he needed a tool to help himself learn in a high school French class. He then taught himself how to program by building lots of different websites, each one more complex than the next, until he started on Quizlet. \n\nLogistics:\n- Monday, Wednesday, Friday from 4:00 - 5:00pm pacific time\n  - Will stay on until 5:30 for discussion and extra help\n- Monday, August 3 - Friday, August 28\n  - It’s ok to join late or take time off for vacation. We’ll be releasing recorded videos to all registered attendees. And that means if you’re in a different time zone, that’s ok too!\n- Zoom + Repl multiplayer + Quizlet flashcards\n  - Details will be shared with registrations\n\nCost:\n- Free for [Hacker plan](https://repl.it/site/pricing) subscribers (now just $5/month)\n- $100 for the entire course for everyone else\n\nInterested? Excited to learn coding from a successful engineer/entrepreneur? [Register now!](https://forms.gle/ypdm5RL844whTDAB8)","metadata":{"id":1646}}],["1647",{"pageContent":"---\ntitle: Internet access for all\nauthor: Tim Chen\ndate: 2018-02-05T00:00:00.000Z\ncategories: product\n---\n\nRepl.it is quickly becoming a tool that's used in everyday programming, and our\nusers are building all sorts of amazing programs. One thing that's been missing\nfor a long time is the ability to access the internet from repls. Being able to\ncall APIs or remote servers is something programmers can't live without. That's\nwhy we're excited to announce that starting now we're openning internet access\nfor all!\n\nPreviously, only users with a paid plan could run repls with internet access,\nand everyone else would get an error. (Read more about our [pricing\nupdate](pricing-update-2018))\n\nThis means that you can now write and run repls that scrape data or access APIs,\nregardless of whether you have a paid subscription or not.  Sharing or embedding\nan internet-accessing repl will also work for those using it - so if you wanted\nto use Repl.it to write examples for your public-facing API, now you can do so\nwithout worry!\n\n# Examples of Repls that access the Internet:\n\n\n## Scraping Wikipedia Web Pages:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@timmy_i_chen/Web-Scraping-XKCD903?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Accessing Public APIs:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@timmy_i_chen/CoinBin-API-Graph?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>","metadata":{"id":1647}}],["1648",{"pageContent":"---\ntitle: Introducing Kotlin REPL\nauthor: Amjad Masad\ndate: 2017-05-18T00:00:00.000Z\ncategories: product\n---\n\nOn the heels of Google\n[announcing](https://venturebeat.com/2017/05/17/android-now-supports-the-kotlin-programming-language/)\nnative Kotlin support on Android yesterday, we thought it'd be cool to get a\n[Kotlin REPL](/languages/kotlin) up so that people can try it.\n\n![kotlin](https://i.imgur.com/gka1qrl.gif)\n\nGive it a spin [here](/languages/kotlin).\n\nIt's still in beta so let us know if you hit any bugs.","metadata":{"id":1648}}],["1649",{"pageContent":"---\ntitle: \"How to Land Your First Job as a Python Developer\"\nauthor: Galina Divakova\ndate: 2020-09-10T07:00:00.000Z\ncover: http://repl.art/laptop.png\ncategories: projects\n---\n\nPython’s status as one of the world’s most widely used programming languages is well known. Some experts rank it to be[ at par with JavaScript](https://redmonk.com/sogrady/2020/02/28/language-rankings-1-20/) in terms of simplicity, flexibility, and popularity. Its syntax is so straightforward and easy to read, custom-built software packages written in Python are the[ most shared](https://www.economist.com/graphic-detail/2018/07/26/python-is-becoming-the-worlds-most-popular-coding-language) in top online repositories. From app development to Google using the language for crawling webpages — Python is everywhere and it’s an exciting time to be a Python Developer.\n\nPython is used in top apps such as Instagram ([1 billion+](https://www.omnicoreagency.com/instagram-statistics/) users), Dropbox ([600 Million](https://dropbox.gcs-web.com/index.php/static-files/8ccb3453-e70a-430c-96db-1e20badae0d3)+ users), Reddit ([430 million](https://redditblog.com/2019/12/04/reddits-2019-year-in-review/)+ users), Facebook, Uber, etc. In GitHub,[ Python](https://github.com/python/cpython) is the[ second-most popular language](https://octoverse.github.com/2017/#:~:text=The%2520fifteen%2520most%2520popular%2520languages,programming%2520languages%25E2%2580%2594but%2520especially%2520JavaScript.&text=Python%2520replaced%2520Java%2520as%2520the,opened%2520this%2520year%2520than%2520last.) and this popularity is evident in the job market. What can you do with Python expertise? The opportunities are limitless.\n\n\n## Python developers’ salary in 2020\n\n\n\n*   According to[ Glassdoor](https://www.glassdoor.co.in/Salaries/us-python-developer-salary-SRCH_IL.0,2_IN1_KO3,19.htm), the average salary for a Python Developer is $ 76,526 per year.","metadata":{"id":1649}}],["1650",{"pageContent":"*   According to[ Glassdoor](https://www.glassdoor.co.in/Salaries/us-python-developer-salary-SRCH_IL.0,2_IN1_KO3,19.htm), the average salary for a Python Developer is $ 76,526 per year.\n*   Entry-Level Python Developer Jobs in the US can earn developers[ $79,378 per year](https://www.indeed.com/career/entry-level-software-engineer/salaries).\n*   Quality Assurance Engineers who are responsible for testing Python Software earn an average of[ $80,727 per year](https://www.indeed.com/career/quality-assurance-engineer/salaries).\n*   Even a Junior Python Developer (entry-level web developer with a specialty in Python) earns[ $78,680/year](https://www.indeed.com/salaries/junior-python-developer-Salaries)).\n*   The[ average Python developer](https://www.indeed.com/career/python-developer/salaries) salary is $119,271 per year. This amount has seen a 14% increase in the last four years.\n\nPlus, Python developers can join[ freelance portals](https://youteam.io/blog/offshore-developers-rates-in-2020-best-countries-and-best-platforms-to-hire-a-remote-development-team/) which are currently making room for ample opportunities. Developers, offshore or onshore can get hired quickly and be a part of virtual or real teams once they complete required certifications and fulfill qualifications. So, how to become a Python developer?\n\n\n## Skills Required to Get Hired as A Python Developer — How to Become a Developer\n\nSince Python is one of the simplest languages, entry-level candidates can learn fast and upgrade themselves easily. It would be good to know that the top recruiters look for Python developers who are in-tune with the most demanding technologies and specialties.\n\nHow long does it take to learn Python? A focused student can learn it in eight weeks. Of course, it’s impossible to know every single Python framework, but knowing the main ones is fast and — obviously — vital. Math skills and the ability to design software that can easily perform large-scale computations always help.","metadata":{"id":1650}}],["1651",{"pageContent":"What should a Python developer know? Overall, the key skills you need can be graded in terms of importance:\n\n\n\n### I. Most Important – Core Python, Python frameworks, and Python libraries\n\n#### *Core Python*\n\n\nA clear understanding of Core Python will ultimately be the deciding factor in a developer’s ability to finish projects. Thankfully, it is not hard to master this general-purpose programming language that’s considered very “developer-friendly”. To know core Python, the developer must be familiar with each module. Knowing the distinctions between Python 2 and 3, for instance, is very important. However, these distinctions are not a very problematic thing to learn. What’s most important is to have a clear understanding of Python’s data structures and the fundamental concepts. The ‘must know’ list of core Python concepts includes iterators, generators, exception handling, realizing the inner-workings of sets or dicts, basic file handling concepts, OOPs concepts, variables, and data types.\n\n\n#### *Python Frameworks*\n\nKnowledge of Python frameworks is an absolute must for anyone who wants to get involved in app development. These frameworks automate the application of most-used solutions, allowing Python developers to avoid the hassle of dealing with routine elements. However, it’s impossible for a Python developer to be well-versed in all frameworks. At first, it’s best to focus on learning the most popular frameworks such as Sanic, Flask, CherryPy, TurboGears, Pyramid, and Django.\n\n\n#### *Python Libraries*\n\nA Python developer who has a mastery over the [most used Python libraries](https://pythontips.com/2013/07/30/20-python-libraries-you-cant-live-without/) will be more efficient in his role, executing tasks and projects way quicker. Study the libraries after assessing the scope of the task. Above all, Python is a programming language that has a large supporter base. You can find many resources if you search at the right online repositories.","metadata":{"id":1651}}],["1652",{"pageContent":"### II. Very Important – Front-End Knowledge, MySQL, ORM Libraries\n\n\n#### *Basic Front-End Knowledge (JavaScript, HTML, CSS) [For Web Projects]*\n\nPython developers working in development teams will have to cooperate with front-end developers.\n\nWithout basic front-end knowledge, Python developers usually cannot understand the client-side of projects. Knowing basic project details such as how the application looks, whether the front-end is easy to use for clients, possible front-end limitations, etc. is very important for a Python Developer.\n\nOf course, when you take up positions in top-quality software houses, you’ll have team leads, dedicated project managers, and other professionals supervising the workflow and sharing their experience. But if your goal is to be a valuable member of the team, some understanding of front-end operations always helps.\n\n\n#### *MySQL [for Data Science]*\n\nAlthough a clear understanding of Core Python is the most important thing, knowledge of SQL plays a decisive factor, especially for people looking for jobs in data science.\n\nMost of the leading tech companies (Amazon, Google, etc.) use SQL to query data and analyze the performances of specific frameworks.\n\nSQL is a trusted field and its use is ubiquitous in tech. Every project involves the use of either SQL or SQL derivative.\n\nFortunately, many developers start their path in Data Science from learning SQL and then moving to Python, so we believe this should not be an issue for a Python developer who only starts their career.\n\nBy the way, SQL is the [most mentioned skill](https://www.dataquest.io/blog/why-sql-is-the-most-important-language-to-learn/)) in recruitment ads.\n\n\n#### *Knowledge of ORM libraries*\n\nKnowledge of ORM Libraries (Object Relational Mapper) is vital for developers looking to master the database creation process. Familiarity with ORM Libraries will make it much easier and faster to make database schema changes. Overall, it’s a skill that looks good on any Python Developer’s CV.","metadata":{"id":1652}}],["1653",{"pageContent":"### III. Important Skills – Version Control and Soft Skills\n\n\n#### *Version Control*\n\nLife can be difficult for a Python Developer who can’t keep track of all the changes he makes to a file. Given this, version control systems enable software developers to make changes to source code as required. Git is the most popular system developed by Linus Torvalds in 2005. Aspiring developers can go through the [Git tutorial](https://www.udemy.com/course/git-master-git-version-control-system) to learn about version control tools and the basics of Git including terminologies, installation fundamentals, and more.\n\n\n#### *Soft skills*\n\nLast but not least, all future Python Developers must obtain soft skills that help them become efficient team players and vital members of the organization. Skills such as emotional intelligence, cooperation skills, proactive mindset, ability to use feedback, adaptability, work ethic, and listening skills are all very important. These are the basic skills that are required for any kind of software developer.\n\n\n## What Roles Can A Python Developer Apply For?\n\nAs per the [Developer Survey](https://insights.stackoverflow.com/survey/2018/#technology) by Stack Overflow, the most in-demand technology of 2018-2019 was Python. The numerous job roles and openings are still on the market despite the global pandemic. Some of the most common ones include:\n\n\n### Programming Developer\n\nThe ‘Python developer’ job title is the most obvious one for all aspirants. In this role, you can expect to create and optimize data algorithms, resolve data analytics issues, apply data protection programs, and most importantly write efficient code. The final goal for every Python developer is to take part in creating unique valuable products for their employer company.\n\nThe average Python developer salary is [$112,880 per year](https://www.indeed.com/salaries/python-Salaries).\n\n(here and in the following examples we use information about the US market)\n\n\n### Python Web Developer","metadata":{"id":1653}}],["1654",{"pageContent":"(here and in the following examples we use information about the US market)\n\n\n### Python Web Developer\n\nPython web developers manage the server-related aspects of a project. A clear understanding of HTML, CSS, and other web frameworks that are necessary for web development is essential. Applicants must have the aptitude to compose nuanced Python scripts using Python Libraries.\n\nThe average salary of a Python web developer makes up [$119,271](https://www.indeed.com/salaries/python-Salaries) per year.\n\n\n### Data Analyst\n\nData analysts need to be experts in Mathematics, Statistics, Data Management, and effortlessly use Python Libraries (e.g., Matplotlib) to manipulate data for specific tasks.\n\nThe average salary of a data analyst is [$75,051per year](https://www.indeed.com/career/data-scientist/salaries).\n\n\n### Data Scientist\n\nMultiple companies are in the market for data scientists who can use Python libraries to assess massive datasets. The skills a data scientist must possess include data evaluation, data manipulation, Machine Learning, etc. Overall these jobs are intended for experts who can comprehensively help to develop companies by carefully using company data.\n\nThe average salary of a data scientist makes up [$121,606 per year](https://www.indeed.com/career/data-scientist/salaries).\n\n\n### AI Engineer \n\nAspiring AI engineers have to master algorithms such as angle drop and regression examination. They also have to build expectation models and help the machines carry out very specific tasks.\n\nThe average salary of an AI engineer is [$102,033 per year](https://www.indeed.com/salaries/artificial-intelligence-engineer-Salaries).\n\n\n### Simulated Intelligence Engineer \n\nSimilar to AI engineers, Simulated Intelligence Engineers need to be masters of basic Data Science and Modeling concepts.\n\nSome job roles also require an understanding of Deep Learning algorithms and Neural Network Programming.","metadata":{"id":1654}}],["1655",{"pageContent":"Some job roles also require an understanding of Deep Learning algorithms and Neural Network Programming.\n\nA Simulated Intelligence Engineer makes a product capable of thinking and introspection using techniques such as Natural Language Preparing. Another name for this role is Business Intelligence Developer.\n\n\n### Automation Testing Engineer\n\nAutomation engineers classify, develop, and implement automation scripts. They have to constantly create testing frameworks for automation purposes.\n\nThe average salary of an automation testing engineer [$89,721 per year](https://www.indeed.com/salaries/python-tester-Salaries).\n\n\n### Quality Assurance Engineer\n\nQuality Assurance Engineers create software test plans, execute automation scripts, track software bugs, and supervise debugging processes.\n\nThe average salary of a QA engineer is [$62,503 per year](https://www.indeed.com/salaries/python-tester-Salaries#:~:text=The%2520average%2520salary%2520for%2520%2522python,yearly%2520for%2520Software%2520Test%2520Engineer.).\n\n\n## Where Can You Find Python Developer Jobs?\n\nAccording to[ recent studies](https://youteam.io/blog/how-to-hire-a-team-of-developers-without-needing-a-pesky-recruiter/), the digital workforce needs over a million recruits by 2023. So, job opportunities are there, applicants just need to look in the right places. Some useful tactics include:\n\n\n### 1. Specialized job websites\n\n\n    Checking the top websites for Python job listings on websites such as[ Glassdoor](https://www.glassdoor.com/Explore/top-python-developer-companies_IO.4,20.htm). Other top websites include:\n\n\n\n*   [Remote Python](https://www.remotepython.com/)\n*   [PythonJobs.com](https://www.pythonjobs.com/)\n*   [The Free Python Job Board](https://pythonjobs.github.io/)\n*   [Pycoder’s Jobs](https://www.pythonjobshq.com/)\n*   [Python Software Foundation Jobs Board](https://www.python.org/jobs/)","metadata":{"id":1655}}],["1656",{"pageContent":"*   [The Free Python Job Board](https://pythonjobs.github.io/)\n*   [Pycoder’s Jobs](https://www.pythonjobshq.com/)\n*   [Python Software Foundation Jobs Board](https://www.python.org/jobs/)\n\nYou can find job openings and internship opportunities on any one of these websites on a regular basis. Note the list of companies you’d prefer to work for and check their posts on a day to day basis.\n\n\n### 2. Freelance Portals\n\nYou can search for Python developer jobs on various freelance portals. This can be a great tactic for those who are only starting their career — acquiring their first work experience by doing freelance projects.\n\n\n\n*   [Upwork](https://upwork.com/?dfh_uid=1)\n*   [People Per Hour](https://peopleperhour.com/?dfh_uid=1)\n*   <span style=\"text-decoration:underline;\">Freelancer.com</span>\n*   [Top 10 Freelance Sites for Python Devs](https://recruitment.com/recommendations/hire-python-developers)\n\nBegin exploring these portals to get a rough estimate of salaries, job requirements, etc. If you can multitask and manage profiles on multiple freelance platforms, you can access the finest jobs and work remotely at your own will.\n\n\n### 3. Job Boards\n\nCheck for regular listings on platforms such as GitHub Jobs, Angel.co, Product Hunt, etc.\n\n\n### 4. Event Communities\n\nEvents, where Python developers meet, are the best places to network and find out about market opportunities. Some of the must-visit Python community events include:\n\n\n\n*   [PyCon](https://ua.pycon.org/)\n*   [DjangoCon Europe](https://2020.djangocon.eu/)\n*   [AnacondaCON](https://anacondacon.io/)\n*   [PyCon UK](https://2020.pyconuk.org/)\n*   <span style=\"text-decoration:underline;\">meetup.com</span>","metadata":{"id":1656}}],["1657",{"pageContent":"*   [DjangoCon Europe](https://2020.djangocon.eu/)\n*   [AnacondaCON](https://anacondacon.io/)\n*   [PyCon UK](https://2020.pyconuk.org/)\n*   <span style=\"text-decoration:underline;\">meetup.com</span>\n\nIndulge in networking at these events to link up with fellow Python developers and meet with potential recruiters. Taking part in hackathons is also a great way of exploring new technologies. You can use these events to network and learn skills that can be useful for your project. Check out [Hackathon.io](https://www.hackathon.io/events) for the latest updates on Python hackathons.\n\n\n### 5. Becoming a Member of Online Developer Communities\n\nWebsites that boost Python developer communities like Reddit or GitHub are also places where recruiters post job openings. Sometimes hiring managers (tech people) are checking out posts made by skilled Python developers. If your code sample pleases a potential employer, you can get hired on the spot!\n\n\n## How to Land a Job as a Python Developer\n\n\n### Creating a Flawless CV\n\nNow that you know where to find the best Python developer jobs, it’s time to start drafting your official resume. Make sure your CV:\n\n\n\n*   Highlights your best qualities.\n*   Has a standard chronological format. This format is easily readable and consists of different sections that you can appropriately title and expand. Choose a [professional resume template](https://zety.com/blog/chronological-resume) that has the correct font requirements (11–12pt is perfectly readable).\n*   Is in the correct format that the employers asked for in the posting.\n*   Has a well-defined header, resume summary, and your contact details.\n*   Has a separate experience section explaining your professional experience (focus on listing achievements, not processes).\n*   Has a separate section for education details and one for details about your professional skills as a Python developer.","metadata":{"id":1657}}],["1658",{"pageContent":"*   Has a separate section for education details and one for details about your professional skills as a Python developer.\n\nYou can add additional details such as extra-curricular activities (e.g., a hackathon win), interests, etc. Keep the information structured and to the point, no matter where you’re uploading it to — a corporate website or one of the freelance hiring platforms.\n\n\n### Soft Skills Assessment\n\nBe it a video call or a face to face meetings, most first meetings in the tech industry involve the interviewer getting a sense of the candidate as a person, cooperative skills, communication skills, and basic problem-solving skills. Let your CV do your bidding. Answer as you’re asked and demonstrate qualities such as reliability or flexibility in dealing with different aspects of Python programming. What should a Python developer know before entering a soft skill assessment? To stay ahead of fellow applicants, use this [remote developer interview tool](https://youteam.io/remote-developer-interview-tool), and answer the most asked questions in these interviews.\n\n\n### [Hard Skills Verification](https://youteam.io/blog/how-to-vet-tech-candidates-especially-when-hiring-remotely-best-practices-in-2020/)\n\nThe conventional hard skills verification process consists of:\n\n\n#### Office-Based Test Assignments\n\nApplicants get a small task that they need to fulfill in real-time. These office tests act as platforms where candidates can demonstrate problem-solving skills, time management, and adaptability skills. Follow this [test assignment guide](https://youteam.io/blog/a-test-code-assignment-with-step-by-step-solution-for-a-python-developer/) to know what you can expect from the test assignment.\n\nToday, in the world suffering from the global pandemic, you'll probably get your test assignment online, which must relieve you of some on-site pressure. If you think you wouldn't feel comfortable during an on-site interview, now is a great time to start searching for a job.\n\n\n#### Hackathons","metadata":{"id":1658}}],["1659",{"pageContent":"#### Hackathons\n\nAgain, probably irrelevant nowadays but big corporations testing plenty of applicants sometimes host hackathons (used mostly while interviewing for entry-level Python developer jobs) so that quick performance evaluation can be made in a short time. The top performers get hired. This method is perfect for testing specific skills such as database expertise.\n\n\n#### Online coding tools\n\nNowadays, most companies use online coding interview tools. These tools are typically used to test remote applicants for Python developer jobs. The candidate’s tech stack, on-field skills, professional experience, etc. can all be tested on these coding assessment platforms. The most commonly used test platforms include:\n\n*   [Codility](https://www.codility.com/)\n*   [HackerRank](https://www.hackerrank.com/)\n*   [ChallengeRocket](https://challengerocket.com/)\n*   [CodinGame](https://www.codingame.com/)\n*   [Coderbyte](https://coderbyte.com/)\n*   [Codeassess](https://www.codeassess.com/)\n\nStart your research on these platforms long before you start applying for developer jobs. Learn about the most [common coding errors](https://blog.repl.it/beginner-python-errors-career-karma) you need to avoid in order to land the top jobs.\n\n\n## How to Get Extra Points in Your Competition for a Python Developer Job","metadata":{"id":1659}}],["1660",{"pageContent":"## How to Get Extra Points in Your Competition for a Python Developer Job\n\nUnfortunately, there are no secret ways of getting ‘free extra points’ in your journey as a Python developer. The only secrets are passion and practice. Practice coding, share what you’ve learned with other Python programmers on online communities, build an online presence with a blog, and share your knowledge. One of the best things about becoming a Python developer is the online community of helpful pros who are always ready to interact and share knowledge. Use these platforms to find access to small projects. Work on them (even if it’s for free) to hone your skills. Use websites such as [https://repl.it/](https://repl.it/) where you can quickly test your code. The website is usable on web browsers and mobile phones. It’s the perfect place to practice and you don’t even have to download an IDE or a compiler.\n\n[Here you can find a sample of a task](https://youteam.io/blog/a-test-code-assignment-with-step-by-step-solution-for-a-python-developer/) you could get in an interview as a Python developer. You may also search for other samples on the web.\n\nAre you ready to write code in a language that is ever-growing both in terms of user base and capabilities? Enhance your development environment and start practicing this ‘_lingua franca’_ of coding. As far as career opportunities are concerned, they’re limitless! Good luck!\n\n## **Author**\n\nGalina Divakova\n\nGalina is Head of Marketing at [YouTeam](http://youteam.io/), a Y Combinator-backed marketplace for hiring remote software developers.\n\n[Linkedin](https://www.linkedin.com/in/galinadi/) |[ Twitter](https://twitter.com/galyna_divakova) | [Facebook](https://www.linkedin.com/in/galinadi/)","metadata":{"id":1660}}],["1661",{"pageContent":"---\ntitle: Productizing Large Language Models\nauthor: Amjad Masad, Samip Dahal, Luis Héctor Chávez\ndate: 2022-09-21\ncover: https://blog.replit.com/images/ai/ghost.png\ncategories: product,ai\n---\n\\\nLarge Language Models (LLMs) are known for their near-magical ability to learn from very few examples -- as little as zero -- to create language wonders. LLMs can chat, write poetry, write code, and even do basic [arithmetic](https://arxiv.org/abs/2205.11916). However, the same properties that make LLMs magical also make them challenging from an engineering perspective.\n\nAt Replit we have deployed transformer-based language models of all sizes: ~100m parameter models for search and spam, 1-10B models for a code autocomplete product we call [GhostWriter](https://blog.replit.com/ai), and 100B+ models for features that require a higher reasoning ability. In this post we'll talk about what we've learned about building and hosting large language models.\n\n<video src=\"https://blog.replit.com/images/ai/aimode.mp4\"  class=\"css-3qjkrt\" autoplay muted playsinline loop controls></video>\n\n## Nonsense\n\nAny sufficiently advanced bullshit is indistinguishable from intelligence, or so the LLM thought. LLMs are super suggestible -- in fact, the primary way to interact with LLMs is via [\"prompting.\"](https://en.wikipedia.org/wiki/Prompt_engineering) Basically, you give the LLM a string of text and it generates a response, mostly in text form although some models can also generate audio or even images. The problem is, you can prompt the LLM with nonsense and it will generate nonsense. Garbage in, garbage out. Also, LLMs tend to get stuck in loops, repeating the same thing over and over again, since they have a limited attention span when dealing with some novel scenarios that were not present during training.","metadata":{"id":1661}}],["1662",{"pageContent":"Luckily, there are some controls to make these two problems more manageable. The first is tweaking the so called [\"temperature\"](https://nlp.stanford.edu/blog/maximum-likelihood-decoding-with-rnns-the-good-the-bad-and-the-ugly/) of the model. This is a parameter that affects the likelihood of the model picking a less likely word. The higher the temperature, the more random the output. The lower the temperature, the more likely the model is to generate words that are similar to the words it has seen before. Setting the temperature to zero makes the LLM more predictable.\n\nThe second control is the frequency penalty. This parameter affects the likelihood of the model picking a word that it has seen a lot. The higher the frequency penalty, the less likely the model is to generate words that it has previously generated. The lower the frequency penalty, the more likely the model is to generate words that it has previously generated.\n\nHowever, both parameters, up to a certain point, can start degrading the model's performance. For some applications, you'd want the model to be more \"creative\" therefore, a zero temperature doesn't cut it. And for other apps, repetition can make sense, for example, when the model is writing poetry or code.\n\nWe've found a few other methods to be helpful when filtering out nonsense:\n* Cycle detection: When the model goes into an obvious loop and starts repeating itself, we can simply truncate the output or intervene somehow via the prompt to get a different completion.\n* Sampling: We can sample the output of the model at different \"temperatures\" and pick the one that makes the most sense. This is especially helpful when the model is stuck at a local minimum.\n* Layering another model: We can use an LLM to generate a set of candidates and then use a different model to pick the best one. This is helpful when the LLM is generating multiple candidates that are all valid but you only want one.","metadata":{"id":1662}}],["1663",{"pageContent":"* Training to break the loop: Repetitions are often self-reinforcing (i.e. the probability of repetitions increase with no. of repetitions). We can train LLMs to break such loop of repetitions by [penalizing repetitions](https://arxiv.org/pdf/2206.02369v1.pdf) on synthetic data.\n* Finetuning on user feedback: We can use feedback from users to finetune the model to better match the user's preferences.\n\n## Quality Assurance\n\nWhen iterating on the model it's really easy to accidentally regress on performance, and unlike classical programs where input/output are largely determinstic, it's really hard to tell when an LLM has regressed. We've found it helpful to run the model against a standard benchmark dataset and track the performance on that benchmark over time. Currently, we are using OpenAI's [HumanEval](https://github.com/openai/human-eval) benchmark to evaluate quality of the model over time. We also track how often the model gets stuck in loops and how often it produces nonsense.\n\nWe also use A/B testing to compare different models and make sure that the changes we're making are actually improvements. \n\n## Performance\n\nLarge Language Model means billions (approaching trillions) of parameters, which means they are slow to train and slow to run. We've found it helpful to use a combination of techniques to speed up both training and inference. Here is what we did for GhostWriter:\n\n* [FasterTransformer](https://github.com/NVIDIA/FasterTransformer):  We've found that the transformer architecture used by most LLMs can be made faster without sacrificing too much accuracy by making some changes to the architecture. FasterTransformer, for example, sports a highly-optimized decoder blocks with the possibility of extending to distributed, multi-GPU fashion with tensor or pipeline parallelism. Their computational and memory optimizations make inference much faster than popular frameworks like PyTorch or Tensorflow, especially when running on NVIDIA hardware.","metadata":{"id":1663}}],["1664",{"pageContent":"* Knowledge Distillation: We can use a smaller model to \"distill\" the knowledge of a larger model. This gives us a model that is both faster and more accurate. For example see [DistilBERT](https://github.com/huggingface/transformers/tree/main/examples/research_projects/distillation).\n* Quantization:  We can use techniques like [quantization](https://en.wikipedia.org/wiki/Quantization_(signal_processing)) to compress the model by using different data types to represent all or a subset of the model parameters and input activations (float32 -> float16 or even int8) and make it simultaneously smaller and faster without sacrificing too much accuracy.\n\n## Prompt engineering\n\nOne way to think about running the model is like running your Apache webserver -- once you've configured it correctly, you still have to write the business logic of your application. \n\nThe same thing goes for LLMs, the prompt is what defines your application. And prompts are not just static things you write and forget about:\n\n* Prompts change with context: For GhostWriter, prompts consisted of telling the model what language we're using, what file we're on, and the file's content up to the cursor. But that's only scratching the surface, it's been shown that you can generate prompts that capture the context of the [entire project](https://arxiv.org/abs/2206.12839).\n* Track prompts in version control as you would code: Prompts are essentially natural language \"code,\" so it makes sense to use the same tools for storing, versioning, and diffing them.\n* Prompts can be generated by another model: We've found that you can chain models to create better prompts. In one example, we used one model to clean up the prompt before passing it into the generative model.\n\n## Deployment & monitoring","metadata":{"id":1664}}],["1665",{"pageContent":"## Deployment & monitoring\n\nWe run GhostWriter on GPUs in the cloud. Those GPUs are expensive, so we want to be able to have each of those GPUs serve as many requests as possible. But realistically we can never achieve 100% utilization of those GPUs: if we model the inference system as a queue, and that queue is already going as fast as it possibly can, whenever there is _any_ change in the arrival rate of requests, the queue would start growing unboundedly since the rate of departure of responses cannot go any faster. This means that requests would start timing out and user experience would degrade very quickly. In order to mitigate this, we currently are targeting for 70-80% utilization of the GPUs to leave a small buffer for small variations in request rate, and also allow for the system to spin up new GPUs when we're running close to the limit. This leads us to be very close to a cost and latency optimum simultaneously.\n\nWe already had experience with running most of our other services in [Kubernetes](https://kubernetes.io/), so it was very easy to create one more container to run GhostWriter in it. During our initial ramp-up we are running the GhostWriter inference servers geographically closer to where our servers are running (in the US). When we continue with our push to have more [worldwide Repls](https://blog.replit.com/geo-part-1-controlplane), we will start pushing the servers closer to where our users are, reducing latency by up to 200ms in the very worst case (Delhi-US roundtrip).\n\nAnd of course all of this wouldn't really matter unless we knew the health of the system. We have monitoring on both the server and client sides in addition to system-level monitoring in Kubernetes for latency, availability, request rates, and other leading indicators of health.","metadata":{"id":1665}}],["1666",{"pageContent":"To help mesure the quality of each model, we also store what suggestions were accepted and rejected, and track when GhostWriter completed something or the user typed it. This data is then used for fine-tuning and further training.\n\n<script>\n  window.addEventListener('load', videoScroll);\nwindow.addEventListener('scroll', videoScroll);\n\nfunction videoScroll() {\n\n  if ( document.querySelectorAll('video[autoplay]').length > 0) {\n    var windowHeight = window.innerHeight,\n        videoEl = document.querySelectorAll('video[autoplay]');\n\n    for (var i = 0; i < videoEl.length; i++) {\n\n      var thisVideoEl = videoEl[i],\n          videoHeight = thisVideoEl.clientHeight,\n          videoClientRect = thisVideoEl.getBoundingClientRect().top;\n\n      if ( videoClientRect <= ( (windowHeight) - (videoHeight*.5) ) && videoClientRect >= ( 0 - ( videoHeight*.5 ) ) ) {\n        thisVideoEl.play();\n      } else {\n        thisVideoEl.pause();\n      }\n\n    }\n  }\n\n}\n</script>","metadata":{"id":1666}}],["1667",{"pageContent":"---\ntitle: Previewing Markdown in Repls\nauthor: Tim Chen\ndate: 2019-08-02T00:42:33.000Z\ncategories: product\n---\n\nWhen our community members want to provide instructions within a repl,\nthe most common pattern we've seen is in a `.txt` file, or as a code\ncomment. Users quickly figured out that while they could make markdown\nfiles, there was no way to render it in a more readable format. Today,\nthat changes. We're happy to announce that you can now preview markdown\nin repls!\n\n# How to get Markdown Previews\n\nIt's really simple to use - simply create a markdown file (a file with an\n`.md` extension) and viola - you'll see a button to edit and preview in\nthe top right corner of the editor.\n\nFeel free to edit your markdown file, and toggle back and forth between\npreview mode and edit mode as much as you like!\n\n![markdown preview](https://blog-images.amasad.repl.co/markdown-preview.gif)\n\nOpening a markdown file will show the preview by default, so you can use\nthis as a README for your repl, or to provide special instructions.\n\n# Features\n\nAside from being able to preview markdown, we also support full syntax\nhighlighting for code blocks. It will be highlighted in the same theme\nas the editor itself.\n\nYou can also copy code blocks by clicking on the copy icon in the\ntop-right corner of code blocks.\n\nWe have ideas for more features, but we'd also like to hear from you.\nRead on for more!\n\n# Next Steps\n\nRight now, markdown previews are only supported on Monaco, which we use\nfor non-mobile platforms. Mobile support is coming soon.\n\nSince it's built right into the editor, we have ambitious ideas for how\nit can be better integrated with the rest of the Repl.it experience.\nOne such example of a feature we want to see is the ability to import\na code block directly into a file. This would be especially helpful for\nusing markdown as tutorial instructions.\n\nWe'd also like for files named `README.md` to be the default selected\nfile, if it exists, so users landing on your repl will see your README\nfirst.","metadata":{"id":1667}}],["1668",{"pageContent":"using markdown as tutorial instructions.\n\nWe'd also like for files named `README.md` to be the default selected\nfile, if it exists, so users landing on your repl will see your README\nfirst.\n\nGot more ideas for us? We'd love to hear them over on our\n[feedback channels](/feedback)!","metadata":{"id":1668}}],["1669",{"pageContent":"---\ntitle: Replit Mobile App\nauthor: Laima Tazmin, Abdel Rahman Elleithy, Matthew Chen, Ian Kirkpatrick\ndate: 2022-10-19T08:00:00.000Z\ncover: https://blog.repl.it/images/mobile-app/mobile-banner.jpg\ncategories: news,eng,product\n---\n![mobile art](https://blog.replit.com/images/mobileart.jpg)\n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://replit.com/mobile\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #0079F2;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Download the App</a>\n</div>\n\n\nIntroducing the Replit mobile app for [Android](https://play.google.com/store/apps/details?id=com.replit.app) and [iOS](https://apps.apple.com/us/app/replit-code-anything/id1614022293).\n\nToday, we’re excited to announce the launch of the Replit mobile app. With the mobile app, you can code anything, anywhere. Build more, type less.\n\n<style>\n  .video-container {\n  position: relative;\n  padding-bottom: 56.25%;\n}\n\n.video-container iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/Cmq3TrS3ccU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n\nUse the app to write a Python bot, build and launch your personal website, or run any program you can imagine with the [power of Nix](https://blog.replit.com/powered-by-nix), which gives access to millions of open-source packages. With Replit, you instantly have a powerful computer in your pocket.\n\nWe're on a mission to turn smartphones from devices optimized for consumption into powerful creative tools.","metadata":{"id":1669}}],["1670",{"pageContent":"We're on a mission to turn smartphones from devices optimized for consumption into powerful creative tools.\n\nBefore we had a dedicated app, we saw increasing global mobile usage of our browser-based code editor. Last year, [we invested in making the mobile web IDE](https://blog.replit.com/mobile-v2) more reliable and performant. Our users noticed - it doubled our retention. Today, nearly 20% of Replit's users build on their mobile devices.\n\nYet we heard again and again from our community that they wanted a native mobile app. Building natively would allow us to expand into device-specific capabilities, work better and faster in spotty network conditions around the world, and push the limits of interaction design.\n\nUnlike other types of mobile creation apps, you can create anything with code on Replit. With phones, we can empower billions of people to build, learn, and earn from software creation.\n\n## Features\n\nWe focused the new Replit mobile app on creation with an all-new code editing experience.\n\nWhen you open the app, we take you straight into your current projects, or Repls. In the second tab, **Create**, you’ll find a rich world of languages and starter templates to kick off your next coding project. \n\nOur ultimate goal: help you build more and type less. \n\nHere are some of the ways we’re making coding on mobile devices easier: \n\n### Navigate with the coding joystick\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/joystick_demo.mp4\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nOn your phone, it can be frustrating to move the cursor and select text, let alone code. We’ve built a native control interface that lets you navigate code faster. It's called the joystick.  \n\nDrag the joystick up & down to move through code quickly. Swipe left & right (or tap the arrows on each side) to nudge the cursor exactly where you need it.","metadata":{"id":1670}}],["1671",{"pageContent":"Drag the joystick up & down to move through code quickly. Swipe left & right (or tap the arrows on each side) to nudge the cursor exactly where you need it.\n\nEven better, tap the joystick to select the current token, tap again to select a whole line, then tap again to expand further.\n\n### Edit with smart suggestions and common actions\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/suggestions_demo.mp4?x=1\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nAuto-completion is critical to coding. For the mobile app, we built a local-first auto-completion engine that is super fast, with a library of language-specific snippets tucked behind the keyboard. We currently support Python, HTML, CSS, JS, and Typescript, with more to come.\n\nThe coding keyboard toolbar also offers common actions, like undo & redo, indent, and toggle comment. Plus, we've added a clipboard manager for copy & pasting code between repls.\n\n### Turn ideas into code with Ghostwriter\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/ghostwriter_demo.mp4?x=1\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nWe announced [Ghostwriter](https://blog.replit.com/ai), your personal AI pair programmer, a few months ago. It's available on the Replit mobile app to early testers with a full launch coming later this month.\n\n### Make the workspace yours\n\n<video width=\"375\" height=\"auto\" class=\"css-3qjkrt\" autoplay muted playsinline loop controls src=\"https://blog.repl.it/images/mobile-app/tabs_demo.mp4\">\nSorry, your browser doesn’t support HTML5 media.\n</video>\n\nWe recently [announced tabs on desktop](https://blog.replit.com/tabs). The same flexible system powers tabs on mobile too! \n\nOpen multiple files at once, switch between them easily, and access more tools without losing your place in code.\n\n## Challenges","metadata":{"id":1671}}],["1672",{"pageContent":"Open multiple files at once, switch between them easily, and access more tools without losing your place in code.\n\n## Challenges\n\nWhile building, we faced hard but interesting challenges at the core of interaction design. \n\nHow do we keep the user interface simple, elegant & performant, while surfacing the flexible & powerful capabilities of Replit? \n\nHow do we use screen space judiciously, and handle cross-platform differences with ease?\n\n### Behind smart suggestions\n\nOne area we paid special attention to is how we architect and surface auto-completion.\n\nCoding is hard on a mobile phone. Typing variable names, for example, is tricky on a mobile keyboard. The Replit app comes to the rescue by parsing your code and using it to generate suggestions.\n\nTo be useful, that parsing has to keep up with every keystroke. That's not easy - people type fast! That means we need to do the parsing right on your device, rather than consult a remote server. The Replit app uses the [Lezer Parser System](https://lezer.codemirror.net) from CodeMirror to do snappy incremental parsing in milliseconds. This lets us offer a smart keyboard that will grow increasingly helpful with time.\n\nIn some cases, we produce many suggestions, so we have a scoring system to ensure that we feature the most useful and frequently-used suggestions.\n\nIf you type the letter \"i\" in your Python Repl, you might be offered these auto-completion suggestions:\n\n* An `import` snippet that helps you fill in the module to import.\n* `if`, `if...else`, or `if...elif...else` snippets. These snippets include syntax, smart whitespace, etc.\n* `index`, a variable you've defined elsewhere that is in scope.\n\nWe offer a wide variety of suggestions that reflect the language or file format of your file and your content.\n\n## What’s next","metadata":{"id":1672}}],["1673",{"pageContent":"* `index`, a variable you've defined elsewhere that is in scope.\n\nWe offer a wide variety of suggestions that reflect the language or file format of your file and your content.\n\n## What’s next\n\nIf you’re familiar with Replit on web, you’ll notice that the app doesn’t have the same community features. Over the coming months, we’ll be rolling out more social and collaboration features, designed with mobile experiences and creation in mind.\n\nWe've only just scratched the surface on the core editing features we envisioned for the app. We’ll continue to ship improvements in code navigation and smart suggestions.\n\nBy this time next year, the Replit app will be even more powerful, fast, and educational. It will inspire you to create even more with ease. Join now and become a part of the journey.\n\n<div style=\"display: flex; justify-content: center;\">\n  <a class=\"cta-btn\" href=\"https://replit.com/mobile\" target=\"_blank\"\n    style=\"display: flex;\n    flex-direction: row;\n    color: #fff;\n    background-color: #0079F2;\n    padding: 12px 18px;\n    width: fit-content;\n    border-radius: 8px;\n    justify-content: center;\n    align-items: center;\n    transition-duration: 0.1s;\n    text-decoration: none;\n    font-size: 1.1em;\">Download the App</a>\n</div>\n\n\nDoes the idea of bringing creation to the world excite you? [Apply to join the team](https://jobs.ashbyhq.com/replit/edec839f-d21d-4581-bd47-64ba6e06698b)!\n\n\n<script>\n  window.addEventListener('load', videoScroll);\nwindow.addEventListener('scroll', videoScroll);\n\nfunction videoScroll() {\n\n  if ( document.querySelectorAll('video[autoplay]').length > 0) {\n    var windowHeight = window.innerHeight,\n        videoEl = document.querySelectorAll('video[autoplay]');\n\n    for (var i = 0; i < videoEl.length; i++) {\n\n      var thisVideoEl = videoEl[i],\n          videoHeight = thisVideoEl.clientHeight,\n          videoClientRect = thisVideoEl.getBoundingClientRect().top;","metadata":{"id":1673}}],["1674",{"pageContent":"for (var i = 0; i < videoEl.length; i++) {\n\n      var thisVideoEl = videoEl[i],\n          videoHeight = thisVideoEl.clientHeight,\n          videoClientRect = thisVideoEl.getBoundingClientRect().top;\n\n      if ( videoClientRect <= ( (windowHeight) - (videoHeight*.5) ) && videoClientRect >= ( 0 - ( videoHeight*.5 ) ) ) {\n        thisVideoEl.play();\n      } else {\n        thisVideoEl.pause();\n      }\n\n    }\n  }\n\n}\n</script>","metadata":{"id":1674}}],["1675",{"pageContent":"---\ntitle: New and improved repls page\nauthor: Amjad Masad\ndate: 2018-02-26T08:00:00.000Z\ncategories: product\n---\n\nPeople use Repl.it in a variety of ways; some use it for building and shipping\napplications, while others use it for working on homework, and many others use\nit as a quick prototyping/experimentation tool. Supporting all these use cases\n(and more) is something we care a lot about, but up until now there wasn't an\neasy way to, for example, quickly go back to a project that you continue to work\non every day.\n\nToday we're excited to announce some of the changes that we've\nbeen testing for the past couple of weeks. Going to [\"my repls\"](https://repl.it/repls) the\nfirst thing you'll notice is a big \"Continue coding\" section with the projects\nthat we think you might want to go back and work on.\n\n![my repls](https://repl.it/public/images/blog/my_repls.png)\n\n## Starring\n\nAdditionally, you can now star repls, so it's easy to go back to them!\n\n<div style='position:relative;padding-bottom:73%'><iframe src='https://gfycat.com/ifr/FirstBlaringIguanodon' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n## Quick repl creation\n\nRepl.it users usually code in 1-3 languages, but up until now you had to go to\nthe full list of languages every time you wanted to create a new repl.\nFor that, we've added a button that expands to include your three top-most used\nlanguages.\n\n\n<div style='position:relative;padding-bottom:60%'><iframe src='https://gfycat.com/ifr/InsidiousUnawareBlackfish' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n## Infinite load\n\nPaging can be clunky and slow; it's much easier just to scroll.","metadata":{"id":1675}}],["1676",{"pageContent":"## Infinite load\n\nPaging can be clunky and slow; it's much easier just to scroll.\n\n<div style='position:relative;padding-bottom:73%'><iframe src='https://gfycat.com/ifr/GoodnaturedKaleidoscopicBluebottle' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\n## Conclusion\n\nWe're not done yet; there's a lot more left to be desired. Look out for a new\nand improved search bar. But for now, if you have any feedback, we'd love to\n[hear it](https://repl.it/feedback)!","metadata":{"id":1676}}],["1677",{"pageContent":"---\ntitle: Native Graphics Love ❤️\nauthor: Luis Héctor Chávez\ndate: 2021-01-15T23:30:00.000Z\ncategories: product\n---\n\nWe have reimagined the native graphics experience on Replit. Our community of educators and hackers have given us [immense feedback on graphics performance and reliability](https://blog.repl.it/fix-gfx).\n\n<figure>\n    <video width=\"720\" height=\"480\" controls src=\"https://blog.repl.it/images/native-graphics-love/doom.m4v\"></video>\n    <figcaption>Yes, <a href=\"https://itrunsdoom.tumblr.com/\">It Runs DOOM!</a></figcaption>\n</figure>\n\nOur engineers have built a native graphics experience that is faster, more reliable, and elegant. Games and other native GUI applications launch quickly and reliably on our platform. Common issues like applications not launching and window resizing have been fixed. Among our most popular use cases is Pygame for beginner game programming and Java Swing for AP CSA students.\n\n## Engineering behind the scenes","metadata":{"id":1677}}],["1678",{"pageContent":"## Engineering behind the scenes\n\nBefore we take a peek behind the curtain, let's look at a very high-level view ofhow graphics work in practice. Like many Linux systems, Repl.it uses the [X Windows System](https://en.wikibooks.org/wiki/Guide_to_X11/Introduction) to display graphics. The X Windows System is natively a network-ready system: so there is one process that directly interacts with the hardware (the server), which doesn't need to be the on same machine where the program (the client) is being run. Nowadays, the networking capabilities of X are rarely used, since many optimizations rely on the fact that both the server and client processes run on the same machine and are able to share memory between them cheaply, to avoid having to move around massive amounts of graphics data through a narrow networking pipe. In order to support being able to view and interact with graphical user interfaces remotely other techologies are used, like [VNC](https://en.wikipedia.org/wiki/Virtual_Network_Computing). And just for completeness' sake, X is not the only solution for graphics in Linux, and [Wayland](https://wayland.freedesktop.org/) is slowly becoming the alternative of choice for X. Android users will be more familiar with [SurfaceFlinger](https://source.android.com/devices/graphics/surfaceflinger-windowmanager).","metadata":{"id":1678}}],["1679",{"pageContent":"With that bit of history and context out of the way, let's look at how the previous solution for graphics was implemented: We relied on running [the regular `Xorg` server](https://en.wikipedia.org/wiki/X.Org_Server) and a magic version of [`x11vnc`](https://github.com/LibVNC/x11vnc) that was able to talk the websocket protocol needed to be displayed from the client-side. This custom version of `x11vnc` was more than a year old and hard to update. Starting up the server in every Repl is too expensive, so we were relying on the [`LD_PRELOAD` trick](https://jvns.ca/blog/2014/11/27/ld-preload-is-super-fun-and-easy/) by hooking invocations to [`XOpenDisplay()`](https://tronche.com/gui/x/xlib/display/opening.html) from `libX11.so`. This works well in _most_ cases, but not every single program that communicates with X uses this library, which causes it to not be ready under some circumstances. Two consequences of using the `LD_PRELOAD` trick: _every single_ process that's started will have an extra bit of code that needs to be loaded beforehand, making processes a few milliseconds slower to launch even if they don't end up using the hooked function; the other consequence is that if any process uses a custom environment (or relies on the `LD_PRELOAD` trick itself), this trick no longer works.\n\nIn order to avoid having disembodied windows floating around and not being able to close them, we also need to be running a [Window Manager](https://wiki.archlinux.org/index.php/window_manager). We chose to use [Fluxbox](http://fluxbox.org/) since it's fast and lean. One thing that happened every now and then was that the application startup and Fluxbox launch were running concurrently, so Fluxbox sometimes moved the window around to add the decorations, which caused applications to misbehave (the dreaded `X_SetInputFocus` error!) and prompty crash on first launch.","metadata":{"id":1679}}],["1680",{"pageContent":"The solution for the performance issue was to use a more modern, combined X server + VNC server. [TigerVNC](https://tigervnc.org/) was our first choice and we were happy with the improved performance and startup time. This also meant that we had one fewer process to take care of. In order to avoid using the `LD_PRELOAD` trick, we took a page out of [systemd's socket activation](http://0pointer.de/blog/projects/socket-activation.html) feature, so that we detect the intent of a repl wanting to communicate with X by opening the socket to the X server, and launch the server + Window Manager at that point in time.\n\nFinally, the solution for the crashes on launch was significantly simpler: just make sure that Fluxbox has finished initializing so that windows are not moved unintentionally and all the inputs are routed to the correct coordinates.\n\n## Improving the Java Swing experience\n\nAs part of this undertaking, we have boosted our Java repls to with more powerful virtual conatiners. Every Teams for Education user will now have 4x the power to compile and run *any* Java project. This was essential to ensure that the Java Swing experience could be quick and reliable for teachers and students. Chromebook users should now see a dramatic improvement for all new Java projects.\n\nCheckout Barb Ericson's AP CS PhotoLab from the [official CollegeBoard lab curriculum](https://secure-media.collegeboard.org/digitalServices/pdf/ap/ap-compscia-picture-lab-student-guide.pdf):\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@demcrepl/PhotoLab?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\n## Connect with us\n\nWe will continue to invest in an improved native graphics experience. Native audio integration is next. Stay tuned! Want to chat about the future of native graphics? Connect directly with [Luis](mailto:luis@repl.it).","metadata":{"id":1680}}],["1681",{"pageContent":"If building tools that redefine how people learn to code interests you, [join us](https://repl.it/site/careers).  \n\n## Giving Feedback Goes a Long Way\n\nTeachers continue to express their enthusiasm for multiplayer Repls, annotations, and group projects. We will continue to build on these new platform features to provide a seamless collaborative experience for project based learning.\n\nAre you dreaming of Repl.it features to make you a superhero in your classroom? We want to hear about it! Contact [Derrick McMillen](mailto:derrick@repl.it) directly via email. You can also leave feedback for us [via Canny](https://repl.it/feedback/p/improved-gfx-and-gui).\n\n\nLearn more about *Teams for Education* in our [documentation](https://docs.repl.it/Teams/).","metadata":{"id":1681}}],["1682",{"pageContent":"---\ntitle: \"New in Repls: autosave, custom urls, and more\"\nauthor: Haya Odeh\ndate: 2017-11-12T08:00:00.000Z\ncategories: product\n---\n\nWe are always excited about launching new features and sharing with you, our\ndear users, what we’ve been up to. For the past few months, Amjad, Mason and I\nhave been working hard and last night we quietly launched the new repl\nfeatures. These features required a lot of infrastructure and data changes which\nis always tricky to execute. We ran into some technical difficulties last night\nwith the data migration but was able to bring the site back up and things have\nbeen running relatively smoothly since then.\n\nHowever, since radical changes were required to get this out we’re still working\nthrough some of the issues. If you see a bug or if you have a repl that’s not\nworking please let us know and we’ll fix it. We hope we have your support as we\nwork through the issues. One thing we can promise you is that this change will\nunlock so many amazing features and long-term stability and reliability starting\ntoday.\n\n*Note that the classroom product is not affected by this at all. This is only a\n “repls” product change.*\n\nNow on to the new features 🥁🥁\n\n## Autosave\n\nWhen we promise we deliver. As of last night your code is autosaved by\ndefault. The new interface will include only two buttons: the run and the share\nbutton. You don’t need to worry about saving your code anymore, we’ll do it for\nyou, so no code is lost, all your work is saved in (**my repls**) .\n\n![autosave](/public/images/blog/autosave.png)\n\n\n## Name your Repl or we’ll name it for you 😊\n\nIf you have an existing untitled repl, or if you can’t be bothered to name your\nRepl -- guess what -- we’ll do it for you! You might end up with incredibly\nfunny names (thanks to the folks at\n[GfyCat](https://medium.com/@Gfycat/naming-conventions-97960fc40179) for\npioneering this). Personally I can’t wait to see what Repl.it will name my\nuntitled Repl! it’s so random! Here is what recent Repl looked like.","metadata":{"id":1682}}],["1683",{"pageContent":"pioneering this). Personally I can’t wait to see what Repl.it will name my\nuntitled Repl! it’s so random! Here is what recent Repl looked like.\n\n![repl name](/public/images/blog/repl_name.png)\n\n## Unified Repl URLS (no more janky revisions)\n\nOkay okay.. Before you freak out about lack of revisions.\n\n![freak out gif](https://media.giphy.com/media/13xHqoOQOdFu5a/giphy.gif)\n\nAll your code’s history is accessible under a new label called **History**.\n\nYour new Repl has but one URL, and that’s because it’s autosaved -- meaning\nevery time you change a file in your Repl, it will be automatically saved, and a\ncopy of that file before the change will be stored in your Repl History.\n\nIf you need to go back to one of your previous revisions, you can do that by\nclicking on the three dots menu on the right of the repl and click on\n**History**.\n\n![history](/public/images/blog/history.gif?123)\n\nRevisions are sorted by date, with the newest first. By default we show only the\nlatest from each day, but if you want to drill down each day you can. If you\nclick the **restore** button, the file will be restored to that revision. It’s\nokay if you did that by mistake because you can go back and restore the\npreviously latest revision which will now be just one record before the last\none.\n\nAs mentioned above, there is a lot more to this change that is more technical and\nwill allow us to ship more exciting features in the near future. We'll do a\ntechnical write up soon if you're interested.\n\nHope you like the new updates and, as always, we’d love to hear from you and if\nyou have any feedback let us know on our [feedback channel](https://repl.it/feedback).\n\nHappy weekend and happy repling!\n\nHaya & the Repl.it team","metadata":{"id":1683}}],["1684",{"pageContent":"---\ntitle: Replit's New Logomark\nauthor: Barron Webster\ndate: 2022-10-04T00:00:00.000Z\ncover: https://blog.replit.com/images/new_logo/logotype.png\ncategories: design\n---\n\n![Replit's new logomark](https://blog.replit.com/images/new_logo/logotype.png)\n\nYou may have noticed that Replit's logo looks a little different than it did last week. In summary: we're using what we call the \"prompt\" we already use elsewhere as our primary symbol. The prompt gives you an empty canvas, full of possibility, for you to start creating. We want Replit to be the same for your software creation journey! Let's dive in and learn why.\n\n![Our existing logomark (or, more accurately, both of our existing logomarks.)](https://blog.replit.com/images/new_logo/existing_logo.jpg)\n\n\nWe've had our old logo for a long time. The symbol (loopy, or hurricane, or ripple, or whatever else you call it) has served us well, but for a few reasons we wanted to simplify how Replit is represented:\n- It's hard to draw! Iconic logos you remember easily (Nike, Apple) are easy to reproduce. Even a five-year-old can draw the Nike logo.\n- It was unclear what it stood for.\n- It was originally drawn with imperfect geometry — look closely and you'll see that it's not actually symmetrical and the gaps between shapes are inconsistent.\n- Because of that, it doesn't render well at small scales.\n- We didn't do many checks before using it. It turns out a lot of existing logos are similar! Even in the coding tools market, others use similar symbols.\n\nPlus, to make matters more complicated, we've been using our \"prompt\" (the three yellow dots) in more places, sometimes alone. For example, we use it in our logotype, or our merch; so the question of \"Wait, what's the actual logo?\" came up often.\n\n![We often used the \"prompt\" as part of our logomark.](https://blog.replit.com/images/new_logo/existing_logo.jpg)\n![One of the mugs available in Repl shop](https://blog.replit.com/images/new_logo/mug.png)","metadata":{"id":1684}}],["1685",{"pageContent":"![One of the mugs available in Repl shop](https://blog.replit.com/images/new_logo/mug.png)\n\nThe prompt started in the Replit interface as the place where you start interacting with the Console or Shell; it's literally \"where you start creating\". Prompts look different across the computing ecosystem, and this is our take on it.\n\n![the three-dot prompt in the Replit console.](https://blog.replit.com/images/new_logo/prompt.png)\n\nWe also started using it in other places where someone might start typing a command, even if they weren't traditional consoles or shells, like our search/command bar:\n\n![the three-dot prompt in the Replit search/command bar.](https://blog.replit.com/images/new_logo/prompt_clui.png)\n\n\nAfter we introduced this prompt, interesting things happened. Some Replit users started using it to express themselves on Discord, Twitter, etc. (Most of them used a unicode character to simulate the prompt — U+2815, or \"[Braille Pattern Dots-135](https://www.compart.com/en/unicode/U+2815)\"). As any brand designer knows, if people pick up your symbol and start using it themselves, that's pretty remarkable.\n\n\n![Twitter users using the three-dot prompt in their usernames.](https://blog.replit.com/images/new_logo/social_use.png)\n\nWhen we decided to rip off the band-aid and retire the old logo, we explored far and wide. Working with [Mackey Saturday](https://mackeysaturday.com/) and our internal design team, we looked at ways computing has been represented visually, like Michael Beirut's [work for MIT Media Lab](https://www.pentagram.com/work/mit-media-lab/story) and Susan Kare's [original icon set for the Macintosh](https://qz.com/1666437/mac-icon-designer-susan-kare-explains-the-inspiration-for-her-designs/). We tried abstracting all sorts of ideas related to computing — keyboard keys, the \"run\" button in the Replit workspace, pixels, the cloud…\n\n![Screenshot of many different visual explorations the team did.](https://blog.replit.com/images/new_logo/exploration.png)","metadata":{"id":1685}}],["1686",{"pageContent":"![Screenshot of many different visual explorations the team did.](https://blog.replit.com/images/new_logo/exploration.png)\n\n…but in the end, we kept coming back to some version of the prompt. Why?\n- The prompt already has equity — people already know it and are using it\n- It's easy to draw\n- It scales down to small sizes really well\n- Its origin aligns really well with our goals. The prompt gives you an empty canvas, full of possibility, for you to start creating. We want Replit to be the same for your programming journey!\n- You can construct the symbol with simple building blocks — just three shapes! This makes it easy to remix and build visual systems around. Plus, it's a good reminder that we're in the building blocks (computing primitives) business.\n\n![Replit's new logotype](https://blog.replit.com/images/new_logo/logotype.png)\n\nThe logotype has also been cleaned up to feel much more computing-y — it's a monospace, which is the type of characters traditionally used in programming interfaces, and has some softer corners compared to our old logotype.\n\nWe also settled on a friendly orange for cases where the logo could use color. We drew inspiration from [stories of the advent of hacking culture](http://friendlyorangeglow.com/): the PLATO system and its early plasma displays. Computing has had enough blues and greens!\n\nSo, that's the story of why our logo looks different today. We hope you see it in the wild and think fondly back to these reasons when you do!\n\nThanks to Mackey Saturday, the Replit design team, and everyone else who contributed ideas — Haya, Tyler, Omar, Moudy, Joe, Tiga.\n\nIf you're interested in helping define the future of how computing looks (and works), come join us — [we're hiring!](https://replit.com/site/careers)","metadata":{"id":1686}}],["1687",{"pageContent":"---\ntitle: Announcing more power and changes to pricing\nauthor: Amjad Masad\ndate: 2023-01-17T17:15:00Z\ncover: https://blog.replit.com/images/rust_cover.png\ncategories: news\nprofiles: amasad\n---\n\n**Launching more power and upcoming changes to your Hacker benefits and individual powerups**   \n\nReplit has changed a lot since we launched in 2016 — evolving from a simple IDE to a place where you can learn, build, host, and share your software creations with millions around the world.\n\nToday, I'm excited to share we're launching new Boost levels that we hope will make your creation experience on Replit a lot more powerful. Replit has always been about software development - raising the ceiling of what you can build and share online instantly.\n\nWe've added a lot of power and value to Replit over the years and are launching more to help you unlock more value and power on Replit. We believe it's important to adjust our pricing to reflect these changes and ensure that we can continue to provide a first-class experience for those building on our platform. This is not a decision we made lightly.\n\n![replit-evolution](images/replit-evolution.png)\n\nIf you pay us for services on Replit, you'll receive an email detailing changes to prices and benefits specific to you. These updates will roll out over the next few weeks but we wanted to let you know as soon as possible.\n\nI want to make it clear for our current paying customers that your current plan and pricing **will not change immediately.**","metadata":{"id":1687}}],["1688",{"pageContent":"I want to make it clear for our current paying customers that your current plan and pricing **will not change immediately.** \n\nI also want to highlight that we are not making any changes to our free tier. Our mission is to bring the next billion software creators online so we're going continue to invest in making our free tier great even for folks who may be unable to pay. We've also been hard at work over the past few months to enable our users to earn on the platform by solving requests through [Bounties](https://blog.replit.com/bounties). This is only the first phase of what earning could look like and we're constantly iterating on how we can help you unlock greater power on our platform. \n\nThe key changes we're announcing today are:\n\n- Changes to the benefits provided as part of our Hacker Plan to reflect the additions and improvements we've made over the past 5 years. \n- An increase in prices for some of our individual powerups, such as Boosts, Always On and Private Repls. We believe that the new prices will be more aligned with the value and capabilities we provide. We're offering current pricing and benefits to our existing customers until April 3rd to make this transition easier. Keep reading for more about those changes below.\n- We're launching new levels of Boost (Up to 32x of the base offering!). Up until now, Repls could only reach up to 4vCPU & 4GB of RAM. These new levels of Boost gives you more power for resource-intensive applications that may require it. \n\n\n## Changes we're making to Hacker Plan benefits\nThe Hacker Plan has evolved a lot since we launched it in 2017 with the addition of Private Repls, Always On, Boosts, and providing more performance and compute. \n\n| Benefit                     | **Old**               | **New**                                                          |\n|:-----------------------------:|:-----------------------:|:------------------------------------------------------------------:|","metadata":{"id":1688}}],["1689",{"pageContent":"|:-----------------------------:|:-----------------------:|:------------------------------------------------------------------:|\n| **Unlimited private Repls** | Included              | Included                      |\n| **More [powerful machines](https://blog.replit.com/welcome-to-the-wonderful-world-of-clusters)**  | Included              | Included                      |\n| **Boost Power Ups**         | 5 (4 vCPUs + 4GB RAM) | 1 (2 vCPUs + 2GB RAM)         |\n| **Always On Power Ups**     | 5                     | 1                             |\n| **Default Hosted Repl RAM**        | 2GB                   | 0.5GB                         |\n| **Default Hosted Repl vCPUs**      | 2                     | 0.5\n| **Default Development Repl RAM**        | 2GB                   | 2GB                         |\n| **Default Development Repl vCPUs**      | 2                     | 2\n| **AI-powered helpers**      | Included              | Available via [Ghostwriter](https://replit.com/site/ghostwriter) |\n\nWe're also excited to add a Boost to your active coding session. This means that anytime you're actively coding in the workspace, your Repl's stats will automatically be boosted to have 2vCPU & 2GB of RAM!\n\n## Changes we're making to the pricing of Boosts and Always On\n\nIn spring 2021, we launched Boosts & Always On as a way to give you more power and resources for your Repls. We added these to the Hacker plan for no extra cost, and we later introduced Cycles and made it possible to buy them and private repls a la carte.\n\nWe know that you love using the Boosts and Always On Power Ups, and we want to continue providing you with the best possible experience. This will help us continue offering you the same great service you've come to expect from us, and we appreciate your understanding. \n\n| Benefit                     | **Old Price**               | **New Price**                                                          |","metadata":{"id":1689}}],["1690",{"pageContent":"| Benefit                     | **Old Price**               | **New Price**                                                          |\n|:-----------------------------:|:-----------------------:|:------------------------------------------------------------------:|\n| **Boost @ 2vCPU & 2GB RAM**         | N/A | 20 cycles/day ($0.20)         |\n| **Boost @ 4vCPU & 4GB RAM**         | 2 cycles/day ($0.02) | 70 cycles/day ($0.70)         |\n| **Always On**     | 2 cycles/day ($0.02) | 20 cycles/day ($0.20)         |\n| **Private Repls**     | 150 cycles/month ($1.50) | 500 cycles/month ($5.00)         |\n\n## New boost levels for your Repls\n\nWe're excited to launch new levels of Boost so you can boost your Repl's specs all the way up to 32x (16 vCPU & 16 GB of RAM). As our creators build more advanced and powerful applications, we wanted to give them the power to run and host them on Replit.\n\n![car-game](https://replit.com/public/images/powerup-examples/boost-cloud-game-comparison.gif)\n\nWe're confident that the new boost levels will enable you to do things like host large scripts, handle large amounts of traffic for your bots, and run any graphics intensive Repls to name a few!\n\n**New Levels of Boost Pricing**\n\n| Boost Level                     | **Price**               |                                \n|:-----------------------------:|:-----------------------:|\n| **4vCPU & 4GB RAM**         |70 cycles/day ($0.7)         |\n| **8vCPU & 8GB RAM**     | 150 cycles/day ($1.50) | \n| **16vCPU & 16GB RAM** | 350 cycles/day ($3.50)\n\n\n## Grace periods for existing customers \n**This change won't happen immediately.**  \n\nWe know changes like these can be challenging. To ease the transition, we're automatically extending a grace period during which you'll be able to continue using the legacy Hacker benefits and the old pricing on individual Power Ups on your existing Repls using them until **April 3rd** while being able to take advantage of the new boost levels.","metadata":{"id":1690}}],["1691",{"pageContent":"For Hacker subscribers, this means you'll have the option to continue boosting your existing boosted Repls to 4vCPU & 4GB of RAM and keep your existing Always On Repls powered up until the grace period expires (After April 3rd).\n\nAfter that, you'll be able to boost 1 Repl to 2vCPU & 2GB RAM and keep 1 Repl Always On as part of your Hacker benefits.\n\nFor customers powering up their Repls using Cycles, you'll continue to have access to the old pricing on those Power Ups until you turn them off or until the notice expires (After April 3rd). New Power Ups except for Private Repls will be subject to the new pricing immediately; Private Repls new pricing will go into effect after April 3rd.\n\nWe'll switch you over automatically to the new benefits and pricing once the grace period elapses and send out another notice when your plan and pricing is about to transition.\n\nWe're committed to our mission of bringing the next billion software creators online, and we believe that these changes will help ensure that we can continue improving Replit for you for years to come.\n\nIf you have questions or need additional information, please contact our Support team at support@replit.com.","metadata":{"id":1691}}],["1692",{"pageContent":"---\ntitle: Building a web app with Nix (Because why not?)\nauthor: Guillaume St-Pierre\ndate: 2021-07-16\ncategories: projects\n---\n\nLearning a new programming language can be a very difficult task. Where should you start? How do I improve my skills from \"Hello, World!\" to building complete applications? It helps to have a starter project. One of my favourites is building a web app. I have been learning the Nix package manager for a few weeks now - [starting with creating a dynamic version system](https://blog.replit.com/nix_dynamic_version) - and I think its the perfect time to write a web application with it (Even though I probably shouldn't).\n\nBut wait, isn't Nix a package manager and reproducible build system? Am I going to write an entire post on how to package a PHP app with Nix and run it? Well, yes and no. Nix is indeed a build system, but Nix packages are configured using a functional programming language (also named Nix) created specifically for the Nix package manager. Since Nix is a complete programming language, this means we can execute it without building a package thanks to the interpreter built into the Nix package manager itself. Clearly, Nix was not built for web development, but let's see how far we can take it.\n\n## Hello, World!\nIn the long list of reasons why Nix was not created for building web applications, we have the reality that starting a web server that executes Nix code through Nix itself is not feasible at the moment. Nix is not the type of application that can be configured to wait for calls on some hostname/port and execute arbitrary code when a client connects. It is much easier to use something like `nix eval` through a more standard web server, so we'll do just that.\n\nLet's start by creating a mandatory \"Hello, World!\" example with Nix. For this post, I have created all the code inside of a [Nix repl on replit.com](https://replit.com/@replitguillaume/NixWebApp). Feel free to follow along in that repl or to create your own.","metadata":{"id":1692}}],["1693",{"pageContent":"Create a new repl using the **nix (beta)** language to get started, click on the three dots icon next to the Files header in the filetree and select \"Show config files\". Once the config files are visible, open the `replit.nix` file and replace `pkgs.cowsay` with `pkgs.python3`, we will need python later. Now that the repl is configured, create a `default.nix` file inside of a directory named `app` and write the following code in it.\n\n```nix\n# ./app/default.nix\n{ }:\nrec {\n  get = ''\n    <html>\n      <head>\n        <title>Nix web server - Home</title>\n      </head>\n      <body>\n        <h1>Hello from Nix!</h1>\n      </body>\n    </html>\n  '';\n}\n```\n\nThe code looks a lot like a standard derivation file. The basis of the `default.nix` file is a function (The signature for a Nix function is `arg: body`) that takes an attribute set as its single argument and should return __something_. Like most functional programming languages, Nix automatically uses the last statement of a function as the return value for that function. In fact, Nix only allows a single statement per function, purely functional. When executed, the code in this default file will return an attribute set with a single attribute: `get`. This get attribute contains our \"Hello, World!\" HTML code.\n\nNow, how do we run this code through a web server? For this post, we will be using a python web server, but you could use anything you like, even bash. Here is the code for our web server, paste it in a file named `server.py` in the repl root directory (not in `./app`).\n\n```python\n# ./server.py\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nimport subprocess\n\nhostName = \"0.0.0.0\"\nserverPort = 8080\n\nclass NixServer(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        command = 'nix eval --raw -f ./app get'\n\n        # Run nix\n        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)","metadata":{"id":1693}}],["1694",{"pageContent":"self.end_headers()\n\n        command = 'nix eval --raw -f ./app get'\n\n        # Run nix\n        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()\n        self.wfile.write(output)\n\nif __name__ == \"__main__\":        \n    webServer = HTTPServer((hostName, serverPort), NixServer)\n    print(\"Server started http://%s:%s\" % (hostName, serverPort))\n\n    try:\n        webServer.serve_forever()\n    except KeyboardInterrupt:\n        pass\n\n    webServer.server_close()\n    print(\"Server stopped.\")\n```\n\nThe important part here is line 14: `command = 'nix eval --raw -f ./app get'`. Using the `subprocess` package, we trigger the `nix eval` command. The `--raw` option tells nix to return the result as an unquoted string, which makes things simpler for this server. We then use the `-f` option to tell Nix to use the `default.nix` file from the `app` directory. Finally, the last option tells nix which attribute from the returned attribute set to print. Combined, this will interpret our `./app/default.nix` file - thus executing the function in that file - and get the content of the `get` attribute, printing the HTML code as a raw string. Type `python ./server.py` in the repl console and wait for the web preview to appear, you should see the \"Hello, World!\" message displayed on screen.\n\n## Adding a router\nDisplaying HTML is all fine and good, but most web applications include more than a single page of content.  Nix can't access anything from the web server or the environment, it is fully isolated. We need to find some way to know which URL the user accessed in our web app to display the correct page. We could use the python server to handle calling different Nix files based on which path the user access, but we want to do as much as possible directly in Nix. Instead of trying to frontload all the work to the python server, let's get the path from the url in python and give it to Nix as an argument. Update the `do_GET` method with this new code.","metadata":{"id":1694}}],["1695",{"pageContent":"```python\n# ./server.py\ndef do_GET(self):\n\tself.send_response(200)\n\tself.send_header(\"Content-type\", \"text/html\")\n\tself.end_headers()\n\t\n\t# Update the command to add the --arg option\n\tcommand = f'nix eval --arg route \"{self.path}\" --raw -f ./app get'\n\t\n\t# Run nix\n\tprocess = subprocess.Popen(command.split(), stdout=subprocess.PIPE)\n\t\n\toutput, _ = process.communicate()\n\tself.wfile.write(output)\n```\n\nWe can extend the `nix eval` command to pass arguments to Nix using the `--arg` option. Here, we pass a `route` attribute as the value of the path from the web server. Let's see how we can use this in the `default.nix` file.\n\n```nix\n# ./app/default.nix\n{ route ? \"/\" }:\nlet\n  routes = {\n    \"/\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Home</title>\n        </head>\n        <body>\n          <h1>Hello from Nix!</h1>\n          <ul>\n            <li><a href=\"/nix\">Nix info</a></li>\n            <li><a href=\"/404\">404</a></li>\n          </ul>\n        </body>\n      </html>\n    '';\n    \"/nix\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Nix</title>\n        </head>\n        <body>\n          <h1>Nix info</h1>\n          <p>\n            Nix is running on ${builtins.currentSystem}\n          <p>\n          </p>\n            <i>With the caveat that a python web server is serving everything...</i>\n          </p>\n        </body>\n      </html>\n    '';\n  };\nin rec {\n  get = if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      <html>\n        <head>\n          <title>Nix web server - Not found</title>\n        </head>\n        <body>\n          <h1>404 Page ${route} not found</h1>\n        </body>\n      </html>\n  '';\n}\n```","metadata":{"id":1695}}],["1696",{"pageContent":"<html>\n        <head>\n          <title>Nix web server - Not found</title>\n        </head>\n        <body>\n          <h1>404 Page ${route} not found</h1>\n        </body>\n      </html>\n  '';\n}\n```\n\nLet's unpack this. On line 2, we can see the `route` argument added as a key from the attribute set. Anything given to the `--arg` option of the `nix eval` command will be added here using the format `--arg key value`. On line 3, we create a `let..in` block that defines another attribute set with our possible routes, each returning some HTML. Remember when I said that Nix function could only contain one statement? The `let..in` block is a special expression that allows us to bypass this limitation by defining variables in this block and passing them to whatever statement follows the `in`. For example:\n\n```nix  \n{ entry ? 0 }:  \nlet\n\tfoo = \"bar\";\n\tbar = 1;\n\tfile = builtins.readFile ./some-file.txt;\nin if entry == 1 then foo else bar\n```\n\nThis statement defines three variables and uses two of them in an `if` statement. `If` statements must always have a `then` block and a `else` block. No single line `if` or `else if` here. We can do a lot more with the `let` statement, but the one thing we cannot do is to trigger side effects. Nix is incredibly lazy and does not allow code that does something without assigning it to a variable. Furthermore, it will not interpret unused code. For example, the `file` variable above will not be interpreted and the `some-file.txt` file will not be read, even though we assign its content to a variable. The `?` on line 1 character defines the default value of an attribute in an attribute set. If the `entry` key is not set when the function is called, it will default to `0`.","metadata":{"id":1696}}],["1697",{"pageContent":"To go back to our own code, the core of the router is on line 36 were we use an `if` statement to set the value of the `get` attribute. The condition checks if the `routes` set from line 4 has a key equal to the passed route using `builtins.hasAttr`. If yes, it fetches the value for that attribute with the `dot` operator and returns the HTML. If not, it will instead return the content of a 404 page. This is code acts as a sort of `switch` statement and is one of the best way to implement an `else if` statement in Nix.\n\nRestart the by typing CTRL+C then typing `python ./server.py`. You should now see the \"Hello, World!\" message printed on the web preview, with some links. Clicking on those links will route you to the pages we have defined.\n\n## Adding an API\nWe now have a very nice set of web pages, and it's still fairly fast considering how we're running it. Yet, it's all static content. No web application would be complete without some sort of data management! It is time to take our app to the next level by adding a TODO API.\n\nLet's start with some refactoring. Create a `./app/get.nix` file, we will move the code from `./app/default.nix` there with a few modifications.\n\n```nix\n# ./app/get.nix\n{ }:\nlet\n  routes = {\n    \"/\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Home</title>\n        </head>\n        <body>\n          <h1>Hello from Nix!</h1>\n          <ul>\n            <li><a href=\"/nix\">Nix info</a></li>\n            <li><a href=\"/404\">404</a></li>\n          </ul>\n        </body>\n      </html>\n    '';\n    \"/nix\" = ''\n      <html>\n        <head>\n          <title>Nix web server - Nix</title>\n        </head>\n        <body>\n          <h1>Nix info</h1>\n          <p>\n            Nix is running on ${builtins.currentSystem}\n          <p>\n          </p>\n            <i>With the caveat that a python web server is serving everything...</i>\n          </p>\n        </body>\n      </html>\n    '';\n  };\n\n  getContent = route: if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      <html>","metadata":{"id":1697}}],["1698",{"pageContent":"</p>\n        </body>\n      </html>\n    '';\n  };\n\n  getContent = route: if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      <html>\n        <head>\n          <title>Nix web server - Not found</title>\n        </head>\n        <body>\n          <h1>404 Page ${route} not found</h1>\n        </body>\n      </html>\n  '';\nin getContent\n```\n\nThe main difference here compared to `default.nix` is that we return a function for the router rather than call it through an attribute set.\n\nGoing back to `default.nix`, we can update the code there to `import` this function and use it rather than have the router live in the default file. It makes our code a little easier to manage and will keep the file size small as we add more code. `import` is a special keyword that will execute the function in the given file (hence why we give it an attribute set as its second argument) and return its return value. In this case, `./get.nix` returns the `getContent` function and that's what we receive from `import`.\n\n```\n# ./app/default.nix\n{ route ? \"/\" }:\nlet\n  getContent = import ./get.nix {};\nin rec {\n  get = getContent route;\n}\n```\n\nNow, let's add a `./app/post.nix` file and get started building a small API. We will be using the Replit database in this post, but feel free to use any database system you want.\n\n```nix\n# ./app/post.nix  \n{ pkgs ? import <nixpkgs>{}, replit_db_url ? \"\" }:\nlet\n  postApi = route: body: let\n    setTodos = builtins.readFile (pkgs.runCommand \"setTodos\" {\n      buildInputs = [ pkgs.cacert pkgs.curl ];\n    } ''\n      curl ${replit_db_url} -d 'todos=${body}' | tr -d '\\n' > $out\n    '');\n\n    routes = {\n      \"/api/todos\" = setTodos;\n    };\n  in if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      Not found\n  '';\nin postApi\n```","metadata":{"id":1698}}],["1699",{"pageContent":"'');\n\n    routes = {\n      \"/api/todos\" = setTodos;\n    };\n  in if builtins.hasAttr route routes then routes.\"${route}\" else ''\n      Not found\n  '';\nin postApi\n```\n\nLet's go over this code. First, on line 2, we define our function with two attributes: the base nix packages and a `replit_db_url` string. We will get back to the `replit_db_url` attribute later. The nix packages include all the utility packages provided by Nix, which can be found in [their own repo](https://github.com/NixOS/nixpkgs). In the case of the `pkgs` attribute, it means Nix will automatically fetch all packages even if we do not pass it in the attribute set.\n\nIn the `let..in` block, we define our router function like in the `./app/get.nix` file with an added `body` parameter. The router only defines one route, which triggers a function called `setTodos` when the route is accessed. We define everything inside of the `postApi` function to make sure the `setTodos` function has access to the `body` attribute.\n\nThis `setTodos` function is where the magic happens. We use the `pkgs.runCommand` function to trigger a bash script on the server. This script will call the `curl` command and add data into the Replit database through its HTTP API. We then assign the result of this command, cleaned of all line breaks, to the magic `$out` variable. `runCommand` will write everything added to `$out` to its derivation file, which we then need to read using `builtins.readFile`. Since `runCommand` does not have anything installed by default, we also give it a few tools to make sure curl works.\n\nRemember when I said that Nix does not allow side effects? `runCommand` is the best way to work around that. Nix will still not execute the bash script if the result is not read through a variable, but, as long as we make sure it is, we can trigger any side effect we want in the bash script.\n\nWe can use the `runCommand` code to write a `GET` version of this as well, let's return to `./app/get.nix` and add a few more lines of code.\n\n```nix","metadata":{"id":1699}}],["1700",{"pageContent":"We can use the `runCommand` code to write a `GET` version of this as well, let's return to `./app/get.nix` and add a few more lines of code.\n\n```nix\n# ./app/get.nix\n{ pkgs ? import <nixpkgs>{}, replit_db_url ? \"\" }:\nlet\n  getTodos = builtins.readFile (pkgs.runCommand \"getTodos\" {\n      buildInputs = [ pkgs.cacert pkgs.curl ];\n      dummy = builtins.currentTime;\n    } ''\n      curl ${replit_db_url}/todos | tr -d '\\n' > $out\n  '');\n\n  routes = {\n  \t# Same routes, content cut for brevity\n    ...\n    \"/api/todos\" = getTodos;\n  };\n\n  getContent = ...; # Same code, content cut for brevity\nin getContent\n```\n\nThe code is very similar to the `./app/post.nix` code, but we fetch the todos data with curl rather than set them.\n\nYou may notice the `dummy = builtins.currentTime` line in `runCommand`, what's up with that? Nix is very good at avoiding unnecessary executions. It checks the content of the shell script and all the attributes given as the second parameter to determine if anything changes. If Nix decides the previous execution of `runCommand` has all the data needed already, it will not execute the bash script and instead resolve to the result of the previous execution. This was less of a problem with our `POST` code since Nix will always re-execute the code if its content changes (Which it will when the `POST` body data is different, unless the user adds the same TODO twice), but our `GET` code has no changing dependencies. We need to make sure to tell Nix to always rerun that script. The `dummy` attribute does so by creating a dependency to the current time, meaning it is sure to change between each execution.\n\nLet's update the `./app/default.nix` file to connect those changes and expose our API endpoints.\n\n```nix\n# ./app/default.nix\n{ pkgs ? import <nixpkgs>{}, route ? \"/\", body ? \"{}\", replit_db_url ? \"\" }:\nlet\n  getContent = import ./get.nix { inherit pkgs; inherit replit_db_url; };\n  postApi = import ./post.nix { inherit pkgs; inherit replit_db_url; };\nin rec {\n  get = getContent route;","metadata":{"id":1700}}],["1701",{"pageContent":"let\n  getContent = import ./get.nix { inherit pkgs; inherit replit_db_url; };\n  postApi = import ./post.nix { inherit pkgs; inherit replit_db_url; };\nin rec {\n  get = getContent route;\n  post = postApi route body;\n}\n```\n\nWe added a few attributes to the attribute set of our function and now expose a second attribute to our returned set for `POST` calls. We use the `inherit` keyword to pass attributes to our imported packages without having to type `pkgs = pkgs`, it is the equivalent of doing `{ foo: foo }` in an object in JavaScript for example. We need to also update the python web server to provide those as arguments, replace the `NixServer` class with the following code.\n\n```python\n# ./server.py\nclass NixServer(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        replit_db_url = os.getenv(\"REPLIT_DB_URL\")\n\n        command = f'nix eval --arg route \"{self.path}\" --arg replit_db_url \"{replit_db_url}\" --raw -f ./app get'\n\n        # Run nix\n        process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()\n        self.wfile.write(output)\n\n    def do_POST(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        post_body = json.dumps(post_data.decode('utf-8'))\n        replit_db_url = os.getenv(\"REPLIT_DB_URL\")\n\n        command = [\n          \"nix\",\n          \"eval\",\n          \"--arg\",\n          \"route\",\n          f'\"{self.path}\"',\n          \"--arg\",\n          \"body\",\n          f'{post_body}',\n          \"--arg\",\n          \"replit_db_url\",\n          f'\"{replit_db_url}\"',\n          \"--raw\",\n          \"-f\",\n          \"./app\",\n          \"post\"\n        ]\n\n        # Run nix\n        process = subprocess.Popen(command, stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()","metadata":{"id":1701}}],["1702",{"pageContent":"\"-f\",\n          \"./app\",\n          \"post\"\n        ]\n\n        # Run nix\n        process = subprocess.Popen(command, stdout=subprocess.PIPE)\n\n        output, _ = process.communicate()\n        self.wfile.write(output)\n```\n\nThe URL for the Replit database is available as an environment variable for all repls. We can fetch it and pass it to the `nix eval` command using the `--arg` option. We also added a `do_POST` method to the class to process `POST` calls with the `post` attribute returned from Nix. This method will pass all the attributes we expect, plus the decoded body from the `POST` call. Remember that `pkgs` has a default value that sets it to a link to all Nix packages, so we can omit it from our `nix eval` call.\n\nRestart the server and try accessing these two endpoints using Curl or Postman with the repl URL (Available in the web preview). The `GET` endpoint should return the data saved by the `POST` endpoint!\n\n## Adding a web app\nWe now have static content and a dynamic API, all that's left for our TODO app is to connect to the two together! For this application, I decided to go framework-less and use a web component. A web component is a custom HTML element managed through JavaScript. Think React, but without all its JSX fancyness.\n\nCreate a `./app/app.js` file and copy the following code in there:\n\n```javascript\n// ./app/app.js\nclass TodoList extends HTMLElement {\n  constructor() {\n    super();\n    this.todos = null;\n  }\n\n  // Called when the component connects to the DOM. I.E. When it is rendered for the first time.\n  connectedCallback() {\n    this.render();\n    \n    this.fetchTodos();\n  }\n\n  fetchTodos() {\n    fetch('/api/todos').then(data => data.json()).then(result => {\n      this.todos = result;\n      this.render();\n    }).catch(() => {\n      // This block exist to handle cases were the API returns an empty string (no data)\n      this.todos = [];\n      this.render();\n    });\n  }\n\n  saveTodos(event) {\n  \t// Don't actually submit the form.\n    event.preventDefault();","metadata":{"id":1702}}],["1703",{"pageContent":"this.todos = [];\n      this.render();\n    });\n  }\n\n  saveTodos(event) {\n  \t// Don't actually submit the form.\n    event.preventDefault();\n\n    const newTodo = this.querySelector(\"#todo-form #new-todo\").value;\n\n    fetch('/api/todos', {\n      method: 'POST',\n      body: JSON.stringify(this.todos.concat({ task: newTodo })),\n    }).then(() => {\n      this.fetchTodos();\n    });\n  }\n\n  render() {\n    if (!this.todos) {\n      this.innerHTML = '<i>Loading...</i>';\n      return;\n    }\n\n    this.innerHTML = `\n      <div>\n        <ul>\n          ${this.todos.map(todo => `\n            <li>\n              ${todo.task}\n            </li>\n          `).join('')}\n        </ul>\n        <form id=\"todo-form\">\n          <input placeholder=\"Add a task\" id=\"new-todo\" name=\"new-todo\" />\n          <button type=\"submit\">Add</button>\n        </form>\n      </div>\n    `;\n\n    this.querySelector(\"#todo-form\").addEventListener('submit', this.saveTodos.bind(this));\n  }\n}\n    \ncustomElements.define('todo-list', TodoList);\n```\n\nI won't go into too much details about web components in this article. What's important here is that `connectedCallback` is triggered when the component is picked up by the browser and rendered on screen. We tell that component to render a loading indicator and start fetching todos using our `GET` API from the previous section. Once fetched, we rerender and display the list of todos plus a small form instead of the loading indicator. Creating a todo using the form will call the `POST` API endpoint, then trigger a refetch of the `GET` endpoint, and finally a rerender.\n\nLet's update the `routes`set of our `./app/get.nix` file to use this component, replace the first route with the following code.\n\n```nix  \n\"/\" = ''\n  <html>\n    <head>\n      <title>Nix web server - Home</title>\n    </head>\n    <body>\n      <h1>Hello from Nix!</h1>\n      <ul>\n        <li><a href=\"/todos\">Todo list page</a></li>\n        <li><a href=\"/nix\">Nix info</a></li>\n      </ul>\n    </body>\n  </html>\n'';\n\"/todos\" = ''\n  <html>\n    <head>","metadata":{"id":1703}}],["1704",{"pageContent":"<ul>\n        <li><a href=\"/todos\">Todo list page</a></li>\n        <li><a href=\"/nix\">Nix info</a></li>\n      </ul>\n    </body>\n  </html>\n'';\n\"/todos\" = ''\n  <html>\n    <head>\n      <title>Nix web server - Todos</title>\n    </head>\n    <body>\n      <h1>Listing todos</h1>\n      <todo-list></todo-list>\n      <script>\n        ${builtins.readFile ./app.js}\n      </script>\n    </body>\n  </html>\n'';\n```\n\nWe added a link to the new `/todos` route in our home page. This `/todos` route adds the web component we created and copies the JavaScript code into a script tag by reading the JavaScript file. Nix knows to copy unquoted paths like these to its store and can access our JavaScript file no problem.\n\nRefresh the web preview (no need to reset the server since we didn't change any of the python code) and you should see the new link. Clicking on the todo list link will trigger the web component code and show you an empty list of todos. Try adding a new todo using the form, you'll see the list refreshing after around 5 seconds. Be patient, it is _very_ slow.\n\n## Conclusion\nWhat did we learn today? We learned the hard way that Nix isn't suited to web development - which was to be expected - but also that Nix can be very slow for what seems to be fairly basic operations. Nix is a build system first, while it has many optimizations (Which we had to work around) to make things faster, it's not made to provide the type of performance web applications need. The `runCommand` function creates a new build derivation that configures a _lot_ of things and creates new processes. It's meant to take some time as Nix figures out what it needs to do. `builtins.readFile` adds another layer of complexity as Nix creates yet another process to fetch and read the file.","metadata":{"id":1704}}],["1705",{"pageContent":"But what about `fetchUrl`? Could it be faster and simpler than `runCommand`? Unfortunately, `fetchUrl` uses a bash script and curl behind the scene, which ends up being very similar in structure and performance to our `runCommand` setup, but without our `dummy` attribute. This leads to caching issues where adding more than one todo won't change the result of the `GET` call. `fetchUrl` is meant to fetch and unpack archives for using them in build processes, not make `GET`/`POST` calls to an HTTP API.\n\nI think there might be some way to hack Nix a little bit more by making use of the `runCommand` cache we had to work around with the `dummy` attribute. There might be some way to use that to our advantage to always return the latest version of the saved data when calling the `GET` endpoint unless a `POST` call has happened. This could lead to a slow first `GET` call, but instant subsequent calls. Until a todo is added (Maybe we'll explore that in a part 2!).\n\nWhat I love about the Nix language is how simple it is. There is very little bloat and the core of the language can be learned really quickly (we only missed the `with` keyword in this post, we covered everything else!). There is definitely some potential for writing applications with this language. This was a fun adventure and a very good way to learn the Nix language, but it seems my dream of a Nix powered web application will have to wait until an interpreter makes its way on the Internets.","metadata":{"id":1705}}],["1706",{"pageContent":"---\ntitle: Revamping the GitHub Import Flow\nauthor: Victor Wang, Emilie Ma\ndate: 2022-07-21\ncover: https://blog-images.util.repl.co/nix-github-imports/nix-github-imports.png\ncategories: eng,product\nprofiles: VictorWang19,emilieatreplit\n---\n\nEarly last year, we made the [announcement that our infrastructure and Repls](https://blog.replit.com/nix) now had Nix baked in. Just a few months ago, we announced [all new Repls](https://blog.replit.com/powered-by-nix) would be Nix-based. And today, we're happy to announce that our GitHub imports flow is now also powered by Nix!\n\nFor a while now, the state of Git and GitHub integration within Replit has been a major pain point. One of the foremost problems was that while the rest of Replit jumped on the Nix train, repos imported from GitHub were still forced to use the old Bash style Repls. \n\nWe hear you: it's frustrating not to have the ability to use our [packager](https://docs.replit.com/programming-ide/installing-packages) or to go through a convoluted multi-step import experience. While many other parts of Replit have been getting frequent updates and reworks, the code powering everything Git was left behind. \n\nIt was thought that this change would be a rather significant and difficult change. The longer we pushed it off, the more adamant we became that we'd need to get it done right this time.\n\nWe finally decided that enough was enough - we dove deep into actually resolving this. And after some changes, we very quickly realised that the problem was not nearly as scary as we thought. After some tinkering, your GitHub imports should now be faster and more intuitive than ever!\n\nHere's a side-by-side comparison of the two flows:\n\n<video controls>\n    <source src=\"https://blog-images.util.repl.co/nix-github-imports/nix-github-imports-video.webm\" type=\"video/webm\">\n    <source src=\"https://blog-images.util.repl.co/nix-github-imports/nix-github-imports-video.mp4\" type=\"video/mp4\">\n</video>\n\n---","metadata":{"id":1706}}],["1707",{"pageContent":"<source src=\"https://blog-images.util.repl.co/nix-github-imports/nix-github-imports-video.mp4\" type=\"video/mp4\">\n</video>\n\n---\n\nWe originally thought we would have to do a significant amount of work to integrate Nix into existing language Repls. However, in reality, we realised we could actually do the opposite.\n\nWe would start with an existing Nix language template, clear out the unused files from within it that were associated with the template, then clone in the files from GitHub. In this manner, we could preserve the existing `.replit` and `replit.nix` files that were used by each language. And we could also preserve existing environment files that were necessary for certain languages (e.g. the `venv` folder for Python).\n\nFrom there, most of the existing work is already done. We then just needed a way to determine a language template to import into, which files from each template we could remove, and then finally perhaps some other small improvements to the GitHub import flow to make the user experience just a little bit nicer. \n\nTo figure out which language template to clone into, we originally considered looking into analyzing file extensions and content, but this quickly grew unfeasible as we realized the amount of edge cases that we'd have to handle. \n\nGitHub API to the rescue! The GitHub API exposes [an endpoint for the languages in a repository](https://docs.github.com/en/rest/repos/repos#list-repository-languages). We use this to automatically detect your repository's language to recommend the correct template.\n\nNext up, figuring out which files from each template to remove. We want to make sure any Repl-specific files in our templates would be overwritten by the repositories users imported. This meant getting rid of all the boilerplate files, like `index.html` in the HTML Template, and `main.py` in the Python Repl.","metadata":{"id":1707}}],["1708",{"pageContent":"As well, we wanted to make sure that users can work end-to-end with Replit and GitHub. This means that the experience from working in a Repl → pushing to GitHub → importing it back should be seamless. And now, it is! `.replit` and `replit.nix` configurations pushed to the repository are always reflected in the imported Repl. \n\nAmong our miscellaneous other improvements:\n- Revamped the styling of the configuration plugin\n  - More options to customize your run and compile commands, as well as an option to use our existing [Prybar](https://github.com/replit/prybar) interpreters\n- Detecting and recommending common run commands, like `npm run start` for Node.js projects\n\n---\n\nThis brings us one step closer to fully migrating Replit from our legacy [Polygott](https://github.com/replit/polygott) backend to a new Nix world. For more updates on our progress, check out [arewenixyet.com](https://arewenixyet.com/). \n\nWe hope unleashing the full power of Nix on repository imports gives users more power to fine-tune their development environment. We're excited to see what you create with this new flow!","metadata":{"id":1708}}],["1709",{"pageContent":"---\ntitle: Operating Principles\nauthor: Replit Team\ndate: 2022-03-22T00:00:00.000Z \ncover: https://art.replit.com/images/Random-artworkbots.png\ncategories: other\n\n---\n![replit robot artwork](https://art.replit.com/images/Random-artworkbots.png)\n\n## Mission first\nComputers are the most powerful tools to exist in the history of humanity. Sadly most people are mere consumers of these machines. Only a relative few–the professional software developer–can use this superpower to its fullest extent. It’s creating an unbalanced world where there are programmers, and then there are those who are programmed. The situation is analogous to literacy before the printing press, where only the powerful had access to books and written communication. The invention of the printing press led to democratic, scientific, and industrial revolutions, but it took about a century from creation to revolution, which meant that an entire generation of people had to grow up with new skills, outlooks, and ways of learning and communicating.\n\nReplit exists to bring the next billion software creators online. Our bet is that if more people can get coding easily, more people will code. If more people code, more people will be able to independently create and generate wealth on the internet, regardless of their personal circumstances. We’re excited about what that would mean for not only Replit’s future (good for business!) but also the impact we expect it will have on humankind (good for people’s happiness!). \n\nWe don’t know exactly what we will have to build to help us get there—it’s still very early days for Replit—but everything we do, every day, should push us closer and closer towards that future. If we advance our mission, then the world will be a much better place. Anything that distracts us from our mission will be ruthlessly cut. \n\n\n## Think radical","metadata":{"id":1709}}],["1710",{"pageContent":"## Think radical\nWhen we first put coding in the browser, people said it was stupid, and that nobody wanted what we were building. When we first gave away cloud computing for free, they said we’ll go broke, and that there was no way we could secure it. When we said we wanted to blur the distinction between learning and building, no one wanted to fund us, they said it’s two different things. Every step of the way,  we’ve questioned norms, we’ve taken contrarian technology bets that paid off years in the future, and we’ve hired people no one wanted to hire who are now industry leaders. We’re going to keep doing it even when maybe especially when people tell us it sounds crazy. \n\nHow do we do that? Run towards the thing that’s lighting you up inside. Do something for no other reason than it seems like a fun or cool or weird way to advance our mission. Have a perspective. Make things with style. Give it swag. Turn it into a meme. Give it zing. Add a burp sound at the end of the video. Be snarky. Make someone laugh. When you feel strongly about something, don’t take no for an answer. Build it anyway and see what happens after a few users give it a try. Don’t just work on it. Play with it. Don’t wait for someone to tell you what they want. No one asked us to remove the save button on the code editor, but it seemed like a totally unnecessary extra step. And when we removed it, it made things just a little bit smoother.","metadata":{"id":1710}}],["1711",{"pageContent":"We need to help each other keep that spirit up, too. Growing our team can’t mean slowing down or making it hard for what’s weird or wacky to win. If you see someone get a twinkle in their eye about something, tell them to drop what they’re doing and follow it for a day. If you see a freak flag at half-mast, hoist it up where it can really fly. If someone shares an idea they’re passionate about, and you think it sounds totally wrong, tell them to prove you wrong. When someone suggests something absolutely bonkers, call them a weirdo and mean it in a good way. When someone asks you for feedback, don’t give them all the small ways it won’t work, give them all the big ways it could. Our users–current and future–depend on it.\n\n\n## Move with urgency and focus\nWe've been able to achieve so much with so little because everyone at Replit takes ownership over their work. While we don’t consider collaboration a burden, we do think people can move fastest by working on their own. This is a lot of responsibility and requires a lot of intrinsic motivation, but we find it infinitely more satisfying to work this way. We also believe this is the kind of organization the best people want to work in. \n\nBe reliable. Follow through. Take extreme ownership. Hold your work to a high standard. Find solutions to problems. Don’t make excuses. Bias towards action. Refuse to be blocked. Be decisive. Build the prototype. Schedule the demo. Work hard. Break it down into smaller pieces and ship it. Do it today, not tomorrow. If that seems hard, as U.S. Navy Seal, Jocko Willink puts it, “Relax. Look around. Make a call.” Remember, you have everything you need to get things done. And if you feel like you don’t, your bright and talented colleagues can help.\n\nWe’re all here to ship great things in pursuit of our mission. There will always be an infinite number of things to do, fix, tweak, or experiment with. Let’s be an organization full of people that get shit done without being asked or told.","metadata":{"id":1711}}],["1712",{"pageContent":"## Read-Eval-Print loop (how we build)\nWe get our name from \"REPL\", the Read Eval Print Loop, a magical tool that turns the computer up from a static machine into a conversational being. It’s one of the first tools in the history of computing that put humans first. Coders love REPLs because it gets them up close and personal with their program every step of the way.\n\nThis is how we aspire to build everything at Replit:\n\n- Read: Be inquisitive, talk to users, look at data, dogfood—do everything you need to do to immerse yourself in the world we’re building. Also, research and read. See how others do things and why. Engage with your colleagues in intellectual conversations about the future and read about the history of computing. \n- Evaluate: You can collect all the data in the world and not understand any of it. Even worse, you can confuse yourself. We turn data into knowledge by thinking and evaluating deeply. We seek truth over validation.\n- Print: You can think forever and not have any effect on the world. You need to act. A bias towards action generates better results in aggregate. Polish when it matters. \n- Loop: The faster everything happens, the faster you learn, the faster you improve, and the sooner our users get to take advantage of our work. Shipping incrementally, and evaluating how things are going every step of the way. And then, doing it all over again. And again, and again, and again!\n\nWe use this process because it’s how we’ll ship the best stuff. We don’t just get it done at Replit. We get it done right. Our users deserve to have that. You deserve to build it. Plus, it’s more fun that way. \n\n\n## Seek pain\nPeople in our industry love to say “find what works and pour gas on it.” It’s easy advice to take–people like being in the zone of what’s working where they feel safe and cozy. At Replit, we run towards the tough stuff. We know how much there is to learn there.","metadata":{"id":1712}}],["1713",{"pageContent":"When something seems off, start asking questions. When something is painful, get curious about why. When something’s uncomfortable, dive in. Don’t ignore it. Don’t get defensive. Get inquisitive. Look at the data with clear eyes. Accept nuance. Ask for feedback constantly. It’ll make all of our work and relationships better. \n\nBe willing to polish to a painstaking extent. Most people are satisfied with getting something 80% of the way there. We’d rather take it to 110%. Get excited about working really, really hard to make something great. Take pride in your work. Obsess about things. Ruminate on them. Love the feeling of working on your toes. Get comfortable making sharp turns. We’ve had a lot of them already (cough, enterprise), and we’re going to have more. Expect to change. Enjoy the evolution.\n\nGoing where others are scared to go is our competitive advantage. \n\n\n## Replit is for people \nMillions of people are already using Replit to explore their own curiosities, realize their own goals, make things that matter, and have fun. We hope that’ll be true for millions, tens of millions, maybe even billions more. That’s a whole lot of people! \n\nReplit will always be a place that anyone who wants to build can, so long as they are operating within the laws of their jurisdiction and productive members of our community. It’s true for our user base and it’s true for our company. We shouldn’t expect to agree with the values or objectives of every customer. We shouldn’t make alignment with our beliefs a requirement to use our product. Our company was started by Palestinians. Many of our first customers were Israeli. We’re proud of that.\n\nIf we’re going to realize our mission, we need to be a place where all kinds of people, with all kinds of backgrounds, experiences, ideologies, and values are warmly welcomed. We are inclusive because we work hard to see and understand the talent in each other. We focus on what brings us together, never on what divides us.","metadata":{"id":1713}}],["1714",{"pageContent":"Our goal is to build the most talented team in the world. We work hard to recruit the best, including those from underrepresented backgrounds who don't have equal access to opportunities. We will always be open-minded, and strive to widen (but never lower!) the bar to usher in new ideas, new perspectives, and new ways of working that help us advance our mission.\n\nWe are diverse, and that's because we focus on talent and hard work. We are not impressed by fancy college degrees or padded resumes. If someone is a Replit team member, it's because we're excited about them, their work, and their contributions to the ecosystem. There is no door that isn’t the front door. No one gets special access or rules or treatment on the basis of anything other than their contributions to the company and our mission. No one ever has to guess whether there are any other motivations or criteria at play. We’ve found this way of working is better for everyone involved, because it helps us start all of our work together with a default foundation of trust and confidence in each other.\n\nWe must always be kind, caring, and thoughtful with each other, our users, and our broader community. We must be open-minded listeners, empathetic collaborators, and excellent communicators. We should all be people other people love to work with. We should all be building a product people love using, no matter who they are.\n\n![replit robot artwork](https://art.replit.com/images/Random-artworkbots.png)","metadata":{"id":1714}}],["1715",{"pageContent":"---\ntitle: \"Repl.it: the IDE That Grows—from Playgrounds to Fullstack Apps\"\nauthor: Amjad Masad\ndate: 2018-03-13T07:00:00.000Z\ncategories: product\n---\n\nAt Repl.it we come to work every day to explore a single idea—what if\nprogramming just worked? What if instead of fiddling around with packages,\nconfigurations, and mismatching versions, you just open your IDE and start\ncoding. What if developers can go from an idea to coding and shipping software\nwith no time in between. What if teachers who want to teach programming don't\nhave to also work as IT administrators. What if students can just code their\nhomework without having to set up the development environment on every computer\nthey wanted to code on.\n\nThere exists an inverse relationship between developer tool sophistication and\nthe getting started step. In other words, the more sophisticated our tools are,\nthe harder it is to set up. Some would go as far as to say that programming is\ngetting [harder to\nlearn](http://allendowney.blogspot.com/2018/02/learning-to-program-is-getting-harder.html). Given\nthat progress in programming and developer tools will continue we have to\nactively fight back against the ever-increasing complexity of setting up the dev\nenvironment.\n\nOnline coding playgrounds solve part of the problem by getting people to code as\nsoon as possible. They're pre-setup environments that make a lot of decisions\nfor you. They make it easy to get started, to learn to code, and maybe even\nprototype simple apps. However, up until now, they lacked universality which is\nkey to computing. In other words, you can only use one language, maybe a few\nframeworks but you're often limited by what you can do.\n\nToday, we're changing this. We want the best of both worlds, an IDE that starts\nout looking like a playground but can grow with you as soon as you require the\nextra power. Here is how the IDE can grow from a simple\nRead-Eval-Print-Loop to a full-stack application development environment:","metadata":{"id":1715}}],["1716",{"pageContent":"extra power. Here is how the IDE can grow from a simple\nRead-Eval-Print-Loop to a full-stack application development environment:\n\n1. Repl.it will always start out as a simple REPL, with a single file editor and\na console. You hit run, a new environment is created, your editor script is\nevaluated, and then you can interact with the result in the console.\n\n2. If you want to use files, write to files, split your code into modules, etc.,\nyou just do that and behinds the scenes the environment will switch to one\nwhere you're interacting with the filesystem. Your code will start to compile\nand run as you'd expect it when you run a project.\n\n3. Say you need to use a third-party library, merely find it (through our\nwidget, or your favorite package registry search), require/import it, and we'll\ntake care of installing it for you.\n\n4. Say, for example, you were coding in NodeJS, and that package you just\nrequired was\nExpressJS. You use it to listen on a port, any port you'd like; we'll detect that,\nhost your server/repl on your Repl.it subdomain (forever!) and that's it you're\ndeveloping/deploying an application.\n\nHere is a gif of what the entire workflow could look like from interacting with\nthe repl to deploy a server:\n\n![server](/public/images/blog/server.gif)\n\nWe might've buried the lede here but it's worth repeating: __opening a port in the\nrepl is deploying!__ You can deploy microservices, full-stack applications, or\neven a background compute job.\n\nWe also know that not all applications will grow incrementally so in typical\nRepl.it one-click-start fashion we've pre-setup a Django, Rails, Express, and\nSinatra apps. You can get started on the [languages](/languages) page.\n\n<a target=\"_blank\" href=\"https://repl.it/languages\"><img src=\"/public/images/blog/rails.png\"/></a>\n\nThis will also work for other kinds of applications. You can start out by\nexperimenting in the repl and end up building and training a machine learning","metadata":{"id":1716}}],["1717",{"pageContent":"This will also work for other kinds of applications. You can start out by\nexperimenting in the repl and end up building and training a machine learning\nmodel. As an example, [here](https://repl.it/@Jae_DukDuk/Simple-GAN) is a simple Generative Adversarial Network by\n[@Jae_DukDuk](https://repl.it/@Jae_DukDuk) that uses\nthe MNIST database and scikit-learn python package:\n\n<a target=\"_blank\" href=\"https://repl.it/@Jae_DukDuk/Simple-GAN\"><img src=\"/public/images/blog/mnist.png\"/></a>\n\n\n## A new computing primitive?\n\nOne of the most exciting things about building a platform is watching all the\ncreative and unexpected ways people use it. Repl.it serverless apps are unique in\nthat they're stateful and that the same repl, same protocol, same everything,\nthat you use in development is deployed and running in production.\n\nWhat we're seeing with some of our users is that they split out their\napplications into multiple repls. They might develop their website on one repl\nand have another repl be their logs and administrator interface. One of the more\ninteresting applications we've seen recently is a repl as a client-interface to a chat\napplication. The 13-year-old [@pylieas](https://repl.it/@pyelias) built a repl that's a client chat\ninterface to the backend that he made separately (which is becoming the\nunofficial chat applications for some of the young Repl.it programmers):\n\n<a target=\"_blank\" href=\"https://repl.it/@pyelias/Chatroom\"><img alt=\"replit chat client\" src=\"/public/images/blog/chat.png\"/></a>\n\nAfter getting [user-interest](https://repl.it/ibuiltthis/p/working-chatroom) @pyelias is starting to explore building a full\nstack application using Django.\n\nWe're excited to see where where our users will take this. If you have any\nfeedback for us, we'd love to [hear](/feedback) it.","metadata":{"id":1717}}],["1718",{"pageContent":"---\ntitle: PostgreSQL Database Preview Now Available On Replit\nauthor: Lincoln Bergeson, Xiaoyi Chen\ndate: 2023-01-23T17:15:00Z\ncover: https://blog.replit.com/images/postgres-launch/Postgres_Header_image.png\ncategories: product\n---\n![Header Image](https://blog.replit.com/images/postgres-launch/Postgres_Header_image.png)\n\nDatabases and web apps go together like peanut butter and jelly. In a word, they're inseparable. And despite all the amazing innovations in NoSQL data stores, often a good old relational database is the most reliable tool for the job.\n\nWe want to make it completely seamless to develop applications that need databases on Replit. Starting today, you can create and instantly begin to use PostgreSQL databases from within the Replit workspace.\n\nHere's how you use it. First, click the PostgreSQL icon in the Tools pane on the lower left hand side of the workspace.\n\n![DB_Image_1](https://blog.replit.com/images/postgres-launch/DB_Image_1.png)\n\nOr, you can open a new tab and select PostgreSQL from there.\n\n![DB_Image_2](https://blog.replit.com/images/postgres-launch/DB_Image_2.png)\n\nFrom this pane, you can provision a PostgreSQL database. Compared to most SQL offerings which can take several minutes, your database on Replit will be available within just a few seconds.\n\n![DB_Image_3](https://blog.replit.com/images/postgres-launch/DB_Image_3.png)\n\nFor now we are only offering one size of database: 100 cycles per day for 10GB. The database has 1 dedicated CPU and 4 GB of RAM to process your queries. \n\nOnce you've created the database, you can start using it! The `DATABASE_URL` environment variable will have your connection string. To connect to your database with NodeJS using the `pg` package, you might use a code snippet like this:\n\n```js\nconst { Client } = require('pg')\nconst client = new Client(process.env.DATABASE_URL)\n \nclient.connect()\n \nclient.query('SELECT $1::text as message', ['Hello world!'], (err, res) => {\n  console.log(err ? err.stack : res.rows[0].message) // Hello World!","metadata":{"id":1718}}],["1719",{"pageContent":"client.connect()\n \nclient.query('SELECT $1::text as message', ['Hello world!'], (err, res) => {\n  console.log(err ? err.stack : res.rows[0].message) // Hello World!\n  client.end()\n})\n```\n\nWe've also created a SQL explorer that you can use to write SQL statements and see the contents of your database.\n\n![Recap Header Image](https://blog.replit.com/images/postgres-launch/DB_SQL_Explorer.mp4)\n\nIf you've purchased Ghostwriter, AI-based code completion for SQL will be available in the statement editor.\n\nFor more information on your PostgreSQL database, check out:\n- [The docs](https://docs.replit.com/neon-database/intro)\n- [Learn how to use the database](https://replit.com/learn/intro-to-postgresql)\n- [Try building a Discord Bot with sentiment analysis](https://replit.com/@DavidAtReplit/Discord-Bot-for-Sentiment-Analysis)\n\nUnder the hood, this product is powered by our friends at [Neon](https://neon.tech/) who have created a lightning-fast serverless database. The database will go to sleep after 5 minutes of inactivity. Most clients should handle the reconnection seamlessly.\n\nIn the near future we plan to offer much more flexibility and customizability in your database options. You'll be able to choose variable amounts of storage, different compute configurations, and even usage-based pricing, where you only pay for what you actually use.\n\nIf you experience any issues with your database at all, please post in [the forum](https://ask.replit.com/) and we will get back to you as quickly as possible. Let us know what you think!","metadata":{"id":1719}}],["1720",{"pageContent":"---\ntitle: \"Your New Replit Profile\"\nauthor: \"Søren Rood and Omar Abdul-Rahim\"\ndate: 2022-04-18\ncover: https://blog.repl.it/images/profile2.png\ncategories: product\n---\n\nYou may have noticed that the \"My Repls\" and \"profile\" pages look different. We decided to combine these surfaces into one unified page. The new profiles are fresh, more social, and more customizable than ever before.\n\nGo take a second and customize your profile! Add links, a banner, and pin your favorite Repl.\n\n### What changed?\n\nWe combined the My Repls and profile pages\n\n<iframe src=\"https://www.youtube.com/embed/LmnrvYP9ivU\" title=\"Profile 1\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nLive presence\n\n<iframe src=\"https://www.youtube.com/embed/X2XkNhsVgxo\" title=\"Profile 2\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nRead and leave comments straight from the profile\n\n<iframe src=\"https://www.youtube.com/embed/pEtkgq8SR2A\" title=\"Profile 3\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nPublishing to the community is only a few clicks away\n\n<iframe src=\"https://www.youtube.com/embed/9bkQIXbVY5s\" title=\"Profile 4\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nAdd your social links (and your discord username) so people know where else to find you\n\n<iframe src=\"https://www.youtube.com/embed/UnVdBPCq--I\" title=\"Profile 5\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\nSet a profile banner\n\n<iframe src=\"https://www.youtube.com/embed/hHnIlpoyU6Q\" title=\"Profile 6\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\n### What's next?\n\nOn April 1st, we launched the new profile to 100% of users.\n\nWe'll continue to iterate and make the experience better throughout the year. Some related features/ideas that are on our mind include:\n\n1. Letting you follow other users.","metadata":{"id":1720}}],["1721",{"pageContent":"We'll continue to iterate and make the experience better throughout the year. Some related features/ideas that are on our mind include:\n\n1. Letting you follow other users.\n2. We'd like to add more Repl sorting and filtering features. We want it to be really easy to find things that you make. Adding sorting and filtering would also make the experience better for others who are viewing content on your profile.\n3. We want to make the pinned Repl area more customizable. That could look like: resizable showcase/pinned Repl area, automatically starting the repl when people visit your profile (so they don't have to click \"run\"), etc.\n\nIf you helped with any early prototypes, participated in any user interviews, or were a part of the explorer beta, we want to say thank you! We could not have made it this far without your help.\n\nIf this project seems interesting to you, consider checking out our [careers](https://replit.com/site/careers) page. :)\n\n### Some profiles from our community!\n\n- [@Bookie0](https://replit.com/@Bookie0)\n- [@UltimateCoder40](https://replit.com/@UltimateCoder40)\n- [@NathanNat](https://replit.com/@NathanNat)\n- [@MrVoo](https://replit.com/@MrVoo)\n- [@VapWasTaken](https://replit.com/@VapWasTaken)\n- [@HyperAlternative](https://replit.com/@HyperAlternative)\n- [@RandomCodingBoy](https://replit.com/@RandomCodingBoy)\n- [@CodingMaster398](https://replit.com/@codingMASTER398)\n- [@LilyanaGipe](https://replit.com/@LilyanaGipe)\n- [@IcemasterEric](https://replit.com/@IcemasterEric)\n- [@GunesSunar](https://replit.com/@GunesSunar)\n- [@CoolCoderSJ](https://replit.com/@CoolCoderSJ)\n- [@CodingCactus](https://replit.com/@CodingCactus)\n- [@JDOG787](https://replit.com/@JDOG787)\n- [@MUHAMMEDATIF1](https://replit.com/@MUHAMMEDATIF1)\n- [@TheOceanFace](https://replit.com/@TheOceanFace)","metadata":{"id":1721}}],["1722",{"pageContent":"---\ntitle: The New Publish Flow\nauthor: Søren Rood\ndate: 2022-06-02\ncover: https://blog.repl.it/images/publishing/new.png\ncategories: product\n---\n\n**TL;DR - sharing stuff you make on Replit is now easier than ever.**\n\nReplit has the most powerful primitive of any social platform that has ever existed. On Twitter, Instagram, Facebook, and many others, you only have the option of sharing text, images, and videos.\n\nOn Replit, the core primitive is a computer. The _thing_ that's actually shared on the Replit social network is a runnable machine.\n\nWe've had users build and share games, personal websites, trading bots, password crackers, operating systems, and even MacOS clones.\n\nIn the past, the process of sharing your work on Replit has been buggy and confusing. The old publish flow didn't make much sense, especially to new users. It used to be unclear what \"publishing\" really even did.\n\nI'm excited to share that we've completely revamped the publish flow. Not only is the sharing experience more streamlined, but creators have more control over how people actually consume their work.\n\n### New flow in action\n\n<iframe src=\"https://www.youtube.com/embed/3D3AItsaFPQ\" title=\"Publishing Flow Demo Video\" width=\"720\" height=\"480\" style=\"max-width: 100%\"></iframe>\n\n### Cover page options\nOne new feature we added to the publish flow is the ability to customize the cover page. Creators can now choose between a photo and a file to display on their Repl's cover page. Here are examples of both options:\n\nPhoto:\n<img src=\"https://blog.repl.it/images/publishing/photo.png\" alt=\"Cover Photo Example\" width=\"100%\" style=\"width:100%\"/>\n\nFile:\n<img src=\"https://blog.repl.it/images/publishing/file.png\" alt=\"Default File Example\" width=\"100%\" style=\"width:100%\"/>\n\n### Sharing updates","metadata":{"id":1722}}],["1723",{"pageContent":"File:\n<img src=\"https://blog.repl.it/images/publishing/file.png\" alt=\"Default File Example\" width=\"100%\" style=\"width:100%\"/>\n\n### Sharing updates\nWe also added the ability to share updates. If you publish something and decide to change it in any way, you now can \"share an update\" to tell your viewers what changed. Creators can share updates from the workspace and the Repl's cover page. This is what a cover page update looks like:\n\n<img src=\"https://blog.repl.it/images/publishing/update.png\" alt=\"Update Example\" width=\"100%\" style=\"width:100%\"/>\n\n### Templates\nOne more thing -- now _anyone_ (yes, anyone) can publish templates! In the last slide of the publish flow, you can tick a checkbox called \"publish as template\".\n\nWhen you do this, your Repl will be published to https://replit.com/templates where anyone can use it as a starting point for their next project.\n\nIf you want to make money for creating templates on Replit, check out our [template jam](https://blog.replit.com/template-jam)!\n\n---\n\nIf you have any questions, please feel free to reach out to [Søren](https://twitter.com/roodsoren) on Twitter.","metadata":{"id":1723}}],["1724",{"pageContent":"---\ntitle: Introducing Step Debugging for Python\nauthor: Amjad Masad\ndate: 2016-11-28T08:00:00.000Z\ncategories: product\n---\n\n## Debug your Python3 programs from your browser\n\nAt Repl.it, our goal is to make programming more accessible, and as part of this\nwe aim to provide the full power of popular programming environments with no\nsetup time. And I don't think it's an understatement to say that debugging is\nthe majority of what we, as programmers, do. [](preview end)\n\nThat's why today we're making it possible to step-debug through your Python 3\ncode right from the browser. We've built a new debug pane that makes it easy\nstep in, out, over, and resume your code. All the common operations a typical\ndebugger would do.\n\n![debugger](https://i.imgur.com/oerWaQR.gif)\n\nTo get started:\n\n* write your code\n* click the \"debug\" button on the top right corner of the editor\n* a debug pane will pop-up underneath the console\n* this allows you step through your code\n\nNote that this is still in Beta and we have a lot we want to improve on it. The\nobvious thing that we'll be adding shortly is support for breakpoints. But\nthat's not all, we want this to be on parity with the best debuggers in\nindustry:\n\n1. Add breakpoint support.\n2. Add a scope pane to see what variables are in scope and what are their values.\n3. Evaluate expressions in context.\n4. Add watch expressions.\n\nGive it a spin on this recursive [factorial program](https://repl.it/E9oT).\n\nLet us know if you hit any bugs or if you have any feature requests. Happy debugging!\n\np.s. [we're hiring!](/site/jobs)\n\n_Thanks to [Thomas Ballinger](https://twitter.com/ballingt) for his help in designing and implementing the\nremote Python debugger service._","metadata":{"id":1724}}],["1725",{"pageContent":"---\ntitle: \"Python for Beginners: Interpreting My Amazon Spending with a Repl, Part Three\"\nauthor: Brittany Pirkle\ndate: 2022-\ncategories: edu\n---\n\nI know you have been on the edge of your seats wondering why in the world a repl is better than a spreadsheet to calculate so much data?! In case you need a refresher, I analyzed my Amazon spending for 2021 using a [Python repl](https://blog.replit.com/python-for-beginners) and with just a few lines of code I could discern a variety of answers about my spending. Not only did I find out that I am spending *way* too much money on Amazon, but I also came to the conclusion of *why* a repl is better than a spreadsheet (read to the bottom to find out).\n\nJust to recap, I used Pandas as the [package manager](https://docs.replit.com/programming-ide/installing-packages) to easily import a csv file and analyze the data on a myriad of data points. The last component to evaluate is spending over time by analyzing how much money was spent on a given day through a bar graph. The bar graph will show the amount spent and the corresponding order date. First, the order dates need to be converted (from my csv) into a format that Python can recognize. Once again, Pandas makes this easy.\n\nFirst, write `.pd.to_datetime()` and then add the column to be modified. In this case, 'order date.'\n\n\n'Order Date' is now in a format compatible with Python. However, I noticed that the time stamp was also included. For this purpose, I do not want the timestamp. I need to convert ‘datetime’ to ‘date' using `.dt.date`.\n\n\nNext is writing the code that creates the bar graph with a simple `df.plot.bar` and setting the x (horizontal) and y (vertical) coordinates. The ‘x’ is the date the order was placed and ‘y’ is the amount spent. I also want to ensure I have the rotation set to 90.\n\n`df.plot.bar(x='Order Date', y='Item Total', rot=90,)`","metadata":{"id":1725}}],["1726",{"pageContent":"`df.plot.bar(x='Order Date', y='Item Total', rot=90,)`\n\nHowever, the graph is very small and essentially illegible. This can be fixed by adding a figure size that will adjust the width and height of the graph with `figsize()`.  I started with 10 as the width and 20 as the height and then did some trial and error to determine `figsize=(14,30)` was the best size for this data set.\n\n\n\nThe final step to add more organization is to group the orders that were purchased on the same day into one data point. Remember, the goal is to map how much money was spent each *day*. Once again, Pandas is perfect for this with the built-in function: `df.groupby()`. I want to group all data from the ‘Order Date’ into a single column on the bar graph. To do this, I find the sum of the `Item Total` for each `Order Date`. For example, if I purchased three items on August 23, I can group all three item totals into a single value to display on the graph. I am grouping the data by ‘Order Date’ so I will write `df.groupby('Order Date')`. Next, find the sum of the ‘Item Total’ by writing `.sum()[\"Item Total\"]`. Of course, add a variable. ‘Daily_Orders.df’ works fine.\n\n\n\nWith the dates correctly reflected without the timestamp and the orders grouped by day, the graph can be re-created by changing `df.plot.bar` to `daily_orders.plot.bar` to depict a much cleaner graph that can be used for data interpretation.\n\n## Lessons Learned:\n\nAt the beginning of this project, I posed the question that most people are probably thinking. **“That seems like too much work. Why not just use a spreadsheet?”** \n\nHere is why I think a repl is a better option for data analysis:","metadata":{"id":1726}}],["1727",{"pageContent":"Here is why I think a repl is a better option for data analysis:\n\n\n- **Coding is more powerful**: Excel formulas can easily become overwhelming and convoluted. Most of the time, I am not sure what the formulas mean and am mindlessly typing numbers and symbols. With coding, I can see the patterns and easily decipher the data as “if/then” statements, instead of random formulas. I actually know what I am looking at and what the code is expected to do to the data set.\n\n- **Coding is transferable**: Now that I have created this project, I can use the code as a template for other data sets. And of course, the beauty of Replit allows me to fork this repl. I can easily upload a different .csv file and now this code can be transferred to the new data set. I could analyze my grocery spending or water bill with little changes to the code.\n\n- **Coding is better for multiple data sets**: There is no need to copy/paste and merge various spreadsheets into one or have multiple tabs and data sheets. Information can easily get misconstrued, omitted, or duplicated. Imagine the headache that comes with trying to merge multiple data sets into one graph?!\n\n- **Coding is quicker**. Obviously, the first time around takes longer, but now I can easily use this same process with other data.\n\n- **Coding is more intuitive**: There is way less opportunity for human error with a repl. If there is a syntax error (caused by my human error), I am alerted. If my code is written incorrectly, my repl will not run. Yes, you can also get error messages with formulas within a spreadsheet, but it is much more difficult to pinpoint where the error is and what is wrong.","metadata":{"id":1727}}],["1728",{"pageContent":"- **Coding is way more fun**: Have you had flashbacks to computer class in school where you had to merge data, use formulas, create graphs, etc. and it all seemed so confusing, dull, and pointless?! Replit takes away the confusion and with each new line of code you can easily track your progress. And isn't it much more fun to brag about lines of code you wrote instead of a boring spreadsheet. \n\n\nWhat other projects would you like to see to help you develop coding superpowers?","metadata":{"id":1728}}],["1729",{"pageContent":"---\ntitle: Introducing the Python package cache\nauthor: Luis Héctor Chávez\ndate: 2021-03-19T19:45:00.000Z\ncategories: infra\n---\n\nFiguring out how to install third-party libraries can derail people from learning to code or starting a new side project. We built the [Universal Package Manager](https://blog.replit.com/upm) (UPM for short) to save people from having to think about package installation at all. Just import the library, press run, and UPM will install it into your repl!\n\nEvery time you run a repl or a repl wakes up, UPM checks to see if it needs to download and install any dependencies. This is handy (no matter what's gone inside your repl, it will always have the dependencies it needs) but slow: UPM needs to download typically tens of megabytes worth of packages, extract them on the local filesystem, and sometimes also pre-compile them for better runtime performance.\n\nOr at least it used to be slow until yesterday when we enabled the Python package cache, so now the most popular Python packages are pre-populated in pip's cache (`/home/runner/.cache/pip`), so the download step is going to be mostly gone for the _vast_ majority of Python repls! It also uses pre-built wheels as much as possible to avoid even having to pre-compile code.\n\n## How does it work?\n\nWe had two goals in mind when we started designing this:\n\n1. it should be as transparent as possible, which meant that users would still be able to add packages to the local cache while avoiding copying files around (which would have defeated the purpose of using a cache in the first place), and\n2. each repl's cache should be independent of each other, to prevent cross-repl cache attacks (pollution, poisoning, etc.).","metadata":{"id":1729}}],["1730",{"pageContent":"2. each repl's cache should be independent of each other, to prevent cross-repl cache attacks (pollution, poisoning, etc.).\n\nTo achieve both goals, we are using the same technique that Docker uses to be able to share files between images: the [Overlay Filesystem](https://www.kernel.org/doc/html/latest/filesystems/overlayfs.html). On each machine that [runs repls](https://blog.replit.com/killing-containers-at-scale#replit-architecture), we have a read-only snapshot of the contents of the cache after installing the most popular packages. The snapshot is read-only bind-mounted into each repl into `/mnt/cacache`. We then perform an Overlay-mount into the directory where the cache expects it to be (`/home/runner/.cache/pip`), using `/mnt/cacache/pip` as the \"lower\" directory and  `/mnt/scratch/cacache_pip/upper` (a user-writable directory) as the \"upper\" directory. This means that the shared files cannot be modified, and each repl has a [copy-on-write](https://en.wikipedia.org/wiki/Copy-on-write) view of the cache.\n\nIn order to keep the cache contents fresh, we gather stats about packages being downloaded from [PyPI](https://pypi.org/), and every week we'll rebuild the cache with the list of most popular pip packages.\n\nThanks to this, the average time to install packages has gone down ~40% across all [Always On](https://blog.replit.com/alwayson) repls.\n\n![Always-on package time-to-install](https://blog.replit.com/images/python-package-cache/packages-time-to-install.png \"The cardinal sin of data visualization: unmarked axes\")\n\n### \"cacache\"?","metadata":{"id":1730}}],["1731",{"pageContent":"![Always-on package time-to-install](https://blog.replit.com/images/python-package-cache/packages-time-to-install.png \"The cardinal sin of data visualization: unmarked axes\")\n\n### \"cacache\"?\n\nThe name is derived from [**C**ontent-**A**ddressable storage](https://en.wikipedia.org/wiki/Content-addressable_storage) (plus \"cache\"). One of the properties that is needed for all this to work is that when a package is installed into the system, it is placed in a stable location in the filesystem that depends on the _contents_ of the package (typically the hash of the contents). Every time a package is going to be installed, the package installer (`pip` in the case of Python) asks the package server for the metadata about the package, which includes the hash of the package. This hash is used to find whether the file is already in the cache, and the local copy is used instead of downloading a new one. Furthermore, since the hash of the contents of the package is already available, the contents can be checked for integrity by comparing the hash of the local copy with the expected one!\n\n[pip](https://pip.pypa.io/en/stable/) (for Python), [npm](https://www.npmjs.com/) (for Node.js), and [Maven](https://maven.apache.org/) (for Java) all use content-addressable caches.\n\n## What's next?\n\nWe're going to give the same treatment to Java (Maven packages) and JavaScript (npm packages) repls in the next couple of weeks to complete the three most popular languages. Plus a mysterious \"language\" that will be unveiled soon.\n\nHappy (Python) repling!","metadata":{"id":1731}}],["1732",{"pageContent":"---\ntitle: Introducing Turtle Graphics For Python\nauthor: Amjad Masad\ndate: 2016-10-04T07:00:00.000Z\ncategories: product\n---\n\nEver since the [LOGO programming\nlanguage](https://en.wikipedia.org/wiki/Logo_programming_language) educators\nhave been using [Turtle Graphics](https://en.wikipedia.org/wiki/Turtle_graphics)\nto demonstrate the power of programming to their students while making it fun and\ninteresting.[](preview end)\n\nIn fact, my first real programming experience was when I was 6 years old\nlearning LOGO at school. I learned how to program the turtle to draw a square\nand a triangle which I then put together to create a house. However, I was frustrated\nthat I had to keep repeating the code to create a village made from\nmultiple houses -- and that's how discovered loops! It's a natural way for\nchildren to learn programming. Here is an [example turtle graphic house](https://repl.it/DoYJ/1) in\nrepl.it :)\n\n![python turtle](https://i.imgur.com/1hG5cuf.gif)\n\nSo far, we've been focused on what we think was largely missing from the web:\nrunning programs that typically require installing a compiler or an interpreter\non your computer. However, now that we've\nbuilt [tools](https://repl.it/classroom) for teachers to bring programming to\ntheir classroom, many want to use turtle graphics as part of their\ncirriculum. And that's why we're excited to introduce [Turtle Graphics](https://docs.python.org/2/library/turtle.html)\nsupport for Python.\n\nTo get started just select [`Python (with Turtle)`](https://repl.it/languages/python_turtle) from the list of languages,\nimport the `turtle` module and start drawing!\n\n_The Python Turtle implementation is powered by the [Skulpt open source project](http://skulpt.org)._","metadata":{"id":1732}}],["1733",{"pageContent":"---\ntitle: Rails in 30 seconds\nauthor: Amjad Masad\ndate: 1-30-2021\ncover: https://rubyonrails.org/images/rails-logo.svg\ncategories: product\n---\n\nPhilosophically, Replit and Rails are incredibly aligned. We both exist to remove excessive configuration and complexity that stands in the way of building things. However, for a long time, it bothered me that Replit didn't work well with Rails because we focus on small and lightweight projects. Recently, our infrastructure has gotten much more powerful, and I decided to give Rails another spin. It turns out it's not only possible to do Rails on Replit; it's quite a delightful experience. It takes less than 30 seconds from starting a project to seeing the welcome screen:\n\n<video controls webkit-playsinline=\"true\" playsinline=\"\" src=\"/images/rails/rails.mp4\"></video>\n\nThere is no magic under the hood. You can view the [template here](https://repl.it/@templates/Rails). I merely followed the getting started guide on the rails site and had to do only a couple of modifications to make the development website show up in the iframe on Replit (detailed in the readme file).\n\nGive it a spin, and let me know what you think!","metadata":{"id":1733}}],["1734",{"pageContent":"---\ntitle: Repl History\nauthor: Amjad & Faris Masad\ndate: 2017-12-11T08:00:00.000Z\ncategories: product\n---\n\nAt Repl.it we focus on simplicity, speed, and, most importantly,\nreliability. If you're using Repl.it as your primary or secondary IDE we want\nyou to be confident that the time you invest working on your code will never go\nto waste.\n\nBuilding on our [autosave feature](new_repls), the underlying infrastructure --\nevery repl has its own filesystem now -- we've built an automatic revision\nsystem that keeps every revision of code you've ever written stored. The trouble\nwas, as many of you pointed out, there was no easy way to manage it. That's why\ntoday we're excited to introduce Repl History, a page where you can view files,\ndrill down to view old revisions by day or by change, diff them against latest,\nand finally easily restore them.\n\nHere is a quick gif walkthrough:\n\n![history](/public/images/blog/history.gif?123)\n\nYou can access this from your repls dashboard or from individual repls by\nclicking on the saved/history button.","metadata":{"id":1734}}],["1735",{"pageContent":"---\ntitle: Making Repl Identity More Accessible\nauthor: Matt Iselin\ncategories: eng\ncover: https://blog.replit.com/images/rust_cover.png\nprofiles: mattiselin\ndate: 2023-01-10T22:00:00Z\n---\n\nIn August last year, we announced [Repl Identity](https://blog.replit.com/repl-identity), a signed identity for every Repl that your code can use to authenticate other Repls when communicating with your APIs and services.\n\nFor a quick refresher, you can try out the [demo](https://replit.com/@mattiselin/repl-identity#main.go) that decodes the identity token and outputs it to the shell.\n\nWe have a [Go package](https://github.com/replit/go-replidentity) for this already ([docs here](https://pkg.go.dev/github.com/replit/go-replidentity)), but there's a limited selection of bindings for other languages. To that end, we're rolling out a command-line tool in every Repl that allows you to use features like Repl Identity in any language that can run a subprocess.\n\nHere's a quick demo that you can try in our own Repls:\n```shell\n$ TOKEN=$($REPLIT_CLI identity create -audience=\"the target repl id\")\n$ $REPLIT_CLI identity verify -audience=\"the target repl id\" -token=\"${TOKEN}\" -json\n{\n  \"replid\": \"ff2d906a-0a47-482b-9067-1ac0a078c394\",\n  \"user\": \"mattiselin\",\n  \"slug\": \"replit-cli\",\n  \"aud\": \"the target repl id\"\n}\n```\n\nCheck out this example [Python Repl](https://replit.com/@mattiselin/repl-identity-cli#main.py) that creates and verifies a Repl Identity token:\n\n<iframe frameborder=\"0\" width=\"100%\" height=\"500px\" src=\"https://replit.com/@mattiselin/repl-identity-cli?embed=true#main.py\"></iframe>\n\nYou can wrap this command in your code to do token creation and verification without needing a direct language binding.\n\nEnjoy!","metadata":{"id":1735}}],["1736",{"pageContent":"---\ntitle: Understanding Repl Resource Utilization\nauthor: Lincoln Bergeson\ncategories: eng\ndate: 2022-1-31T20:00:00Z\ncover: https://blog.replit.com/images/rust_cover.png\n---\n\nEvery computer on earth needs these three essential resources in some form:\n\n1. Processor\n2. Memory\n3. Storage\n\nThe computers we provide for Replit users, or Repls, have access to a virtual CPU, an allocation of RAM, and a virtualized filesystem.\n\nIt’s important to understand resource utilization within the context of the software that you’re writing. To this end, we have started rolling out a new component in the file tree to make this more transparent and visible to all of our users.\n\n<div class=\"max-width-75\">\n\n![example of the repl resource component in action](https://blog.replit.com/images/repl-resources.png)\n\n</div>\n\nThis component can help you figure out why your repl is running slowly or otherwise misbehaving.\n\nBut what do the numbers actually mean?\n\n## CPU\n\nThere are many different types of processors, including GPUs, TPUs, microcontrollers, and more. These are specialized devices that serve distinct purposes, such as displaying graphics, machine learning, and powering smart devices.\n\nIn addition to any other processors they may have, all modern personal computers have a CPU, or central processing unit. The CPU is responsible for executing instructions and running programs. In a sense, it is the brain of the computer.\n\nToday, repls run on Google Cloud Platform and use Intel-compatible CPUs. For security and economic reasons, we don't give users access to the entire CPU. Instead, we host repls inside sandboxed Linux containers running on virtual machines that partition the CPU into virtual CPUs, or vCPUs.\n\n### What does it mean to \"use\" the CPU?\n\nThe CPU operates by executing machine instructions via the [fetch-execute cycle](https://en.wikipedia.org/wiki/Instruction_cycle).","metadata":{"id":1736}}],["1737",{"pageContent":"### What does it mean to \"use\" the CPU?\n\nThe CPU operates by executing machine instructions via the [fetch-execute cycle](https://en.wikipedia.org/wiki/Instruction_cycle).\n\nModern computers are highly complex and typically need to run more than one program at a time. To accomplish this, the computer runs an operating system which has exclusive control over how all of the applications on a computer share the CPU. The code within the OS that is responsible for allocating CPU time to user applications is known as the [process scheduler](https://en.wikipedia.org/wiki/Completely_Fair_Scheduler).\n\nThe details of process scheduling are complex, but the beauty of an operating system is that a user, you don't need to know how it all works under the hood. All you need to know to get started is that the program you're trying to run will get its fair share of the underlying processor, just like everyone else.\n\n### Ok, so what's CPU \"utilization\"?\n\nLinux tracks the total CPU time used by the entire system in nanoseconds in a file in the [sysfs pseudo-filesystem](https://en.wikipedia.org/wiki/Sysfs). Try reading this file in a shell with `cat /sys/fs/cgroup/cpu/cpuacct.usage`.\n\nThe calculation for utilization simply takes the difference in time spent executing instructions by the CPU, or CPU time, over a given interval and divides it by the actual time that passed, or wall time, over that same interval.\n\nYou also need to divide this number by the CPU cores that are available on the system. This way, you won't have percentages over 100%, and if your CPU utilization is at 100%, it reflects your intuition that the system is as busy as it can possibly be.\n\nIn addition to the resource monitoring component in the file tree, you can run programs such as `top`, `htop`, `mpstat`, and `sar`, all of which you can install in a Nix repl.\n\n### How many CPU cores do I get on Replit?\n\nFree plans get 0.5 vCPUs allocated to their Repls. Hacker repls get 2 vCPUs, and Boosted repls are allocated 4 vCPUs.","metadata":{"id":1737}}],["1738",{"pageContent":"### How many CPU cores do I get on Replit?\n\nFree plans get 0.5 vCPUs allocated to their Repls. Hacker repls get 2 vCPUs, and Boosted repls are allocated 4 vCPUs.\n\nIf you find yourself running up against resource limits frequently as a free user, consider [purchasing Cycles](https://replit.com/cycles) and adding a Boost to your Repl for 8x more CPU to work with. If you're ready for Hacker, [subscribing to Hacker](https://replit.com/pricing) will instantly upgrade all your programs to have 4x as much CPU and you'll have 5 Boosts to add to any Repl.\n\n## RAM\n\nRAM stands for Random Access Memory.\n\nIn the old days, you might have used a clunky device such as a [magnetic drum](https://en.wikipedia.org/wiki/Drum_memory), and it would have to literally spin a metal cylinder around in order to access a memory location. Today, we use lightweight sticks of [DRAM](https://en.wikipedia.org/wiki/Dynamic_random-access_memory), or Dynamic RAM, that can read or write to any memory location instantly with a tiny electronic signal.\n\nMemory is used to store any values that a program needs access to at runtime. For example, a file that is currently open in a text editor is stored in memory.\n\nHere are some more examples:\n- This website is being stored in your computer's RAM right now\n- If you're playing music, it is buffering through your system's memory\n- Any currently running programs have access to RAM to store whatever they need\n\nRAM is a lot easier to understand than CPU. To put it simply, the more programs you run, the more RAM your system will need. However, some programs (*cough* [Google Chrome](https://c.tenor.com/ma0A_HhmKhEAAAAM/chrome-ram.gif) *cough*) use more memory than others. Unfortunately as a user, you have limited control over how much memory your applications use.\n\n### How much memory do I get on Replit?\n\nAll free repls are allocated 1 GiB of memory. Hacker repls have 2 GB by default, and 4 GB when boosted.","metadata":{"id":1738}}],["1739",{"pageContent":"### How much memory do I get on Replit?\n\nAll free repls are allocated 1 GiB of memory. Hacker repls have 2 GB by default, and 4 GB when boosted.\n\nIf you try to use more memory than you have available, the application using too much memory will be terminated. You can test this by running the following program in a C repl:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main(void) {\n  for (int i = 0; i < 1000000; i++) {\n    malloc(1024 * 1024);\n  }\n  return 0;\n}\n```\n\nThis is a simple loop that tries to allocate a large amount of memory. If you run this, you'll see output such as the following:\n\n    $ ./main\n    signal: killed\n\nThe new resource monitoring component will help you see how much memory your repl is using. The free tier of 1 GB is enough for most basic programs, but power users may want to consider [purchasing Cycles](https://replit.com/cycles) for Boosts or [upgrading to Hacker](https://replit.com/pricing) to run into these resource limits less frequently.\n\n## Storage\n\nStorage is the easiest resource to understand. Each repl gets a 1 GB filesystem on an SSD, or Solid State Drive. SSDs are becoming the default in nearly all laptops and personal computers because they are so much faster than traditional hard drives, or HDDs.\n\nYou can view how much total storage you're using in the new resource monitoring component. You can also type the command `du -sh ~/$REPL_SLUG` in the shell of any repl and see how much space your files are taking up.\n\nTo see how much space an individual file may be using, you can use the `ls` command. Navigate to any folder with `cd`, and type `ls -lh` in the shell:\n\n    $ ls -lh\n    total 152K\n    -rw-r--r-- 1 runner runner 132K Apr 12  2021 db.sqlite3\n    -rw-r--r-- 1 runner runner  647 Jan 27  2020 manage.py\n    drwxr-xr-x 1 runner runner  108 Apr 12  2021 mysite\n    -rw-r--r-- 1 runner runner 2.1K Jan 14  2021 poetry.lock\n    drwxr-xr-x 1 runner runner   46 Jan 27  2020 __pycache__\n    -rw-r--r-- 1 runner runner  294 Jan 14  2021 pyproject.toml","metadata":{"id":1739}}],["1740",{"pageContent":"-rw-r--r-- 1 runner runner 2.1K Jan 14  2021 poetry.lock\n    drwxr-xr-x 1 runner runner   46 Jan 27  2020 __pycache__\n    -rw-r--r-- 1 runner runner  294 Jan 14  2021 pyproject.toml\n    -rw-r--r-- 1 runner runner 1.3K Apr 12  2021 README.md\n    -rw-r--r-- 1 runner runner    7 Jan 27  2020 requirements.txt\n    drwxr-xr-x 1 runner runner   20 Apr 12  2021 templates\n    drwxr-xr-x 1 runner runner  158 Apr 12  2021 todo\n\nYou can see that db.sqlite3 is taking up 132 KB of space, manage.py is using 647 bytes, the folder as a whole is using 152 KB, and so on.\n\nDue to some limitations in our platform, we are unable to provide more than 1 GB of storage in any repl. We are actively working on improvements that will allow us to give users arbitrarily large filesystems to work with.\n\nIf you're running out of storage space in your repl, you can delete some files or use an external storage provider such as [GCS](https://cloud.google.com/storage).\n\n## Conclusion\n\nIf you made it the end of this post, congratulations! You are well on your way to understanding how the system works under the hood.\n\nWe're always trying to find ways to give people as many resources as possible, for as inexpensively as possible. In one sense, allocating resources to users in an efficient and accessible way is the core problem we are solving as a company.\n\nThe new resource utilization component gives users a better window into how their repl is operating under the hood. There's so much more work like this to do -- if this post interested you, [consider joining us](https://replit.com/site/careers)!","metadata":{"id":1740}}],["1741",{"pageContent":"---\ntitle: See Your Currently Running Repls\nauthor: Joe Thom, Lincoln Bergeson\ndate: 2022-11-11T12:00:00Z\ncover: https://blog.replit.com/images/analytics/thumbnail.jpg\ncategories: product,infra\n---\n\nHave you ever wondered which of your repls are running at a given time? Do you know which ones are currently serving traffic, and which ones need to be woken up? Do you wish you had more visibility into when your repls have stopped in the past and when they've been restarted?\n\nIf any of the above describe you, we have just launched a new feature made especially for you: the Repl Status Manager.\n\n![](/public/images/status-overview.png)\n\nTo use it, go to the Status tab on the My Repls page.\n\nWhen you get there, you'll see a list of all the repls you've ever run in your account, sorted by recent activity -- including the ones that are currently running!\n\nIf you expand one of the Repl entries on that page, you'll see the status history for that Repl.\n\n![](/public/images/status-history.png)\n\nUnless you've purchased an \"Always On\" power up, websites hosted on Replit fall asleep when they're not in use. From this secondary view, you're able to see exactly when your repl fell asleep and when it woke back up again.\n\nAdditionally, you are able to stop repls and prevent them from being woken up by pingers by hitting the \"Stop\" button in the status view.\n\nHappy coding!","metadata":{"id":1741}}],["1742",{"pageContent":"---\ntitle: Building Alexa Skills On Replit\nauthor: Søren Rood\ndate: 2021-08-02\ncover: https://blog.repl.it/images/replexa-tutorial/carbon.png\ncategories: projects\n---\n\nAt Replit, we want to give everyone in the world **computer superpowers**.\n\nWe’re making it easy for anyone with a Replit account to seamlessly build and host [Amazon Alexa Skills](https://www.amazon.com/b?node=21576558011) on Replit.\n\nThis blogpost is a start-to-finish tutorial on making Alexa skills on Replit. Something important to note is that you don't need to have a physical Alexa-enabled device to build this. There is a great simulator in the developer console and a downloadable app on your phone.\n\n### Overview\n1. Configure the Alexa skill in the Amazon Developer console\n2. Clone the [\"Replexa\"](https://replit.com/@soren/replexa) template\n3. Define your own intent\n4. Test your skill\n\n### How does it work?\nAs an example, what happens when we say: \"Alexa, ask Replit about the most recent blogpost\"?\n\n1. The Alexa unit sends the message to the Alexa cloud and uses natural language processing to figure out the \"intent\" of the message. In this case, I'm trying to get information about the most recent Replit blog posts.\n2. Once Alexa knows the intent of the user, it sends a post request with the intent to the webserver that's hosted in Replit.\n3. The Replit webserver handles the request. It sends the information back to the Alexa cloud.\n4. Alexa cloud sends the message back to the physical unit to be spoken back to the user.\n\n### Creating the skill\nThe first thing to do is create a new Alexa skill in the Amazon Developer Console. You can do this by navigating to https://developer.amazon.com and pressing \"developer console\" near the top right.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_1.png\" alt=\"amazon developer console\" width=\"100%\" style=\"width:100%\"/>\n\nFrom here, you're going to click \"Alexa Skills Kit\" to bring you to the Alexa dashboard. Click \"Create Skill\" to start the process of creating a new skill.","metadata":{"id":1742}}],["1743",{"pageContent":"From here, you're going to click \"Alexa Skills Kit\" to bring you to the Alexa dashboard. Click \"Create Skill\" to start the process of creating a new skill.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_2.png\" alt=\"alex skills\" width=\"100%\" style=\"width:100%\"/>\n\nOnce you name your skill and select your language, click \"Custom model\" and then select \"Provision your own\" for the backend. Finally press \"Create skill\" at the top right of the page.\n\nAfter this it's going to ask about templates, just click \"Start from scratch\" then go onto the next page. Eventually you'll see the following page - this means your skill has been created!\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_3.png\" alt=\"alexa developer console\" width=\"100%\" style=\"width:100%\"/>\n\n### Invocation\nNext, we will set our invocation. On the left of the screen, click the invocation tab. Invocation is how you'll start your skill from your Alexa. For example, if your skill invocation name is \"Replit blog reader\", to open your skill you would say something like \"Alexa, open the Replit blog reader skill\". Once you have entered your skill's invocation name, click \"save model\" and \"build model\" at the top. This can take up to 30 seconds.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_4.png\" alt=\"alexa interaction model\" width=\"100%\" style=\"width:100%\"/>\n\n### Interaction Model\nClick \"interaction model\" and click \"intents\" from the left bar. According to the [official Alexa documentation](https://developer.amazon.com/en-US/docs/alexa/custom-skills/create-intents-utterances-and-slots.html), \"An intent represents an action that fulfills a user's spoken request\". In this case, we want to build a skill that gets a summary of the most recent blogpost on the [Replit blog](https://blog.replit.com).","metadata":{"id":1743}}],["1744",{"pageContent":"Each intent has its own set of \"utterances\". Utterances are spoken phrases that could trigger an intent. \"Get the most recent Replit blogpost\" and \"Get the Replit blog\" should trigger the same intent.\n\nCreate a new intent called `GetBlogIntent` and add the following utterances:\n- Get the most Recent Replit blog\n- Show me the Replit blog\n- Get the Replit blog\n- Replit blog\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_5.png\" alt=\"alexa GetBlogIntent\" width=\"100%\" style=\"width:100%\"/>\n\nMake sure to click \"save model\" and \"build model\" after you've added the intent.\n\n### Hosting in Replit\nTraditionally, if you want to create an Alexa skill, you have to host the code in an AWS Lambda. While this is an amazing service, Amazon also gives you the option to host your skill using your own webserver. We've found that it's incredibly easy to host Alexa Skills in Replit. You also get the benefits as Replit, such as ReplDB, always-on, and multiplayer. \n\nFirst, clone the [Replexa](https://replit.com/@soren/replexa) template in Replit.\n\nOnce you have the code open, you're going to want to grab your skill id from your list of Alexa skills. (Get to this menu by clicking \"your skills\" at the top right of the developer console.)\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_6.png\" alt=\"Alexa custom skill\" width=\"100%\" style=\"width:100%\"/>\n\nCopy that and paste it into the template where it says `YOUR_SKILL_ID`.\n\nThe last step in connecting your repl to your skill is getting the domain. You can copy it by running the repl and copying the domain.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_7.png\" alt=\"repl.co domain\" width=\"100%\" style=\"width:100%\"/>\n\nNow that you have your repl's domain, go to the \"endpoint\" tab in the amazon developer console. Change the service endpoint type from \"AWS Lambda ARN\" to \"HTTPS\". Paste your repl's domain into the default region.","metadata":{"id":1744}}],["1745",{"pageContent":"In the drop-down menu, select \"My development endpoint is a sub-domain of a domain that has a wildcard certificate from a certificate authority\".\n(This is important)\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/image_8.png\" alt=\"service endpoint type\" width=\"100%\" style=\"width:100%\"/>\n\n### Add GetBlogIntent\nSince we added the `GetBlogIntent` in the developer console, we have to add an intent handler in our code. Navigate to the `intents.py` file. Each intent inherits from the `AbstractRequestHandler`. You must define both the `can_handle()` and `handle()` methods for every intent. Our new class will look something like this:\n\n```python\n# intents.py\n\nclass GetBlogIntentHandler(AbstractRequestHandler):\n  \"\"\"Handler for the get blog intent\"\"\"\n  def can_handle(self, handler_input):\n    return ask_utils.is_intent_name(\"GetBlogIntent\")(handler_input)\n  \n  def handle(self, handler_input):\n    # This is where we define the intent\n\n```\n\nIn addition to defining the intent, we also have to register the intent with the `SkillBuilder` object in `main.py`. Add the following line to main.py:\n\n`sb.add_request_handler(intents.GetBlogIntentHandler())`. \n\n`main.py` should now look something like this:\n\n```python\n# main.py\n\nfrom flask import Flask\nfrom ask_sdk_core.skill_builder import SkillBuilder\nfrom flask_ask_sdk.skill_adapter import SkillAdapter\nimport intents\n\nsb = SkillBuilder()\nsb.add_request_handler(intents.LaunchRequestHandler())\nsb.add_request_handler(intents.HelpIntentHandler())\nsb.add_request_handler(intents.CancelOrStopIntentHandler())\nsb.add_request_handler(intents.HelloWorldIntentHandler())\nsb.add_request_handler(intents.SessionEndedRequestHandler())\nsb.add_request_handler(intents.GetBlogIntentHandler()) # This is the one we just added!\nsb.add_request_handler(intents.IntentReflectorHandler()) # Register this intent last.\n\napp = Flask(__name__)\nskill_id = 'YOUR_SKILL_ID'\n\nskill_adapter = SkillAdapter(\n  skill=sb.create(), \n  skill_id=skill_id, app=app\n  )\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])","metadata":{"id":1745}}],["1746",{"pageContent":"app = Flask(__name__)\nskill_id = 'YOUR_SKILL_ID'\n\nskill_adapter = SkillAdapter(\n  skill=sb.create(), \n  skill_id=skill_id, app=app\n  )\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef invoke_skill():\n    return skill_adapter.dispatch_request()\n\napp.run('0.0.0.0', port=443)\n```\n\n### Implementing our new intent\nTo get the most recent blogpost, we'll use the `feedparser` library. Here's the code to get the most recent Replit blog:\n\n```python\n#intents.py\n\nimport feedparser\n\nclass GetBlogIntentHandler(AbstractRequestHandler):\n  \"\"\"Handler for the get blog intent\"\"\"\n  def can_handle(self, handler_input):\n    return ask_utils.is_intent_name(\"GetBlogIntent\")(handler_input)\n  \n  def handle(self, handler_input):\n    feed = feedparser.parse('https://blog.replit.com/feed.xml')\n    title = feed['entries'][0]['title']\n    summary = feed['entries'][0]['summary']\n    speak_output = f'The title of this blogpost is {title}. {summary}'\n\n    return (\n      handler_input.response_builder\n          .speak(speak_output)\n          .response\n    )\n```\n\n### Testing\nTesting Alexa skills is easy! Once you have navigated to your Skill in the Amazon Developer Console, click the \"testing\" tab. What you see now is an Alexa simulator pre-loaded with your skill. You can type into the console on the left, and it will respond exactly as an Alexa unit would.\n\n<img src=\"https://blog.repl.it/images/replexa-tutorial/demo.gif\" alt=\"alexa demo gif\" width=\"100%\" style=\"width:100%\"/>\n\nYou can also check out [this](https://youtu.be/rN5e9Po4gHc) youtube video for a quick demo!\n\n### If you need help\nYou can reach out to me (Søren) on [Twitter](https://twitter.com/roodsoren) or shoot an email to soren@replit.com. I'll do my best to respond quickly!","metadata":{"id":1746}}],["1747",{"pageContent":"---\ntitle: \"Replit in Review: A Recap of What We Shipped in 2022\"\nauthor: The Replit Team\ndate: 2023-01-03\ncover: https://blog.replit.com/images/Replit-recap-header.png\ncategories: news\n---\n\n![Recap Header Image](https://blog.replit.com/images/Replit-recap-header.png)\n\nAs we work on game-changing features for 2023, we wanted to take a look back at the major things we shipped in 2022. Here are some highlights!\n\n## Shipping SZN 2022\n\n### Product\n\n[**(1/19) Teams Pro**](https://blog.replit.com/teamspro) - The Replit solution for companies and organizations. Private Repls. Team collaboration. Boosted performance. The future of cloud-based development. More to come in 2023.\n\n[**(2/28) Kaboom Draw**](https://blog.replit.com/kaboomdraw) - Kaboomjs, our innovative gaming programming language, is already surging in popularity, but we are constantly improving it. With Kaboom Draw, developers can now adjust images with a click & drag in Bret Victor style.\n\n[**(3/31) Search Replit**](https://blog.replit.com/search) - The scale of Replit is amazing. +100M Repls... and growing rapidly. What's even more amazing? Being able to search through ALL of them.\n\n[**(4/18) New Replit Profiles**](https://blog.replit.com/profile2) - Community is a core part of Replit. Developers all around the world, of all experiences, connecting over a common passion for building. Now, with profiles, you can add social, showcase your work, see who else is online, and much more.\n\n[**(6/1) Generate Code**](https://blog.replit.com/generate-code) - Tell the computer what you want. Have it generate code for you. A big step towards some of the amazing AI tools we're continuing to build. \n\n[**(6/2) New publish flow**](https://blog.replit.com/publishing) - We empower creators to build. We also empower creators to share. Replit is magical because you instantly have a group of developers to share your project with, that they can run in their browser. The new publish flow gives you more options in how you share your projects.","metadata":{"id":1747}}],["1748",{"pageContent":"[**(6/23) Replit Ventures**](https://blog.replit.com/RV1-Teams) - $10k for 12 teams. 5+ countries. Access to great mentors from other companies in Silicon Valley. Ending with a huge demo day to investors. An opportunity x`to help developers around the world build a business.\n\n[**(7/4) Domain Linking improvements**](https://blog.replit.com/improved-domain-linking) - Build and host your project on Replit immediately. Connect your custom domain to your project even faster. \n\n[**(7/15) Webview DevTools**](https://blog.replit.com/devtools) - A new Replit-native way to inspect and debug webpages from the Workspace.\n\n[**(7/27) Company Profiles**](https://blog.replit.com/company-profiles) - With new templates, profiles, Teams Pro, and the Community feed, Replit became an even better place for developer advocates to engage their audience. We launched with 19 verified company partners, including Twitter and Stripe.\n\n[**(7/29) Following Feed**](https://blog.replit.com/replit-famous) - Get Replit Famous. Gain followers and engage with your audience. Follow others and see what they build. The Creator's timeline.\n\n[**(8/2) Repl Identity**](https://twitter.com/amasad/status/1554590054537781250?s=20&t=Rs4baHGWWE4DvPBVDjU4WQ) - On Replit, you can build a project and immediately launch it to a community. But let's say you want to track high scores and get feedback from your users? Repl Identity lets creators offer their users 0-click authentication.\n\n[**(8/11) Tabs**](https://blog.replit.com/tabs) - With Tabs, you can open two files side-by-side, hide unused tools, or even open 10 different shells. Another step towards full Workspace customization. Your customizable computer in the cloud.\n\n[**(8/30) Heroku import flow**](https://replit.com/heroku) - Heroku removed their free tier this year (BOO!). So we made it easy for developers to migrate over. With just a few clicks you can bring your project to Replit.","metadata":{"id":1748}}],["1749",{"pageContent":"[**(9/15) History 2**](https://blog.replit.com/history2-release) - Version control changed forever. Rather than a series of versions, click and drag through file history to revert to any point in time and see who wrote what.\n\n[**(9/20) 100 Days of Code**](https://blog.replit.com/100-days-of-code) - Whether you've never written a line of code or you are just trying to polish your skills, Replit 100 Days of Code offers a free course to go from print(\"Hello World\") to dynamic Flask web apps. All of this teaching exists directly in the Workspace, so you do not even need to switch tabs!\n\n[**(9/21) Revamped GitHub import flow**](https://blog.replit.com/nix-github-imports) - GitHub is widely used, but files and templates on GitHub are static. In just a few clicks, you can import them to Replit and run them from your browser.\n\n[**(9/28) Splits**](https://blog.replit.com/splits) - With pane splits, you can completely customize your Workspace. Drag. Drop. Float. Whatever you want.\n\n[**(10/4) New logo**](https://blog.replit.com/new-logo) - New year. New look. We unveiled our new logo focusing more on the \"prompt.\" The prompt is a sign of an blank canvas and an opportunity to start creating.\n\n[**(10/13) Threads**](https://blog.replit.com/threads-v2) - Replit is the #1 place to collaborate with Teams. Threads allow for inline commenting like what you come to expect from Google Docs. But now you can do it in code!\n\n[**(10/13) Analytics**](https://blog.replit.com/repl-analytics) - Ever wonder how many people are accessing your project? Now you can check with Repl Analytics. Just add `/analytics` to your Repl's URL.\n\n[**(10/19) Mobile app**](https://blog.replit.com/mobile-app) - Coding should be available to everyone, everywhere. Many don't have access to a desktop computer. With the Replit Mobile App, millions globally can now code from their phone with the most powerful mobile coding environment known to date.","metadata":{"id":1749}}],["1750",{"pageContent":"[**(10/31) Ghostwriter**](https://blog.replit.com/ghostwriter) - Meet Ghostwriter. Your partner in code. We built and launched a full suite of AI tools, including Complete, Generate, Transform, and Explain Code.\n\n[**(11/6) Attach a GPU**](https://twitter.com/amasad/status/1589287339553357824?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - Using GPUs can be quite challenging. Now, you can one-click attach a GPU to a project in Replit! Currently available only to Explorers.\n\n[**(11/14) Status Manager**](https://blog.replit.com/repl-status) - Ever wondering which of your Repls are running at a given time? Now you can with the Replit Status Manager.\n\n[**(11/15) Bounties**](https://blog.replit.com/bounties) - Ever have an idea that either A) you do not have time to build or B) you may not know how to build? With Bounties, you can now hire a developer from the Replit community to build your project. Write your project specs and you'll get a Repl with the project in a runnable state.\n\n[**(11/17) Filetree**](https://twitter.com/Replit/status/1593293647344123904?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - The filetree is hugely important to the development process, so we shipped updates that 10x the experience!\n\n[**(11/30) New sidebar design**](https://twitter.com/amasad/status/1598104781678993409?s=20&t=Vrc68r898eg0Ab4hDw4w8A) - As we grow the suite of Replit features rapidly, we still want the Workspace to continue to be simple and accessible. The new sidebar design has more room for tools, apps, and soon, extensions.\n\n[**(12/12) Tipping**](https://twitter.com/giansegato/status/1602318257846947842?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - The Replit Community builds incredibly projects. Now you can show your appreciation by tipping these projects' creators!","metadata":{"id":1750}}],["1751",{"pageContent":"[**(12/22) Custom Themes**](https://twitter.com/Replit/status/1605957893106253824?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - One of our most requested features of all-time shipped a week ago: Custom Themes. Create a theme that fits your exact taste, or choose a fly design from fellow community members.\n\n[**(12/23) Cycles transaction history**](https://blog.replit.com/cycles-transaction-history) - Cycles allow you to quickly and seamlessly power up your projects. We wanted the billing experience to be completely transparent as well. The new transaction history gives you full visibility into what you spent your Cycles on and when.\n\n[**(12/23) SSH into Replit**](https://twitter.com/amasad/status/1606429084363665408?s=20&t=Z370H3HEZ33bFLyLVgfYJg) - Work with Replit from your local environment. SSH into it from anywhere. This feature is in Beta, so stay tuned for more!\n\n\n### Infrastructure\n\n[**(1/11) Migrating from Heroku to GCP**](https://blog.replit.com/heroku2gcp) - It's not easy running 1M concurrent Repls across the globe. Now imagine migrating that entire infrastructure! To bring the next billion software creators online, this was something we needed to do to serve even more developers.\n\n[**(2/4) New Python Repl updates**](https://blog.replit.com/python-new-template) - Python is the most popular programming language on Replit. We changed the way we cache packages, making it way faster to boot any Python-based Repl.\n\n[**(2/11) File persistence**](https://blog.replit.com/filesystem-persistence-for-all) - In 2021, we offered file persistence for Hacker users only; this year, we expanded this to ALL hosted apps on Replit.\n\n[**(2/23) Powered by Nix**](https://blog.replit.com/powered-by-nix) - After a year of hard work, we fully integrated Nix into our platform. This was a critical migration, allowing Replit to support any and every programming language, and unlocking the ability for the community to create and manage templates for popular languages and configurations.","metadata":{"id":1751}}],["1752",{"pageContent":"[**(3/10) CodeMirror Migration**](https://blog.replit.com/codemirror) - To make Replit more extensible, we migrated our code editor from Monaco to CodeMirror. This contrarian bet has already paid dividends to the open-source community as we've built and open-sourced several CodeMirror extensions like Vim keybindings and Solidity language support. And its opened the door for community-built extensions in the future.\n\n[**(7/8) Controlplane**](https://blog.replit.com/geo-part-1-controlplane) - The Replit developer base is global. As a result, we are geo-distributing our infrastructure, so performance can improve for international developers. The first step to this was Control Plane. We landed (get it?) it mid-year, setting us up to build out a globally distributed network.\n\n[**(9/26) Load Balancer**](https://blog.replit.com/geo-part-2-loadbalancing) - In July, we landed (get it again?) Control Plane. That was Part 1 of geo-distribution. The Google Cloud load balancer, however, did not quite fit our needs... so we built our own! This dramatically improved machine utilization and Replit performance.","metadata":{"id":1752}}],["1753",{"pageContent":"---\ntitle: A Better Way to Search Your Repls\nauthor: Tim Chen\ndate: 2018-03-19T00:00:00.000Z\ncategories: product\n---\n\nAlong with the ability to star repls and tag repls, we now take repl organization one step further with the ability to search through your repls.\n\nYou can use the search function in your repls dashboard in a few ways:\n* by keyword\n* by title\n* by tag\n* by language\n\nPlease refer to the [search docs](/site/docs/repls-search) for detailed instructions on how to use it.\n\n![animation of searching repls](/public/images/blog/repl-search.gif)","metadata":{"id":1753}}],["1754",{"pageContent":"---\ntitle: Require Ruby Gems\nauthor: Amjad Masad\ndate: 2018-03-08T08:00:00.000Z\ncategories: product\n---\n\nOn the heels of our Node.js npm support [announcement](node_modules), we're pleased to announce that we now\nsupport Ruby [Gems](https://rubygems.org/) too. We're excited to have the Ruby\ncommunity join the fun.\n\nThe way it works is slightly different from our Node or Python\nimplementations. In Node or Python you simple require/import the module you'd\nlike to use, and we'll automagically install the package for you. In Ruby,\nunfortunately, we couldn't find a reliable way to map requires to Gems so we had\nto go with a neat feature of Bundler:\n[bundler/inline](https://gist.github.com/chrisroos/0ddf618ac711abe0f465) where\nyou can define your gemspec in the code. This works well for Repl.it because\nwe'd like to make it easy for people to use the repl without having to add files.\n\nHere is an example, this uses the gem `colorlize` to print an ascii drawing of the\nAmerican flag:\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@amasad/Murica?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nWe're still working on improving this, look forward to the following the coming\ndays:\n\n- Per repl caching: install once, there forever\n- Gemfile support\n\n[Feedback](/feedback) welcome!","metadata":{"id":1754}}],["1755",{"pageContent":"---\ntitle: Our First Replit Ventures\nauthor: Søren Rood\ndate: 2021-07-06\ncover: https://blog.repl.it/images/rv0/cover.png\ncategories: ventures\n---\n\nOur first [Replit Ventures](https://blog.replit.com/ventures) was a tremendous success. \n\nSome of our teams were accepted into the best startup accelerators in the world while others had $1mm+ funding offers from top VCs.\n\n### Before The Program\nBefore joining Replit, [I](https://twitter.com/roodsoren) was working on [my fintech startup](https://blog.replit.com/blubbr), Blubbr. After a few small successes, Amjad reached out and asked me to write a guest blogpost (our product was built on Replit).\n\n<img src=\"https://blog.repl.it/images/rv0/image_1.png\" alt=\"chat\" width=\"100%\" style=\"width:100%\"/>\n\nWe then started brainstorming ideas about how we can help other startups on Replit. After I told him I wanted to take a gap quarter (I hated online school), he asked me if I wanted to join the team and help other startups go to market. This is how Replit Ventures was born.\n\n### Launch\nMy first day at Replit was April 5, 2021. We launched Replit Ventures on April 13th. I wrote a [blogpost](https://blog.replit.com/ventures) detailing the program and our [launch Tweet](https://twitter.com/Replit/status/1382015913394724864?s=20) went viral (Thanks Jack Dorsey for the RT).\n\n<img src=\"https://blog.repl.it/images/rv0/image_2.png\" alt=\"chat\" width=\"100%\" style=\"width:100%\"/>\n\nPeople were applying within minutes of the launch. Our application deadline was set for April 23rd. In only 10 days, over 400 teams had applied to the program.\n\n### Application Pool Diversity","metadata":{"id":1755}}],["1756",{"pageContent":"People were applying within minutes of the launch. Our application deadline was set for April 23rd. In only 10 days, over 400 teams had applied to the program.\n\n### Application Pool Diversity\nWe opened our application up _globally_. There were no limits on age, location, or timezone. (Bitcoin enables borderless and frictionless payments). Because of this, I think it's safe to say that we had one of the most diverse application pools ever seen in an incubator. Our applicants included both teenage hackers in India and Senior SWE's at FANG companies. (The younger entrepreneurs were always more innovative btw)\n\n<img src=\"https://blog.repl.it/images/rv0/submissions.gif\" alt=\"submissions\" width=\"100%\" style=\"width:100%\"/>\n\n### Picking Teams\nWe spent a lot of time picking the teams. This is one of those things that's \"more of an art than a science\". HUGE shoutout to [YK](https://twitter.com/ykdojo) for helping me go through all of the applications - this took a really long time. We selected 6 teams to join us: 5 startups and 1 nonprofit.\n\n- [Slip](https://slip.so) - Platform for building and selling programming courses\n- [Kobra](https://blog.replit.com/kobra) - Visual programming language for machine learning\n- [PetCode](https://blog.replit.com/petcode) - Smart pet tag for smarter pet care\n- [Nisawa](https://blog.replit.com/nisawa) - Fast and reliable delivery service platform based in Rwanda, Africa\n- [Execute Big](https://blog.replit.com/executebig) - Computer science education non-profit that makes learning fun\n- DogeMail - Innovative email client that uses Replit authentication (still building)\n\n### The Program Starts\nAfter our kick-off call, the teams got to work right away. We paired each team with 1-2 mentors and hosted weekly meetings with some incredibly inspiring people:\n\n- Tabish Gilani: Ex-Growth @ Google, Growth PM @ Replit\n- Sergei Chestakov: Ex-SWE @ Google, SWE @ Replit\n- Haya Odeh: Co-founder @ Replit\n- Austen Allred: Founder @ [LambdaSchool](https://lambdaschool.com)","metadata":{"id":1756}}],["1757",{"pageContent":"- Sergei Chestakov: Ex-SWE @ Google, SWE @ Replit\n- Haya Odeh: Co-founder @ Replit\n- Austen Allred: Founder @ [LambdaSchool](https://lambdaschool.com)\n- Roy Bahat: Head of [BloomBerg Beta](https://www.bloombergbeta.com)\n\n<img src=\"https://blog.repl.it/images/rv0/image_3.png\" alt=\"chat\" width=\"100%\" style=\"width:100%\"/>\n\nTeams usually met with their mentors once a week to discuss progress and go over any goals that they had.\n\n### Launch Week\nAfter only a month of hard work, some of the teams decided to launch their products to the world. Here are links to some of the launches:\n\n- [Kobra](https://www.producthunt.com/posts/kobra)\n- [Execute Big](https://www.producthunt.com/posts/tech-roulette)\n- [PetCode](https://www.producthunt.com/posts/petcode)\n- [Nisawa](https://blog.replit.com/nisawa)\n\n### Some Highlights\nWe can't share _all_ of the highlights just yet. There are a few VC deals still being worked out. ;)\n\n- [I tweeted about Kobra](https://twitter.com/roodsoren/status/1392247909874159617?s=20) on May 11th. The tweet performed well and the ML community got pretty excited. On the 13th, someone [posted about Kobra](https://news.ycombinator.com/item?id=27135573) on Hacker News and it was at the top all day.\n\n- During our program, PetCode was featured on [Forbes](https://www.forbes.com/sites/maryjuetten/2021/05/13/managing-pets-with-tech-crowdfunding-petcode/?sh=3007565978ce).\n\n- [Nisawa Blogpost](https://blog.replit.com/nisawa): \"Our set goal coming into Replit Ventures was to grow our weekly deliveries at 15% week over week i.e. from 96 to 167 weekly deliveries after four weeks. In the end, **we grew our weekly deliveries to 251 with an average weekly growth rate of 27.2% entirely through word of mouth.**\"\n\n- PetCode launched a brand new premium plan. 50% of their customers converted to paid subscription increasing lifetime customer value as well as average order value.","metadata":{"id":1757}}],["1758",{"pageContent":"- PetCode launched a brand new premium plan. 50% of their customers converted to paid subscription increasing lifetime customer value as well as average order value.\n\n- More than 800 participants signed up for Execute Big's [Tech Roulette](https://techroulette.xyz) (and rolling!), and among them 450+ are under 21. They come from 60+ countries around the world and covered 35+ states in the U.S.\n\n### What Now?\nBecause of the program's success, VC firms have reached out wanting to invest in the ventures program alone. It is possible that the next iteration of Replit Ventures is _very_ different. (more $ involved)\n\nWe're taking a short break to make the program better and work on other partnerships. Stay tuned for more details soon.\n\nIn the meantime, if you have any questions about how you can make your application as strong as possible for the next cohort, reach out to [Søren](https://twitter.com/roodsoren) on Twitter or email soren@replit.com. I'm always happy to chat and answer questions.","metadata":{"id":1758}}],["1759",{"pageContent":"---\ntitle: \"We Built a Search Engine\"\nauthor: \"Søren Rood and Lincoln Bergeson\"\ndate: 2022-03-31\ncover: https://blog.repl.it/images/search/results_page.png\ncategories: product, infra, eng\n---\n\nFor the past few months, we have been building a Replit-native search engine. It is remarkably powerful, and we are really excited for you all to try it out. **We believe that you should be able to find anything on Replit in less than 30 seconds.**\n\nThis might sound simple, but when you have 100 million+ Repls, it becomes complicated. :)\n\nWhen you search for something on Replit today, you'll see a page with relevant results from the following categories:\n- Repls\n- Templates\n- Code (yes, code)\n- Users\n- Community content (published repls, posts)\n- Our docs\n- Community tags\n\n<img src=\"https://blog.repl.it/images/search/results_page.png\" alt=\"search\" width=\"100%\" style=\"width:100%\"/>\n\n### Why we built it\n\nWe think that being able to search for stuff is important. Searching can help you find inspiration, discover other users, and even learn how to code.\n\nPrior to this update, there was no effective way for users to find anything on Replit. You could only search through the names of Repls that you owned. Even then, you had to type the exact string match to get any results.\n\nWe have known for a while that the search experience needed to be updated, but for much of last year we focused on more critical projects. (Workspace stability, abuse, etc.)\n\nAside from our team's general dissatisfaction, there were a few other signals that prompted us to fix the search experience:\n\n1. qualitatively, people complained about the lack of functionality in surveys and interviews.\n2. quantitatively, 80%~ of users that navigated to search ended up dropping off entirely. They weren't able to find what they were looking for. Retention for this feature was also significantly lower than other features.\n\nIn building this, we hope to give everyone tools for the self-led discovery of all different types of content on Replit.","metadata":{"id":1759}}],["1760",{"pageContent":"In building this, we hope to give everyone tools for the self-led discovery of all different types of content on Replit.\n\n### How we built it\n\nA search engine has a few different components:\n\n- A web frontend where users type their queries and see results\n- A server backend that receives requests from the frontend and serves responses\n- The actual search engine that indexes documents and executes search queries\n- Data pipelines for creating and updating search indexes\n\nThe first two were relatively straightforward. We built the search page like we build every other page on Replit: in Typescript, with a Next.js (React) frontend and an Express backend, with GraphQL as the API layer in between.\n\nThe other components were a little more complicated, since we haven't done anything like this at scale before.\n\nA few other small search features on the site such as the community search box were built with [the Sphinx library](http://sphinxsearch.com/). This was simple to set up at the time with some custom infrastructure to support indexing and executing queries. However, this setup hasn't aged well, and we weren't comfortable expanding it to vastly larger datasets.\n\nAfter looking through our options, we settled on Elasticsearch because of its stability, supporting libraries for big data ingestion, and the large community that has battle-tested it in production setups over the years.\n\nFor the data pipelines we use Apache Spark. These are high-throughput jobs that run on clusters of many machines at once. The details of how these jobs work is worth a post on its own, but broadly speaking they take data from other locations (the BigQuery data warehouse, Google Cloud Storage, etc), process them into search documents, and bulk upload to the Elasticsearch cluster.","metadata":{"id":1760}}],["1761",{"pageContent":"We're working on scaling these big data jobs even further. For example, our code search supports searching through the contents of published repls. In the future, we'll expand this to every file in every repl. You'll be able to find even more working code results and sample code to learn from.\n\n### What's next?\n\nOn March 31st, we released search to 100% of users.\n\nIf you helped with any early prototypes, participated in any user interviews, or were a part of the explorer beta, we want to say thank you! We could not have made it this far without your help.\n\nIf you'd like to leave feedback on the new search experience, please leave a comment on [this](https://replit.com/@util/Search-20-Feedback?c=212850) Repl. We're open to any and all types of feedback.\n\nIf this project seems interesting to you, consider checking out our [careers](https://replit.com/site/careers) page. :)","metadata":{"id":1761}}],["1762",{"pageContent":"---\ntitle: \"Fluid layout customization with Splits\"\nauthor: Tyler Angert and Moudy Elkammash\ncategories: product\ncover: \"https://blog.replit.com/images/splits/cover.jpg\"\ndate: 2022-09-28T19:06:40.000Z\n---\n\nA few weeks ago we released [Tabs](https://blog.replit.com/tabs), which allowed people to open up different files and tools you want, side by side. But the Workspace’s overall layout was still pretty static: you can *only* open things side by side, with no way to remove panes or quickly rearrange what you're focused on. That's changing today!\n\nWith **splits**, you can completely customize the layout of the Replit Workspace. This might not seem like a big deal, but it unlocks a lot of new possibilities for templates and makes Replit more accessible for both novices and experts.\n\n![Splits demo](images/splits/main-demo.gif)\n\n## How it works\n\nWhen you drag and drop a tab or pane over another pane, you have **five** primary hit areas: The header of every pane, and the top, right, bottom, and left \"quadrants\" of the pane. Our drag and drop logic actually uses conical sections to make dragging more ergonomic.\n\n![Drag and Drop area diagram](images/splits/drop-area-diagram.jpg)\n\nDropping directly onto one of the primary quadrants will split the pane, and dragging tabs or panes into the header will merge their tabs together into one large pane.\n\nIf you click the `...` menu in the corner of any pane, you'll see all of these options available here:\n\n![Context menu](images/splits/context-menu.jpg)\n\nYou'll also see `Maximize` which makes the pane take up the entire size of the Workspace, and `Float` which lets you move around a pane completely freely. To get back, you can click `Unfloat`.\n\n### Dragging tabs\n\n![Dragging tabs](images/splits/drag-tab.gif)\n\nWhen you drag a tab, only the tab itself is moved. When dropped onto a quadrant of another pane, that tab becomes its own pane as well.\n\n\n### Dragging panes\n\n![Dragging tabs](images/splits/drag-pane.gif)","metadata":{"id":1762}}],["1763",{"pageContent":"When you drag a tab, only the tab itself is moved. When dropped onto a quadrant of another pane, that tab becomes its own pane as well.\n\n\n### Dragging panes\n\n![Dragging tabs](images/splits/drag-pane.gif)\n\nYou can move entire panes around at once, not just tabs. This should feel pretty similar to how browser tabs and windows feel.\n\nWhen you have one tab left in a pane, that tab is treated like a handle for the entire pane. Dragging the tab will move the entire pane.\n\nDeleting the last tab will also remove the pane from layout.\n\nThere's a minimum drag radius of 50px to detach a pane \"out\" of the layout so you can rearrange it.\n\n![Dragging tabs](images/splits/drag-radius.gif)\n\nThis is useful for a few reasons. Mainly, it helps you understand exactly how the layout will change with the pane you're dragging.\n\nSecondly, it makes dragging mistakes easy to reverse: since other panes automatically fill up the remaining space in layout once a pane is removed, \"undoing\" an accidental drag means just dropping that pane right where you left off.\n\n\nThis also means switching two panes is as easy as picking one up and moving it to the other side.\n\n\n### Dragging from the filetree\n\n![Dragging tabs](images/splits/drag-filetree.gif)\n\nYou can also drag files from the filetree directly onto panes or headers. They share the same behavior as tabs.\n\n### Floating panes\n\nLastly, you can actually escape splits entirely and \"float\" panes if you want to.\n\n![Splits demo](images/splits/float-pane.gif)\n\n### Adding new panes\n\nYou can also add new panes to the workspace in other ways, without explicitly dragging and dropping.\n\n- Files context menu: if you click on the `...` menu on files, you can either open them in a `open tab`, which will add a tab to your last focused file pane, or you can press `open pane`, which will add a completely new pane from the left with that file loaded.\n\n- Filetree context menu: you can add new, empty panes from the `...` menu in the filetree.","metadata":{"id":1763}}],["1764",{"pageContent":"- Filetree context menu: you can add new, empty panes from the `...` menu in the filetree.\n\n- Tabs: you can also just create a new tab on any existing pane and then drag and drop it wherever you want.\n\n----\n\n## Motivation and Design Principles\n\nThe motivation for extremely flexible layout customization is simple: **people think and work in different ways**, and their working styles are often reflected in how they organize their screen.\n\nConcretely, we had two core constraints that helped guide our design process:\n\n**1. Keep the novice experience simple** while opening up customization for power users.\n\nThe great part about this update is that our default layout is still simple and made for beginners. Most apps negatively impact the novice exprience with extra customizablity, and conversely, negatively impact power users by oversimplifying.\n\nBefore we had splits, we had to hard-code specific layout configurations for different templates and use cases and they'd be incredibly hard to change. Now, any layout configuration can be setup in Replit itself, and we can just publish and update new templates. Easy peasy.\n\nFor example, we can more easily launch design bespoke environments, like our [100 Days of Code](https://blog.replit.com/100-days-of-code) setup that uses the new floating panes for a picture-in-picture tutorial. We can make a Kaboom game development environment with multiple files and debugging panes open, or a Next.js template with multiple routes preloaded.\n\nFurther, this makes it much easier to experiment with different features inside the Workspace. You can open up any tools, anywhere, and remove things you don’t need when you need to focus.\n\n**2. Innovate on top of existing patterns**","metadata":{"id":1764}}],["1765",{"pageContent":"**2. Innovate on top of existing patterns**\n\nThis is easier said than done. We made a lot of prototypes, but ultimately we landed on a variation of traditional [tile-based windowing](https://en.wikipedia.org/wiki/Tiling_window_manager). We wanted to make something that felt familiar to existing programming environments but improved significantly on core interaction details. \n\n---\n\n**So, what makes this better than other window management systems and IDEs?**\n\nWell, we are obviously standing on the shoulders of giants, inspired by everything from freeform canvas apps like [Figma](https://help.figma.com/hc/en-us/articles/360041064814-Explore-the-canvas), to [notebooks](https://jupyter-notebook.readthedocs.io/en/stable/ui_components.html), and, of course, the humble [floating window](https://en.wikipedia.org/wiki/Stacking_window_manager). If you want a good overview of the primary flavors of window managers, check out this [wikipedia page](https://en.wikipedia.org/wiki/Window_manager).\n\nBut we think this is signifcantly easier to use than traditional floating systems and most tiling window managers because, at the end of the day, it just **feels really fast and easy**. There's less busy work to actually get to the layout you want than most tools. We emphasized the following concepts during our process:\n\n**Predictablity**\n\nMaking a system predictable means you can, well, easily predict what it'll do. But how do you actually do that? \n\n*Focus on explicit state visualization.*\n\n- Wherever your mouse is, you should always know what \"state\" you are in– are you dragging? Did you just stop dragging? Are you about to drag?\n- Whatever “hidden” rules there are– show them. For example, the \"detach preview\" shows you how far you need to drag a pane to detach it and place it somewhere else.\n\n*Have as few special cases as possible.*\n- All tabs and panes share the same core layout behaviors, no matter what.","metadata":{"id":1765}}],["1766",{"pageContent":"*Have as few special cases as possible.*\n- All tabs and panes share the same core layout behaviors, no matter what.\n- Whenever a webview or VNC viewer is created automatically, they'll get placed into the `top-right` corner of the workspace, no matter what. This makes any kind of dynamic behavior predictable without messing up the primary panes in your layout.\n- This is part of one of our principles that \"explainable > magical\".\n\n*Provide immediate visual feedback.*\n- All panes immediately start changing size as you drag them and all drop target areas are clearly highlighted.\n\n*Make actions easily reversible.*\n- We're still working on complete undo/redo, but it's still easy enough to rearrange panes that making mistakes is low-stakes.\n\n*Use direct manipulation.*\n- It should feel like you are actually moving the parts of the workspace around. When you're dragging a pane around, you are doing just that– dragging the pane. It isn't a preview.\n\n**Learnability**\n\nGreat interfaces are *learnable.* You either recognize how to use them based on other interfaces you're familiar with (pattern matching), or you can easily learn new interactions by playing around (discovery). You want enough familiar behavior that you can hook people into trying something new, but you also want to innovate and create new ways of working.\n\nJust like how babies play with toys and blocks to gather an intuitive sense for real world physics, we should expect people to play and poke around with the Workspace UI to figure out how it works. Of course, some information dense features will need explicit guides and docs, but we should never rely primarily on textual descriptions (like tours) to explain how the Workspace works.","metadata":{"id":1766}}],["1767",{"pageContent":"We specifically didn’t focus on intuition as a goal because it’s vague and non-descriptive. How do you measure \"intuition\"? Usually when people say an app is intuitive, they talk about it \"just working\" or \"making sense\". But how does it make sense? Usually because it works just like other interfaces they’re familiar with, or it's easy to learn. Familiarity and learnability, however, are more easily measurable and comparable. Ultimately, *intuition is a function of learnability*.\n\n**Fluidity**\n\nOur drag and drop behavior is fluid and interruptible. If you start dragging a pane around, you can always let go and it’ll return to either its original position, or dropped over its new target. As you drag panes, they continuously shrink until they are detached from the layout.  Once you drag a pane outside of the minimum drag radius, the radius visualization transforms into the drop preview. When panes automatically resize or insert, they animate into place. When put together, these things might not even be noticable, but that's the point: make it feel like the Workspace understands your intent, and lets you easily change your mind. We were heavily inspired by Apple's WWDC talk on [Fluid Interfaces](https://developer.apple.com/videos/play/wwdc2018/803/).\n\nAnother key part of fluid interfaces is how fun it is to play around with, or its **[fidget factor](https://twitter.com/tylerangert/status/1544401943417716737)**. High fidget-factors (HFF) reward play: not only is it fun, but its a core part of *discovery*. The more you just poke around the Replit UI because its fun to see things move on your screen, the more you'll discover about Replit's features along the way.\n\nIn a way, creating this sytem was a lot like figuring out the “physics” of the workspace. It's the behavior of our core objects on screen. And just like the physical world, as mentioned, play and experimentation are extremely important for learning how systems work. Fluidity is a prerequsite for learnability.","metadata":{"id":1767}}],["1768",{"pageContent":"## Engineering Challenges\n\nThe main issue here is that we are ultimately building on the web, which means we have to work within the constraints of the DOM and React, more specifically. React isn't optimized for smooth, continuous interactions that you'd expect from touchscreen devices, so a lot of extra work was put into managing the rendering life cycle to make sure we could get fluid transitions between states (like starting to drag, dragging, and ending a drag).\n\nWe use [jotai](https://jotai.org/), which lets us deliberately ignore  rerenders while updating dragging state, for example. We also did *not* use any predefined window-tiling libraries or grid systems, and instead wrote custom, low-level mouse-event handler logic to make sure we could have full control over the sensitivity of mouse movement, like visualizing the minimum drag radius.\n\nWe also had to do a large refactor of our core data structure for storing and serializing layout. Under the hood, Splits are represented as a Multi-Node tree. This is important to understand how panes are grouped together because it has a direct influence on resizing UX. Think of it like this: if you keep splitting panes in the *same direction*, those newly added panes will be added as children. The moment you create a split on one of those children in the *opposite direction*, a split is added as a child.\n\n```typescript\ninterface Split {\n  stacked: boolean;\n  children: Array<PaneGroup | Split>;\n}\n\ninterface PaneGroup {\n  panes: Array<PaneId>;\n  percent: number;\n  activeIndex: number;\n}\n```\n\n\nThis data structure refactor also made it easier to create simple heuristics for dynamic panes, like: **always put a webview in the top right corner**. We can search for the top-right most node in the tree. This algorithm will always add webviews to the layout like this:\n\n![Top-right rule](images/splits/top-right-rule.jpg)","metadata":{"id":1768}}],["1769",{"pageContent":"![Top-right rule](images/splits/top-right-rule.jpg)\n\n\nTo read more about our choice of data structure and its influence on UX, please check out [Faris’s article on Leaky UIs](https://blog.replit.com/leaky-uis).\n\n## Future improvements and research\n\nThis is just the first major release and many more features are coming soon, which include but aren't limited to:\n\n- [Natural language interaction](https://twitter.com/amasad/status/1574426676477452288): integrating layout customization and Workspace automation with our [productionalized LLMs](https://blog.replit.com/llms).\n- A layout query API to automate actions\n- Keyboard shortcuts\n- Shared layouts: being able to observe someone else's full workspace movements, not just their cursor in a file.\n- Layout undo / redo\n- Layout copy and paste: being able to \"copy\" a bunch of tabs or panes and paste them into other panes to merge.\n- Layout deeplinks\n- Better and more deeply integrated floating-pane support\n- Exploration of freeform, canvas based coding\n- Replit native notebooks\n- Saved layouts\n- Integration of layouts into history\n- Sound effects, obviously\n\nThere's a lot to explore here, but hopefully this first release makes Replit feel more powerful and useful to you.\n\n<style type=\"text/css\" rel=\"stylesheet\">\n\timg {\n\t\tborder-radius: 8px !important;\n\t}\n</style>","metadata":{"id":1769}}],["1770",{"pageContent":"---\ntitle: A Swift REPL\nauthor: Amjad Masad\ndate: 2016-06-14T07:00:00.000Z\ncategories: product\n---\n\nIn this age of containers it's much easier to run arbitrary code\nin the cloud. The harder parts are scaling the service, making it reliable, and\n—as in this case— creating cool and useful experiences. When we looked at\nexisting Swift REPL implementations on the web we found that none\ndelivered a stateful and interactive environment. Just an editor with a run\nbutton.[](preview end)\n\nAs for us, as much as possible, we try to create an environment similar to\nthe original inspiration for our website: DrScheme (now [DrRacket](https://racket-lang.org)).\n\n![racket](https://i.imgur.com/dQZ0Jxk.png)\n\n![repl.it](https://i.imgur.com/xRLWGYy.png)\n\n_(I cheated a little bit to make them seem more similar by using repl.it's\npreferences (⋮) to make the environment stacked as opposed to the default which is side-by-side)_\n\nYou code in the editor, hit run, and the\ninterpreter will run your code, and then drop you in the console to interact with\nthe resulting environment. The next time you hit run your code will be evaluated in a fresh\nenvironment.\n\nToday we're excited to announce the beta release for our Swift REPL that we're\nhoping will work in the same way we outlined above.\n\n![swift](https://i.imgur.com/JthbWsS.gif)\n\nTry it here: [repl.it/languages/swift](https://repl.it/languages/swift)\n\nExecute your code, and then you get to interact with it in the console. Call\nfunctions you defined, change variables, and do as you please. Next time you\nhit run you're loaded with a fresh environment.\n\nWe hope you find this useful. Let us know what you think and follow us on [twitter](https://twitter.com/replit)!","metadata":{"id":1770}}],["1771",{"pageContent":"---\ntitle: Replit Teams for Education is Leaving Beta!\nauthor: Patrick Coleman\ncover: https://blog.repl.it/images/teams_edu/teamscover.png\ndate: 2021-03-02\ncategories: edu\n---\n\n**Edit: As of March 2022, Teams for Education is free for all educators. You can gain access [here](https://replit.com/teams-for-education).*\n\nAt Replit we believe that computers give people superpowers. With computers, anyone who's willing to learn can spend more of their time on creative invention rather than tedious drudgery. They help us automate repetitive tasks and build on the collective knowledge of all the great thinkers, inventors, artists, and teachers who came before us. \n\nComputer science teachers around the world are bestowing these superpowers upon the next generation of creators and builders. We built [Replit Teams for Education](https://repl.it/teams-for-education) for them, and today we're officially taking Teams for Education out of beta. \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/wgl_ERg23O4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n[Sign up for a free trial](https://repl.it/teams-for-education) if you haven't already!*\n\nThank you teachers for beta testing Teams, for giving us invaluable product feedback, for helping one another out as part of a vibrant and diverse community of Replers, and for being a part of the history of computers.","metadata":{"id":1771}}],["1772",{"pageContent":"William Gibson is famous for saying way back in 1992, that \"the future is already here – it's just not evenly distributed.\" If we asked you a year ago, you may have said we were already living in the computer age, or even that we had been for decades. But then in early 2020 COVID-19 happened and everything went \"remote\" and we all took a collective leap even further into the future. Today it's more obvious than ever that for children (and adults!) to participate in the riches of the new economy, they need to be able to design, control, and program the machines that we all use all day, every day.\n\nOn this vision to build powerful & approachable tools that expand access to computing superpowers, Replit raised a [$20 million Series A](https://blog.repl.it/seriesa) at the start of 2020. We're using the funds both to make learning more engaging for teachers and students and also to make work more fun and creative for professional software developers. We believe that the same things that make programming easier for beginners will also unlock productivity for experts. And when students know that they aren't just in a sandboxed, toy environment, but instead can use real-world tools and collaborate in real-time with their peers, they'll learn better.\n\n![replit multiplayer art](https://blog.repl.it/images/teams_edu/multiplayerart.png)\n\nWe've been working towards this vision since Amjad and Haya started Replit in 2016. And the initial beta release of Teams for Education over the summer of 2020 was a major step forward in that direction. From the start, early adopters like Toni loved the real-time multiplayer collaboration with their students, seeing how Replit could transform their classrooms.","metadata":{"id":1772}}],["1773",{"pageContent":"<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/replit?ref_src=twsrc%5Etfw\">@replit</a> absolute game changer for coding. Supports so many languages, easy to use. My favourite feature is multiplayer option! My must have tool for coding.</p>&mdash; Toni Scullion (@ScullionToni) <a href=\"https://twitter.com/ScullionToni/status/1328364755657121794?ref_src=twsrc%5Etfw\">November 16, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\nBut there was much more to do before Teams would be ready to graduate from beta. We listened to our teachers. Then we rolled up our sleeves and started building fast:\n- [privacy compliance](https://blog.repl.it/education-privacy) (FERPA, COPPA, GDPR, and more)\n- [code annotations for feedback](https://blog.repl.it/annotations-for-education)\n- [group projects](https://blog.repl.it/group-projects-teams-education)\n- simplified pricing\n- [feedback workflow improvements](https://blog.repl.it/teams-for-edu-fall-2020-improvements)\n- [stability improvements](https://blog.repl.it/how-far)\n- [input/output autograding](https://blog.repl.it/input-output-tests)\n- [graphics improvements](https://blog.repl.it/fix-gfx)\n- [better project organization](https://blog.repl.it/teams-education-january-update)\n- [project sharing](https://blog.repl.it/teamsforedu-01-22-2021) \n- [built-in unit tests for Java, Python, and Javascript](https://blog.repl.it/unit-tests)\n- project overview and reporting\n\nAnd we're going to keep on shipping! In the coming days and weeks, look out for live handraising to get help, project due dates, easier billing and team organization, major updates to annotations (now called threads), and more. If there's something else you want us to build, [let us know](https://replit.canny.io/teams-for-education)!\n\n![threads](https://blog.repl.it/images/teams_edu/threads.png)","metadata":{"id":1773}}],["1774",{"pageContent":"![threads](https://blog.repl.it/images/teams_edu/threads.png)\n\nThanks again to everyone who's been teaching with Teams for helping us set the product direction. There's still more to do, but Teams for Education has finally reached a point where we're proud to officially release it. We're excited to keep hearing success stories from teachers like Michele and Pete.\n\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">It. Will. Change. Your. Life. Teams allows you to create a repl, automatically forks it for each student or group, and you never lose access. In breakout rooms or the classroom, I can see what each kid/group is working on in real time and pop in when I need to</p>&mdash; MicheleLombardi (@Lombardi_M_) <a href=\"https://twitter.com/Lombardi_M_/status/1362464185842618370?ref_src=twsrc%5Etfw\">February 18, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\"><p lang=\"en\" dir=\"ltr\">I have been using teams with my 9 Higher pupils this week and it is a game changer - especially when remote coding. The ability to drop in and out of their projects is a game changer. I have also bought my own personal sub to be able to keep projects private.</p>&mdash; Pete Graham (@Petergra) <a href=\"https://twitter.com/Petergra/status/1358117048505802758?ref_src=twsrc%5Etfw\">February 6, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","metadata":{"id":1774}}],["1775",{"pageContent":"But it's not just these couple teachers. In the past 7 months of the beta, we've reached ~1,000 paying Teams customers (and thousands more currently on free trials). We're serving elementary schools, high schools, colleges and universities, bootcamps, nonprofits, and every type of educational institution. And the schools using Replit are incredibly diverse with over 30% majority minority and over half with >45% of their students on free or reduced-price lunch.\n\nWith so much collective brainpower and experience across our community, we're working hard to connect teachers to one another to share best practices. If you haven't already, [join Repl talk](https://repl.it/talk/all) and [our teachers' group on Facebook](https://www.facebook.com/groups/replitforcseducation). We'll be attending the [SIGCSE conference](https://sigcse2021.sigcse.org/) in March and would love to see you at [our presentation](https://repl.it/sigcse2021). We'll be at [CSTA](https://www.csteachers.org/page/csta-2021) over the summer as well. More details to come. We'll be resuming \"office hours\" (video call sessions with our team) in the coming weeks and sending a survey to ask your time preferences. And to help us out on all these fronts, we'll soon be adding another teacher from the community to our team. \n\nFinally, the Replit team is doing a book club, and we'd love to have you join. We're reading [\"The Friendly Orange Glow\"](http://friendlyorangeglow.com/), which tells the story of programming education and early cyberculture from the 1960s through the early 90s. If you'd like to read the book and join our next conversation, just email patrick@repl.it and I'll send you the details!\n\nIt's been an exciting journey building Teams for Education, and there's so much more to come. You can [learn more and sign up for a free trial here](https://repl.it/teams-for-education). Happy coding!","metadata":{"id":1775}}],["1776",{"pageContent":"---\ntitle: Teams for Education, Fall 2020 Updates\nauthor: Arnav Bansal and Derrick McMillen\ncover: https://blog.repl.it/images/teams_edu/replitroom.png\ndate: 2020-11-19\ncategories: edu\n---\n\n**Edit: As of March 2022, Teams for Education is free for all educators. You can gain access [here](https://replit.com/teams-for-education).*\n\nThis Fall we will be shipping a series of small and large improvements to the Teams for Education product. We are laser-focused on making Repl.it the best solution for learning how to code; especially during extended periods of distance learning.\n\n## Easy Grading and Feeback Using Project Switcher\n![Teams for Education Editor Pane](https://blog.repl.it/images/teams_edu/edu_pane.gif)\n\nGrade projects faster with our new Project Switcher! Instead of tediously clicking \"View Submission\" for every student, you may now view, leave feedback, and annotate student project submissions without leaving your workspace. \n\nYou can also use the Project Switcher to seamlessly navigate between Projects. We hope this helps relieve some anxiety while rushing to submit grades before the end of the semester!\n\n\n## Bulk Invite Students via CSV File\n\n![CSV file upload](https://blog.repl.it/images/teams_edu/csv_invites.gif)\nInvite all of your students to your Team at once by uploading a single CSV file. No need for students to have a Repl.it account beforehand - just provide their email addresses.\n\n\n\n## Student Project Perma-Links\n![student project perma-links](https://blog.repl.it/images/teams_edu/stu_perma_links.gif)\nAssign projects quickly using permanent student links to Team Projects. Only students who are part of your Team will be able to use your project perma-link. This improvement will make it more efficient to share links within your existing LMS.\n\n\n\n## Looking Ahead\n\nThat's not all! We have several exciting things arriving before the end of 2020:\n\n- Code-free input/output test authoring and autograding\n- A better onboarding experience for teachers","metadata":{"id":1776}}],["1777",{"pageContent":"## Looking Ahead\n\nThat's not all! We have several exciting things arriving before the end of 2020:\n\n- Code-free input/output test authoring and autograding\n- A better onboarding experience for teachers \n- Webinars and training on Teams for Education\n- Snazzy new Teams profiles\n\n\n## Giving Feedback Goes a Long Way\n\nTeachers continue to express their enthusiasm for multiplayer Repls, annotations, and group projects. We will continue to build on these new platform features to provide a seamless collaborative experience for project based learning. \n\nAre you dreaming of Repl.it features to make you a superhero in your classroom? We want to hear about it! Contact [Derrick McMillen](mailto:derrick@repl.it) directly via email. You can also leave feedback for us [via Canny](https://replit.canny.io/feedback/p/teams-beta-feedback).\n\n![dreaming](https://media.giphy.com/media/fgopKB1UvEA/giphy.gif)\n\nLearn more about *Teams for Education* in our [documentation](https://docs.repl.it/Teams/Projects).","metadata":{"id":1777}}],["1778",{"pageContent":"---\ntitle: Classroom is Transitioning to Teams for Education\nauthor: Patrick Coleman\ndate: 2020-09-29T07:00:00.000Z\ncover: https://blog.repl.it/images/teams_edu/replitroom.png\ncategories: edu\n---\n\n*Edit on Thursday, November 12:*\n*We've prolonged the Classroom deprecation date to 1/31/2021 to give teachers whose fall classes carry over into the new year extra time to transition.*\n\n*Edit on Friday, October 2:*\n*You can now ***migrate your Classroom assignments to a free Team*** by [clicking on this link](https://repl.it/classroom-migration) and choosing which Classrooms to migrate. [Check out these helpful resources](https://teamsforeducationresources.obaidaa.repl.co/) to get the most out of Teams.*\n\n*Unit tests, matching tests, model solutions, submissions, students, and TAs will not being migrated at this time. You can easily reinvite students in a FERPA/COPPA/privacy compliant way by [following these steps](https://docs.repl.it/Teams/privacyFAQs). The new Team will be free for 4 months and soon we’ll be sharing “financial aid” (i.e. free team) options for the spring for those with budget difficulties as well. Those who can pay now will be able to lock in a lower rate. [Student data and work can also be exported](https://docs.repl.it/classrooms/exports) from your Classroom by following these steps.*\n\nToday our legacy Classroom product experienced an outage, and there were multiple outages last week as well. We have been working incredibly hard, missing sleep and working weekends trying to keep the Classroom product up, but we are realizing now that we won’t be able to maintain smooth service on Classroom moving forward.","metadata":{"id":1778}}],["1779",{"pageContent":"We have not been marketing or promoting Classroom, but it has been growing on word of mouth alone. Classroom and the core Repl.it platform are on separate codebases. We have not actively improved Classroom since 2017. Since then, we have been continually improving the core Repl.it platform. Although we have been planning the transition for a long time, we have spent millions of dollars in hosting and maintenance costs keeping Classroom up to not disrupt students and teachers who depend on it. We won’t be able to keep doing this.\n\nIn June, we [announced that we were going to release Teams](https://blog.repl.it/teams-for-education), a new product built on top of the core Repl.it platform, so educators can take advantage of everything we have built since 2017.\n\nWith Teams, you can use [live multiplayer repls](https://repl.it/site/multiplayer) with Zoom breakout rooms. You can grade your students’ work with automated unit tests (right now you can build/fork [simple](https://docs.repl.it/Teams/SimpleAutograding) & [fully automated](https://docs.repl.it/Teams/CentralizedAutograder) autograders, and autograding should get easier in the future with product updates). You can leave feedback with [Google docs-style comments](https://blog.repl.it/annotations-for-education) directly in-line in your students’ code. You can add PDF, markdown, or other files to repls to give students instructions. You can still [embed repls](https://docs.repl.it/repls/embed) in your LMS. And support for group projects is also coming very soon.\n\nPlease [answer this 1-question survey](https://docs.google.com/forms/d/e/1FAIpQLSfDJu85xxaZWUPdYTPNkNDTTOv8SwUkxp3iN0Bno1k8yXRAgg/viewform) to let us know what else you'd like to see in Teams.\n\nWe've also simplified Teams pricing to $35/team/month or $350/team/year (2 months free) with an unlimited number of students. And there are more billing improvements on the roadmap.","metadata":{"id":1779}}],["1780",{"pageContent":"We've also simplified Teams pricing to $35/team/month or $350/team/year (2 months free) with an unlimited number of students. And there are more billing improvements on the roadmap.\n\nWe had planned to slowly phase out Classroom this academic year while giving teachers ample time to transition to Teams or other services. In retrospect, that was a mistake. We knew that Classroom was not in the best shape, and we had a sneaking suspicion that it might not scale well. Nevertheless, we decided to do our best to keep the product up-and-running. \n\nUnfortunately and despite not accepting new Classroom customers since August, Classroom grew past our projections, past a breaking point where it’s now bringing down the whole site. This is due to flaws in the legacy code that will not impact the core Repl.it platform once we have transitioned. Classroom makes up less than 5% of our active user-base, yet it’s disrupting Repl.it for everyone. \n\nHere’s what we are planning to do:\n\n**We will give you the product for free** for the remainder of the semester because the last thing we want to do is to add unnecessary stress to find a new solution when so much else is changing in the world. There will be options for “financial aid” (i.e. free/reduced pricing) after this semester.\n\nWe are planning to release migration tools tomorrow (or as soon as we possibly can) and we encourage everyone to migrate. Right now, it’s best to assume that Classroom won’t return to running smoothly, but we will do our absolute best to keep it floating, if only to migrate your materials.\n\nThese are not easy times to be teaching, and the work all of you are doing is essential and valuable. Once again, thanks for using Repl.it and sticking with us through this transition. And thanks for educating the next generation of coders!\n\nAmjad\nCEO & Founder\ncontact@repl.it \n\nP.S. Here is a [growing list of resources](https://teamsforeducationresources.obaidaa.repl.co/) to get the most out of Teams.","metadata":{"id":1780}}],["1781",{"pageContent":"---\ntitle: Template Jam 2022\nauthor: Replit Team\ndate: 2022-05-16\ncover: https://blog.repl.it/images/template-jam/cover.jpg\ncategories: events \n---\n\nSince we introduced [templates](http://replit.com/templates), many of you have asked to get in on the action. We have some amazing community templates already, but we want to get everyone involved.\n\nWe've been hard at work revamping both the templates page and publishing flow so that everyone can create and publish a template. We're rolling this out over the next week, so keep your eyes peeled!\n\nTo celebrate this new release, on May 23rd, we're bringing Template Jam [back](https://replit.com/talk/announcements/template_jam-EXTENDED/33491). This time there will be $10,000 USD in prizes and you'll have the power of [Nix](https://blog.replit.com/nix) behind you. \n\nWe're excited to see all the wonderful templates you create, and brand new ways for people to create on Replit.\n\n<img src=\"https://blog.repl.it/images/template-jam/squareish.jpg\" alt=\"Template Jam Cover Art\" width=\"100%\" style=\"width:100%\"/> \n\n### What are templates and how do I make one?\n\nTemplates are repls that serve as a starting point for others to build on top of. \n\nTemplates can be blank repls with support for a single language like many of the official templates are. Or they can be [portfolio website starter kits](https://replit.com/@templates/Portfolio-Site-Template?v=1) or [PyPi package templates](https://replit.com/@frissyn/PyPI-Package-Template?v=1). They can also be tutorials for languages or frameworks. The possibilities are endless, really.\n\nCheck out [these docs](https://docs.replit.com/programming-ide/configuring-repl) on how to configure a repl to get your template working with any language or framework.\n\n### What kind of templates should I make?\n\nIt's up to you! Our community has some ideas on what templates they'd like to see if you want some inspiration:\n- A [Flutter](https://flutter.dev/) starter\n- The [Rustlings](https://github.com/rust-lang/rustlings) exercises","metadata":{"id":1781}}],["1782",{"pageContent":"- A [Flutter](https://flutter.dev/) starter\n- The [Rustlings](https://github.com/rust-lang/rustlings) exercises\n- A [React Native](https://reactnative.dev/docs/getting-started) starter\n- A [Chrome extension](https://developer.chrome.com/docs/extensions/mv3/getstarted/)\n\nAnd our team has some ideas on things we'd like to see as well:\n\n- A simple static hosted blog without a framework—like [Replit's own](https://blog.replit.com/__repl)\n- [Figma Plugins](https://www.figma.com/plugin-docs/intro/)\n- A [Shopify theme](https://www.shopify.com/partners/blog/topics/shopify-theme-development)\n- [Phoenix LiveView](https://hexdocs.pm/phoenix_live_view/installation.html)\n- An [Oculus app starter](https://developers.google.com/assistant)\n- [Sonic Pi](https://sonic-pi.net)\n\n### How can I submit my template for Template Jam?\n\nPublish a repl to the community as a template and add the tag `#templatejam`. It's that simple!\n\nWe will start collecting submissions May 23rd at 12:00 AM PST, and stop collecting submissions June 23rd at 11:59 PM PST. \n\n### How are winners decided?\n\nYou'll have two ways to win!\n\nThe first $5,000 in prizes will be awarded by a panel of judges reviewing templates based on several criteria. This panel will include some Replit team members and a couple of guest judges. When reviewing, we'll be asking ourselves questions like:\n- How useful is it? _Does it extend the capabilities of what people can build on Replit?_\n- How easy is it to use? _Can a beginner press run and it just works?_\n- How well does it make use of Replit's features? (i.e. Replit DB, Kaboom.js, Repl Auth, LSP, packager, debugger, etc.)\n - Is it well-documented? _Is it easy to understand what's going on?_\n\nThe second $5,000 in prizes will be awarded based on a secret formula that will measure community reception of the templates in the month following the end of submission.\n\n### How much can I win?\n\nYou can win anywhere from $50 USD up to $5,000 USD.\n\n### How many templates can I submit ?","metadata":{"id":1782}}],["1783",{"pageContent":"### How much can I win?\n\nYou can win anywhere from $50 USD up to $5,000 USD.\n\n### How many templates can I submit ?\n\nYou can submit as many templates as you like! There is no limit.\n\n### Can I remix existing templates?\n\nYes, as long as you're adding original ideas and putting an effort to meaningfully change or improve the template.\n\n---\nIf you have any other questions, feel free to reach out to us on [Twitter](https://twitter.com/Replit), or [contact support](https://replit.com/support).\n\n[Rules and conditions apply](https://replit.com/@replit/Template-Jam-Rules#README.md)","metadata":{"id":1783}}],["1784",{"pageContent":"---\ntitle: How to Turn on Dark Mode and Switch Themes on Replit\nauthor: Piero Maddaleni\ndate: 2021-11-23\ncategories: product \ncover: https://blog.replit.com/images/theme-how-to/themeheader.png\n---\nWe recently changed how you change themes on Replit, and since people have been asking, we'll show you how it's done in this short blogpost. Start off by clicking on the hamburger button in the top right corner to open up the sidebar: \n\n![Opening Hamburger Menu](https://blog.replit.com/images/theme-how-to/hamburger.webp)\n\nNext, simply click on the moon or sun at the bottom of the menu to switch between light and dark theme:\n![Pressing the Theme Button](https://blog.replit.com/images/theme-how-to/lebutton.webp)\n\n---\nWe're working on adding themes besides light and dark currntly, such as the spooky theme. Changing to these themes is easy as well! Start out by clicking your username on the aforementioned sidebar, then click on Account:\n![Going to the Account Page](https://blog.replit.com/images/theme-how-to/account.webp)\n\nScroll down until you get to the Preferences section, and use the dropdown menu to change your theme:\n![Changing the Theme with the Dropdown Menu](https://blog.replit.com/images/theme-how-to/spooky.webp)\n\nThere ya have it, easy theme changing on Replit!","metadata":{"id":1784}}],["1785",{"pageContent":"If you've been using Replit for a while you might have noticed our multiplayer feature has gone through quite a few iterations. As it has evolved the infrastructure making it all work has been along for the ride. Each implementation unlocked important capabilities and pushed our infrastructure to be better.\n\nOur very first implementation of multiplayer was intentionally kept simple. We reached for what we deemed well established and supported libraries in the community. This lead us to a stack with [our editor](linktomonacoblogpost) talking [operational transform](yep) to [sharejs](yep) backed by [mongodb](yep) to coordinate edits between clients. This meant supporting additional infrastructure but required very little code and no changes to what we were already running. There were some significant downsides though. Being purely client based multiplayer sessions would rely on the host for coordination and thus only live as long as the host. Clients needed to send file contents to their repls when they run. Lots of scaling issues. We wanted to preserve OT history efficiently. Probably more. Shit on mongo db a lil, i hear that's hot. It wasn't very stable right guys?\n\nWe were surprised to find what looked to be the state of the art open source collaborative editing appeared to have many serious flaws. After beginning to roll out multiplayer we found a myriad of bugs stemming from libraries we depended on. *talk a lil shit about sharejs n friends*! i forget what the issues were but we diverged and had catch up problems iirc?","metadata":{"id":1785}}],["1786",{"pageContent":"To move forward we wanted to dramatically simplify the inner workings of multiplayer and own much more of the vertical. Although this meant more work up front, having simpler code we understood sounded a lot better than gluing together libraries we didn't. After surveying the existing technology we settle on a very simple version of unicode text based operational transform. OT, we found, was well understood, simpler than any alternatives, and most importantly we could wrap our heads around it. Collaborative editing was redesigned more like a regular desktop application to on top of our existing code evaluation infrastructure.\n\nSome major protocol changes later making [natively concurrent and mutliseat](link to that blog post) and this was decidedly the way multiplayer should work.\n\nBut first you probably want some background on our code evaluation infrastructure. We call it Goval internally and it's awesome. It starts up hundreds of repls every second all day every day. But to be this awesome it has an important caveat: it can kill your repl at any time for any reason. If you decide you want to keep repling you'll have to boot the repl up from scratch and start again at the last checkpoint. This takes lots of careful consideration from the client to keep things moving along smoothly. Although a tricky trade off we've decided it's worth it.\n\nCollaborative editing is build right in to your repl (actually packed into the init process), running right next to your `main.py` and [language server](yep). This poses some interesting technical problems as we need to follow the rules of userland. The trade-offs are easily worth it, the code is exceedingly simple and focused only on the task at hand. Code that runs in a repl needn't worry about scaling, servers, routing, or any other craziness the web often entails. That's already handled by our infrastructure for free. Once you get right down to it we're just dealing with a good ol' [unix system](memes).","metadata":{"id":1786}}],["1787",{"pageContent":"When setting out on this journey we needed to face some unfortunate truths.  Writing correct code is hard. Writing correct code to do operation transform is *really* hard. To balance with human fallibility we put significant effort into error detection, reporting, and recovery. When things go wrong we try to crash as fast and loud as we can. This might not always lead to the best user experience \n\nAlthough we trusted our OT test suite was good, we also trusted our users to fuzz the shit out of us bro.\n\nBefore making any attempts to change stuff we've put a lot of work.\n\nno multiplayer -> going live -> always multiplayer -> multiplayer native\n\ncoming soon: multiplayer native aka product catches up with infra\n\n# NOOOTES\n\n- everything was on the client, life was easy\n- went multiplayer. read all about it here https://blog.repl.it/multi \n- life got a lot harder\n- should we mention?: we regressed\n- our infra is based on ephemeral stuff, we need to be highly crash recoverable\n- scaling was $0\n- ![ot ops graph](images/ot_ops_graph.png)\n- ot in an ephemeral world is kinda tricky\n- checksuming, sometimes you find bugs in you libs\n- ot history mayb\n- chipping away at all the possible states\n  - ![crc32 mismatches](images/crc32_mismatch.png)\n  - ![prompted percent](images/prompted_percent.png)\n  - we found lots of dumb bugs\n    - https://github.com/josephg/unicount/pull/1\n    - https://github.com/protobufjs/protobuf.js/pull/1486\n    - monaco's newline fuckery\n      - monaco reports it as one character even on windows\n      - the offsets are messed up!\n      - monaco normalizes the buffer into a single type of newline\n      - theycan say  the line endings are\n      - user file content can container a mix\n      - we need to report hte right \n      - we store the actual characters\n      - when we see monacdo's characters we walk the characters to get the real offset\n      - change monaco to always use \\n\n      - if the file actually was","metadata":{"id":1787}}],["1788",{"pageContent":"---\n    title: Those W\n    author: Amjad Masad\n    date: (Leaving this field empty will keep it \"unpublished\")\n    cover: (This is what you want the cover picture to be. It is required. Make sure it is showing up correctly here: https://cards-dev.twitter.com/validator)\n\t  categories: Comma separated list of categories, like: news,eng,infra\n    profiles: Comma separated list of Replit usernames of the authors, like: bardia,amasad,CeeZee22,replitjeremy\n    ---\n\nGiving learners a space to navigate the world of coding in small, digestable bites, while also being a part of the Replit Community is one way we are bringing the next billion software creators online! But, there is another, much bigger, way to do this. Let Community lead the way with a Tutorial Jam....\n\n## Why Tutorials?\nReplit has always been a place for creators, educators, and learners. Recently, learners of all levels have been requesting more educational content. \n![Content feedback](https://blog.repl.it/images/100days_feedback1.png)\n![Content feedback 2](https://blog.repl.it/images/100days_feedback2.png)\n\nOur recent [Curriculum Jam winners](https://www.youtube.com/watch?v=AOGs2oEyP4I) are a pair of teenagers running their own start up, [Mission Encodable](https://missionencodeable.com/about), determined to bring better content and learning tools to their school. Users from all coding backgrounds are learning along with [Replit's 100 Days of Code](https://twitter.com/search?q=replit100daysofcode&src=typed_query). We have the [Curriculum Hub](https://replit.com/curriculum) for educators, but we want *more* for *more* users. Allowing everyone to add tutorials gives greater equity of access and ability to meet the needs of the versatile Replit Community.\n\n## How Do I Create Tutorials?","metadata":{"id":1788}}],["1789",{"pageContent":"## How Do I Create Tutorials?\nThe [Tutorial Pane](https://www.youtube.com/watch?v=l650luzyQGs) made its debut with [100 Days of Code](https://replit.com/learn). The best part about this simple feature is it's available to everyone in a regular repl and is super easy to set up with just a few steps:\n\n⏮ Inside any repl, create a fdolder called `.tutorial`.\n\n⏮ Within this folder, create as many markdown files as you like. They will automatically sort alphabetically (so add numbers to sort the order). \n\n⏮ The level one heading on each markdown file will be the title that appears in the table of contents and the progress indicator. \n\n⏮ Add a file called `video.json` within the `.tutorial` folder. \n\n⏮ Embed a video with `{ \"embedUrl\": \"https://www.youtube.com/embed/uniquevideocode\"}` The embed link needs to be a YouTube video. \n\n⏮ Reload the repl. \n\nNeed extra help? Follow along with this [video](https://www.youtube.com/watch?v=l650luzyQGs) and see the tool in action in [this documentation](https://building-templates.davidatreplit.repl.co/)!\n\n## What Can I Create?\n*Everyone* is an educator. Yes, you heard that correctly! Anyone who has something to share that will help other Replers learn *is* an educator. What can you share? Show off your skills by particpating in our upcoming [Tutorial Jam](https://tutorial-jam.replit-community.repl.co/). Our [live kick-off party](https://www.youtube.com/watch?v=HEPDZzArTQ0) is October 29. The winners of this Jam will be among the first to have their content showcased on Replit.\n\n## Did you say Tutorial Jam?\n\nWe did. Get all the details [here](https://tutorial-jam.replit-community.repl.co/.).\n\n✅ This Jam is for anyone who wants to teach a new concept, skill or game development. As we said, those who can, teach! So, feel free to share it with your students!\n\n✅ You need to use the new tutorial feature that debuted in 💯 Days of Code.","metadata":{"id":1789}}],["1790",{"pageContent":"✅ You need to use the new tutorial feature that debuted in 💯 Days of Code.\n\n✅ Your completed tutorial needs to be published to the community with #TutorialJam2022 and [submitted here](https://tutorial-jam.replit-community.repl.co/) between October 29 and November 5.\n\nWhat will you teach us? Remember, those who *can*, teach!","metadata":{"id":1790}}],["1791",{"pageContent":"---\ntitle: Open-Sourcing the Universal Package Manager\nauthor: Radon Rosborough\ndate: 2019-10-30T00:00:00.000Z\ncategories: product\n---\n\n<img src=\"/images/upm_cover_small.png\" alt=\"universal package manager\"/>\n\nOn Repl.it, working with packages is made easy. You can simply type `import flask` in your Python code, and [Flask](https://palletsprojects.com/p/flask/) will automatically be installed for you. Or, if you’re more the browsing type, you can search for packages and install them through a graphical interface.\n\nIn Repl.it tradition, once you know how to do package management in one language, you know how to do it in every language. You can use the same interface to install packages in Node.js, simply type `require(“express”)` to get [Express](https://expressjs.com/) up and running and so on.\n\n<div style='position:relative; padding-bottom:calc(64.48% + 44px)'><iframe src='https://gfycat.com/ifr/SecondFarawayBird?hd=1&speed=1.5' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\nToday we’re excited to release several months of work on improving the package management experience. Here are the highlights:\n\n* **Reproducible package management.** We’ll still look at your code and install packages automatically, but now we’ll remember exactly which versions to use, so your code will keep working no matter how many package updates are published.\n* **Modern tooling and best practices.** We now use the modern dependency manager [Poetry](https://poetry.eustace.io/) to manage your Python packages. Poetry improves on Pip in its security, consistency, usability, and flexibility. We believe tools like Poetry are the future, and we are migrating to them to do our part in improving the ecosystem for developers everywhere.","metadata":{"id":1791}}],["1792",{"pageContent":"* **Giving back to the community.** The core of our language-agnostic package management is now [open-source on GitHub](https://github.com/replit/upm). UPM, the Universal Package Manager, is a manager for your package managers: it knows all of their features, best practices, and quirks so that you don’t have to. UPM provides a unified set of abstractions (adding, removing, and listing project packages, searching for packages online, and guessing what packages need to be installed for your project to run) and a consistent, scriptable command-line interface that you can use to manage packages for every language the same way, just like we do on Repl.it. If you want to get your favorite package manager on Repl.it, all you need to do is submit a pull request to UPM. Supporting a new language now only takes about 300 lines of code!\n* **More language support.** Splitting out package management into a project which abstracts over language-specific differences makes adding package management to more languages much easier. In fact, we’ve already received a contribution from the [DartLang](https://dart.dev/) team, and also [added](https://github.com/replit/upm/commit/e5b9ee58afc1044bcfbeda3a9f4f00ce40d475fc) package management to [Emacs Lisp](https://repl.it/site/blog/elisp) – check it out [here](https://repl.it/l/elisp)! \n\nYou can take out UPM on your computer. Check out the [Installation](https://github.com/replit/upm#installation) section on GitHub for full instructions for your system. \n\nHere is a quick demo of the CLI on Repl.it. (You can open a shell in the workspace with `ctrl-shift-s` on mac `command-shift-s`).\n\n<div style='position:relative; padding-bottom:calc(41.51% + 44px)'><iframe src='https://gfycat.com/ifr/WigglyKeyBubblefish?hd=1&speed=1.5' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div>\n\nLet’s dive into some of the technical aspects of UPM and Repl.it’s new package management.","metadata":{"id":1792}}],["1793",{"pageContent":"Let’s dive into some of the technical aspects of UPM and Repl.it’s new package management.\n\n## Different kinds of package managers\n\nThere’s more than one kind of package manager. Broadly speaking, I like to define two categories: *system* package managers, and *project* package managers.\n\nSystem package managers:\n* include [Homebrew](https://brew.sh/), [APT](https://en.wikipedia.org/wiki/APT_%28Package_Manager%29), [RPM](https://rpm.org/), [Pacman](https://wiki.archlinux.org/index.php/pacman), and [Chocolatey](https://chocolatey.org/).\n* generally install only the latest versions of all software.\n* install software globally, for everyone (or in some cases for a single user).\n* often have guarantees by package repository maintainers that the software they install will work together.\n* can install anything that’s packaged, regardless of the language it’s written in.\n\nProject package managers:\n* include [Pipenv](https://github.com/pypa/pipenv), [Poetry](https://poetry.eustace.io/), [NPM](https://www.npmjs.com/get-npm), [Yarn](https://yarnpkg.com/en/), [Bundler](https://bundler.io/), [Stack](https://docs.haskellstack.org/en/stable/README/), and [Cask](https://cask.readthedocs.io/en/latest/).\n* can generally install any versions of available packages, and generally include dependency resolution algorithms that can compute solutions to a large set of package version constraints.\n* install packages into an isolated environment for every project, so that they aren’t available (and can’t conflict) globally.\n* usually don’t have any guarantee about the quality, compatibility, or even safety of the packages that are installed.\n* are almost always limited to one specific language.\n\nIn other words, system package managers are meant to administrate your system and install the tools that you use everywhere on your machine, whereas project package managers are meant to help develop and package new software. These are very different use cases, and so the resulting package managers are very different.","metadata":{"id":1793}}],["1794",{"pageContent":"You might ask, what about tools like [Pip](https://pypi.org/project/pip/), [RubyGems](https://rubygems.org/pages/download), and [cabal-install](http://hackage.haskell.org/package/cabal-install)? These tools occupy a middle ground: by default, they install packages globally (making them unsuitable for project package management); yet they are also limited to a specific programming language (making them also unsuitable for system package management). As package management ecosystems evolved, using these tools directly is no longer recommended; rather, for system package management you should use a system package manager which packages the software you want to install globally, and for project package management you should use a tool which wraps Pip (e.g. Pipenv or Poetry), RubyGems (Bundler), or cabal-install (Stack) to provide isolation and reproducibility.\n\n## How should project package managers behave?\n\n<div style='position:relative; padding-bottom:calc(80.14% + 44px)'><iframe src='https://gfycat.com/ifr/ThatAthleticIsopod?hd=1&speed=1.5' frameborder='0' scrolling='no' width='100%' height='100%' style='position:absolute;top:0;left:0;' allowfullscreen></iframe></div><p>\n\nHere’s how we visualize project package management as working in an ideal world: *source → specfile → lockfile → installed packages*. Let’s break that down in detail:\n\n* The *source* code is what really defines a project's dependencies. Although often imprecise and implicit through importing and usage of packages, when possible the source should be used as a basis. For example `upm add --guess` will add any packages it think are being used to the specfile.","metadata":{"id":1794}}],["1795",{"pageContent":"* The *specfile* describes project dependencies in a human-and-machine-readable format. For example, your specfile might say: “This is a Python project. It needs [Flask](https://pypi.org/project/Flask/) (at least version 1.1, but not 2.0 or anything later) as well as [Selenium](https://pypi.org/project/selenium/) (any version) to run.” For [Poetry](https://poetry.eustace.io/), this file is called `pyproject.toml`. Typically you edit the specfile either by hand or by using a command-line interface (or both). For example, you could create the specfile I described above by running `poetry add “flask ^1.1” “selenium *”`.\n* The *lockfile* is a file that describes project dependencies *exactly*, in a machine-readable format. This means that it includes *transitive dependencies* (dependencies of your dependencies), and it has exact versions for every package, rather than the version *constraints* (at least 1.1, less than 2.0) that are found in the specfile. The lockfile is automatically generated from the specfile by the project package manager via *dependency resolution*. Why is it important? If you have a lockfile, then it ensures that every developer working on your library or application will use exactly the same versions of its dependencies. This is very important for reproducibility! Typically, lockfiles also include some checksums or hashes to improve security (if someone has replaced a dependency on PyPI with malware, then the build will fail). For Poetry, the lockfile is called `poetry.lock`.\n* The *packages* are installed based on what is listed in the lockfile. Typically, they will be installed into an isolated per-project directory (like `node_modules` or a Python virtualenv).\n\nThis one-directional information flow from source to specfile to lockfile to installed packages neatly separates the different functions of a project package manager. Each stage having less human involvement than the last.\n\n## How do project package managers actually behave?","metadata":{"id":1795}}],["1796",{"pageContent":"## How do project package managers actually behave?\n\nNot well, it turns out. While building the package management infrastructure at Repl.it, we discovered a laundry list of language-specific limitations, quirks, and design mistakes. This is what inspired us to create UPM: we want to make package management as easy as it should be.\n\nHere are some of our favorite quirks:\n* Bundler, despite using a project-local specfile and lockfile, installs dependencies *system-globally* by default. You can configure this, but there’s no standard project-local location to use.\n* When you run `pip search Flask`, the package named `Flask` does not appear in the search results. As of yet, I’ve been unable to determine why. Also, you can’t compare Python package names using string equality because they are case insensitive and hyphens and underscores are equivalent. (But nonetheless there *is* a canonical format for each package name, which cannot be determined without network access and which is used in some contexts but not others.)\n* The lockfile format used by Yarn is *almost* YAML, but not quite. [Yes, really.](https://github.com/yarnpkg/yarn/issues/5629)\n* The command-line option to make Bundler produce machine-parseable output is “documented” only by virtue of existing in the source code. Reading Bundler specfiles and lockfiles from an external tool is also only possible by threading together a bunch of internal functions from the Bundler source code.\n* There’s no reasonable way in Poetry to discover where dependencies are going to be installed. You have to either create a virtual environment and then ask where the Python binary was installed, or manually reimplement the algorithm, which includes checking environment variables, reading two different configuration variables, parsing an optional TOML file, looking up the Python version, and lowercasing the project name.","metadata":{"id":1796}}],["1797",{"pageContent":"* Given a Python import, the best way to determine which package provides it is apparently to look it up in a big list that is generated by [people manually adding packages one at a time](https://github.com/bndr/pipreqs/commits/master/pipreqs/mapping).\n* For some packages, the NPM Registry API returns a URL for the package homepage in search results but *not* when you look up details for the package individually.\n* The standard Emacs package manager has literally no support for installing anything but the latest version of a package.\n\nIf you use UPM, you don’t have to worry about any of this!\n\n## UPM abstractions\n\nThe basic principle of UPM is to define [a sensible internal API](https://github.com/replit/upm/blob/c81fda15dfb2cda4cf345911a2c369ed060dde0c/internal/api/types.go#L116-L309) which can be implemented for each language, and then define the user-facing command-line interface in terms of this API. This way, all of the business logic of UPM is guaranteed to be language-independent.\n\nSome parts of the API are simple constants: the names of the specfile and lockfile, and what filenames correspond to the language. These are used for project language autodetection. Other parts implement the core UPM operations: add or remove packages, list the specfile or lockfile, search project source code for possible dependencies to install. In addition to guaranteeing language-independence, this API/CLI split makes it easier to implement language backends. For example, ‘upm add flask’ will first list the specfile and filter out Flask if it’s already been added. This means the implementation of `LanguageBackend.Add` for the Python backend of UPM can just invoke `poetry add`, without needing to worry about the fact that Poetry throws an error if you try to add the same package twice.","metadata":{"id":1797}}],["1798",{"pageContent":"One of the main challenges in designing UPM’s language backend API was the fact that different package managers act quite differently. In an ideal world, each package manager would implement three separate operations: add to or remove from the specfile, generate the lockfile from the specfile, and install packages from the lockfile. In reality, some package managers force you to do two or even three steps at once. In UPM, we deal with this by having each language backend declare a set of “quirks”, like `AddRemoveAlsoLocks` and `LockAlsoInstalls`. The implementation of `upm add` will run the `Add` backend method, and will then follow it up with the `Lock` backend method *unless* `AddRemoveAlsoLocks` is included in the backend’s quirks configuration (indicating that the lockfile was already generated in addition to the specfile being modified).\n\nEven worse than some package managers combining steps, some package managers don’t have any concept of a lockfile at all! For example, the standard package manager for Emacs Lisp ([`package.el`](https://wikemacs.org/wiki/Package.el), wrapped by [Cask](https://cask.readthedocs.io/en/latest/)) has no support at all for installing a specific version of a package, so the idea of a lockfile is really a non-starter. (Aside: this annoyed me so much that I wrote [my own package manager for Emacs](https://github.com/raxod502/straight.el), which was part of the reason I got hired to improve the package management infrastructure at Repl.it!)\n\nThe approach of UPM to this problem is to preserve the spirit of the specfile/lockfile abstraction as much as possible. For Emacs Lisp, UPM will install directly from the specfile, then generate a lockfile from what is installed (listing exact versions and transitive dependencies, of course).\n\n## Caching and dependency guessing","metadata":{"id":1798}}],["1799",{"pageContent":"## Caching and dependency guessing\n\nAt Repl.it, we care about performance, because nobody wants to wait for their code to run. That means our package management needs to be as fast as possible, especially when there isn’t actually anything that needs to be installed. Since we want UPM to be as useful a standalone tool as possible, we opted to implement all of the performance optimizations directly in UPM. All of the package management code in Repl.it is essentially just a wrapper around UPM:\n\n* when you add a package through the interface, Repl.it calls `upm add`\n* when you remove a package through the interface, Repl.it calls `upm remove`\n* when you run your code, Repl.it calls `upm add --guess` (which searches your code for `import` or `require` statements and installs any missing packages)\n\nYou might ask how it isn’t incredibly slow to do a code search on every run. (Not to mention making sure the lockfile and installed packages are up to date, since you’re allowed to edit the specfile directly at any time if you want to!)\n\nThe answer is that UPM transparently keeps track of some information in a hidden JSON file behind the scenes. It looks something like this:\n\n```json\n{\n  \"version\": 2,\n  \"languages\": {\n    \"python-python3-poetry\": {\n      \"specfileHash\": \"361e6bddc6a34f1696e71227be88b4b4\",\n      \"lockfileHash\": \"f208ad0efc93d51f52e04326406816cf\",\n      \"guessedImports\": [\n        \"Flask\",\n        \"selenium\"\n      ],\n      \"guessedImportsHash\": \"8952e87cf73e21ef3313c4e9c98718a7\"\n    }\n  }\n}\n```\n\nAfter a successful operation, UPM will automatically record [hashes](https://en.wikipedia.org/wiki/Hash_function) of the specfile and lockfile. That way, it can tell if the specfile has changed since the last time the lockfile was generated. If it hasn’t, then `upm lock` is a very fast no-op. Similarly, if the lockfile hasn’t been changed since the last time packages were installed, then `upm install` can be optimized away.","metadata":{"id":1799}}],["1800",{"pageContent":"UPM also optimizes dependency guessing by means of a two-step search. First, it uses a fast [regexp](https://en.wikipedia.org/wiki/Regular_expression) match to heuristically find things that **might** be `import` or `require` statements. Then it converts the deterministically generated sequence of matches into a hash. If this hash matches what was recorded in the JSON file last time a search was done, then the list of guessed packages from last time (also in the JSON file) can be reused. This is very fast. Otherwise, the language backend is asked to do a more advanced search, usually involving [AST](https://en.wikipedia.org/wiki/Abstract_syntax_tree) parsing.\n\n## Closing\n\nWe hope you enjoy faster, more modern, and more open package management support on Repl.it. Now that we’ve aggregated all of the language-specific code into a single place, we hope it will be much easier to add package management support for new languages, like [Emacs Lisp](https://repl.it/l/elisp). Check out [UPM on GitHub](https://github.com/replit/upm) and see what it would take to add your favorite package manager to Repl.it! (Or, if Repl.it doesn’t have your favorite programming language yet, check out our other open-source projects, [Polygott](https://github.com/replit/polygott) and [Prybar](https://github.com/replit/prybar), to help us add it.)","metadata":{"id":1800}}],["1801",{"pageContent":"yar---\ntitle: Welcome to the Wonderful World of Clusters\nauthor: Luis Héctor Chávez\ndate: 2021-03-26T17:30:00.000Z\ncover: https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-after.png\ncategories: infra\n---\n\nHaving [a solid foundation](https://blog.replit.com/quality) is critical for us to be able to fulfill our mission of making programming more accessible, more creative, and more fun. We did a great job of making the platform more stable during last year, but every now and then we would still run into unforeseen problems that [cascaded](https://en.wikipedia.org/wiki/Cascading_failure) into other parts of the platform, producing a bad experience for everyone. So back in October (just a few weeks after I joined the team) when we had 2 load-related site-wide outages within a week, we knew it was time to do a major overhaul of how our infrastructure handles traffic. And now today, we're announcing that as a side effect of that infrastructure change, [Hacker](https://replit.com/site/pricing) repls now run in newer, more powerful machines, which means that we'll have more room to grow and experiment with more benefits for Hackers (and you might find that things feel a little bit snappier lately). This is the first of a three-part series of blogposts on how we rebuilt our infrastructure over the course of ~5 months.\n\n## Introducing a new failure domain","metadata":{"id":1801}}],["1802",{"pageContent":"## Introducing a new failure domain\n\nThe original goal of this endeavor was simple, in theory: split the Replit infrastructure into multiple [failure domains](https://en.wikipedia.org/wiki/Failure_domain), so that when (not if) the next incident occurs, it only affects a subset of the users instead of all of them. There are multiple strategies to do so, and we chose to move Hackers to their own failure domain. But what does this split entail? Prior to this change, our backend infrastructure was relatively simple: a Google Compute [Managed Instance Group](https://cloud.google.com/compute/docs/instance-groups) of VMs that [run containers](https://blog.replit.com/killing-containers-at-scale#replit-architecture), and another one that serves HTTP traffic on `.repl.co` domains.\n\n![Simplified Replit.com infrastructure architecture](https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-before.png \"Simplified Replit.com infrastructure architecture\")","metadata":{"id":1802}}],["1803",{"pageContent":"![Simplified Replit.com infrastructure architecture](https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-before.png \"Simplified Replit.com infrastructure architecture\")\n\nSo in theory if we take the right-hand side of the diagram and make multiple copies of it, treating each one as a completely independent cluster, we solve the problem. [Mission accomplished](https://i.kym-cdn.com/entries/icons/original/000/001/899/mission_accomplished.jpg), right? Not quite: clients now need to know where to make their requests to, since they will now need to hit different hostnames depending on which cluster their repls are (since they are now completely independent after all). Clients that wanted to connect to their repl through the workspace were already required to contact the replit.com web server to get an auth token for the WebSocket connection anyways, so it would make sense for the web server to be the source of truth about the repl->cluster mapping. But what about [hosting](https://blog.replit.com/hosting)? All repls get a `.repl.co` domain, and users can CNAME them to be able to get to their app. At this point, the problem started looking very DNS-shaped, and that's kind of what we ended up doing: an external cluster resolution service, that can be used by both the Replit.com web server and individual clients trying to access their apps!\n\n![Simplified and updated Replit.com infrastructure architecture](https://blog.replit.com/images/welcome-to-the-wonderful-world-of-clusters/clusters-after.png \"Simplified and updated Replit.com infrastructure architecture\")\n\nGiven that everybody needed to make a DNS query to get the address of their `.repl.co` domains, exposing an external DNS server on the cluster resolution service made sense, which also made it such that there is no additional latency involved in this resolution!","metadata":{"id":1803}}],["1804",{"pageContent":"With all the building blocks in place, there was one final thing that needed addressing: [Eventual consistency](https://en.wikipedia.org/wiki/Eventual_consistency). Distributed systems that are resilient, as well as those that have any amount of caching in place, benefit from being able to tolerate slightly stale information gracefully, with the knowledge that eventually the whole system will converge into a stable state. In this case, it is possible for one user to be transferred between clusters: since Hackers are located in a separate cluster, if the users' subscription status changes, they need to be relocated. DNS results can be cached for prolonged periods of time, which means that we need to be able to handle the case where a user tries to access their old cluster for that period of time. For that case, we use another tool from the distributed systems toolbox: [Tombstones](https://en.wikipedia.org/wiki/Tombstone_(data_store)). When a user is moved from one cluster to another, a Tombstone is created in their original cluster, pointing at the destination cluster. Any attempts to contact any of their repls in the original cluster will then be responded by proxying the connection transparently to the new cluster during the TTL of the DNS record. And with that, the solution is now complete!","metadata":{"id":1804}}],["1805",{"pageContent":"One of Replit's internal mantras is to [ship things incrementally](https://freakonomics.com/podcast/in-praise-of-incrementalism/), even though we didn't transfer Hackers to their new cluster until fairly recently, all the infrastructure was in place beforehand. In order to test things out, during another load-related incident we decided to give this idea a try and move one user that had an extremely popular repl to the new cluster to test whether the goal of this project was achieved. Even though we knew there were rough edges, and the user transfer process was not widely tested before, we took a chance and used it. To our surprise, things worked better than we expected, and the incident was mitigated before it became a lot worse. Over the next weeks, the new cluster became one more way for us to move load around in times of emergency, which was a nice side-effect.\n\nYou might also remember that we blogged about our new [global deployments](https://blog.replit.com/global): this was also one intermediate step of this project that we were able to launch early.\n\n## What this means for Hackers\n\nNow that we are able to provision separate infrastructure for each cluster, the first thing that came to mind was to experiment with provisioning slightly different hardware in each cluster. To start, we are trying out how responsive repls are if they are running on machines that have a bit more headspace in terms of CPU and memory, since our theory is that there will be less contention over scheduling. We have a few more experiments planned to make the Hacker experience better, and we're going to make an announcement about this very soon.\n\n## What's next?\n\nAs I mentioned in the beginning of the article, this is part of a series of blogposts. In the next installment, Connor Brewster will go into more detail about our brand new DNS server. To wrap things up, Zach Anderson will describe some of the big deployment changes that we needed to do to achieve all this.\n\nHappy repling!","metadata":{"id":1805}}],["1806",{"pageContent":"---\ntitle: \"Graphics Improved\"\nauthor: Dan Stowell\ndate:\n---\n\nLast week, [we heard](/fix-gfx) that we needed to make improving graphics our number one priority.","metadata":{"id":1806}}],["1807",{"pageContent":"# 1. Terms of Service (\"Terms\")\n\nLast updated: 11/17/2022\n\nPlease read these Terms of Service (\"Terms\") carefully before using the Replit websites and apps (the \"Service\") operated by Replit, Inc. (“Replit”, \"us\", \"we\", or \"our\").\n\nYour access to and use of the Service is conditioned upon your acceptance of and compliance with these Terms. These Terms apply to all visitors, users, and others who wish to access or use the Service.\n\nBy accessing or using the Service you agree to be bound by these Terms. You also agree to be bound by our Privacy Policy at [replit.com/privacy](https://replit.com/site/privacy) and incorporated here by reference. If you disagree with any part of these Terms then you do not have permission to access the Service.\n\n## 2. Service\nWe provide users with a hosted environment and community to code, build, share, and deploy software and web servers through our Service.\n\n## 3.  User Agreement to Acceptable Use of the Service\nYour use of the Service is subject to the prohibitions on use and content in these Terms. If you are found to be in violation of these Terms, or any of our other policies at any time, as determined by Replit in its sole discretion, we may warn you or suspend or terminate your account.\n\n## 4.  Prohibited Actions\nIn using the Services, you may not and may not allow any third party, including your end users, to:\n\n1. Send, upload, distribute or disseminate or offer to do the same with respect to any unlawful, defamatory, harassing, abusive, fraudulent, infringing, obscene, or otherwise objectionable content;\n\n2. Intentionally distribute viruses, worms, defects, Trojan horses, corrupted files, hoaxes, or any other items of a destructive or deceptive nature;\n\n3. Conduct or forward pyramid schemes and the like;\n\n4. Transmit content that may be harmful to minors;\n\n5. Impersonate another person (via the use of an email address or otherwise) or otherwise misrepresent yourself or the source of any email;","metadata":{"id":1807}}],["1808",{"pageContent":"4. Transmit content that may be harmful to minors;\n\n5. Impersonate another person (via the use of an email address or otherwise) or otherwise misrepresent yourself or the source of any email;\n\n6. Create accounts with automation or register accounts in bulk without prior written approval from Replit;\n\n7. Illegally transmit another's intellectual property or other proprietary information without such owner's or licensor's permission;\n\n8. Use the Service to violate the legal rights (such as rights of privacy and publicity) of others;\n\n9. Promote or encourage illegal activity;\n\n10. Use the Service in any way that promotes or facilitates human trafficking, sex trafficking, or physical abuse;\n\n11. Interfere with or disrupt the Services or create an undue burden on Replit's Service or the networks or services connected to Replit's Service;\n\n12. Use the Service to attack or tamper with other websites, services, and individuals;\n\n13. Perform significant load testing without first obtaining Replit's written consent (email permitted), as otherwise these may be treated as denial-of-service attacks;","metadata":{"id":1808}}],["1809",{"pageContent":"13. Perform significant load testing without first obtaining Replit's written consent (email permitted), as otherwise these may be treated as denial-of-service attacks;\n\n14. Launch any automated system, including without limitation, “robots”, “spiders”, or “offline readers” that access the Service in a manner that sends more request messages or any other content to the Replit servers in a given period of time than a human can reasonably produce in the same period by using a conventional online web browser. Notwithstanding the foregoing, Replit may grant the operators of public search engines permission to use spiders to copy materials from the site for the sole purpose of and solely to the extent necessary for creating publicly available searchable indices of the materials, but not caches or archives of such materials. Replit reserves the right to revoke these exceptions either generically or in specific cases. You agree not to collect or harvest any personally identifiable information, including account names, from the Service, nor to use the communication systems provided by the Services for any commercial solicitation purposes. You agree not to solicit, for commercial purposes, any users of the Service with respect to their content. Notwithstanding the foregoing, Replit grants specific consent for you to make both commercial and non-commercial use of our standard embeds in your websites and applications as provided in the following link: [https://docs.replit.com/hosting/embedding-repls](https://docs.replit.com/hosting/embedding-repls);\n\n15. Rent, lease, loan, or sell access to, or otherwise attempt to transfer any right in Replit's website (which includes its software and documentation) to a third-party, through framing or any other method;","metadata":{"id":1809}}],["1810",{"pageContent":"16. Modify, adapt, translate, or reverse engineer any portion of the Service. Without limitation you may not engage in practices of “screen scraping,” “database scraping” or any other practice or activity the purpose of which is to obtain lists of users, portions of a database, copy visuals or business methods, or other lists or information from the Service, in any manner and any quantities not authorized by Replit in writing or use Replit for competitive purposes;\n\n17. Remove any copyright, trademark or other proprietary rights notices contained in or on the Service;\n\n18. Reformat or frame any portion of the web pages that are part of the Service's administration display;\n\n19. Use the Service to \"mine\" bitcoins, other cryptocurrencies, or Cycles;\n\n20.  Display any content on the Service that contains any hate-related or violent content or contains any other material, products or services that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third party rights;\n\n21. Modify the Replit logo or any other Replit Marks or logos;\n\n22. Send unsolicited messages or use the Service to send unsolicited messages (also known as junk mail or SPAM);\n\n23. Repeatedly fork or clone projects to run or host the same code creating undue load on the Service;\n\n24. Use the Service to create a proxy with the purpose of circumventing any firewall or other access control measure;\n\n25. Engage in attacks designed to extract or steal trained machine learning models used by Replit or its third party service providers.\n\n## 5. Prohibited Content\nYou may not upload or transmit any of the follow types of User Content (as defined below) on or through the Service:\n\n*   User Content that infringes a third party's rights (e.g., copyright) according to applicable law;\n*   Excessively profane User Content;\n*   Hate-related or violent User Content;\n*   User Content advocating racial or ethnic intolerance;","metadata":{"id":1810}}],["1811",{"pageContent":"*   Excessively profane User Content;\n*   Hate-related or violent User Content;\n*   User Content advocating racial or ethnic intolerance;\n*   User Content intended to advocate or advance computer hacking or cracking;\n*   Other illegal activity, including without limitation illegal export of controlled substances or illegal software;\n*   Drug paraphernalia;\n*   Phishing;\n*   Malicious User Content;\n*   Other material, products or services that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third-party rights;\n*   Nudity and sexually explicit content or activities, such as pornography and the sale of sexual services;\n*   Content that promotes or facilitates suicide or self-harm, including without limitation instructions or graphic images of suicide or self-harm;\n*   Gambling content such as card, roulette, or dice games that are played for money, Cycles, or anything else of value.\n\n## 6.  Quota & Limits\nReplit has certain soft and hard limits in using its service. Hard limits are automatically enforced by the Service. Soft limits are consumable resources that you agree not to exceed. Details of these limits are shown at [https://replit.com/site/pricing](https://replit.com/site/pricing) and may be updated there from time to time. Long periods of inactivity may result in an account or your use of the Service being deemed inactive. \n\nFor more details on what the limits are currently, please check out our docs [here](https://docs.replit.com/legal-and-security-info/usage).\n\n## 7. Your Use of Content on the Service","metadata":{"id":1811}}],["1812",{"pageContent":"## 7. Your Use of Content on the Service\nIn addition to the general restrictions set forth above, the following restrictions and conditions apply specifically to your use of our content made available on the Service, and the trademarks, service marks and logos (“Marks”) on the Service (collectively referred to as “Service Content”). The Service Content is owned or licensed by Replit or others, and is subject to copyright and other intellectual property rights under the law. Service Content is provided to you on a strictly as-is basis. You may access Service Content for your information and personal use solely as permitted under these Terms. You shall not download any Service Content unless you see a “download” or similar link displayed by Replit on the Service for that Service Content. Except as provided in the “Open Source and User Content” section below, you shall not copy, reproduce, distribute, transmit, broadcast, display, sell, license, or otherwise exploit any Service Content for any other purposes without the prior written consent of Replit or the respective licensors of such Service Content. Replit and its licensors reserve all rights not expressly granted in and to the Service and the Service Content. You agree not to circumvent, disable, or otherwise interfere with the security-related features of the Service or features that prevent or restrict use or copying of any Service Content or enforce limitations on the use of the Service or Service Content. You understand that when using the Service, you will be exposed to Service Content from a variety of sources, and that Replit is not responsible for the accuracy, usefulness, safety or intellectual property rights of or relating to such Service Content. You further understand and acknowledge that you may be exposed to Service Content that is inaccurate, offensive, indecent, or objectionable.\n\n## 8.  User Content","metadata":{"id":1812}}],["1813",{"pageContent":"## 8.  User Content\nOur Service allows you to post, link, store, share and otherwise make available certain information, code, text, graphics, videos, or other material (\"User Content\"). Because part of the Service includes a code editor and file manager for purposes of uploading User Content, you fully control the type and nature of the User Content you upload, and as such you (and not Replit) are responsible for the User Content that you post on or through the Service, including its legality, reliability, and appropriateness.\n\nBy posting User Content on or through the Service, You represent and warrant that: (i) except as provided in the “Open Source and User Content” section below, the User Content is yours (you own it) and/or you have the right to use it and the right to grant us the rights and license as provided in these Terms, and (ii) that the posting of your User Content on or through the Service does not violate the privacy rights, publicity rights, copyrights, contract rights, intellectual property rights or any other rights of any person or entity. We reserve the right to terminate the account of anyone found to be infringing on a copyright or any other intellectual property right.","metadata":{"id":1813}}],["1814",{"pageContent":"Except as provided in the “Open Source and User Content” section below, you retain any and all of your rights to any User Content you submit, post or display on or through the Service and you are responsible for protecting those rights. We take no responsibility and except where prohibited by law, assume no liability for User Content you or any third party posts on or through the Service. However, by posting User Content using the Service you grant us the non-exclusive, worldwide, royalty-free, fully paid-up, sublicensable and transferable right and license to use, modify, publicly perform, publicly display, reproduce, and distribute such User Content on and through the Service in accordance with these Terms and our Privacy Policy. You agree that this license includes the right for us to make your User Content available to other users of the Service, who may also use your User Content subject to these Terms.\n\nReplit has the right but not the obligation to monitor, edit, remove, or share User Content provided by users where it believes in good faith that it is necessary to comply with applicable law, to ensure the consistency, security, and stability of our Service, or for any other reason.\n\nExcept as provided in the “Open Source and User Content” section below, you may not distribute, modify, transmit, reuse, download, repost, copy, or use said User Content, whether in whole or in part, for commercial purposes or for personal gain, without express advance written permission from us.\n\n## 9.  Open Source and User Content","metadata":{"id":1814}}],["1815",{"pageContent":"## 9.  Open Source and User Content\nBy posting User Content on certain portions of the Service or through certain features or functionalities of the Service, such User Content may be automatically subject to an open source license. Additional terms and conditions related to open source licensing on the Services can be found at this link, [https://docs.replit.com/legal-and-security-info/licensing-info](https://docs.replit.com/legal-and-security-info/licensing-info), and such terms and conditions are hereby incorporated into these Terms by reference.\n\n## 10. Cycles\nCycles are a virtual token with no cash value. Your right to use Cycles is a limited, personal, revocable license issued to you by Replit under a set of terms and conditions found at https://replit.com/site/cycles-terms , and are hereby incorporated into these Terms by reference. \n\n## 11. Purchases\nIf you wish to purchase any product or service made available through the Service (\"Purchase\"), you may be asked to supply certain information relevant to your Purchase including, without limitation, your credit card number, the expiration date of your credit card, your billing address, your shipping information and CSC number.\n\nYou represent and warrant that: (i) you have the legal right to use any credit card(s) or other payment method(s) in connection with any Purchase; and that (ii) the information you supply to us is true, correct and complete.\n\nWe reserve the right to refuse or cancel your order at any time for reasons including but not limited to: product or service availability, errors in the description or price of the product or service, error in your order or other reasons, or if fraud or an unauthorized or illegal transaction is suspected.\n\n## 12.  Availability, Errors and Inaccuracies","metadata":{"id":1815}}],["1816",{"pageContent":"## 12.  Availability, Errors and Inaccuracies\nWe are constantly updating product and service offerings on the Service. We may experience delays in updating information on the Service and in our advertising on other services. Products or services may be discontinued, mispriced, described inaccurately, or unavailable on the Service and we cannot guarantee the accuracy or completeness of any information found on the Service. We may offer artificial intelligence features like the ability to generate code.\n\nWe therefore reserve the right to change or update information and to correct errors, inaccuracies, or omissions at any time without prior notice.\n\n## 13.  Notice and Communications\nBy creating an account on our Service, you agree that, from time to time, we may contact you to notify you about certain changes or additions to the Service or regarding your use of the Service. Where we require that you provide an e-mail address, you are responsible for providing us with your most current e-mail address. In the event that the last e-mail address you provided to us is not valid, or for any reason is not capable of delivering to you any notices required or permitted by these Terms, our dispatch of the e-mail containing such notice will nonetheless constitute effective notice. You may give us notice by contacting us at [https://replit.com/support](https://replit.com/support).\n\n## 14.  Contests, Sweepstakes and Promotions\nAny contests, sweepstakes or other promotions (collectively, \"Promotions\") made available through the Service may be governed by rules that are separate from these Terms. If you participate in any Promotions, please review the applicable rules as well as our Privacy Policy. If the rules for a Promotion conflict with these Terms, the Promotion rules will apply.\n\n## 15.  Accounts; Account Termination Policy","metadata":{"id":1816}}],["1817",{"pageContent":"## 15.  Accounts; Account Termination Policy\nUnless you are a Teams for Education student user, you must be at least 13 years old to use the Service. However, children of all ages may use the Service if enabled by a parent or legal guardian. If you are under 18, you represent that you have your parent or guardian’s permission to use the Service. Please have them read these Terms with you. \n\nIf you are a parent or legal guardian of a user under the age of 18, by allowing your child to use the Service, you are subject to the terms of this Agreement and responsible for your child’s activity on the Service. \n\nWhen you create an account with us, you represent that the information you provide is accurate, complete, and current at all times. Inaccurate, incomplete, or obsolete information may result in the immediate termination of your account.\n\nYou are responsible for maintaining the confidentiality of your account and password, including but not limited to the restriction of access to your computer and/or account. You agree to accept responsibility for any and all activities or actions that occur under your account and/or password, whether your password is with our Service or a third-party service. You must notify us immediately upon becoming aware of any breach of security or unauthorized use of your account.\n\nYou may not use as a username the name of another person or entity or that is not lawfully available for use, a name or trademark that is subject to any rights of another person or entity other than you, without appropriate authorization. You may not use as a username any name that is offensive, vulgar or obscene.","metadata":{"id":1817}}],["1818",{"pageContent":"Replit may terminate a user’s access to the Service if the user is determined to be a repeat infringer of our Copyright Policy below or if in Replit’s sole discretion, Replit determines that a user has breached or otherwise violated these Terms. If Replit, in its sole discretion, determines that a user or User Content violates these Terms for any reason, Replit may at any time, without prior notice and in its sole discretion, remove such User Content and/or terminate a user’s account. In addition to the foregoing, we reserve the right to refuse service, terminate, reclaim or repurpose accounts, remove or edit content, or cancel orders in our sole discretion.\n\n## 16.  Copyright Policy\nWe respect the intellectual property rights of others, it is our policy to respond to any claim that User Content posted on the Service infringes on the copyright or other intellectual property rights (\"Infringement\") of any person or entity.\n\nIf you are a copyright owner, or authorized on behalf of one, and you believe that the copyrighted work has been copied in a way that constitutes copyright infringement, please submit your claim via email to  https://replit.com/support, with the subject line: \"Copyright Infringement\" and include in your claim a detailed description of the alleged Infringement as detailed below, under \"DMCA Notice and Procedure for Copyright Infringement Claims\"\n\nYou may be held accountable for damages (including costs and attorneys' fees) for misrepresentation or bad-faith claims on the infringement of any User Content found on and/or through the Service on your copyright.\n\n## 17.  Indemnification","metadata":{"id":1818}}],["1819",{"pageContent":"## 17.  Indemnification\nYou agree to defend, indemnify and hold harmless Replit, Inc. and its licensee and licensors, and their employees, contractors, agents, officers and directors, from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not limited to attorneys' fees), resulting from or arising out of a) your use and access of the Service, by you or any person using your account and password; b) a breach of these Terms, or c) Content posted on the Service.\n\n## 18.  DMCA Notice and Procedure for Copyright Infringement Claims\nYou may submit a notification pursuant to the Digital Millennium Copyright Act (DMCA) by providing our Copyright Agent with the following information in writing (see 17 U.S.C 512(c)(3) for further detail):\n\n*   an electronic or physical signature of the person authorized to act on behalf of the owner of the copyright's interest;\n*   a description of the copyrighted work that you claim has been infringed, including the URL (i.e., web page address) of the location where the copyrighted work exists or a copy of the copyrighted work;\n*   identification of the URL or other specific location on the Service where the material that you claim is infringing is located;\n*   your address, telephone number, and email address;\n*   a statement by you that you have a good faith belief that the disputed use is not authorized by the copyright owner, its agent, or the law;\n*   a statement by you, made under penalty of perjury, that the above information in your notice is accurate and that you are the copyright owner or authorized to act on the copyright owner's behalf.\nYou can contact our Copyright Agent via email at: dmca@replit.com, or by mail at 767 Bryant Street #210, San Francisco, CA 94107.\n\n## 19.  Intellectual Property","metadata":{"id":1819}}],["1820",{"pageContent":"You can contact our Copyright Agent via email at: dmca@replit.com, or by mail at 767 Bryant Street #210, San Francisco, CA 94107.\n\n## 19.  Intellectual Property\nThe Service and its original content (excluding User Content provided by users), features and functionality, including without limitation, all intellectual property rights therein, are and will remain the exclusive property of Replit and its licensors. The Service is protected by copyright, trademark, and other laws of both the United States and foreign countries. Our trademarks and trade dress may not be used in connection with any product or service without the prior written consent of Replit.\n\n## 20.  Links To Third Party Websites, Advertisements and Services\nOur Service may contain links to third party web sites, advertisements or services that are not owned or controlled by Replit, including alongside your User Content or related to features of the Service.\n\nReplit has no control over, and to the fullest extent permitted by law, assumes no responsibility for the content, privacy policies, or practices of any third-party web sites or services. We do not warrant the offerings of any of these entities/individuals or their websites.","metadata":{"id":1820}}],["1821",{"pageContent":"You acknowledge and agree that Replit cannot and will not review, censor, endorse or edit the content of any third-party site, services or advertisements. Where the Service contains links to such third-party websites, services or advertisements, these links are provided for your information and convenience only. You acknowledge and agree that your use of any third-party websites, services and/or advertisements is at your own risk and that you should apply a suitable level of caution and discretion in accessing any such third-party links. When you click on any third-party links, the applicable third party’s terms and policies apply, not these Terms. To the fullest extent permitted by law, by using the Service, you expressly relieve Replit from any and all liability arising from your use of any third-party website, services or advertisements and/or from your use of or access to any third-party content made available through the Service, including without limitation, any User Content made available or accessed through your interactions with other users of the Service.\n\nYou acknowledge and agree that to the fullest extent permitted by law, Replit shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such third-party web sites or services.\n\n## 21.  Termination\nWe may terminate or suspend your account and bar access to the Service immediately, without prior notice or liability, under our sole discretion, for any reason whatsoever and without limitation, including but not limited to a breach of the Terms.\n\nIf you wish to terminate your account, go to [https://replit.com/account](https://replit.com/account) and click the “Request Account Deletion” button.","metadata":{"id":1821}}],["1822",{"pageContent":"If you wish to terminate your account, go to [https://replit.com/account](https://replit.com/account) and click the “Request Account Deletion” button.\n\nAll provisions of the Terms which by their nature should survive termination shall survive termination, including, without limitation, ownership provisions, warranty disclaimers, indemnity and limitations of liability.\n\n## 22.  Indemnification\nTo the maximum extent permitted by law, you agree to defend, indemnify and hold harmless Replit and its licensee and licensors, and their employees, contractors, agents, officers and directors and assigns from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, and expenses (including but not limited to attorneys' fees), resulting from or arising out of a) your use and access of the Service, by you or any person using your account and password; b) your breach or violation of these Terms; c) User Content posted on the Service and/or d) your violation of any law or regulation.\n\n## 23.  Limitation of Liability","metadata":{"id":1822}}],["1823",{"pageContent":"## 23.  Limitation of Liability\nIn no event shall Replit, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from (i) your access to or use of or inability to access or use the Service; (ii) any conduct or content of any third party on the Service; (iii) any content obtained from the Service; and (iv) unauthorized access, use or alteration of your transmissions or content, whether based on warranty, contract, tort (including negligence) or any other legal theory, whether or not we have been informed of the possibility of such damage, and even if a remedy set forth herein is found to have failed of its essential purpose. Replit’s total, cumulative liability for any claim, loss or damage arising out of or relating to these terms shall be one hundred dollars ($100.00 USD).\n\nNOTHING IN THESE TERMS SHALL LIMIT OR EXCLUDE OUR LIABILITY FOR: (X) DEATH OR PERSONAL INJURY RESULTING FROM OUR NEGLIGENCE OR THE NEGLIGENCE OF OUR EMPLOYEES, AGENTS OR SUBCONTRACTORS; (Y) FRAUD OR FRAUDULENT MISREPRESENTATION; OR (Z) ANY OTHER LIABILITY THAT CANNOT BE EXCLUDED BY APPLICABLE LAW.\n\n## 24.  Warranty Disclaimer\nYour use of the Service is at your sole risk. The Service is provided on an \"AS IS\" and \"AS AVAILABLE\" basis. To the fullest extent permitted by law, the Service is provided without warranties of any kind, whether express or implied, including, but not limited to, implied warranties of merchantability, fitness for a particular purpose, non-infringement or course of performance.","metadata":{"id":1823}}],["1824",{"pageContent":"Replit, Inc. its subsidiaries, affiliates, and its licensors do not warrant that a) the Service will function uninterrupted, be error-free, secure or available at any particular time or location; b) any errors or defects will be corrected; c) the Service is free of viruses or other harmful components; d) the results of using the Service will meet your requirements; or (d) that the Service and/or any content made available through the Service will be accurate or complete.\n\nReplit assumes no liability or responsibility for any errors, mistakes or inaccuracies of content, any personal injury or property damage, of any nature whatsoever, resulting from your access to and use of the Service, any unauthorized access to or use of our Service, any interruption or cessation of transmission to or from the Service, any bugs, viruses, Trojan horses or the like which may be transmitted to or through our Service by any third party and/or any errors or omissions in any content or for any loss or damage of any kind incurred as a result of the use of the Service and/or any content posted, emailed, transmitted or otherwise made available via the Service.\n\nSome jurisdictions do not allow for limited liability or exclusion of implied warranties, so not all of the above limitations and/or warranty disclaimers may apply to you. You acknowledge and understand that the disclaimers, exclusions and limitations of liability set forth herein form an essential basis of the agreement between the parties hereto, that the parties have relied upon such disclaimers, exclusions and limitations of liability, and that absent such disclaimers, exclusions and limitation of liability, the terms and conditions of these Terms would be substantially different.\n\n## 25.  California Civil Code §1789.3","metadata":{"id":1824}}],["1825",{"pageContent":"## 25.  California Civil Code §1789.3\nIn accordance with California Civil Code §1789.3, you may report complaints to the California Department of Consumer Affairs by contacting them in writing at 400 R. Street, Sacramento, CA 95814, or by telephone at (800) 952-5210.\n\n## 26.  Governing Law\nThese Terms shall be governed and construed in accordance with the laws of California, United States, without regard to its conflict of law provisions.\n\nOur failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and supersede and replace any prior agreements we might have had between us regarding the Service.\n\n## 27.  Assignment\nThese Terms and any rights and licenses granted hereunder, may not be transferred or assigned by you, but may be freely assigned by Replit without restriction.\n\n## 28.  Changes\nWe reserve the right, at our sole discretion, to modify or replace these Terms at any time.\n\nBy continuing to access or use our Service after any revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, you are no longer authorized to use the Service.\n\n\n## 29. hCaptcha","metadata":{"id":1825}}],["1826",{"pageContent":"## 29. hCaptcha\nWe use the hCaptcha anti-bot service (hereinafter \"hCaptcha\") on our website. This service is provided by Intuition Machines, Inc., a Delaware US Corporation (\"IMI\"). hCaptcha is used to check whether the data entered on our website (such as on a login page or contact form) has been entered by a human or by an automated program. To do this, hCaptcha analyzes the behavior of the website or mobile app visitor based on various characteristics. This analysis starts automatically as soon as the website or mobile app visitor enters a part of the website or app with hCaptcha enabled. For the analysis, hCaptcha evaluates various information (e.g. IP address, how long the visitor has been on the website or app, or mouse movements made by the user). The data collected during the analysis will be forwarded to IMI. hCaptcha analysis in the \"invisible mode\" may take place completely in the background. Website or app visitors are not advised that such an analysis is taking place if the user is not shown a challenge. Data processing is based on Art. 6(1)(f) of the GDPR (DSGVO): the website or mobile app operator has a legitimate interest in protecting its site from abusive automated crawling and spam. IMI acts as a \"data processor\" acting on behalf of its customers as defined under the GDPR, and a \"service provider\" for the purposes of the California Consumer Privacy Act (CCPA). For more information about hCaptcha and IMI's privacy policy and terms of use, please visit the following links: [https://hcaptcha.com/privacy/](https://hcaptcha.com/privacy/) and [https://hcaptcha.com/terms](https://hcaptcha.com/terms).\n\n## 30.  Contact Us\nIf you have any questions about these Terms, please contact us at [https://replit.com/support](https://replit.com/support).","metadata":{"id":1826}}]]